//### This file created by BYACC 1.8(/Java extension  1.15)
//### Java capabilities added 7 Jan 97, Bob Jamison
//### Updated : 27 Nov 97  -- Bob Jamison, Joe Nieten
//###           01 Jan 98  -- Bob Jamison -- fixed generic semantic constructor
//###           01 Jun 99  -- Bob Jamison -- added Runnable support
//###           06 Aug 00  -- Bob Jamison -- made state variables class-global
//###           03 Jan 01  -- Bob Jamison -- improved flags, tracing
//###           16 May 01  -- Bob Jamison -- added custom stack sizing
//###           04 Mar 02  -- Yuval Oren  -- improved java performance, added options
//###           14 Mar 02  -- Tomas Hurka -- -d support, static initializer workaround
//### Please send bug reports to tom@hukatronic.cz
//### static char yysccsid[] = "@(#)yaccpar	1.8 (Berkeley) 01/20/90";






//#line 2 ".\gramatica.y"
package compilador;
import java.io.File;
import java.util.ArrayList;
import java.util.Iterator;
//#line 22 "Parser.java"




public class Parser
{

boolean yydebug;        //do I want debug output?
int yynerrs;            //number of errors so far
int yyerrflag;          //was there an error?
int yychar;             //the current working character

//########## MESSAGES ##########
//###############################################################
// method: debug
//###############################################################
void debug(String msg)
{
  if (yydebug)
    System.out.println(msg);
}

//########## STATE STACK ##########
final static int YYSTACKSIZE = 500;  //maximum stack size
int statestk[] = new int[YYSTACKSIZE]; //state stack
int stateptr;
int stateptrmax;                     //highest index of stackptr
int statemax;                        //state when highest index reached
//###############################################################
// methods: state stack push,pop,drop,peek
//###############################################################
final void state_push(int state)
{
  try {
		stateptr++;
		statestk[stateptr]=state;
	 }
	 catch (ArrayIndexOutOfBoundsException e) {
     int oldsize = statestk.length;
     int newsize = oldsize * 2;
     int[] newstack = new int[newsize];
     System.arraycopy(statestk,0,newstack,0,oldsize);
     statestk = newstack;
     statestk[stateptr]=state;
  }
}
final int state_pop()
{
  return statestk[stateptr--];
}
final void state_drop(int cnt)
{
  stateptr -= cnt; 
}
final int state_peek(int relative)
{
  return statestk[stateptr-relative];
}
//###############################################################
// method: init_stacks : allocate and prepare stacks
//###############################################################
final boolean init_stacks()
{
  stateptr = -1;
  val_init();
  return true;
}
//###############################################################
// method: dump_stacks : show n levels of the stacks
//###############################################################
void dump_stacks(int count)
{
int i;
  System.out.println("=index==state====value=     s:"+stateptr+"  v:"+valptr);
  for (i=0;i<count;i++)
    System.out.println(" "+i+"    "+statestk[i]+"      "+valstk[i]);
  System.out.println("======================");
}


//########## SEMANTIC VALUES ##########
//public class ParserVal is defined in ParserVal.java


String   yytext;//user variable to return contextual strings
ParserVal yyval; //used to return semantic vals from action routines
ParserVal yylval;//the 'lval' (result) I got from yylex()
ParserVal valstk[];
int valptr;
//###############################################################
// methods: value stack push,pop,drop,peek.
//###############################################################
void val_init()
{
  valstk=new ParserVal[YYSTACKSIZE];
  yyval=new ParserVal();
  yylval=new ParserVal();
  valptr=-1;
}
void val_push(ParserVal val)
{
  if (valptr>=YYSTACKSIZE)
    return;
  valstk[++valptr]=val;
}
ParserVal val_pop()
{
  if (valptr<0)
    return new ParserVal();
  return valstk[valptr--];
}
void val_drop(int cnt)
{
int ptr;
  ptr=valptr-cnt;
  if (ptr<0)
    return;
  valptr = ptr;
}
ParserVal val_peek(int relative)
{
int ptr;
  ptr=valptr-relative;
  if (ptr<0)
    return new ParserVal();
  return valstk[ptr];
}
final ParserVal dup_yyval(ParserVal val)
{
  ParserVal dup = new ParserVal();
  dup.ival = val.ival;
  dup.dval = val.dval;
  dup.sval = val.sval;
  dup.obj = val.obj;
  return dup;
}
//#### end semantic value section ####
public final static short ID=257;
public final static short CTE=258;
public final static short CADENA=259;
public final static short IF=260;
public final static short THEN=261;
public final static short ELSE=262;
public final static short ENDIF=263;
public final static short OUT=264;
public final static short FUN=265;
public final static short RETURN=266;
public final static short BREAK=267;
public final static short ASIGNACION=268;
public final static short COMP_MAYOR_IGUAL=269;
public final static short COMP_MENOR_IGUAL=270;
public final static short COMP_DISTINTO=271;
public final static short WHEN=272;
public final static short DO=273;
public final static short UNTIL=274;
public final static short CONTINUE=275;
public final static short DOUBLE64=276;
public final static short UINT16=277;
public final static short DEFER=278;
public final static short CONST=279;
public final static short YYERRCODE=256;
final static short yylhs[] = {                           -1,
    0,    0,    0,    0,    0,    0,    1,    2,    2,    3,
    3,    4,    4,    4,    4,    6,    6,    6,    6,   11,
   11,    7,    7,    7,   14,   14,   15,   15,   16,   16,
   16,   16,   16,   16,   16,   16,   16,   16,   22,   22,
    8,    8,   23,   23,   23,   23,   23,   23,   23,   23,
   23,   23,   23,   23,   23,   23,   25,   25,   25,   21,
   21,   21,   21,   21,   21,   21,   21,   21,   21,   21,
   21,   21,   21,   19,   19,   19,   19,   19,   19,   19,
   19,   19,   19,   20,   20,   20,   20,   27,   27,   27,
   27,   27,   27,   27,   27,   27,   27,   27,   27,   27,
   29,   29,   30,   30,   30,   12,   12,   12,   12,   12,
   12,   12,   12,   12,   12,   12,   13,   13,   13,   13,
   13,   33,   33,   33,   36,   36,   35,   35,   37,   35,
    9,    9,    9,   38,   38,   39,   39,   39,   39,   39,
    5,    5,   41,   40,   40,   40,   40,   40,   45,   45,
   45,   31,   31,   31,   31,   31,   32,   32,   44,   44,
   28,   47,   47,   26,   46,   48,   48,   48,   48,   49,
   49,   17,   17,   17,   17,   17,   43,   43,   43,   43,
   43,   50,   50,   42,   42,   42,   42,   42,   42,   42,
   42,   53,   53,   53,   53,   53,   54,   54,   51,   52,
   24,   24,   24,   24,   24,   24,   55,   55,   55,   55,
   55,   55,   34,   34,   34,   56,   56,   56,   57,   57,
   57,   59,   59,   60,   60,   61,   61,   18,   18,   18,
   18,   18,   18,   18,   18,   18,   58,   58,   10,   10,
};
final static short yylen[] = {                            2,
    4,    3,    3,    3,    3,    0,    1,    1,    2,    1,
    1,    1,    1,    1,    1,    3,    2,    2,    2,    3,
    1,    4,    5,    3,    1,    2,    1,    1,    1,    2,
    1,    2,    1,    2,    1,    2,    1,    2,    1,    2,
    4,    5,    8,   11,   11,   11,   11,   14,   14,    7,
   10,   10,   10,   10,   13,   13,    1,    1,    2,    6,
    6,    6,    9,    9,   13,   11,   11,   13,   13,   13,
   11,   11,   12,    7,    8,    8,    6,    7,    7,    6,
    6,    7,    7,    5,    7,    4,    6,    1,    1,    1,
    4,    4,    3,    2,    3,    3,    3,    3,    2,    2,
    1,    2,    1,    1,    1,    6,    7,    6,    5,    5,
    5,    5,    6,    6,    6,    6,    5,    4,    3,    3,
    4,    1,    3,    5,    1,    3,    2,    1,    0,    2,
    3,    2,    2,    1,    3,    3,    2,    2,    1,    3,
    1,    2,    1,    1,    1,    1,    1,    1,    1,    1,
    1,    2,    4,    1,    3,    3,    2,    1,    1,    3,
    1,    5,    4,    1,    1,    1,    3,    2,    2,    1,
    2,    4,    3,    3,    4,    3,    7,    6,    6,    5,
    4,    1,    2,    6,    8,    5,    7,    5,    5,    7,
    6,    1,    3,    2,    2,    2,    1,    2,    1,    1,
    5,    4,    4,    4,    4,    2,    1,    1,    1,    1,
    1,    1,    3,    3,    1,    3,    3,    1,    1,    1,
    1,    3,    4,    1,    3,    1,    1,    5,    5,    4,
    4,    4,    4,    4,    4,    4,    1,    2,    1,    1,
};
final static short yydefred[] = {                         0,
    7,    0,    0,    0,    0,    0,    0,    0,    0,  164,
  240,  239,  143,    0,    0,    8,   10,   11,   12,   13,
   14,   15,    0,    0,    0,  144,  146,    0,    0,  141,
    0,  145,  147,  148,  161,  159,    0,    0,    0,    0,
    0,    0,  237,    0,    0,    0,    0,    0,  218,  220,
  221,    0,    0,    0,    0,    0,    0,    0,  133,    0,
    0,    2,    9,    0,   19,    0,   18,    0,    0,    0,
    0,    0,  149,  150,  151,    0,    0,    0,    0,  142,
    5,    0,    3,  173,    0,   20,    0,    0,  238,  207,
  208,  209,  206,  212,  210,  211,    0,    0,    0,    0,
    0,    0,  199,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,  138,    0,    0,  131,    0,   16,
    0,    0,    0,    0,   24,   27,    0,    0,   25,   28,
   29,   31,   33,   35,   37,    0,    0,    0,  152,    0,
  157,  170,    0,    0,  169,  171,  160,    1,  172,  175,
  226,  222,  227,    0,  224,    0,    0,    0,    0,    0,
  194,  197,    0,    0,    0,  196,  198,    0,    0,    0,
  216,  217,  233,  231,  234,    0,  232,    0,  230,    0,
    0,    0,    0,  127,    0,    0,  130,    0,    0,    0,
  181,    0,    0,  136,  140,  135,    0,    0,    0,    0,
    0,   30,   32,   34,   36,   38,   22,    0,   26,    0,
   41,    0,   88,  103,   89,    0,    0,  101,  104,  105,
    0,  165,  156,    0,  167,    0,    0,  223,  202,    0,
  203,    0,  188,    0,    0,  193,    0,  200,  189,  204,
  229,  228,  112,    0,    0,    0,  111,    0,    0,  110,
    0,    0,  183,    0,    0,    0,    0,  119,    0,    0,
    0,   23,   42,   94,    0,    0,  100,    0,    0,  102,
    0,  153,  162,  225,  201,  191,    0,  184,    0,  106,
  116,    0,  108,  115,    0,  114,    0,  178,    0,    0,
    0,    0,    0,    0,  121,    0,    0,    0,    0,   93,
    0,    0,    0,   96,   98,    0,    0,  190,  107,    0,
  124,  177,   59,   39,    0,    0,    0,    0,    0,    0,
  117,    0,    0,    0,    0,    0,    0,    0,    0,    0,
   91,   92,   84,    0,  185,    0,    0,    0,   40,    0,
   60,    0,   62,   61,    0,    0,   57,   58,    0,   80,
    0,    0,    0,    0,   81,    0,    0,    0,    0,  126,
    0,    0,    0,    0,    0,    0,   74,    0,    0,    0,
   82,   83,    0,    0,   85,    0,    0,    0,    0,    0,
    0,    0,    0,    0,   43,   75,   76,    0,    0,    0,
    0,    0,    0,    0,   63,    0,    0,    0,   64,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,   66,   44,
    0,    0,   67,   45,   71,   72,   46,   47,    0,    0,
    0,    0,   73,    0,    0,    0,    0,    0,    0,    0,
    0,   69,   70,   65,    0,   68,    0,    0,    0,   48,
   49,    0,    0,
};
final static short yydgoto[] = {                          3,
    4,   15,   16,   17,   18,   19,   20,   21,   22,   23,
   24,   25,  357,  138,  139,  324,  141,  142,  143,  144,
  145,  325,  358,   46,  304,  147,  226,  148,  227,  228,
  229,  230,  118,   47,  119,  321,  120,   60,   61,   30,
   31,   32,   33,   34,  156,   35,   36,   77,   78,  203,
  102,  247,  103,  104,   98,   48,   49,   50,   51,  164,
  165,
};
final static short yysindex[] = {                       -58,
    0, 1679,    0,  628,  -33,  -20,    5,  -35,  -20,    0,
    0,    0,    0,  -30, 1218,    0,    0,    0,    0,    0,
    0,    0,  -29,    2,  -57,    0,    0,  905,   31,    0,
  130,    0,    0,    0,    0,    0, 1241, 1265,   38, -171,
    9,   55,    0, -141,   60,  857,  -39,   62,    0,    0,
    0,   88,  110,   19,  -31,  -22,  -91,  -49,    0,   84,
  109,    0,    0,  112,    0,  120,    0, 1194,  -48,   18,
  142, -115,    0,    0,    0,    0, -113, 1474, -104,    0,
    0, 1288,    0,    0,   80,    0,   85,   27,    0,    0,
    0,    0,    0,    0,    0,    0,  -39,    9,  939, 1575,
    0,  -79,    0, 1592,    9,    9,    9,    9,    9,  147,
  149,   21,   34,  152,  -24,  116,  -40,  195,  198,  -10,
  205,  209,  151, 1314,    0,   24,   58,    0,   63,    0,
  -20,    1,  -20,  247,    0,    0,  161, 1669,    0,    0,
    0,    0,    0,    0,    0,  201,  886,  266,    0,  -28,
    0,    0, 1493,  -20,    0,    0,    0,    0,    0,    0,
    0,    0,    0,   23,    0,   40,   92,   69,  279,   94,
    0,    0, 1611,  639,  292,    0,    0,   62,   62,  123,
    0,    0,    0,    0,    0,  301,    0,  303,    0,   68,
  316,   50,   68,    0,  327,   68,    0,   68,  334, 1679,
    0, 1679,  273,    0,    0,    0,  156,   65,  322,  -66,
  -20,    0,    0,    0,    0,    0,    0,  300,    0,  305,
    0, 1512,    0,    0,    0,  174, 1421,    0,    0,    0,
 -104,    0,    0,  380,    0,  383,   82,    0,    0,  467,
    0,  405,    0,  639,  413,    0,  213,    0,    0,    0,
    0,    0,    0,   68,   68,  -51,    0,   68,  434,    0,
   68,  358,    0,  435,  967,  450,  501,    0,  390, 1705,
  254,    0,    0,    0, 1438,  -20,    0,  397,  407,    0,
  886,    0,    0,    0,    0,    0,  267,    0,  484,    0,
    0,   68,    0,    0,   68,    0,  486,    0,  295, 1050,
  293,  115,  294,  296,    0,  506, 1337,  -89,  989,    0,
  444,  446,  522,    0,    0,  286,  523,    0,    0,  539,
    0,    0,    0,    0, 1243,  525,  470,  540,  542,  -88,
    0,  543,   93,  -20,  544,  473,  479, 1050,  293,  294,
    0,    0,    0,  -20,    0,   68,  333,  480,    0,  481,
    0, 1050,    0,    0,  348, 1050,    0,    0,  346,    0,
  573,  528,  529,  370,    0,  596,  598, 1243,  599,    0,
  533,  118,  165, 1728, 1728,  601,    0,  606,  627,  -85,
    0,    0,  537,  562,    0, 1050, 1011,  629, 1022,  630,
  566,  567,  568,  569,    0,    0,    0, 1050,  192,  199,
 1531, 1050,  401,  432,    0, 1050,  433,  436,    0,  437,
  458,  460,  461, 1728, 1033, 1052,  462,  584,  614, 1541,
  681,  693, 1558,  695,  704,  705,  715,  716,  718,  660,
  662, 1050, 1050,  737,  534,  538,  545,  675,    0,    0,
  554,  677,    0,    0,    0,    0,    0,    0,  541,  556,
 1630, 1649,    0,  748,  760,  771,  570,  779,  577,  -84,
   11,    0,    0,    0,  782,    0,  783, 1050, 1050,    0,
    0, 1738, 1738,
};
final static short yyrindex[] = {                       843,
    0,    0,    0,    0,  429,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,  373,    0,    0,    0,    0,    0,  350,    0,    0,
    0,    0,    0,    0,  621,  621,    0,   15,    0,  180,
  727,    0,    0,  804,    0,  831,    0,    0,  795, 1360,
 1379,    0,    0,    0,    0, 1455,    0,    0,    0,    0,
    0,  855,    0,    0,  261,    0,  469,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
  217,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,  621,    0,   74,    0,   61,    0,
    0,    0,    0,    0,    0,  761,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,  582,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,  229,    0,    0,    0,    0,  406,  441,    0,
    0,    0,    0,    0,    0,  493,    0,  516,    0,    0,
    0,    0,    0,    0,    0,  621,    0,    0,    0,    0,
    0,  733,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,  608,    0,    0,    0,
    0,    0,    0, 1398,    0,  549,    0,    0,    0,  313,
    0,    0,    0,    0,  572,    0,    0,    0,    0,    0,
    0,    0,    0,  757,    0,    0,    0,    0,   90,    0,
    0,    0,    0,  597,    0,    0,  108,    0,    0,    0,
    0,    0,    0,    0,  610,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,  766,    0,    0,  621,    0,  659,    0,    0,    0,
  632,    0,  633,    0,    0,  126,    0,    0,    0,    0,
  616,  617, 1075,    0,    0,    0,  690,    0,    0,   97,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,  621,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
 1098,    0,    0,    0,    0,    0,    0,    0, 1122,    0,
    0,    0,    0,    0,    0,  145,    0, 1145, 1171,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,  243,    0,    0,  288,    0,    0,  475,  536,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,  603,    0,  605,    0,    0,    0,
    0,    0,    0,
};
final static short yygindex[] = {                         0,
    0,   51,  361,  -67,  974,    0,    0,    0,    0,  168,
   29,    0,  -60,    0, -120,  -68,   12,  297, -110, -108,
 -101, 1499,  -65,   -7, 1320, 1020,  634, 1085,  676, -176,
   20,   35,  -19,  842, -154,  551,    0,  773,    0,  877,
    0,    0,    0,    0,   28,  759,  834,    0,  838,  102,
  815,  674, -130,  820,    6,  442,  445,  -41,    0,    0,
  688,
};
final static int YYTABLESIZE=2016;
static short yytable[];
static { yytable();}
static void yytable(){
yytable = new short[]{                        140,
  136,   57,  146,  105,   56,  106,  292,  137,  115,  116,
   40,  127,   41,   26,  139,   26,  191,  219,  121,   45,
   96,   94,   95,  214,   44,  215,   26,   41,   59,   65,
  233,  124,  216,  190,  356,  335,  122,  398,  468,   26,
  208,  259,   26,  248,   54,   44,  163,   74,   26,   26,
  280,   66,  107,   44,   38,   76,  270,   26,  139,  114,
   67,  186,   75,  238,    2,   68,  237,  162,   86,  140,
  136,   44,  220,  139,  188,  150,  149,  218,  224,  185,
  239,  225,   44,   26,   44,   64,  223,   82,   79,   26,
  256,   74,  187,   26,   88,  192,   84,   74,  280,  152,
   93,  122,  166,  108,   44,  266,   75,  255,  109,   44,
   26,   26,   75,  248,  128,   26,   89,  128,  122,   96,
   94,   95,  105,  207,  106,  210,   44,  105,  110,  106,
  123,  128,  241,  469,  105,   26,  106,  125,  159,  139,
  320,   69,  128,  160,    6,  212,  236,  123,    7,  308,
  111,   70,  129,  224,  125,   40,    9,   10,  224,   71,
  154,  279,   13,  250,   26,  105,  278,  106,   10,  123,
  334,  334,   74,  193,  334,  334,  132,  132,  130,  132,
  132,  132,  174,  175,   26,   26,  333,   75,  214,  355,
  215,  320,  355,  355,  269,  163,  302,  216,    1,  303,
  151,  140,  136,  271,  301,  183,  224,  184,  125,  312,
  189,   26,  224,   26,  311,  225,  194,  361,  126,   39,
  223,   55,  117,  117,   11,   12,   58,   64,  232,   90,
   91,   92,  120,  323,   39,  195,   42,   43,  140,  136,
  302,  196,  337,  340,   11,   12,  197,  336,  339,  199,
  118,   11,   12,   11,   12,   26,  349,   42,   43,  350,
  174,   52,  198,   53,  348,   42,   43,  363,  313,   50,
  334,  139,  362,  200,  139,  112,  132,  113,  139,  139,
  139,  204,  117,  161,   43,  217,  139,  139,  355,  323,
  139,  139,  139,  139,   42,   43,   42,   43,   27,  349,
   27,  262,  384,  263,  132,  349,  349,  383,  392,  394,
  212,   27,  205,  391,  393,  205,   42,   43,  403,   58,
  407,   42,   43,  231,   27,  221,  364,   27,   90,   91,
   92,  242,  349,   27,   27,  419,  369,  243,  161,   43,
  418,  197,   27,   11,   12,  349,  403,  407,  431,  215,
  249,  349,  334,  430,  349,  244,  245,  253,  132,  251,
  257,  252,  268,  117,  105,  260,  106,   51,   27,  120,
  120,  205,  219,  254,   27,   63,  327,  328,   27,  387,
  388,  120,  349,  349,  258,  174,   69,  118,  118,    6,
  215,  261,  215,    7,  215,   27,   27,  264,   63,  118,
   27,    9,   10,  349,  349,  213,   50,   50,  215,  215,
  215,  215,   52,  219,  219,  219,  265,  219,   50,  219,
   27,  290,  291,  293,  272,  294,  389,  390,  296,  273,
  213,  219,  219,  219,  219,  205,  132,  205,  282,  132,
  214,  283,   63,  132,  132,  132,  213,  276,  213,   27,
  213,  132,  132,  415,  388,  132,  132,  132,  132,  319,
  416,  390,  117,  286,  213,  213,  213,  213,  176,   27,
   27,  288,  215,  197,  215,  289,  197,  295,  192,  192,
  197,  214,  297,  214,  202,  214,  165,   21,  197,  197,
  195,  195,  236,  298,  197,  219,   27,  219,   27,  214,
  214,  214,  214,   69,   51,   51,  211,  285,  305,  105,
    7,  106,  307,  117,  309,  235,   51,  174,  133,   10,
  174,  314,  174,  174,  174,  174,  174,  174,  213,  317,
  213,  315,  174,  174,  174,  174,  174,  174,  174,  174,
   27,  306,  318,  105,  322,  106,  178,  179,  163,   52,
   52,   69,  181,  182,  131,  326,  329,  330,    7,  344,
  202,   52,  202,  214,  331,  214,  133,   10,  341,  205,
  342,  186,  205,  205,  205,  205,  205,  205,  205,  205,
  343,  345,  346,  351,  205,  205,  205,  205,  205,  205,
  205,  205,  352,  176,  371,  213,  180,  366,  353,   53,
  354,  360,  365,  367,  372,  373,  215,  334,  376,  215,
  215,  215,  215,  215,  215,  215,  215,  236,  215,  215,
  215,  215,  215,  215,  215,  215,  215,  215,  215,  219,
  380,  377,  219,  219,  219,  219,  219,  219,  219,  219,
  235,  219,  219,  219,  219,  219,  219,  219,  219,  219,
  219,  219,  378,  379,  381,  386,  382,  385,  179,  395,
   54,  399,  213,  421,  396,  213,  213,  213,  213,  213,
  213,  213,  213,  163,  213,  213,  213,  213,  213,  213,
  213,  213,  213,  213,  213,  397,  400,  405,  409,  187,
  410,  411,  412,  413,  422,  424,  186,  214,  425,  426,
  214,  214,  214,  214,  214,  214,  214,  214,  435,  214,
  214,  214,  214,  214,  214,  214,  214,  214,  214,  214,
  427,  180,  428,  429,  434,  176,  134,   55,  176,   56,
  176,  176,  176,  176,  176,  176,   53,   53,  436,  439,
  176,  176,  176,  176,  176,  176,  176,  176,   53,  236,
   37,  440,  236,  443,  236,  236,  236,  236,  236,  236,
  137,  100,  444,  445,  236,  236,  236,  236,  236,  236,
  236,  236,  235,  446,  447,  235,  448,  235,  235,  235,
  235,  235,  235,  179,  449,  134,  450,  235,  235,  235,
  235,  235,  235,  235,  235,  453,  454,   54,   54,  457,
  455,  459,  460,   21,  137,  163,  462,  456,  163,   54,
  163,  163,  163,  163,  187,  163,  458,  461,  463,  137,
  163,  163,  163,  163,  163,  163,  163,  163,  186,  464,
   17,  186,  465,  186,  186,  186,  186,  466,  186,  467,
  470,  471,    6,  186,  186,  186,  186,  186,  186,  186,
  186,  134,  165,  180,    4,  168,  180,  182,  180,  180,
  180,  180,   21,  180,   55,   55,   56,   56,  180,  180,
  180,  180,  180,  180,  180,  180,   55,  129,   56,  109,
   85,   90,   87,   99,    5,  137,   97,    6,  113,   95,
   97,    7,    8,   57,   58,   69,  370,  275,    6,    9,
   10,  206,    7,   11,   12,   13,   14,   80,  234,  153,
    9,   10,  157,  170,  316,  179,   13,  287,  179,  173,
  179,  179,  179,  179,  284,  179,    0,    0,   21,    0,
  179,  179,  179,  179,  179,  179,  179,  179,    0,  167,
    0,    0,    0,    0,    0,    0,  187,    0,  180,  187,
    0,  187,  187,  187,  187,   17,  187,    0,    0,    0,
    0,  187,  187,  187,  187,  187,  187,  187,  187,    0,
    0,    0,    0,  209,    0,    0,    0,    0,    0,  100,
    0,    0,    0,  134,    0,    0,  134,    0,    0,    0,
  134,  134,  134,    0,    0,    0,    0,    0,  134,  134,
    0,   73,  134,  134,  134,  134,    0,  240,  222,    0,
    0,    0,    0,    0,    0,    0,    0,  137,    0,  101,
  137,   28,    0,   28,  137,  137,  137,   72,    0,    0,
    0,    0,  137,  137,   28,    0,  137,  137,  137,  137,
    0,    0,    0,    0,    0,   73,    0,   28,    0,  267,
   28,   73,    0,    0,    0,    0,   28,   28,    0,    0,
   21,  100,    0,   21,    0,   28,    0,   21,   21,   21,
    0,    0,  101,  172,    0,   21,   21,  177,    0,   21,
   21,   21,   21,    0,    0,    0,   29,   17,   29,  300,
   17,   28,    0,    0,   17,   17,   17,   28,   28,   29,
    0,   28,   17,   17,    0,    0,   17,   17,   17,   17,
    0,  338,   29,   69,    0,   29,    6,   99,   28,   28,
    7,   29,   29,   28,    0,    0,   73,    0,    9,   10,
   29,    0,    0,  402,   13,    0,    0,    0,    0,    0,
    0,    0,   69,   28,  406,  131,  177,  101,    0,    7,
    0,  132,   70,    0,    0,  432,   29,  133,   10,    0,
   71,   69,   29,  134,    6,    0,   29,    0,    7,    0,
    0,   70,   28,    0,  433,    0,    9,   10,    0,   71,
    0,    0,   13,   29,   29,    0,    0,    0,   29,    0,
    0,    0,   28,   28,    0,   69,    0,    0,    6,   86,
  168,  169,    7,    0,    0,    0,    0,    0,   29,    0,
    9,   10,    0,    0,    0,    0,   13,  101,    0,   28,
    0,   28,   77,   69,    0,    0,  131,    0,    0,    0,
    7,    0,  132,    0,    0,    0,    0,   29,  133,   10,
    0,    0,    0,    0,  299,   69,   87,    0,  131,    0,
  281,    0,    7,    0,  132,    0,    0,   29,   29,    0,
  133,   10,    0,   28,    0,    0,  134,   69,    0,   78,
  131,    0,    0,    0,    7,    0,  132,    0,   69,    0,
    0,  131,  133,   10,   29,    7,   29,  132,  299,   69,
    0,    0,  211,  133,   10,   79,    7,    0,    0,  299,
    0,    0,    0,    0,  133,   10,   69,    0,   69,  211,
  134,  211,    0,    7,    0,    7,    0,    0,  135,    0,
    0,  133,   10,  133,   10,    0,    0,  134,   29,  134,
    0,   86,    0,    0,   86,    0,   86,   86,   86,   86,
   86,   86,   62,    0,    0,    0,   86,   86,   86,   86,
   86,   86,   86,   86,   77,    0,    0,   77,    0,   77,
   77,   77,   77,   77,   77,   81,    0,  347,    0,   77,
   77,   77,   77,   77,   77,   77,   77,    0,   87,    0,
    0,   87,    0,   87,   87,   87,   87,   87,   87,   83,
    0,    0,    0,   87,   87,   87,   87,   87,   87,   87,
   87,   78,    0,    0,   78,    0,   78,   78,   78,   78,
   78,   78,  158,    0,    0,    0,   78,   78,   78,   78,
   78,   78,   78,   78,    0,    0,    0,   79,    0,    0,
   79,    0,   79,   79,   79,   79,   79,   79,  201,    0,
    0,    0,   79,   79,   79,   79,   79,   79,   79,   79,
    5,    0,    0,  131,    0,    0,    0,    7,    8,  132,
    0,  332,    0,    0,    0,  133,   10,    0,    0,   11,
   12,  134,   14,    0,    5,    0,    0,    6,    0,    0,
    0,    7,    8,    0,  154,    0,    0,    0,    0,    9,
   10,    0,    0,   11,   12,   13,   14,    5,    0,   69,
    6,    0,  131,  158,    7,    8,    7,    0,  132,    0,
    0,    0,    9,   10,  133,   10,   11,   12,   13,   14,
  134,    5,  155,    0,    6,    0,    0,    0,    7,    8,
    0,    0,    0,    0,    0,    0,    9,   10,    0,    0,
   11,   12,   13,   14,    5,  277,    0,    6,    0,    0,
    0,    7,    8,    0,    0,    0,    0,    0,    0,    9,
   10,    0,  310,   11,   12,   13,   14,    0,    0,    0,
    5,    0,    0,    6,    0,    0,    0,    7,    8,  170,
    0,    0,    0,    0,    0,    9,   10,    0,    0,   11,
   12,   13,   14,    5,    0,    0,  211,    0,  155,    0,
    7,    8,    0,    0,    0,    0,    0,    0,  133,   10,
    0,    0,   11,   12,  134,   14,  154,  235,    0,  154,
    0,    0,    0,  154,    0,  154,  154,    0,    0,    0,
    0,  154,  154,  154,  154,  158,  274,  154,  158,    0,
    0,    0,  158,    0,  158,  158,    0,    0,    0,  359,
  158,  158,  158,  158,  155,  417,  158,  155,    0,    0,
    0,  155,    0,  155,  155,  437,    0,    0,    0,  155,
  155,  155,  155,    0,    0,  155,    0,   69,    0,    0,
  131,    0,  441,    0,    7,    0,  132,   70,    0,    0,
    0,    0,  133,   10,   69,   71,    0,  131,  134,  171,
    0,    7,    0,  132,   70,    0,  404,    0,  408,  133,
   10,  170,   71,    0,  170,  134,  176,    0,  170,    0,
    0,  170,    0,    0,    0,    0,  170,  170,  166,  170,
   69,    0,  170,    6,    0,  246,    0,    7,    0,  438,
   70,    0,  442,    0,    0,    9,   10,    0,   71,   69,
    0,   13,    6,    0,  437,    0,    7,    0,    0,   70,
    0,    0,    0,    0,    9,   10,    0,   71,   69,    0,
   13,  211,    0,  441,    0,    7,    0,    0,   70,  404,
  408,    0,    0,  133,   10,    0,   71,   69,    0,  134,
  131,  438,  442,    0,    7,    0,  132,   69,    0,    0,
  131,    0,  133,   10,    7,    0,  132,    0,  134,    0,
    0,    0,  133,   10,   69,    0,    0,  131,  299,    0,
    0,    7,    0,  132,    0,    0,    0,    0,    0,  133,
   10,   69,    0,    0,    6,  299,  368,    0,    7,    0,
    0,    0,    0,    0,    0,    0,    9,   10,   69,    0,
  374,    6,   13,    0,  375,    7,    0,    0,    0,    0,
    0,    0,    0,    9,   10,    0,    0,   69,    0,   13,
    6,    0,    0,    0,    7,    0,    0,    0,    0,    0,
    0,    0,    9,   10,  401,    0,   69,    0,   13,  211,
    0,    0,    0,    7,    0,    0,  414,    0,    0,    0,
  420,  133,   10,    0,  423,   69,    0,  134,  211,    0,
    0,    0,    7,    0,    0,    0,    0,    0,    0,    0,
  133,   10,    0,    0,    0,    5,  134,    0,  131,    0,
  451,  452,    7,    8,  132,    5,    0,    0,    6,    0,
  133,   10,    7,    8,   11,   12,  134,   14,    0,    0,
    9,   10,    0,    0,   11,   12,   13,   14,    0,    0,
    0,    5,    0,    0,  211,    0,  472,  473,    7,    8,
    0,    0,    0,    0,    0,    0,  133,   10,    0,    0,
   11,   12,  134,   14,   69,    0,    0,  131,    0,    0,
    0,    7,    0,  132,   69,    0,    0,  131,    0,  133,
   10,    7,    0,  132,    0,  134,    0,    0,    0,  133,
   10,    0,    0,    0,    0,  299,
};
}
static short yycheck[];
static { yycheck(); }
static void yycheck() {
yycheck = new short[] {                         68,
   68,    9,   68,   43,   40,   45,   58,   68,   40,   41,
   44,   61,   61,    2,    0,    4,   41,  138,   41,   40,
   60,   61,   62,  134,   45,  134,   15,   61,   59,   59,
   59,  123,  134,   58,  123,  125,   56,  123,  123,   28,
   40,  196,   31,  174,   40,   45,   88,   28,   37,   38,
  227,   23,   47,   45,    4,   28,  123,   46,   44,   41,
   59,   41,   28,   41,  123,  123,   44,   41,   40,  138,
  138,   45,  138,   59,   41,   58,   59,  138,  147,   59,
   41,  147,   45,   72,   45,  257,  147,   37,   58,   78,
   41,   72,   59,   82,   40,  115,   59,   78,  275,   72,
   41,   41,   97,   42,   45,   41,   72,   58,   47,   45,
   99,  100,   78,  244,   41,  104,  258,   44,   58,   60,
   61,   62,   43,  131,   45,  133,   45,   43,   41,   45,
   41,   58,   41,  123,   43,  124,   45,   41,   59,  125,
  295,  257,   59,   59,  260,  134,  154,   58,  264,  270,
   41,  267,   44,  222,   58,   44,  272,  273,  227,  275,
  274,  227,  278,   41,  153,   43,  227,   45,  273,  261,
  260,  260,  153,   58,  260,  260,  266,  266,   59,    0,
  266,  266,  262,  263,  173,  174,  307,  153,  299,  278,
  299,  346,  278,  278,  261,  237,  265,  299,  257,  265,
   59,  270,  270,  211,  265,   59,  275,   59,  258,  275,
   59,  200,  281,  202,  275,  281,  257,  125,  268,  268,
  281,  257,   55,   56,  276,  277,  257,  257,  257,  269,
  270,  271,  125,  299,  268,   41,  257,  258,  307,  307,
  309,   44,  308,  309,  276,  277,  257,  308,  309,   41,
  125,  276,  277,  276,  277,  244,  325,  257,  258,  325,
    0,  257,   58,  259,  325,  257,  258,  333,  276,  125,
  260,  257,  333,  123,  260,  257,  266,  259,  264,  265,
  266,  258,  115,  257,  258,  125,  272,  273,  278,  355,
  276,  277,  278,  279,  257,  258,  257,  258,    2,  368,
    4,  200,  368,  202,  125,  374,  375,  368,  374,  375,
  299,   15,    0,  374,  375,  258,  257,  258,  387,  257,
  389,  257,  258,   58,   28,  125,  334,   31,  269,  270,
  271,  263,  401,   37,   38,  401,  344,   59,  257,  258,
  401,  125,   46,  276,  277,  414,  415,  416,  414,    0,
   59,  420,  260,  414,  423,  262,  263,  190,  266,   59,
  193,   59,   41,  196,   43,  198,   45,  125,   72,  262,
  263,   59,    0,   58,   78,   15,  262,  263,   82,  262,
  263,  274,  451,  452,   58,  125,  257,  262,  263,  260,
   41,   58,   43,  264,   45,   99,  100,  125,   38,  274,
  104,  272,  273,  472,  473,    0,  262,  263,   59,   60,
   61,   62,  125,   41,   42,   43,  261,   45,  274,   47,
  124,  254,  255,  256,  125,  258,  262,  263,  261,  125,
  134,   59,   60,   61,   62,  123,  257,  125,   59,  260,
    0,   59,   82,  264,  265,  266,   41,  274,   43,  153,
   45,  272,  273,  262,  263,  276,  277,  278,  279,  292,
  262,  263,  295,   59,   59,   60,   61,   62,    0,  173,
  174,   59,  123,  257,  125,  263,  260,   44,  262,  263,
  264,   41,  125,   43,  124,   45,   58,   59,  272,  273,
  262,  263,    0,   59,  278,  123,  200,  125,  202,   59,
   60,   61,   62,  257,  262,  263,  260,   41,   59,   43,
  264,   45,  123,  346,  261,    0,  274,  257,  272,  273,
  260,  125,  262,  263,  264,  265,  266,  267,  123,  263,
  125,  125,  272,  273,  274,  275,  276,  277,  278,  279,
  244,   41,   59,   43,   59,   45,  105,  106,    0,  262,
  263,  257,  108,  109,  260,  263,  263,  262,  264,  274,
  200,  274,  202,  123,   59,  125,  272,  273,  125,  257,
  125,    0,  260,  261,  262,  263,  264,  265,  266,  267,
   59,   59,   44,   59,  272,  273,  274,  275,  276,  277,
  278,  279,  123,  125,  262,  299,    0,  125,   59,  125,
   59,   59,   59,  125,  125,  125,  257,  260,  263,  260,
  261,  262,  263,  264,  265,  266,  267,  125,  269,  270,
  271,  272,  273,  274,  275,  276,  277,  278,  279,  257,
  261,   59,  260,  261,  262,  263,  264,  265,  266,  267,
  125,  269,  270,  271,  272,  273,  274,  275,  276,  277,
  278,  279,  125,  125,   59,  123,   59,   59,    0,   59,
  125,  125,  257,  263,   59,  260,  261,  262,  263,  264,
  265,  266,  267,  125,  269,  270,  271,  272,  273,  274,
  275,  276,  277,  278,  279,   59,  125,   59,   59,    0,
  125,  125,  125,  125,  263,  263,  125,  257,  263,  263,
  260,  261,  262,  263,  264,  265,  266,  267,  125,  269,
  270,  271,  272,  273,  274,  275,  276,  277,  278,  279,
  263,  125,  263,  263,  263,  257,    0,  125,  260,  125,
  262,  263,  264,  265,  266,  267,  262,  263,  125,   59,
  272,  273,  274,  275,  276,  277,  278,  279,  274,  257,
  123,   59,  260,   59,  262,  263,  264,  265,  266,  267,
    0,  123,   59,   59,  272,  273,  274,  275,  276,  277,
  278,  279,  257,   59,   59,  260,   59,  262,  263,  264,
  265,  266,  267,  125,  125,   59,  125,  272,  273,  274,
  275,  276,  277,  278,  279,   59,  263,  262,  263,  125,
  263,  125,  262,    0,   44,  257,   59,  263,  260,  274,
  262,  263,  264,  265,  125,  267,  263,  262,   59,   59,
  272,  273,  274,  275,  276,  277,  278,  279,  257,   59,
    0,  260,  263,  262,  263,  264,  265,   59,  267,  263,
   59,   59,    0,  272,  273,  274,  275,  276,  277,  278,
  279,  125,   58,  257,    0,  274,  260,  125,  262,  263,
  264,  265,   59,  267,  262,  263,  262,  263,  272,  273,
  274,  275,  276,  277,  278,  279,  274,  257,  274,  123,
   39,  274,   41,  274,  257,  125,   45,  260,  123,  274,
  274,  264,  265,  262,  262,  257,  346,  222,  260,  272,
  273,  129,  264,  276,  277,  278,  279,   31,  150,   72,
  272,  273,   79,   99,  281,  257,  278,  244,  260,  100,
  262,  263,  264,  265,  237,  267,   -1,   -1,  125,   -1,
  272,  273,  274,  275,  276,  277,  278,  279,   -1,   98,
   -1,   -1,   -1,   -1,   -1,   -1,  257,   -1,  107,  260,
   -1,  262,  263,  264,  265,  125,  267,   -1,   -1,   -1,
   -1,  272,  273,  274,  275,  276,  277,  278,  279,   -1,
   -1,   -1,   -1,  132,   -1,   -1,   -1,   -1,   -1,  123,
   -1,   -1,   -1,  257,   -1,   -1,  260,   -1,   -1,   -1,
  264,  265,  266,   -1,   -1,   -1,   -1,   -1,  272,  273,
   -1,   28,  276,  277,  278,  279,   -1,  166,  123,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,  257,   -1,   46,
  260,    2,   -1,    4,  264,  265,  266,  123,   -1,   -1,
   -1,   -1,  272,  273,   15,   -1,  276,  277,  278,  279,
   -1,   -1,   -1,   -1,   -1,   72,   -1,   28,   -1,  208,
   31,   78,   -1,   -1,   -1,   -1,   37,   38,   -1,   -1,
  257,  123,   -1,  260,   -1,   46,   -1,  264,  265,  266,
   -1,   -1,   99,  100,   -1,  272,  273,  104,   -1,  276,
  277,  278,  279,   -1,   -1,   -1,    2,  257,    4,  123,
  260,   72,   -1,   -1,  264,  265,  266,   78,   79,   15,
   -1,   82,  272,  273,   -1,   -1,  276,  277,  278,  279,
   -1,  123,   28,  257,   -1,   31,  260,  261,   99,  100,
  264,   37,   38,  104,   -1,   -1,  153,   -1,  272,  273,
   46,   -1,   -1,  123,  278,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,  257,  124,  123,  260,  173,  174,   -1,  264,
   -1,  266,  267,   -1,   -1,  123,   72,  272,  273,   -1,
  275,  257,   78,  278,  260,   -1,   82,   -1,  264,   -1,
   -1,  267,  153,   -1,  123,   -1,  272,  273,   -1,  275,
   -1,   -1,  278,   99,  100,   -1,   -1,   -1,  104,   -1,
   -1,   -1,  173,  174,   -1,  257,   -1,   -1,  260,  125,
  262,  263,  264,   -1,   -1,   -1,   -1,   -1,  124,   -1,
  272,  273,   -1,   -1,   -1,   -1,  278,  244,   -1,  200,
   -1,  202,  125,  257,   -1,   -1,  260,   -1,   -1,   -1,
  264,   -1,  266,   -1,   -1,   -1,   -1,  153,  272,  273,
   -1,   -1,   -1,   -1,  278,  257,  125,   -1,  260,   -1,
  231,   -1,  264,   -1,  266,   -1,   -1,  173,  174,   -1,
  272,  273,   -1,  244,   -1,   -1,  278,  257,   -1,  125,
  260,   -1,   -1,   -1,  264,   -1,  266,   -1,  257,   -1,
   -1,  260,  272,  273,  200,  264,  202,  266,  278,  257,
   -1,   -1,  260,  272,  273,  125,  264,   -1,   -1,  278,
   -1,   -1,   -1,   -1,  272,  273,  257,   -1,  257,  260,
  278,  260,   -1,  264,   -1,  264,   -1,   -1,  125,   -1,
   -1,  272,  273,  272,  273,   -1,   -1,  278,  244,  278,
   -1,  257,   -1,   -1,  260,   -1,  262,  263,  264,  265,
  266,  267,  125,   -1,   -1,   -1,  272,  273,  274,  275,
  276,  277,  278,  279,  257,   -1,   -1,  260,   -1,  262,
  263,  264,  265,  266,  267,  125,   -1,  125,   -1,  272,
  273,  274,  275,  276,  277,  278,  279,   -1,  257,   -1,
   -1,  260,   -1,  262,  263,  264,  265,  266,  267,  125,
   -1,   -1,   -1,  272,  273,  274,  275,  276,  277,  278,
  279,  257,   -1,   -1,  260,   -1,  262,  263,  264,  265,
  266,  267,  125,   -1,   -1,   -1,  272,  273,  274,  275,
  276,  277,  278,  279,   -1,   -1,   -1,  257,   -1,   -1,
  260,   -1,  262,  263,  264,  265,  266,  267,  125,   -1,
   -1,   -1,  272,  273,  274,  275,  276,  277,  278,  279,
  257,   -1,   -1,  260,   -1,   -1,   -1,  264,  265,  266,
   -1,  125,   -1,   -1,   -1,  272,  273,   -1,   -1,  276,
  277,  278,  279,   -1,  257,   -1,   -1,  260,   -1,   -1,
   -1,  264,  265,   -1,  125,   -1,   -1,   -1,   -1,  272,
  273,   -1,   -1,  276,  277,  278,  279,  257,   -1,  257,
  260,   -1,  260,  125,  264,  265,  264,   -1,  266,   -1,
   -1,   -1,  272,  273,  272,  273,  276,  277,  278,  279,
  278,  257,  125,   -1,  260,   -1,   -1,   -1,  264,  265,
   -1,   -1,   -1,   -1,   -1,   -1,  272,  273,   -1,   -1,
  276,  277,  278,  279,  257,  125,   -1,  260,   -1,   -1,
   -1,  264,  265,   -1,   -1,   -1,   -1,   -1,   -1,  272,
  273,   -1,  125,  276,  277,  278,  279,   -1,   -1,   -1,
  257,   -1,   -1,  260,   -1,   -1,   -1,  264,  265,  125,
   -1,   -1,   -1,   -1,   -1,  272,  273,   -1,   -1,  276,
  277,  278,  279,  257,   -1,   -1,  260,   -1,  125,   -1,
  264,  265,   -1,   -1,   -1,   -1,   -1,   -1,  272,  273,
   -1,   -1,  276,  277,  278,  279,  257,  125,   -1,  260,
   -1,   -1,   -1,  264,   -1,  266,  267,   -1,   -1,   -1,
   -1,  272,  273,  274,  275,  257,  125,  278,  260,   -1,
   -1,   -1,  264,   -1,  266,  267,   -1,   -1,   -1,  330,
  272,  273,  274,  275,  257,  125,  278,  260,   -1,   -1,
   -1,  264,   -1,  266,  267,  125,   -1,   -1,   -1,  272,
  273,  274,  275,   -1,   -1,  278,   -1,  257,   -1,   -1,
  260,   -1,  125,   -1,  264,   -1,  266,  267,   -1,   -1,
   -1,   -1,  272,  273,  257,  275,   -1,  260,  278,  125,
   -1,  264,   -1,  266,  267,   -1,  387,   -1,  389,  272,
  273,  257,  275,   -1,  260,  278,  125,   -1,  264,   -1,
   -1,  267,   -1,   -1,   -1,   -1,  272,  273,  274,  275,
  257,   -1,  278,  260,   -1,  125,   -1,  264,   -1,  420,
  267,   -1,  423,   -1,   -1,  272,  273,   -1,  275,  257,
   -1,  278,  260,   -1,  125,   -1,  264,   -1,   -1,  267,
   -1,   -1,   -1,   -1,  272,  273,   -1,  275,  257,   -1,
  278,  260,   -1,  125,   -1,  264,   -1,   -1,  267,  460,
  461,   -1,   -1,  272,  273,   -1,  275,  257,   -1,  278,
  260,  472,  473,   -1,  264,   -1,  266,  257,   -1,   -1,
  260,   -1,  272,  273,  264,   -1,  266,   -1,  278,   -1,
   -1,   -1,  272,  273,  257,   -1,   -1,  260,  278,   -1,
   -1,  264,   -1,  266,   -1,   -1,   -1,   -1,   -1,  272,
  273,  257,   -1,   -1,  260,  278,  338,   -1,  264,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,  272,  273,  257,   -1,
  352,  260,  278,   -1,  356,  264,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,  272,  273,   -1,   -1,  257,   -1,  278,
  260,   -1,   -1,   -1,  264,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,  272,  273,  386,   -1,  257,   -1,  278,  260,
   -1,   -1,   -1,  264,   -1,   -1,  398,   -1,   -1,   -1,
  402,  272,  273,   -1,  406,  257,   -1,  278,  260,   -1,
   -1,   -1,  264,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
  272,  273,   -1,   -1,   -1,  257,  278,   -1,  260,   -1,
  432,  433,  264,  265,  266,  257,   -1,   -1,  260,   -1,
  272,  273,  264,  265,  276,  277,  278,  279,   -1,   -1,
  272,  273,   -1,   -1,  276,  277,  278,  279,   -1,   -1,
   -1,  257,   -1,   -1,  260,   -1,  468,  469,  264,  265,
   -1,   -1,   -1,   -1,   -1,   -1,  272,  273,   -1,   -1,
  276,  277,  278,  279,  257,   -1,   -1,  260,   -1,   -1,
   -1,  264,   -1,  266,  257,   -1,   -1,  260,   -1,  272,
  273,  264,   -1,  266,   -1,  278,   -1,   -1,   -1,  272,
  273,   -1,   -1,   -1,   -1,  278,
};
}
final static short YYFINAL=3;
final static short YYMAXTOKEN=279;
final static String yyname[] = {
"end-of-file",null,null,null,null,null,null,null,null,null,null,null,null,null,
null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,
null,null,null,null,null,null,null,null,null,null,"'('","')'","'*'","'+'","','",
"'-'",null,"'/'",null,null,null,null,null,null,null,null,null,null,"':'","';'",
"'<'","'='","'>'",null,null,null,null,null,null,null,null,null,null,null,null,
null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,
null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,
null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,
"'{'",null,"'}'",null,null,null,null,null,null,null,null,null,null,null,null,
null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,
null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,
null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,
null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,
null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,
null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,
null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,
null,null,null,null,null,null,null,"ID","CTE","CADENA","IF","THEN","ELSE",
"ENDIF","OUT","FUN","RETURN","BREAK","ASIGNACION","COMP_MAYOR_IGUAL",
"COMP_MENOR_IGUAL","COMP_DISTINTO","WHEN","DO","UNTIL","CONTINUE","DOUBLE64",
"UINT16","DEFER","CONST",
};
final static String yyrule[] = {
"$accept : programa",
"programa : nombre_programa '{' sentencias '}'",
"programa : '{' sentencias '}'",
"programa : nombre_programa sentencias '}'",
"programa : nombre_programa '{' sentencias",
"programa : nombre_programa '{' '}'",
"programa :",
"nombre_programa : ID",
"sentencias : sentencia",
"sentencias : sentencias sentencia",
"sentencia : sentencia_declarativa",
"sentencia : sentencia_ejecutable",
"sentencia_declarativa : sentencia_declarativa_variables",
"sentencia_declarativa : funcion_con_return",
"sentencia_declarativa : funcion_sin_return",
"sentencia_declarativa : declaracion_constantes",
"sentencia_declarativa_variables : tipo lista_de_variables ';'",
"sentencia_declarativa_variables : tipo lista_de_variables",
"sentencia_declarativa_variables : lista_de_variables ';'",
"sentencia_declarativa_variables : tipo ';'",
"lista_de_variables : ID ',' lista_de_variables",
"lista_de_variables : ID",
"funcion_con_return : encabezado_funcion '{' sentencia_return '}'",
"funcion_con_return : encabezado_funcion '{' sentencias_funcion sentencia_return '}'",
"funcion_con_return : encabezado_funcion '{' '}'",
"sentencias_funcion : sentencia_funcion",
"sentencias_funcion : sentencias_funcion sentencia_funcion",
"sentencia_funcion : sentencia_declarativa",
"sentencia_funcion : sentencia_ejecutable_funcion",
"sentencia_ejecutable_funcion : asignacion",
"sentencia_ejecutable_funcion : DEFER asignacion",
"sentencia_ejecutable_funcion : imprimir",
"sentencia_ejecutable_funcion : DEFER imprimir",
"sentencia_ejecutable_funcion : sentencia_when_con_return",
"sentencia_ejecutable_funcion : DEFER sentencia_when_con_return",
"sentencia_ejecutable_funcion : sentencia_do_con_return",
"sentencia_ejecutable_funcion : DEFER sentencia_do_con_return",
"sentencia_ejecutable_funcion : sentencia_seleccion_simple_con_return",
"sentencia_ejecutable_funcion : DEFER sentencia_seleccion_simple_con_return",
"sentencias_ejecutables_funcion : sentencia_ejecutable_funcion",
"sentencias_ejecutables_funcion : sentencias_ejecutables_funcion sentencia_ejecutable_funcion",
"funcion_sin_return : encabezado_funcion '{' sentencia_seleccion_compuesta_con_return '}'",
"funcion_sin_return : encabezado_funcion '{' sentencias_funcion sentencia_seleccion_compuesta_con_return '}'",
"sentencia_seleccion_compuesta_con_return : IF condicion THEN sentencia_seleccion_compuesta_con_return_simple ELSE sentencia_seleccion_compuesta_con_return_simple ENDIF ';'",
"sentencia_seleccion_compuesta_con_return : IF condicion THEN '{' sentencias_ejecutables_funcion sentencia_return '}' ELSE sentencia_seleccion_compuesta_con_return_simple ENDIF ';'",
"sentencia_seleccion_compuesta_con_return : IF condicion THEN '{' sentencias_ejecutables_funcion sentencia_seleccion_compuesta_con_return '}' ELSE sentencia_seleccion_compuesta_con_return_simple ENDIF ';'",
"sentencia_seleccion_compuesta_con_return : IF condicion THEN sentencia_seleccion_compuesta_con_return_simple ELSE '{' sentencias_ejecutables_funcion sentencia_return '}' ENDIF ';'",
"sentencia_seleccion_compuesta_con_return : IF condicion THEN sentencia_seleccion_compuesta_con_return_simple ELSE '{' sentencias_ejecutables_funcion sentencia_seleccion_compuesta_con_return '}' ENDIF ';'",
"sentencia_seleccion_compuesta_con_return : IF condicion THEN '{' sentencias_ejecutables_funcion sentencia_return '}' ELSE '{' sentencias_ejecutables_funcion sentencia_seleccion_compuesta_con_return_simple '}' ENDIF ';'",
"sentencia_seleccion_compuesta_con_return : IF condicion THEN '{' sentencias_ejecutables_funcion sentencia_seleccion_compuesta_con_return '}' ELSE '{' sentencias_ejecutables_funcion sentencia_seleccion_compuesta_con_return_simple '}' ENDIF ';'",
"sentencia_seleccion_compuesta_con_return : IF condicion THEN sentencia_seleccion_compuesta_con_return_simple ELSE sentencia_seleccion_compuesta_con_return_simple ENDIF",
"sentencia_seleccion_compuesta_con_return : IF condicion THEN '{' sentencias_ejecutables_funcion sentencia_return '}' ELSE sentencia_seleccion_compuesta_con_return_simple ENDIF",
"sentencia_seleccion_compuesta_con_return : IF condicion THEN '{' sentencias_ejecutables_funcion sentencia_seleccion_compuesta_con_return '}' ELSE sentencia_seleccion_compuesta_con_return_simple ENDIF",
"sentencia_seleccion_compuesta_con_return : IF condicion THEN sentencia_seleccion_compuesta_con_return_simple ELSE '{' sentencias_ejecutables_funcion sentencia_return '}' ENDIF",
"sentencia_seleccion_compuesta_con_return : IF condicion THEN sentencia_seleccion_compuesta_con_return_simple ELSE '{' sentencias_ejecutables_funcion sentencia_seleccion_compuesta_con_return '}' ENDIF",
"sentencia_seleccion_compuesta_con_return : IF condicion THEN '{' sentencias_ejecutables_funcion sentencia_return '}' ELSE '{' sentencias_ejecutables_funcion sentencia_seleccion_compuesta_con_return_simple '}' ENDIF",
"sentencia_seleccion_compuesta_con_return : IF condicion THEN '{' sentencias_ejecutables_funcion sentencia_seleccion_compuesta_con_return '}' ELSE '{' sentencias_ejecutables_funcion sentencia_seleccion_compuesta_con_return_simple '}' ENDIF",
"sentencia_seleccion_compuesta_con_return_simple : sentencia_return",
"sentencia_seleccion_compuesta_con_return_simple : sentencia_seleccion_compuesta_con_return",
"sentencia_seleccion_compuesta_con_return_simple : DEFER sentencia_seleccion_compuesta_con_return",
"sentencia_seleccion_simple_con_return : IF condicion THEN sentencia_return ENDIF ';'",
"sentencia_seleccion_simple_con_return : IF condicion THEN sentencia_seleccion_compuesta_con_return ENDIF ';'",
"sentencia_seleccion_simple_con_return : IF condicion THEN sentencia_ejecutable_funcion ENDIF ';'",
"sentencia_seleccion_simple_con_return : IF condicion THEN '{' sentencias_ejecutables_funcion sentencia_return '}' ENDIF ';'",
"sentencia_seleccion_simple_con_return : IF condicion THEN '{' sentencias_ejecutables_funcion sentencia_seleccion_compuesta_con_return '}' ENDIF ';'",
"sentencia_seleccion_simple_con_return : IF condicion THEN '{' sentencias_ejecutables_funcion sentencia_return '}' ELSE '{' sentencias_ejecutables_funcion '}' ENDIF ';'",
"sentencia_seleccion_simple_con_return : IF condicion THEN '{' sentencias_ejecutables_funcion sentencia_return '}' ELSE sentencia_ejecutable_funcion ENDIF ';'",
"sentencia_seleccion_simple_con_return : IF condicion THEN '{' sentencias_ejecutables_funcion sentencia_seleccion_compuesta_con_return '}' ELSE sentencia_ejecutable_funcion ENDIF ';'",
"sentencia_seleccion_simple_con_return : IF condicion THEN '{' sentencias_ejecutables_funcion sentencia_seleccion_compuesta_con_return '}' ELSE '{' sentencias_ejecutables_funcion '}' ENDIF ';'",
"sentencia_seleccion_simple_con_return : IF condicion THEN '{' sentencias_ejecutables_funcion '}' ELSE '{' sentencias_ejecutables_funcion sentencia_return '}' ENDIF ';'",
"sentencia_seleccion_simple_con_return : IF condicion THEN '{' sentencias_ejecutables_funcion '}' ELSE '{' sentencias_ejecutables_funcion sentencia_seleccion_compuesta_con_return '}' ENDIF ';'",
"sentencia_seleccion_simple_con_return : IF condicion THEN sentencia_ejecutable_funcion ELSE '{' sentencias_ejecutables_funcion sentencia_return '}' ENDIF ';'",
"sentencia_seleccion_simple_con_return : IF condicion THEN sentencia_ejecutable_funcion ELSE '{' sentencias_ejecutables_funcion sentencia_seleccion_compuesta_con_return '}' ENDIF ';'",
"sentencia_seleccion_simple_con_return : IF condicion THEN '{' sentencias_ejecutables_funcion '}' ELSE '{' sentencias_ejecutables_funcion '}' ENDIF ';'",
"sentencia_when_con_return : WHEN condicion THEN '{' sentencia_funcion '}' ';'",
"sentencia_when_con_return : WHEN condicion THEN '{' sentencia_funcion sentencia_return '}' ';'",
"sentencia_when_con_return : WHEN condicion THEN '{' sentencia_funcion sentencia_seleccion_compuesta_con_return '}' ';'",
"sentencia_when_con_return : WHEN condicion THEN '{' sentencia_funcion '}'",
"sentencia_when_con_return : WHEN condicion THEN '{' sentencia_funcion sentencia_return '}'",
"sentencia_when_con_return : WHEN condicion THEN '{' sentencia_funcion sentencia_seleccion_compuesta_con_return '}'",
"sentencia_when_con_return : WHEN condicion THEN '{' '}' ';'",
"sentencia_when_con_return : WHEN condicion '{' sentencia_funcion '}' ';'",
"sentencia_when_con_return : WHEN condicion '{' sentencia_funcion sentencia_return '}' ';'",
"sentencia_when_con_return : WHEN condicion '{' sentencia_funcion sentencia_seleccion_compuesta_con_return '}' ';'",
"sentencia_do_con_return : keyword_do bloque_sentencias_ejecutables_do_con_return UNTIL condicion ';'",
"sentencia_do_con_return : sentencia_do_etiqueta ':' keyword_do bloque_sentencias_ejecutables_do_con_return UNTIL condicion ';'",
"sentencia_do_con_return : keyword_do bloque_sentencias_ejecutables_do_con_return UNTIL condicion",
"sentencia_do_con_return : sentencia_do_etiqueta ':' keyword_do bloque_sentencias_ejecutables_do_con_return UNTIL condicion",
"bloque_sentencias_ejecutables_do_con_return : sentencia_return",
"bloque_sentencias_ejecutables_do_con_return : sentencia_seleccion_compuesta_con_return",
"bloque_sentencias_ejecutables_do_con_return : sentencias_ejecutables_do_funcion",
"bloque_sentencias_ejecutables_do_con_return : '{' sentencias_ejecutables_do_funcion sentencia_return '}'",
"bloque_sentencias_ejecutables_do_con_return : '{' sentencias_ejecutables_do_funcion sentencia_seleccion_compuesta_con_return '}'",
"bloque_sentencias_ejecutables_do_con_return : '{' sentencias_ejecutables_do_funcion '}'",
"bloque_sentencias_ejecutables_do_con_return : '{' '}'",
"bloque_sentencias_ejecutables_do_con_return : '{' sentencias_ejecutables_do_funcion sentencia_return",
"bloque_sentencias_ejecutables_do_con_return : sentencias_ejecutables_do_funcion sentencia_return '}'",
"bloque_sentencias_ejecutables_do_con_return : '{' sentencias_ejecutables_do_funcion sentencia_seleccion_compuesta_con_return",
"bloque_sentencias_ejecutables_do_con_return : sentencias_ejecutables_do_funcion sentencia_seleccion_compuesta_con_return '}'",
"bloque_sentencias_ejecutables_do_con_return : '{' sentencias_ejecutables_do_funcion",
"bloque_sentencias_ejecutables_do_con_return : sentencias_ejecutables_do_funcion '}'",
"sentencias_ejecutables_do_funcion : sentencia_ejecutable_do_funcion",
"sentencias_ejecutables_do_funcion : sentencias_ejecutables_do_funcion sentencia_ejecutable_do_funcion",
"sentencia_ejecutable_do_funcion : sentencia_ejecutable_funcion",
"sentencia_ejecutable_do_funcion : sentencia_break",
"sentencia_ejecutable_do_funcion : sentencia_continue",
"encabezado_funcion : FUN ID '(' ')' ':' tipo",
"encabezado_funcion : FUN ID '(' lista_de_parametros ')' ':' tipo",
"encabezado_funcion : FUN ID '(' lista_de_parametros ')' tipo",
"encabezado_funcion : FUN ID '(' ')' ':'",
"encabezado_funcion : FUN '(' ')' ':' tipo",
"encabezado_funcion : FUN ID ')' ':' tipo",
"encabezado_funcion : FUN ID '(' ':' tipo",
"encabezado_funcion : FUN ID '(' lista_de_parametros ')' ':'",
"encabezado_funcion : FUN '(' lista_de_parametros ')' ':' tipo",
"encabezado_funcion : FUN ID lista_de_parametros ')' ':' tipo",
"encabezado_funcion : FUN ID '(' lista_de_parametros ':' tipo",
"sentencia_return : RETURN '(' expresion ')' ';'",
"sentencia_return : RETURN '(' expresion ')'",
"sentencia_return : RETURN expresion ')'",
"sentencia_return : RETURN '(' expresion",
"sentencia_return : RETURN '(' ')' ';'",
"lista_de_parametros : parametro",
"lista_de_parametros : parametro ',' parametro",
"lista_de_parametros : parametro ',' parametro ',' lista_parametros_exceso",
"lista_parametros_exceso : parametro",
"lista_parametros_exceso : parametro ',' lista_parametros_exceso",
"parametro : tipo ID",
"parametro : tipo",
"$$1 :",
"parametro : $$1 ID",
"declaracion_constantes : CONST lista_declaracion_constantes ';'",
"declaracion_constantes : CONST lista_declaracion_constantes",
"declaracion_constantes : CONST ';'",
"lista_declaracion_constantes : declaracion_constante",
"lista_declaracion_constantes : declaracion_constante ',' lista_declaracion_constantes",
"declaracion_constante : ID ASIGNACION CTE",
"declaracion_constante : ID ASIGNACION",
"declaracion_constante : ID CTE",
"declaracion_constante : ID",
"declaracion_constante : ID '=' CTE",
"sentencia_ejecutable : sentencia_ejecutable_simple",
"sentencia_ejecutable : keyword_defer sentencia_ejecutable_simple",
"keyword_defer : DEFER",
"sentencia_ejecutable_simple : asignacion",
"sentencia_ejecutable_simple : seleccion",
"sentencia_ejecutable_simple : imprimir",
"sentencia_ejecutable_simple : sentencia_when",
"sentencia_ejecutable_simple : sentencia_do",
"sentencia_ejecutable_do : sentencia_ejecutable",
"sentencia_ejecutable_do : sentencia_break",
"sentencia_ejecutable_do : sentencia_continue",
"sentencia_break : BREAK ';'",
"sentencia_break : BREAK ':' etiqueta ';'",
"sentencia_break : BREAK",
"sentencia_break : BREAK ':' etiqueta",
"sentencia_break : BREAK ':' ';'",
"sentencia_continue : CONTINUE ';'",
"sentencia_continue : CONTINUE",
"sentencia_do : sentencia_do_simple",
"sentencia_do : sentencia_do_etiqueta ':' sentencia_do_simple",
"sentencia_do_etiqueta : etiqueta",
"sentencia_do_simple : keyword_do bloque_sentencias_ejecutables_do UNTIL condicion ';'",
"sentencia_do_simple : keyword_do bloque_sentencias_ejecutables_do UNTIL condicion",
"keyword_do : DO",
"etiqueta : ID",
"bloque_sentencias_ejecutables_do : sentencia_ejecutable_do",
"bloque_sentencias_ejecutables_do : '{' sentencias_ejecutables_do '}'",
"bloque_sentencias_ejecutables_do : '{' sentencias_ejecutables_do",
"bloque_sentencias_ejecutables_do : sentencias_ejecutables_do '}'",
"sentencias_ejecutables_do : sentencia_ejecutable_do",
"sentencias_ejecutables_do : sentencias_ejecutables_do sentencia_ejecutable_do",
"asignacion : ID ASIGNACION expresion ';'",
"asignacion : ID ASIGNACION ';'",
"asignacion : ID ASIGNACION expresion",
"asignacion : ID '=' expresion ';'",
"asignacion : ID '=' expresion",
"sentencia_when : WHEN condicion THEN '{' sentencias_when '}' ';'",
"sentencia_when : WHEN condicion '{' sentencias_when '}' ';'",
"sentencia_when : WHEN condicion THEN '{' sentencias_when '}'",
"sentencia_when : WHEN condicion '{' sentencias_when '}'",
"sentencia_when : WHEN condicion '{' '}'",
"sentencias_when : sentencia",
"sentencias_when : sentencia sentencias_when",
"seleccion : IF condicion THEN bloque_sentencias_ejecutables_seleccion_then ENDIF ';'",
"seleccion : IF condicion THEN bloque_sentencias_ejecutables_seleccion_then ELSE bloque_sentencias_ejecutables_seleccion_else ENDIF ';'",
"seleccion : IF condicion THEN bloque_sentencias_ejecutables_seleccion_then ENDIF",
"seleccion : IF condicion THEN bloque_sentencias_ejecutables_seleccion_then ELSE bloque_sentencias_ejecutables_seleccion_else ENDIF",
"seleccion : IF condicion THEN ENDIF ';'",
"seleccion : IF condicion bloque_sentencias_ejecutables_seleccion_then ENDIF ';'",
"seleccion : IF condicion bloque_sentencias_ejecutables_seleccion_then ELSE bloque_sentencias_ejecutables_seleccion_else ENDIF ';'",
"seleccion : IF condicion THEN ELSE ENDIF ';'",
"bloque_sentencias_ejecutables_seleccion : sentencia_ejecutable",
"bloque_sentencias_ejecutables_seleccion : '{' sentencias_ejecutables '}'",
"bloque_sentencias_ejecutables_seleccion : '{' '}'",
"bloque_sentencias_ejecutables_seleccion : '{' sentencias_ejecutables",
"bloque_sentencias_ejecutables_seleccion : sentencias_ejecutables '}'",
"sentencias_ejecutables : sentencia_ejecutable",
"sentencias_ejecutables : sentencias_ejecutables sentencia_ejecutable",
"bloque_sentencias_ejecutables_seleccion_then : bloque_sentencias_ejecutables_seleccion",
"bloque_sentencias_ejecutables_seleccion_else : bloque_sentencias_ejecutables_seleccion",
"condicion : '(' expresion comparador expresion ')'",
"condicion : '(' expresion comparador ')'",
"condicion : '(' comparador expresion ')'",
"condicion : expresion comparador expresion ')'",
"condicion : '(' expresion comparador expresion",
"condicion : '(' ')'",
"comparador : COMP_MAYOR_IGUAL",
"comparador : COMP_MENOR_IGUAL",
"comparador : COMP_DISTINTO",
"comparador : '>'",
"comparador : '<'",
"comparador : '='",
"expresion : expresion '+' termino",
"expresion : expresion '-' termino",
"expresion : termino",
"termino : termino '*' factor",
"termino : termino '/' factor",
"termino : factor",
"factor : ID",
"factor : constante",
"factor : invocacion_funcion",
"invocacion_funcion : ID '(' ')'",
"invocacion_funcion : ID '(' lista_de_parametros_reales ')'",
"lista_de_parametros_reales : parametro_real",
"lista_de_parametros_reales : lista_de_parametros_reales ',' parametro_real",
"parametro_real : ID",
"parametro_real : constante",
"imprimir : OUT '(' CADENA ')' ';'",
"imprimir : OUT '(' ID ')' ';'",
"imprimir : OUT '(' ')' ';'",
"imprimir : OUT CADENA ')' ';'",
"imprimir : OUT '(' CADENA ';'",
"imprimir : OUT ID ')' ';'",
"imprimir : OUT '(' ID ';'",
"imprimir : OUT '(' CADENA ')'",
"imprimir : OUT '(' ID ')'",
"constante : CTE",
"constante : '-' CTE",
"tipo : UINT16",
"tipo : DOUBLE64",
};

//#line 765 ".\gramatica.y"

public static AnalizadorLexico lexico = null;
public static GeneracionCodigoIntermedio instance = GeneracionCodigoIntermedio.getInstance();
public static Logger logger = Logger.getInstance();
public static TablaDeSimbolos ts = TablaDeSimbolos.getInstance();
public static Parser parser = null;

public static StringBuilder negConstante = new StringBuilder();

public void constanteConSigno(String constante) {
	if (constante.contains(".")) {

		negConstante.setLength(0);
		negConstante.append("-");
		negConstante.append(constante);
		
		Double parsedDouble = Double.parseDouble(negConstante.toString().replace('D', 'E'));
		
		if (parsedDouble < -2.2250738585072014E-308 && -1.7976931348623157E+308 > parsedDouble) {
			logger.logWarning("[Parser] Rango invalido para la constante: " + negConstante + ", se trunca al rango permitido");
			
			if (-1.7976931348623157E+308 < parsedDouble) {
				negConstante.setLength(0);
				negConstante.append("-1.7976931348623157D+308");
			} else {
				negConstante.setLength(0);
				negConstante.append("-2.2250738585072014D-308");
			}
		}
		
		ts.swapLexemas(constante, negConstante.toString());
	} else {
		//se recibio un uint que fue aceptado por el lexico pero resulta ser negativo
		logger.logWarning("[Parser] No se admiten ui16 con obj[0]es negativos: " + "-"+constante + ", se trunca a 0");
		
		ts.swapLexemas(constante, "0");
	}
}	

public int yylex() {
	return lexico.yylex(parser);
}

public void yyerror(String error) {
	logger.logError(error);
}

public static void main(String[] args) {
	if (args.length == 0) {
		System.err.println("No se especifico ningun archivo de codigo");
	} else {
		String archivo_a_leer = args[0];
		System.out.println("Se va a leer archivo " + archivo_a_leer);
		
		FileReaderHelper fileHelper = new FileReaderHelper();
		
		boolean fileOpenSuccess = fileHelper.open(archivo_a_leer);
		
		if (fileOpenSuccess) {
			parser = new Parser();
			lexico = new AnalizadorLexico(fileHelper);
			
	        parser.run();
	
			String path = new File(archivo_a_leer).getAbsolutePath();
	        
	        Output out = new Output(path);
	        
	        String printTs = ts.print();
	        
	        out.saveFile("codigo-lexico.txt", logger.getLexico());
			out.saveFile("codigo-sintetico.txt", logger.getSintactico());
			out.saveFile("tabla-de-simbolos.txt", printTs);
	        
			System.out.println(printTs);

			GeneracionCodigoIntermedio instance = GeneracionCodigoIntermedio.getInstance();

			instance.printTercetos();
		}
	}
}
//#line 1103 "Parser.java"
//###############################################################
// method: yylexdebug : check lexer state
//###############################################################
void yylexdebug(int state,int ch)
{
String s=null;
  if (ch < 0) ch=0;
  if (ch <= YYMAXTOKEN) //check index bounds
     s = yyname[ch];    //now get it
  if (s==null)
    s = "illegal-symbol";
  debug("state "+state+", reading "+ch+" ("+s+")");
}





//The following are now global, to aid in error reporting
int yyn;       //next next thing to do
int yym;       //
int yystate;   //current parsing state from state table
String yys;    //current token string


//###############################################################
// method: yyparse : parse input and execute indicated items
//###############################################################
int yyparse()
{
boolean doaction;
  init_stacks();
  yynerrs = 0;
  yyerrflag = 0;
  yychar = -1;          //impossible char forces a read
  yystate=0;            //initial state
  state_push(yystate);  //save it
  val_push(yylval);     //save empty value
  while (true) //until parsing is done, either correctly, or w/error
    {
    doaction=true;
    if (yydebug) debug("loop"); 
    //#### NEXT ACTION (from reduction table)
    for (yyn=yydefred[yystate];yyn==0;yyn=yydefred[yystate])
      {
      if (yydebug) debug("yyn:"+yyn+"  state:"+yystate+"  yychar:"+yychar);
      if (yychar < 0)      //we want a char?
        {
        yychar = yylex();  //get next token
        if (yydebug) debug(" next yychar:"+yychar);
        //#### ERROR CHECK ####
        if (yychar < 0)    //it it didn't work/error
          {
          yychar = 0;      //change it to default string (no -1!)
          if (yydebug)
            yylexdebug(yystate,yychar);
          }
        }//yychar<0
      yyn = yysindex[yystate];  //get amount to shift by (shift index)
      if ((yyn != 0) && (yyn += yychar) >= 0 &&
          yyn <= YYTABLESIZE && yycheck[yyn] == yychar)
        {
        if (yydebug)
          debug("state "+yystate+", shifting to state "+yytable[yyn]);
        //#### NEXT STATE ####
        yystate = yytable[yyn];//we are in a new state
        state_push(yystate);   //save it
        val_push(yylval);      //push our lval as the input for next rule
        yychar = -1;           //since we have 'eaten' a token, say we need another
        if (yyerrflag > 0)     //have we recovered an error?
           --yyerrflag;        //give ourselves credit
        doaction=false;        //but don't process yet
        break;   //quit the yyn=0 loop
        }

    yyn = yyrindex[yystate];  //reduce
    if ((yyn !=0 ) && (yyn += yychar) >= 0 &&
            yyn <= YYTABLESIZE && yycheck[yyn] == yychar)
      {   //we reduced!
      if (yydebug) debug("reduce");
      yyn = yytable[yyn];
      doaction=true; //get ready to execute
      break;         //drop down to actions
      }
    else //ERROR RECOVERY
      {
      if (yyerrflag==0)
        {
        yyerror("syntax error");
        yynerrs++;
        }
      if (yyerrflag < 3) //low error count?
        {
        yyerrflag = 3;
        while (true)   //do until break
          {
          if (stateptr<0)   //check for under & overflow here
            {
            yyerror("stack underflow. aborting...");  //note lower case 's'
            return 1;
            }
          yyn = yysindex[state_peek(0)];
          if ((yyn != 0) && (yyn += YYERRCODE) >= 0 &&
                    yyn <= YYTABLESIZE && yycheck[yyn] == YYERRCODE)
            {
            if (yydebug)
              debug("state "+state_peek(0)+", error recovery shifting to state "+yytable[yyn]+" ");
            yystate = yytable[yyn];
            state_push(yystate);
            val_push(yylval);
            doaction=false;
            break;
            }
          else
            {
            if (yydebug)
              debug("error recovery discarding state "+state_peek(0)+" ");
            if (stateptr<0)   //check for under & overflow here
              {
              yyerror("Stack underflow. aborting...");  //capital 'S'
              return 1;
              }
            state_pop();
            val_pop();
            }
          }
        }
      else            //discard this token
        {
        if (yychar == 0)
          return 1; //yyabort
        if (yydebug)
          {
          yys = null;
          if (yychar <= YYMAXTOKEN) yys = yyname[yychar];
          if (yys == null) yys = "illegal-symbol";
          debug("state "+yystate+", error recovery discards token "+yychar+" ("+yys+")");
          }
        yychar = -1;  //read another
        }
      }//end error recovery
    }//yyn=0 loop
    if (!doaction)   //any reason not to proceed?
      continue;      //skip action
    yym = yylen[yyn];          //get count of terminals on rhs
    if (yydebug)
      debug("state "+yystate+", reducing "+yym+" by rule "+yyn+" ("+yyrule[yyn]+")");
    if (yym>0)                 //if count of rhs not 'nil'
      yyval = val_peek(yym-1); //get current semantic value
    yyval = dup_yyval(yyval); //duplicate yyval if ParserVal is used as semantic value
    switch(yyn)
      {
//########## USER-SUPPLIED ACTIONS ##########
case 1:
//#line 20 ".\gramatica.y"
{ 
		logger.logSuccess("[Parser] Programa correcto detectado");
		ArrayList<Terceto> deferTercetosAmbitoPrograma = instance.desapilarAmbitoParaDefer();
		Iterator<Terceto> it = deferTercetosAmbitoPrograma.listIterator();

		while(it.hasNext()) {
			Terceto tercetoDeferPrograma = it.next();
			instance.agregarTerceto(tercetoDeferPrograma);
		}
	}
break;
case 2:
//#line 30 ".\gramatica.y"
{ logger.logError("[Parser] Se esperaba un identificador nombre del programa"); }
break;
case 3:
//#line 31 ".\gramatica.y"
{ logger.logError("[Parser] Se esperaba un { antes de las sentencias del programa"); }
break;
case 4:
//#line 32 ".\gramatica.y"
{ logger.logError("[Parser] Se esperaba un } al final de las sentencias del programa"); }
break;
case 5:
//#line 33 ".\gramatica.y"
{ logger.logError("[Parser] Se esperaban sentencias del programa"); }
break;
case 6:
//#line 34 ".\gramatica.y"
{ logger.logError("[Parser] Se esperaban sentencias del programa"); }
break;
case 7:
//#line 38 ".\gramatica.y"
{	
		instance.agregarUsoAIdentificador(val_peek(0).obj[0], "nombre_programa");
		instance.apilarAmbitoParaDefer();
		instance.nuevoAmbito(val_peek(0).obj[0]);
	}
break;
case 16:
//#line 63 ".\gramatica.y"
{ 
		logger.logSuccess("[Parser] Declaracion de lista de variables detectado");
		instance.agregarTipoAListaDeVariables(val_peek(2).obj[1]);
	}
break;
case 17:
//#line 67 ".\gramatica.y"
{ logger.logError("[Parser] Se esperaba un ; al final de la lista de variables"); }
break;
case 18:
//#line 68 ".\gramatica.y"
{ logger.logError("[Parser] Se esperaba un tipo para la lista de variables"); }
break;
case 19:
//#line 69 ".\gramatica.y"
{ logger.logError("[Parser] Se esperaba una variable o lista de variables"); }
break;
case 20:
//#line 73 ".\gramatica.y"
{ 
		instance.agregarVariableADeclarar(val_peek(2).obj[0]);
	}
break;
case 21:
//#line 76 ".\gramatica.y"
{
		instance.agregarVariableADeclarar(val_peek(0).obj[0]);
	}
break;
case 22:
//#line 82 ".\gramatica.y"
{ 
		logger.logSuccess("[Parser] Declaracion de funcion detectado");  
		instance.salirAmbito();
		instance.agregarTerceto(new Terceto("Fin Funcion", "-", "-"));
		}
break;
case 23:
//#line 87 ".\gramatica.y"
{ 
		logger.logSuccess("[Parser] Declaracion de funcion detectado"); 
		instance.salirAmbito();
		instance.agregarTerceto(new Terceto("Fin Funcion", "-", "-"));
	}
break;
case 24:
//#line 92 ".\gramatica.y"
{ logger.logError("[Parser] Se esperaban sentencias en la funcion"); }
break;
case 41:
//#line 124 ".\gramatica.y"
{ logger.logSuccess("[Parser] Declaracion de funcion detectado"); }
break;
case 42:
//#line 125 ".\gramatica.y"
{ logger.logSuccess("[Parser] Declaracion de funcion detectado"); }
break;
case 43:
//#line 129 ".\gramatica.y"
{ logger.logSuccess("[Parser] Sentencia seleccion detectada"); }
break;
case 44:
//#line 130 ".\gramatica.y"
{ logger.logSuccess("[Parser] Sentencia seleccion detectada"); }
break;
case 45:
//#line 131 ".\gramatica.y"
{ logger.logSuccess("[Parser] Sentencia seleccion detectada"); }
break;
case 46:
//#line 132 ".\gramatica.y"
{ logger.logSuccess("[Parser] Sentencia seleccion detectada"); }
break;
case 47:
//#line 133 ".\gramatica.y"
{ logger.logSuccess("[Parser] Sentencia seleccion detectada"); }
break;
case 48:
//#line 134 ".\gramatica.y"
{ logger.logSuccess("[Parser] Sentencia seleccion detectada"); }
break;
case 49:
//#line 135 ".\gramatica.y"
{ logger.logSuccess("[Parser] Sentencia seleccion detectada"); }
break;
case 50:
//#line 136 ".\gramatica.y"
{ logger.logError("[Parser] Se esperaba un ; al final de la sentencia de seleccion"); }
break;
case 51:
//#line 137 ".\gramatica.y"
{ logger.logError("[Parser] Se esperaba un ; al final de la sentencia de seleccion"); }
break;
case 52:
//#line 138 ".\gramatica.y"
{ logger.logError("[Parser] Se esperaba un ; al final de la sentencia de seleccion"); }
break;
case 53:
//#line 139 ".\gramatica.y"
{ logger.logError("[Parser] Se esperaba un ; al final de la sentencia de seleccion"); }
break;
case 54:
//#line 140 ".\gramatica.y"
{ logger.logError("[Parser] Se esperaba un ; al final de la sentencia de seleccion"); }
break;
case 55:
//#line 141 ".\gramatica.y"
{ logger.logError("[Parser] Se esperaba un ; al final de la sentencia de seleccion"); }
break;
case 56:
//#line 142 ".\gramatica.y"
{ logger.logError("[Parser] Se esperaba un ; al final de la sentencia de seleccion"); }
break;
case 60:
//#line 152 ".\gramatica.y"
{ logger.logSuccess("[Parser] Sentencia de seleccion detectada"); }
break;
case 61:
//#line 153 ".\gramatica.y"
{ logger.logSuccess("[Parser] Sentencia de seleccion detectada"); }
break;
case 62:
//#line 154 ".\gramatica.y"
{ logger.logSuccess("[Parser] Sentencia de seleccion detectada"); }
break;
case 63:
//#line 155 ".\gramatica.y"
{ logger.logSuccess("[Parser] Sentencia de seleccion detectada"); }
break;
case 64:
//#line 156 ".\gramatica.y"
{ logger.logSuccess("[Parser] Sentencia de seleccion detectada"); }
break;
case 65:
//#line 157 ".\gramatica.y"
{ logger.logSuccess("[Parser] Sentencia de seleccion detectada"); }
break;
case 66:
//#line 158 ".\gramatica.y"
{ logger.logSuccess("[Parser] Sentencia de seleccion detectada"); }
break;
case 67:
//#line 159 ".\gramatica.y"
{ logger.logSuccess("[Parser] Sentencia de seleccion detectada"); }
break;
case 68:
//#line 160 ".\gramatica.y"
{ logger.logSuccess("[Parser] Sentencia de seleccion detectada"); }
break;
case 69:
//#line 161 ".\gramatica.y"
{ logger.logSuccess("[Parser] Sentencia de seleccion detectada"); }
break;
case 70:
//#line 162 ".\gramatica.y"
{ logger.logSuccess("[Parser] Sentencia de seleccion detectada"); }
break;
case 71:
//#line 163 ".\gramatica.y"
{ logger.logSuccess("[Parser] Sentencia de seleccion detectada"); }
break;
case 72:
//#line 164 ".\gramatica.y"
{ logger.logSuccess("[Parser] Sentencia de seleccion detectada"); }
break;
case 73:
//#line 165 ".\gramatica.y"
{ logger.logSuccess("[Parser] Sentencia de seleccion detectada"); }
break;
case 74:
//#line 169 ".\gramatica.y"
{ logger.logSuccess("[Parser] Sentencia when detectada"); }
break;
case 75:
//#line 170 ".\gramatica.y"
{ logger.logSuccess("[Parser] Sentencia when detectada"); }
break;
case 76:
//#line 171 ".\gramatica.y"
{ logger.logSuccess("[Parser] Sentencia when detectada"); }
break;
case 77:
//#line 172 ".\gramatica.y"
{ logger.logError("[Parser] Se esperaba ; al final de la sentencia when"); }
break;
case 78:
//#line 173 ".\gramatica.y"
{ logger.logError("[Parser] Se esperaba ; al final de la sentencia when"); }
break;
case 79:
//#line 174 ".\gramatica.y"
{ logger.logError("[Parser] Se esperaba ; al final de la sentencia when"); }
break;
case 80:
//#line 175 ".\gramatica.y"
{ logger.logError("[Parser] Se esperaban sentencias en la sentencia when"); }
break;
case 81:
//#line 176 ".\gramatica.y"
{ logger.logError("[Parser] Se esperaba la palabra reservada then en la sentencia when"); }
break;
case 82:
//#line 177 ".\gramatica.y"
{ logger.logError("[Parser] Se esperaba la palabra reservada then en la sentencia when"); }
break;
case 83:
//#line 178 ".\gramatica.y"
{ logger.logError("[Parser] Se esperaba la palabra reservada then en la sentencia when"); }
break;
case 84:
//#line 183 ".\gramatica.y"
{ 	logger.logSuccess("[Parser] Sentencia do until detectada"); 
		Terceto tercetoDo = instance.desapilarTerceto();
		int posPrimerTerceto = instance.desapilarPosicionTerceto();

		tercetoDo.setOperando2("[" + posPrimerTerceto + "]");

		ArrayList<Terceto> lista_breaks_do = instance.getListaTercetosBreakDo();
		Iterator<Terceto> it = lista_breaks_do.listIterator();

		while (it.hasNext()) {
			Terceto breakTerceto = it.next();
			breakTerceto.setOperando1("[" + instance.getTamanioListaTercetos() + "]");
		}
	
	}
break;
case 85:
//#line 199 ".\gramatica.y"
{ 
		logger.logSuccess("[Parser] Sentencia do until detectada");	}
break;
case 86:
//#line 201 ".\gramatica.y"
{ logger.logError("[Parser] Se esperaba un ; al final de la sentencia do"); }
break;
case 87:
//#line 202 ".\gramatica.y"
{ logger.logError("[Parser] Se esperaba un ; al final de la sentencia do"); }
break;
case 94:
//#line 212 ".\gramatica.y"
{ logger.logError("[Parser] Se esperaban sentencias en la sentencia do"); }
break;
case 95:
//#line 213 ".\gramatica.y"
{ logger.logError("[Parser] Se esperaba un } al final de la sentencia do"); }
break;
case 96:
//#line 214 ".\gramatica.y"
{ logger.logError("[Parser] Se esperaba un } al final de la sentencia do"); }
break;
case 97:
//#line 215 ".\gramatica.y"
{ logger.logError("[Parser] Se esperaba un } al final de la sentencia do"); }
break;
case 98:
//#line 216 ".\gramatica.y"
{ logger.logError("[Parser] Se esperaba un } al final de la sentencia do"); }
break;
case 99:
//#line 217 ".\gramatica.y"
{ logger.logError("[Parser] Se esperaba un } al final de la sentencia do"); }
break;
case 100:
//#line 218 ".\gramatica.y"
{ logger.logError("[Parser] Se esperaba un } al final de la sentencia do"); }
break;
case 106:
//#line 233 ".\gramatica.y"
{
		instance.agregarUsoAIdentificador(val_peek(4).obj[0], "nombre_funcion");
		instance.setTipo(val_peek(4).obj[0], val_peek(0).obj[0]);
		instance.nuevoAmbito(val_peek(4).obj[0]);
		instance.agregarTerceto(new Terceto("FUNCION", val_peek(4).obj[0], "-"));
	}
break;
case 107:
//#line 239 ".\gramatica.y"
{
		instance.agregarUsoAIdentificador(val_peek(5).obj[0], "nombre_funcion");
		instance.setTipo(val_peek(5).obj[0], val_peek(0).obj[0]);
	if (ts.has(val_peek(5).obj[0] + instance.getAmbito().toString())) {
		logger.logError("[Generacion de codigo] La funcion " + val_peek(5).obj[0] + " ya fue declarada");
	}
	else{
		instance.agregarTerceto(new Terceto("FUNCION", val_peek(5).obj[0], "-"));
		ts.swapLexemas(val_peek(5).obj[0], val_peek(5).obj[0] + instance.getAmbito().toString());
		instance.nuevoAmbito(val_peek(5).obj[0]);
		instance.agregarAmbitoParametros();
	}
	}
break;
case 108:
//#line 252 ".\gramatica.y"
{ logger.logError("[Parser] Se esperaba un : antes del tipo para la funcion"); }
break;
case 109:
//#line 253 ".\gramatica.y"
{ logger.logError("[Parser] Se esperaba un tipo de return para la funcion"); }
break;
case 110:
//#line 254 ".\gramatica.y"
{ logger.logError("[Parser] Se esperaba un identificador nombre para la funcion"); }
break;
case 111:
//#line 255 ".\gramatica.y"
{ logger.logError("[Parser] Se esperaba un ( luego del nombre de la funcion"); }
break;
case 112:
//#line 256 ".\gramatica.y"
{ logger.logError("[Parser] Se esperaba un ) luego del nombre para la funcion"); }
break;
case 113:
//#line 257 ".\gramatica.y"
{ logger.logError("[Parser] Se esperaba un tipo de return para la funcion"); }
break;
case 114:
//#line 258 ".\gramatica.y"
{ logger.logError("[Parser] Se esperaba un identificador nombre para la funcion"); }
break;
case 115:
//#line 259 ".\gramatica.y"
{ logger.logError("[Parser] Se esperaba un ( luego del nombre de la funcion"); }
break;
case 116:
//#line 260 ".\gramatica.y"
{ logger.logError("[Parser] Se esperaba un ) luego del nombre para la funcion"); }
break;
case 118:
//#line 265 ".\gramatica.y"
{ logger.logError("[Parser] Se esperaba un ; al final de la sentencia return"); }
break;
case 119:
//#line 266 ".\gramatica.y"
{ logger.logError("[Parser] Se esperaba un ( en la sentencia return"); }
break;
case 120:
//#line 267 ".\gramatica.y"
{ logger.logError("[Parser] Se esperaba un ) en la sentencia return"); }
break;
case 121:
//#line 268 ".\gramatica.y"
{ logger.logError("[Parser] Se esperaba una expresion en la sentencia return"); }
break;
case 124:
//#line 274 ".\gramatica.y"
{ logger.logError("[Parser] Hay mas de 2 parametros en la funcion"); }
break;
case 127:
//#line 283 ".\gramatica.y"
{
		instance.agregarParametro(val_peek(0).obj[0], val_peek(1).obj[0]);
	}
break;
case 129:
//#line 286 ".\gramatica.y"
{ logger.logError("[Parser] Se esperaba un identificador nombre para el parametro"); }
break;
case 130:
//#line 287 ".\gramatica.y"
{ logger.logError("[Parser] Se esperaba un tipo valido para el parametro"); }
break;
case 131:
//#line 291 ".\gramatica.y"
{ logger.logSuccess("[Parser] Declaracion de constantes detectado"); }
break;
case 132:
//#line 292 ".\gramatica.y"
{ logger.logError("[Parser] Se esperaba ; al final de la declaracion de constantes"); }
break;
case 133:
//#line 293 ".\gramatica.y"
{ logger.logError("[Parser] Se esperaba una lista de declaracion de constantes"); }
break;
case 137:
//#line 303 ".\gramatica.y"
{ logger.logError("[Parser] Se esperaba una constante del lado derecho de la asignacion"); }
break;
case 138:
//#line 304 ".\gramatica.y"
{ logger.logError("[Parser] Se esperaba el simbolo asignacion en la declaracion de constantes"); }
break;
case 139:
//#line 305 ".\gramatica.y"
{ logger.logError("[Parser] Se esperaba una asignacion en la declaracion de constantes"); }
break;
case 142:
//#line 311 ".\gramatica.y"
{
		instance.setApilarTercetoDefer(false);
	}
break;
case 143:
//#line 317 ".\gramatica.y"
{
		instance.setApilarTercetoDefer(true);
	}
break;
case 152:
//#line 337 ".\gramatica.y"
{ 
		logger.logSuccess("[Parser] Sentencia break detectada"); 
		Terceto tercetoBreak = new Terceto("BI", "-", "-");

		instance.agregarTercetoBreakAListaTercetosBreakDo(tercetoBreak);
		instance.agregarTerceto(tercetoBreak);
	}
break;
case 153:
//#line 344 ".\gramatica.y"
{ 
		logger.logSuccess("[Parser] Sentencia break con etiqueta detectada"); 

		Terceto tercetoBreak = new Terceto("BI", "-", "-");

		instance.agregarTerceto(tercetoBreak);
		instance.agregarTercetoBreakAEtiquetaDo(val_peek(1).obj[0], tercetoBreak);
	}
break;
case 154:
//#line 352 ".\gramatica.y"
{ logger.logError("[Parser] Se esperaba un ; luego de la sentencia break"); }
break;
case 155:
//#line 353 ".\gramatica.y"
{ logger.logError("[Parser] Se esperaba un ; luego de la sentencia break"); }
break;
case 156:
//#line 354 ".\gramatica.y"
{ logger.logError("[Parser] Se esperaba una etiqueta en la sentencia break"); }
break;
case 157:
//#line 358 ".\gramatica.y"
{ 
		logger.logSuccess("[Parser] Sentencia continue detectada"); 

		int posPrimeraInstruccionDo = instance.getUltimaPosicionTerceto();

		Terceto tercetoContinue = new Terceto("BI", "[" + String.valueOf(posPrimeraInstruccionDo) + "]", "-");
		instance.agregarTerceto(tercetoContinue);
	}
break;
case 158:
//#line 366 ".\gramatica.y"
{ logger.logError("[Parser] Se esperaba un ; al final de la sentencia continue"); }
break;
case 160:
//#line 371 ".\gramatica.y"
{
		ArrayList<Terceto> tercetos_etiqueta_break = instance.getTercetosBreakDeEtiquetaDo(val_peek(2).obj[0]);
		Iterator<Terceto> it = tercetos_etiqueta_break.listIterator();

		while(it.hasNext()) {
			Terceto tercetoBreakConEtiqueta = it.next();
			tercetoBreakConEtiqueta.setOperando1("[" + instance.getTamanioListaTercetos() + "]");
		}

		instance.borrarEtiquetaDo(val_peek(2).obj[0]);
	}
break;
case 161:
//#line 385 ".\gramatica.y"
{
		instance.agregarDoConEtiqueta(val_peek(0).obj[0]);
		yyval.obj[0] = val_peek(0).obj[0];
	}
break;
case 162:
//#line 392 ".\gramatica.y"
{ 
		logger.logSuccess("[Parser] Sentencia do until detectada"); 
		Terceto tercetoDo = instance.desapilarTerceto();
		int posPrimerTerceto = instance.desapilarPosicionTerceto();

		tercetoDo.setOperando2("[" + posPrimerTerceto + "]");

		ArrayList<Terceto> lista_breaks_do = instance.getListaTercetosBreakDo();
		Iterator<Terceto> it = lista_breaks_do.listIterator();

		while (it.hasNext()) {
			Terceto breakTerceto = it.next();
			breakTerceto.setOperando1("[" + instance.getTamanioListaTercetos() + "]");
		}
	}
break;
case 163:
//#line 407 ".\gramatica.y"
{ logger.logError("[Parser] Se esperaba un ; al final de la sentencia do"); }
break;
case 164:
//#line 411 ".\gramatica.y"
{
		instance.apilarPosicionTerceto(instance.getTamanioListaTercetos());
		instance.iniciarListaTercetosBreakDo();
	}
break;
case 165:
//#line 418 ".\gramatica.y"
{
		instance.agregarUsoAIdentificador(val_peek(0).obj[0], "nombre_etiqueta");
	}
break;
case 168:
//#line 426 ".\gramatica.y"
{ logger.logError("[Parser] Se esperaba un } al final de la sentencia do"); }
break;
case 169:
//#line 427 ".\gramatica.y"
{ logger.logError("[Parser] Se esperaba un { en la sentencia do"); }
break;
case 172:
//#line 437 ".\gramatica.y"
{ 
		logger.logSuccess("[Parser] Asignacion detectada"); 

		String[] par = ts.getTipo(val_peek(3).obj[0]);
		val_peek(3).obj[0] = par[0];
		val_peek(3).obj[1] = par[1];

		if (!val_peek(1).obj[0].contains("[") && ts.getToken(val_peek(1).obj[0]) != 258){
			String[] par1 = ts.getTipo(val_peek(1).obj[0]);
			val_peek(1).obj[0] = par1[0];
			val_peek(1).obj[1] = par1[1];
		}

		Terceto terceto = new Terceto(":=", val_peek(3).obj[0], val_peek(1).obj[0]);
		
		if (val_peek(3).obj[1] == null)
			logger.logError("[Generacion de Codigo] La variable " + val_peek(3).obj[0] + " No fue declarada" );
		else if (val_peek(1).obj[1] == null)
			logger.logError("[Generacion de Codigo] La variable " + val_peek(1).obj[0] + " No fue declarada" );
		else if (val_peek(3).obj[1].contains("ui16") && val_peek(1).obj[1].contains("ui16")){
			instance.agregarTerceto(terceto);
			yyval.obj[1] = "ui16";
		}
		else if (val_peek(3).obj[1].contains("f64") && val_peek(1).obj[1].contains("f64")){
			instance.agregarTerceto(terceto);
			yyval.obj[1] = "f64";
		}
		else if (val_peek(3).obj[1].contains("ui16") && val_peek(1).obj[1].contains("f64")){
			logger.logError("[Generacion de codigo] Incompatibilidad de tipos");
		}
		else if (val_peek(3).obj[1].contains("f64") && val_peek(1).obj[1].contains("ui16")){
			Terceto aux = new Terceto("itof", val_peek(1).obj[0], "-");
			terceto.setOperando2("[" + String.valueOf(instance.getTamanioListaTercetos() + "]"));
			instance.agregarTerceto(aux);
			instance.agregarTerceto(terceto);
			yyval.obj[1] = "f64";
		}
		yyval.obj[0] = val_peek(3).obj[0];
	}
break;
case 173:
//#line 478 ".\gramatica.y"
{logger.logError("[Parser] Se espera una expresion del lado derecho de la asignacion");}
break;
case 174:
//#line 479 ".\gramatica.y"
{ logger.logError("[Parser] Se espera un ; al final de la asignacion"); }
break;
case 175:
//#line 480 ".\gramatica.y"
{ logger.logError("[Parser] Se espera el simbolo =: en lugar de = para la asignacion"); }
break;
case 176:
//#line 481 ".\gramatica.y"
{ logger.logError("[Parser] Se espera el simbolo =: en lugar de = para la asignacion"); }
break;
case 177:
//#line 485 ".\gramatica.y"
{ logger.logSuccess("[Parser] Sentencia when detectada"); }
break;
case 178:
//#line 486 ".\gramatica.y"
{ logger.logError("[Parser] Se esperaba la palabra reservada then en la sentencia when"); }
break;
case 179:
//#line 487 ".\gramatica.y"
{ logger.logError("[Parser] Se esperaba un ; al final de la sentencia when"); }
break;
case 180:
//#line 488 ".\gramatica.y"
{ logger.logError("[Parser] Se esperaba la palabra reservada then en la sentencia when"); }
break;
case 181:
//#line 489 ".\gramatica.y"
{ logger.logError("[Parser] Se esperaban sentencias dentro del when"); }
break;
case 184:
//#line 499 ".\gramatica.y"
{ 
		logger.logSuccess("[Parser] Sentencia if then detectada");

		Terceto bi = instance.desapilarTerceto();
		bi.setOperando1("[" + String.valueOf(instance.getTamanioListaTercetos()) + "]");
	}
break;
case 185:
//#line 505 ".\gramatica.y"
{ 
		logger.logSuccess("[Parser] Sentencia if then else detectada"); 
		Terceto bi = instance.desapilarTerceto();
		bi.setOperando1("[" + String.valueOf(instance.getTamanioListaTercetos()) + "]");
	}
break;
case 186:
//#line 510 ".\gramatica.y"
{ logger.logError("[Parser] Se esperaba un ; al final de la sentencia seleccion"); }
break;
case 187:
//#line 511 ".\gramatica.y"
{ logger.logError("[Parser] Se esperaba un ; al final de la sentencia seleccion"); }
break;
case 188:
//#line 512 ".\gramatica.y"
{ logger.logError("[Parser] Se esperaban sentencias en la sentencia seleccion"); }
break;
case 189:
//#line 513 ".\gramatica.y"
{ logger.logError("[Parser] Se esperaban la palabra reservada then en la sentencia seleccion"); }
break;
case 190:
//#line 514 ".\gramatica.y"
{ logger.logError("[Parser] Se esperaban la palabra reservada then en la sentencia seleccion"); }
break;
case 191:
//#line 515 ".\gramatica.y"
{ logger.logError("[Parser] Se esperaban sentencias en la sentencia seleccion"); }
break;
case 194:
//#line 521 ".\gramatica.y"
{ logger.logError("[Parser] Se esperaban sentencias dentro de la seleccion"); }
break;
case 195:
//#line 522 ".\gramatica.y"
{ logger.logError("[Parser] Se esperaba un } al final de la seleccion"); }
break;
case 196:
//#line 523 ".\gramatica.y"
{ logger.logError("[Parser] Se esperaba un { en la seleccion"); }
break;
case 199:
//#line 532 ".\gramatica.y"
{


		Terceto t = instance.desapilarTerceto();

		t.setOperando2("[" + String.valueOf(instance.getTamanioListaTercetos() + 1) + "]");

		Terceto bi = new Terceto("BI", "-", "-");

		instance.agregarTerceto(bi);
		instance.apilarTerceto(bi);
	}
break;
case 201:
//#line 552 ".\gramatica.y"
{
		if (!val_peek(3).obj[0].contains("[")){
			String[] par = ts.getTipo(val_peek(3).obj[0]);
			val_peek(3).obj[0] = par[0];
			val_peek(3).obj[1] = par[1];
		}

		if (!val_peek(1).obj[0].contains("[")){
			String[] par1 = ts.getTipo(val_peek(1).obj[0]);
			val_peek(1).obj[0] = par1[0];
			val_peek(1).obj[1] = par1[1];
		}

		System.out.println("asdasdas" + val_peek(3).obj[0] + " " + val_peek(1).obj[0]);

		int tercetoPosicion = 0;

		Terceto terceto = new Terceto(val_peek(2).obj[0], val_peek(3).obj[0], val_peek(1).obj[0]);

		tercetoPosicion = instance.getTamanioListaTercetos();

		instance.agregarTerceto(terceto);
		
		yyval.obj[0] = "[" + tercetoPosicion + "]";

		terceto = new Terceto("BF", "[" + tercetoPosicion + "]", "-");

		instance.agregarTerceto(terceto);
		instance.apilarTerceto(terceto);

		yyval.obj[0] = "[" + tercetoPosicion + "]";
	}
break;
case 202:
//#line 584 ".\gramatica.y"
{ logger.logError("[Parser] Se esperaba un expresion del lado derecho de la comparacion"); }
break;
case 203:
//#line 585 ".\gramatica.y"
{ logger.logError("[Parser] Se esperaba un expresion del lado izquierdo de la comparacion"); }
break;
case 204:
//#line 586 ".\gramatica.y"
{ logger.logError("[Parser] Se esperaba un ( al comienzo de la comparacion"); }
break;
case 205:
//#line 587 ".\gramatica.y"
{ logger.logError("[Parser] Se esperaba un ) al final de la comparacion"); }
break;
case 206:
//#line 588 ".\gramatica.y"
{ logger.logError("[Parser] Se esperaba una comparacion"); }
break;
case 207:
//#line 592 ".\gramatica.y"
{yyval.obj[0] = ">=";}
break;
case 208:
//#line 593 ".\gramatica.y"
{yyval.obj[0] = "<=";}
break;
case 209:
//#line 594 ".\gramatica.y"
{yyval.obj[0] = "=!";}
break;
case 210:
//#line 595 ".\gramatica.y"
{yyval.obj[0] = ">";}
break;
case 211:
//#line 596 ".\gramatica.y"
{yyval.obj[0] = "<";}
break;
case 212:
//#line 597 ".\gramatica.y"
{yyval.obj[0] = "=";}
break;
case 213:
//#line 601 ".\gramatica.y"
{

		if (!val_peek(2).obj[0].contains("[") && ts.getToken(val_peek(2).obj[0]) != 258){
			String[] par = ts.getTipo(val_peek(2).obj[0]);
			val_peek(2).obj[0] = par[0];
			val_peek(2).obj[1] = par[1];
		}
		if (!val_peek(0).obj[0].contains("[") && ts.getToken(val_peek(0).obj[0]) != 258){
			String[] par = ts.getTipo(val_peek(0).obj[0]);
			val_peek(0).obj[0] = par[0];
			val_peek(0).obj[1] = par[1];
		}

		yyval.obj = instance.AgregarTercetoExpresiones(yyval.obj[0], yyval.obj[1], val_peek(2).obj[0], val_peek(2).obj[1], val_peek(0).obj[0], val_peek(0).obj[1], "+");

	}
break;
case 214:
//#line 617 ".\gramatica.y"
{

		if (!val_peek(2).obj[0].contains("[") && ts.getToken(val_peek(2).obj[0]) != 258){
			String[] par = ts.getTipo(val_peek(2).obj[0]);
			val_peek(2).obj[0] = par[0];
			val_peek(2).obj[1] = par[1];
		}
		if (!val_peek(0).obj[0].contains("[") && ts.getToken(val_peek(0).obj[0]) != 258){
			String[] par = ts.getTipo(val_peek(0).obj[0]);
			val_peek(0).obj[0] = par[0];
			val_peek(0).obj[1] = par[1];
		}


		yyval.obj = instance.AgregarTercetoExpresiones(yyval.obj[0], yyval.obj[1], val_peek(2).obj[0], val_peek(2).obj[1], val_peek(0).obj[0], val_peek(0).obj[1], "-");
	}
break;
case 215:
//#line 633 ".\gramatica.y"
{
		
		yyval.obj[0] = val_peek(0).obj[0];
		yyval.obj[1] = val_peek(0).obj[1];
	}
break;
case 216:
//#line 641 ".\gramatica.y"
{

		if (!val_peek(2).obj[0].contains("[") && ts.getToken(val_peek(2).obj[0]) != 258){
			String[] par = ts.getTipo(val_peek(2).obj[0]);
			val_peek(2).obj[0] = par[0];
			val_peek(2).obj[1] = par[1];
		}
		if (!val_peek(0).obj[0].contains("[") && ts.getToken(val_peek(0).obj[0]) != 258){
			String[] par = ts.getTipo(val_peek(0).obj[0]);
			val_peek(0).obj[0] = par[0];
			val_peek(0).obj[1] = par[1];
		}

		yyval.obj = instance.AgregarTercetoExpresiones(yyval.obj[0], yyval.obj[1], val_peek(2).obj[0], val_peek(2).obj[1], val_peek(0).obj[0], val_peek(0).obj[1], "*");

	}
break;
case 217:
//#line 657 ".\gramatica.y"
{

		if (!val_peek(2).obj[0].contains("[") && ts.getToken(val_peek(2).obj[0]) != 258){
			String[] par = ts.getTipo(val_peek(2).obj[0]);
			val_peek(2).obj[0] = par[0];
			val_peek(2).obj[1] = par[1];
		}
		if (!val_peek(0).obj[0].contains("[") && ts.getToken(val_peek(0).obj[0]) != 258){
			String[] par = ts.getTipo(val_peek(0).obj[0]);
			val_peek(0).obj[0] = par[0];
			val_peek(0).obj[1] = par[1];
		}

		yyval.obj = instance.AgregarTercetoExpresiones(yyval.obj[0], yyval.obj[1], val_peek(2).obj[0], val_peek(2).obj[1], val_peek(0).obj[0], val_peek(0).obj[1], "/");
	}
break;
case 218:
//#line 672 ".\gramatica.y"
{
		yyval.obj[0] = val_peek(0).obj[0];
		yyval.obj[1] = val_peek(0).obj[1];
	}
break;
case 219:
//#line 679 ".\gramatica.y"
{
		yyval.obj[0] = val_peek(0).obj[0];
		yyval.obj[1] = ts.getTipo(val_peek(0).obj[0])[1];
	}
break;
case 220:
//#line 683 ".\gramatica.y"
{
		yyval.obj[0] = val_peek(0).obj[0];
		yyval.obj[1] = ts.getTipoCte(val_peek(0).obj[0]);
	}
break;
case 221:
//#line 687 ".\gramatica.y"
{
		yyval.obj[0] = val_peek(0).obj[0];
		yyval.obj[1] = ts.getTipo(val_peek(0).obj[0])[1];
	}
break;
case 222:
//#line 694 ".\gramatica.y"
{
		yyval.obj[0] = val_peek(2).obj[0];
		yyval.obj[1] = ts.getTipo(val_peek(2).obj[0])[1];
	}
break;
case 223:
//#line 698 ".\gramatica.y"
{
		yyval.obj[0] = val_peek(3).obj[0];
		yyval.obj[1] = ts.getTipo(val_peek(3).obj[0])[1];
	}
break;
case 226:
//#line 710 ".\gramatica.y"
{
		instance.addCheckParametros(ts.getTipo(val_peek(0).obj[0])[0]);
	}
break;
case 227:
//#line 713 ".\gramatica.y"
{
		instance.addCheckParametros(ts.getTipo2(val_peek(0).obj[0]));
	}
break;
case 228:
//#line 719 ".\gramatica.y"
{ 
		logger.logSuccess("[Parser] Sentencia out detectada"); 

		Terceto out = new Terceto("out", val_peek(2).obj[0], "-");

		if (instance.debeApilarTercetoDefer()) {
			instance.agregarTercetoParaDeferAmbitoActual(out);
		} else {
			instance.agregarTerceto(out);
		}
	}
break;
case 229:
//#line 730 ".\gramatica.y"
{ 
		logger.logSuccess("[Parser] Sentencia out detectada"); 

		Terceto out = new Terceto("out", val_peek(2).obj[0], "-");

		if (instance.debeApilarTercetoDefer()) {
			instance.agregarTercetoParaDeferAmbitoActual(out);
		} else {
			instance.agregarTerceto(out);
		}
	}
break;
case 230:
//#line 741 ".\gramatica.y"
{ logger.logError("[Parser] Se esperaba una cadena o identificador en la sentencia out"); }
break;
case 231:
//#line 742 ".\gramatica.y"
{ logger.logError("[Parser] Se esperaba un ( en la sentencia out"); }
break;
case 232:
//#line 743 ".\gramatica.y"
{ logger.logError("[Parser] Se esperaba un ) en la sentencia out"); }
break;
case 233:
//#line 744 ".\gramatica.y"
{ logger.logError("[Parser] Se esperaba un ( en la sentencia out"); }
break;
case 234:
//#line 745 ".\gramatica.y"
{ logger.logError("[Parser] Se esperaba un ) en la sentencia out"); }
break;
case 235:
//#line 746 ".\gramatica.y"
{ logger.logError("[Parser] Se espera un ; al final de la sentencia out"); }
break;
case 236:
//#line 747 ".\gramatica.y"
{ logger.logError("[Parser] Se espera un ; al final de la sentencia out"); }
break;
case 238:
//#line 752 ".\gramatica.y"
{ constanteConSigno(val_peek(0).obj[0]); }
break;
case 239:
//#line 756 ".\gramatica.y"
{
		yyval.obj[1] = "ui16";
	}
break;
case 240:
//#line 759 ".\gramatica.y"
{
		yyval.obj[1] = "f64";
	}
break;
//#line 2242 "Parser.java"
//########## END OF USER-SUPPLIED ACTIONS ##########
    }//switch
    //#### Now let's reduce... ####
    if (yydebug) debug("reduce");
    state_drop(yym);             //we just reduced yylen states
    yystate = state_peek(0);     //get new state
    val_drop(yym);               //corresponding value drop
    yym = yylhs[yyn];            //select next TERMINAL(on lhs)
    if (yystate == 0 && yym == 0)//done? 'rest' state and at first TERMINAL
      {
      if (yydebug) debug("After reduction, shifting from state 0 to state "+YYFINAL+"");
      yystate = YYFINAL;         //explicitly say we're done
      state_push(YYFINAL);       //and save it
      val_push(yyval);           //also save the semantic value of parsing
      if (yychar < 0)            //we want another character?
        {
        yychar = yylex();        //get next character
        if (yychar<0) yychar=0;  //clean, if necessary
        if (yydebug)
          yylexdebug(yystate,yychar);
        }
      if (yychar == 0)          //Good exit (if lex returns 0 ;-)
         break;                 //quit the loop--all DONE
      }//if yystate
    else                        //else not done yet
      {                         //get next state and push, for next yydefred[]
      yyn = yygindex[yym];      //find out where to go
      if ((yyn != 0) && (yyn += yystate) >= 0 &&
            yyn <= YYTABLESIZE && yycheck[yyn] == yystate)
        yystate = yytable[yyn]; //get new state
      else
        yystate = yydgoto[yym]; //else go to new defred
      if (yydebug) debug("after reduction, shifting from state "+state_peek(0)+" to state "+yystate+"");
      state_push(yystate);     //going again, so push state & val...
      val_push(yyval);         //for next action
      }
    }//main loop
  return 0;//yyaccept!!
}
//## end of method parse() ######################################



//## run() --- for Thread #######################################
/**
 * A default run method, used for operating this parser
 * object in the background.  It is intended for extending Thread
 * or implementing Runnable.  Turn off with -Jnorun .
 */
public void run()
{
  yyparse();
}
//## end of method run() ########################################



//## Constructors ###############################################
/**
 * Default constructor.  Turn off with -Jnoconstruct .

 */
public Parser()
{
  //nothing to do
}


/**
 * Create a parser, setting the debug to true or false.
 * @param debugMe true for debugging, false for no debug.
 */
public Parser(boolean debugMe)
{
  yydebug=debugMe;
}
//###############################################################



}
//################### END OF CLASS ##############################
