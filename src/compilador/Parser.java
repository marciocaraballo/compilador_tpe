//### This file created by BYACC 1.8(/Java extension  1.15)
//### Java capabilities added 7 Jan 97, Bob Jamison
//### Updated : 27 Nov 97  -- Bob Jamison, Joe Nieten
//###           01 Jan 98  -- Bob Jamison -- fixed generic semantic constructor
//###           01 Jun 99  -- Bob Jamison -- added Runnable support
//###           06 Aug 00  -- Bob Jamison -- made state variables class-global
//###           03 Jan 01  -- Bob Jamison -- improved flags, tracing
//###           16 May 01  -- Bob Jamison -- added custom stack sizing
//###           04 Mar 02  -- Yuval Oren  -- improved java performance, added options
//###           14 Mar 02  -- Tomas Hurka -- -d support, static initializer workaround
//### Please send bug reports to tom@hukatronic.cz
//### static char yysccsid[] = "@(#)yaccpar	1.8 (Berkeley) 01/20/90";






//#line 2 ".\gramatica.y"
package compilador;
import java.io.File;
//#line 20 "Parser.java"




public class Parser
{

boolean yydebug;        //do I want debug output?
int yynerrs;            //number of errors so far
int yyerrflag;          //was there an error?
int yychar;             //the current working character

//########## MESSAGES ##########
//###############################################################
// method: debug
//###############################################################
void debug(String msg)
{
  if (yydebug)
    System.out.println(msg);
}

//########## STATE STACK ##########
final static int YYSTACKSIZE = 500;  //maximum stack size
int statestk[] = new int[YYSTACKSIZE]; //state stack
int stateptr;
int stateptrmax;                     //highest index of stackptr
int statemax;                        //state when highest index reached
//###############################################################
// methods: state stack push,pop,drop,peek
//###############################################################
final void state_push(int state)
{
  try {
		stateptr++;
		statestk[stateptr]=state;
	 }
	 catch (ArrayIndexOutOfBoundsException e) {
     int oldsize = statestk.length;
     int newsize = oldsize * 2;
     int[] newstack = new int[newsize];
     System.arraycopy(statestk,0,newstack,0,oldsize);
     statestk = newstack;
     statestk[stateptr]=state;
  }
}
final int state_pop()
{
  return statestk[stateptr--];
}
final void state_drop(int cnt)
{
  stateptr -= cnt; 
}
final int state_peek(int relative)
{
  return statestk[stateptr-relative];
}
//###############################################################
// method: init_stacks : allocate and prepare stacks
//###############################################################
final boolean init_stacks()
{
  stateptr = -1;
  val_init();
  return true;
}
//###############################################################
// method: dump_stacks : show n levels of the stacks
//###############################################################
void dump_stacks(int count)
{
int i;
  System.out.println("=index==state====value=     s:"+stateptr+"  v:"+valptr);
  for (i=0;i<count;i++)
    System.out.println(" "+i+"    "+statestk[i]+"      "+valstk[i]);
  System.out.println("======================");
}


//########## SEMANTIC VALUES ##########
//public class ParserVal is defined in ParserVal.java


String   yytext;//user variable to return contextual strings
ParserVal yyval; //used to return semantic vals from action routines
ParserVal yylval;//the 'lval' (result) I got from yylex()
ParserVal valstk[];
int valptr;
//###############################################################
// methods: value stack push,pop,drop,peek.
//###############################################################
void val_init()
{
  valstk=new ParserVal[YYSTACKSIZE];
  yyval=new ParserVal();
  yylval=new ParserVal();
  valptr=-1;
}
void val_push(ParserVal val)
{
  if (valptr>=YYSTACKSIZE)
    return;
  valstk[++valptr]=val;
}
ParserVal val_pop()
{
  if (valptr<0)
    return new ParserVal();
  return valstk[valptr--];
}
void val_drop(int cnt)
{
int ptr;
  ptr=valptr-cnt;
  if (ptr<0)
    return;
  valptr = ptr;
}
ParserVal val_peek(int relative)
{
int ptr;
  ptr=valptr-relative;
  if (ptr<0)
    return new ParserVal();
  return valstk[ptr];
}
final ParserVal dup_yyval(ParserVal val)
{
  ParserVal dup = new ParserVal();
  dup.ival = val.ival;
  dup.dval = val.dval;
  dup.sval = val.sval;
  dup.obj = val.obj;
  return dup;
}
//#### end semantic value section ####
public final static short ID=257;
public final static short CTE=258;
public final static short CADENA=259;
public final static short IF=260;
public final static short THEN=261;
public final static short ELSE=262;
public final static short ENDIF=263;
public final static short OUT=264;
public final static short FUN=265;
public final static short RETURN=266;
public final static short BREAK=267;
public final static short ASIGNACION=268;
public final static short COMP_MAYOR_IGUAL=269;
public final static short COMP_MENOR_IGUAL=270;
public final static short COMP_DISTINTO=271;
public final static short WHEN=272;
public final static short DO=273;
public final static short UNTIL=274;
public final static short CONTINUE=275;
public final static short DOUBLE64=276;
public final static short UINT16=277;
public final static short DEFER=278;
public final static short CONST=279;
public final static short YYERRCODE=256;
final static short yylhs[] = {                           -1,
    0,    0,    0,    0,    0,    1,    2,    2,    3,    3,
    4,    4,    4,    4,    6,    6,    6,    6,   11,   11,
    7,    7,    7,   14,   14,   15,   15,   15,   15,   15,
   15,   15,   15,   15,   15,   20,   20,   20,   20,   20,
   20,   20,   20,   20,    8,    8,   19,   19,   19,   19,
   18,   18,   22,   16,   23,   23,   17,   17,   17,   17,
   12,   12,   12,   12,   12,   12,   12,   12,   12,   12,
   13,   13,   13,   13,   13,   26,   26,   26,   29,   29,
   28,   28,   30,   28,    9,    9,    9,   31,   31,   32,
   32,   32,   32,    5,    5,    5,    5,    5,    5,    5,
    5,    5,    5,   38,   38,   38,   39,   39,   39,   39,
   39,   40,   40,   37,   37,   41,   41,   41,   41,   41,
   24,   42,   42,   25,   25,   33,   33,   33,   36,   36,
   44,   36,   36,   36,   43,   43,   34,   34,   34,   34,
   34,   34,   34,   34,   34,   34,   34,   34,   34,   34,
   34,   34,   45,   45,   45,   45,   45,   46,   46,   21,
   21,   21,   47,   47,   47,   47,   47,   47,   27,   27,
   27,   48,   48,   48,   49,   49,   49,   51,   51,   52,
   52,   53,   53,   35,   35,   35,   35,   35,   35,   35,
   35,   35,   50,   50,   10,   10,
};
final static short yylen[] = {                            2,
    4,    3,    3,    3,    3,    1,    1,    2,    1,    1,
    1,    1,    1,    1,    3,    2,    2,    2,    3,    1,
    4,    5,    3,    1,    2,    1,    1,    1,    2,    1,
    2,    1,    2,    1,    2,    1,    1,    2,    1,    2,
    1,    2,    1,    2,    4,    5,   10,   13,   13,   16,
    8,   11,    0,   20,    1,    2,    7,    9,   10,   12,
    6,    7,    5,    5,    5,    5,    6,    6,    6,    6,
    5,    4,    3,    3,    4,    1,    3,    5,    1,    3,
    2,    1,    0,    2,    3,    2,    2,    1,    3,    3,
    2,    2,    1,    1,    2,    1,    2,    1,    2,    1,
    2,    1,    2,    1,    1,    1,    2,    4,    1,    3,
    3,    2,    1,    1,    3,    7,    6,    6,    6,    6,
    1,    1,    3,    1,    2,    4,    3,    3,    9,    8,
    0,   17,    7,    6,    1,    2,    8,   10,    7,    7,
    7,    7,    7,    7,    9,    9,    9,    9,    9,    9,
    9,    8,    1,    3,    2,    2,    2,    1,    2,    3,
    2,    2,    1,    1,    1,    1,    1,    1,    3,    3,
    1,    3,    3,    1,    1,    1,    1,    3,    4,    1,
    3,    1,    1,    5,    5,    4,    4,    4,    4,    4,
    4,    4,    1,    2,    1,    1,
};
final static short yydefred[] = {                         0,
    6,    0,    0,    0,    0,    0,    0,    0,    0,    0,
  196,  195,    0,    0,    0,    7,    9,   10,   11,   12,
   13,   14,    0,    0,    0,    0,   94,   96,   98,  100,
  102,  114,    0,    0,    0,    0,    0,  193,  163,  164,
  165,    0,    0,  166,  167,  168,    0,    0,    0,    0,
  174,  176,  177,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,  104,  122,  105,  106,    0,   95,   97,
   99,  101,  103,    0,   87,    0,    0,    2,    8,    0,
   18,    0,   17,    0,    0,    5,    0,    3,  127,    0,
   19,    0,  194,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,  107,    0,  112,
    0,  124,    0,   92,    0,   85,    0,   15,    0,    0,
    0,    0,    0,   23,   26,   27,    0,    0,   24,   28,
   30,   32,    0,    0,  115,    1,  126,  182,  178,  183,
    0,  180,    0,    0,    0,    0,    0,    0,    0,  172,
  173,  189,  187,  190,    0,  188,    0,  186,    0,    0,
    0,    0,   81,    0,    0,   84,    0,    0,    0,    0,
  121,  111,    0,  123,  125,    0,    0,   90,   89,    0,
    0,    0,    0,    0,    0,   29,   31,   33,   35,   21,
    0,   25,    0,   45,    0,    0,  179,    0,    0,    0,
    0,    0,    0,    0,    0,  185,  184,    0,   66,    0,
    0,   65,    0,    0,   64,    0,    0,    0,    0,  108,
    0,    0,    0,    0,    0,    0,   73,    0,    0,    0,
   22,   46,    0,  181,  157,  158,    0,    0,    0,  155,
  159,    0,    0,    0,    0,    0,    0,    0,    0,    0,
   61,    0,   70,   69,    0,   68,    0,    0,    0,  134,
    0,  118,  120,    0,  119,    0,   75,    0,    0,    0,
    0,    0,    0,  154,    0,  141,    0,  139,    0,    0,
  144,    0,    0,    0,  142,    0,  140,   62,    0,   78,
  136,    0,    0,    0,  116,    0,   71,    0,    0,    0,
    0,    0,    0,    0,  152,    0,    0,    0,  137,    0,
    0,    0,  131,    0,  130,    0,    0,    0,    0,    0,
    0,    0,  147,  145,  149,  150,    0,  148,  146,   80,
    0,  129,    0,    0,   37,   39,   41,   43,    0,    0,
    0,    0,    0,   57,    0,    0,  138,    0,   38,   40,
   42,   44,    0,    0,    0,   51,    0,    0,    0,    0,
    0,    0,   36,    0,    0,   53,    0,    0,   58,    0,
    0,    0,    0,   47,    0,   59,    0,    0,    0,    0,
   52,    0,    0,    0,    0,    0,    0,    0,    0,   60,
    0,    0,   48,   49,    0,    0,    0,    0,  132,    0,
    0,   50,    0,   55,   34,    0,    0,   56,    0,   54,
};
final static short yydgoto[] = {                          3,
    4,   15,  267,   17,  209,   19,   20,   21,   22,   23,
   24,   25,  137,  138,  139,  140,  141,  142,  348,  349,
   47,  385,  416,   26,  121,  111,   48,  112,  300,  113,
   76,   77,   27,   28,   29,   30,   31,   65,   66,   67,
   32,   68,  303,  341,  214,  211,   49,   50,   51,   52,
   53,  151,  152,
};
final static short yysindex[] = {                       -96,
    0, 1211,    0,  642,  -33,  626,   58,    4,   25,  778,
    0,    0,  551,  -38,  892,    0,    0,    0,    0,    0,
    0,    0,  -31,   17,  -36,   41,    0,    0,    0,    0,
    0,    0,  902,  927,   98, -152,   77,    0,    0,    0,
    0, -145,  623,    0,    0,    0,   86,   13,  101,   78,
    0,    0,    0,   90,   92,   68,  -34,   -5,  714, -101,
  123,   81,  375,    0,    0,    0,    0, -105,    0,    0,
    0,    0,    0, -188,    0,  118,  144,    0,    0,  151,
    0,  154,    0,  868,  -53,    0,  950,    0,    0,   83,
    0,   73,    0,  -30,  -25,   -9,  101,  101,  101,  107,
  101,  101,  197,  199,    7,    9,  220,   -7,  258,   63,
  281,  284,   76,  282,  302,   85,  319,    0,  -29,    0,
 1087,    0,  655,    0,  114,    0,  133,    0,  708,   61,
  358,  682,  614,    0,    0,    0,  275, 1155,    0,    0,
    0,    0,  290,  380,    0,    0,    0,    0,    0,    0,
  163,    0,  507,  507,  810,  507,   78,   78,  107,    0,
    0,    0,    0,    0,  381,    0,  383,    0,  389,  -83,
   30,  -83,    0,  399,  -83,    0,  -83,  424,  371,  -82,
    0,    0,  440,    0,    0,  732,  465,    0,    0,  623,
   96,  167,  714,  375,  247,    0,    0,    0,    0,    0,
  406,    0,  418,    0,  285,  127,    0, -102,    0,  -39,
 1116,   89,  800,  147,  182,    0,    0,  -83,    0,  490,
  -83,    0,  -83,  511,    0,  -83, 1211,  434,  960,    0,
  508,   19,  512,   52,  521,  398,    0,  529, 1048,  542,
    0,    0,  740,    0,    0,    0, 1126,  507,  535,    0,
    0,  507,  536,  827,  537,  207,  507,  538,  507,  540,
    0,  -83,    0,    0,  -83,    0, 1211,  476, 1211,    0,
  477,    0,    0,  544,    0,  846,    0,  546,  -74,  481,
  674,  375,  334,    0,  353,    0,  355,    0,  568,  365,
    0,  857,  572,  370,    0,  373,    0,    0,  593,    0,
    0,  579,  515,  582,    0,  759,    0,  522,  377,  611,
 1048,  616,  599,  600,    0,  601,  606,  409,    0,  618,
  619,  -83,    0,  620,    0, 1145,  234, 1178,  649,  631,
  557,  674,    0,    0,    0,    0,  632,    0,    0,    0,
  421,    0,  614,    0,    0,    0,    0,    0,  430,  -98,
  638,  573,  674,    0,  425,  660,    0,  662,    0,    0,
    0,    0,  578,  592,  441,    0,  648,  668,  670,  652,
  674,  246,    0,  430,  659,    0,  663,  674,    0,  687,
  -80,  664,  604,    0,  459,    0,  691,  479,  592,  478,
    0,  480,  702,  685,  624,  430,  695,  698,  674,    0,
 1211,  635,    0,    0,  721,  641,  509,  517,    0,  723,
  672,    0, 1234,    0,    0, 1155,  658,    0,  727,    0,
};
final static short yyrindex[] = {                         0,
    0,    0,    0,    0,  460,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,  156,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,  104,
    0,    0,    0,    0,    0,    0,  530,  530,    0,  733,
  983, 1002,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,  524,    0,  397,  448,    0,    0,  473,
    0,  581,    0,    0,    0,    0,  798,    0,    0,   29,
    0,    0,    0,    0,    0,    0,    0,    0,  -21,  -17,
    0,    0,    0,    0,    0,    0,    0,  530,    0,   28,
    0,   42,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,  556,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0, 1201,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,  189,  214,   38,    0,
    0,    0,    0,    0,  129,    0,  238,    0,    0,    0,
    0,    0,    0,    0,  530,    0,    0,    0,    0,    0,
    0,    0, 1025,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0, 1201,    0,    0,    0,    0,    0, 1106,    0,
    0,    0,    0,    0,    0,    0,    0,  676,    0,    0,
    0,    0,    0,   50,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,  -78,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,  271,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,  683,    0,    0,  530,    0,  689,    0,    0,    0,
    0,    0,    0,  263,    0,    0,    0,  -72,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,  287,    0,    0,    0,    0,    0,   54,    0,
    0,    0,    0,  312,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,  530,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,  347,    0,    0,    0,
    0,    0,    0, 1068,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
};
final static short yygindex[] = {                         0,
    0,   51,   88,  -75,   -2,    0,    0,    0,    0,  586,
   71,    0, -128,    0, -116,  -66,  291,  303,  -81, -300,
  -42,    0,    0,  -79, -159,  -12,   75, -149,  488,    0,
  690,    0,   -1,    1,    2,    5,    6,   39,    0,    0,
  -52,    0, -190,    0, 1065, -146,  770,  495,  444,  -47,
    0,    0,  613,
};
final static int YYTABLESIZE=1513;
static short yytable[];
static { yytable();}
static void yytable(){
yytable = new short[]{                         18,
   95,   18,  143,  195,  144,  108,  109,   64,  135,  201,
   36,   69,   18,   70,   71,  155,  117,   72,   73,  161,
   75,  202,  245,  162,  364,  224,    2,   81,  128,  182,
   18,   18,  145,  169,  239,  114,  268,  161,  271,  183,
  229,  162,  389,   58,  150,  115,   74,  165,  229,  167,
  170,  199,   72,  144,   34,   97,  203,   98,  144,  274,
   64,  247,  135,  374,   59,  164,  196,  166,   82,  124,
  220,   82,   45,   46,   44,   83,  301,  273,  160,  125,
  187,  136,   76,   87,   18,   82,   84,  221,  396,   16,
   77,   16,  276,   82,   79,  171,  160,   56,   85,   76,
  191,  122,   79,  171,   80,   42,   91,   77,  107,   90,
  280,   79,   93,  149,  283,  299,   92,   42,   64,  101,
   16,   79,  311,  100,  102,   97,   96,   98,  192,   64,
  103,   69,  104,   70,   71,  136,  235,   72,   73,  120,
   42,  147,   42,  232,  171,   42,  171,  234,  171,   97,
  238,   98,  145,  128,   60,  175,   89,    6,  150,  185,
    1,    7,  171,  171,  171,  171,   35,  130,  123,    9,
   10,   42,  299,  159,   79,   13,  126,  327,  228,  247,
  119,  118,  331,   74,   74,  130,  308,  127,  169,   72,
   72,   64,   11,   12,   36,   74,  175,  175,  175,  352,
  175,   72,  175,  207,  192,  246,  206,  237,  251,   97,
  406,   98,  128,  170,  175,  175,  175,  175,   74,   10,
  363,  365,  248,  249,   18,   80,   18,  181,  171,  169,
  153,  169,  122,  169,   35,  154,   64,  191,  310,  161,
   64,   11,   12,  162,  251,  383,  144,  169,  169,  169,
  169,  156,  390,  192,  170,  162,  170,  163,  170,  345,
   57,  362,  117,  144,   18,  236,   18,  402,   11,   12,
   11,   12,  170,  170,  170,  170,  359,  185,  168,   64,
  175,   39,   40,   41,  144,  128,  143,  417,  128,  356,
  128,  128,  128,  128,  128,  128,  414,  345,  160,  418,
  128,  128,  128,  128,  128,  128,  128,  128,   64,  144,
  368,  133,  154,  169,   54,  172,   55,   37,   38,  173,
  122,  174,  345,  344,  105,   18,  106,  175,  380,  148,
   38,  415,  176,  144,  415,  387,  144,  135,  170,  177,
  135,   69,  178,   70,   71,  179,  151,   72,   73,  185,
  252,  253,   37,   38,   37,   38,  405,   37,   38,  180,
  171,  373,  191,  171,  171,  171,  171,  171,  171,  171,
  171,  188,  171,  171,  171,  171,  171,  171,  171,  171,
  171,  171,  171,  148,   38,  192,  373,  117,  192,   74,
  192,  192,  192,  192,  192,  192,   86,  193,   18,  200,
  192,  192,  192,  192,  192,  192,  192,  192,  257,  258,
  136,  143,  175,  136,  204,  175,  175,  175,  175,  175,
  175,  175,  175,  197,  175,  175,  175,  175,  175,  175,
  175,  175,  175,  175,  175,  198,  133,  205,  278,  216,
   97,  217,   98,  259,  260,  169,  218,   88,  169,  169,
  169,  169,  169,  169,  169,  169,  223,  169,  169,  169,
  169,  169,  169,  169,  169,  169,  169,  169,  292,  293,
  170,  151,   20,  170,  170,  170,  170,  170,  170,  170,
  170,  226,  170,  170,  170,  170,  170,  170,  170,  170,
  170,  170,  170,  227,  191,  350,  351,  191,  230,  191,
  191,  191,  191,  191,  191,  233,   88,  381,  382,  191,
  191,  191,  191,  191,  191,  191,  191,  121,   20,  117,
  240,   86,  117,   93,  117,  117,  117,  117,  117,  117,
  241,   20,  156,  156,  117,  117,  117,  117,  117,  117,
  117,  117,  242,  143,  160,  161,  143,  262,  143,  143,
  143,  143,  143,  143,  265,   91,  269,  243,  143,  143,
  143,  143,  143,  143,  143,  143,  272,   93,  133,  279,
  275,  133,   88,  133,  133,  133,  133,  133,  133,  277,
   16,  281,   93,  133,  133,  133,  133,  133,  133,  133,
  133,  157,  158,  286,  288,  291,  295,   20,  297,   91,
  302,  304,  305,  151,  307,  309,  151,  312,  151,  151,
  151,  151,  151,  151,   91,  313,  346,  314,  151,  151,
  151,  151,  151,  151,  151,  151,  315,  316,  347,  208,
  319,   60,  320,  360,    6,  321,  322,  323,    7,  324,
  325,   61,  110,  110,  328,  361,    9,   10,   93,   62,
  329,  330,   13,   86,  346,  332,   86,  333,  334,  335,
   86,   86,   86,   94,  336,   43,  347,   42,   86,   86,
   42,  337,   86,   86,   86,   86,  338,  339,  342,  346,
   91,  355,   45,   46,   44,   45,   46,   44,  353,  354,
  357,  347,  358,  110,  186,  130,  366,  367,  369,   42,
  370,  371,  372,  375,   88,   16,  376,   88,  377,  378,
  379,   88,   88,   88,   45,   46,   44,  384,   42,   88,
   88,  386,  391,   88,   88,   88,   88,  388,  392,   20,
  393,  394,   20,   45,   46,   44,   20,   20,   20,  395,
  397,  399,  398,  400,   20,   20,  401,  190,   20,   20,
   20,   20,   42,  403,  116,  219,  404,  222,   42,  407,
  110,  408,  225,   60,   33,  409,    6,   45,   46,   44,
    7,  410,  231,   45,   46,   44,   42,  411,    9,   10,
   93,  412,  419,   93,   13,  420,   83,   93,   93,   93,
  121,   45,   46,   44,  413,   93,   93,    4,   63,   93,
   93,   93,   93,  261,  194,   67,  263,   60,  264,  340,
    6,  266,   91,  135,    7,   91,  189,   99,  244,   91,
   91,   91,    9,   10,    0,    0,    0,   91,   91,    0,
    0,   91,   91,   91,   91,    0,    0,   16,    0,    0,
   16,    0,    0,    0,   16,   16,   16,  298,   60,    0,
  110,  129,   16,   16,    0,    7,   16,   16,   16,   16,
    0,    0,  282,  131,  132,    0,    0,    0,    0,  343,
   60,    0,    0,  129,    0,    0,    0,    7,    0,   37,
   38,  326,   37,   38,    0,  131,  132,    0,    0,    0,
    0,   39,   40,   41,   39,   40,   41,    0,    5,    0,
   63,    6,    0,    0,    0,    7,    8,  110,    0,    0,
    0,   37,   38,    9,   10,    0,    0,   11,   12,   13,
   14,    0,  208,   39,   40,   41,    0,    0,    0,    0,
   37,   38,  208,    0,    0,    0,    0,    0,   60,    0,
    0,    6,   39,   40,   41,    7,    0,  130,   61,  208,
    0,    0,    0,    9,   10,    0,   62,    0,    0,   13,
    0,    0,    0,    0,   37,   38,    0,    0,  208,    0,
   37,   38,    0,    0,    0,    0,   39,   40,   41,  208,
    0,    0,   39,   40,   41,    0,    0,    0,   37,   38,
    0,    0,  134,    0,    0,    0,   60,    0,    0,    6,
   39,   40,   41,    7,    0,  130,   61,    0,    0,    0,
    0,    9,   10,    0,   62,   60,   78,   13,    6,    0,
  254,  255,    7,    0,  130,    0,   86,    0,    0,    0,
    9,   10,    0,    0,   60,    0,   13,    6,    0,    0,
    0,    7,    0,    0,   61,    0,    0,    0,    0,    9,
   10,   88,   62,    0,    0,   13,   60,    0,    0,    6,
    0,  254,  255,    7,    0,    0,   60,    0,    0,    6,
  213,    9,   10,    7,  146,    0,    0,   13,    0,    0,
    0,    9,   10,   60,  270,    0,    6,   13,    0,  289,
    7,    0,    0,    0,    0,    0,    0,    0,    9,   10,
    0,    0,   60,    0,   13,    6,  306,  109,    0,    7,
    0,    0,    0,   60,    0,    0,    6,    9,   10,  317,
    7,    0,    0,   13,    5,    0,  113,  129,    9,   10,
    0,    7,    8,  130,   13,    0,    0,    0,    0,  131,
  132,    0,    0,   11,   12,  133,   14,    0,    5,  110,
    0,    6,    0,    0,    0,    7,    8,    0,    5,    0,
    0,    6,    0,    9,   10,    7,    8,   11,   12,   13,
   14,    0,  184,    9,   10,    0,    0,   11,   12,   13,
   14,    0,    0,    5,    0,    0,    6,    0,    0,    0,
    7,    8,  158,    0,    0,    0,    0,    0,    9,   10,
    0,    0,   11,   12,   13,   14,    5,    0,    0,    6,
    0,  184,    0,    7,    8,    0,    5,  210,  212,    6,
  215,    9,   10,    7,    8,   11,   12,   13,   14,    0,
  158,    9,   10,    0,    0,   11,   12,   13,   14,  109,
  250,    0,  109,    0,    0,    0,  109,    0,  109,  109,
  284,    0,    0,    0,  109,  109,  109,  109,  113,    0,
  109,  113,    0,    0,    0,  113,    0,  113,  113,  245,
    0,    0,    0,  113,  113,  113,  113,  256,    0,  113,
    0,  110,    0,    0,  110,    0,    0,    0,  110,    0,
  110,  110,    0,    0,    0,    0,  110,  110,  110,  110,
    0,    0,  110,    0,   60,    0,    0,    6,    0,    0,
    0,    7,  285,  130,   61,    0,  287,    0,  290,    9,
   10,  294,   62,  296,  158,   13,    0,  158,    0,  158,
  158,  158,    0,   36,    0,    0,    0,    0,    0,  158,
  158,    0,    0,   60,    0,  158,    6,    0,    0,    0,
    7,    0,    0,   61,    0,    0,  318,    0,    9,   10,
    0,   62,  158,    0,   13,  158,    0,  153,  153,  158,
  256,    0,   60,    0,    0,    6,    0,  158,  158,    7,
    0,    0,   60,  158,    0,    6,    0,    9,   10,    7,
    0,    0,    0,   13,    0,    0,    0,    9,   10,    0,
    0,   60,    0,   13,  129,    0,    0,    0,    7,    0,
    0,    5,    0,    0,  129,    0,  131,  132,    7,    8,
  130,    0,  343,    0,    0,    0,  131,  132,    0,    0,
   11,   12,  133,   14,    5,    0,    0,    6,    0,    0,
    0,    7,    8,  130,    0,    0,    0,    0,    0,    9,
   10,    0,    0,   11,   12,   13,   14,   34,    0,    0,
   34,    0,    0,    0,   34,   34,   34,    5,    0,    0,
    6,    0,   34,   34,    7,    8,   34,   34,   34,   34,
    0,    0,    9,   10,    0,    0,   11,   12,   13,   14,
    5,    0,    0,  129,    0,    0,    0,    7,    8,    0,
    0,    0,    0,    0,    0,  131,  132,    0,    0,   11,
   12,  133,   14,
};
}
static short yycheck[];
static { yycheck(); }
static void yycheck() {
yycheck = new short[] {                          2,
   43,    4,   84,  132,   84,   40,   41,   10,   84,  138,
   44,   13,   15,   13,   13,   41,   59,   13,   13,   41,
   59,  138,  125,   41,  123,  175,  123,   59,    0,   59,
   33,   34,   85,   41,  194,   41,  227,   59,  229,  119,
  123,   59,  123,   40,   92,   58,  125,   41,  123,   41,
   58,  133,  125,  133,    4,   43,  138,   45,  138,   41,
   63,  208,  138,  364,   40,   59,  133,   59,   41,  258,
   41,   44,   60,   61,   62,   59,  267,   59,   41,  268,
  123,   84,   41,   33,   87,   58,  123,   58,  389,    2,
   41,    4,   41,   23,   41,  108,   59,   40,   58,   58,
   40,   63,   15,    0,  257,   45,   36,   58,   41,   35,
  239,   58,  258,   41,  243,  265,   40,   45,  121,   42,
   33,   34,  282,   49,   47,   43,   41,   45,    0,  132,
   41,  133,   41,  133,  133,  138,   41,  133,  133,   59,
   45,   59,   45,  186,   41,   45,   43,  190,   45,   43,
  193,   45,  205,  125,  257,    0,   59,  260,  206,  121,
  257,  264,   59,   60,   61,   62,  268,  266,  274,  272,
  273,   45,  322,   99,   87,  278,   59,  306,  261,  326,
   58,   59,  311,  262,  263,  266,  261,   44,    0,  262,
  263,  194,  276,  277,   44,  274,   41,   42,   43,  328,
   45,  274,   47,   41,  130,  208,   44,   41,  211,   43,
  401,   45,   59,    0,   59,   60,   61,   62,  257,  273,
  349,  350,  262,  263,  227,  257,  229,  257,  125,   41,
  261,   43,  194,   45,  268,  261,  239,    0,  281,  261,
  243,  276,  277,  261,  247,  374,  326,   59,   60,   61,
   62,  261,  381,  125,   41,   59,   43,   59,   45,  326,
  257,  343,    0,  343,  267,  191,  269,  396,  276,  277,
  276,  277,   59,   60,   61,   62,  343,  239,   59,  282,
  125,  269,  270,  271,  364,  257,    0,  416,  260,  332,
  262,  263,  264,  265,  266,  267,  413,  364,  261,  416,
  272,  273,  274,  275,  276,  277,  278,  279,  311,  389,
  353,    0,  261,  125,  257,   58,  259,  257,  258,  257,
  282,   41,  389,  326,  257,  328,  259,   44,  371,  257,
  258,  413,  257,  413,  416,  378,  416,  413,  125,   58,
  416,  343,   41,  343,  343,  261,    0,  343,  343,  311,
  262,  263,  257,  258,  257,  258,  399,  257,  258,   41,
  257,  364,  125,  260,  261,  262,  263,  264,  265,  266,
  267,  258,  269,  270,  271,  272,  273,  274,  275,  276,
  277,  278,  279,  257,  258,  257,  389,  125,  260,  257,
  262,  263,  264,  265,  266,  267,    0,   40,  401,  125,
  272,  273,  274,  275,  276,  277,  278,  279,  262,  263,
  413,  125,  257,  416,  125,  260,  261,  262,  263,  264,
  265,  266,  267,  133,  269,  270,  271,  272,  273,  274,
  275,  276,  277,  278,  279,  133,  125,   58,   41,   59,
   43,   59,   45,  262,  263,  257,   58,    0,  260,  261,
  262,  263,  264,  265,  266,  267,   58,  269,  270,  271,
  272,  273,  274,  275,  276,  277,  278,  279,  262,  263,
  257,  125,    0,  260,  261,  262,  263,  264,  265,  266,
  267,   58,  269,  270,  271,  272,  273,  274,  275,  276,
  277,  278,  279,  123,  257,  262,  263,  260,   59,  262,
  263,  264,  265,  266,  267,   41,   59,  262,  263,  272,
  273,  274,  275,  276,  277,  278,  279,   58,   59,  257,
  274,  125,  260,    0,  262,  263,  264,  265,  266,  267,
  125,   59,  262,  263,  272,  273,  274,  275,  276,  277,
  278,  279,  125,  257,  101,  102,  260,   58,  262,  263,
  264,  265,  266,  267,   44,    0,  123,  273,  272,  273,
  274,  275,  276,  277,  278,  279,   59,   44,  257,   41,
   59,  260,  125,  262,  263,  264,  265,  266,  267,   59,
    0,   40,   59,  272,  273,  274,  275,  276,  277,  278,
  279,   97,   98,   59,   59,   59,   59,  125,   59,   44,
  125,  125,   59,  257,   59,  125,  260,  274,  262,  263,
  264,  265,  266,  267,   59,  263,  326,  263,  272,  273,
  274,  275,  276,  277,  278,  279,   59,  263,  326,  123,
   59,  257,  263,  343,  260,  263,   44,   59,  264,  125,
   59,  267,   57,   58,  123,  343,  272,  273,  125,  275,
  274,   41,  278,  257,  364,   40,  260,   59,   59,   59,
  264,  265,  266,   41,   59,   40,  364,   45,  272,  273,
   45,  263,  276,  277,  278,  279,   59,   59,   59,  389,
  125,  125,   60,   61,   62,   60,   61,   62,   40,   59,
   59,  389,  272,  108,   40,  266,   59,  125,  274,   45,
   41,   40,  125,  263,  257,  125,   59,  260,   41,   40,
   59,  264,  265,  266,   60,   61,   62,   59,   45,  272,
  273,   59,   59,  276,  277,  278,  279,   41,  125,  257,
  272,   41,  260,   60,   61,   62,  264,  265,  266,  261,
  263,   40,  263,   59,  272,  273,  123,   40,  276,  277,
  278,  279,   45,   59,   41,  170,   59,  172,   45,  125,
  175,   41,  177,  257,  123,  125,  260,   60,   61,   62,
  264,  263,   41,   60,   61,   62,   45,  261,  272,  273,
  257,   59,  125,  260,  278,   59,  257,  264,  265,  266,
   58,   60,   61,   62,  123,  272,  273,    0,  123,  276,
  277,  278,  279,  218,  123,  123,  221,  257,  223,  322,
  260,  226,  257,  125,  264,  260,  127,   48,  206,  264,
  265,  266,  272,  273,   -1,   -1,   -1,  272,  273,   -1,
   -1,  276,  277,  278,  279,   -1,   -1,  257,   -1,   -1,
  260,   -1,   -1,   -1,  264,  265,  266,  262,  257,   -1,
  265,  260,  272,  273,   -1,  264,  276,  277,  278,  279,
   -1,   -1,  123,  272,  273,   -1,   -1,   -1,   -1,  278,
  257,   -1,   -1,  260,   -1,   -1,   -1,  264,   -1,  257,
  258,  123,  257,  258,   -1,  272,  273,   -1,   -1,   -1,
   -1,  269,  270,  271,  269,  270,  271,   -1,  257,   -1,
  123,  260,   -1,   -1,   -1,  264,  265,  322,   -1,   -1,
   -1,  257,  258,  272,  273,   -1,   -1,  276,  277,  278,
  279,   -1,  123,  269,  270,  271,   -1,   -1,   -1,   -1,
  257,  258,  123,   -1,   -1,   -1,   -1,   -1,  257,   -1,
   -1,  260,  269,  270,  271,  264,   -1,  266,  267,  123,
   -1,   -1,   -1,  272,  273,   -1,  275,   -1,   -1,  278,
   -1,   -1,   -1,   -1,  257,  258,   -1,   -1,  123,   -1,
  257,  258,   -1,   -1,   -1,   -1,  269,  270,  271,  123,
   -1,   -1,  269,  270,  271,   -1,   -1,   -1,  257,  258,
   -1,   -1,  125,   -1,   -1,   -1,  257,   -1,   -1,  260,
  269,  270,  271,  264,   -1,  266,  267,   -1,   -1,   -1,
   -1,  272,  273,   -1,  275,  257,  125,  278,  260,   -1,
  262,  263,  264,   -1,  266,   -1,  125,   -1,   -1,   -1,
  272,  273,   -1,   -1,  257,   -1,  278,  260,   -1,   -1,
   -1,  264,   -1,   -1,  267,   -1,   -1,   -1,   -1,  272,
  273,  125,  275,   -1,   -1,  278,  257,   -1,   -1,  260,
   -1,  262,  263,  264,   -1,   -1,  257,   -1,   -1,  260,
  261,  272,  273,  264,  125,   -1,   -1,  278,   -1,   -1,
   -1,  272,  273,  257,  125,   -1,  260,  278,   -1,  263,
  264,   -1,   -1,   -1,   -1,   -1,   -1,   -1,  272,  273,
   -1,   -1,  257,   -1,  278,  260,  261,  125,   -1,  264,
   -1,   -1,   -1,  257,   -1,   -1,  260,  272,  273,  263,
  264,   -1,   -1,  278,  257,   -1,  125,  260,  272,  273,
   -1,  264,  265,  266,  278,   -1,   -1,   -1,   -1,  272,
  273,   -1,   -1,  276,  277,  278,  279,   -1,  257,  125,
   -1,  260,   -1,   -1,   -1,  264,  265,   -1,  257,   -1,
   -1,  260,   -1,  272,  273,  264,  265,  276,  277,  278,
  279,   -1,  125,  272,  273,   -1,   -1,  276,  277,  278,
  279,   -1,   -1,  257,   -1,   -1,  260,   -1,   -1,   -1,
  264,  265,  125,   -1,   -1,   -1,   -1,   -1,  272,  273,
   -1,   -1,  276,  277,  278,  279,  257,   -1,   -1,  260,
   -1,  125,   -1,  264,  265,   -1,  257,  153,  154,  260,
  156,  272,  273,  264,  265,  276,  277,  278,  279,   -1,
  125,  272,  273,   -1,   -1,  276,  277,  278,  279,  257,
  125,   -1,  260,   -1,   -1,   -1,  264,   -1,  266,  267,
  125,   -1,   -1,   -1,  272,  273,  274,  275,  257,   -1,
  278,  260,   -1,   -1,   -1,  264,   -1,  266,  267,  125,
   -1,   -1,   -1,  272,  273,  274,  275,  213,   -1,  278,
   -1,  257,   -1,   -1,  260,   -1,   -1,   -1,  264,   -1,
  266,  267,   -1,   -1,   -1,   -1,  272,  273,  274,  275,
   -1,   -1,  278,   -1,  257,   -1,   -1,  260,   -1,   -1,
   -1,  264,  248,  266,  267,   -1,  252,   -1,  254,  272,
  273,  257,  275,  259,  257,  278,   -1,  260,   -1,  262,
  263,  264,   -1,  266,   -1,   -1,   -1,   -1,   -1,  272,
  273,   -1,   -1,  257,   -1,  278,  260,   -1,   -1,   -1,
  264,   -1,   -1,  267,   -1,   -1,  292,   -1,  272,  273,
   -1,  275,  257,   -1,  278,  260,   -1,  262,  263,  264,
  306,   -1,  257,   -1,   -1,  260,   -1,  272,  273,  264,
   -1,   -1,  257,  278,   -1,  260,   -1,  272,  273,  264,
   -1,   -1,   -1,  278,   -1,   -1,   -1,  272,  273,   -1,
   -1,  257,   -1,  278,  260,   -1,   -1,   -1,  264,   -1,
   -1,  257,   -1,   -1,  260,   -1,  272,  273,  264,  265,
  266,   -1,  278,   -1,   -1,   -1,  272,  273,   -1,   -1,
  276,  277,  278,  279,  257,   -1,   -1,  260,   -1,   -1,
   -1,  264,  265,  266,   -1,   -1,   -1,   -1,   -1,  272,
  273,   -1,   -1,  276,  277,  278,  279,  257,   -1,   -1,
  260,   -1,   -1,   -1,  264,  265,  266,  257,   -1,   -1,
  260,   -1,  272,  273,  264,  265,  276,  277,  278,  279,
   -1,   -1,  272,  273,   -1,   -1,  276,  277,  278,  279,
  257,   -1,   -1,  260,   -1,   -1,   -1,  264,  265,   -1,
   -1,   -1,   -1,   -1,   -1,  272,  273,   -1,   -1,  276,
  277,  278,  279,
};
}
final static short YYFINAL=3;
final static short YYMAXTOKEN=279;
final static String yyname[] = {
"end-of-file",null,null,null,null,null,null,null,null,null,null,null,null,null,
null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,
null,null,null,null,null,null,null,null,null,null,"'('","')'","'*'","'+'","','",
"'-'",null,"'/'",null,null,null,null,null,null,null,null,null,null,"':'","';'",
"'<'","'='","'>'",null,null,null,null,null,null,null,null,null,null,null,null,
null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,
null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,
null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,
"'{'",null,"'}'",null,null,null,null,null,null,null,null,null,null,null,null,
null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,
null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,
null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,
null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,
null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,
null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,
null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,
null,null,null,null,null,null,null,"ID","CTE","CADENA","IF","THEN","ELSE",
"ENDIF","OUT","FUN","RETURN","BREAK","ASIGNACION","COMP_MAYOR_IGUAL",
"COMP_MENOR_IGUAL","COMP_DISTINTO","WHEN","DO","UNTIL","CONTINUE","DOUBLE64",
"UINT16","DEFER","CONST",
};
final static String yyrule[] = {
"$accept : programa",
"programa : nombre_programa '{' sentencias '}'",
"programa : '{' sentencias '}'",
"programa : nombre_programa sentencias '}'",
"programa : nombre_programa '{' sentencias",
"programa : nombre_programa '{' '}'",
"nombre_programa : ID",
"sentencias : sentencia",
"sentencias : sentencias sentencia",
"sentencia : sentencia_declarativa",
"sentencia : sentencia_ejecutable",
"sentencia_declarativa : sentencia_declarativa_variables",
"sentencia_declarativa : funcion_con_return",
"sentencia_declarativa : funcion_sin_return",
"sentencia_declarativa : declaracion_constantes",
"sentencia_declarativa_variables : tipo lista_de_variables ';'",
"sentencia_declarativa_variables : tipo lista_de_variables",
"sentencia_declarativa_variables : lista_de_variables ';'",
"sentencia_declarativa_variables : tipo ';'",
"lista_de_variables : ID ',' lista_de_variables",
"lista_de_variables : ID",
"funcion_con_return : encabezado_funcion '{' sentencia_return '}'",
"funcion_con_return : encabezado_funcion '{' sentencias_funcion sentencia_return '}'",
"funcion_con_return : encabezado_funcion '{' '}'",
"sentencias_funcion : sentencia_funcion",
"sentencias_funcion : sentencias_funcion sentencia_funcion",
"sentencia_funcion : sentencia_declarativa",
"sentencia_funcion : sentencia_ejecutable",
"sentencia_funcion : sentencia_when_con_return",
"sentencia_funcion : DEFER sentencia_when_con_return",
"sentencia_funcion : sentencia_do_con_return",
"sentencia_funcion : DEFER sentencia_do_con_return",
"sentencia_funcion : sentencia_seleccion_simple_con_return",
"sentencia_funcion : DEFER sentencia_seleccion_simple_con_return",
"sentencia_funcion : sentencia_seleccion_compuesta_con_return",
"sentencia_funcion : DEFER sentencia_seleccion_compuesta_con_return",
"sentencia_ejecutable_funcion : sentencia_ejecutable",
"sentencia_ejecutable_funcion : sentencia_when_con_return",
"sentencia_ejecutable_funcion : DEFER sentencia_when_con_return",
"sentencia_ejecutable_funcion : sentencia_do_con_return",
"sentencia_ejecutable_funcion : DEFER sentencia_do_con_return",
"sentencia_ejecutable_funcion : sentencia_seleccion_simple_con_return",
"sentencia_ejecutable_funcion : DEFER sentencia_seleccion_simple_con_return",
"sentencia_ejecutable_funcion : sentencia_seleccion_compuesta_con_return",
"sentencia_ejecutable_funcion : DEFER sentencia_seleccion_compuesta_con_return",
"funcion_sin_return : encabezado_funcion '{' sentencia_seleccion_compuesta_con_return '}'",
"funcion_sin_return : encabezado_funcion '{' sentencias_funcion sentencia_seleccion_compuesta_con_return '}'",
"sentencia_seleccion_compuesta_con_return : IF '(' condicion ')' THEN sentencia_return ELSE sentencia_return ENDIF ';'",
"sentencia_seleccion_compuesta_con_return : IF '(' condicion ')' THEN '{' sentencia_ejecutable_funcion sentencia_return '}' ELSE sentencia_return ENDIF ';'",
"sentencia_seleccion_compuesta_con_return : IF '(' condicion ')' THEN sentencia_return ELSE '{' sentencia_ejecutable_funcion sentencia_return '}' ENDIF ';'",
"sentencia_seleccion_compuesta_con_return : IF '(' condicion ')' THEN '{' sentencia_ejecutable_funcion sentencia_return '}' ELSE '{' sentencia_ejecutable_funcion sentencia_return '}' ENDIF ';'",
"sentencia_seleccion_simple_con_return : IF '(' condicion ')' THEN sentencia_return ENDIF ';'",
"sentencia_seleccion_simple_con_return : IF '(' condicion ')' THEN '{' sentencia_ejecutable_funcion sentencia_return '}' ENDIF ';'",
"$$1 :",
"sentencia_when_con_return : WHEN '(' condicion ')' THEN '{' sentencia_return '}' ';' $$1 WHEN '(' condicion ')' THEN '{' sentencias_when_con_return sentencia_return '}' ';'",
"sentencias_when_con_return : sentencia_funcion",
"sentencias_when_con_return : sentencias_when_con_return sentencia_funcion",
"sentencia_do_con_return : DO sentencia_return UNTIL '(' condicion ')' ';'",
"sentencia_do_con_return : etiqueta ':' DO sentencia_return UNTIL '(' condicion ')' ';'",
"sentencia_do_con_return : DO '{' sentencias_ejecutables_do sentencia_return '}' UNTIL '(' condicion ')' ';'",
"sentencia_do_con_return : etiqueta ':' DO '{' sentencias_ejecutables_do sentencia_return '}' UNTIL '(' condicion ')' ';'",
"encabezado_funcion : FUN ID '(' ')' ':' tipo",
"encabezado_funcion : FUN ID '(' lista_de_parametros ')' ':' tipo",
"encabezado_funcion : FUN ID '(' ')' ':'",
"encabezado_funcion : FUN '(' ')' ':' tipo",
"encabezado_funcion : FUN ID ')' ':' tipo",
"encabezado_funcion : FUN ID '(' ':' tipo",
"encabezado_funcion : FUN ID '(' lista_de_parametros ')' ':'",
"encabezado_funcion : FUN '(' lista_de_parametros ')' ':' tipo",
"encabezado_funcion : FUN ID lista_de_parametros ')' ':' tipo",
"encabezado_funcion : FUN ID '(' lista_de_parametros ':' tipo",
"sentencia_return : RETURN '(' expresion ')' ';'",
"sentencia_return : RETURN '(' expresion ')'",
"sentencia_return : RETURN expresion ')'",
"sentencia_return : RETURN '(' expresion",
"sentencia_return : RETURN '(' ')' ';'",
"lista_de_parametros : parametro",
"lista_de_parametros : parametro ',' parametro",
"lista_de_parametros : parametro ',' parametro ',' lista_parametros_exceso",
"lista_parametros_exceso : parametro",
"lista_parametros_exceso : parametro ',' lista_parametros_exceso",
"parametro : tipo ID",
"parametro : tipo",
"$$2 :",
"parametro : $$2 ID",
"declaracion_constantes : CONST lista_declaracion_constantes ';'",
"declaracion_constantes : CONST lista_declaracion_constantes",
"declaracion_constantes : CONST ';'",
"lista_declaracion_constantes : declaracion_constante",
"lista_declaracion_constantes : declaracion_constante ',' lista_declaracion_constantes",
"declaracion_constante : ID ASIGNACION CTE",
"declaracion_constante : ID ASIGNACION",
"declaracion_constante : ID CTE",
"declaracion_constante : ID",
"sentencia_ejecutable : asignacion",
"sentencia_ejecutable : DEFER asignacion",
"sentencia_ejecutable : seleccion",
"sentencia_ejecutable : DEFER seleccion",
"sentencia_ejecutable : imprimir",
"sentencia_ejecutable : DEFER imprimir",
"sentencia_ejecutable : sentencia_when",
"sentencia_ejecutable : DEFER sentencia_when",
"sentencia_ejecutable : sentencia_do",
"sentencia_ejecutable : DEFER sentencia_do",
"sentencia_ejecutable_do : sentencia_ejecutable",
"sentencia_ejecutable_do : sentencia_break",
"sentencia_ejecutable_do : sentencia_continue",
"sentencia_break : BREAK ';'",
"sentencia_break : BREAK ':' etiqueta ';'",
"sentencia_break : BREAK",
"sentencia_break : BREAK ':' etiqueta",
"sentencia_break : BREAK ':' ';'",
"sentencia_continue : CONTINUE ';'",
"sentencia_continue : CONTINUE",
"sentencia_do : sentencia_do_simple",
"sentencia_do : etiqueta ':' sentencia_do_simple",
"sentencia_do_simple : DO bloque_sentencias_ejecutables_do UNTIL '(' condicion ')' ';'",
"sentencia_do_simple : DO bloque_sentencias_ejecutables_do UNTIL '(' condicion ')'",
"sentencia_do_simple : DO bloque_sentencias_ejecutables_do UNTIL '(' ')' ';'",
"sentencia_do_simple : DO bloque_sentencias_ejecutables_do UNTIL condicion ')' ';'",
"sentencia_do_simple : DO bloque_sentencias_ejecutables_do UNTIL '(' condicion ';'",
"etiqueta : ID",
"bloque_sentencias_ejecutables_do : sentencia_ejecutable_do",
"bloque_sentencias_ejecutables_do : '{' sentencias_ejecutables_do '}'",
"sentencias_ejecutables_do : sentencia_ejecutable_do",
"sentencias_ejecutables_do : sentencias_ejecutables_do sentencia_ejecutable_do",
"asignacion : ID ASIGNACION expresion ';'",
"asignacion : ID ASIGNACION ';'",
"asignacion : ID ASIGNACION expresion",
"sentencia_when : WHEN '(' condicion ')' THEN '{' sentencias_when '}' ';'",
"sentencia_when : WHEN '(' condicion ')' '{' sentencias_when '}' ';'",
"$$3 :",
"sentencia_when : WHEN '(' ')' THEN '{' sentencias_when '}' ';' $$3 WHEN '(' condicion ')' THEN '{' sentencias_when '}'",
"sentencia_when : WHEN '(' condicion ')' '{' sentencias_when '}'",
"sentencia_when : WHEN '(' condicion ')' '{' '}'",
"sentencias_when : sentencia",
"sentencias_when : sentencia sentencias_when",
"seleccion : IF '(' condicion ')' THEN bloque_sentencias_ejecutables_seleccion ENDIF ';'",
"seleccion : IF '(' condicion ')' THEN bloque_sentencias_ejecutables_seleccion ELSE bloque_sentencias_ejecutables_seleccion ENDIF ';'",
"seleccion : IF '(' condicion THEN bloque_sentencias_ejecutables_seleccion ENDIF ';'",
"seleccion : IF condicion ')' THEN bloque_sentencias_ejecutables_seleccion ENDIF ';'",
"seleccion : IF '(' ')' THEN bloque_sentencias_ejecutables_seleccion ENDIF ';'",
"seleccion : IF '(' condicion ')' bloque_sentencias_ejecutables_seleccion ENDIF ';'",
"seleccion : IF '(' condicion ')' THEN bloque_sentencias_ejecutables_seleccion ENDIF",
"seleccion : IF '(' condicion ')' THEN ENDIF ';'",
"seleccion : IF '(' condicion THEN bloque_sentencias_ejecutables_seleccion ELSE bloque_sentencias_ejecutables_seleccion ENDIF ';'",
"seleccion : IF condicion ')' THEN bloque_sentencias_ejecutables_seleccion ELSE bloque_sentencias_ejecutables_seleccion ENDIF ';'",
"seleccion : IF '(' ')' THEN bloque_sentencias_ejecutables_seleccion ELSE bloque_sentencias_ejecutables_seleccion ENDIF ';'",
"seleccion : IF '(' condicion ')' bloque_sentencias_ejecutables_seleccion ELSE bloque_sentencias_ejecutables_seleccion ENDIF ';'",
"seleccion : IF '(' condicion ')' THEN ELSE bloque_sentencias_ejecutables_seleccion ENDIF ';'",
"seleccion : IF '(' condicion ')' THEN bloque_sentencias_ejecutables_seleccion ELSE ENDIF ';'",
"seleccion : IF '(' condicion ')' THEN bloque_sentencias_ejecutables_seleccion ELSE bloque_sentencias_ejecutables_seleccion ENDIF",
"seleccion : IF '(' condicion ')' THEN ELSE ENDIF ';'",
"bloque_sentencias_ejecutables_seleccion : sentencia_ejecutable",
"bloque_sentencias_ejecutables_seleccion : '{' sentencias_ejecutables '}'",
"bloque_sentencias_ejecutables_seleccion : sentencias_ejecutables '}'",
"bloque_sentencias_ejecutables_seleccion : '{' sentencias_ejecutables",
"bloque_sentencias_ejecutables_seleccion : '{' '}'",
"sentencias_ejecutables : sentencia_ejecutable",
"sentencias_ejecutables : sentencias_ejecutables sentencia_ejecutable",
"condicion : expresion comparador expresion",
"condicion : expresion comparador",
"condicion : comparador expresion",
"comparador : COMP_MAYOR_IGUAL",
"comparador : COMP_MENOR_IGUAL",
"comparador : COMP_DISTINTO",
"comparador : '>'",
"comparador : '<'",
"comparador : '='",
"expresion : expresion '+' termino",
"expresion : expresion '-' termino",
"expresion : termino",
"termino : termino '*' factor",
"termino : termino '/' factor",
"termino : factor",
"factor : ID",
"factor : constante",
"factor : invocacion_funcion",
"invocacion_funcion : ID '(' ')'",
"invocacion_funcion : ID '(' lista_de_parametros_reales ')'",
"lista_de_parametros_reales : parametro_real",
"lista_de_parametros_reales : lista_de_parametros_reales ',' parametro_real",
"parametro_real : ID",
"parametro_real : constante",
"imprimir : OUT '(' CADENA ')' ';'",
"imprimir : OUT '(' ID ')' ';'",
"imprimir : OUT '(' ')' ';'",
"imprimir : OUT CADENA ')' ';'",
"imprimir : OUT '(' CADENA ';'",
"imprimir : OUT ID ')' ';'",
"imprimir : OUT '(' ID ';'",
"imprimir : OUT '(' CADENA ')'",
"imprimir : OUT '(' ID ')'",
"constante : CTE",
"constante : '-' CTE",
"tipo : UINT16",
"tipo : DOUBLE64",
};

//#line 365 ".\gramatica.y"

public static AnalizadorLexico lexico = null;
public static Logger logger = null;
public static TablaDeSimbolos ts = null;

public void constanteConSigno(String constante) {
	if (constante.contains(".")) {
		
		String negConstante = "-"+constante;
		
		Double parsedDouble = Double.parseDouble(negConstante.replace('D', 'E'));
		
		if (parsedDouble < -2.2250738585072014E-308 && -1.7976931348623157E+308 > parsedDouble) {
			logger.logWarning("[Parser] Rango invalido para la constante: " + negConstante + ", se trunca al rango permitido");
			
			if (-1.7976931348623157E+308 < parsedDouble) {
				negConstante = new String("-1.7976931348623157D+308");
			} else {
				negConstante =  new String("-2.2250738585072014D-308");
			}
		}
		
		ts.swapLexemas(constante, negConstante);
	} else {
		//se recibio un uint que fue aceptado por el lexico pero resulta ser negativo
		logger.logWarning("[Parser] No se admiten ui16 con valores negativos: " + "-"+constante + ", se trunca a 0");
		
		ts.swapLexemas(constante, "0");
	}
}	

public int yylex() {
	return lexico.yylex(yylval);
}

public void yyerror(String error) {
	logger.logError(error);
}

public static void main(String[] args) {
	if (args.length == 0) {
		System.err.println("No se especifico ningun archivo de codigo");
	} else {
		String archivo_a_leer = args[0];
		System.out.println("Se va a leer archivo " + archivo_a_leer);
		
		FileReaderHelper fileHelper = new FileReaderHelper();
		
		fileHelper.open(archivo_a_leer);
		
		Parser parser = new Parser();
		logger = new Logger();
		ts = new TablaDeSimbolos();
		lexico = new AnalizadorLexico(fileHelper, ts, logger);
		
        parser.run();

		String path = new File(archivo_a_leer).getAbsolutePath().replaceAll(args[0],"");
        
        Output out = new Output(path);
        
        String printTs = ts.print();
        
        
        out.saveFile("codigo-lexico.txt", logger.getLexico());
		out.saveFile("codigo-sintetico.txt", logger.getSintactico());
		out.saveFile("tabla-de-simbolos.txt", printTs);
        
		System.out.println(printTs);
	}
}
//#line 918 "Parser.java"
//###############################################################
// method: yylexdebug : check lexer state
//###############################################################
void yylexdebug(int state,int ch)
{
String s=null;
  if (ch < 0) ch=0;
  if (ch <= YYMAXTOKEN) //check index bounds
     s = yyname[ch];    //now get it
  if (s==null)
    s = "illegal-symbol";
  debug("state "+state+", reading "+ch+" ("+s+")");
}





//The following are now global, to aid in error reporting
int yyn;       //next next thing to do
int yym;       //
int yystate;   //current parsing state from state table
String yys;    //current token string


//###############################################################
// method: yyparse : parse input and execute indicated items
//###############################################################
int yyparse()
{
boolean doaction;
  init_stacks();
  yynerrs = 0;
  yyerrflag = 0;
  yychar = -1;          //impossible char forces a read
  yystate=0;            //initial state
  state_push(yystate);  //save it
  val_push(yylval);     //save empty value
  while (true) //until parsing is done, either correctly, or w/error
    {
    doaction=true;
    if (yydebug) debug("loop"); 
    //#### NEXT ACTION (from reduction table)
    for (yyn=yydefred[yystate];yyn==0;yyn=yydefred[yystate])
      {
      if (yydebug) debug("yyn:"+yyn+"  state:"+yystate+"  yychar:"+yychar);
      if (yychar < 0)      //we want a char?
        {
        yychar = yylex();  //get next token
        if (yydebug) debug(" next yychar:"+yychar);
        //#### ERROR CHECK ####
        if (yychar < 0)    //it it didn't work/error
          {
          yychar = 0;      //change it to default string (no -1!)
          if (yydebug)
            yylexdebug(yystate,yychar);
          }
        }//yychar<0
      yyn = yysindex[yystate];  //get amount to shift by (shift index)
      if ((yyn != 0) && (yyn += yychar) >= 0 &&
          yyn <= YYTABLESIZE && yycheck[yyn] == yychar)
        {
        if (yydebug)
          debug("state "+yystate+", shifting to state "+yytable[yyn]);
        //#### NEXT STATE ####
        yystate = yytable[yyn];//we are in a new state
        state_push(yystate);   //save it
        val_push(yylval);      //push our lval as the input for next rule
        yychar = -1;           //since we have 'eaten' a token, say we need another
        if (yyerrflag > 0)     //have we recovered an error?
           --yyerrflag;        //give ourselves credit
        doaction=false;        //but don't process yet
        break;   //quit the yyn=0 loop
        }

    yyn = yyrindex[yystate];  //reduce
    if ((yyn !=0 ) && (yyn += yychar) >= 0 &&
            yyn <= YYTABLESIZE && yycheck[yyn] == yychar)
      {   //we reduced!
      if (yydebug) debug("reduce");
      yyn = yytable[yyn];
      doaction=true; //get ready to execute
      break;         //drop down to actions
      }
    else //ERROR RECOVERY
      {
      if (yyerrflag==0)
        {
        yyerror("syntax error");
        yynerrs++;
        }
      if (yyerrflag < 3) //low error count?
        {
        yyerrflag = 3;
        while (true)   //do until break
          {
          if (stateptr<0)   //check for under & overflow here
            {
            yyerror("stack underflow. aborting...");  //note lower case 's'
            return 1;
            }
          yyn = yysindex[state_peek(0)];
          if ((yyn != 0) && (yyn += YYERRCODE) >= 0 &&
                    yyn <= YYTABLESIZE && yycheck[yyn] == YYERRCODE)
            {
            if (yydebug)
              debug("state "+state_peek(0)+", error recovery shifting to state "+yytable[yyn]+" ");
            yystate = yytable[yyn];
            state_push(yystate);
            val_push(yylval);
            doaction=false;
            break;
            }
          else
            {
            if (yydebug)
              debug("error recovery discarding state "+state_peek(0)+" ");
            if (stateptr<0)   //check for under & overflow here
              {
              yyerror("Stack underflow. aborting...");  //capital 'S'
              return 1;
              }
            state_pop();
            val_pop();
            }
          }
        }
      else            //discard this token
        {
        if (yychar == 0)
          return 1; //yyabort
        if (yydebug)
          {
          yys = null;
          if (yychar <= YYMAXTOKEN) yys = yyname[yychar];
          if (yys == null) yys = "illegal-symbol";
          debug("state "+yystate+", error recovery discards token "+yychar+" ("+yys+")");
          }
        yychar = -1;  //read another
        }
      }//end error recovery
    }//yyn=0 loop
    if (!doaction)   //any reason not to proceed?
      continue;      //skip action
    yym = yylen[yyn];          //get count of terminals on rhs
    if (yydebug)
      debug("state "+yystate+", reducing "+yym+" by rule "+yyn+" ("+yyrule[yyn]+")");
    if (yym>0)                 //if count of rhs not 'nil'
      yyval = val_peek(yym-1); //get current semantic value
    yyval = dup_yyval(yyval); //duplicate yyval if ParserVal is used as semantic value
    switch(yyn)
      {
//########## USER-SUPPLIED ACTIONS ##########
case 1:
//#line 17 ".\gramatica.y"
{ logger.logSuccess("[Parser] Programa correcto detectado"); }
break;
case 2:
//#line 18 ".\gramatica.y"
{ logger.logError("[Parser] Se esperaba un identificador nombre del programa"); }
break;
case 3:
//#line 19 ".\gramatica.y"
{ logger.logError("[Parser] Se esperaba un { antes de las sentencias del programa"); }
break;
case 4:
//#line 20 ".\gramatica.y"
{ logger.logError("[Parser] Se esperaba un } al final de las sentencias del programa"); }
break;
case 5:
//#line 21 ".\gramatica.y"
{ logger.logError("[Parser] Se esperaban sentencias del programa"); }
break;
case 15:
//#line 46 ".\gramatica.y"
{ logger.logSuccess("[Parser] Declaracion de lista de variables detectado"); }
break;
case 16:
//#line 47 ".\gramatica.y"
{ logger.logError("[Parser] Se esperaba un ; al final de la lista de variables"); }
break;
case 17:
//#line 48 ".\gramatica.y"
{ logger.logError("[Parser] Se esperaba un tipo para la lista de variables"); }
break;
case 18:
//#line 49 ".\gramatica.y"
{ logger.logError("[Parser] Se esperaba una variable o lista de variables"); }
break;
case 21:
//#line 58 ".\gramatica.y"
{ logger.logSuccess("[Parser] Declaracion de funcion detectado"); }
break;
case 22:
//#line 59 ".\gramatica.y"
{ logger.logSuccess("[Parser] Declaracion de funcion detectado"); }
break;
case 23:
//#line 60 ".\gramatica.y"
{ logger.logError("[Parser] Se esperaban sentencias en la funcion"); }
break;
case 45:
//#line 94 ".\gramatica.y"
{ logger.logSuccess("[Parser] Declaracion de funcion detectado"); }
break;
case 46:
//#line 95 ".\gramatica.y"
{ logger.logSuccess("[Parser] Declaracion de funcion detectado"); }
break;
case 53:
//#line 111 ".\gramatica.y"
{ logger.logSuccess("[Parser] Sentencia when detectada"); }
break;
case 54:
//#line 112 ".\gramatica.y"
{ logger.logSuccess("[Parser] Sentencia when detectada"); }
break;
case 57:
//#line 121 ".\gramatica.y"
{ logger.logSuccess("[Parser] Sentencia do until detectada"); }
break;
case 58:
//#line 122 ".\gramatica.y"
{ logger.logSuccess("[Parser] Sentencia do until detectada"); }
break;
case 59:
//#line 123 ".\gramatica.y"
{ logger.logSuccess("[Parser] Sentencia do until detectada"); }
break;
case 60:
//#line 124 ".\gramatica.y"
{ logger.logSuccess("[Parser] Sentencia do until detectada"); }
break;
case 63:
//#line 130 ".\gramatica.y"
{ logger.logError("[Parser] Se esperaba un tipo de return para la funcion"); }
break;
case 64:
//#line 131 ".\gramatica.y"
{ logger.logError("[Parser] Se esperaba un identificador nombre para la funcion"); }
break;
case 65:
//#line 132 ".\gramatica.y"
{ logger.logError("[Parser] Se esperaba un ( luego del nombre de la funcion"); }
break;
case 66:
//#line 133 ".\gramatica.y"
{ logger.logError("[Parser] Se esperaba un ) luego del nombre para la funcion"); }
break;
case 67:
//#line 134 ".\gramatica.y"
{ logger.logError("[Parser] Se esperaba un tipo de return para la funcion"); }
break;
case 68:
//#line 135 ".\gramatica.y"
{ logger.logError("[Parser] Se esperaba un identificador nombre para la funcion"); }
break;
case 69:
//#line 136 ".\gramatica.y"
{ logger.logError("[Parser] Se esperaba un ( luego del nombre de la funcion"); }
break;
case 70:
//#line 137 ".\gramatica.y"
{ logger.logError("[Parser] Se esperaba un ) luego del nombre para la funcion"); }
break;
case 72:
//#line 142 ".\gramatica.y"
{ logger.logError("[Parser] Se esperaba un ; al final de la sentencia return"); }
break;
case 73:
//#line 143 ".\gramatica.y"
{ logger.logError("[Parser] Se esperaba un ( en la sentencia return"); }
break;
case 74:
//#line 144 ".\gramatica.y"
{ logger.logError("[Parser] Se esperaba un ) en la sentencia return"); }
break;
case 75:
//#line 145 ".\gramatica.y"
{ logger.logError("[Parser] Se esperaba una expresion en la sentencia return"); }
break;
case 78:
//#line 151 ".\gramatica.y"
{ logger.logError("[Parser] Hay mas de 2 parametros en la funcion"); }
break;
case 83:
//#line 161 ".\gramatica.y"
{ logger.logError("[Parser] Se esperaba un identificador nombre para el parametro"); }
break;
case 84:
//#line 162 ".\gramatica.y"
{ logger.logError("[Parser] Se esperaba un tipo valido para el parametro"); }
break;
case 85:
//#line 166 ".\gramatica.y"
{ logger.logSuccess("[Parser] Declaracion de constantes detectado"); }
break;
case 86:
//#line 167 ".\gramatica.y"
{ logger.logError("[Parser] Se esperaba ; al final de la declaracion de constantes"); }
break;
case 87:
//#line 168 ".\gramatica.y"
{ logger.logError("[Parser] Se esperaba una lista de declaracion de constantes"); }
break;
case 91:
//#line 178 ".\gramatica.y"
{ logger.logError("[Parser] Se esperaba una constante del lado derecho de la asignacion"); }
break;
case 92:
//#line 179 ".\gramatica.y"
{ logger.logError("[Parser] Se esperaba el simbolo asignacion en la declaracion de constantes"); }
break;
case 93:
//#line 180 ".\gramatica.y"
{ logger.logError("[Parser] Se esperaba una asignacion en la declaracion de constantes"); }
break;
case 107:
//#line 203 ".\gramatica.y"
{ logger.logSuccess("[Parser] Sentencia break detectada"); }
break;
case 108:
//#line 204 ".\gramatica.y"
{ logger.logSuccess("[Parser] Sentencia break con etiqueta detectada"); }
break;
case 109:
//#line 205 ".\gramatica.y"
{ logger.logError("[Parser] Se esperaba un ; luego de la sentencia break"); }
break;
case 110:
//#line 206 ".\gramatica.y"
{ logger.logError("[Parser] Se esperaba un ; luego de la sentencia break"); }
break;
case 111:
//#line 207 ".\gramatica.y"
{ logger.logError("[Parser] Se esperaba una etiqueta en la sentencia break"); }
break;
case 112:
//#line 211 ".\gramatica.y"
{ logger.logSuccess("[Parser] Sentencia continue detectada"); }
break;
case 113:
//#line 212 ".\gramatica.y"
{ logger.logError("[Parser] Se esperaba un ; al final de la sentencia continue"); }
break;
case 116:
//#line 221 ".\gramatica.y"
{ logger.logSuccess("[Parser] Sentencia do until detectada"); }
break;
case 117:
//#line 222 ".\gramatica.y"
{ logger.logError("[Parser] Se esperaba un ; al final de la sentencia do"); }
break;
case 118:
//#line 223 ".\gramatica.y"
{ logger.logError("[Parser] Se esperaba una condicion para la sentencia do"); }
break;
case 119:
//#line 224 ".\gramatica.y"
{ logger.logSuccess("[Parser] Se esperaba un ( en la condicion para la sentencia do"); }
break;
case 120:
//#line 225 ".\gramatica.y"
{ logger.logSuccess("[Parser] Se esperaba un ) en la condicion para la sentencia do"); }
break;
case 126:
//#line 243 ".\gramatica.y"
{ logger.logSuccess("[Parser] Asignacion detectada"); }
break;
case 127:
//#line 244 ".\gramatica.y"
{logger.logError("[Parser] Se espera una expresion del lado derecho de la asignacion");}
break;
case 128:
//#line 245 ".\gramatica.y"
{ logger.logError("[Parser] Se espera un ; al final de la asignacion"); }
break;
case 129:
//#line 249 ".\gramatica.y"
{ logger.logSuccess("[Parser] Sentencia when detectada"); }
break;
case 130:
//#line 250 ".\gramatica.y"
{ logger.logError("[Parser] Se esperaba la palabra reservada then en la sentencia when"); }
break;
case 131:
//#line 251 ".\gramatica.y"
{ logger.logError("[Parser] Se esperaba una condicion en la sentencia when"); }
break;
case 132:
//#line 252 ".\gramatica.y"
{ logger.logError("[Parser] Se esperaba un ; al final de la sentencia when"); }
break;
case 133:
//#line 253 ".\gramatica.y"
{ logger.logError("[Parser] Se esperaba la palabra reservada then en la sentencia when"); }
break;
case 134:
//#line 254 ".\gramatica.y"
{ logger.logError("[Parser] Se esperaban sentencias dentro del when"); }
break;
case 137:
//#line 263 ".\gramatica.y"
{ logger.logSuccess("[Parser] Sentencia if then detectada"); }
break;
case 138:
//#line 264 ".\gramatica.y"
{ logger.logSuccess("[Parser] Sentencia if then else detectada"); }
break;
case 139:
//#line 265 ".\gramatica.y"
{ logger.logError("[Parser] Se esperaba un ) para la condicion de la sentencia de seleccion"); }
break;
case 140:
//#line 266 ".\gramatica.y"
{ logger.logError("[Parser] Se esperaba un ( para la condicion de la sentencia de seleccion"); }
break;
case 141:
//#line 267 ".\gramatica.y"
{ logger.logError("[Parser] Se esperaba una condicion para la sentencia de seleccion"); }
break;
case 142:
//#line 268 ".\gramatica.y"
{ logger.logError("[Parser] Se esperaba la palabra reservada then en la sentencia de seleccion"); }
break;
case 143:
//#line 269 ".\gramatica.y"
{ logger.logError("[Parser] Se esperaba un ; al final de la sentencia de seleccion"); }
break;
case 144:
//#line 270 ".\gramatica.y"
{ logger.logError("[Parser] Se esperaba un bloque de sentencias en la sentencia de seleccion luego de la palabra reservada then"); }
break;
case 145:
//#line 271 ".\gramatica.y"
{ logger.logError("[Parser] Se esperaba un ) para la condicion de la sentencia de seleccion"); }
break;
case 146:
//#line 272 ".\gramatica.y"
{ logger.logError("[Parser] Se esperaba un ( para la condicion de la sentencia de seleccion"); }
break;
case 147:
//#line 273 ".\gramatica.y"
{ logger.logError("[Parser] Se esperaba una condicion para la sentencia de seleccion"); }
break;
case 148:
//#line 274 ".\gramatica.y"
{ logger.logError("[Parser] Se esperaba la palabra reservada then en la sentencia de seleccion"); }
break;
case 149:
//#line 275 ".\gramatica.y"
{ logger.logError("[Parser] Se esperaba un bloque de sentencias en la sentencia de seleccion luego de la palabra reservada then"); }
break;
case 150:
//#line 276 ".\gramatica.y"
{ logger.logError("[Parser] Se esperaba un bloque de sentencias en la sentencia de seleccion luego de la palabra reservada else"); }
break;
case 151:
//#line 277 ".\gramatica.y"
{ logger.logError("[Parser] Se esperaba un ; al final de la sentencia de seleccion"); }
break;
case 152:
//#line 278 ".\gramatica.y"
{ logger.logError("[Parser] Se esperaba un bloque de sentencias para el then y el else de la sentencia de seleccion"); }
break;
case 155:
//#line 284 ".\gramatica.y"
{ logger.logError("[Parser] Se esperaba un { para el bloque de sentencias en la sentencia if"); }
break;
case 156:
//#line 285 ".\gramatica.y"
{ logger.logError("[Parser] Se esperaba un } para el bloque de sentencias en la sentencia if"); }
break;
case 157:
//#line 286 ".\gramatica.y"
{ logger.logError("[Parser] Se esperaba sentencias ejecutables dentro del bloque if"); }
break;
case 161:
//#line 296 ".\gramatica.y"
{ logger.logError("[Parser] Se esperaba un expresion del lado derecho de la comparacion"); }
break;
case 162:
//#line 297 ".\gramatica.y"
{ logger.logError("[Parser] Se esperaba un expresion del lado izquierdo de la comparacion"); }
break;
case 184:
//#line 343 ".\gramatica.y"
{ logger.logSuccess("[Parser] Sentencia out detectada"); }
break;
case 185:
//#line 344 ".\gramatica.y"
{ logger.logSuccess("[Parser] Sentencia out detectada"); }
break;
case 186:
//#line 345 ".\gramatica.y"
{ logger.logError("[Parser] Se esperaba una cadena o identificador en la sentencia out"); }
break;
case 187:
//#line 346 ".\gramatica.y"
{ logger.logError("[Parser] Se esperaba un ( en la sentencia out"); }
break;
case 188:
//#line 347 ".\gramatica.y"
{ logger.logError("[Parser] Se esperaba un ) en la sentencia out"); }
break;
case 189:
//#line 348 ".\gramatica.y"
{ logger.logError("[Parser] Se esperaba un ( en la sentencia out"); }
break;
case 190:
//#line 349 ".\gramatica.y"
{ logger.logError("[Parser] Se esperaba un ) en la sentencia out"); }
break;
case 191:
//#line 350 ".\gramatica.y"
{ logger.logError("[Parser] Se espera un ; al final de la sentencia out"); }
break;
case 192:
//#line 351 ".\gramatica.y"
{ logger.logError("[Parser] Se espera un ; al final de la sentencia out"); }
break;
case 194:
//#line 356 ".\gramatica.y"
{ constanteConSigno(val_peek(0).sval); }
break;
//#line 1439 "Parser.java"
//########## END OF USER-SUPPLIED ACTIONS ##########
    }//switch
    //#### Now let's reduce... ####
    if (yydebug) debug("reduce");
    state_drop(yym);             //we just reduced yylen states
    yystate = state_peek(0);     //get new state
    val_drop(yym);               //corresponding value drop
    yym = yylhs[yyn];            //select next TERMINAL(on lhs)
    if (yystate == 0 && yym == 0)//done? 'rest' state and at first TERMINAL
      {
      if (yydebug) debug("After reduction, shifting from state 0 to state "+YYFINAL+"");
      yystate = YYFINAL;         //explicitly say we're done
      state_push(YYFINAL);       //and save it
      val_push(yyval);           //also save the semantic value of parsing
      if (yychar < 0)            //we want another character?
        {
        yychar = yylex();        //get next character
        if (yychar<0) yychar=0;  //clean, if necessary
        if (yydebug)
          yylexdebug(yystate,yychar);
        }
      if (yychar == 0)          //Good exit (if lex returns 0 ;-)
         break;                 //quit the loop--all DONE
      }//if yystate
    else                        //else not done yet
      {                         //get next state and push, for next yydefred[]
      yyn = yygindex[yym];      //find out where to go
      if ((yyn != 0) && (yyn += yystate) >= 0 &&
            yyn <= YYTABLESIZE && yycheck[yyn] == yystate)
        yystate = yytable[yyn]; //get new state
      else
        yystate = yydgoto[yym]; //else go to new defred
      if (yydebug) debug("after reduction, shifting from state "+state_peek(0)+" to state "+yystate+"");
      state_push(yystate);     //going again, so push state & val...
      val_push(yyval);         //for next action
      }
    }//main loop
  return 0;//yyaccept!!
}
//## end of method parse() ######################################



//## run() --- for Thread #######################################
/**
 * A default run method, used for operating this parser
 * object in the background.  It is intended for extending Thread
 * or implementing Runnable.  Turn off with -Jnorun .
 */
public void run()
{
  yyparse();
}
//## end of method run() ########################################



//## Constructors ###############################################
/**
 * Default constructor.  Turn off with -Jnoconstruct .

 */
public Parser()
{
  //nothing to do
}


/**
 * Create a parser, setting the debug to true or false.
 * @param debugMe true for debugging, false for no debug.
 */
public Parser(boolean debugMe)
{
  yydebug=debugMe;
}
//###############################################################



}
//################### END OF CLASS ##############################
