//### This file created by BYACC 1.8(/Java extension  1.15)
//### Java capabilities added 7 Jan 97, Bob Jamison
//### Updated : 27 Nov 97  -- Bob Jamison, Joe Nieten
//###           01 Jan 98  -- Bob Jamison -- fixed generic semantic constructor
//###           01 Jun 99  -- Bob Jamison -- added Runnable support
//###           06 Aug 00  -- Bob Jamison -- made state variables class-global
//###           03 Jan 01  -- Bob Jamison -- improved flags, tracing
//###           16 May 01  -- Bob Jamison -- added custom stack sizing
//###           04 Mar 02  -- Yuval Oren  -- improved java performance, added options
//###           14 Mar 02  -- Tomas Hurka -- -d support, static initializer workaround
//### Please send bug reports to tom@hukatronic.cz
//### static char yysccsid[] = "@(#)yaccpar	1.8 (Berkeley) 01/20/90";






//#line 2 ".\gramatica.y"
package compilador;
import java.io.File;
//#line 20 "Parser.java"




public class Parser
{

boolean yydebug;        //do I want debug output?
int yynerrs;            //number of errors so far
int yyerrflag;          //was there an error?
int yychar;             //the current working character

//########## MESSAGES ##########
//###############################################################
// method: debug
//###############################################################
void debug(String msg)
{
  if (yydebug)
    System.out.println(msg);
}

//########## STATE STACK ##########
final static int YYSTACKSIZE = 500;  //maximum stack size
int statestk[] = new int[YYSTACKSIZE]; //state stack
int stateptr;
int stateptrmax;                     //highest index of stackptr
int statemax;                        //state when highest index reached
//###############################################################
// methods: state stack push,pop,drop,peek
//###############################################################
final void state_push(int state)
{
  try {
		stateptr++;
		statestk[stateptr]=state;
	 }
	 catch (ArrayIndexOutOfBoundsException e) {
     int oldsize = statestk.length;
     int newsize = oldsize * 2;
     int[] newstack = new int[newsize];
     System.arraycopy(statestk,0,newstack,0,oldsize);
     statestk = newstack;
     statestk[stateptr]=state;
  }
}
final int state_pop()
{
  return statestk[stateptr--];
}
final void state_drop(int cnt)
{
  stateptr -= cnt; 
}
final int state_peek(int relative)
{
  return statestk[stateptr-relative];
}
//###############################################################
// method: init_stacks : allocate and prepare stacks
//###############################################################
final boolean init_stacks()
{
  stateptr = -1;
  val_init();
  return true;
}
//###############################################################
// method: dump_stacks : show n levels of the stacks
//###############################################################
void dump_stacks(int count)
{
int i;
  System.out.println("=index==state====value=     s:"+stateptr+"  v:"+valptr);
  for (i=0;i<count;i++)
    System.out.println(" "+i+"    "+statestk[i]+"      "+valstk[i]);
  System.out.println("======================");
}


//########## SEMANTIC VALUES ##########
//public class ParserVal is defined in ParserVal.java


String   yytext;//user variable to return contextual strings
ParserVal yyval; //used to return semantic vals from action routines
ParserVal yylval;//the 'lval' (result) I got from yylex()
ParserVal valstk[];
int valptr;
//###############################################################
// methods: value stack push,pop,drop,peek.
//###############################################################
void val_init()
{
  valstk=new ParserVal[YYSTACKSIZE];
  yyval=new ParserVal();
  yylval=new ParserVal();
  valptr=-1;
}
void val_push(ParserVal val)
{
  if (valptr>=YYSTACKSIZE)
    return;
  valstk[++valptr]=val;
}
ParserVal val_pop()
{
  if (valptr<0)
    return new ParserVal();
  return valstk[valptr--];
}
void val_drop(int cnt)
{
int ptr;
  ptr=valptr-cnt;
  if (ptr<0)
    return;
  valptr = ptr;
}
ParserVal val_peek(int relative)
{
int ptr;
  ptr=valptr-relative;
  if (ptr<0)
    return new ParserVal();
  return valstk[ptr];
}
final ParserVal dup_yyval(ParserVal val)
{
  ParserVal dup = new ParserVal();
  dup.ival = val.ival;
  dup.dval = val.dval;
  dup.sval = val.sval;
  dup.obj = val.obj;
  return dup;
}
//#### end semantic value section ####
public final static short ID=257;
public final static short CTE=258;
public final static short CADENA=259;
public final static short IF=260;
public final static short THEN=261;
public final static short ELSE=262;
public final static short ENDIF=263;
public final static short OUT=264;
public final static short FUN=265;
public final static short RETURN=266;
public final static short BREAK=267;
public final static short ASIGNACION=268;
public final static short COMP_MAYOR_IGUAL=269;
public final static short COMP_MENOR_IGUAL=270;
public final static short COMP_DISTINTO=271;
public final static short WHEN=272;
public final static short DO=273;
public final static short UNTIL=274;
public final static short CONTINUE=275;
public final static short DOUBLE64=276;
public final static short UINT16=277;
public final static short DEFER=278;
public final static short CONST=279;
public final static short YYERRCODE=256;
final static short yylhs[] = {                           -1,
    0,    0,    0,    0,    0,    0,    1,    2,    2,    3,
    3,    4,    4,    4,    4,    6,    6,    6,    6,   11,
   11,    7,    7,    7,   14,   14,   15,   15,   16,   16,
   16,   16,   16,   16,   16,   16,   16,   16,   22,   22,
    8,    8,   23,   23,   23,   23,   23,   23,   23,   23,
   23,   23,   23,   23,   23,   23,   25,   25,   25,   21,
   21,   21,   21,   21,   21,   21,   21,   21,   21,   21,
   21,   21,   21,   19,   19,   19,   19,   19,   19,   19,
   19,   19,   19,   19,   19,   19,   20,   20,   20,   20,
   20,   20,   26,   26,   26,   26,   26,   26,   26,   26,
   26,   26,   26,   26,   26,   28,   28,   29,   29,   29,
   12,   12,   12,   12,   12,   12,   12,   12,   12,   12,
   12,   13,   13,   13,   13,   13,   32,   32,   32,   35,
   35,   34,   34,   36,   34,    9,    9,    9,   37,   37,
   38,   38,   38,   38,   38,    5,    5,    5,    5,    5,
    5,    5,    5,    5,    5,   42,   42,   42,   30,   30,
   30,   30,   30,   31,   31,   41,   41,   43,   43,   43,
   43,   43,   27,   44,   44,   44,   44,   45,   45,   17,
   17,   17,   17,   17,   40,   40,   40,   40,   40,   40,
   46,   46,   39,   39,   39,   39,   39,   39,   39,   39,
   39,   39,   39,   39,   47,   47,   47,   47,   47,   48,
   48,   24,   24,   24,   49,   49,   49,   49,   49,   49,
   33,   33,   33,   50,   50,   50,   51,   51,   51,   53,
   53,   54,   54,   55,   55,   18,   18,   18,   18,   18,
   18,   18,   18,   18,   52,   52,   10,   10,
};
final static short yylen[] = {                            2,
    4,    3,    3,    3,    3,    0,    1,    1,    2,    1,
    1,    1,    1,    1,    1,    3,    2,    2,    2,    3,
    1,    4,    5,    3,    1,    2,    1,    1,    1,    2,
    1,    2,    1,    2,    1,    2,    1,    2,    1,    2,
    4,    5,   10,   13,   13,   13,   13,   16,   16,    9,
   12,   12,   12,   12,   15,   15,    1,    1,    2,    8,
    8,    8,   11,   11,   15,   13,   13,   15,   15,   15,
   13,   13,   14,    9,   10,   10,    8,    9,    9,    8,
    8,    9,    9,    8,    9,    9,    7,    9,    6,    8,
    5,    7,    1,    1,    1,    4,    4,    3,    2,    3,
    3,    3,    3,    2,    2,    1,    2,    1,    1,    1,
    6,    7,    6,    5,    5,    5,    5,    6,    6,    6,
    6,    5,    4,    3,    3,    4,    1,    3,    5,    1,
    3,    2,    1,    0,    2,    3,    2,    2,    1,    3,
    3,    2,    2,    1,    3,    1,    2,    1,    2,    1,
    2,    1,    2,    1,    2,    1,    1,    1,    2,    4,
    1,    3,    3,    2,    1,    1,    3,    7,    6,    6,
    6,    6,    1,    1,    3,    2,    2,    1,    2,    4,
    3,    3,    4,    3,    9,    8,    8,    8,    7,    6,
    1,    2,    8,   10,    7,    9,    7,    7,    7,    7,
    7,    9,    9,    8,    1,    3,    2,    2,    2,    1,
    2,    3,    2,    2,    1,    1,    1,    1,    1,    1,
    3,    3,    1,    3,    3,    1,    1,    1,    1,    3,
    4,    1,    3,    1,    1,    5,    5,    4,    4,    4,
    4,    4,    4,    4,    1,    2,    1,    1,
};
final static short yydefred[] = {                         0,
    7,    0,    0,    0,    0,    0,    0,    0,    0,    0,
  248,  247,    0,    0,    0,    8,   10,   11,   12,   13,
   14,   15,    0,    0,    0,  146,  150,    0,  148,  152,
  154,  166,    0,    0,    0,    0,    0,    0,  245,  215,
  216,  217,    0,    0,  220,  218,  219,    0,    0,    0,
    0,  226,  228,  229,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,  156,  157,  158,    0,    0,    0,
  147,  151,  149,  153,  155,    0,  138,    0,    0,    2,
    9,    0,   19,    0,   18,    0,    0,    5,    0,    3,
  181,    0,   20,    0,    0,  246,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
  159,    0,  164,  178,    0,    0,  177,  179,  143,    0,
    0,  136,    0,   16,    0,    0,    0,    0,    0,   24,
   27,    0,    0,   25,   28,   29,   31,   33,   35,   37,
    0,    0,  167,    1,  180,  183,  234,  230,  235,    0,
  232,    0,    0,    0,    0,    0,    0,    0,  224,  225,
  241,  239,  242,    0,  240,    0,  238,    0,    0,    0,
    0,  132,    0,    0,  135,    0,    0,    0,    0,  173,
  163,    0,  175,    0,    0,  141,  145,  140,    0,    0,
    0,    0,    0,   93,  108,   94,    0,    0,  106,  109,
  110,    0,   30,   32,   34,   36,   38,   22,    0,   26,
    0,   41,    0,    0,  231,    0,    0,    0,    0,    0,
    0,    0,    0,  237,  236,    0,  117,    0,    0,  116,
    0,    0,  115,    0,    0,    0,    0,  160,    0,    0,
    0,    0,    0,    0,  124,    0,    0,   99,    0,    0,
  105,    0,    0,  107,    0,   23,   42,    0,  233,  207,
  210,    0,    0,    0,  209,  211,    0,    0,    0,    0,
    0,    0,    0,  111,    0,  113,  121,  120,    0,  119,
    0,    0,    0,  190,    0,  170,  172,    0,  171,    0,
  126,    0,    0,    0,   98,    0,    0,    0,  101,  103,
    0,    0,  206,    0,  199,  197,    0,  200,    0,    0,
    0,  201,  198,  112,    0,  129,  192,    0,    0,    0,
  168,    0,  122,    0,    0,    0,   96,   97,   91,    0,
    0,    0,    0,  204,    0,  193,    0,    0,  187,    0,
  186,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,  202,    0,  203,  131,  185,   59,   39,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,   87,    0,    0,    0,   92,
    0,  194,    0,    0,   40,    0,   60,    0,   62,   61,
    0,    0,   57,   58,    0,    0,   81,    0,    0,   80,
    0,    0,    0,   84,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,   82,   83,   74,    0,    0,
   85,   86,    0,    0,   88,    0,    0,    0,    0,    0,
    0,    0,    0,    0,   43,    0,   75,   76,    0,    0,
    0,    0,    0,    0,   63,    0,    0,    0,   64,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,   66,   44,    0,
    0,   67,   45,   71,   72,   46,   47,    0,    0,    0,
   73,    0,    0,    0,    0,    0,    0,    0,    0,   69,
   70,   65,    0,   68,    0,    0,    0,   48,   49,    0,
    0,    0,    0,    0,    0,
};
final static short yydgoto[] = {                          3,
    4,   15,  291,   17,   18,   19,   20,   21,   22,   23,
   24,   25,  403,  143,  144,  370,  146,  147,  148,  149,
  150,  371,  404,   48,  357,  207,  152,  208,  209,  210,
  211,  114,   49,  115,  326,  116,   78,   79,   29,   30,
   31,  128,   32,   69,   70,  292,  228,  229,   50,   51,
   52,   53,   54,  160,  161,
};
final static short yysindex[] = {                       -60,
    0, 1784,    0,  851,  -13,  337,  -12,   -5,   -1,  998,
    0,    0,  759,  -46, 1284,    0,    0,    0,    0,    0,
    0,    0,  -44,   16,   35,    0,    0,   80,    0,    0,
    0,    0, 1308, 1334,   71, -170,   75,   65,    0,    0,
    0,    0, -125,  175,    0,    0,    0,  114,  -41,   75,
   29,    0,    0,    0,  139,  147,   15,  -34,  -16,  973,
  -49,   54,  135, 1817,    0,    0,    0,    0,  -51, 1544,
    0,    0,    0,    0,    0,   32,    0,  155,  183,    0,
    0,  254,    0,  174,    0, 1274,   30,    0, 1358,    0,
    0,   98,    0,  146,   23,    0,   22,  -36,   52,   75,
   75,   75,  165,   75,   75,  258,  263,   10,   36,  271,
  -18,  277,   81,  301,  306,  104,  308,  323,  113,  349,
    0,   11,    0,    0, 1563,  449,    0,    0,    0,  120,
  138,    0,  151,    0,  391,   13,  397,  951,  874,    0,
    0,  286, 1761,    0,    0,    0,    0,    0,    0,    0,
  315,  384,    0,    0,    0,    0,    0,    0,    0,   93,
    0, 1114, 1114,  353, 1114,   29,   29,  165,    0,    0,
    0,    0,    0,  404,    0,  406,    0,  399, -195,   56,
 -195,    0,  411, -195,    0, -195,  413,  350,  -90,    0,
    0,  421,    0,  981,  442,    0,    0,    0,   39,   57,
    4, 1010, 1582,    0,    0,    0,  218, 1491,    0,    0,
    0,  453,    0,    0,    0,    0,    0,    0,  370,    0,
  381,    0,  240,   86,    0, 1384,    0, -101, 1681,  259,
 1060,  -93,  261,    0,    0, -195,    0,  -14, -195,    0,
 -195,  481,    0, -195, 1784,  408, 1382,    0,  470,   44,
  473,  492,  483,  157,    0,  279,  504,    0, 1508,  506,
    0,  422,  423,    0,   39,    0,    0,  951,    0,    0,
    0, 1700, 1114,  490,    0,    0,  497,  288,  502,  -45,
 1114,  503,  505,    0, -195,    0,    0,    0, -195,    0,
 1784,  438, 1784,    0,  440,    0,    0,  507,    0,  318,
    0,  508,  446,  -87,    0,  467,  468, 1032,    0,    0,
  555,  324,    0,  334,    0,    0,  540,    0, 1114,  542,
  340,    0,    0,    0,  558,    0,    0,  545,  480,  550,
    0,  968,    0, 1794,  488, 1794,    0,    0,    0,  574,
  361,  584,  568,    0,  365,    0,  570, -195,    0,  571,
    0,  949, -149,  369,  123,  396,  372, -116, 1407,  -82,
  588, 1070, 1042,    0,  605,    0,    0,    0,    0,    0,
 1611,  611,  552,  614,  615,  181,  638,  625,  585,  587,
  634,  -79,  654,  589,  596,    0, -149,  369,  396,    0,
  681,    0,  463,  601,    0,  602,    0, -149,    0,    0,
  471, -149,    0,    0,  465,   39,    0,  671,  674,    0,
  697,  632,  641,    0,  720,  730, 1611,  731,  668,  154,
  156,  451,  451,  733,  761,    0,    0,    0,  753,  756,
    0,    0,  701,  702,    0, -149, 1087,  769, 1097,  773,
  708,  709,  710,  711,    0,  576,    0,    0,  158,  164,
 1628, -149,  575,  577,    0, -149,  580,  581,    0,  582,
  583,  586,  608,  196, 1124, 1134,  609,  725,  727, 1645,
  814,  815, 1662,  817,  818,  825,  828,  829,  830, -149,
 -149, -149,  839,  623,  636,  640,  776,    0,    0,  643,
  779,    0,    0,    0,    0,    0,    0,  451, 1719, 1741,
    0,  848,  849,  850,  647,  852,  649,  788,  790,    0,
    0,    0,  859,    0,  864,  664,  665,    0,    0,  222,
  239, -149, -149, 1834, 1834,
};
final static short yyrindex[] = {                       939,
    0,    0,    0,    0,  371,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,  425,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
  311,    0,    0,    0,    0,    0,    0,  684,  684,    0,
  888, 1430, 1449,    0,    0,    0,    0, 1525,    0,    0,
    0,    0,    0,    0,    0,  780,    0,  902,  841,    0,
    0,  879,    0,  925,    0,    0,    0,    0,  948,    0,
    0,  376,    0,  521,    0,    0,    0,    0,    0,    0,
    0,  -30,  -27,    0,    0,    0,    0,    0,    0,    0,
  684,    0,   63,    0,   77,    0,    0,    0,    0,    0,
    0,    0,    0,    0,  675,    0,    0,    0,    0,  803,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,  475,  498,  -17,    0,    0,
    0,    0,    0,  544,    0,  591,    0,    0,    0,    0,
    0,    0,    0,  684,    0,    0,    0,    0,    0,    0,
    0, 1468,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,  676,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0, 1601,    0,    0,    0,
    0,    0,    0,    0,    0,  837,    0,    0,    0,    0,
    0,   87,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,  -95,    0,    0,    0,    0,  677,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,  189,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,  838,    0,    0,    0,  684,    0,
  846,    0,    0,    0,    0,    0,    0,  618,    0,    0,
    0,  187,    0,    0,    0,  689,  690,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,  657,
    0,    0,    0,    0,   95,    0,    0,    0,    0,  680,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,  684,    0,  705,
    0,    0,    0,  713,    0,  714,    0,    0,    0,    0,
 1153,    0,    0,    0,  734,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
 1179,    0,    0,    0,    0,    0,    0, 1203,    0,    0,
    0,    0,    0,  234,    0,    0,    0,    0, 1227, 1251,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,  264,    0,    0,  382,    0,    0,  398,  403,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,  405,    0,  551,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,
};
final static short yygindex[] = {                         0,
    0,   33,  827,  -70,  129,    0,    0,    0,    0,  -32,
   83,    0,  -76,    0,   47,  -86,   76,  162, -131,  -85,
  -74, 1506,  -83,  -43, 1511,  717,  390,  770, -167,   78,
  394,  -21,   24, -162,  639,    0,  853,    0,  975,  976,
  977,    8,  905,    0,  929, -197,  339,  774,  946,  377,
  386,  -61,    0,    0,  778,
};
final static int YYTABLESIZE=2112;
static short yytable[];
static { yytable();}
static void yytable(){
yytable = new short[]{                        145,
   98,  100,  151,  101,  164,  111,  112,  215,  378,  142,
  213,   37,   77,  214,   83,  141,  120,   68,   47,   45,
   46,  242,  178,  212,  117,  113,  113,   57,  213,  125,
   36,  214,  247,  159,   59,  336,   34,  118,   60,  179,
  264,  212,  383,  285,  255,  411,  100,   37,  101,  295,
  174,  205,  200,  216,  206,  110,  145,   43,   92,  221,
   94,  204,    2,  158,  217,   89,  219,   43,  173,  191,
  104,  124,  141,  103,   85,  105,  176,   26,  113,   26,
   11,   12,  195,   43,  298,   26,   82,   66,   71,  180,
   26,  264,  131,  327,  175,  329,  238,  253,   47,   45,
   46,   43,  297,  133,   95,   84,  133,   61,   26,   26,
  212,  122,  121,  239,    7,   43,  205,  127,   93,   43,
  133,  205,  137,  138,  263,  168,  325,  128,  139,   91,
   43,  262,   96,  225,  127,  130,  224,   87,   65,   26,
  100,   66,  101,  377,  128,   26,  237,   66,  240,  136,
  250,  113,  130,  243,   99,  252,  155,   86,  257,  201,
  273,  274,  159,   27,   26,   27,  125,  125,  281,  282,
  246,   27,  205,  335,   72,  307,   27,  377,  125,  106,
  377,  205,  306,  136,  206,  325,  136,  107,  100,  220,
  101,  204,   65,  123,   27,   27,    1,  302,   65,  100,
   26,  101,   66,  284,  156,  286,  287,  100,  288,  101,
   76,  290,   82,  132,  213,   97,  319,  320,   35,   43,
  215,  311,  126,  254,  163,   27,  133,   40,   41,   42,
  213,   27,  134,  214,   47,   45,   46,   26,   26,   26,
   26,   11,   12,  212,   55,  355,   56,  145,  356,  145,
   27,   58,  324,   65,   35,  354,  113,   11,   12,   11,
   12,   11,   12,  141,  340,  141,  216,  190,  369,   38,
   39,  108,  145,  109,  380,  355,  385,  217,  389,  157,
   39,  379,  162,  384,  395,  388,   27,  396,  141,  129,
  227,  227,  227,  227,  394,   38,   39,   36,  413,  130,
  214,   26,   10,  402,   26,  412,   26,   40,   41,   42,
  223,  123,  165,   38,   39,  113,  171,  369,  480,  391,
   26,  172,   26,   27,   27,   27,   27,   38,   39,  177,
  395,   38,   39,  434,  181,  395,  395,  182,  442,  444,
  433,  183,  157,   39,  522,  441,  443,   26,   26,  184,
  453,  223,  457,  223,  271,  223,   26,  276,   50,  227,
  185,  523,  425,  187,  395,  186,   26,  469,   26,  223,
  223,  223,  223,  188,  468,  182,   44,  196,  453,  457,
  358,   43,  360,  395,  373,  374,  395,   27,   51,  189,
   27,   28,   27,   28,   26,  197,   47,   45,   46,   28,
  276,  227,   28,   67,   28,  382,   27,   76,   27,  227,
  218,  395,  395,  395,  509,  437,  438,  439,  440,  465,
  438,  508,   28,   28,  227,  466,  440,  213,  173,   21,
  199,   38,   39,   27,   27,  223,  202,  395,  395,  222,
  377,  223,   27,   40,   41,   42,  136,  227,  123,  123,
  208,  208,   27,   28,   27,  377,  236,   67,  401,   28,
  123,  136,  234,   67,  235,  227,  227,  227,  241,  227,
  244,  227,  245,  401,  221,  226,  166,  167,   28,  248,
   27,  377,  251,  227,  227,  227,  227,  136,  194,  169,
  170,  260,  265,   43,  266,   50,   50,  222,  377,  401,
  182,  230,  232,  233,  136,  267,   52,   50,   47,   45,
   46,  192,  268,  214,   28,  221,  401,  221,   67,  221,
  184,  277,   53,  283,  289,   51,   51,   54,  296,   55,
  293,  299,  300,  221,  221,  221,  221,   51,  222,  303,
  222,  301,  222,  244,  304,  308,  309,  310,  315,  227,
  317,   28,   28,   28,   28,  316,  222,  222,  222,  222,
  318,  322,  328,  323,  330,  331,  333,  223,  334,  280,
  223,  223,  223,  223,  223,  223,  223,  223,  332,  223,
  223,  223,  223,  223,  223,  223,  223,  223,  223,  223,
  243,  337,  338,   38,   39,  341,  343,  342,  344,  221,
  346,  348,  347,  349,  350,   40,   41,   42,  351,   61,
  359,  314,    6,  231,  361,   28,    7,  169,   28,  321,
   28,  362,  222,  363,    9,   10,  364,  365,  366,  368,
   13,  372,  182,  376,   28,  182,   28,  182,  182,  182,
  182,  182,  182,   52,   52,  184,  386,  182,  182,  182,
  182,  182,  182,  182,  182,   52,  195,  345,  375,   53,
   53,   28,   28,  392,   54,   54,   55,   55,  244,  397,
   28,   53,  399,  400,  398,   56,   54,  406,   55,  189,
   28,  227,   28,  407,  227,  227,  227,  227,  227,  227,
  227,  227,  410,  227,  227,  227,  227,  227,  227,  227,
  227,  227,  227,  227,  188,   38,   39,   61,   28,  408,
  135,  409,  414,  415,    7,  243,  136,   40,   41,   42,
  416,  418,  137,  138,  419,  420,  421,  424,  139,  426,
  377,  221,  427,  196,  221,  221,  221,  221,  221,  221,
  221,  221,  169,  221,  221,  221,  221,  221,  221,  221,
  221,  221,  221,  221,  222,  428,  429,  222,  222,  222,
  222,  222,  222,  222,  222,  430,  222,  222,  222,  222,
  222,  222,  222,  222,  222,  222,  222,  184,  431,  144,
  184,  195,  184,  184,  184,  184,  184,  184,  432,  435,
  436,  445,  184,  184,  184,  184,  184,  184,  184,  184,
  244,  446,  142,  244,  189,  244,  244,  244,  244,  244,
  244,  447,   56,   56,  448,  244,  244,  244,  244,  244,
  244,  244,  244,  144,   56,  449,  450,  455,   16,  188,
   16,  459,  460,  461,  462,  463,  464,  471,  144,  472,
  139,   81,  474,  475,  476,  477,  142,  243,  478,  484,
  243,  485,  243,  243,  243,  243,  243,  243,  196,   16,
   81,  142,  243,  243,  243,  243,  243,  243,  243,  243,
  479,  483,  488,  489,  169,  492,  493,  169,   21,  169,
  169,  169,  169,  494,  169,  502,  495,  496,  497,  169,
  169,  169,  169,  169,  169,  169,  169,  501,  503,  139,
  505,  137,  504,  507,  144,  506,  510,  511,  512,  513,
  514,  515,  516,  195,  517,   81,  195,  518,  195,  195,
  195,  195,  519,  195,   17,  520,  521,  142,  195,  195,
  195,  195,  195,  195,  195,  195,  189,   21,    6,  189,
  134,  189,  189,  189,  189,  173,  189,    4,  176,   95,
  104,  189,  189,  189,  189,  189,  189,  189,  189,  114,
  118,  188,  100,  102,  188,  139,  188,  188,  188,  188,
  191,  188,  259,   33,   57,   58,  188,  188,  188,  188,
  188,  188,  188,  188,  312,  198,  367,   73,   74,   75,
  196,  153,  125,  196,  102,  196,  196,  196,  196,  272,
  196,  269,    0,   21,    0,  196,  196,  196,  196,  196,
  196,  196,  196,  119,    0,   61,    0,   43,    6,    0,
    0,  249,    7,    0,    0,   43,  137,    0,    0,    0,
    9,   10,   47,   45,   46,    0,  144,    0,    0,  144,
   47,   45,   46,  144,  144,  144,    0,    0,    0,   17,
  256,  144,  144,    0,   43,  144,  144,  144,  144,  142,
    0,    0,  142,    0,    0,    0,  142,  142,  142,   47,
   45,   46,  339,  203,  142,  142,   43,    0,  142,  142,
  142,  142,  390,    0,    0,    0,   43,    0,    0,    0,
  353,   47,   45,   46,    0,    0,    0,  139,    0,    0,
  139,   47,   45,   46,  139,  139,  139,    5,    0,    0,
    6,    0,  139,  139,    7,    8,  139,  139,  139,  139,
   64,    0,    9,   10,    0,    0,   11,   12,   13,   14,
   61,    0,    0,  212,    0,   21,    0,    7,   21,    0,
    0,    0,   21,   21,   21,  137,  138,    0,    0,    0,
   21,   21,    0,    0,   21,   21,   21,   21,  137,    0,
    0,  137,    0,    0,    0,  137,  137,  137,    0,    0,
    0,    0,    0,  137,  137,    0,    0,  137,  137,  137,
  137,   17,  226,    0,   17,    0,    0,    0,   17,   17,
   17,    0,  387,    0,    0,    0,   17,   17,    0,    0,
   17,   17,   17,   17,    0,   61,    0,   61,  135,  452,
  135,    0,    7,    0,    7,    0,  136,   62,    0,  456,
  137,  138,  137,  138,   61,   63,    0,  135,  139,   38,
   39,    7,    0,  136,    0,    0,  226,   38,   39,  137,
  138,   40,   41,   42,    0,  352,  481,    0,    0,   40,
   41,   42,    0,    0,   61,    0,  482,    6,    0,    0,
    0,    7,    0,    0,   62,    0,   38,   39,    0,    9,
   10,    0,   63,    0,    0,   13,    0,   89,   40,   41,
   42,    0,    0,    0,    0,    0,    0,    0,   38,   39,
    0,    0,    0,    0,    0,    0,    0,    0,   38,   39,
   40,   41,   42,   77,    0,    0,    0,    0,    0,    0,
   40,   41,   42,    0,    0,    0,   61,    0,    0,    6,
    0,  278,  279,    7,    0,    0,   61,   90,    0,  135,
    0,    9,   10,    7,    0,  136,    0,   13,    0,    0,
    0,  137,  138,   61,    0,    0,  135,  139,    0,    0,
    7,   78,  136,   61,    0,    0,  135,    0,  137,  138,
    7,    0,  136,    0,  352,    0,    0,    0,  137,  138,
   61,    0,    0,    6,  352,   79,    0,    7,    0,    0,
   61,    0,    0,  212,    0,    9,   10,    7,    0,    0,
   61,   13,    0,  212,    0,  137,  138,    7,  140,    0,
    0,  139,    0,    0,    0,  137,  138,    0,   80,   89,
    0,  139,   89,    0,   89,   89,   89,   89,   89,   89,
    0,    0,    0,    0,   89,   89,   89,   89,   89,   89,
   89,   89,   88,    0,    0,   77,    0,    0,   77,    0,
   77,   77,   77,   77,   77,   77,    0,    0,    0,    0,
   77,   77,   77,   77,   77,   77,   77,   77,   90,   90,
    0,    0,   90,    0,   90,   90,   90,   90,   90,   90,
    0,    0,    0,    0,   90,   90,   90,   90,   90,   90,
   90,   90,  154,   78,    0,    0,   78,    0,   78,   78,
   78,   78,   78,   78,    0,    0,    0,    0,   78,   78,
   78,   78,   78,   78,   78,   78,  294,   79,  270,    0,
   79,    0,   79,   79,   79,   79,   79,   79,    0,    0,
    0,    0,   79,   79,   79,   79,   79,   79,   79,   79,
    5,  381,    0,  135,    0,    0,    0,    7,    8,  136,
    5,    0,    0,    6,    0,  137,  138,    7,    8,   11,
   12,  139,   14,    0,  161,    9,   10,    0,    0,   11,
   12,   13,   14,    0,    5,    0,    0,    6,    0,    0,
    0,    7,    8,  165,    0,    0,    0,    0,    0,    9,
   10,    0,    0,   11,   12,   13,   14,    0,    0,    0,
    5,    0,  162,    6,    0,    0,    0,    7,    8,    0,
    0,    0,    0,    0,    0,    9,   10,    0,    0,   11,
   12,   13,   14,    0,    5,  261,    0,    6,    0,    0,
    0,    7,    8,    0,    0,    0,    0,    0,    0,    9,
   10,    0,  305,   11,   12,   13,   14,    0,    5,    0,
   61,    6,    0,    6,    0,    7,    8,    7,    0,  178,
    0,    0,    0,    9,   10,    9,   10,   11,   12,   13,
   14,   13,    0,    5,    0,    0,  212,    0,  127,    0,
    7,    8,    0,    0,    0,    0,    0,    0,  137,  138,
    0,    0,   11,   12,  139,   14,  161,  193,    0,  161,
    0,    0,    0,  161,    0,  161,  161,    0,    0,    0,
    0,  161,  161,  161,  161,  165,  258,  161,  165,    0,
    0,    0,  165,    0,  165,  165,    0,    0,    0,    0,
  165,  165,  165,  165,  162,  210,  165,  162,    0,    0,
    0,  162,    0,  162,  162,  393,    0,    0,    0,  162,
  162,  162,  162,    0,    0,  162,    0,   61,    0,    0,
  135,    0,  467,    0,    7,    0,  136,   62,    0,    0,
    0,    0,  137,  138,   61,   63,    0,  135,  139,  486,
    0,    7,    0,  136,   62,    0,    0,    0,    0,  137,
  138,  178,   63,    0,  178,  139,  490,    0,  178,    0,
    0,  178,    0,    0,    0,    0,  178,  178,  174,  178,
   61,    0,  178,    6,    0,  275,    0,    7,    0,    0,
   62,    0,    0,    0,    0,    9,   10,    0,   63,   61,
    0,   13,    6,    0,  313,    0,    7,    0,    0,   62,
    0,    0,    0,    0,    9,   10,    0,   63,   61,    0,
   13,  212,    0,  486,    0,    7,    0,    0,   62,    0,
    0,    0,    0,  137,  138,    0,   63,  210,    0,  139,
  210,    0,  205,  205,  210,  490,    0,   61,    0,    0,
  135,    0,  210,  210,    7,    0,  136,    0,  210,    0,
    0,    0,  137,  138,   61,    0,  405,  135,  139,    0,
    0,    7,  417,  136,    0,    0,    0,    0,    0,  137,
  138,   61,    0,  422,  135,  139,    0,  423,    7,    0,
  136,    0,    0,    0,    0,    0,  137,  138,   61,    0,
    0,  135,  352,    0,    0,    7,    0,  136,    0,    0,
    0,    0,    0,  137,  138,    0,    0,   61,    0,  352,
    6,  451,    0,    0,    7,    0,    0,  454,    0,  458,
    0,    0,    9,   10,    0,    0,   61,  470,   13,    6,
    0,  473,    0,    7,    0,    0,    0,    0,    0,    0,
    0,    9,   10,    0,    0,   61,    0,   13,  212,    0,
  487,    0,    7,  491,    0,  498,  499,  500,    0,    0,
  137,  138,    0,    0,    0,    0,  139,   61,    0,    0,
  212,    0,    0,    0,    7,    0,    0,    0,    0,    0,
    0,    0,  137,  138,    0,    0,    0,    5,  139,    0,
  135,    0,    0,    0,    7,    8,  136,  524,  525,    0,
  454,  458,  137,  138,  487,  491,   11,   12,  139,   14,
    5,    0,    0,    6,    0,    0,    0,    7,    8,    0,
    5,    0,    0,  212,    0,    9,   10,    7,    8,   11,
   12,   13,   14,    0,    0,  137,  138,    0,    0,   11,
   12,  139,   14,   61,    0,    0,    6,    0,    0,    0,
    7,    0,    0,   62,    0,    0,    0,    0,    9,   10,
   61,   63,    0,  135,   13,    0,    0,    7,    0,  136,
    0,    0,    0,    0,    0,  137,  138,    0,    0,    0,
    0,  352,
};
}
static short yycheck[];
static { yycheck(); }
static void yycheck() {
yycheck = new short[] {                         86,
   44,   43,   86,   45,   41,   40,   41,  139,  125,   86,
   41,   61,   59,   41,   59,   86,   60,   10,   60,   61,
   62,  184,   41,   41,   41,   58,   59,   40,   59,  125,
   44,   59,  123,   95,   40,  123,    4,   59,   40,   58,
  208,   59,  125,   58,   41,  125,   43,   61,   45,  247,
   41,  138,   40,  139,  138,   41,  143,   45,   35,  143,
   37,  138,  123,   41,  139,   33,  143,   45,   59,   59,
   42,   64,  143,   50,   59,   47,   41,    2,  111,    4,
  276,  277,  126,   45,   41,   10,  257,   10,   13,  111,
   15,  259,   61,  291,   59,  293,   41,   41,   60,   61,
   62,   45,   59,   41,   40,   23,   44,  257,   33,   34,
  260,   58,   59,   58,  264,   45,  203,   41,   36,   45,
   58,  208,  272,  273,  208,  102,  289,   41,  278,   59,
   45,  208,  258,   41,   58,   41,   44,   58,   10,   64,
   43,   64,   45,  260,   58,   70,  179,   70,  181,  266,
  194,  184,   58,  186,   41,  199,   59,  123,  202,  136,
  262,  263,  224,    2,   89,    4,  262,  263,  262,  263,
  261,   10,  259,  261,   13,  259,   15,  260,  274,   41,
  260,  268,  259,  266,  268,  348,  266,   41,   43,  143,
   45,  268,   64,   59,   33,   34,  257,   41,   70,   43,
  125,   45,  125,  236,   59,  238,  239,   43,  241,   45,
  257,  244,  257,   59,  139,   41,  262,  263,  268,   45,
  352,  265,  274,  200,  261,   64,   44,  269,  270,  271,
  261,   70,   59,  261,   60,   61,   62,  162,  163,  164,
  165,  276,  277,  261,  257,  332,  259,  334,  332,  336,
   89,  257,  285,  125,  268,  332,  289,  276,  277,  276,
  277,  276,  277,  334,  308,  336,  352,  257,  352,  257,
  258,  257,  359,  259,  358,  362,  360,  352,  362,  257,
  258,  358,  261,  360,  371,  362,  125,  371,  359,  258,
  162,  163,  164,  165,  371,  257,  258,   44,  382,  268,
  139,  226,  273,  123,  229,  382,  231,  269,  270,  271,
    0,  125,  261,  257,  258,  348,   59,  401,  123,  363,
  245,   59,  247,  162,  163,  164,  165,  257,  258,   59,
  417,  257,  258,  417,   58,  422,  423,  257,  422,  423,
  417,   41,  257,  258,  123,  422,  423,  272,  273,   44,
  437,   41,  439,   43,  226,   45,  281,  229,  125,  231,
  257,  123,  406,   41,  451,   58,  291,  451,  293,   59,
   60,   61,   62,  261,  451,    0,   40,  258,  465,  466,
  334,   45,  336,  470,  262,  263,  473,  226,  125,   41,
  229,    2,  231,    4,  319,  258,   60,   61,   62,   10,
  272,  273,   13,   10,   15,  359,  245,  257,  247,  281,
  125,  498,  499,  500,  498,  262,  263,  262,  263,  262,
  263,  498,   33,   34,    0,  262,  263,  352,   58,   59,
   40,  257,  258,  272,  273,  125,   40,  524,  525,  125,
  260,   58,  281,  269,  270,  271,  266,  319,  262,  263,
  262,  263,  291,   64,  293,  260,   58,   64,  278,   70,
  274,  266,   59,   70,   59,   41,   42,   43,   58,   45,
   58,   47,  123,  278,    0,  123,  100,  101,   89,   59,
  319,  260,   41,   59,   60,   61,   62,  266,   40,  104,
  105,  274,   40,   45,  125,  262,  263,    0,  260,  278,
  125,  163,  164,  165,  266,  125,  125,  274,   60,   61,
   62,  122,  273,  352,  125,   41,  278,   43,  125,   45,
    0,  263,  125,  263,   44,  262,  263,  125,   59,  125,
  123,   59,   41,   59,   60,   61,   62,  274,   41,  261,
   43,   59,   45,    0,   41,   40,  125,  125,   59,  125,
  263,  162,  163,  164,  165,   59,   59,   60,   61,   62,
   59,   59,  125,   59,  125,   59,   59,  257,  123,  231,
  260,  261,  262,  263,  264,  265,  266,  267,  261,  269,
  270,  271,  272,  273,  274,  275,  276,  277,  278,  279,
    0,  125,  125,  257,  258,   41,  263,  274,   59,  125,
   59,   44,  263,   59,  125,  269,  270,  271,   59,  257,
  123,  273,  260,  261,   41,  226,  264,    0,  229,  281,
  231,  261,  125,   40,  272,  273,   59,  263,   59,   59,
  278,  263,  257,  262,  245,  260,  247,  262,  263,  264,
  265,  266,  267,  262,  263,  125,   59,  272,  273,  274,
  275,  276,  277,  278,  279,  274,    0,  319,  263,  262,
  263,  272,  273,   59,  262,  263,  262,  263,  125,   59,
  281,  274,   59,   59,  123,  125,  274,   40,  274,    0,
  291,  257,  293,   59,  260,  261,  262,  263,  264,  265,
  266,  267,   59,  269,  270,  271,  272,  273,  274,  275,
  276,  277,  278,  279,    0,  257,  258,  257,  319,  125,
  260,  125,   59,  125,  264,  125,  266,  269,  270,  271,
  125,   41,  272,  273,  262,  125,  125,  263,  278,   59,
  260,  257,   59,    0,  260,  261,  262,  263,  264,  265,
  266,  267,  125,  269,  270,  271,  272,  273,  274,  275,
  276,  277,  278,  279,  257,   59,  125,  260,  261,  262,
  263,  264,  265,  266,  267,  125,  269,  270,  271,  272,
  273,  274,  275,  276,  277,  278,  279,  257,   59,    0,
  260,  125,  262,  263,  264,  265,  266,  267,   59,   59,
  123,   59,  272,  273,  274,  275,  276,  277,  278,  279,
  257,   41,    0,  260,  125,  262,  263,  264,  265,  266,
  267,   59,  262,  263,   59,  272,  273,  274,  275,  276,
  277,  278,  279,   44,  274,  125,  125,   59,    2,  125,
    4,   59,  125,  125,  125,  125,  261,  263,   59,  263,
    0,   15,  263,  263,  263,  263,   44,  257,  263,  125,
  260,  125,  262,  263,  264,  265,  266,  267,  125,   33,
   34,   59,  272,  273,  274,  275,  276,  277,  278,  279,
  263,  263,   59,   59,  257,   59,   59,  260,    0,  262,
  263,  264,  265,   59,  267,  263,   59,   59,   59,  272,
  273,  274,  275,  276,  277,  278,  279,   59,  263,   59,
  125,    0,  263,  125,  125,  263,   59,   59,   59,  263,
   59,  263,  125,  257,  125,   89,  260,   59,  262,  263,
  264,  265,   59,  267,    0,  262,  262,  125,  272,  273,
  274,  275,  276,  277,  278,  279,  257,   59,    0,  260,
  257,  262,  263,  264,  265,   58,  267,    0,  274,  274,
  274,  272,  273,  274,  275,  276,  277,  278,  279,  123,
  123,  257,  274,  274,  260,  125,  262,  263,  264,  265,
  125,  267,  203,  123,  262,  262,  272,  273,  274,  275,
  276,  277,  278,  279,  268,  133,  348,   13,   13,   13,
  257,   87,   64,  260,   49,  262,  263,  264,  265,  226,
  267,  224,   -1,  125,   -1,  272,  273,  274,  275,  276,
  277,  278,  279,   41,   -1,  257,   -1,   45,  260,   -1,
   -1,   41,  264,   -1,   -1,   45,  125,   -1,   -1,   -1,
  272,  273,   60,   61,   62,   -1,  257,   -1,   -1,  260,
   60,   61,   62,  264,  265,  266,   -1,   -1,   -1,  125,
   41,  272,  273,   -1,   45,  276,  277,  278,  279,  257,
   -1,   -1,  260,   -1,   -1,   -1,  264,  265,  266,   60,
   61,   62,   41,  123,  272,  273,   45,   -1,  276,  277,
  278,  279,   41,   -1,   -1,   -1,   45,   -1,   -1,   -1,
  123,   60,   61,   62,   -1,   -1,   -1,  257,   -1,   -1,
  260,   60,   61,   62,  264,  265,  266,  257,   -1,   -1,
  260,   -1,  272,  273,  264,  265,  276,  277,  278,  279,
  123,   -1,  272,  273,   -1,   -1,  276,  277,  278,  279,
  257,   -1,   -1,  260,   -1,  257,   -1,  264,  260,   -1,
   -1,   -1,  264,  265,  266,  272,  273,   -1,   -1,   -1,
  272,  273,   -1,   -1,  276,  277,  278,  279,  257,   -1,
   -1,  260,   -1,   -1,   -1,  264,  265,  266,   -1,   -1,
   -1,   -1,   -1,  272,  273,   -1,   -1,  276,  277,  278,
  279,  257,  123,   -1,  260,   -1,   -1,   -1,  264,  265,
  266,   -1,  123,   -1,   -1,   -1,  272,  273,   -1,   -1,
  276,  277,  278,  279,   -1,  257,   -1,  257,  260,  123,
  260,   -1,  264,   -1,  264,   -1,  266,  267,   -1,  123,
  272,  273,  272,  273,  257,  275,   -1,  260,  278,  257,
  258,  264,   -1,  266,   -1,   -1,  123,  257,  258,  272,
  273,  269,  270,  271,   -1,  278,  123,   -1,   -1,  269,
  270,  271,   -1,   -1,  257,   -1,  123,  260,   -1,   -1,
   -1,  264,   -1,   -1,  267,   -1,  257,  258,   -1,  272,
  273,   -1,  275,   -1,   -1,  278,   -1,  125,  269,  270,
  271,   -1,   -1,   -1,   -1,   -1,   -1,   -1,  257,  258,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,  257,  258,
  269,  270,  271,  125,   -1,   -1,   -1,   -1,   -1,   -1,
  269,  270,  271,   -1,   -1,   -1,  257,   -1,   -1,  260,
   -1,  262,  263,  264,   -1,   -1,  257,  125,   -1,  260,
   -1,  272,  273,  264,   -1,  266,   -1,  278,   -1,   -1,
   -1,  272,  273,  257,   -1,   -1,  260,  278,   -1,   -1,
  264,  125,  266,  257,   -1,   -1,  260,   -1,  272,  273,
  264,   -1,  266,   -1,  278,   -1,   -1,   -1,  272,  273,
  257,   -1,   -1,  260,  278,  125,   -1,  264,   -1,   -1,
  257,   -1,   -1,  260,   -1,  272,  273,  264,   -1,   -1,
  257,  278,   -1,  260,   -1,  272,  273,  264,  125,   -1,
   -1,  278,   -1,   -1,   -1,  272,  273,   -1,  125,  257,
   -1,  278,  260,   -1,  262,  263,  264,  265,  266,  267,
   -1,   -1,   -1,   -1,  272,  273,  274,  275,  276,  277,
  278,  279,  125,   -1,   -1,  257,   -1,   -1,  260,   -1,
  262,  263,  264,  265,  266,  267,   -1,   -1,   -1,   -1,
  272,  273,  274,  275,  276,  277,  278,  279,  125,  257,
   -1,   -1,  260,   -1,  262,  263,  264,  265,  266,  267,
   -1,   -1,   -1,   -1,  272,  273,  274,  275,  276,  277,
  278,  279,  125,  257,   -1,   -1,  260,   -1,  262,  263,
  264,  265,  266,  267,   -1,   -1,   -1,   -1,  272,  273,
  274,  275,  276,  277,  278,  279,  125,  257,  125,   -1,
  260,   -1,  262,  263,  264,  265,  266,  267,   -1,   -1,
   -1,   -1,  272,  273,  274,  275,  276,  277,  278,  279,
  257,  125,   -1,  260,   -1,   -1,   -1,  264,  265,  266,
  257,   -1,   -1,  260,   -1,  272,  273,  264,  265,  276,
  277,  278,  279,   -1,  125,  272,  273,   -1,   -1,  276,
  277,  278,  279,   -1,  257,   -1,   -1,  260,   -1,   -1,
   -1,  264,  265,  125,   -1,   -1,   -1,   -1,   -1,  272,
  273,   -1,   -1,  276,  277,  278,  279,   -1,   -1,   -1,
  257,   -1,  125,  260,   -1,   -1,   -1,  264,  265,   -1,
   -1,   -1,   -1,   -1,   -1,  272,  273,   -1,   -1,  276,
  277,  278,  279,   -1,  257,  125,   -1,  260,   -1,   -1,
   -1,  264,  265,   -1,   -1,   -1,   -1,   -1,   -1,  272,
  273,   -1,  125,  276,  277,  278,  279,   -1,  257,   -1,
  257,  260,   -1,  260,   -1,  264,  265,  264,   -1,  125,
   -1,   -1,   -1,  272,  273,  272,  273,  276,  277,  278,
  279,  278,   -1,  257,   -1,   -1,  260,   -1,  125,   -1,
  264,  265,   -1,   -1,   -1,   -1,   -1,   -1,  272,  273,
   -1,   -1,  276,  277,  278,  279,  257,  125,   -1,  260,
   -1,   -1,   -1,  264,   -1,  266,  267,   -1,   -1,   -1,
   -1,  272,  273,  274,  275,  257,  125,  278,  260,   -1,
   -1,   -1,  264,   -1,  266,  267,   -1,   -1,   -1,   -1,
  272,  273,  274,  275,  257,  125,  278,  260,   -1,   -1,
   -1,  264,   -1,  266,  267,  125,   -1,   -1,   -1,  272,
  273,  274,  275,   -1,   -1,  278,   -1,  257,   -1,   -1,
  260,   -1,  125,   -1,  264,   -1,  266,  267,   -1,   -1,
   -1,   -1,  272,  273,  257,  275,   -1,  260,  278,  125,
   -1,  264,   -1,  266,  267,   -1,   -1,   -1,   -1,  272,
  273,  257,  275,   -1,  260,  278,  125,   -1,  264,   -1,
   -1,  267,   -1,   -1,   -1,   -1,  272,  273,  274,  275,
  257,   -1,  278,  260,   -1,  125,   -1,  264,   -1,   -1,
  267,   -1,   -1,   -1,   -1,  272,  273,   -1,  275,  257,
   -1,  278,  260,   -1,  125,   -1,  264,   -1,   -1,  267,
   -1,   -1,   -1,   -1,  272,  273,   -1,  275,  257,   -1,
  278,  260,   -1,  125,   -1,  264,   -1,   -1,  267,   -1,
   -1,   -1,   -1,  272,  273,   -1,  275,  257,   -1,  278,
  260,   -1,  262,  263,  264,  125,   -1,  257,   -1,   -1,
  260,   -1,  272,  273,  264,   -1,  266,   -1,  278,   -1,
   -1,   -1,  272,  273,  257,   -1,  376,  260,  278,   -1,
   -1,  264,  387,  266,   -1,   -1,   -1,   -1,   -1,  272,
  273,  257,   -1,  398,  260,  278,   -1,  402,  264,   -1,
  266,   -1,   -1,   -1,   -1,   -1,  272,  273,  257,   -1,
   -1,  260,  278,   -1,   -1,  264,   -1,  266,   -1,   -1,
   -1,   -1,   -1,  272,  273,   -1,   -1,  257,   -1,  278,
  260,  436,   -1,   -1,  264,   -1,   -1,  437,   -1,  439,
   -1,   -1,  272,  273,   -1,   -1,  257,  452,  278,  260,
   -1,  456,   -1,  264,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,  272,  273,   -1,   -1,  257,   -1,  278,  260,   -1,
  470,   -1,  264,  473,   -1,  480,  481,  482,   -1,   -1,
  272,  273,   -1,   -1,   -1,   -1,  278,  257,   -1,   -1,
  260,   -1,   -1,   -1,  264,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,  272,  273,   -1,   -1,   -1,  257,  278,   -1,
  260,   -1,   -1,   -1,  264,  265,  266,  522,  523,   -1,
  520,  521,  272,  273,  524,  525,  276,  277,  278,  279,
  257,   -1,   -1,  260,   -1,   -1,   -1,  264,  265,   -1,
  257,   -1,   -1,  260,   -1,  272,  273,  264,  265,  276,
  277,  278,  279,   -1,   -1,  272,  273,   -1,   -1,  276,
  277,  278,  279,  257,   -1,   -1,  260,   -1,   -1,   -1,
  264,   -1,   -1,  267,   -1,   -1,   -1,   -1,  272,  273,
  257,  275,   -1,  260,  278,   -1,   -1,  264,   -1,  266,
   -1,   -1,   -1,   -1,   -1,  272,  273,   -1,   -1,   -1,
   -1,  278,
};
}
final static short YYFINAL=3;
final static short YYMAXTOKEN=279;
final static String yyname[] = {
"end-of-file",null,null,null,null,null,null,null,null,null,null,null,null,null,
null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,
null,null,null,null,null,null,null,null,null,null,"'('","')'","'*'","'+'","','",
"'-'",null,"'/'",null,null,null,null,null,null,null,null,null,null,"':'","';'",
"'<'","'='","'>'",null,null,null,null,null,null,null,null,null,null,null,null,
null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,
null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,
null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,
"'{'",null,"'}'",null,null,null,null,null,null,null,null,null,null,null,null,
null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,
null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,
null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,
null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,
null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,
null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,
null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,
null,null,null,null,null,null,null,"ID","CTE","CADENA","IF","THEN","ELSE",
"ENDIF","OUT","FUN","RETURN","BREAK","ASIGNACION","COMP_MAYOR_IGUAL",
"COMP_MENOR_IGUAL","COMP_DISTINTO","WHEN","DO","UNTIL","CONTINUE","DOUBLE64",
"UINT16","DEFER","CONST",
};
final static String yyrule[] = {
"$accept : programa",
"programa : nombre_programa '{' sentencias '}'",
"programa : '{' sentencias '}'",
"programa : nombre_programa sentencias '}'",
"programa : nombre_programa '{' sentencias",
"programa : nombre_programa '{' '}'",
"programa :",
"nombre_programa : ID",
"sentencias : sentencia",
"sentencias : sentencias sentencia",
"sentencia : sentencia_declarativa",
"sentencia : sentencia_ejecutable",
"sentencia_declarativa : sentencia_declarativa_variables",
"sentencia_declarativa : funcion_con_return",
"sentencia_declarativa : funcion_sin_return",
"sentencia_declarativa : declaracion_constantes",
"sentencia_declarativa_variables : tipo lista_de_variables ';'",
"sentencia_declarativa_variables : tipo lista_de_variables",
"sentencia_declarativa_variables : lista_de_variables ';'",
"sentencia_declarativa_variables : tipo ';'",
"lista_de_variables : ID ',' lista_de_variables",
"lista_de_variables : ID",
"funcion_con_return : encabezado_funcion '{' sentencia_return '}'",
"funcion_con_return : encabezado_funcion '{' sentencias_funcion sentencia_return '}'",
"funcion_con_return : encabezado_funcion '{' '}'",
"sentencias_funcion : sentencia_funcion",
"sentencias_funcion : sentencias_funcion sentencia_funcion",
"sentencia_funcion : sentencia_declarativa",
"sentencia_funcion : sentencia_ejecutable_funcion",
"sentencia_ejecutable_funcion : asignacion",
"sentencia_ejecutable_funcion : DEFER asignacion",
"sentencia_ejecutable_funcion : imprimir",
"sentencia_ejecutable_funcion : DEFER imprimir",
"sentencia_ejecutable_funcion : sentencia_when_con_return",
"sentencia_ejecutable_funcion : DEFER sentencia_when_con_return",
"sentencia_ejecutable_funcion : sentencia_do_con_return",
"sentencia_ejecutable_funcion : DEFER sentencia_do_con_return",
"sentencia_ejecutable_funcion : sentencia_seleccion_simple_con_return",
"sentencia_ejecutable_funcion : DEFER sentencia_seleccion_simple_con_return",
"sentencias_ejecutables_funcion : sentencia_ejecutable_funcion",
"sentencias_ejecutables_funcion : sentencias_ejecutables_funcion sentencia_ejecutable_funcion",
"funcion_sin_return : encabezado_funcion '{' sentencia_seleccion_compuesta_con_return '}'",
"funcion_sin_return : encabezado_funcion '{' sentencias_funcion sentencia_seleccion_compuesta_con_return '}'",
"sentencia_seleccion_compuesta_con_return : IF '(' condicion ')' THEN sentencia_seleccion_compuesta_con_return_simple ELSE sentencia_seleccion_compuesta_con_return_simple ENDIF ';'",
"sentencia_seleccion_compuesta_con_return : IF '(' condicion ')' THEN '{' sentencias_ejecutables_funcion sentencia_return '}' ELSE sentencia_seleccion_compuesta_con_return_simple ENDIF ';'",
"sentencia_seleccion_compuesta_con_return : IF '(' condicion ')' THEN '{' sentencias_ejecutables_funcion sentencia_seleccion_compuesta_con_return '}' ELSE sentencia_seleccion_compuesta_con_return_simple ENDIF ';'",
"sentencia_seleccion_compuesta_con_return : IF '(' condicion ')' THEN sentencia_seleccion_compuesta_con_return_simple ELSE '{' sentencias_ejecutables_funcion sentencia_return '}' ENDIF ';'",
"sentencia_seleccion_compuesta_con_return : IF '(' condicion ')' THEN sentencia_seleccion_compuesta_con_return_simple ELSE '{' sentencias_ejecutables_funcion sentencia_seleccion_compuesta_con_return '}' ENDIF ';'",
"sentencia_seleccion_compuesta_con_return : IF '(' condicion ')' THEN '{' sentencias_ejecutables_funcion sentencia_return '}' ELSE '{' sentencias_ejecutables_funcion sentencia_seleccion_compuesta_con_return_simple '}' ENDIF ';'",
"sentencia_seleccion_compuesta_con_return : IF '(' condicion ')' THEN '{' sentencias_ejecutables_funcion sentencia_seleccion_compuesta_con_return '}' ELSE '{' sentencias_ejecutables_funcion sentencia_seleccion_compuesta_con_return_simple '}' ENDIF ';'",
"sentencia_seleccion_compuesta_con_return : IF '(' condicion ')' THEN sentencia_seleccion_compuesta_con_return_simple ELSE sentencia_seleccion_compuesta_con_return_simple ENDIF",
"sentencia_seleccion_compuesta_con_return : IF '(' condicion ')' THEN '{' sentencias_ejecutables_funcion sentencia_return '}' ELSE sentencia_seleccion_compuesta_con_return_simple ENDIF",
"sentencia_seleccion_compuesta_con_return : IF '(' condicion ')' THEN '{' sentencias_ejecutables_funcion sentencia_seleccion_compuesta_con_return '}' ELSE sentencia_seleccion_compuesta_con_return_simple ENDIF",
"sentencia_seleccion_compuesta_con_return : IF '(' condicion ')' THEN sentencia_seleccion_compuesta_con_return_simple ELSE '{' sentencias_ejecutables_funcion sentencia_return '}' ENDIF",
"sentencia_seleccion_compuesta_con_return : IF '(' condicion ')' THEN sentencia_seleccion_compuesta_con_return_simple ELSE '{' sentencias_ejecutables_funcion sentencia_seleccion_compuesta_con_return '}' ENDIF",
"sentencia_seleccion_compuesta_con_return : IF '(' condicion ')' THEN '{' sentencias_ejecutables_funcion sentencia_return '}' ELSE '{' sentencias_ejecutables_funcion sentencia_seleccion_compuesta_con_return_simple '}' ENDIF",
"sentencia_seleccion_compuesta_con_return : IF '(' condicion ')' THEN '{' sentencias_ejecutables_funcion sentencia_seleccion_compuesta_con_return '}' ELSE '{' sentencias_ejecutables_funcion sentencia_seleccion_compuesta_con_return_simple '}' ENDIF",
"sentencia_seleccion_compuesta_con_return_simple : sentencia_return",
"sentencia_seleccion_compuesta_con_return_simple : sentencia_seleccion_compuesta_con_return",
"sentencia_seleccion_compuesta_con_return_simple : DEFER sentencia_seleccion_compuesta_con_return",
"sentencia_seleccion_simple_con_return : IF '(' condicion ')' THEN sentencia_return ENDIF ';'",
"sentencia_seleccion_simple_con_return : IF '(' condicion ')' THEN sentencia_seleccion_compuesta_con_return ENDIF ';'",
"sentencia_seleccion_simple_con_return : IF '(' condicion ')' THEN sentencia_ejecutable_funcion ENDIF ';'",
"sentencia_seleccion_simple_con_return : IF '(' condicion ')' THEN '{' sentencias_ejecutables_funcion sentencia_return '}' ENDIF ';'",
"sentencia_seleccion_simple_con_return : IF '(' condicion ')' THEN '{' sentencias_ejecutables_funcion sentencia_seleccion_compuesta_con_return '}' ENDIF ';'",
"sentencia_seleccion_simple_con_return : IF '(' condicion ')' THEN '{' sentencias_ejecutables_funcion sentencia_return '}' ELSE '{' sentencias_ejecutables_funcion '}' ENDIF ';'",
"sentencia_seleccion_simple_con_return : IF '(' condicion ')' THEN '{' sentencias_ejecutables_funcion sentencia_return '}' ELSE sentencia_ejecutable_funcion ENDIF ';'",
"sentencia_seleccion_simple_con_return : IF '(' condicion ')' THEN '{' sentencias_ejecutables_funcion sentencia_seleccion_compuesta_con_return '}' ELSE sentencia_ejecutable_funcion ENDIF ';'",
"sentencia_seleccion_simple_con_return : IF '(' condicion ')' THEN '{' sentencias_ejecutables_funcion sentencia_seleccion_compuesta_con_return '}' ELSE '{' sentencias_ejecutables_funcion '}' ENDIF ';'",
"sentencia_seleccion_simple_con_return : IF '(' condicion ')' THEN '{' sentencias_ejecutables_funcion '}' ELSE '{' sentencias_ejecutables_funcion sentencia_return '}' ENDIF ';'",
"sentencia_seleccion_simple_con_return : IF '(' condicion ')' THEN '{' sentencias_ejecutables_funcion '}' ELSE '{' sentencias_ejecutables_funcion sentencia_seleccion_compuesta_con_return '}' ENDIF ';'",
"sentencia_seleccion_simple_con_return : IF '(' condicion ')' THEN sentencia_ejecutable_funcion ELSE '{' sentencias_ejecutables_funcion sentencia_return '}' ENDIF ';'",
"sentencia_seleccion_simple_con_return : IF '(' condicion ')' THEN sentencia_ejecutable_funcion ELSE '{' sentencias_ejecutables_funcion sentencia_seleccion_compuesta_con_return '}' ENDIF ';'",
"sentencia_seleccion_simple_con_return : IF '(' condicion ')' THEN '{' sentencias_ejecutables_funcion '}' ELSE '{' sentencias_ejecutables_funcion '}' ENDIF ';'",
"sentencia_when_con_return : WHEN '(' condicion ')' THEN '{' sentencia_funcion '}' ';'",
"sentencia_when_con_return : WHEN '(' condicion ')' THEN '{' sentencia_funcion sentencia_return '}' ';'",
"sentencia_when_con_return : WHEN '(' condicion ')' THEN '{' sentencia_funcion sentencia_seleccion_compuesta_con_return '}' ';'",
"sentencia_when_con_return : WHEN '(' condicion ')' THEN '{' sentencia_funcion '}'",
"sentencia_when_con_return : WHEN '(' condicion ')' THEN '{' sentencia_funcion sentencia_return '}'",
"sentencia_when_con_return : WHEN '(' condicion ')' THEN '{' sentencia_funcion sentencia_seleccion_compuesta_con_return '}'",
"sentencia_when_con_return : WHEN '(' condicion ')' THEN '{' '}' ';'",
"sentencia_when_con_return : WHEN '(' ')' THEN '{' sentencia_funcion '}' ';'",
"sentencia_when_con_return : WHEN '(' ')' THEN '{' sentencia_funcion sentencia_return '}' ';'",
"sentencia_when_con_return : WHEN '(' ')' THEN '{' sentencia_funcion sentencia_seleccion_compuesta_con_return '}' ';'",
"sentencia_when_con_return : WHEN '(' condicion ')' '{' sentencia_funcion '}' ';'",
"sentencia_when_con_return : WHEN '(' condicion ')' '{' sentencia_funcion sentencia_return '}' ';'",
"sentencia_when_con_return : WHEN '(' condicion ')' '{' sentencia_funcion sentencia_seleccion_compuesta_con_return '}' ';'",
"sentencia_do_con_return : DO bloque_sentencias_ejecutables_do_con_return UNTIL '(' condicion ')' ';'",
"sentencia_do_con_return : etiqueta ':' DO bloque_sentencias_ejecutables_do_con_return UNTIL '(' condicion ')' ';'",
"sentencia_do_con_return : DO bloque_sentencias_ejecutables_do_con_return UNTIL '(' condicion ')'",
"sentencia_do_con_return : etiqueta ':' DO bloque_sentencias_ejecutables_do_con_return UNTIL '(' condicion ')'",
"sentencia_do_con_return : DO bloque_sentencias_ejecutables_do_con_return UNTIL '(' ')'",
"sentencia_do_con_return : etiqueta ':' DO bloque_sentencias_ejecutables_do_con_return UNTIL '(' ')'",
"bloque_sentencias_ejecutables_do_con_return : sentencia_return",
"bloque_sentencias_ejecutables_do_con_return : sentencia_seleccion_compuesta_con_return",
"bloque_sentencias_ejecutables_do_con_return : sentencias_ejecutables_do_funcion",
"bloque_sentencias_ejecutables_do_con_return : '{' sentencias_ejecutables_do_funcion sentencia_return '}'",
"bloque_sentencias_ejecutables_do_con_return : '{' sentencias_ejecutables_do_funcion sentencia_seleccion_compuesta_con_return '}'",
"bloque_sentencias_ejecutables_do_con_return : '{' sentencias_ejecutables_do_funcion '}'",
"bloque_sentencias_ejecutables_do_con_return : '{' '}'",
"bloque_sentencias_ejecutables_do_con_return : '{' sentencias_ejecutables_do_funcion sentencia_return",
"bloque_sentencias_ejecutables_do_con_return : sentencias_ejecutables_do_funcion sentencia_return '}'",
"bloque_sentencias_ejecutables_do_con_return : '{' sentencias_ejecutables_do_funcion sentencia_seleccion_compuesta_con_return",
"bloque_sentencias_ejecutables_do_con_return : sentencias_ejecutables_do_funcion sentencia_seleccion_compuesta_con_return '}'",
"bloque_sentencias_ejecutables_do_con_return : '{' sentencias_ejecutables_do_funcion",
"bloque_sentencias_ejecutables_do_con_return : sentencias_ejecutables_do_funcion '}'",
"sentencias_ejecutables_do_funcion : sentencia_ejecutable_do_funcion",
"sentencias_ejecutables_do_funcion : sentencias_ejecutables_do_funcion sentencia_ejecutable_do_funcion",
"sentencia_ejecutable_do_funcion : sentencia_ejecutable_funcion",
"sentencia_ejecutable_do_funcion : sentencia_break",
"sentencia_ejecutable_do_funcion : sentencia_continue",
"encabezado_funcion : FUN ID '(' ')' ':' tipo",
"encabezado_funcion : FUN ID '(' lista_de_parametros ')' ':' tipo",
"encabezado_funcion : FUN ID '(' lista_de_parametros ')' tipo",
"encabezado_funcion : FUN ID '(' ')' ':'",
"encabezado_funcion : FUN '(' ')' ':' tipo",
"encabezado_funcion : FUN ID ')' ':' tipo",
"encabezado_funcion : FUN ID '(' ':' tipo",
"encabezado_funcion : FUN ID '(' lista_de_parametros ')' ':'",
"encabezado_funcion : FUN '(' lista_de_parametros ')' ':' tipo",
"encabezado_funcion : FUN ID lista_de_parametros ')' ':' tipo",
"encabezado_funcion : FUN ID '(' lista_de_parametros ':' tipo",
"sentencia_return : RETURN '(' expresion ')' ';'",
"sentencia_return : RETURN '(' expresion ')'",
"sentencia_return : RETURN expresion ')'",
"sentencia_return : RETURN '(' expresion",
"sentencia_return : RETURN '(' ')' ';'",
"lista_de_parametros : parametro",
"lista_de_parametros : parametro ',' parametro",
"lista_de_parametros : parametro ',' parametro ',' lista_parametros_exceso",
"lista_parametros_exceso : parametro",
"lista_parametros_exceso : parametro ',' lista_parametros_exceso",
"parametro : tipo ID",
"parametro : tipo",
"$$1 :",
"parametro : $$1 ID",
"declaracion_constantes : CONST lista_declaracion_constantes ';'",
"declaracion_constantes : CONST lista_declaracion_constantes",
"declaracion_constantes : CONST ';'",
"lista_declaracion_constantes : declaracion_constante",
"lista_declaracion_constantes : declaracion_constante ',' lista_declaracion_constantes",
"declaracion_constante : ID ASIGNACION CTE",
"declaracion_constante : ID ASIGNACION",
"declaracion_constante : ID CTE",
"declaracion_constante : ID",
"declaracion_constante : ID '=' CTE",
"sentencia_ejecutable : asignacion",
"sentencia_ejecutable : DEFER asignacion",
"sentencia_ejecutable : seleccion",
"sentencia_ejecutable : DEFER seleccion",
"sentencia_ejecutable : imprimir",
"sentencia_ejecutable : DEFER imprimir",
"sentencia_ejecutable : sentencia_when",
"sentencia_ejecutable : DEFER sentencia_when",
"sentencia_ejecutable : sentencia_do",
"sentencia_ejecutable : DEFER sentencia_do",
"sentencia_ejecutable_do : sentencia_ejecutable",
"sentencia_ejecutable_do : sentencia_break",
"sentencia_ejecutable_do : sentencia_continue",
"sentencia_break : BREAK ';'",
"sentencia_break : BREAK ':' etiqueta ';'",
"sentencia_break : BREAK",
"sentencia_break : BREAK ':' etiqueta",
"sentencia_break : BREAK ':' ';'",
"sentencia_continue : CONTINUE ';'",
"sentencia_continue : CONTINUE",
"sentencia_do : sentencia_do_simple",
"sentencia_do : etiqueta ':' sentencia_do_simple",
"sentencia_do_simple : DO bloque_sentencias_ejecutables_do UNTIL '(' condicion ')' ';'",
"sentencia_do_simple : DO bloque_sentencias_ejecutables_do UNTIL '(' condicion ')'",
"sentencia_do_simple : DO bloque_sentencias_ejecutables_do UNTIL '(' ')' ';'",
"sentencia_do_simple : DO bloque_sentencias_ejecutables_do UNTIL condicion ')' ';'",
"sentencia_do_simple : DO bloque_sentencias_ejecutables_do UNTIL '(' condicion ';'",
"etiqueta : ID",
"bloque_sentencias_ejecutables_do : sentencia_ejecutable_do",
"bloque_sentencias_ejecutables_do : '{' sentencias_ejecutables_do '}'",
"bloque_sentencias_ejecutables_do : '{' sentencias_ejecutables_do",
"bloque_sentencias_ejecutables_do : sentencias_ejecutables_do '}'",
"sentencias_ejecutables_do : sentencia_ejecutable_do",
"sentencias_ejecutables_do : sentencias_ejecutables_do sentencia_ejecutable_do",
"asignacion : ID ASIGNACION expresion ';'",
"asignacion : ID ASIGNACION ';'",
"asignacion : ID ASIGNACION expresion",
"asignacion : ID '=' expresion ';'",
"asignacion : ID '=' expresion",
"sentencia_when : WHEN '(' condicion ')' THEN '{' sentencias_when '}' ';'",
"sentencia_when : WHEN '(' condicion ')' '{' sentencias_when '}' ';'",
"sentencia_when : WHEN '(' ')' THEN '{' sentencias_when '}' ';'",
"sentencia_when : WHEN '(' condicion ')' THEN '{' sentencias_when '}'",
"sentencia_when : WHEN '(' condicion ')' '{' sentencias_when '}'",
"sentencia_when : WHEN '(' condicion ')' '{' '}'",
"sentencias_when : sentencia",
"sentencias_when : sentencia sentencias_when",
"seleccion : IF '(' condicion ')' THEN bloque_sentencias_ejecutables_seleccion ENDIF ';'",
"seleccion : IF '(' condicion ')' THEN bloque_sentencias_ejecutables_seleccion ELSE bloque_sentencias_ejecutables_seleccion ENDIF ';'",
"seleccion : IF '(' condicion ')' THEN bloque_sentencias_ejecutables_seleccion ENDIF",
"seleccion : IF '(' condicion ')' THEN bloque_sentencias_ejecutables_seleccion ELSE bloque_sentencias_ejecutables_seleccion ENDIF",
"seleccion : IF '(' condicion THEN bloque_sentencias_ejecutables_seleccion ENDIF ';'",
"seleccion : IF condicion ')' THEN bloque_sentencias_ejecutables_seleccion ENDIF ';'",
"seleccion : IF '(' ')' THEN bloque_sentencias_ejecutables_seleccion ENDIF ';'",
"seleccion : IF '(' condicion ')' THEN ENDIF ';'",
"seleccion : IF '(' condicion ')' bloque_sentencias_ejecutables_seleccion ENDIF ';'",
"seleccion : IF '(' ')' THEN bloque_sentencias_ejecutables_seleccion ELSE bloque_sentencias_ejecutables_seleccion ENDIF ';'",
"seleccion : IF '(' condicion ')' bloque_sentencias_ejecutables_seleccion ELSE bloque_sentencias_ejecutables_seleccion ENDIF ';'",
"seleccion : IF '(' condicion ')' THEN ELSE ENDIF ';'",
"bloque_sentencias_ejecutables_seleccion : sentencia_ejecutable",
"bloque_sentencias_ejecutables_seleccion : '{' sentencias_ejecutables '}'",
"bloque_sentencias_ejecutables_seleccion : '{' '}'",
"bloque_sentencias_ejecutables_seleccion : '{' sentencias_ejecutables",
"bloque_sentencias_ejecutables_seleccion : sentencias_ejecutables '}'",
"sentencias_ejecutables : sentencia_ejecutable",
"sentencias_ejecutables : sentencias_ejecutables sentencia_ejecutable",
"condicion : expresion comparador expresion",
"condicion : expresion comparador",
"condicion : comparador expresion",
"comparador : COMP_MAYOR_IGUAL",
"comparador : COMP_MENOR_IGUAL",
"comparador : COMP_DISTINTO",
"comparador : '>'",
"comparador : '<'",
"comparador : '='",
"expresion : expresion '+' termino",
"expresion : expresion '-' termino",
"expresion : termino",
"termino : termino '*' factor",
"termino : termino '/' factor",
"termino : factor",
"factor : ID",
"factor : constante",
"factor : invocacion_funcion",
"invocacion_funcion : ID '(' ')'",
"invocacion_funcion : ID '(' lista_de_parametros_reales ')'",
"lista_de_parametros_reales : parametro_real",
"lista_de_parametros_reales : lista_de_parametros_reales ',' parametro_real",
"parametro_real : ID",
"parametro_real : constante",
"imprimir : OUT '(' CADENA ')' ';'",
"imprimir : OUT '(' ID ')' ';'",
"imprimir : OUT '(' ')' ';'",
"imprimir : OUT CADENA ')' ';'",
"imprimir : OUT '(' CADENA ';'",
"imprimir : OUT ID ')' ';'",
"imprimir : OUT '(' ID ';'",
"imprimir : OUT '(' CADENA ')'",
"imprimir : OUT '(' ID ')'",
"constante : CTE",
"constante : '-' CTE",
"tipo : UINT16",
"tipo : DOUBLE64",
};

//#line 429 ".\gramatica.y"

public static AnalizadorLexico lexico = null;
public static Logger logger = null;
public static TablaDeSimbolos ts = null;

public static StringBuilder negConstante = new StringBuilder();

public void constanteConSigno(String constante) {
	if (constante.contains(".")) {

		negConstante.setLength(0);
		negConstante.append("-");
		negConstante.append(constante);
		
		Double parsedDouble = Double.parseDouble(negConstante.toString().replace('D', 'E'));
		
		if (parsedDouble < -2.2250738585072014E-308 && -1.7976931348623157E+308 > parsedDouble) {
			logger.logWarning("[Parser] Rango invalido para la constante: " + negConstante + ", se trunca al rango permitido");
			
			if (-1.7976931348623157E+308 < parsedDouble) {
				negConstante.setLength(0);
				negConstante.append("-1.7976931348623157D+308");
			} else {
				negConstante.setLength(0);
				negConstante.append("-2.2250738585072014D-308");
			}
		}
		
		ts.swapLexemas(constante, negConstante.toString());
	} else {
		//se recibio un uint que fue aceptado por el lexico pero resulta ser negativo
		logger.logWarning("[Parser] No se admiten ui16 con valores negativos: " + "-"+constante + ", se trunca a 0");
		
		ts.swapLexemas(constante, "0");
	}
}	

public int yylex() {
	return lexico.yylex(yylval);
}

public void yyerror(String error) {
	logger.logError(error);
}

public static void main(String[] args) {
	if (args.length == 0) {
		System.err.println("No se especifico ningun archivo de codigo");
	} else {
		String archivo_a_leer = args[0];
		System.out.println("Se va a leer archivo " + archivo_a_leer);
		
		logger = new Logger();
		
		FileReaderHelper fileHelper = new FileReaderHelper(logger);
		
		boolean fileOpenSuccess = fileHelper.open(archivo_a_leer);
		
		if (fileOpenSuccess) {
			Parser parser = new Parser();
			ts = new TablaDeSimbolos();
			lexico = new AnalizadorLexico(fileHelper, ts, logger);
			
	        parser.run();
	
			String path = new File(archivo_a_leer).getAbsolutePath();
	        
	        Output out = new Output(path);
	        
	        String printTs = ts.print();
	        
	        out.saveFile("codigo-lexico.txt", logger.getLexico());
			out.saveFile("codigo-sintetico.txt", logger.getSintactico());
			out.saveFile("tabla-de-simbolos.txt", printTs);
	        
			System.out.println(printTs);
		}
	}
}
//#line 1141 "Parser.java"
//###############################################################
// method: yylexdebug : check lexer state
//###############################################################
void yylexdebug(int state,int ch)
{
String s=null;
  if (ch < 0) ch=0;
  if (ch <= YYMAXTOKEN) //check index bounds
     s = yyname[ch];    //now get it
  if (s==null)
    s = "illegal-symbol";
  debug("state "+state+", reading "+ch+" ("+s+")");
}





//The following are now global, to aid in error reporting
int yyn;       //next next thing to do
int yym;       //
int yystate;   //current parsing state from state table
String yys;    //current token string


//###############################################################
// method: yyparse : parse input and execute indicated items
//###############################################################
int yyparse()
{
boolean doaction;
  init_stacks();
  yynerrs = 0;
  yyerrflag = 0;
  yychar = -1;          //impossible char forces a read
  yystate=0;            //initial state
  state_push(yystate);  //save it
  val_push(yylval);     //save empty value
  while (true) //until parsing is done, either correctly, or w/error
    {
    doaction=true;
    if (yydebug) debug("loop"); 
    //#### NEXT ACTION (from reduction table)
    for (yyn=yydefred[yystate];yyn==0;yyn=yydefred[yystate])
      {
      if (yydebug) debug("yyn:"+yyn+"  state:"+yystate+"  yychar:"+yychar);
      if (yychar < 0)      //we want a char?
        {
        yychar = yylex();  //get next token
        if (yydebug) debug(" next yychar:"+yychar);
        //#### ERROR CHECK ####
        if (yychar < 0)    //it it didn't work/error
          {
          yychar = 0;      //change it to default string (no -1!)
          if (yydebug)
            yylexdebug(yystate,yychar);
          }
        }//yychar<0
      yyn = yysindex[yystate];  //get amount to shift by (shift index)
      if ((yyn != 0) && (yyn += yychar) >= 0 &&
          yyn <= YYTABLESIZE && yycheck[yyn] == yychar)
        {
        if (yydebug)
          debug("state "+yystate+", shifting to state "+yytable[yyn]);
        //#### NEXT STATE ####
        yystate = yytable[yyn];//we are in a new state
        state_push(yystate);   //save it
        val_push(yylval);      //push our lval as the input for next rule
        yychar = -1;           //since we have 'eaten' a token, say we need another
        if (yyerrflag > 0)     //have we recovered an error?
           --yyerrflag;        //give ourselves credit
        doaction=false;        //but don't process yet
        break;   //quit the yyn=0 loop
        }

    yyn = yyrindex[yystate];  //reduce
    if ((yyn !=0 ) && (yyn += yychar) >= 0 &&
            yyn <= YYTABLESIZE && yycheck[yyn] == yychar)
      {   //we reduced!
      if (yydebug) debug("reduce");
      yyn = yytable[yyn];
      doaction=true; //get ready to execute
      break;         //drop down to actions
      }
    else //ERROR RECOVERY
      {
      if (yyerrflag==0)
        {
        yyerror("syntax error");
        yynerrs++;
        }
      if (yyerrflag < 3) //low error count?
        {
        yyerrflag = 3;
        while (true)   //do until break
          {
          if (stateptr<0)   //check for under & overflow here
            {
            yyerror("stack underflow. aborting...");  //note lower case 's'
            return 1;
            }
          yyn = yysindex[state_peek(0)];
          if ((yyn != 0) && (yyn += YYERRCODE) >= 0 &&
                    yyn <= YYTABLESIZE && yycheck[yyn] == YYERRCODE)
            {
            if (yydebug)
              debug("state "+state_peek(0)+", error recovery shifting to state "+yytable[yyn]+" ");
            yystate = yytable[yyn];
            state_push(yystate);
            val_push(yylval);
            doaction=false;
            break;
            }
          else
            {
            if (yydebug)
              debug("error recovery discarding state "+state_peek(0)+" ");
            if (stateptr<0)   //check for under & overflow here
              {
              yyerror("Stack underflow. aborting...");  //capital 'S'
              return 1;
              }
            state_pop();
            val_pop();
            }
          }
        }
      else            //discard this token
        {
        if (yychar == 0)
          return 1; //yyabort
        if (yydebug)
          {
          yys = null;
          if (yychar <= YYMAXTOKEN) yys = yyname[yychar];
          if (yys == null) yys = "illegal-symbol";
          debug("state "+yystate+", error recovery discards token "+yychar+" ("+yys+")");
          }
        yychar = -1;  //read another
        }
      }//end error recovery
    }//yyn=0 loop
    if (!doaction)   //any reason not to proceed?
      continue;      //skip action
    yym = yylen[yyn];          //get count of terminals on rhs
    if (yydebug)
      debug("state "+yystate+", reducing "+yym+" by rule "+yyn+" ("+yyrule[yyn]+")");
    if (yym>0)                 //if count of rhs not 'nil'
      yyval = val_peek(yym-1); //get current semantic value
    yyval = dup_yyval(yyval); //duplicate yyval if ParserVal is used as semantic value
    switch(yyn)
      {
//########## USER-SUPPLIED ACTIONS ##########
case 1:
//#line 17 ".\gramatica.y"
{ logger.logSuccess("[Parser] Programa correcto detectado"); }
break;
case 2:
//#line 18 ".\gramatica.y"
{ logger.logError("[Parser] Se esperaba un identificador nombre del programa"); }
break;
case 3:
//#line 19 ".\gramatica.y"
{ logger.logError("[Parser] Se esperaba un { antes de las sentencias del programa"); }
break;
case 4:
//#line 20 ".\gramatica.y"
{ logger.logError("[Parser] Se esperaba un } al final de las sentencias del programa"); }
break;
case 5:
//#line 21 ".\gramatica.y"
{ logger.logError("[Parser] Se esperaban sentencias del programa"); }
break;
case 6:
//#line 22 ".\gramatica.y"
{ logger.logError("[Parser] Se esperaban sentencias del programa"); }
break;
case 16:
//#line 47 ".\gramatica.y"
{ logger.logSuccess("[Parser] Declaracion de lista de variables detectado"); }
break;
case 17:
//#line 48 ".\gramatica.y"
{ logger.logError("[Parser] Se esperaba un ; al final de la lista de variables"); }
break;
case 18:
//#line 49 ".\gramatica.y"
{ logger.logError("[Parser] Se esperaba un tipo para la lista de variables"); }
break;
case 19:
//#line 50 ".\gramatica.y"
{ logger.logError("[Parser] Se esperaba una variable o lista de variables"); }
break;
case 22:
//#line 59 ".\gramatica.y"
{ logger.logSuccess("[Parser] Declaracion de funcion detectado"); }
break;
case 23:
//#line 60 ".\gramatica.y"
{ logger.logSuccess("[Parser] Declaracion de funcion detectado"); }
break;
case 24:
//#line 61 ".\gramatica.y"
{ logger.logError("[Parser] Se esperaban sentencias en la funcion"); }
break;
case 41:
//#line 93 ".\gramatica.y"
{ logger.logSuccess("[Parser] Declaracion de funcion detectado"); }
break;
case 42:
//#line 94 ".\gramatica.y"
{ logger.logSuccess("[Parser] Declaracion de funcion detectado"); }
break;
case 43:
//#line 98 ".\gramatica.y"
{ logger.logSuccess("[Parser] Sentencia seleccion detectada"); }
break;
case 44:
//#line 99 ".\gramatica.y"
{ logger.logSuccess("[Parser] Sentencia seleccion detectada"); }
break;
case 45:
//#line 100 ".\gramatica.y"
{ logger.logSuccess("[Parser] Sentencia seleccion detectada"); }
break;
case 46:
//#line 101 ".\gramatica.y"
{ logger.logSuccess("[Parser] Sentencia seleccion detectada"); }
break;
case 47:
//#line 102 ".\gramatica.y"
{ logger.logSuccess("[Parser] Sentencia seleccion detectada"); }
break;
case 48:
//#line 103 ".\gramatica.y"
{ logger.logSuccess("[Parser] Sentencia seleccion detectada"); }
break;
case 49:
//#line 104 ".\gramatica.y"
{ logger.logSuccess("[Parser] Sentencia seleccion detectada"); }
break;
case 50:
//#line 105 ".\gramatica.y"
{ logger.logError("[Parser] Se esperaba un ; al final de la sentencia de seleccion"); }
break;
case 51:
//#line 106 ".\gramatica.y"
{ logger.logError("[Parser] Se esperaba un ; al final de la sentencia de seleccion"); }
break;
case 52:
//#line 107 ".\gramatica.y"
{ logger.logError("[Parser] Se esperaba un ; al final de la sentencia de seleccion"); }
break;
case 53:
//#line 108 ".\gramatica.y"
{ logger.logError("[Parser] Se esperaba un ; al final de la sentencia de seleccion"); }
break;
case 54:
//#line 109 ".\gramatica.y"
{ logger.logError("[Parser] Se esperaba un ; al final de la sentencia de seleccion"); }
break;
case 55:
//#line 110 ".\gramatica.y"
{ logger.logError("[Parser] Se esperaba un ; al final de la sentencia de seleccion"); }
break;
case 56:
//#line 111 ".\gramatica.y"
{ logger.logError("[Parser] Se esperaba un ; al final de la sentencia de seleccion"); }
break;
case 60:
//#line 121 ".\gramatica.y"
{ logger.logSuccess("[Parser] Sentencia de seleccion detectada"); }
break;
case 61:
//#line 122 ".\gramatica.y"
{ logger.logSuccess("[Parser] Sentencia de seleccion detectada"); }
break;
case 62:
//#line 123 ".\gramatica.y"
{ logger.logSuccess("[Parser] Sentencia de seleccion detectada"); }
break;
case 63:
//#line 124 ".\gramatica.y"
{ logger.logSuccess("[Parser] Sentencia de seleccion detectada"); }
break;
case 64:
//#line 125 ".\gramatica.y"
{ logger.logSuccess("[Parser] Sentencia de seleccion detectada"); }
break;
case 65:
//#line 126 ".\gramatica.y"
{ logger.logSuccess("[Parser] Sentencia de seleccion detectada"); }
break;
case 66:
//#line 127 ".\gramatica.y"
{ logger.logSuccess("[Parser] Sentencia de seleccion detectada"); }
break;
case 67:
//#line 128 ".\gramatica.y"
{ logger.logSuccess("[Parser] Sentencia de seleccion detectada"); }
break;
case 68:
//#line 129 ".\gramatica.y"
{ logger.logSuccess("[Parser] Sentencia de seleccion detectada"); }
break;
case 69:
//#line 130 ".\gramatica.y"
{ logger.logSuccess("[Parser] Sentencia de seleccion detectada"); }
break;
case 70:
//#line 131 ".\gramatica.y"
{ logger.logSuccess("[Parser] Sentencia de seleccion detectada"); }
break;
case 71:
//#line 132 ".\gramatica.y"
{ logger.logSuccess("[Parser] Sentencia de seleccion detectada"); }
break;
case 72:
//#line 133 ".\gramatica.y"
{ logger.logSuccess("[Parser] Sentencia de seleccion detectada"); }
break;
case 73:
//#line 134 ".\gramatica.y"
{ logger.logSuccess("[Parser] Sentencia de seleccion detectada"); }
break;
case 74:
//#line 138 ".\gramatica.y"
{ logger.logSuccess("[Parser] Sentencia when detectada"); }
break;
case 75:
//#line 139 ".\gramatica.y"
{ logger.logSuccess("[Parser] Sentencia when detectada"); }
break;
case 76:
//#line 140 ".\gramatica.y"
{ logger.logSuccess("[Parser] Sentencia when detectada"); }
break;
case 77:
//#line 141 ".\gramatica.y"
{ logger.logError("[Parser] Se esperaba ; al final de la sentencia when"); }
break;
case 78:
//#line 142 ".\gramatica.y"
{ logger.logError("[Parser] Se esperaba ; al final de la sentencia when"); }
break;
case 79:
//#line 143 ".\gramatica.y"
{ logger.logError("[Parser] Se esperaba ; al final de la sentencia when"); }
break;
case 80:
//#line 144 ".\gramatica.y"
{ logger.logError("[Parser] Se esperaban sentencias en la sentencia when"); }
break;
case 81:
//#line 145 ".\gramatica.y"
{ logger.logError("[Parser] Se esperaba una condicion en la sentencia when"); }
break;
case 82:
//#line 146 ".\gramatica.y"
{ logger.logError("[Parser] Se esperaba una condicion en la sentencia when"); }
break;
case 83:
//#line 147 ".\gramatica.y"
{ logger.logError("[Parser] Se esperaba una condicion en la sentencia when"); }
break;
case 84:
//#line 148 ".\gramatica.y"
{ logger.logError("[Parser] Se esperaba la palabra reservada then en la sentencia when"); }
break;
case 85:
//#line 149 ".\gramatica.y"
{ logger.logError("[Parser] Se esperaba la palabra reservada then en la sentencia when"); }
break;
case 86:
//#line 150 ".\gramatica.y"
{ logger.logError("[Parser] Se esperaba la palabra reservada then en la sentencia when"); }
break;
case 87:
//#line 154 ".\gramatica.y"
{ logger.logSuccess("[Parser] Sentencia do until detectada"); }
break;
case 88:
//#line 155 ".\gramatica.y"
{ logger.logSuccess("[Parser] Sentencia do until detectada"); }
break;
case 89:
//#line 156 ".\gramatica.y"
{ logger.logError("[Parser] Se esperaba un ; al final de la sentencia do"); }
break;
case 90:
//#line 157 ".\gramatica.y"
{ logger.logError("[Parser] Se esperaba un ; al final de la sentencia do"); }
break;
case 91:
//#line 158 ".\gramatica.y"
{ logger.logError("[Parser] Se esperaba una condicion en la sentencia do"); }
break;
case 92:
//#line 159 ".\gramatica.y"
{ logger.logError("[Parser] Se esperaba una condicion en la sentencia do"); }
break;
case 99:
//#line 169 ".\gramatica.y"
{ logger.logError("[Parser] Se esperaban sentencias en la sentencia do"); }
break;
case 100:
//#line 170 ".\gramatica.y"
{ logger.logError("[Parser] Se esperaba un } al final de la sentencia do"); }
break;
case 101:
//#line 171 ".\gramatica.y"
{ logger.logError("[Parser] Se esperaba un } al final de la sentencia do"); }
break;
case 102:
//#line 172 ".\gramatica.y"
{ logger.logError("[Parser] Se esperaba un } al final de la sentencia do"); }
break;
case 103:
//#line 173 ".\gramatica.y"
{ logger.logError("[Parser] Se esperaba un } al final de la sentencia do"); }
break;
case 104:
//#line 174 ".\gramatica.y"
{ logger.logError("[Parser] Se esperaba un } al final de la sentencia do"); }
break;
case 105:
//#line 175 ".\gramatica.y"
{ logger.logError("[Parser] Se esperaba un } al final de la sentencia do"); }
break;
case 113:
//#line 192 ".\gramatica.y"
{ logger.logError("[Parser] Se esperaba un : antes del tipo para la funcion"); }
break;
case 114:
//#line 193 ".\gramatica.y"
{ logger.logError("[Parser] Se esperaba un tipo de return para la funcion"); }
break;
case 115:
//#line 194 ".\gramatica.y"
{ logger.logError("[Parser] Se esperaba un identificador nombre para la funcion"); }
break;
case 116:
//#line 195 ".\gramatica.y"
{ logger.logError("[Parser] Se esperaba un ( luego del nombre de la funcion"); }
break;
case 117:
//#line 196 ".\gramatica.y"
{ logger.logError("[Parser] Se esperaba un ) luego del nombre para la funcion"); }
break;
case 118:
//#line 197 ".\gramatica.y"
{ logger.logError("[Parser] Se esperaba un tipo de return para la funcion"); }
break;
case 119:
//#line 198 ".\gramatica.y"
{ logger.logError("[Parser] Se esperaba un identificador nombre para la funcion"); }
break;
case 120:
//#line 199 ".\gramatica.y"
{ logger.logError("[Parser] Se esperaba un ( luego del nombre de la funcion"); }
break;
case 121:
//#line 200 ".\gramatica.y"
{ logger.logError("[Parser] Se esperaba un ) luego del nombre para la funcion"); }
break;
case 123:
//#line 205 ".\gramatica.y"
{ logger.logError("[Parser] Se esperaba un ; al final de la sentencia return"); }
break;
case 124:
//#line 206 ".\gramatica.y"
{ logger.logError("[Parser] Se esperaba un ( en la sentencia return"); }
break;
case 125:
//#line 207 ".\gramatica.y"
{ logger.logError("[Parser] Se esperaba un ) en la sentencia return"); }
break;
case 126:
//#line 208 ".\gramatica.y"
{ logger.logError("[Parser] Se esperaba una expresion en la sentencia return"); }
break;
case 129:
//#line 214 ".\gramatica.y"
{ logger.logError("[Parser] Hay mas de 2 parametros en la funcion"); }
break;
case 134:
//#line 224 ".\gramatica.y"
{ logger.logError("[Parser] Se esperaba un identificador nombre para el parametro"); }
break;
case 135:
//#line 225 ".\gramatica.y"
{ logger.logError("[Parser] Se esperaba un tipo valido para el parametro"); }
break;
case 136:
//#line 229 ".\gramatica.y"
{ logger.logSuccess("[Parser] Declaracion de constantes detectado"); }
break;
case 137:
//#line 230 ".\gramatica.y"
{ logger.logError("[Parser] Se esperaba ; al final de la declaracion de constantes"); }
break;
case 138:
//#line 231 ".\gramatica.y"
{ logger.logError("[Parser] Se esperaba una lista de declaracion de constantes"); }
break;
case 142:
//#line 241 ".\gramatica.y"
{ logger.logError("[Parser] Se esperaba una constante del lado derecho de la asignacion"); }
break;
case 143:
//#line 242 ".\gramatica.y"
{ logger.logError("[Parser] Se esperaba el simbolo asignacion en la declaracion de constantes"); }
break;
case 144:
//#line 243 ".\gramatica.y"
{ logger.logError("[Parser] Se esperaba una asignacion en la declaracion de constantes"); }
break;
case 159:
//#line 267 ".\gramatica.y"
{ logger.logSuccess("[Parser] Sentencia break detectada"); }
break;
case 160:
//#line 268 ".\gramatica.y"
{ logger.logSuccess("[Parser] Sentencia break con etiqueta detectada"); }
break;
case 161:
//#line 269 ".\gramatica.y"
{ logger.logError("[Parser] Se esperaba un ; luego de la sentencia break"); }
break;
case 162:
//#line 270 ".\gramatica.y"
{ logger.logError("[Parser] Se esperaba un ; luego de la sentencia break"); }
break;
case 163:
//#line 271 ".\gramatica.y"
{ logger.logError("[Parser] Se esperaba una etiqueta en la sentencia break"); }
break;
case 164:
//#line 275 ".\gramatica.y"
{ logger.logSuccess("[Parser] Sentencia continue detectada"); }
break;
case 165:
//#line 276 ".\gramatica.y"
{ logger.logError("[Parser] Se esperaba un ; al final de la sentencia continue"); }
break;
case 168:
//#line 285 ".\gramatica.y"
{ logger.logSuccess("[Parser] Sentencia do until detectada"); }
break;
case 169:
//#line 286 ".\gramatica.y"
{ logger.logError("[Parser] Se esperaba un ; al final de la sentencia do"); }
break;
case 170:
//#line 287 ".\gramatica.y"
{ logger.logError("[Parser] Se esperaba una condicion para la sentencia do"); }
break;
case 171:
//#line 288 ".\gramatica.y"
{ logger.logSuccess("[Parser] Se esperaba un ( en la condicion para la sentencia do"); }
break;
case 172:
//#line 289 ".\gramatica.y"
{ logger.logSuccess("[Parser] Se esperaba un ) en la condicion para la sentencia do"); }
break;
case 176:
//#line 299 ".\gramatica.y"
{ logger.logError("[Parser] Se esperaba un } al final de la sentencia do"); }
break;
case 177:
//#line 300 ".\gramatica.y"
{ logger.logError("[Parser] Se esperaba un { en la sentencia do"); }
break;
case 180:
//#line 309 ".\gramatica.y"
{ logger.logSuccess("[Parser] Asignacion detectada"); }
break;
case 181:
//#line 310 ".\gramatica.y"
{logger.logError("[Parser] Se espera una expresion del lado derecho de la asignacion");}
break;
case 182:
//#line 311 ".\gramatica.y"
{ logger.logError("[Parser] Se espera un ; al final de la asignacion"); }
break;
case 183:
//#line 312 ".\gramatica.y"
{ logger.logError("[Parser] Se espera el simbolo =: en lugar de = para la asignacion"); }
break;
case 184:
//#line 313 ".\gramatica.y"
{ logger.logError("[Parser] Se espera el simbolo =: en lugar de = para la asignacion"); }
break;
case 185:
//#line 317 ".\gramatica.y"
{ logger.logSuccess("[Parser] Sentencia when detectada"); }
break;
case 186:
//#line 318 ".\gramatica.y"
{ logger.logError("[Parser] Se esperaba la palabra reservada then en la sentencia when"); }
break;
case 187:
//#line 319 ".\gramatica.y"
{ logger.logError("[Parser] Se esperaba una condicion en la sentencia when"); }
break;
case 188:
//#line 320 ".\gramatica.y"
{ logger.logError("[Parser] Se esperaba un ; al final de la sentencia when"); }
break;
case 189:
//#line 321 ".\gramatica.y"
{ logger.logError("[Parser] Se esperaba la palabra reservada then en la sentencia when"); }
break;
case 190:
//#line 322 ".\gramatica.y"
{ logger.logError("[Parser] Se esperaban sentencias dentro del when"); }
break;
case 193:
//#line 331 ".\gramatica.y"
{ logger.logSuccess("[Parser] Sentencia if then detectada"); }
break;
case 194:
//#line 332 ".\gramatica.y"
{ logger.logSuccess("[Parser] Sentencia if then else detectada"); }
break;
case 195:
//#line 333 ".\gramatica.y"
{ logger.logError("[Parser] Se esperaba un ; al final de la sentencia seleccion"); }
break;
case 196:
//#line 334 ".\gramatica.y"
{ logger.logError("[Parser] Se esperaba un ; al final de la sentencia seleccion"); }
break;
case 197:
//#line 335 ".\gramatica.y"
{ logger.logError("[Parser] Se esperaba un ) en la condicion de la sentencia seleccion"); }
break;
case 198:
//#line 336 ".\gramatica.y"
{ logger.logError("[Parser] Se esperaba un ( en la condicion de la sentencia seleccion"); }
break;
case 199:
//#line 337 ".\gramatica.y"
{ logger.logError("[Parser] Se esperaba una condicion en la sentencia seleccion"); }
break;
case 200:
//#line 338 ".\gramatica.y"
{ logger.logError("[Parser] Se esperaban sentencias en la sentencia seleccion"); }
break;
case 201:
//#line 339 ".\gramatica.y"
{ logger.logError("[Parser] Se esperaban la palabra reservada then en la sentencia seleccion"); }
break;
case 202:
//#line 340 ".\gramatica.y"
{ logger.logError("[Parser] Se esperaban una condicion en la sentencia seleccion"); }
break;
case 203:
//#line 341 ".\gramatica.y"
{ logger.logError("[Parser] Se esperaban la palabra reservada then en la sentencia seleccion"); }
break;
case 204:
//#line 342 ".\gramatica.y"
{ logger.logError("[Parser] Se esperaban sentencias en la sentencia seleccion"); }
break;
case 207:
//#line 348 ".\gramatica.y"
{ logger.logError("[Parser] Se esperaban sentencias dentro de la seleccion"); }
break;
case 208:
//#line 349 ".\gramatica.y"
{ logger.logError("[Parser] Se esperaba un } al final de la seleccion"); }
break;
case 209:
//#line 350 ".\gramatica.y"
{ logger.logError("[Parser] Se esperaba un { en la seleccion"); }
break;
case 213:
//#line 360 ".\gramatica.y"
{ logger.logError("[Parser] Se esperaba un expresion del lado derecho de la comparacion"); }
break;
case 214:
//#line 361 ".\gramatica.y"
{ logger.logError("[Parser] Se esperaba un expresion del lado izquierdo de la comparacion"); }
break;
case 236:
//#line 407 ".\gramatica.y"
{ logger.logSuccess("[Parser] Sentencia out detectada"); }
break;
case 237:
//#line 408 ".\gramatica.y"
{ logger.logSuccess("[Parser] Sentencia out detectada"); }
break;
case 238:
//#line 409 ".\gramatica.y"
{ logger.logError("[Parser] Se esperaba una cadena o identificador en la sentencia out"); }
break;
case 239:
//#line 410 ".\gramatica.y"
{ logger.logError("[Parser] Se esperaba un ( en la sentencia out"); }
break;
case 240:
//#line 411 ".\gramatica.y"
{ logger.logError("[Parser] Se esperaba un ) en la sentencia out"); }
break;
case 241:
//#line 412 ".\gramatica.y"
{ logger.logError("[Parser] Se esperaba un ( en la sentencia out"); }
break;
case 242:
//#line 413 ".\gramatica.y"
{ logger.logError("[Parser] Se esperaba un ) en la sentencia out"); }
break;
case 243:
//#line 414 ".\gramatica.y"
{ logger.logError("[Parser] Se espera un ; al final de la sentencia out"); }
break;
case 244:
//#line 415 ".\gramatica.y"
{ logger.logError("[Parser] Se espera un ; al final de la sentencia out"); }
break;
case 246:
//#line 420 ".\gramatica.y"
{ constanteConSigno(val_peek(0).sval); }
break;
//#line 1862 "Parser.java"
//########## END OF USER-SUPPLIED ACTIONS ##########
    }//switch
    //#### Now let's reduce... ####
    if (yydebug) debug("reduce");
    state_drop(yym);             //we just reduced yylen states
    yystate = state_peek(0);     //get new state
    val_drop(yym);               //corresponding value drop
    yym = yylhs[yyn];            //select next TERMINAL(on lhs)
    if (yystate == 0 && yym == 0)//done? 'rest' state and at first TERMINAL
      {
      if (yydebug) debug("After reduction, shifting from state 0 to state "+YYFINAL+"");
      yystate = YYFINAL;         //explicitly say we're done
      state_push(YYFINAL);       //and save it
      val_push(yyval);           //also save the semantic value of parsing
      if (yychar < 0)            //we want another character?
        {
        yychar = yylex();        //get next character
        if (yychar<0) yychar=0;  //clean, if necessary
        if (yydebug)
          yylexdebug(yystate,yychar);
        }
      if (yychar == 0)          //Good exit (if lex returns 0 ;-)
         break;                 //quit the loop--all DONE
      }//if yystate
    else                        //else not done yet
      {                         //get next state and push, for next yydefred[]
      yyn = yygindex[yym];      //find out where to go
      if ((yyn != 0) && (yyn += yystate) >= 0 &&
            yyn <= YYTABLESIZE && yycheck[yyn] == yystate)
        yystate = yytable[yyn]; //get new state
      else
        yystate = yydgoto[yym]; //else go to new defred
      if (yydebug) debug("after reduction, shifting from state "+state_peek(0)+" to state "+yystate+"");
      state_push(yystate);     //going again, so push state & val...
      val_push(yyval);         //for next action
      }
    }//main loop
  return 0;//yyaccept!!
}
//## end of method parse() ######################################



//## run() --- for Thread #######################################
/**
 * A default run method, used for operating this parser
 * object in the background.  It is intended for extending Thread
 * or implementing Runnable.  Turn off with -Jnorun .
 */
public void run()
{
  yyparse();
}
//## end of method run() ########################################



//## Constructors ###############################################
/**
 * Default constructor.  Turn off with -Jnoconstruct .

 */
public Parser()
{
  //nothing to do
}


/**
 * Create a parser, setting the debug to true or false.
 * @param debugMe true for debugging, false for no debug.
 */
public Parser(boolean debugMe)
{
  yydebug=debugMe;
}
//###############################################################



}
//################### END OF CLASS ##############################
