//### This file created by BYACC 1.8(/Java extension  1.15)
//### Java capabilities added 7 Jan 97, Bob Jamison
//### Updated : 27 Nov 97  -- Bob Jamison, Joe Nieten
//###           01 Jan 98  -- Bob Jamison -- fixed generic semantic constructor
//###           01 Jun 99  -- Bob Jamison -- added Runnable support
//###           06 Aug 00  -- Bob Jamison -- made state variables class-global
//###           03 Jan 01  -- Bob Jamison -- improved flags, tracing
//###           16 May 01  -- Bob Jamison -- added custom stack sizing
//###           04 Mar 02  -- Yuval Oren  -- improved java performance, added options
//###           14 Mar 02  -- Tomas Hurka -- -d support, static initializer workaround
//### Please send bug reports to tom@hukatronic.cz
//### static char yysccsid[] = "@(#)yaccpar	1.8 (Berkeley) 01/20/90";



package compilador;



//#line 2 "./src/compilador/gramatica.y"
import java.io.File;
//#line 19 "Parser.java"




public class Parser
{

boolean yydebug;        //do I want debug output?
int yynerrs;            //number of errors so far
int yyerrflag;          //was there an error?
int yychar;             //the current working character

//########## MESSAGES ##########
//###############################################################
// method: debug
//###############################################################
void debug(String msg)
{
  if (yydebug)
    System.out.println(msg);
}

//########## STATE STACK ##########
final static int YYSTACKSIZE = 500;  //maximum stack size
int statestk[] = new int[YYSTACKSIZE]; //state stack
int stateptr;
int stateptrmax;                     //highest index of stackptr
int statemax;                        //state when highest index reached
//###############################################################
// methods: state stack push,pop,drop,peek
//###############################################################
final void state_push(int state)
{
  try {
		stateptr++;
		statestk[stateptr]=state;
	 }
	 catch (ArrayIndexOutOfBoundsException e) {
     int oldsize = statestk.length;
     int newsize = oldsize * 2;
     int[] newstack = new int[newsize];
     System.arraycopy(statestk,0,newstack,0,oldsize);
     statestk = newstack;
     statestk[stateptr]=state;
  }
}
final int state_pop()
{
  return statestk[stateptr--];
}
final void state_drop(int cnt)
{
  stateptr -= cnt; 
}
final int state_peek(int relative)
{
  return statestk[stateptr-relative];
}
//###############################################################
// method: init_stacks : allocate and prepare stacks
//###############################################################
final boolean init_stacks()
{
  stateptr = -1;
  val_init();
  return true;
}
//###############################################################
// method: dump_stacks : show n levels of the stacks
//###############################################################
void dump_stacks(int count)
{
int i;
  System.out.println("=index==state====value=     s:"+stateptr+"  v:"+valptr);
  for (i=0;i<count;i++)
    System.out.println(" "+i+"    "+statestk[i]+"      "+valstk[i]);
  System.out.println("======================");
}


//########## SEMANTIC VALUES ##########
//public class ParserVal is defined in ParserVal.java


String   yytext;//user variable to return contextual strings
ParserVal yyval; //used to return semantic vals from action routines
ParserVal yylval;//the 'lval' (result) I got from yylex()
ParserVal valstk[];
int valptr;
//###############################################################
// methods: value stack push,pop,drop,peek.
//###############################################################
void val_init()
{
  valstk=new ParserVal[YYSTACKSIZE];
  yyval=new ParserVal();
  yylval=new ParserVal();
  valptr=-1;
}
void val_push(ParserVal val)
{
  if (valptr>=YYSTACKSIZE)
    return;
  valstk[++valptr]=val;
}
ParserVal val_pop()
{
  if (valptr<0)
    return new ParserVal();
  return valstk[valptr--];
}
void val_drop(int cnt)
{
int ptr;
  ptr=valptr-cnt;
  if (ptr<0)
    return;
  valptr = ptr;
}
ParserVal val_peek(int relative)
{
int ptr;
  ptr=valptr-relative;
  if (ptr<0)
    return new ParserVal();
  return valstk[ptr];
}
final ParserVal dup_yyval(ParserVal val)
{
  ParserVal dup = new ParserVal();
  dup.ival = val.ival;
  dup.dval = val.dval;
  dup.sval = val.sval;
  dup.obj = val.obj;
  return dup;
}
//#### end semantic value section ####
public final static short ID=257;
public final static short CTE=258;
public final static short CADENA=259;
public final static short IF=260;
public final static short ELSE=261;
public final static short ENDIF=262;
public final static short PRINT=263;
public final static short VOID=264;
public final static short RETURN=265;
public final static short COMP_MAYOR_IGUAL=266;
public final static short COMP_MENOR_IGUAL=267;
public final static short COMP_IGUAL=268;
public final static short COMP_DISTINTO=269;
public final static short CLASS=270;
public final static short WHILE=271;
public final static short DO=272;
public final static short INTERFACE=273;
public final static short IMPLEMENT=274;
public final static short INT=275;
public final static short ULONG=276;
public final static short FLOAT=277;
public final static short OPERADOR_MENOS=278;
public final static short YYERRCODE=256;
final static short yylhs[] = {                           -1,
    0,    0,    0,    0,    0,    1,    1,    2,    2,    2,
    4,    4,    4,    4,    4,    4,   11,   11,   12,   12,
   13,   13,   13,   13,   13,   10,   10,    9,    9,    9,
    9,    9,    9,    9,    9,    9,    9,    9,   15,   19,
   15,   15,   15,   15,   15,   15,   15,   15,   15,    8,
    8,    8,    8,    8,    8,    8,    8,    8,   14,   14,
   14,   20,   14,   14,   14,   14,   14,   16,   16,   16,
   16,   16,   16,   18,   18,   18,   18,   18,   18,   18,
   18,   18,   18,   18,   23,   23,   24,   24,   21,   21,
   21,   21,   22,   22,   22,   22,    7,    7,    7,    7,
    7,    7,    7,    6,    6,    6,    6,    6,    6,   28,
   28,    5,    5,    5,   26,   26,    3,    3,    3,    3,
   29,   29,   29,   35,   35,   32,   32,   36,   36,   37,
   37,   39,   39,   39,   39,   39,   40,   40,   40,   40,
   40,   40,   31,   41,   41,   30,   42,   42,   42,   42,
   42,   44,   44,   38,   38,   38,   38,   38,   38,   38,
   38,   43,   43,   43,   43,   43,   43,   43,   43,   43,
   43,   43,   43,   47,   47,   48,   48,   48,   46,   46,
   46,   45,   34,   34,   33,   33,   33,   33,   17,   17,
   17,   17,   49,   49,   49,   49,   49,   49,   27,   27,
   27,   50,   50,   50,   51,   51,   51,   51,   25,   25,
};
final static short yylen[] = {                            2,
    3,    2,    2,    2,    0,    1,    2,    1,    1,    2,
    1,    1,    1,    1,    1,    1,    1,    2,    1,    1,
    1,    1,    1,    1,    1,    2,    1,    7,    6,    6,
    6,    6,    3,    4,    2,    5,    4,    3,    7,    0,
   13,    6,    6,    3,    4,    2,    5,    4,    3,    9,
    7,    8,    6,    8,    6,    8,    8,    6,    9,    7,
    8,    0,   15,    6,    8,    8,    6,    1,    3,    2,
    2,    2,    1,    1,    1,    1,    3,    4,    5,    2,
    3,    2,    3,    2,    1,    2,    1,    1,    1,    2,
    1,    2,    1,    2,    1,    2,    3,    2,    2,    3,
    2,    3,    2,    5,    4,    7,    4,    3,    6,    1,
    3,    4,    3,    3,    1,    3,    1,    1,    1,    1,
    3,    2,    2,    2,    1,    4,    2,    1,    2,    2,
    1,    3,    2,    1,    2,    2,    2,    4,    1,    3,
    3,    2,    4,    1,    2,    2,    4,    3,    6,    5,
    2,    2,    1,    5,    4,    7,    6,    4,    3,    4,
    3,    4,    3,    5,    4,    3,    2,    3,    2,    4,
    3,    2,    1,    1,    2,    1,    1,    1,    1,    3,
    2,    2,    1,    3,    1,    1,    1,    1,    3,    2,
    2,    3,    1,    1,    1,    1,    1,    1,    3,    3,
    1,    3,    3,    1,    1,    2,    1,    3,    1,    2,
};
final static short yydefred[] = {                         0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,  185,
  186,  187,    0,    0,    0,    6,    8,    9,   11,   12,
   13,   14,   15,   16,    0,  117,  118,  119,  120,    0,
    0,    0,    0,    0,   10,    0,    0,  209,    0,    0,
   99,    0,  152,   26,    0,    0,    0,    0,   35,    0,
    0,    0,    0,    0,  124,    4,    0,    2,    7,    0,
    0,    0,  183,  123,    0,    0,  127,    0,    0,    0,
    0,  173,   19,   21,   22,   23,    0,    0,   17,   20,
   24,   25,  146,    0,  151,    0,  193,  194,  195,  196,
    0,    0,  197,  198,    0,  207,    0,    0,    0,  204,
  100,   97,  210,  102,    0,  140,   33,    0,   72,   91,
   89,    0,    0,    0,    0,    0,   71,   92,   90,    1,
    0,    0,  114,    0,  116,  121,    0,    0,    0,  128,
    0,    0,    0,    0,  144,    0,    0,    0,    0,   46,
    0,    0,   75,    0,    0,    0,  167,    0,    0,  169,
  176,  177,  178,    0,  174,  172,    0,   18,  188,  148,
    0,    0,  206,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,  138,    0,   69,   37,    0,   34,    0,
    0,  105,    0,    0,  112,  184,    0,    0,  126,  129,
  130,  136,  135,    0,  143,  145,    0,    0,   44,   84,
   95,   93,    0,    0,    0,    0,    0,   80,   96,    0,
   94,  163,    0,  166,    0,  171,  175,  168,    0,  182,
    0,  147,  179,    0,  208,    0,    0,    0,    0,    0,
    0,    0,    0,    0,  202,  203,    0,   36,    0,    0,
    0,    0,    0,  104,    0,  161,    0,  159,    0,  132,
    0,    0,   77,    0,   48,    0,   45,    0,    0,   81,
  165,  162,    0,  170,    0,    0,  150,  181,    0,   55,
    0,   58,    0,    0,   30,   31,    0,   32,    0,    0,
  155,    0,  160,  158,    0,    0,    0,    0,  115,   78,
   87,   88,    0,   85,   47,    0,    0,    0,  164,  149,
  180,    0,    0,    0,    0,   51,   28,    0,  106,    0,
  154,    0,   64,    0,   67,    0,    0,   79,   86,   42,
    0,   43,   54,   56,   57,    0,    0,  157,    0,    0,
    0,   60,    0,   39,    0,   50,  156,   65,   66,    0,
    0,    0,   59,    0,    0,    0,    0,    0,    0,    0,
    0,    0,   41,    0,   63,
};
final static short yydgoto[] = {                         14,
   15,   16,  151,   52,   74,   75,   76,   22,   23,   24,
   78,   79,  153,   81,   82,   53,   95,  145,  335,  333,
   54,  146,  293,  294,   96,   25,   97,  243,   26,   27,
   28,   29,   30,   65,   31,  129,  130,  131,  135,   32,
  136,   33,   83,   34,  223,  224,  154,  155,   98,   99,
  100,
};
final static short yysindex[] = {                       435,
  -14,    0,    8,  346, -216,   10, -232,   66, -195,    0,
    0,    0, 1242,    0, 1264,    0,    0,    0,    0,    0,
    0,    0,    0,    0,  -17,    0,    0,    0,    0,  -38,
  -11,  -25, 1100,   68,    0,  963,   41,    0,   72, -133,
    0,   85,    0,    0, -140, -103,   52, 1307,    0,  969,
    0,    0,  -40, 1331,    0,    0, 1286,    0,    0,   25,
   23,  -98,    0,    0,  -37,  -87,    0,  -70,  131,  941,
 1353,    0,    0,    0,    0,    0, 1375, 1397,    0,    0,
    0,    0,    0,  216,    0,  -92,    0,    0,    0,    0,
  125, 1198,    0,    0,  139,    0,  975,  125,  -10,    0,
    0,    0,    0,    0,  -66,    0,    0,  982,    0,    0,
    0, 1419,  159,  169,   60,  982,    0,    0,    0,    0,
  171,  589,    0,   94,    0,    0,  -32,  -35, -108,    0,
  186,  189,  194,  -16,    0,  426, 1035,  208, 1659,    0,
 1041,    0,    0,    0,  -36, 1440,    0, 1461, 1484,    0,
    0,    0,    0, 1506,    0,    0, 1528,    0,    0,    0,
   -3,   -6,    0,   37,  -93,  995,  125,  125,  125,  125,
   87,  125,  125,    0,  179,    0,    0,  212,    0, 1059,
  222,    0,  125,  221,    0,    0,  -29,  394,    0,    0,
    0,    0,    0,   -8,    0,    0, 1220,  231,    0,    0,
    0,    0, 1550,  240,  245,   67,  982,    0,    0,  163,
    0,    0, 1573,    0, 1594,    0,    0,    0, 1615,    0,
  479,    0,    0,   32,    0, 1198,  248, 1198,  255,  -88,
  -10,  -10,   87,   87,    0,    0,  270,    0,  274,  286,
  300,   87,  -13,    0,  468,    0,  307,    0,  309,    0,
   84, 1072,    0,  -82,    0,  316,    0, 1162,  363,    0,
    0,    0, 1637,    0,   45,  479,    0,    0,  144,    0,
  145,    0, 1122,  349,    0,    0,  366,    0,  125,  367,
    0,   78,    0,    0,  382, 1220,  387,  -53,    0,    0,
    0,    0, 1018,    0,    0,  390,  401,  400,    0,    0,
    0,  406,  410,  413,  183,    0,    0,   87,    0,  479,
    0,  315,    0,  217,    0, 1177,  434,    0,    0,    0,
  438,    0,    0,    0,    0,  439,  361,    0,  446,  459,
  242,    0,  271,    0,  230,    0,    0,    0,    0,  461,
  492,  237,    0,  498,  502, 1220,  982,  291,  513, 1220,
  512,  295,    0,  515,    0,
};
final static short yyrindex[] = {                       560,
    0,   59,    0,    0,  177,  124,  440,    0,   28,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,  176,    0,  224,    0,
    0,  273,    0,    0,  450,  451,    0,    0,    0,    0,
  501,  700,    0,    0,    0,    0,  579,    0,    0,    0,
    0,    0,    0,    0,  305,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,  101,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,  152,    0,
    0,    0,    0,    0,  462,    0,    0,    0,    0,    0,
    0,    5,  352,    0,    0,    0,    0,    0,    0,    0,
  403,    0,    0,  458,    0,    0,    0,    0,    0,    0,
 -106,  327,  644,    0,    0,    0,    0,    0,    0,    0,
    0,  797,    0,  869,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,  545,
  548,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,  524,    0,    0,    0,    0,    0,    0,
    0,    0,    0,  673,    0,    0,    0,    0,    0,    0,
    0,    0,   35,  891,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
  199,  250,  552,  554,    0,    0,    0,    0,    0,    0,
    0,   15,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,  339,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,  547,    0,    0,  571,    0,    0,  599,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,   43,    0,    0,
    0,    0,    0,    0,    0,    0,  336,    0,    0,    0,
  326,    0,    0,    0,    0,  621,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,  914,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,
};
final static short yygindex[] = {                         0,
  593,   -7,    1,  540,  640,  887,  899,    0,    0,  -31,
  531,  -68,  -18,    0,    0,  -71,  -47, 1067,    0,    0,
  559,  480,    0,  338,  616,    0,  -34,    0,    0,  -48,
    0,    0,  781,  507,    0,    0,  506,    0,  508,    0,
    0,    0,    0,    0,   13, -208, -124, -136,  546,  136,
  161,
};
final static int YYTABLESIZE=1936;
static short yytable[];
static { yytable();}
static void yytable(){
yytable = new short[]{                        116,
   17,   77,  114,  207,  188,   64,  126,   59,   51,  158,
  245,  246,  265,   17,   80,   17,  189,  217,  131,  133,
  165,  127,   60,  213,   45,  122,  124,  280,   62,   35,
  279,  172,  219,   73,  222,  250,  173,  221,  143,  148,
   43,   46,  290,   61,   70,  152,  157,   36,  110,   59,
  127,  144,   80,   44,  118,  110,  164,   17,  110,   80,
  175,   55,   91,  171,   91,  121,  123,   40,  181,   40,
  142,   73,  267,  312,   82,  266,  217,  225,   73,  167,
  158,  168,  217,  111,  101,  300,  111,  133,  266,  198,
  263,  108,   51,  205,  230,  107,  162,   68,  115,  180,
  205,  327,  188,  179,  115,   50,  258,   84,   85,   49,
  257,   66,  118,   67,  210,  102,  152,  215,  311,  115,
  202,  310,  152,   27,  103,  152,  217,  211,  104,  167,
   80,  168,  240,  105,  233,  234,  167,  185,  168,  201,
  205,  205,  205,  205,  205,  205,  209,  205,  242,   73,
  125,  201,  125,  106,  269,  128,  271,  131,  125,  259,
  205,  205,  205,   27,   91,  143,   51,  226,  227,   40,
  137,  254,  273,  274,  289,  101,  128,   69,  144,  166,
    4,  152,    6,  152,  211,  163,  132,  152,   48,   70,
  174,  201,  201,    5,  201,  201,  201,  142,  199,  247,
  249,  305,  177,  209,   10,   11,   12,  316,  317,  178,
  297,  201,  201,  201,  182,  101,  153,  153,   63,  237,
  143,  187,  291,   98,  186,  205,   51,  159,   51,  191,
  115,  152,  192,  144,  206,  292,  268,  193,  199,  199,
   63,  199,  199,  199,  308,   10,   11,   12,   27,  200,
  159,  199,  142,  220,  143,  238,  160,  282,  199,  199,
  199,  291,  241,   98,  244,   70,   70,  144,   10,   11,
   12,  252,  103,   51,  292,   70,  201,  268,  301,   86,
   38,   86,   38,  255,  143,  256,  142,  260,  159,  200,
  200,  270,  200,  200,  200,   82,   82,  144,  272,  349,
  101,  159,  231,  232,  122,   82,   10,   11,   12,  200,
  200,  200,  103,  275,  143,  188,  142,  276,  143,   10,
   11,   12,    2,  199,  268,    3,  277,  144,    4,    5,
    6,  144,  235,  236,  159,    7,   47,    8,    9,  268,
   10,   11,   12,  278,  122,  285,  142,  283,   98,  284,
  142,   38,   10,   11,   12,  328,  205,  205,  266,  295,
  205,  205,  205,  205,  205,  205,  205,  205,  205,  205,
  205,  205,  205,  205,  200,  205,  205,  205,   83,   27,
   27,   86,   38,   27,   27,   27,   27,   27,   27,   41,
   40,   38,  306,   27,   27,   27,   27,  103,   27,   27,
   27,  337,  108,  298,  266,  302,  303,  201,  201,  307,
  309,  201,  201,  201,  201,  201,  201,  201,  201,  201,
  201,  201,  201,  201,  201,  313,  201,  201,  201,  122,
  315,  101,  101,  320,  248,  101,  101,  101,  101,  101,
  101,  321,  108,  322,  326,  101,  101,  101,  101,  323,
  101,  101,  101,  324,  199,  199,  325,  113,  199,  199,
  199,  199,  199,  199,  199,  199,  199,  199,  199,  199,
  199,  199,  159,  199,  199,  199,   38,  332,  329,   98,
   98,  334,  336,   98,   98,   98,   98,   98,   98,  338,
   10,   11,   12,   98,   98,   98,   98,  113,   98,   98,
   98,  342,  339,  340,  343,  200,  200,  345,  281,  200,
  200,  200,  200,  200,  200,  200,  200,  200,  200,  200,
  200,  200,  200,  107,  200,  200,  200,  108,  103,  103,
  341,  344,  103,  103,  103,  103,  103,  103,  346,   18,
   73,  347,  103,  103,  103,  103,   53,  103,  103,  103,
  195,  350,   18,  351,   18,  353,  354,   13,  355,    5,
  122,  122,  139,  107,  122,  122,  122,  122,  122,  122,
   29,  159,  137,  142,  122,  122,  122,  122,    3,  122,
  122,  122,  113,  188,  141,  190,   53,  111,  191,   10,
   11,   12,  192,  119,  189,   62,   18,   40,  109,   83,
   83,  149,   37,   38,   39,   57,  112,   38,   38,   83,
   29,   38,   38,   38,   38,   38,   38,  159,  203,   42,
   52,   38,   38,   38,   38,   91,   38,   38,   38,  184,
  319,  167,  183,  168,  190,   10,   11,   12,  109,   19,
  194,    0,  170,  196,    0,    0,    0,   19,  107,    0,
  159,  119,   19,    0,   19,    0,    0,    0,  108,  108,
   52,    0,  108,  108,  108,  108,  108,  108,   10,   11,
   12,   53,  108,  108,  108,  108,    0,  108,  108,  108,
    0,    0,  132,    0,    0,    0,    0,   19,    0,    5,
    1,    2,    0,   19,    3,   29,   19,    4,    5,    6,
   10,   11,   12,    0,    7,    0,    8,    9,    0,   10,
   11,   12,    0,  113,  113,    0,    0,  113,  113,  113,
  113,  113,  113,  109,  159,    0,    0,  113,  113,  113,
  113,   19,  113,  113,  113,  159,    0,    0,    0,   68,
    0,    0,   10,   11,   12,   52,    0,    0,    0,    0,
    0,   19,    0,   10,   11,   12,    0,   91,    0,    0,
   91,   73,   73,   91,   91,   91,    0,    0,  134,    0,
   91,   73,   91,   91,    0,   91,   91,   91,    0,  107,
  107,    0,    0,  107,  107,  107,  107,  107,  107,    0,
    0,    0,    0,  107,  107,  107,  107,  133,  107,  107,
  107,    0,   53,   53,    0,   19,   53,   53,   53,   53,
   53,   53,    0,    0,    0,    0,   53,   53,   53,   53,
    0,   53,   53,   53,   89,    0,   29,   29,    0,    0,
   29,   29,   29,   29,   29,   29,   76,    0,    0,    0,
   29,   29,   29,   29,    0,   29,   29,   29,  134,    0,
    0,    0,    0,    0,  109,  109,    0,    0,  109,  109,
  109,  109,  109,  109,  161,   19,    0,   19,  109,  109,
  109,  109,    0,  109,  109,  109,   52,   52,    0,    0,
   52,   52,   52,   52,   52,   52,   20,    0,    0,    0,
   52,   52,   52,   52,   20,   52,   52,   52,   21,   20,
  134,   20,    0,    0,    0,    0,   21,  134,   74,    0,
    0,   21,   19,   21,    0,    0,  134,    0,  134,  134,
  134,   95,    0,    0,    0,    0,    0,    0,    0,  133,
   49,    0,    0,    0,   20,    0,  133,    0,    0,    0,
   20,    0,  161,   20,    0,    0,   21,  133,  133,  133,
    0,    0,   21,   61,    0,   21,   89,    0,    0,   89,
   68,   68,   89,   89,   89,    0,    0,  161,  161,   89,
   68,   89,   89,    0,   89,   89,   89,    0,   20,    0,
  141,    0,    0,    0,  140,    0,    0,    0,    0,    0,
   21,    0,    0,   93,    0,    0,    0,    0,   20,    0,
    0,  161,   91,   92,  161,    0,    0,   40,   91,  113,
   21,    0,    0,   40,    0,   49,    0,  167,    0,  168,
    0,   91,   94,    0,   93,  161,   40,    0,   94,    0,
   93,    0,    0,    0,   94,  169,   93,    0,   61,    0,
    0,   94,    0,   93,    0,  161,  161,    0,    0,    0,
    0,    0,   20,   95,    0,    0,   95,   76,   76,   95,
   95,   95,  161,  139,   21,    0,   95,   76,   95,   95,
    0,   95,   95,   95,   91,  197,    0,    0,    0,   40,
   91,  204,    0,    0,    0,   40,    0,    0,    0,    0,
  161,    0,  161,    0,   94,    0,   93,    0,   91,  239,
   94,    0,   93,   40,    0,    0,    0,  161,    0,    0,
    0,    0,   20,    0,   20,    0,    0,   48,   94,    0,
   93,    0,    0,    0,   21,   93,   21,    0,   93,   74,
   74,   93,   93,   93,    0,    0,    0,    0,   93,   74,
   93,   93,  318,   93,   93,   93,    0,   49,    0,    0,
   49,   49,   49,   49,   49,   49,    0,    0,    0,   20,
   49,   49,   49,   49,    0,   49,   49,   49,    0,    0,
   61,   21,    0,   61,   61,   61,   61,   61,   61,    0,
    0,    0,    0,   61,   61,   61,   61,    0,   61,   61,
   61,    0,    0,    0,  139,    0,    0,    2,    0,    0,
   69,   91,  296,    4,    5,    6,   40,    0,    0,    0,
    7,  138,   70,    9,    0,   10,   11,   12,    0,   86,
   38,   94,   71,   93,   72,   86,   38,    0,   87,   88,
   89,   90,    0,    0,   87,   88,   89,   90,   86,   38,
   87,   88,   89,   90,   48,    0,    0,   87,   88,   89,
   90,    2,    0,    0,    3,  228,  229,    4,    5,    6,
    0,    0,    0,  251,    7,    0,    8,    9,    0,   10,
   11,   12,    0,    0,  289,    0,    0,   69,    0,    0,
    4,    0,    6,    0,    0,    0,    0,    0,    0,   70,
    0,   86,   38,    0,    0,    0,    0,   86,   38,  139,
   87,   88,   89,   90,    0,    0,   87,   88,   89,   90,
    0,    0,    0,    0,    0,   86,   38,    0,  288,    0,
   48,    0,    0,    0,   87,   88,   89,   90,    2,    0,
    0,   69,  286,  287,    4,    5,    6,    0,    0,    0,
    0,    7,  139,   70,    9,    0,   10,   11,   12,    0,
    0,    0,  314,    0,    0,    0,    2,    0,    0,   69,
    0,    0,    4,    5,    6,    0,   56,    0,    0,    7,
    0,   70,    9,    0,   10,   11,   12,    0,    2,    0,
    0,    3,  331,  304,    4,    5,    6,    0,   58,    0,
    0,    7,    0,    8,    9,    0,   10,   11,   12,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
  120,    0,  348,    0,    0,    0,  352,    0,   86,   38,
    0,    0,    0,    0,    0,    0,    0,   87,   88,   89,
   90,  109,    0,    2,    0,    0,   69,    0,  330,    4,
    5,    6,    0,    0,    0,    0,    7,    0,   70,    9,
    0,   10,   11,   12,    2,  117,    0,    3,    0,    0,
    4,    5,    6,    0,    0,    0,    0,    7,    0,    8,
    9,    0,   10,   11,   12,    0,    2,  147,    0,   69,
    0,    0,    4,    5,    6,    0,    0,    0,    0,    7,
    0,   70,    9,    0,   10,   11,   12,    1,    2,  150,
    0,    3,    0,    0,    4,    5,    6,    0,    0,    0,
    0,    7,    0,    8,    9,    0,   10,   11,   12,    1,
    2,  156,    0,    3,    0,    0,    4,    5,    6,    0,
    0,    0,    0,    7,    0,    8,    9,    0,   10,   11,
   12,    1,    2,  176,    0,    3,    0,    0,    4,    5,
    6,    0,    0,    0,    0,    7,    0,    8,    9,    0,
   10,   11,   12,    2,  208,    0,    3,    0,    0,    4,
    5,    6,    0,    0,    0,    0,    7,    0,    8,    9,
    0,   10,   11,   12,    0,  212,    0,    2,    0,    0,
    3,    0,    0,    4,    5,    6,    0,    0,    0,    0,
    7,    0,    8,    9,    0,   10,   11,   12,  214,    2,
    0,    0,   69,    0,    0,    4,    5,    6,    0,    0,
    0,    0,    7,    0,   70,    9,    0,   10,   11,   12,
  216,    2,    0,    0,   69,    0,    0,    4,    5,    6,
    0,    0,    0,    0,    7,    0,   70,    9,    0,   10,
   11,   12,  218,    2,    0,    0,   69,    0,    0,    4,
    5,    6,    0,    0,    0,    0,    7,    0,   70,    9,
    0,   10,   11,   12,  253,    2,    0,    0,    3,    0,
    0,    4,    5,    6,    0,    0,    0,    0,    7,    0,
    8,    9,    0,   10,   11,   12,    2,  261,    0,   69,
    0,    0,    4,    5,    6,    0,    0,    0,    0,    7,
    0,   70,    9,    0,   10,   11,   12,    2,  262,    0,
   69,    0,    0,    4,    5,    6,    0,    0,    0,    0,
    7,    0,   70,    9,    0,   10,   11,   12,    0,  264,
    2,    0,    0,   69,    0,    0,    4,    5,    6,    0,
    0,    0,    0,    7,    0,   70,    9,    0,   10,   11,
   12,  299,    2,    0,    0,   69,    0,    0,    4,    5,
    6,    0,    0,    0,    0,    7,    0,   70,    9,    0,
   10,   11,   12,  200,    2,    0,    0,   69,    0,    0,
    4,    5,    6,    0,    0,    0,    0,    7,    0,   70,
    9,    0,   10,   11,   12,    0,    2,    0,    0,   69,
    0,    0,    4,    5,    6,    0,    0,    0,    0,    7,
    0,   70,    9,    0,   10,   11,   12,    0,    0,    2,
    0,    0,   69,    0,    0,    4,    5,    6,    0,    0,
    0,    0,    7,    0,   70,    9,    0,   10,   11,   12,
    2,    0,    0,   69,    0,    0,    4,    5,    6,    0,
    0,    0,    0,    7,    0,   70,    9,    0,   10,   11,
   12,    2,    0,    0,   69,    0,    0,    4,    5,    6,
    0,    0,    0,    0,    7,    0,   70,    9,    0,   10,
   11,   12,    0,    2,    0,    0,   69,    0,    0,    4,
    5,    6,    0,    0,    0,    0,    7,    0,   70,    9,
    0,   10,   11,   12,    0,    2,    0,    0,   69,    0,
    0,    4,    5,    0,    0,    0,    0,    0,    7,    0,
   70,    9,    0,   10,   11,   12,
};
}
static short yycheck[];
static { yycheck(); }
static void yycheck() {
yycheck = new short[] {                         40,
    0,   33,   50,   40,   40,   44,   44,   15,    8,   78,
   40,   41,  221,   13,   33,   15,  125,  154,  125,   68,
   92,   59,   40,  148,  257,   60,   61,   41,   46,   44,
   44,   42,  157,   33,   41,   44,   47,   44,   70,   71,
  257,  274,  125,   61,   40,   77,   78,   40,   48,   57,
   59,   70,   71,   44,   54,   41,   91,   57,   44,   78,
  108,  257,   40,   98,   40,   41,   44,   45,  116,   45,
   70,   71,   41,  282,   40,   44,  213,   41,   78,   43,
  149,   45,  219,   41,   44,   41,   44,  136,   44,  137,
  215,   40,   92,  141,  166,   44,   84,  123,   40,   40,
    0,  310,   44,   44,   46,   40,   40,   40,   41,   44,
   44,  123,  112,  125,  146,   44,  148,  149,   41,   61,
  139,   44,  154,    0,  258,  157,  263,  146,   44,   43,
  149,   45,  180,  274,  169,  170,   43,   44,   45,  139,
   40,   41,   42,   43,   44,   45,  146,   47,  183,  149,
  123,    0,  125,  257,  226,  264,  228,  264,  257,  207,
   60,   61,   62,   40,   40,  197,  166,  261,  262,   45,
   40,  203,  261,  262,  257,    0,  264,  260,  197,   41,
  263,  213,  265,  215,  203,  278,  257,  219,  123,  272,
  257,   40,   41,  264,   43,   44,   45,  197,    0,  187,
  188,  273,   44,  203,  275,  276,  277,  261,  262,   41,
  258,   60,   61,   62,   44,   40,   40,   41,  257,   41,
  252,  257,  254,    0,  257,  125,  226,  257,  228,   44,
  271,  263,   44,  252,  271,  254,  224,   44,   40,   41,
  257,   43,   44,   45,  279,  275,  276,  277,  125,    0,
  257,   44,  252,  257,  286,   44,   41,  245,   60,   61,
   62,  293,   41,   40,   44,  261,  262,  286,  275,  276,
  277,   41,    0,  273,  293,  271,  125,  265,  266,  257,
  258,  257,  258,   44,  316,   41,  286,  125,  257,   40,
   41,   44,   43,   44,   45,  261,  262,  316,   44,  347,
  125,  257,  167,  168,    0,  271,  275,  276,  277,   60,
   61,   62,   40,   44,  346,  257,  316,   44,  350,  275,
  276,  277,  257,  125,  312,  260,   41,  346,  263,  264,
  265,  350,  172,  173,  257,  270,  271,  272,  273,  327,
  275,  276,  277,   44,   40,  262,  346,   41,  125,   41,
  350,    0,  275,  276,  277,   41,  256,  257,   44,   44,
  260,  261,  262,  263,  264,  265,  266,  267,  268,  269,
  270,  271,  272,  273,  125,  275,  276,  277,   40,  256,
  257,  257,  258,  260,  261,  262,  263,  264,  265,   44,
   45,   40,   44,  270,  271,  272,  273,  125,  275,  276,
  277,   41,    0,   41,   44,  262,  262,  256,  257,   44,
   44,  260,  261,  262,  263,  264,  265,  266,  267,  268,
  269,  270,  271,  272,  273,   44,  275,  276,  277,  125,
   44,  256,  257,   44,   41,  260,  261,  262,  263,  264,
  265,   41,   40,   44,  262,  270,  271,  272,  273,   44,
  275,  276,  277,   44,  256,  257,   44,    0,  260,  261,
  262,  263,  264,  265,  266,  267,  268,  269,  270,  271,
  272,  273,  257,  275,  276,  277,  125,   44,  262,  256,
  257,   44,   44,  260,  261,  262,  263,  264,  265,   44,
  275,  276,  277,  270,  271,  272,  273,   40,  275,  276,
  277,  272,   44,  262,   44,  256,  257,  271,   41,  260,
  261,  262,  263,  264,  265,  266,  267,  268,  269,  270,
  271,  272,  273,    0,  275,  276,  277,  125,  256,  257,
  260,   40,  260,  261,  262,  263,  264,  265,   41,    0,
   40,   40,  270,  271,  272,  273,    0,  275,  276,  277,
  125,  261,   13,   41,   15,   44,  262,  123,   44,    0,
  256,  257,  123,   40,  260,  261,  262,  263,  264,  265,
    0,  257,  123,  123,  270,  271,  272,  273,    0,  275,
  276,  277,  125,  257,  123,   41,   40,   48,   41,  275,
  276,  277,   41,   54,   41,  260,   57,  272,    0,  261,
  262,   71,  257,  258,  259,   13,   48,  256,  257,  271,
   40,  260,  261,  262,  263,  264,  265,  257,  139,    4,
    0,  270,  271,  272,  273,  125,  275,  276,  277,   41,
  293,   43,   44,   45,  129,  275,  276,  277,   40,    0,
  134,   -1,   97,  136,   -1,   -1,   -1,    8,  125,   -1,
  257,  112,   13,   -1,   15,   -1,   -1,   -1,  256,  257,
   40,   -1,  260,  261,  262,  263,  264,  265,  275,  276,
  277,  125,  270,  271,  272,  273,   -1,  275,  276,  277,
   -1,   -1,  257,   -1,   -1,   -1,   -1,   48,   -1,  264,
  256,  257,   -1,   54,  260,  125,   57,  263,  264,  265,
  275,  276,  277,   -1,  270,   -1,  272,  273,   -1,  275,
  276,  277,   -1,  256,  257,   -1,   -1,  260,  261,  262,
  263,  264,  265,  125,  257,   -1,   -1,  270,  271,  272,
  273,   92,  275,  276,  277,  257,   -1,   -1,   -1,   40,
   -1,   -1,  275,  276,  277,  125,   -1,   -1,   -1,   -1,
   -1,  112,   -1,  275,  276,  277,   -1,  257,   -1,   -1,
  260,  261,  262,  263,  264,  265,   -1,   -1,  125,   -1,
  270,  271,  272,  273,   -1,  275,  276,  277,   -1,  256,
  257,   -1,   -1,  260,  261,  262,  263,  264,  265,   -1,
   -1,   -1,   -1,  270,  271,  272,  273,  125,  275,  276,
  277,   -1,  256,  257,   -1,  166,  260,  261,  262,  263,
  264,  265,   -1,   -1,   -1,   -1,  270,  271,  272,  273,
   -1,  275,  276,  277,  125,   -1,  256,  257,   -1,   -1,
  260,  261,  262,  263,  264,  265,   40,   -1,   -1,   -1,
  270,  271,  272,  273,   -1,  275,  276,  277,   68,   -1,
   -1,   -1,   -1,   -1,  256,  257,   -1,   -1,  260,  261,
  262,  263,  264,  265,   84,  226,   -1,  228,  270,  271,
  272,  273,   -1,  275,  276,  277,  256,  257,   -1,   -1,
  260,  261,  262,  263,  264,  265,    0,   -1,   -1,   -1,
  270,  271,  272,  273,    8,  275,  276,  277,    0,   13,
  257,   15,   -1,   -1,   -1,   -1,    8,  264,   40,   -1,
   -1,   13,  273,   15,   -1,   -1,  136,   -1,  275,  276,
  277,  125,   -1,   -1,   -1,   -1,   -1,   -1,   -1,  257,
   40,   -1,   -1,   -1,   48,   -1,  264,   -1,   -1,   -1,
   54,   -1,  162,   57,   -1,   -1,   48,  275,  276,  277,
   -1,   -1,   54,   40,   -1,   57,  257,   -1,   -1,  260,
  261,  262,  263,  264,  265,   -1,   -1,  187,  188,  270,
  271,  272,  273,   -1,  275,  276,  277,   -1,   92,   -1,
   40,   -1,   -1,   -1,   44,   -1,   -1,   -1,   -1,   -1,
   92,   -1,   -1,  125,   -1,   -1,   -1,   -1,  112,   -1,
   -1,  221,   40,   41,  224,   -1,   -1,   45,   40,   41,
  112,   -1,   -1,   45,   -1,  125,   -1,   43,   -1,   45,
   -1,   40,   60,   -1,   62,  245,   45,   -1,   60,   -1,
   62,   -1,   -1,   -1,   60,   61,   62,   -1,  125,   -1,
   -1,   60,   -1,   62,   -1,  265,  266,   -1,   -1,   -1,
   -1,   -1,  166,  257,   -1,   -1,  260,  261,  262,  263,
  264,  265,  282,  123,  166,   -1,  270,  271,  272,  273,
   -1,  275,  276,  277,   40,   41,   -1,   -1,   -1,   45,
   40,   41,   -1,   -1,   -1,   45,   -1,   -1,   -1,   -1,
  310,   -1,  312,   -1,   60,   -1,   62,   -1,   40,   41,
   60,   -1,   62,   45,   -1,   -1,   -1,  327,   -1,   -1,
   -1,   -1,  226,   -1,  228,   -1,   -1,  123,   60,   -1,
   62,   -1,   -1,   -1,  226,  257,  228,   -1,  260,  261,
  262,  263,  264,  265,   -1,   -1,   -1,   -1,  270,  271,
  272,  273,  125,  275,  276,  277,   -1,  257,   -1,   -1,
  260,  261,  262,  263,  264,  265,   -1,   -1,   -1,  273,
  270,  271,  272,  273,   -1,  275,  276,  277,   -1,   -1,
  257,  273,   -1,  260,  261,  262,  263,  264,  265,   -1,
   -1,   -1,   -1,  270,  271,  272,  273,   -1,  275,  276,
  277,   -1,   -1,   -1,  123,   -1,   -1,  257,   -1,   -1,
  260,   40,   41,  263,  264,  265,   45,   -1,   -1,   -1,
  270,  271,  272,  273,   -1,  275,  276,  277,   -1,  257,
  258,   60,  123,   62,  125,  257,  258,   -1,  266,  267,
  268,  269,   -1,   -1,  266,  267,  268,  269,  257,  258,
  266,  267,  268,  269,  123,   -1,   -1,  266,  267,  268,
  269,  257,   -1,   -1,  260,  261,  262,  263,  264,  265,
   -1,   -1,   -1,  197,  270,   -1,  272,  273,   -1,  275,
  276,  277,   -1,   -1,  257,   -1,   -1,  260,   -1,   -1,
  263,   -1,  265,   -1,   -1,   -1,   -1,   -1,   -1,  272,
   -1,  257,  258,   -1,   -1,   -1,   -1,  257,  258,  123,
  266,  267,  268,  269,   -1,   -1,  266,  267,  268,  269,
   -1,   -1,   -1,   -1,   -1,  257,  258,   -1,  252,   -1,
  123,   -1,   -1,   -1,  266,  267,  268,  269,  257,   -1,
   -1,  260,  261,  262,  263,  264,  265,   -1,   -1,   -1,
   -1,  270,  123,  272,  273,   -1,  275,  276,  277,   -1,
   -1,   -1,  286,   -1,   -1,   -1,  257,   -1,   -1,  260,
   -1,   -1,  263,  264,  265,   -1,  125,   -1,   -1,  270,
   -1,  272,  273,   -1,  275,  276,  277,   -1,  257,   -1,
   -1,  260,  316,  262,  263,  264,  265,   -1,  125,   -1,
   -1,  270,   -1,  272,  273,   -1,  275,  276,  277,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
  125,   -1,  346,   -1,   -1,   -1,  350,   -1,  257,  258,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,  266,  267,  268,
  269,  125,   -1,  257,   -1,   -1,  260,   -1,  262,  263,
  264,  265,   -1,   -1,   -1,   -1,  270,   -1,  272,  273,
   -1,  275,  276,  277,  257,  125,   -1,  260,   -1,   -1,
  263,  264,  265,   -1,   -1,   -1,   -1,  270,   -1,  272,
  273,   -1,  275,  276,  277,   -1,  257,  125,   -1,  260,
   -1,   -1,  263,  264,  265,   -1,   -1,   -1,   -1,  270,
   -1,  272,  273,   -1,  275,  276,  277,  256,  257,  125,
   -1,  260,   -1,   -1,  263,  264,  265,   -1,   -1,   -1,
   -1,  270,   -1,  272,  273,   -1,  275,  276,  277,  256,
  257,  125,   -1,  260,   -1,   -1,  263,  264,  265,   -1,
   -1,   -1,   -1,  270,   -1,  272,  273,   -1,  275,  276,
  277,  256,  257,  125,   -1,  260,   -1,   -1,  263,  264,
  265,   -1,   -1,   -1,   -1,  270,   -1,  272,  273,   -1,
  275,  276,  277,  257,  125,   -1,  260,   -1,   -1,  263,
  264,  265,   -1,   -1,   -1,   -1,  270,   -1,  272,  273,
   -1,  275,  276,  277,   -1,  125,   -1,  257,   -1,   -1,
  260,   -1,   -1,  263,  264,  265,   -1,   -1,   -1,   -1,
  270,   -1,  272,  273,   -1,  275,  276,  277,  125,  257,
   -1,   -1,  260,   -1,   -1,  263,  264,  265,   -1,   -1,
   -1,   -1,  270,   -1,  272,  273,   -1,  275,  276,  277,
  125,  257,   -1,   -1,  260,   -1,   -1,  263,  264,  265,
   -1,   -1,   -1,   -1,  270,   -1,  272,  273,   -1,  275,
  276,  277,  125,  257,   -1,   -1,  260,   -1,   -1,  263,
  264,  265,   -1,   -1,   -1,   -1,  270,   -1,  272,  273,
   -1,  275,  276,  277,  125,  257,   -1,   -1,  260,   -1,
   -1,  263,  264,  265,   -1,   -1,   -1,   -1,  270,   -1,
  272,  273,   -1,  275,  276,  277,  257,  125,   -1,  260,
   -1,   -1,  263,  264,  265,   -1,   -1,   -1,   -1,  270,
   -1,  272,  273,   -1,  275,  276,  277,  257,  125,   -1,
  260,   -1,   -1,  263,  264,  265,   -1,   -1,   -1,   -1,
  270,   -1,  272,  273,   -1,  275,  276,  277,   -1,  125,
  257,   -1,   -1,  260,   -1,   -1,  263,  264,  265,   -1,
   -1,   -1,   -1,  270,   -1,  272,  273,   -1,  275,  276,
  277,  125,  257,   -1,   -1,  260,   -1,   -1,  263,  264,
  265,   -1,   -1,   -1,   -1,  270,   -1,  272,  273,   -1,
  275,  276,  277,  125,  257,   -1,   -1,  260,   -1,   -1,
  263,  264,  265,   -1,   -1,   -1,   -1,  270,   -1,  272,
  273,   -1,  275,  276,  277,   -1,  257,   -1,   -1,  260,
   -1,   -1,  263,  264,  265,   -1,   -1,   -1,   -1,  270,
   -1,  272,  273,   -1,  275,  276,  277,   -1,   -1,  257,
   -1,   -1,  260,   -1,   -1,  263,  264,  265,   -1,   -1,
   -1,   -1,  270,   -1,  272,  273,   -1,  275,  276,  277,
  257,   -1,   -1,  260,   -1,   -1,  263,  264,  265,   -1,
   -1,   -1,   -1,  270,   -1,  272,  273,   -1,  275,  276,
  277,  257,   -1,   -1,  260,   -1,   -1,  263,  264,  265,
   -1,   -1,   -1,   -1,  270,   -1,  272,  273,   -1,  275,
  276,  277,   -1,  257,   -1,   -1,  260,   -1,   -1,  263,
  264,  265,   -1,   -1,   -1,   -1,  270,   -1,  272,  273,
   -1,  275,  276,  277,   -1,  257,   -1,   -1,  260,   -1,
   -1,  263,  264,   -1,   -1,   -1,   -1,   -1,  270,   -1,
  272,  273,   -1,  275,  276,  277,
};
}
final static short YYFINAL=14;
final static short YYMAXTOKEN=278;
final static String yyname[] = {
"end-of-file",null,null,null,null,null,null,null,null,null,null,null,null,null,
null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,
null,null,null,null,null,null,null,null,null,null,"'('","')'","'*'","'+'","','",
"'-'","'.'","'/'",null,null,null,null,null,null,null,null,null,null,null,"';'",
"'<'","'='","'>'",null,null,null,null,null,null,null,null,null,null,null,null,
null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,
null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,
null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,
"'{'",null,"'}'",null,null,null,null,null,null,null,null,null,null,null,null,
null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,
null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,
null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,
null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,
null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,
null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,
null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,
null,null,null,null,null,null,null,"ID","CTE","CADENA","IF","ELSE","ENDIF",
"PRINT","VOID","RETURN","COMP_MAYOR_IGUAL","COMP_MENOR_IGUAL","COMP_IGUAL",
"COMP_DISTINTO","CLASS","WHILE","DO","INTERFACE","IMPLEMENT","INT","ULONG",
"FLOAT","OPERADOR_MENOS",
};
final static String yyrule[] = {
"$accept : programa",
"programa : '{' sentencias '}'",
"programa : sentencias '}'",
"programa : '{' sentencias",
"programa : '{' '}'",
"programa :",
"sentencias : sentencia",
"sentencias : sentencias sentencia",
"sentencia : sentencia_declarativa",
"sentencia : sentencia_ejecutable",
"sentencia : error ','",
"sentencia_ejecutable : sentencia_asignacion",
"sentencia_ejecutable : sentencia_invocacion_funcion",
"sentencia_ejecutable : sentencia_imprimir",
"sentencia_ejecutable : sentencia_seleccion",
"sentencia_ejecutable : sentencia_iterativa_do_while",
"sentencia_ejecutable : sentencia_return",
"sentencias_funcion : sentencia_funcion",
"sentencias_funcion : sentencias_funcion sentencia_funcion",
"sentencia_funcion : sentencia_declarativa",
"sentencia_funcion : sentencia_ejecutable_funcion",
"sentencia_ejecutable_funcion : sentencia_asignacion",
"sentencia_ejecutable_funcion : sentencia_invocacion_funcion",
"sentencia_ejecutable_funcion : sentencia_imprimir",
"sentencia_ejecutable_funcion : sentencia_seleccion_funcion",
"sentencia_ejecutable_funcion : sentencia_iterativa_do_while_funcion",
"sentencia_return : RETURN ','",
"sentencia_return : RETURN",
"sentencia_iterativa_do_while : DO bloque_sentencias_ejecutables WHILE '(' condicion ')' ','",
"sentencia_iterativa_do_while : DO bloque_sentencias_ejecutables WHILE '(' condicion ')'",
"sentencia_iterativa_do_while : DO WHILE '(' condicion ')' ','",
"sentencia_iterativa_do_while : DO bloque_sentencias_ejecutables WHILE '(' ')' ','",
"sentencia_iterativa_do_while : DO bloque_sentencias_ejecutables '(' condicion ')' ','",
"sentencia_iterativa_do_while : DO WHILE ','",
"sentencia_iterativa_do_while : DO bloque_sentencias_ejecutables WHILE ','",
"sentencia_iterativa_do_while : DO ','",
"sentencia_iterativa_do_while : DO '(' condicion ')' ','",
"sentencia_iterativa_do_while : DO '(' ')' ','",
"sentencia_iterativa_do_while : DO '(' ')'",
"sentencia_iterativa_do_while_funcion : DO bloque_sentencias_ejecutables_funcion WHILE '(' condicion ')' ','",
"$$1 :",
"sentencia_iterativa_do_while_funcion : DO bloque_sentencias_ejecutables_funcion WHILE '(' condicion ')' $$1 DO WHILE '(' condicion ')' ','",
"sentencia_iterativa_do_while_funcion : DO bloque_sentencias_ejecutables_funcion WHILE '(' ')' ','",
"sentencia_iterativa_do_while_funcion : DO bloque_sentencias_ejecutables_funcion '(' condicion ')' ','",
"sentencia_iterativa_do_while_funcion : DO WHILE ','",
"sentencia_iterativa_do_while_funcion : DO bloque_sentencias_ejecutables_funcion WHILE ','",
"sentencia_iterativa_do_while_funcion : DO ','",
"sentencia_iterativa_do_while_funcion : DO '(' condicion ')' ','",
"sentencia_iterativa_do_while_funcion : DO '(' ')' ','",
"sentencia_iterativa_do_while_funcion : DO '(' ')'",
"sentencia_seleccion : IF '(' condicion ')' bloque_sentencias_ejecutables ELSE bloque_sentencias_ejecutables ENDIF ','",
"sentencia_seleccion : IF '(' condicion ')' bloque_sentencias_ejecutables ENDIF ','",
"sentencia_seleccion : IF '(' condicion ')' bloque_sentencias_ejecutables ELSE bloque_sentencias_ejecutables ENDIF",
"sentencia_seleccion : IF '(' condicion ')' bloque_sentencias_ejecutables ENDIF",
"sentencia_seleccion : IF '(' ')' bloque_sentencias_ejecutables ELSE bloque_sentencias_ejecutables ENDIF ','",
"sentencia_seleccion : IF '(' ')' bloque_sentencias_ejecutables ENDIF ','",
"sentencia_seleccion : IF '(' condicion ')' ELSE bloque_sentencias_ejecutables ENDIF ','",
"sentencia_seleccion : IF '(' condicion ')' bloque_sentencias_ejecutables ELSE ENDIF ','",
"sentencia_seleccion : IF '(' condicion ')' ENDIF ','",
"sentencia_seleccion_funcion : IF '(' condicion ')' bloque_sentencias_ejecutables_funcion ELSE bloque_sentencias_ejecutables_funcion ENDIF ','",
"sentencia_seleccion_funcion : IF '(' condicion ')' bloque_sentencias_ejecutables_funcion ENDIF ','",
"sentencia_seleccion_funcion : IF '(' condicion ')' bloque_sentencias_ejecutables_funcion ELSE bloque_sentencias_ejecutables_funcion ENDIF",
"$$2 :",
"sentencia_seleccion_funcion : IF '(' condicion ')' bloque_sentencias_ejecutables_funcion ENDIF $$2 IF '(' ')' bloque_sentencias_ejecutables_funcion ELSE bloque_sentencias_ejecutables_funcion ENDIF ','",
"sentencia_seleccion_funcion : IF '(' ')' bloque_sentencias_ejecutables_funcion ENDIF ','",
"sentencia_seleccion_funcion : IF '(' condicion ')' ELSE bloque_sentencias_ejecutables_funcion ENDIF ','",
"sentencia_seleccion_funcion : IF '(' condicion ')' bloque_sentencias_ejecutables_funcion ELSE ENDIF ','",
"sentencia_seleccion_funcion : IF '(' condicion ')' ENDIF ','",
"bloque_sentencias_ejecutables : sentencia_ejecutable",
"bloque_sentencias_ejecutables : '{' sentencias_ejecutables '}'",
"bloque_sentencias_ejecutables : '{' sentencias_ejecutables",
"bloque_sentencias_ejecutables : sentencias_ejecutables '}'",
"bloque_sentencias_ejecutables : '{' '}'",
"bloque_sentencias_ejecutables : sentencia_declarativa",
"bloque_sentencias_ejecutables_funcion : sentencia_ejecutable_funcion",
"bloque_sentencias_ejecutables_funcion : sentencia_return",
"bloque_sentencias_ejecutables_funcion : sentencia_declarativa",
"bloque_sentencias_ejecutables_funcion : '{' sentencias_ejecutables_funcion '}'",
"bloque_sentencias_ejecutables_funcion : '{' sentencias_ejecutables_funcion sentencia_return '}'",
"bloque_sentencias_ejecutables_funcion : '{' sentencias_ejecutables_funcion sentencia_return sentencias_ejecutables_funcion_inalcanzable '}'",
"bloque_sentencias_ejecutables_funcion : sentencias_ejecutables_funcion '}'",
"bloque_sentencias_ejecutables_funcion : sentencias_ejecutables_funcion sentencia_return '}'",
"bloque_sentencias_ejecutables_funcion : '{' sentencias_ejecutables_funcion",
"bloque_sentencias_ejecutables_funcion : '{' sentencias_ejecutables_funcion sentencia_return",
"bloque_sentencias_ejecutables_funcion : '{' '}'",
"sentencias_ejecutables_funcion_inalcanzable : sentencia_ejecutable_funcion_inalcanzable",
"sentencias_ejecutables_funcion_inalcanzable : sentencias_ejecutables_funcion_inalcanzable sentencia_ejecutable_funcion_inalcanzable",
"sentencia_ejecutable_funcion_inalcanzable : sentencia_return",
"sentencia_ejecutable_funcion_inalcanzable : sentencia_ejecutable_funcion",
"sentencias_ejecutables : sentencia_ejecutable",
"sentencias_ejecutables : sentencias_ejecutables sentencia_ejecutable",
"sentencias_ejecutables : sentencia_declarativa",
"sentencias_ejecutables : sentencias_ejecutables sentencia_declarativa",
"sentencias_ejecutables_funcion : sentencia_ejecutable_funcion",
"sentencias_ejecutables_funcion : sentencias_ejecutables_funcion sentencia_ejecutable_funcion",
"sentencias_ejecutables_funcion : sentencia_declarativa",
"sentencias_ejecutables_funcion : sentencias_ejecutables_funcion sentencia_declarativa",
"sentencia_imprimir : PRINT CADENA ','",
"sentencia_imprimir : PRINT CADENA",
"sentencia_imprimir : PRINT ','",
"sentencia_imprimir : PRINT ID ','",
"sentencia_imprimir : PRINT ID",
"sentencia_imprimir : PRINT constante ','",
"sentencia_imprimir : PRINT constante",
"sentencia_invocacion_funcion : sentencia_objeto_identificador '(' expresion ')' ','",
"sentencia_invocacion_funcion : sentencia_objeto_identificador '(' ')' ','",
"sentencia_invocacion_funcion : sentencia_objeto_identificador '(' expresion ',' lista_expresiones_invocacion_funcion_exceso ')' ','",
"sentencia_invocacion_funcion : sentencia_objeto_identificador '(' expresion ')'",
"sentencia_invocacion_funcion : sentencia_objeto_identificador '(' ')'",
"sentencia_invocacion_funcion : sentencia_objeto_identificador '(' expresion ',' lista_expresiones_invocacion_funcion_exceso ')'",
"lista_expresiones_invocacion_funcion_exceso : expresion",
"lista_expresiones_invocacion_funcion_exceso : lista_expresiones_invocacion_funcion_exceso ',' expresion",
"sentencia_asignacion : sentencia_objeto_identificador '=' expresion ','",
"sentencia_asignacion : sentencia_objeto_identificador '=' expresion",
"sentencia_asignacion : sentencia_objeto_identificador '=' ','",
"sentencia_objeto_identificador : ID",
"sentencia_objeto_identificador : sentencia_objeto_identificador '.' ID",
"sentencia_declarativa : declaracion_variable",
"sentencia_declarativa : declaracion_funcion",
"sentencia_declarativa : declaracion_clase",
"sentencia_declarativa : declaracion_interfaz",
"declaracion_variable : tipo lista_de_variables ','",
"declaracion_variable : tipo lista_de_variables",
"declaracion_variable : tipo ','",
"declaracion_interfaz_encabezado : INTERFACE ID",
"declaracion_interfaz_encabezado : INTERFACE",
"declaracion_interfaz : declaracion_interfaz_encabezado '{' bloque_encabezado_funcion_declaracion_interfaz '}'",
"declaracion_interfaz : declaracion_interfaz_encabezado '}'",
"bloque_encabezado_funcion_declaracion_interfaz : encabezado_funcion_declaracion_interfaz",
"bloque_encabezado_funcion_declaracion_interfaz : bloque_encabezado_funcion_declaracion_interfaz encabezado_funcion_declaracion_interfaz",
"encabezado_funcion_declaracion_interfaz : encabezado_funcion_interfaz ','",
"encabezado_funcion_declaracion_interfaz : encabezado_funcion_interfaz",
"sentencia_declarativa_clase : tipo lista_de_variables ','",
"sentencia_declarativa_clase : tipo lista_de_variables",
"sentencia_declarativa_clase : declaracion_funcion",
"sentencia_declarativa_clase : declaracion_funcion ','",
"sentencia_declarativa_clase : ID ','",
"declaracion_clase_encabezado : CLASS ID",
"declaracion_clase_encabezado : CLASS ID IMPLEMENT ID",
"declaracion_clase_encabezado : CLASS",
"declaracion_clase_encabezado : CLASS IMPLEMENT ID",
"declaracion_clase_encabezado : CLASS ID IMPLEMENT",
"declaracion_clase_encabezado : CLASS IMPLEMENT",
"declaracion_clase : declaracion_clase_encabezado '{' bloque_sentencias_declarativas_clase '}'",
"bloque_sentencias_declarativas_clase : sentencia_declarativa_clase",
"bloque_sentencias_declarativas_clase : bloque_sentencias_declarativas_clase sentencia_declarativa_clase",
"declaracion_funcion : encabezado_funcion cuerpo_funcion",
"encabezado_funcion : encabezado_funcion_nombre '(' parametro_funcion ')'",
"encabezado_funcion : encabezado_funcion_nombre '(' ')'",
"encabezado_funcion : encabezado_funcion_nombre '(' parametro_funcion ',' lista_parametros_funcion_exceso ')'",
"encabezado_funcion : encabezado_funcion_nombre '(' parametro_funcion lista_parametros_funcion_exceso ')'",
"encabezado_funcion : encabezado_funcion_nombre ')'",
"encabezado_funcion_nombre : VOID ID",
"encabezado_funcion_nombre : VOID",
"encabezado_funcion_interfaz : VOID ID '(' parametro_funcion ')'",
"encabezado_funcion_interfaz : VOID ID '(' ')'",
"encabezado_funcion_interfaz : VOID ID '(' parametro_funcion ',' lista_parametros_funcion_exceso ')'",
"encabezado_funcion_interfaz : VOID ID '(' parametro_funcion lista_parametros_funcion_exceso ')'",
"encabezado_funcion_interfaz : VOID '(' parametro_funcion ')'",
"encabezado_funcion_interfaz : VOID '(' ')'",
"encabezado_funcion_interfaz : VOID ID parametro_funcion ')'",
"encabezado_funcion_interfaz : VOID ID ')'",
"cuerpo_funcion : '{' sentencias_funcion sentencia_return '}'",
"cuerpo_funcion : '{' sentencia_return '}'",
"cuerpo_funcion : '{' sentencias_funcion sentencia_return sentencias_funcion_inalcanzable '}'",
"cuerpo_funcion : '{' sentencia_return sentencias_funcion_inalcanzable '}'",
"cuerpo_funcion : '{' sentencias_funcion '}'",
"cuerpo_funcion : '{' '}'",
"cuerpo_funcion : sentencias_funcion sentencia_return '}'",
"cuerpo_funcion : sentencia_return '}'",
"cuerpo_funcion : sentencias_funcion sentencia_return sentencias_funcion_inalcanzable '}'",
"cuerpo_funcion : sentencia_return sentencias_funcion_inalcanzable '}'",
"cuerpo_funcion : sentencias_funcion '}'",
"cuerpo_funcion : '}'",
"sentencias_funcion_inalcanzable : sentencia_funcion_inalcanzable",
"sentencias_funcion_inalcanzable : sentencias_funcion_inalcanzable sentencia_funcion_inalcanzable",
"sentencia_funcion_inalcanzable : sentencia_declarativa",
"sentencia_funcion_inalcanzable : sentencia_return",
"sentencia_funcion_inalcanzable : sentencia_ejecutable_funcion",
"lista_parametros_funcion_exceso : parametro_funcion",
"lista_parametros_funcion_exceso : lista_parametros_funcion_exceso ',' parametro_funcion",
"lista_parametros_funcion_exceso : lista_parametros_funcion_exceso parametro_funcion",
"parametro_funcion : tipo ID",
"lista_de_variables : ID",
"lista_de_variables : lista_de_variables ';' ID",
"tipo : INT",
"tipo : ULONG",
"tipo : FLOAT",
"tipo : ID",
"condicion : expresion comparador expresion",
"condicion : expresion comparador",
"condicion : comparador expresion",
"condicion : expresion '=' expresion",
"comparador : COMP_MAYOR_IGUAL",
"comparador : COMP_MENOR_IGUAL",
"comparador : COMP_IGUAL",
"comparador : COMP_DISTINTO",
"comparador : '>'",
"comparador : '<'",
"expresion : expresion '+' termino",
"expresion : expresion '-' termino",
"expresion : termino",
"termino : termino '*' factor",
"termino : termino '/' factor",
"termino : factor",
"factor : ID",
"factor : ID OPERADOR_MENOS",
"factor : constante",
"factor : '(' expresion ')'",
"constante : CTE",
"constante : '-' CTE",
};

//#line 467 "./src/compilador/gramatica.y"

public static AnalizadorLexico lexico = null;
public static GeneracionCodigoIntermedio genCodigoIntermedio = GeneracionCodigoIntermedio.getInstance();
public static Logger logger = Logger.getInstance();
public static TablaDeSimbolos ts = TablaDeSimbolos.getInstance();
public static Parser parser = null;
public static int MAX_INT_VALUE = (int) (Math.pow(2, 15) - 1);

/** Chequea, para los INT, que el valor positivo no supere el valor maximo */
public void corregirConstantePositivaEntera(String constante) {
	if (constante.contains("_i")) {
		//se recibio un INT con signo positivo
		boolean exceptionOutOfRange = false;
		int cte = 0;
		String constanteValue = constante.toString().split("_")[0];

		try {
			cte = Integer.parseInt(constanteValue);
		} catch (NumberFormatException e) {
			exceptionOutOfRange = true;
		}

		if (cte > MAX_INT_VALUE || exceptionOutOfRange) {
			logger.logWarning("[Parser] Rango invalido para la constante: " + constante + ", se trunca al valor " + MAX_INT_VALUE + "_i");

			ts.swapLexemas(constante, MAX_INT_VALUE + "_i");
		}
	}
}

public void constanteConSigno(String constante) {
	/** Check de float negativos */
	if (constante.contains(".")) {
		String negConstante = "-"+constante;
		ts.swapLexemas(constante, negConstante);
	} else {

		if (constante.contains("_ul")) {
			//se recibio un ULONG con signo negativo
			logger.logWarning("[Parser] No se admiten ULONG con valores negativos: " + "-"+constante + ", se trunca a 0_ul");
		
			ts.swapLexemas(constante, "0_ul");
		} else {
			// se recibio un INT negativo
			String negConstante = "-"+constante;
			ts.swapLexemas(constante, negConstante);
		}
	}
}	

public int yylex() {
	return lexico.yylex(parser);
}

public void yyerror(String error) {
	logger.logError(error);
}

public static void main(String[] args) {
	if (args.length == 0) {
		System.err.println("No se especifico ningun archivo de codigo");
	} else {
		String archivo_a_leer = args[0];
		System.out.println("Se va a leer archivo " + archivo_a_leer);
		
		FileReaderHelper fileHelper = new FileReaderHelper();
		
		boolean fileOpenSuccess = fileHelper.open(archivo_a_leer);
		
		if (fileOpenSuccess) {
			parser = new Parser();
			lexico = new AnalizadorLexico(fileHelper);
			
	        parser.run();
	
			String path = new File(archivo_a_leer).getAbsolutePath();
	        
	        Output out = new Output(path);
	        
	        out.saveFile("codigo-lexico.txt", logger.getLexico());
			out.saveFile("codigo-sintactico.txt", logger.getSintactico());
			out.saveFile("tabla-de-simbolos.txt", ts.print());
		}
	}
}
//#line 1012 "Parser.java"
//###############################################################
// method: yylexdebug : check lexer state
//###############################################################
void yylexdebug(int state,int ch)
{
String s=null;
  if (ch < 0) ch=0;
  if (ch <= YYMAXTOKEN) //check index bounds
     s = yyname[ch];    //now get it
  if (s==null)
    s = "illegal-symbol";
  debug("state "+state+", reading "+ch+" ("+s+")");
}





//The following are now global, to aid in error reporting
int yyn;       //next next thing to do
int yym;       //
int yystate;   //current parsing state from state table
String yys;    //current token string


//###############################################################
// method: yyparse : parse input and execute indicated items
//###############################################################
int yyparse()
{
boolean doaction;
  init_stacks();
  yynerrs = 0;
  yyerrflag = 0;
  yychar = -1;          //impossible char forces a read
  yystate=0;            //initial state
  state_push(yystate);  //save it
  val_push(yylval);     //save empty value
  while (true) //until parsing is done, either correctly, or w/error
    {
    doaction=true;
    if (yydebug) debug("loop"); 
    //#### NEXT ACTION (from reduction table)
    for (yyn=yydefred[yystate];yyn==0;yyn=yydefred[yystate])
      {
      if (yydebug) debug("yyn:"+yyn+"  state:"+yystate+"  yychar:"+yychar);
      if (yychar < 0)      //we want a char?
        {
        yychar = yylex();  //get next token
        if (yydebug) debug(" next yychar:"+yychar);
        //#### ERROR CHECK ####
        if (yychar < 0)    //it it didn't work/error
          {
          yychar = 0;      //change it to default string (no -1!)
          if (yydebug)
            yylexdebug(yystate,yychar);
          }
        }//yychar<0
      yyn = yysindex[yystate];  //get amount to shift by (shift index)
      if ((yyn != 0) && (yyn += yychar) >= 0 &&
          yyn <= YYTABLESIZE && yycheck[yyn] == yychar)
        {
        if (yydebug)
          debug("state "+yystate+", shifting to state "+yytable[yyn]);
        //#### NEXT STATE ####
        yystate = yytable[yyn];//we are in a new state
        state_push(yystate);   //save it
        val_push(yylval);      //push our lval as the input for next rule
        yychar = -1;           //since we have 'eaten' a token, say we need another
        if (yyerrflag > 0)     //have we recovered an error?
           --yyerrflag;        //give ourselves credit
        doaction=false;        //but don't process yet
        break;   //quit the yyn=0 loop
        }

    yyn = yyrindex[yystate];  //reduce
    if ((yyn !=0 ) && (yyn += yychar) >= 0 &&
            yyn <= YYTABLESIZE && yycheck[yyn] == yychar)
      {   //we reduced!
      if (yydebug) debug("reduce");
      yyn = yytable[yyn];
      doaction=true; //get ready to execute
      break;         //drop down to actions
      }
    else //ERROR RECOVERY
      {
      if (yyerrflag==0)
        {
        yyerror("syntax error");
        yynerrs++;
        }
      if (yyerrflag < 3) //low error count?
        {
        yyerrflag = 3;
        while (true)   //do until break
          {
          if (stateptr<0)   //check for under & overflow here
            {
            yyerror("stack underflow. aborting...");  //note lower case 's'
            return 1;
            }
          yyn = yysindex[state_peek(0)];
          if ((yyn != 0) && (yyn += YYERRCODE) >= 0 &&
                    yyn <= YYTABLESIZE && yycheck[yyn] == YYERRCODE)
            {
            if (yydebug)
              debug("state "+state_peek(0)+", error recovery shifting to state "+yytable[yyn]+" ");
            yystate = yytable[yyn];
            state_push(yystate);
            val_push(yylval);
            doaction=false;
            break;
            }
          else
            {
            if (yydebug)
              debug("error recovery discarding state "+state_peek(0)+" ");
            if (stateptr<0)   //check for under & overflow here
              {
              yyerror("Stack underflow. aborting...");  //capital 'S'
              return 1;
              }
            state_pop();
            val_pop();
            }
          }
        }
      else            //discard this token
        {
        if (yychar == 0)
          return 1; //yyabort
        if (yydebug)
          {
          yys = null;
          if (yychar <= YYMAXTOKEN) yys = yyname[yychar];
          if (yys == null) yys = "illegal-symbol";
          debug("state "+yystate+", error recovery discards token "+yychar+" ("+yys+")");
          }
        yychar = -1;  //read another
        }
      }//end error recovery
    }//yyn=0 loop
    if (!doaction)   //any reason not to proceed?
      continue;      //skip action
    yym = yylen[yyn];          //get count of terminals on rhs
    if (yydebug)
      debug("state "+yystate+", reducing "+yym+" by rule "+yyn+" ("+yyrule[yyn]+")");
    if (yym>0)                 //if count of rhs not 'nil'
      yyval = val_peek(yym-1); //get current semantic value
    yyval = dup_yyval(yyval); //duplicate yyval if ParserVal is used as semantic value
    switch(yyn)
      {
//########## USER-SUPPLIED ACTIONS ##########
case 1:
//#line 17 "./src/compilador/gramatica.y"
{ logger.logSuccess("[Parser] Programa correcto detectado"); }
break;
case 2:
//#line 18 "./src/compilador/gramatica.y"
{ logger.logError("[Parser] Se esperaba simbolo '{' al principio del programa"); }
break;
case 3:
//#line 19 "./src/compilador/gramatica.y"
{ logger.logError("[Parser] Se esperaba simbolo '}' al final del programa"); }
break;
case 4:
//#line 20 "./src/compilador/gramatica.y"
{ logger.logError("[Parser] Programa vacio"); }
break;
case 5:
//#line 21 "./src/compilador/gramatica.y"
{ logger.logError("[Parser] Programa vacio"); }
break;
case 10:
//#line 32 "./src/compilador/gramatica.y"
{ logger.logError("[Parser] Error de sintaxis en la sentencia"); }
break;
case 16:
//#line 41 "./src/compilador/gramatica.y"
{ logger.logError("[Parser] Sentencia RETURN fuera de funcion"); }
break;
case 27:
//#line 64 "./src/compilador/gramatica.y"
{ logger.logError("[Parser] Se esperaba un simbolo ',' luego del RETURN"); }
break;
case 28:
//#line 68 "./src/compilador/gramatica.y"
{ logger.logSuccess("[Parser] Sentencia iterativa DO WHILE detectada"); }
break;
case 29:
//#line 69 "./src/compilador/gramatica.y"
{ logger.logError("[Parser] Se esperaba ',' luego de sentencia DO WHILE"); }
break;
case 30:
//#line 70 "./src/compilador/gramatica.y"
{ logger.logError("[Parser] Se esperaban sentencias ejecutables en sentencia DO WHILE"); }
break;
case 31:
//#line 71 "./src/compilador/gramatica.y"
{ logger.logError("[Parser] Se esperaba condicion en sentencia DO WHILE"); }
break;
case 32:
//#line 72 "./src/compilador/gramatica.y"
{ logger.logError("[Parser] Se esperaba WHILE en sentencia DO WHILE"); }
break;
case 33:
//#line 73 "./src/compilador/gramatica.y"
{ logger.logError("[Parser] Se esperaban sentencias ejecutables en sentencia DO WHILE"); }
break;
case 34:
//#line 74 "./src/compilador/gramatica.y"
{ logger.logError("[Parser] Se esperaba condicion en sentencia DO WHILE"); }
break;
case 35:
//#line 75 "./src/compilador/gramatica.y"
{ logger.logError("[Parser] Se esperaban sentencias ejecutables en sentencia DO WHILE"); }
break;
case 36:
//#line 76 "./src/compilador/gramatica.y"
{ logger.logError("[Parser] Se esperaban sentencias ejecutables en sentencia DO WHILE"); }
break;
case 37:
//#line 77 "./src/compilador/gramatica.y"
{ logger.logError("[Parser] Se esperaban sentencias ejecutables en sentencia DO WHILE"); }
break;
case 38:
//#line 78 "./src/compilador/gramatica.y"
{ logger.logError("[Parser] Se esperaban sentencias ejecutables en sentencia DO WHILE"); }
break;
case 39:
//#line 82 "./src/compilador/gramatica.y"
{ logger.logSuccess("[Parser] Sentencia iterativa DO WHILE detectada"); }
break;
case 40:
//#line 83 "./src/compilador/gramatica.y"
{ logger.logError("[Parser] Se esperaba ',' luego de sentencia DO WHILE"); }
break;
case 41:
//#line 84 "./src/compilador/gramatica.y"
{ logger.logError("[Parser] Se esperaban sentencias ejecutables en sentencia DO WHILE"); }
break;
case 42:
//#line 85 "./src/compilador/gramatica.y"
{ logger.logError("[Parser] Se esperaba condicion en sentencia DO WHILE"); }
break;
case 43:
//#line 86 "./src/compilador/gramatica.y"
{ logger.logError("[Parser] Se esperaba WHILE en sentencia DO WHILE"); }
break;
case 44:
//#line 87 "./src/compilador/gramatica.y"
{ logger.logError("[Parser] Se esperaban sentencias ejecutables en sentencia DO WHILE"); }
break;
case 45:
//#line 88 "./src/compilador/gramatica.y"
{ logger.logError("[Parser] Se esperaba condicion en sentencia DO WHILE"); }
break;
case 46:
//#line 89 "./src/compilador/gramatica.y"
{ logger.logError("[Parser] Se esperaban sentencias ejecutables en sentencia DO WHILE"); }
break;
case 47:
//#line 90 "./src/compilador/gramatica.y"
{ logger.logError("[Parser] Se esperaban sentencias ejecutables en sentencia DO WHILE"); }
break;
case 48:
//#line 91 "./src/compilador/gramatica.y"
{ logger.logError("[Parser] Se esperaban sentencias ejecutables en sentencia DO WHILE"); }
break;
case 49:
//#line 92 "./src/compilador/gramatica.y"
{ logger.logError("[Parser] Se esperaban sentencias ejecutables en sentencia DO WHILE"); }
break;
case 50:
//#line 96 "./src/compilador/gramatica.y"
{ logger.logSuccess("[Parser] Sentencia seleccion IF ELSE detectada"); }
break;
case 51:
//#line 97 "./src/compilador/gramatica.y"
{ logger.logSuccess("[Parser] Sentencia seleccion IF sin ELSE detectada"); }
break;
case 52:
//#line 98 "./src/compilador/gramatica.y"
{ logger.logError("[Parser] Se esperaba ',' luego de sentencia IF ELSE"); }
break;
case 53:
//#line 99 "./src/compilador/gramatica.y"
{ logger.logError("[Parser] Se esperaba ',' luego de sentencia IF sin ELSE"); }
break;
case 54:
//#line 100 "./src/compilador/gramatica.y"
{ logger.logError("[Parser] Se esperaba condicion en sentencia IF ELSE"); }
break;
case 55:
//#line 101 "./src/compilador/gramatica.y"
{ logger.logError("[Parser] Se esperaba condicion en sentencia IF"); }
break;
case 56:
//#line 102 "./src/compilador/gramatica.y"
{ logger.logError("[Parser] Se esperaban sentencias ejecutables en sentencia IF ELSE"); }
break;
case 57:
//#line 103 "./src/compilador/gramatica.y"
{ logger.logError("[Parser] Se esperaban sentencias ejecutables en sentencia IF ELSE"); }
break;
case 58:
//#line 104 "./src/compilador/gramatica.y"
{ logger.logError("[Parser] Se esperaban sentencias ejecutables en sentencia IF"); }
break;
case 59:
//#line 108 "./src/compilador/gramatica.y"
{ logger.logSuccess("[Parser] Sentencia seleccion IF ELSE detectada"); }
break;
case 60:
//#line 109 "./src/compilador/gramatica.y"
{ logger.logSuccess("[Parser] Sentencia seleccion IF sin ELSE detectada"); }
break;
case 61:
//#line 110 "./src/compilador/gramatica.y"
{ logger.logError("[Parser] Se esperaba ',' luego de sentencia IF ELSE"); }
break;
case 62:
//#line 111 "./src/compilador/gramatica.y"
{ logger.logError("[Parser] Se esperaba ',' luego de sentencia IF sin ELSE"); }
break;
case 63:
//#line 112 "./src/compilador/gramatica.y"
{ logger.logError("[Parser] Se esperaba condicion en sentencia IF ELSE"); }
break;
case 64:
//#line 113 "./src/compilador/gramatica.y"
{ logger.logError("[Parser] Se esperaba condicion en sentencia IF"); }
break;
case 65:
//#line 114 "./src/compilador/gramatica.y"
{ logger.logError("[Parser] Se esperaban sentencias ejecutables en sentencia IF ELSE"); }
break;
case 66:
//#line 115 "./src/compilador/gramatica.y"
{ logger.logError("[Parser] Se esperaban sentencias ejecutables en sentencia IF ELSE"); }
break;
case 67:
//#line 116 "./src/compilador/gramatica.y"
{ logger.logError("[Parser] Se esperaban sentencias ejecutables en sentencia IF"); }
break;
case 70:
//#line 122 "./src/compilador/gramatica.y"
{ logger.logError("[Parser] Se esperaban un simbolo '}' en el bloque"); }
break;
case 71:
//#line 123 "./src/compilador/gramatica.y"
{ logger.logError("[Parser] Se esperaban un simbolo '{' en el bloque"); }
break;
case 72:
//#line 124 "./src/compilador/gramatica.y"
{ logger.logError("[Parser] Se esperaban sentencias ejecutables dentro del bloque"); }
break;
case 73:
//#line 125 "./src/compilador/gramatica.y"
{ logger.logError("[Parser] No se permiten declaraciones de variables dentro de bloque de sentencias ejecutables"); }
break;
case 76:
//#line 131 "./src/compilador/gramatica.y"
{ logger.logError("[Parser] No se permiten declaraciones de variables dentro de bloque de sentencias ejecutables"); }
break;
case 80:
//#line 135 "./src/compilador/gramatica.y"
{ logger.logError("[Parser] Se esperaban un simbolo '{' en el bloque"); }
break;
case 81:
//#line 136 "./src/compilador/gramatica.y"
{ logger.logError("[Parser] Se esperaban un simbolo '{' en el bloque"); }
break;
case 82:
//#line 137 "./src/compilador/gramatica.y"
{ logger.logError("[Parser] Se esperaban un simbolo '}' en el bloque"); }
break;
case 83:
//#line 138 "./src/compilador/gramatica.y"
{ logger.logError("[Parser] Se esperaban un simbolo '}' en el bloque"); }
break;
case 84:
//#line 139 "./src/compilador/gramatica.y"
{ logger.logError("[Parser] Se esperaban sentencias ejecutables en bloque de sentencias ejecutables"); }
break;
case 85:
//#line 143 "./src/compilador/gramatica.y"
{ logger.logError("[Parser] Codigo inalcanzable luego del RETURN, se ignorara"); }
break;
case 86:
//#line 144 "./src/compilador/gramatica.y"
{ logger.logError("[Parser] Codigo inalcanzable luego del RETURN, se ignorara"); }
break;
case 91:
//#line 155 "./src/compilador/gramatica.y"
{ logger.logError("[Parser] No se aceptan declaraciones de variables en sentencias ejecutables"); }
break;
case 92:
//#line 156 "./src/compilador/gramatica.y"
{ logger.logError("[Parser] No se aceptan declaraciones de variables en sentencias ejecutables"); }
break;
case 95:
//#line 162 "./src/compilador/gramatica.y"
{ logger.logError("[Parser] No se aceptan declaraciones de variables en sentencias ejecutables"); }
break;
case 96:
//#line 163 "./src/compilador/gramatica.y"
{ logger.logError("[Parser] No se aceptan declaraciones de variables en sentencias ejecutables"); }
break;
case 97:
//#line 167 "./src/compilador/gramatica.y"
{ logger.logSuccess("[Parser] Sentencia PRINT detectada"); }
break;
case 98:
//#line 168 "./src/compilador/gramatica.y"
{ logger.logError("[Parser] Se esperaba un simbolo ',' en Sentencia PRINT"); }
break;
case 99:
//#line 169 "./src/compilador/gramatica.y"
{ logger.logError("[Parser] Se esperaba CADENA en Sentencia PRINT"); }
break;
case 100:
//#line 170 "./src/compilador/gramatica.y"
{ logger.logError("[Parser] Se esperaba una CADENA y se encontro un IDENTIFICADOR en sentencia PRINT"); }
break;
case 101:
//#line 171 "./src/compilador/gramatica.y"
{ logger.logError("[Parser] Se esperaba un simbolo ',' en sentencia PRINT"); }
break;
case 102:
//#line 172 "./src/compilador/gramatica.y"
{ logger.logError("[Parser] Se esperaba una CADENA y se encontro una constante en sentencia PRINT"); }
break;
case 103:
//#line 173 "./src/compilador/gramatica.y"
{ logger.logError("[Parser] Se esperaba un simbolo ',' en sentencia PRINT"); }
break;
case 104:
//#line 177 "./src/compilador/gramatica.y"
{ logger.logSuccess("[Parser] Invocacion de funcion con expresion detectada"); }
break;
case 105:
//#line 178 "./src/compilador/gramatica.y"
{ logger.logSuccess("[Parser] Invocacion de funcion sin expresion detectada"); }
break;
case 106:
//#line 179 "./src/compilador/gramatica.y"
{ logger.logError("[Parser] Invocacion de funcion con multiples expresiones detectada, se preserva solo la primera expresion"); }
break;
case 107:
//#line 180 "./src/compilador/gramatica.y"
{ logger.logError("[Parser] Se esperaba un simbolo ',' en invocacion de funcion"); }
break;
case 108:
//#line 181 "./src/compilador/gramatica.y"
{ logger.logError("[Parser] Se esperaba un simbolo ',' en invocacion de funcion"); }
break;
case 109:
//#line 182 "./src/compilador/gramatica.y"
{ logger.logError("[Parser] Se esperaba un simbolo ',' en invocacion de funcion"); }
break;
case 112:
//#line 191 "./src/compilador/gramatica.y"
{ logger.logSuccess("[Parser] Asignacion detectada"); }
break;
case 113:
//#line 192 "./src/compilador/gramatica.y"
{ logger.logError("[Parser] Se esperaba un simbolo ',' en sentencia asignacion"); }
break;
case 114:
//#line 193 "./src/compilador/gramatica.y"
{ logger.logError("[Parser] Se esperaba expresion del lado derecho en sentencia asignacion"); }
break;
case 115:
//#line 197 "./src/compilador/gramatica.y"
{
		if (genCodigoIntermedio.existeIdentificadorEnAmbito(val_peek(0).sval)) {
			logger.logSuccess("[Codigo Intermedio] El identificador " + val_peek(0).sval + " existe en el ambito");
		} else {
			logger.logError("[Codigo Intermedio] El identificador " + val_peek(0).sval + " no esta declarado en el ambito");
		}
	}
break;
case 121:
//#line 215 "./src/compilador/gramatica.y"
{ 
		logger.logSuccess("[Parser] Declaracion de lista de variables detectado");
		genCodigoIntermedio.agregarTipoAListaDeVariables(val_peek(2).sval);
		genCodigoIntermedio.agregarUsoAListaDeVariables("variable");
		genCodigoIntermedio.agregarAmbitoAListaDeVariables();
		genCodigoIntermedio.removerListaVariablesADeclarar();
	}
break;
case 122:
//#line 222 "./src/compilador/gramatica.y"
{ logger.logError("[Parser] Se esperaba un simbolo ',' en sentencia declaracion de variables"); }
break;
case 123:
//#line 223 "./src/compilador/gramatica.y"
{ logger.logError("[Parser] Se esperaba una lista de variables en sentencia declaracion de variables"); }
break;
case 124:
//#line 227 "./src/compilador/gramatica.y"
{
		genCodigoIntermedio.agregarUsoAIdentificador(val_peek(0).sval, "nombre_interfaz");
		genCodigoIntermedio.agregarAmbitoAIdentificador(val_peek(0).sval);
		genCodigoIntermedio.setAmbitoClaseInterfaz(val_peek(0).sval);
	}
break;
case 125:
//#line 232 "./src/compilador/gramatica.y"
{ logger.logError("[Parser] Se esperaba un identificador en declaracion de INTERFACE"); }
break;
case 126:
//#line 236 "./src/compilador/gramatica.y"
{ 
		logger.logSuccess("[Parser] Declaracion de INTERFACE detectada");
		genCodigoIntermedio.clearAmbitoClaseInterfaz();
	}
break;
case 127:
//#line 240 "./src/compilador/gramatica.y"
{ logger.logError("[Parser] Se esperaba un simbolo '{' en declaracion de INTERFACE"); }
break;
case 131:
//#line 250 "./src/compilador/gramatica.y"
{ logger.logError("[Parser] Se esperaba un simbolo ',' en declaracion de metodo en CLASS"); }
break;
case 132:
//#line 254 "./src/compilador/gramatica.y"
{ 
		logger.logSuccess("[Parser] Declaracion de lista de variables en CLASS detectado"); 
		genCodigoIntermedio.agregarTipoAListaDeVariables(val_peek(2).sval);
		genCodigoIntermedio.agregarUsoAListaDeVariables("atributo");
		genCodigoIntermedio.agregarAmbitoAListaDeAtributos();
		genCodigoIntermedio.removerListaVariablesADeclarar();
	}
break;
case 133:
//#line 261 "./src/compilador/gramatica.y"
{ logger.logError("[Parser] Se esperaba un simbolo ',' en declaracion de lista de variables en CLASS"); }
break;
case 135:
//#line 263 "./src/compilador/gramatica.y"
{ logger.logError("[Parser] Se encontro un simbolo inesperado ',' en declaracion de funcion en CLASS"); }
break;
case 136:
//#line 264 "./src/compilador/gramatica.y"
{
		if (genCodigoIntermedio.existeIdentificadorEnAmbito(val_peek(1).sval)) {
			logger.logSuccess("[Codigo Intermedio] El identificador " + val_peek(1).sval + " existe en el ambito");
		} else {
			logger.logError("[Codigo Intermedio] El identificador " + val_peek(1).sval + " no esta declarado en el ambito");
		}
	}
break;
case 137:
//#line 274 "./src/compilador/gramatica.y"
{  
		genCodigoIntermedio.agregarUsoAIdentificador(val_peek(0).sval, "nombre_clase");
		genCodigoIntermedio.agregarAmbitoAIdentificador(val_peek(0).sval);
		genCodigoIntermedio.setAmbitoClaseInterfaz(val_peek(0).sval);
		genCodigoIntermedio.apilarAmbito(val_peek(0).sval);
	}
break;
case 138:
//#line 280 "./src/compilador/gramatica.y"
{
		genCodigoIntermedio.agregarUsoAIdentificador(val_peek(2).sval, "nombre_clase");
		genCodigoIntermedio.agregarAmbitoAIdentificador(val_peek(2).sval);
		genCodigoIntermedio.setAmbitoClaseInterfaz(val_peek(2).sval);
		genCodigoIntermedio.apilarAmbito(val_peek(2).sval);
	}
break;
case 139:
//#line 286 "./src/compilador/gramatica.y"
{ logger.logError("[Parser] Se esperaba un identificador en declaracion de clase"); }
break;
case 140:
//#line 287 "./src/compilador/gramatica.y"
{ logger.logError("[Parser] Se esperaba un identificador en declaracion de clase"); }
break;
case 141:
//#line 288 "./src/compilador/gramatica.y"
{ logger.logError("[Parser] Se esperaba un identificador en IMPLEMENT de clase"); }
break;
case 142:
//#line 289 "./src/compilador/gramatica.y"
{ logger.logError("[Parser] Se esperaba un identificador en declaracion de clase"); }
break;
case 143:
//#line 293 "./src/compilador/gramatica.y"
{ 
		logger.logSuccess("[Parser] Declaracion de clase CLASS detectado"); 
		genCodigoIntermedio.clearAmbitoClaseInterfaz();
	}
break;
case 146:
//#line 305 "./src/compilador/gramatica.y"
{ 
		logger.logSuccess("[Parser] Declaracion de funcion detectado");
		genCodigoIntermedio.desapilarAmbito(); 
	}
break;
case 149:
//#line 314 "./src/compilador/gramatica.y"
{ logger.logError("[Parser] Encabezado de funcion con mas de 1 parametro detectado, se preserva solo el primer parametro"); }
break;
case 150:
//#line 315 "./src/compilador/gramatica.y"
{ logger.logError("[Parser] Encabezado de funcion con mas de 1 parametro detectado, se preserva solo el primer parametro"); }
break;
case 151:
//#line 316 "./src/compilador/gramatica.y"
{ logger.logError("[Parser] Se esperaba un simbolo '(' en el encabezado de la funcion"); }
break;
case 152:
//#line 320 "./src/compilador/gramatica.y"
{
		if (genCodigoIntermedio.esDefinicionDeClase()) {
			genCodigoIntermedio.agregarUsoAIdentificador(val_peek(0).sval, "nombre_metodo");
			genCodigoIntermedio.agregarAmbitoAIdentificadorMetodo(val_peek(0).sval);
		} else {
			genCodigoIntermedio.agregarUsoAIdentificador(val_peek(0).sval, "nombre_funcion");
			genCodigoIntermedio.agregarAmbitoAIdentificador(val_peek(0).sval);
		}
		genCodigoIntermedio.apilarAmbito(val_peek(0).sval); 
	}
break;
case 153:
//#line 330 "./src/compilador/gramatica.y"
{
		logger.logError("[Parser] Se esperaba un identificador en el encabezado de la funcion"); 
	}
break;
case 154:
//#line 336 "./src/compilador/gramatica.y"
{ 
		genCodigoIntermedio.agregarUsoAIdentificador(val_peek(3).sval, "nombre_metodo");
		genCodigoIntermedio.agregarAmbitoAIdentificadorMetodo(val_peek(3).sval);
	}
break;
case 155:
//#line 340 "./src/compilador/gramatica.y"
{ 
		genCodigoIntermedio.agregarUsoAIdentificador(val_peek(2).sval, "nombre_metodo");
		genCodigoIntermedio.agregarAmbitoAIdentificadorMetodo(val_peek(2).sval);
	}
break;
case 156:
//#line 344 "./src/compilador/gramatica.y"
{ logger.logError("[Parser] Encabezado de funcion con mas de 1 parametro detectado, se preserva solo el primer parametro"); }
break;
case 157:
//#line 345 "./src/compilador/gramatica.y"
{ logger.logError("[Parser] Encabezado de funcion con mas de 1 parametro detectado, se preserva solo el primer parametro"); }
break;
case 158:
//#line 346 "./src/compilador/gramatica.y"
{ logger.logError("[Parser] Se esperaba un identificador en el encabezado de la funcion"); }
break;
case 159:
//#line 347 "./src/compilador/gramatica.y"
{ logger.logError("[Parser] Se esperaba un identificador en el encabezado de la funcion"); }
break;
case 160:
//#line 348 "./src/compilador/gramatica.y"
{ logger.logError("[Parser] Se esperaba un simbolo '(' en el encabezado de la funcion"); }
break;
case 161:
//#line 349 "./src/compilador/gramatica.y"
{ logger.logError("[Parser] Se esperaba un simbolo '(' en el encabezado de la funcion"); }
break;
case 166:
//#line 357 "./src/compilador/gramatica.y"
{ logger.logError("[Parser] Se esperaba una sentencia RETURN al final de la funcion"); }
break;
case 167:
//#line 358 "./src/compilador/gramatica.y"
{ logger.logError("[Parser] Se esperaba una sentencia RETURN al final de la funcion"); }
break;
case 168:
//#line 359 "./src/compilador/gramatica.y"
{ logger.logError("[Parser] Se esperaba un simbolo '{' en el cuerpo de la funcion"); }
break;
case 169:
//#line 360 "./src/compilador/gramatica.y"
{ logger.logError("[Parser] Se esperaba un simbolo '{' en el cuerpo de la funcion"); }
break;
case 170:
//#line 361 "./src/compilador/gramatica.y"
{ logger.logError("[Parser] Se esperaba un simbolo '{' en el cuerpo de la funcion"); }
break;
case 171:
//#line 362 "./src/compilador/gramatica.y"
{ logger.logError("[Parser] Se esperaba un simbolo '{' en el cuerpo de la funcion"); }
break;
case 172:
//#line 363 "./src/compilador/gramatica.y"
{ logger.logError("[Parser] Se esperaba un simbolo '{' en el cuerpo de la funcion"); }
break;
case 173:
//#line 364 "./src/compilador/gramatica.y"
{ logger.logError("[Parser] Se esperaba un simbolo '{' en el cuerpo de la funcion"); }
break;
case 174:
//#line 368 "./src/compilador/gramatica.y"
{ logger.logError("[Parser] Codigo inalcanzable luego del RETURN, se ignorara"); }
break;
case 175:
//#line 369 "./src/compilador/gramatica.y"
{ logger.logError("[Parser] Codigo inalcanzable luego del RETURN, se ignorara"); }
break;
case 182:
//#line 385 "./src/compilador/gramatica.y"
{ 
		genCodigoIntermedio.agregarUsoAIdentificador(val_peek(0).sval, "nombre_parametro");
		genCodigoIntermedio.agregarTipoAParametroDeFuncion(val_peek(0).sval, val_peek(1).sval);
		genCodigoIntermedio.agregarAmbitoAIdentificador(val_peek(0).sval);
	}
break;
case 183:
//#line 393 "./src/compilador/gramatica.y"
{ 
		genCodigoIntermedio.agregarVariableADeclarar(val_peek(0).sval);
	}
break;
case 184:
//#line 396 "./src/compilador/gramatica.y"
{ 
		genCodigoIntermedio.agregarVariableADeclarar(val_peek(0).sval);
	}
break;
case 188:
//#line 405 "./src/compilador/gramatica.y"
{
		if (genCodigoIntermedio.existeIdentificadorEnAmbito(val_peek(0).sval)) {
			logger.logSuccess("[Codigo Intermedio] El identificador " + val_peek(0).sval + " esta declarado");
		} else {
			logger.logError("[Codigo Intermedio] El identificador " + val_peek(0).sval + " no esta declarado");
		}
	}
break;
case 190:
//#line 416 "./src/compilador/gramatica.y"
{ logger.logError("[Parser] Se esperaba una expresion del lado derecho de la comparacion"); }
break;
case 191:
//#line 417 "./src/compilador/gramatica.y"
{ logger.logError("[Parser] Se esperaba una expresion del lado izquierdo de la comparacion"); }
break;
case 192:
//#line 418 "./src/compilador/gramatica.y"
{ logger.logError("[Parser] Se esperaba un comparador valido en la comparacion"); }
break;
case 205:
//#line 443 "./src/compilador/gramatica.y"
{
		if (genCodigoIntermedio.existeIdentificadorEnAmbito(val_peek(0).sval)) {
			logger.logSuccess("[Codigo Intermedio] El identificador " + val_peek(0).sval + " esta declarado");
		} else {
			logger.logError("[Codigo Intermedio] El identificador " + val_peek(0).sval + " no esta declarado ");
		}
	}
break;
case 206:
//#line 450 "./src/compilador/gramatica.y"
{
		if (genCodigoIntermedio.existeIdentificadorEnAmbito(val_peek(1).sval)) {
			logger.logSuccess("[Codigo Intermedio] El identificador " + val_peek(1).sval + " esta declarado");
		} else {
			logger.logError("[Codigo Intermedio] El identificador " + val_peek(1).sval + " no esta declarado");
		}
	}
break;
case 208:
//#line 458 "./src/compilador/gramatica.y"
{ logger.logError("[Parser] No se admiten expresiones entre parentesis"); }
break;
case 209:
//#line 462 "./src/compilador/gramatica.y"
{ corregirConstantePositivaEntera(val_peek(0).sval); }
break;
case 210:
//#line 463 "./src/compilador/gramatica.y"
{ constanteConSigno(val_peek(0).sval); }
break;
//#line 1795 "Parser.java"
//########## END OF USER-SUPPLIED ACTIONS ##########
    }//switch
    //#### Now let's reduce... ####
    if (yydebug) debug("reduce");
    state_drop(yym);             //we just reduced yylen states
    yystate = state_peek(0);     //get new state
    val_drop(yym);               //corresponding value drop
    yym = yylhs[yyn];            //select next TERMINAL(on lhs)
    if (yystate == 0 && yym == 0)//done? 'rest' state and at first TERMINAL
      {
      if (yydebug) debug("After reduction, shifting from state 0 to state "+YYFINAL+"");
      yystate = YYFINAL;         //explicitly say we're done
      state_push(YYFINAL);       //and save it
      val_push(yyval);           //also save the semantic value of parsing
      if (yychar < 0)            //we want another character?
        {
        yychar = yylex();        //get next character
        if (yychar<0) yychar=0;  //clean, if necessary
        if (yydebug)
          yylexdebug(yystate,yychar);
        }
      if (yychar == 0)          //Good exit (if lex returns 0 ;-)
         break;                 //quit the loop--all DONE
      }//if yystate
    else                        //else not done yet
      {                         //get next state and push, for next yydefred[]
      yyn = yygindex[yym];      //find out where to go
      if ((yyn != 0) && (yyn += yystate) >= 0 &&
            yyn <= YYTABLESIZE && yycheck[yyn] == yystate)
        yystate = yytable[yyn]; //get new state
      else
        yystate = yydgoto[yym]; //else go to new defred
      if (yydebug) debug("after reduction, shifting from state "+state_peek(0)+" to state "+yystate+"");
      state_push(yystate);     //going again, so push state & val...
      val_push(yyval);         //for next action
      }
    }//main loop
  return 0;//yyaccept!!
}
//## end of method parse() ######################################



//## run() --- for Thread #######################################
/**
 * A default run method, used for operating this parser
 * object in the background.  It is intended for extending Thread
 * or implementing Runnable.  Turn off with -Jnorun .
 */
public void run()
{
  yyparse();
}
//## end of method run() ########################################



//## Constructors ###############################################
/**
 * Default constructor.  Turn off with -Jnoconstruct .

 */
public Parser()
{
  //nothing to do
}


/**
 * Create a parser, setting the debug to true or false.
 * @param debugMe true for debugging, false for no debug.
 */
public Parser(boolean debugMe)
{
  yydebug=debugMe;
}
//###############################################################



}
//################### END OF CLASS ##############################
