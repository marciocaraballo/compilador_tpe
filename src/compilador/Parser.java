//### This file created by BYACC 1.8(/Java extension  1.15)
//### Java capabilities added 7 Jan 97, Bob Jamison
//### Updated : 27 Nov 97  -- Bob Jamison, Joe Nieten
//###           01 Jan 98  -- Bob Jamison -- fixed generic semantic constructor
//###           01 Jun 99  -- Bob Jamison -- added Runnable support
//###           06 Aug 00  -- Bob Jamison -- made state variables class-global
//###           03 Jan 01  -- Bob Jamison -- improved flags, tracing
//###           16 May 01  -- Bob Jamison -- added custom stack sizing
//###           04 Mar 02  -- Yuval Oren  -- improved java performance, added options
//###           14 Mar 02  -- Tomas Hurka -- -d support, static initializer workaround
//### Please send bug reports to tom@hukatronic.cz
//### static char yysccsid[] = "@(#)yaccpar	1.8 (Berkeley) 01/20/90";






//#line 2 ".\gramatica.y"
package compilador;
import java.io.File;
//#line 20 "Parser.java"




public class Parser
{

boolean yydebug;        //do I want debug output?
int yynerrs;            //number of errors so far
int yyerrflag;          //was there an error?
int yychar;             //the current working character

//########## MESSAGES ##########
//###############################################################
// method: debug
//###############################################################
void debug(String msg)
{
  if (yydebug)
    System.out.println(msg);
}

//########## STATE STACK ##########
final static int YYSTACKSIZE = 500;  //maximum stack size
int statestk[] = new int[YYSTACKSIZE]; //state stack
int stateptr;
int stateptrmax;                     //highest index of stackptr
int statemax;                        //state when highest index reached
//###############################################################
// methods: state stack push,pop,drop,peek
//###############################################################
final void state_push(int state)
{
  try {
		stateptr++;
		statestk[stateptr]=state;
	 }
	 catch (ArrayIndexOutOfBoundsException e) {
     int oldsize = statestk.length;
     int newsize = oldsize * 2;
     int[] newstack = new int[newsize];
     System.arraycopy(statestk,0,newstack,0,oldsize);
     statestk = newstack;
     statestk[stateptr]=state;
  }
}
final int state_pop()
{
  return statestk[stateptr--];
}
final void state_drop(int cnt)
{
  stateptr -= cnt; 
}
final int state_peek(int relative)
{
  return statestk[stateptr-relative];
}
//###############################################################
// method: init_stacks : allocate and prepare stacks
//###############################################################
final boolean init_stacks()
{
  stateptr = -1;
  val_init();
  return true;
}
//###############################################################
// method: dump_stacks : show n levels of the stacks
//###############################################################
void dump_stacks(int count)
{
int i;
  System.out.println("=index==state====value=     s:"+stateptr+"  v:"+valptr);
  for (i=0;i<count;i++)
    System.out.println(" "+i+"    "+statestk[i]+"      "+valstk[i]);
  System.out.println("======================");
}


//########## SEMANTIC VALUES ##########
//public class ParserVal is defined in ParserVal.java


String   yytext;//user variable to return contextual strings
ParserVal yyval; //used to return semantic vals from action routines
ParserVal yylval;//the 'lval' (result) I got from yylex()
ParserVal valstk[];
int valptr;
//###############################################################
// methods: value stack push,pop,drop,peek.
//###############################################################
void val_init()
{
  valstk=new ParserVal[YYSTACKSIZE];
  yyval=new ParserVal();
  yylval=new ParserVal();
  valptr=-1;
}
void val_push(ParserVal val)
{
  if (valptr>=YYSTACKSIZE)
    return;
  valstk[++valptr]=val;
}
ParserVal val_pop()
{
  if (valptr<0)
    return new ParserVal();
  return valstk[valptr--];
}
void val_drop(int cnt)
{
int ptr;
  ptr=valptr-cnt;
  if (ptr<0)
    return;
  valptr = ptr;
}
ParserVal val_peek(int relative)
{
int ptr;
  ptr=valptr-relative;
  if (ptr<0)
    return new ParserVal();
  return valstk[ptr];
}
final ParserVal dup_yyval(ParserVal val)
{
  ParserVal dup = new ParserVal();
  dup.ival = val.ival;
  dup.dval = val.dval;
  dup.sval = val.sval;
  dup.obj = val.obj;
  return dup;
}
//#### end semantic value section ####
public final static short ID=257;
public final static short CTE=258;
public final static short CADENA=259;
public final static short IF=260;
public final static short THEN=261;
public final static short ELSE=262;
public final static short ENDIF=263;
public final static short OUT=264;
public final static short FUN=265;
public final static short RETURN=266;
public final static short BREAK=267;
public final static short ASIGNACION=268;
public final static short COMP_MAYOR_IGUAL=269;
public final static short COMP_MENOR_IGUAL=270;
public final static short COMP_DISTINTO=271;
public final static short WHEN=272;
public final static short DO=273;
public final static short UNTIL=274;
public final static short CONTINUE=275;
public final static short DOUBLE64=276;
public final static short UINT16=277;
public final static short DEFER=278;
public final static short CONST=279;
public final static short YYERRCODE=256;
final static short yylhs[] = {                           -1,
    0,    0,    0,    0,    0,    1,    2,    2,    3,    3,
    4,    4,    4,    4,    6,    6,    6,    6,   11,   11,
    7,    7,    7,   14,   14,   15,   15,   16,   16,   16,
   16,   16,   16,   16,   16,   16,   16,   22,   22,    8,
    8,   23,   23,   23,   23,   23,   23,   23,   23,   23,
   23,   23,   23,   23,   23,   25,   25,   25,   21,   21,
   21,   21,   21,   21,   21,   21,   21,   21,   21,   21,
   21,   21,   19,   19,   19,   19,   19,   19,   19,   19,
   19,   19,   19,   19,   19,   20,   20,   20,   20,   20,
   20,   26,   26,   26,   26,   26,   26,   26,   26,   26,
   26,   26,   26,   26,   28,   28,   29,   29,   29,   12,
   12,   12,   12,   12,   12,   12,   12,   12,   12,   13,
   13,   13,   13,   13,   32,   32,   32,   35,   35,   34,
   34,   36,   34,    9,    9,    9,   37,   37,   38,   38,
   38,   38,    5,    5,    5,    5,    5,    5,    5,    5,
    5,    5,   42,   42,   42,   30,   30,   30,   30,   30,
   31,   31,   41,   41,   43,   43,   43,   43,   43,   27,
   44,   44,   44,   44,   45,   45,   17,   17,   17,   40,
   40,   47,   40,   40,   40,   46,   46,   39,   39,   39,
   39,   39,   39,   39,   39,   39,   39,   39,   39,   48,
   48,   48,   48,   48,   49,   49,   24,   24,   24,   50,
   50,   50,   50,   50,   50,   33,   33,   33,   51,   51,
   51,   52,   52,   52,   54,   54,   55,   55,   56,   56,
   18,   18,   18,   18,   18,   18,   18,   18,   18,   53,
   53,   10,   10,
};
final static short yylen[] = {                            2,
    4,    3,    3,    3,    3,    1,    1,    2,    1,    1,
    1,    1,    1,    1,    3,    2,    2,    2,    3,    1,
    4,    5,    3,    1,    2,    1,    1,    1,    2,    1,
    2,    1,    2,    1,    2,    1,    2,    1,    2,    4,
    5,   10,   13,   13,   13,   13,   16,   16,    9,   12,
   12,   12,   12,   15,   15,    1,    1,    2,    8,    8,
    8,   11,   11,   15,   13,   13,   15,   15,   15,   13,
   13,   14,    9,   10,   10,    8,    9,    9,    8,    8,
    9,    9,    8,    9,    9,    7,    9,    6,    8,    5,
    7,    1,    1,    1,    4,    4,    3,    2,    3,    3,
    3,    3,    2,    2,    1,    2,    1,    1,    1,    6,
    7,    5,    5,    5,    5,    6,    6,    6,    6,    5,
    4,    3,    3,    4,    1,    3,    5,    1,    3,    2,
    1,    0,    2,    3,    2,    2,    1,    3,    3,    2,
    2,    1,    1,    2,    1,    2,    1,    2,    1,    2,
    1,    2,    1,    1,    1,    2,    4,    1,    3,    3,
    2,    1,    1,    3,    7,    6,    6,    6,    6,    1,
    1,    3,    2,    2,    1,    2,    4,    3,    3,    9,
    8,    0,   17,    7,    6,    1,    2,    8,   10,    7,
    9,    7,    7,    7,    7,    7,    9,    9,    8,    1,
    3,    2,    2,    2,    1,    2,    3,    2,    2,    1,
    1,    1,    1,    1,    1,    3,    3,    1,    3,    3,
    1,    1,    1,    1,    3,    4,    1,    3,    1,    1,
    5,    5,    4,    4,    4,    4,    4,    4,    4,    1,
    2,    1,    1,
};
final static short yydefred[] = {                         0,
    6,    0,    0,    0,    0,    0,    0,    0,    0,    0,
  243,  242,    0,    0,    0,    7,    9,   10,   11,   12,
   13,   14,    0,    0,    0,  143,  147,    0,  145,  149,
  151,  163,    0,    0,    0,    0,    0,  240,  210,  211,
  212,    0,    0,  213,  214,  215,    0,    0,    0,    0,
  221,  223,  224,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,  153,  154,  155,    0,    0,    0,  144,
  148,  146,  150,  152,    0,  136,    0,    0,    2,    8,
    0,   18,    0,   17,    0,    0,    5,    0,    3,  178,
    0,   19,    0,  241,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,  156,    0,
  161,  175,    0,    0,  174,  176,  141,    0,  134,    0,
   15,    0,    0,    0,    0,    0,   23,   26,    0,    0,
   24,   27,   28,   30,   32,   34,   36,    0,    0,  164,
    1,  177,  229,  225,  230,    0,  227,    0,    0,    0,
    0,    0,    0,    0,  219,  220,  236,  234,  237,    0,
  235,    0,  233,    0,    0,    0,    0,  130,    0,    0,
  133,    0,    0,    0,    0,  170,  160,    0,  172,    0,
    0,  139,  138,    0,    0,    0,    0,    0,   92,  107,
   93,    0,    0,  105,  108,  109,    0,   29,   31,   33,
   35,   37,   21,    0,   25,    0,   40,    0,    0,  226,
    0,    0,    0,    0,    0,    0,    0,    0,  232,  231,
    0,  115,    0,    0,  114,    0,    0,  113,    0,    0,
    0,    0,  157,    0,    0,    0,    0,    0,    0,  122,
    0,    0,   98,    0,    0,  104,    0,    0,  106,    0,
   22,   41,    0,  228,  202,  205,    0,    0,    0,  204,
  206,    0,    0,    0,    0,    0,    0,    0,  110,    0,
  119,  118,    0,  117,    0,    0,    0,  185,    0,  167,
  169,    0,  168,    0,  124,    0,    0,    0,   97,    0,
    0,    0,  100,  102,    0,    0,  201,    0,  194,  192,
    0,  195,    0,    0,    0,  196,  193,  111,    0,  127,
  187,    0,    0,    0,  165,    0,  120,    0,    0,    0,
   95,   96,   90,    0,    0,    0,    0,  199,    0,  188,
    0,    0,  182,    0,  181,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,  197,    0,  198,
  129,    0,  180,   58,   38,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
   86,    0,    0,    0,   91,    0,  189,    0,    0,    0,
   39,    0,   59,    0,   61,   60,    0,    0,   56,   57,
    0,    0,   80,    0,    0,   79,    0,    0,    0,   83,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,   81,   82,   73,    0,    0,   84,   85,    0,
    0,   87,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,   42,    0,   74,   75,    0,    0,    0,    0,
    0,    0,    0,   62,    0,    0,    0,   63,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,   65,   43,
    0,    0,   66,   44,   70,   71,   45,   46,    0,    0,
    0,    0,   72,    0,    0,    0,    0,    0,    0,    0,
    0,  183,   68,   69,   64,    0,   67,    0,    0,    0,
   47,   48,    0,    0,    0,    0,    0,    0,
};
final static short yydgoto[] = {                          3,
    4,   15,  285,   17,   18,   19,   20,   21,   22,   23,
   24,   25,  399,  140,  141,  365,  143,  144,  145,  146,
  147,  366,  400,   47,  351,  202,  149,  203,  204,  205,
  206,  112,   48,  113,  320,  114,   77,   78,   29,   30,
   31,  126,   32,   68,   69,  286,  362,  223,  224,   49,
   50,   51,   52,   53,  156,  157,
};
final static short yysindex[] = {                      -103,
    0, 1625,    0,  823,  -39,  155,   23,  -24,   38,  849,
    0,    0,  713,  -52, 1207,    0,    0,    0,    0,    0,
    0,    0,  -26,   24,  -25,    0,    0,   51,    0,    0,
    0,    0, 1217, 1246,   63, -140,  104,    0,    0,    0,
    0,  -88,  422,    0,    0,    0,  134,  953,   65,   42,
    0,    0,    0,  150,  163,   27,  -17,  -15,  871,  -62,
   -8,  153,  583,    0,    0,    0,    0,   14, 1455,    0,
    0,    0,    0,    0, -206,    0,  213,  254,    0,    0,
  263,    0,  243,    0, 1176,   37,    0, 1269,    0,    0,
   83,    0,   59,    0,   57,  -14,   64,   65,   65,   65,
  138,   65,   65,  273,  275,    5,   33,  286,  -40,  295,
   55,  322,  311,  115,  307,  338,  124,  364,    0,   11,
    0,    0, 1474,  268,    0,    0,    0,  156,    0,  174,
    0,  371,   48,  412,  339,  805,    0,    0,  329, 1601,
    0,    0,    0,    0,    0,    0,    0,  340,  406,    0,
    0,    0,    0,    0,    0,  136,    0, 1012, 1012,  825,
 1012,   42,   42,  138,    0,    0,    0,    0,    0,  407,
    0,  409,    0,  415, -124,   36, -124,    0,  416, -124,
    0, -124,  418,  355, -114,    0,    0,  421,    0,  879,
  450,    0,    0,  974,   82,   75,  904, 1493,    0,    0,
    0,  221, 1402,    0,    0,    0,  456,    0,    0,    0,
    0,    0,    0,  372,    0,  377,    0,  240,   85,    0,
 1187,    0,  -98, 1553,  245,  922,   98,  255,    0,    0,
 -124,    0,  459, -124,    0, -124,  475,    0, -124, 1625,
  401, 1295,    0,  474,   44,  476,  493,  481,  158,    0,
  280,  503,    0, 1419,  505,    0,  447,  457,    0,  974,
    0,    0,  339,    0,    0,    0, 1564, 1012,  487,    0,
    0,  516,  320,  525,  108, 1012,  526,  536,    0, -124,
    0,    0, -124,    0, 1625,  472, 1625,    0,  473,    0,
    0,  542,    0,  341,    0,  545,  484,  -79,    0,  483,
  485,  949,    0,    0,  568,  344,    0,  350,    0,    0,
  561,    0, 1012,  562,  360,    0,    0,    0,  582,    0,
    0,  570,  502,  577,    0,  866,    0, 1652,  528, 1652,
    0,    0,    0,  611,  392,  616,  606,    0,  414,    0,
  622, -124,    0,  623,    0,  894, -191,  425,  119,  426,
  423,  -76, 1318,   15,  625,  932,  956,    0,  635,    0,
    0,  427,    0,    0,    0,  899,  636,  574,  641,  642,
  -81,  664,  654,  603,  638,  716,   43,  717,  652,  653,
    0, -191,  425,  426,    0,  738,    0,  741,  520,  659,
    0,  666,    0, -191,    0,    0,  529, -191,    0,    0,
  543,  974,    0,  746,  748,    0,  749,  685,  686,    0,
  753,  754,  899,  755,  974,  693,  126,  130, 1627, 1627,
  760,  776,    0,    0,    0,  767,  768,    0,    0,  704,
  714,    0,  800, -191,  982,  783, 1002,  785,  720,  721,
  723,  724,    0,  590,    0,    0,  140,  154,  593,  992,
 -191,  596,  605,    0, -191,  607,  608,    0,  617,  619,
  631,  632,  -68, 1022, 1032,  743,  644,  744,  780, 1525,
  826,  851, 1542,  852,  858,  859,  864,  870,  875, -191,
 -191, -191, 1625,  877,  645,  667,  674,  822,    0,    0,
  689,  828,    0,    0,    0,    0,    0,    0, 1627, 1581,
 1591,  833,    0,  900,  902,  912,  711,  919,  725,  882,
  883,    0,    0,    0,    0,  924,    0,  936,  740,  750,
    0,    0,  144,  177, -191, -191, 1654, 1654,
};
final static short yyrindex[] = {                         0,
    0,    0,    0,    0,  369,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,  445,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,  290,
    0,    0,    0,    0,    0,    0,  766,  766,    0,  969,
 1341, 1363,    0,    0,    0,    0, 1436,    0,    0,    0,
    0,    0,    0,    0,  765,    0,  649,  678,    0,    0,
  703,    0,  727,    0,    0,    0,    0, 1033,    0,    0,
  314,    0,    0,    0,    0,    0,    0,    0,    0,  -22,
  -20,    0,    0,    0,    0,    0,    0,    0,  766,    0,
   71,    0,   61,    0,    0,    0,    0,    0,    0,    0,
    0,    0,  772,    0,    0,    0,    0,  794,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,  397,  469,  -16,    0,    0,    0,    0,    0,  368,
    0,  494,    0,    0,    0,    0,    0,    0,    0,  766,
    0,    0,    0,    0,    0,    0,    0, 1382,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,  773,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0, 1515,    0,    0,    0,    0,    0,    0,    0,    0,
  916,    0,    0,    0,    0,    0,   66,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,   84,    0,
    0,    0,    0,  774,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,  171,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,  917,
    0,    0,  766,    0,  925,    0,    0,    0,    0,    0,
    0,  523,    0,    0,    0,  253,    0,    0,    0,  775,
  778,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,  558,    0,    0,    0,    0,   73,    0,
    0,    0,    0,  600,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,  766,    0,    0,    0,    0,    0,  791,    0,  795,
    0,    0,    0,    0, 1051,    0,    0,    0,  624,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0, 1074,    0,    0,    0,
    0,    0,    0, 1103,    0,    0,    0,    0,    0,    0,
  258,    0,    0,    0,    0, 1126, 1152,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,  376,    0,    0,  424,    0,    0,  490,  530,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,  630,    0,  758,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,
};
final static short yygindex[] = {                         0,
    0,   68,  365,  -82,   28,    0,    0,    0,    0,   -4,
  113,    0,  123,    0, -110,  -29,   -2,    2,  -96,  -95,
  -89, 1441,   10,   17,  591,  793,  133,  865, -175,   70,
  627,  -13,   -1, -170,  726,    0,  944,    0, 1062, 1063,
 1066,   12,  995,    0, 1021, -228,    0,  235,  869, 1043,
  349,  348,  -64,    0,    0,  873,
};
final static int YYTABLESIZE=1967;
static short yytable[];
static { yytable();}
static void yytable(){
yytable = new short[]{                         26,
  174,   26,  138,   27,   36,   27,   76,   26,  242,  237,
   70,   27,   26,  289,   71,   58,   27,  175,  208,    2,
  209,   67,  109,  110,  207,  115,  160,  259,  155,  215,
   26,   26,   82,   91,   27,   27,  208,   64,  209,  210,
  211,  398,  207,  330,  116,  170,  212,  101,  373,  120,
  119,  127,  111,  111,  480,  142,  321,  138,  323,   96,
   26,  128,   56,  169,   27,   60,   26,  108,  207,  187,
   27,   34,    7,  172,  122,  118,  233,   59,  259,   65,
  134,  135,   84,  102,  292,   26,  136,  195,  103,   27,
   64,  171,   42,  234,  148,  176,   64,   85,  164,  154,
   88,  125,  291,   42,  111,  200,  126,   42,   86,   42,
  142,  131,  319,  128,  131,  250,   81,   98,  125,   99,
   26,   90,  248,  126,   27,   98,   42,   99,  131,   42,
  128,  196,   65,  208,   28,   83,   28,  209,   65,  378,
  191,  152,   28,   93,  201,   28,  241,   28,   92,  216,
   64,   11,   12,    1,  155,   26,   26,   26,   26,   27,
   27,   27,   27,  268,  269,   28,   28,  407,  200,   94,
  232,  319,  235,  200,   97,  111,  220,  238,  372,  219,
   98,  329,   99,  372,  133,  222,  222,  222,  222,  133,
  104,  372,   65,  249,   43,   28,  397,  133,  296,   42,
   98,   28,   99,  105,   75,   35,  245,  139,  123,  397,
  247,  121,  258,  252,   45,   46,   44,  352,   26,  354,
   28,   26,   27,   26,  200,   27,  279,   27,   35,  281,
   81,  282,   57,  200,  284,   11,   12,   26,  208,   26,
  209,   27,  377,   27,  207,  138,  159,  138,  266,  210,
  211,  271,  188,  222,  502,   28,  212,  199,   11,   12,
   11,   12,  214,  301,   26,   26,  525,  186,   27,   27,
  138,  129,  201,   26,  372,  318,  305,   27,  111,   54,
  133,   55,   26,  106,   26,  107,   27,  124,   27,  218,
   28,   28,   28,   28,  271,  222,  349,  130,  142,  526,
  142,  131,  372,  222,   37,   38,   36,  190,  133,   10,
   26,  178,   42,  179,   27,  153,   38,  158,  334,   37,
   38,   37,   38,  142,  161,  257,  349,   45,   46,   44,
  218,  167,  218,  168,  218,  350,  391,  111,   37,   38,
  222,  153,   38,  208,  173,  123,  123,  209,  218,  218,
  218,  218,  177,   28,  180,  364,   28,  123,   28,  276,
  277,  375,  179,  380,  182,  384,   16,  239,   16,  313,
  314,  181,   28,  386,   28,  392,  300,  121,  183,   80,
  368,  369,   49,  391,  184,  199,  409,  435,  436,  391,
  391,  437,  438,  225,  227,  228,  216,   16,   80,   28,
   28,  464,  436,  372,  185,  452,  364,  456,   28,  133,
  194,   37,   38,  192,  218,  465,  438,   28,  422,   28,
  391,  397,  431,   39,   40,   41,  170,   20,  440,  442,
   75,  433,  203,  203,  452,  456,  372,  216,  179,  216,
  391,  216,  133,  391,  222,   28,  162,  163,  348,  165,
  166,  197,   80,  213,  397,  216,  216,  216,  216,  469,
  275,  198,   95,  218,  217,  229,   42,  230,  217,  391,
  391,  391,  231,  236,  374,  239,  379,  240,  383,  243,
   26,   45,   46,   44,   27,  222,  222,  222,  390,  222,
  246,  222,  239,  238,  255,  260,  261,  391,  391,  408,
   50,  262,  308,  222,  222,  222,  222,  272,  511,  217,
  315,  217,  263,  217,  121,  121,  280,  278,  283,   49,
   49,  216,  166,  287,   37,   38,  121,  217,  217,  217,
  217,   49,  290,  294,  293,  430,   39,   40,   41,  295,
  297,  439,  441,  298,  302,  309,  218,  339,   51,  218,
  218,  218,  218,  218,  218,  218,  218,  190,  218,  218,
  218,  218,  218,  218,  218,  218,  218,  218,  218,  222,
  179,  303,  468,  179,  310,  179,  179,  179,  179,  179,
  179,  304,  311,  312,  316,  179,  179,  179,  179,  179,
  179,  179,  179,  217,  317,   60,  322,  324,  132,  184,
  325,  326,    7,  327,  133,   61,  328,  331,  335,  332,
  134,  135,  337,   62,   52,   28,  136,  336,  238,  338,
  340,  510,  341,  191,  239,  342,  344,  239,  343,  239,
  239,  239,  239,  239,  239,  345,   66,   50,   50,  239,
  239,  239,  239,  239,  239,  239,  239,  166,  135,   50,
  353,  355,  356,  216,   53,  357,  216,  216,  216,  216,
  216,  216,  216,  216,  358,  216,  216,  216,  216,  216,
  216,  216,  216,  216,  216,  216,  359,  137,   37,   38,
  360,  363,  190,  381,  371,   51,   51,  367,  370,   66,
   39,   40,   41,  387,  393,   66,  394,   51,  388,  395,
  396,  222,   20,  402,  222,  222,  222,  222,  222,  222,
  222,  222,  403,  222,  222,  222,  222,  222,  222,  222,
  222,  222,  222,  222,  184,  217,   16,  404,  217,  217,
  217,  217,  217,  217,  217,  217,  137,  217,  217,  217,
  217,  217,  217,  217,  217,  217,  217,  217,  191,   66,
  238,   52,   52,  238,   54,  238,  238,  238,  238,  238,
  238,   20,  405,   52,  142,  238,  238,  238,  238,  238,
  238,  238,  238,  135,  406,  410,  411,  412,  414,  166,
  415,  416,  166,  417,  166,  166,  166,  166,  372,  166,
  418,   53,   53,  140,  166,  166,  166,  166,  166,  166,
  166,  166,  137,   53,  423,  421,  424,  425,  142,  426,
  427,  428,  429,  432,  190,  434,  444,  190,  443,  190,
  190,  190,  190,  142,  190,  445,  446,   20,  447,  190,
  190,  190,  190,  190,  190,  190,  190,  140,  448,   60,
  449,  454,    6,  458,  459,  460,    7,  461,  462,   61,
  463,   16,  140,  466,    9,   10,  184,   62,  471,  184,
   13,  184,  184,  184,  184,  483,  184,  472,  485,  474,
  475,  184,  184,  184,  184,  184,  184,  184,  184,  476,
  191,  477,   55,  191,  489,  191,  191,  191,  191,  142,
  191,   54,   54,  478,  479,  191,  191,  191,  191,  191,
  191,  191,  191,   54,  486,  135,  484,  504,  135,  490,
  493,  117,  135,  135,  135,   42,  494,  495,  140,  244,
  135,  135,  496,   42,  135,  135,  135,  135,  497,  505,
   45,   46,   44,  498,  137,  503,  506,  137,   45,   46,
   44,  137,  137,  137,  251,   33,  507,  221,   42,  137,
  137,  508,  509,  137,  137,  137,  137,  512,  513,   20,
  514,  401,   20,   45,   46,   44,   20,   20,   20,   60,
  515,   63,    6,  516,   20,   20,    7,  517,   20,   20,
   20,   20,  521,   16,    9,   10,   16,  518,  347,  333,
   16,   16,   16,   42,  522,   98,  385,   99,   16,   16,
   42,  523,   16,   16,   16,   16,  519,  520,   45,   46,
   44,  524,   45,   46,   44,   45,   46,   44,   42,   55,
   55,  142,  132,  389,  142,  453,  170,  457,  142,  142,
  142,   55,    4,   45,   46,   44,  142,  142,  112,  116,
  142,  142,  142,  142,  221,  173,   94,  103,   99,  186,
  140,  101,   56,  140,  382,  306,   57,  140,  140,  140,
  488,   60,  254,  492,  207,  140,  140,  361,    7,  140,
  140,  140,  140,  193,   72,   73,  134,  135,   74,    5,
  150,   60,    6,  123,    6,  226,    7,    8,    7,  267,
  100,  264,    0,    0,    9,   10,    9,   10,   11,   12,
   13,   14,   13,    0,  451,   60,    0,    0,    6,    0,
    0,    0,    7,  453,  457,   61,  467,  488,  492,    0,
    9,   10,   60,   62,  455,  132,   13,   37,   38,    7,
    0,  133,    0,    0,  221,   37,   38,  134,  135,   39,
   40,   41,    0,  346,  481,    0,    0,   39,   40,   41,
   60,    0,    0,  132,  482,   60,    0,    7,  132,    0,
   37,   38,    7,    0,  133,  134,  135,    0,    0,    0,
  134,  135,   39,   40,   41,   88,  136,    0,   60,    0,
    0,    6,    0,  273,  274,    7,    0,    0,   60,    0,
    0,  132,    0,    9,   10,    7,    0,  133,   76,   13,
    0,    0,    0,  134,  135,   37,   38,    0,    0,  136,
    0,    0,   37,   38,    0,    0,    0,   39,   40,   41,
    0,   39,   40,   41,   39,   40,   41,   89,    0,    0,
   37,   38,    0,    0,    0,    0,    0,    0,   60,    0,
    0,  132,   39,   40,   41,    7,    0,  133,   60,    0,
   77,  132,    0,  134,  135,    7,    0,  133,   60,  346,
    0,  132,    0,  134,  135,    7,    0,  133,   60,  136,
    0,    6,    0,  134,  135,    7,   78,    0,   60,  346,
    0,  207,    0,    9,   10,    7,    0,    0,   60,   13,
    0,  207,    0,  134,  135,    7,    0,    0,    0,  136,
  137,    0,    0,  134,  135,    0,    0,   88,    0,  136,
   88,  265,   88,   88,   88,   88,   88,   88,    0,    0,
    0,    0,   88,   88,   88,   88,   88,   88,   88,   88,
   76,   79,    0,   76,    0,   76,   76,   76,   76,   76,
   76,   87,    0,    0,    0,   76,   76,   76,   76,   76,
   76,   76,   76,    0,    0,    0,    0,    0,    0,   89,
    0,    0,   89,    0,   89,   89,   89,   89,   89,   89,
   89,    0,    0,    0,   89,   89,   89,   89,   89,   89,
   89,   89,   77,    0,    0,   77,    0,   77,   77,   77,
   77,   77,   77,  151,    0,    0,    0,   77,   77,   77,
   77,   77,   77,   77,   77,    0,    0,    0,   78,    0,
    0,   78,    0,   78,   78,   78,   78,   78,   78,  288,
    0,    0,    0,   78,   78,   78,   78,   78,   78,   78,
   78,    0,    5,    0,    0,  132,    0,    0,    0,    7,
    8,  133,  376,   60,    0,    0,    6,  134,  135,    0,
    7,   11,   12,  136,   14,    0,    0,    0,    9,   10,
    0,    0,    0,    5,   13,  158,    6,    0,    0,    0,
    7,    8,    0,    5,    0,    0,    6,    0,    9,   10,
    7,    8,   11,   12,   13,   14,    0,  162,    9,   10,
    0,    0,   11,   12,   13,   14,    0,    0,    0,    0,
    0,    0,    5,    0,    0,    6,  159,    0,    0,    7,
    8,    0,    0,    0,    0,    0,    0,    9,   10,    0,
    0,   11,   12,   13,   14,    5,  256,    0,    6,    0,
    0,    0,    7,    8,    0,    0,    0,    0,    0,    0,
    9,   10,    0,  299,   11,   12,   13,   14,    0,    0,
    0,    5,    0,    0,    6,    0,    0,    0,    7,    8,
  175,    0,    0,    0,    0,    0,    9,   10,    0,    0,
   11,   12,   13,   14,    5,    0,    0,  207,    0,  125,
    0,    7,    8,    0,    0,    0,    0,    0,    0,  134,
  135,    0,    0,   11,   12,  136,   14,  158,  189,    0,
  158,    0,    0,    0,  158,    0,  158,  158,    0,    0,
    0,    0,  158,  158,  158,  158,    0,  253,  158,  162,
    0,    0,  162,    0,    0,    0,  162,    0,  162,  162,
    0,    0,    0,    0,  162,  162,  162,  162,  159,  205,
  162,  159,    0,    0,    0,  159,    0,  159,  159,  487,
    0,    0,    0,  159,  159,  159,  159,    0,   60,  159,
    0,  132,    0,    0,    0,    7,  491,  133,   61,    0,
    0,    0,    0,  134,  135,   60,   62,  270,  132,  136,
    0,    0,    7,    0,  133,   61,    0,    0,  307,    0,
  134,  135,  175,   62,    0,  175,  136,    0,    0,  175,
    0,    0,  175,    0,    0,  487,    0,  175,  175,  171,
  175,   60,    0,  175,    6,  491,    0,    0,    7,    0,
    0,   61,    0,    0,    0,    0,    9,   10,    0,   62,
   60,    0,   13,    6,    0,    0,    0,    7,    0,    0,
   61,    0,    0,    0,    0,    9,   10,    0,   62,   60,
    0,   13,  207,    0,    0,    0,    7,    0,    0,   61,
    0,    0,    0,    0,  134,  135,    0,   62,    0,    0,
  136,  205,    0,    0,  205,    0,  200,  200,  205,    0,
    0,   60,    0,    0,  132,    0,  205,  205,    7,    0,
  133,    0,  205,    0,    0,    0,  134,  135,   60,    0,
    0,  132,  346,    0,    0,    7,    0,  133,    0,   60,
    0,    0,    6,  134,  135,    0,    7,    0,    0,  346,
   60,    0,  413,    6,    9,   10,    0,    7,    0,    0,
   13,    0,    0,    0,  419,    9,   10,   60,  420,    0,
  207,   13,    0,    0,    7,    0,    0,   60,    0,    0,
  207,    0,  134,  135,    7,    0,    0,    5,  136,    0,
  132,    0,  134,  135,    7,    8,  133,    0,  136,    0,
    0,    0,  134,  135,  450,    0,   11,   12,  136,   14,
    0,    5,    0,   60,    6,    0,  132,    0,    7,    8,
    7,  470,  133,    0,    0,  473,    9,   10,  134,  135,
   11,   12,   13,   14,  136,    0,    0,    0,    5,    0,
   60,  207,    0,  132,    0,    7,    8,    7,    0,  133,
  499,  500,  501,  134,  135,  134,  135,   11,   12,  136,
   14,  346,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,  527,  528,
};
}
static short yycheck[];
static { yycheck(); }
static void yycheck() {
yycheck = new short[] {                          2,
   41,    4,   85,    2,   44,    4,   59,   10,  123,  180,
   13,   10,   15,  242,   13,   40,   15,   58,   41,  123,
   41,   10,   40,   41,   41,   41,   41,  203,   93,  140,
   33,   34,   59,   35,   33,   34,   59,   10,   59,  136,
  136,  123,   59,  123,   58,   41,  136,   49,  125,   58,
   59,  258,   57,   58,  123,   85,  285,  140,  287,   43,
   63,  268,   40,   59,   63,  257,   69,   41,  260,   59,
   69,    4,  264,   41,   63,   59,   41,   40,  254,   10,
  272,  273,   59,   42,   41,   88,  278,   40,   47,   88,
   63,   59,   45,   58,   85,  109,   69,  123,  100,   41,
   33,   41,   59,   45,  109,  135,   41,   45,   58,   45,
  140,   41,  283,   41,   44,   41,  257,   43,   58,   45,
  123,   59,   41,   58,  123,   43,   45,   45,   58,   45,
   58,  133,   63,  136,    2,   23,    4,  136,   69,  125,
  124,   59,   10,   40,  135,   13,  261,   15,   36,  140,
  123,  276,  277,  257,  219,  158,  159,  160,  161,  158,
  159,  160,  161,  262,  263,   33,   34,  125,  198,  258,
  175,  342,  177,  203,   41,  180,   41,  182,  260,   44,
   43,  261,   45,  260,  266,  158,  159,  160,  161,  266,
   41,  260,  123,  195,   40,   63,  278,  266,   41,   45,
   43,   69,   45,   41,  257,  268,  190,   85,  125,  278,
  194,   59,  203,  197,   60,   61,   62,  328,  221,  330,
   88,  224,  221,  226,  254,  224,  231,  226,  268,  234,
  257,  236,  257,  263,  239,  276,  277,  240,  261,  242,
  261,  240,  353,  242,  261,  328,  261,  330,  221,  346,
  346,  224,  120,  226,  483,  123,  346,  135,  276,  277,
  276,  277,  140,  254,  267,  268,  123,  257,  267,  268,
  353,   59,  263,  276,  260,  280,  260,  276,  283,  257,
  266,  259,  285,  257,  287,  259,  285,  274,  287,    0,
  158,  159,  160,  161,  267,  268,  326,   44,  328,  123,
  330,   59,  260,  276,  257,  258,   44,   40,  266,  273,
  313,  257,   45,    0,  313,  257,  258,  261,  302,  257,
  258,  257,  258,  353,  261,  203,  356,   60,   61,   62,
   41,   59,   43,   59,   45,  326,  366,  342,  257,  258,
  313,  257,  258,  346,   59,  262,  263,  346,   59,   60,
   61,   62,   58,  221,   44,  346,  224,  274,  226,  262,
  263,  352,   41,  354,   58,  356,    2,    0,    4,  262,
  263,  257,  240,  357,  242,  366,  254,  125,   41,   15,
  262,  263,  125,  413,  261,  263,  377,  262,  263,  419,
  420,  262,  263,  159,  160,  161,    0,   33,   34,  267,
  268,  262,  263,  260,   41,  435,  397,  437,  276,  266,
   40,  257,  258,  258,  125,  262,  263,  285,  402,  287,
  450,  278,  413,  269,  270,  271,   58,   59,  419,  420,
  257,  415,  262,  263,  464,  465,  260,   41,  125,   43,
  470,   45,  266,  473,    0,  313,   98,   99,  326,  102,
  103,   40,   88,  125,  278,   59,   60,   61,   62,  450,
  226,  123,   41,   58,  125,   59,   45,   59,    0,  499,
  500,  501,   58,   58,  352,   58,  354,  123,  356,   59,
  483,   60,   61,   62,  483,   41,   42,   43,  366,   45,
   41,   47,  125,    0,  274,   40,  125,  527,  528,  377,
  125,  125,  268,   59,   60,   61,   62,  263,  499,   41,
  276,   43,  273,   45,  262,  263,   58,  263,   44,  262,
  263,  125,    0,  123,  257,  258,  274,   59,   60,   61,
   62,  274,   59,   41,   59,  413,  269,  270,  271,   59,
  261,  419,  420,   41,   40,   59,  257,  313,  125,  260,
  261,  262,  263,  264,  265,  266,  267,    0,  269,  270,
  271,  272,  273,  274,  275,  276,  277,  278,  279,  125,
  257,  125,  450,  260,   59,  262,  263,  264,  265,  266,
  267,  125,  263,   59,   59,  272,  273,  274,  275,  276,
  277,  278,  279,  125,   59,  257,  125,  125,  260,    0,
   59,  261,  264,   59,  266,  267,  123,  125,   41,  125,
  272,  273,  263,  275,  125,  483,  278,  274,  125,   59,
   59,  499,  263,    0,  257,   44,  125,  260,   59,  262,
  263,  264,  265,  266,  267,   59,   10,  262,  263,  272,
  273,  274,  275,  276,  277,  278,  279,  125,    0,  274,
  123,   41,  261,  257,  125,   40,  260,  261,  262,  263,
  264,  265,  266,  267,   59,  269,  270,  271,  272,  273,
  274,  275,  276,  277,  278,  279,  263,    0,  257,  258,
   59,   59,  125,   59,  262,  262,  263,  263,  263,   63,
  269,  270,  271,   59,   59,   69,  123,  274,  272,   59,
   59,  257,    0,   40,  260,  261,  262,  263,  264,  265,
  266,  267,   59,  269,  270,  271,  272,  273,  274,  275,
  276,  277,  278,  279,  125,  257,    0,  125,  260,  261,
  262,  263,  264,  265,  266,  267,   59,  269,  270,  271,
  272,  273,  274,  275,  276,  277,  278,  279,  125,  123,
  257,  262,  263,  260,  125,  262,  263,  264,  265,  266,
  267,   59,  125,  274,    0,  272,  273,  274,  275,  276,
  277,  278,  279,  125,   59,   59,  125,  125,   41,  257,
   40,  262,  260,  125,  262,  263,  264,  265,  260,  267,
  125,  262,  263,    0,  272,  273,  274,  275,  276,  277,
  278,  279,  125,  274,   59,  263,   59,   59,   44,  125,
  125,   59,   59,   59,  257,  123,   41,  260,   59,  262,
  263,  264,  265,   59,  267,   59,   59,  125,  125,  272,
  273,  274,  275,  276,  277,  278,  279,   44,  125,  257,
   41,   59,  260,   59,  125,  125,  264,  125,  125,  267,
  261,  125,   59,  261,  272,  273,  257,  275,  263,  260,
  278,  262,  263,  264,  265,  123,  267,  263,  125,  263,
  263,  272,  273,  274,  275,  276,  277,  278,  279,  263,
  257,  263,  125,  260,   59,  262,  263,  264,  265,  125,
  267,  262,  263,  263,  263,  272,  273,  274,  275,  276,
  277,  278,  279,  274,  125,  257,  263,  263,  260,   59,
   59,   41,  264,  265,  266,   45,   59,   59,  125,   41,
  272,  273,   59,   45,  276,  277,  278,  279,   59,  263,
   60,   61,   62,   59,  257,   59,  263,  260,   60,   61,
   62,  264,  265,  266,   41,  123,  125,  123,   45,  272,
  273,  263,  125,  276,  277,  278,  279,  125,   59,  257,
   59,  371,  260,   60,   61,   62,  264,  265,  266,  257,
   59,  123,  260,  263,  272,  273,  264,   59,  276,  277,
  278,  279,   59,  257,  272,  273,  260,  263,  123,   41,
  264,  265,  266,   45,   59,   43,   41,   45,  272,  273,
   45,  262,  276,  277,  278,  279,  125,  125,   60,   61,
   62,  262,   60,   61,   62,   60,   61,   62,   45,  262,
  263,  257,  257,  125,  260,  435,   58,  437,  264,  265,
  266,  274,    0,   60,   61,   62,  272,  273,  123,  123,
  276,  277,  278,  279,  123,  274,  274,  274,  274,  125,
  257,  274,  262,  260,  123,  263,  262,  264,  265,  266,
  470,  257,  198,  473,  260,  272,  273,  342,  264,  276,
  277,  278,  279,  130,   13,   13,  272,  273,   13,  257,
   86,  257,  260,   63,  260,  261,  264,  265,  264,  221,
   48,  219,   -1,   -1,  272,  273,  272,  273,  276,  277,
  278,  279,  278,   -1,  123,  257,   -1,   -1,  260,   -1,
   -1,   -1,  264,  523,  524,  267,  125,  527,  528,   -1,
  272,  273,  257,  275,  123,  260,  278,  257,  258,  264,
   -1,  266,   -1,   -1,  123,  257,  258,  272,  273,  269,
  270,  271,   -1,  278,  123,   -1,   -1,  269,  270,  271,
  257,   -1,   -1,  260,  123,  257,   -1,  264,  260,   -1,
  257,  258,  264,   -1,  266,  272,  273,   -1,   -1,   -1,
  272,  273,  269,  270,  271,  125,  278,   -1,  257,   -1,
   -1,  260,   -1,  262,  263,  264,   -1,   -1,  257,   -1,
   -1,  260,   -1,  272,  273,  264,   -1,  266,  125,  278,
   -1,   -1,   -1,  272,  273,  257,  258,   -1,   -1,  278,
   -1,   -1,  257,  258,   -1,   -1,   -1,  269,  270,  271,
   -1,  269,  270,  271,  269,  270,  271,  125,   -1,   -1,
  257,  258,   -1,   -1,   -1,   -1,   -1,   -1,  257,   -1,
   -1,  260,  269,  270,  271,  264,   -1,  266,  257,   -1,
  125,  260,   -1,  272,  273,  264,   -1,  266,  257,  278,
   -1,  260,   -1,  272,  273,  264,   -1,  266,  257,  278,
   -1,  260,   -1,  272,  273,  264,  125,   -1,  257,  278,
   -1,  260,   -1,  272,  273,  264,   -1,   -1,  257,  278,
   -1,  260,   -1,  272,  273,  264,   -1,   -1,   -1,  278,
  125,   -1,   -1,  272,  273,   -1,   -1,  257,   -1,  278,
  260,  125,  262,  263,  264,  265,  266,  267,   -1,   -1,
   -1,   -1,  272,  273,  274,  275,  276,  277,  278,  279,
  257,  125,   -1,  260,   -1,  262,  263,  264,  265,  266,
  267,  125,   -1,   -1,   -1,  272,  273,  274,  275,  276,
  277,  278,  279,   -1,   -1,   -1,   -1,   -1,   -1,  257,
   -1,   -1,  260,   -1,  262,  263,  264,  265,  266,  267,
  125,   -1,   -1,   -1,  272,  273,  274,  275,  276,  277,
  278,  279,  257,   -1,   -1,  260,   -1,  262,  263,  264,
  265,  266,  267,  125,   -1,   -1,   -1,  272,  273,  274,
  275,  276,  277,  278,  279,   -1,   -1,   -1,  257,   -1,
   -1,  260,   -1,  262,  263,  264,  265,  266,  267,  125,
   -1,   -1,   -1,  272,  273,  274,  275,  276,  277,  278,
  279,   -1,  257,   -1,   -1,  260,   -1,   -1,   -1,  264,
  265,  266,  125,  257,   -1,   -1,  260,  272,  273,   -1,
  264,  276,  277,  278,  279,   -1,   -1,   -1,  272,  273,
   -1,   -1,   -1,  257,  278,  125,  260,   -1,   -1,   -1,
  264,  265,   -1,  257,   -1,   -1,  260,   -1,  272,  273,
  264,  265,  276,  277,  278,  279,   -1,  125,  272,  273,
   -1,   -1,  276,  277,  278,  279,   -1,   -1,   -1,   -1,
   -1,   -1,  257,   -1,   -1,  260,  125,   -1,   -1,  264,
  265,   -1,   -1,   -1,   -1,   -1,   -1,  272,  273,   -1,
   -1,  276,  277,  278,  279,  257,  125,   -1,  260,   -1,
   -1,   -1,  264,  265,   -1,   -1,   -1,   -1,   -1,   -1,
  272,  273,   -1,  125,  276,  277,  278,  279,   -1,   -1,
   -1,  257,   -1,   -1,  260,   -1,   -1,   -1,  264,  265,
  125,   -1,   -1,   -1,   -1,   -1,  272,  273,   -1,   -1,
  276,  277,  278,  279,  257,   -1,   -1,  260,   -1,  125,
   -1,  264,  265,   -1,   -1,   -1,   -1,   -1,   -1,  272,
  273,   -1,   -1,  276,  277,  278,  279,  257,  125,   -1,
  260,   -1,   -1,   -1,  264,   -1,  266,  267,   -1,   -1,
   -1,   -1,  272,  273,  274,  275,   -1,  125,  278,  257,
   -1,   -1,  260,   -1,   -1,   -1,  264,   -1,  266,  267,
   -1,   -1,   -1,   -1,  272,  273,  274,  275,  257,  125,
  278,  260,   -1,   -1,   -1,  264,   -1,  266,  267,  125,
   -1,   -1,   -1,  272,  273,  274,  275,   -1,  257,  278,
   -1,  260,   -1,   -1,   -1,  264,  125,  266,  267,   -1,
   -1,   -1,   -1,  272,  273,  257,  275,  125,  260,  278,
   -1,   -1,  264,   -1,  266,  267,   -1,   -1,  125,   -1,
  272,  273,  257,  275,   -1,  260,  278,   -1,   -1,  264,
   -1,   -1,  267,   -1,   -1,  125,   -1,  272,  273,  274,
  275,  257,   -1,  278,  260,  125,   -1,   -1,  264,   -1,
   -1,  267,   -1,   -1,   -1,   -1,  272,  273,   -1,  275,
  257,   -1,  278,  260,   -1,   -1,   -1,  264,   -1,   -1,
  267,   -1,   -1,   -1,   -1,  272,  273,   -1,  275,  257,
   -1,  278,  260,   -1,   -1,   -1,  264,   -1,   -1,  267,
   -1,   -1,   -1,   -1,  272,  273,   -1,  275,   -1,   -1,
  278,  257,   -1,   -1,  260,   -1,  262,  263,  264,   -1,
   -1,  257,   -1,   -1,  260,   -1,  272,  273,  264,   -1,
  266,   -1,  278,   -1,   -1,   -1,  272,  273,  257,   -1,
   -1,  260,  278,   -1,   -1,  264,   -1,  266,   -1,  257,
   -1,   -1,  260,  272,  273,   -1,  264,   -1,   -1,  278,
  257,   -1,  382,  260,  272,  273,   -1,  264,   -1,   -1,
  278,   -1,   -1,   -1,  394,  272,  273,  257,  398,   -1,
  260,  278,   -1,   -1,  264,   -1,   -1,  257,   -1,   -1,
  260,   -1,  272,  273,  264,   -1,   -1,  257,  278,   -1,
  260,   -1,  272,  273,  264,  265,  266,   -1,  278,   -1,
   -1,   -1,  272,  273,  434,   -1,  276,  277,  278,  279,
   -1,  257,   -1,  257,  260,   -1,  260,   -1,  264,  265,
  264,  451,  266,   -1,   -1,  455,  272,  273,  272,  273,
  276,  277,  278,  279,  278,   -1,   -1,   -1,  257,   -1,
  257,  260,   -1,  260,   -1,  264,  265,  264,   -1,  266,
  480,  481,  482,  272,  273,  272,  273,  276,  277,  278,
  279,  278,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,  525,  526,
};
}
final static short YYFINAL=3;
final static short YYMAXTOKEN=279;
final static String yyname[] = {
"end-of-file",null,null,null,null,null,null,null,null,null,null,null,null,null,
null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,
null,null,null,null,null,null,null,null,null,null,"'('","')'","'*'","'+'","','",
"'-'",null,"'/'",null,null,null,null,null,null,null,null,null,null,"':'","';'",
"'<'","'='","'>'",null,null,null,null,null,null,null,null,null,null,null,null,
null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,
null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,
null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,
"'{'",null,"'}'",null,null,null,null,null,null,null,null,null,null,null,null,
null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,
null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,
null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,
null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,
null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,
null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,
null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,
null,null,null,null,null,null,null,"ID","CTE","CADENA","IF","THEN","ELSE",
"ENDIF","OUT","FUN","RETURN","BREAK","ASIGNACION","COMP_MAYOR_IGUAL",
"COMP_MENOR_IGUAL","COMP_DISTINTO","WHEN","DO","UNTIL","CONTINUE","DOUBLE64",
"UINT16","DEFER","CONST",
};
final static String yyrule[] = {
"$accept : programa",
"programa : nombre_programa '{' sentencias '}'",
"programa : '{' sentencias '}'",
"programa : nombre_programa sentencias '}'",
"programa : nombre_programa '{' sentencias",
"programa : nombre_programa '{' '}'",
"nombre_programa : ID",
"sentencias : sentencia",
"sentencias : sentencias sentencia",
"sentencia : sentencia_declarativa",
"sentencia : sentencia_ejecutable",
"sentencia_declarativa : sentencia_declarativa_variables",
"sentencia_declarativa : funcion_con_return",
"sentencia_declarativa : funcion_sin_return",
"sentencia_declarativa : declaracion_constantes",
"sentencia_declarativa_variables : tipo lista_de_variables ';'",
"sentencia_declarativa_variables : tipo lista_de_variables",
"sentencia_declarativa_variables : lista_de_variables ';'",
"sentencia_declarativa_variables : tipo ';'",
"lista_de_variables : ID ',' lista_de_variables",
"lista_de_variables : ID",
"funcion_con_return : encabezado_funcion '{' sentencia_return '}'",
"funcion_con_return : encabezado_funcion '{' sentencias_funcion sentencia_return '}'",
"funcion_con_return : encabezado_funcion '{' '}'",
"sentencias_funcion : sentencia_funcion",
"sentencias_funcion : sentencias_funcion sentencia_funcion",
"sentencia_funcion : sentencia_declarativa",
"sentencia_funcion : sentencia_ejecutable_funcion",
"sentencia_ejecutable_funcion : asignacion",
"sentencia_ejecutable_funcion : DEFER asignacion",
"sentencia_ejecutable_funcion : imprimir",
"sentencia_ejecutable_funcion : DEFER imprimir",
"sentencia_ejecutable_funcion : sentencia_when_con_return",
"sentencia_ejecutable_funcion : DEFER sentencia_when_con_return",
"sentencia_ejecutable_funcion : sentencia_do_con_return",
"sentencia_ejecutable_funcion : DEFER sentencia_do_con_return",
"sentencia_ejecutable_funcion : sentencia_seleccion_simple_con_return",
"sentencia_ejecutable_funcion : DEFER sentencia_seleccion_simple_con_return",
"sentencias_ejecutables_funcion : sentencia_ejecutable_funcion",
"sentencias_ejecutables_funcion : sentencias_ejecutables_funcion sentencia_ejecutable_funcion",
"funcion_sin_return : encabezado_funcion '{' sentencia_seleccion_compuesta_con_return '}'",
"funcion_sin_return : encabezado_funcion '{' sentencias_funcion sentencia_seleccion_compuesta_con_return '}'",
"sentencia_seleccion_compuesta_con_return : IF '(' condicion ')' THEN sentencia_seleccion_compuesta_con_return_simple ELSE sentencia_seleccion_compuesta_con_return_simple ENDIF ';'",
"sentencia_seleccion_compuesta_con_return : IF '(' condicion ')' THEN '{' sentencias_ejecutables_funcion sentencia_return '}' ELSE sentencia_seleccion_compuesta_con_return_simple ENDIF ';'",
"sentencia_seleccion_compuesta_con_return : IF '(' condicion ')' THEN '{' sentencias_ejecutables_funcion sentencia_seleccion_compuesta_con_return '}' ELSE sentencia_seleccion_compuesta_con_return_simple ENDIF ';'",
"sentencia_seleccion_compuesta_con_return : IF '(' condicion ')' THEN sentencia_seleccion_compuesta_con_return_simple ELSE '{' sentencias_ejecutables_funcion sentencia_return '}' ENDIF ';'",
"sentencia_seleccion_compuesta_con_return : IF '(' condicion ')' THEN sentencia_seleccion_compuesta_con_return_simple ELSE '{' sentencias_ejecutables_funcion sentencia_seleccion_compuesta_con_return '}' ENDIF ';'",
"sentencia_seleccion_compuesta_con_return : IF '(' condicion ')' THEN '{' sentencias_ejecutables_funcion sentencia_return '}' ELSE '{' sentencias_ejecutables_funcion sentencia_seleccion_compuesta_con_return_simple '}' ENDIF ';'",
"sentencia_seleccion_compuesta_con_return : IF '(' condicion ')' THEN '{' sentencias_ejecutables_funcion sentencia_seleccion_compuesta_con_return '}' ELSE '{' sentencias_ejecutables_funcion sentencia_seleccion_compuesta_con_return_simple '}' ENDIF ';'",
"sentencia_seleccion_compuesta_con_return : IF '(' condicion ')' THEN sentencia_seleccion_compuesta_con_return_simple ELSE sentencia_seleccion_compuesta_con_return_simple ENDIF",
"sentencia_seleccion_compuesta_con_return : IF '(' condicion ')' THEN '{' sentencias_ejecutables_funcion sentencia_return '}' ELSE sentencia_seleccion_compuesta_con_return_simple ENDIF",
"sentencia_seleccion_compuesta_con_return : IF '(' condicion ')' THEN '{' sentencias_ejecutables_funcion sentencia_seleccion_compuesta_con_return '}' ELSE sentencia_seleccion_compuesta_con_return_simple ENDIF",
"sentencia_seleccion_compuesta_con_return : IF '(' condicion ')' THEN sentencia_seleccion_compuesta_con_return_simple ELSE '{' sentencias_ejecutables_funcion sentencia_return '}' ENDIF",
"sentencia_seleccion_compuesta_con_return : IF '(' condicion ')' THEN sentencia_seleccion_compuesta_con_return_simple ELSE '{' sentencias_ejecutables_funcion sentencia_seleccion_compuesta_con_return '}' ENDIF",
"sentencia_seleccion_compuesta_con_return : IF '(' condicion ')' THEN '{' sentencias_ejecutables_funcion sentencia_return '}' ELSE '{' sentencias_ejecutables_funcion sentencia_seleccion_compuesta_con_return_simple '}' ENDIF",
"sentencia_seleccion_compuesta_con_return : IF '(' condicion ')' THEN '{' sentencias_ejecutables_funcion sentencia_seleccion_compuesta_con_return '}' ELSE '{' sentencias_ejecutables_funcion sentencia_seleccion_compuesta_con_return_simple '}' ENDIF",
"sentencia_seleccion_compuesta_con_return_simple : sentencia_return",
"sentencia_seleccion_compuesta_con_return_simple : sentencia_seleccion_compuesta_con_return",
"sentencia_seleccion_compuesta_con_return_simple : DEFER sentencia_seleccion_compuesta_con_return",
"sentencia_seleccion_simple_con_return : IF '(' condicion ')' THEN sentencia_return ENDIF ';'",
"sentencia_seleccion_simple_con_return : IF '(' condicion ')' THEN sentencia_seleccion_compuesta_con_return ENDIF ';'",
"sentencia_seleccion_simple_con_return : IF '(' condicion ')' THEN sentencia_ejecutable_funcion ENDIF ';'",
"sentencia_seleccion_simple_con_return : IF '(' condicion ')' THEN '{' sentencias_ejecutables_funcion sentencia_return '}' ENDIF ';'",
"sentencia_seleccion_simple_con_return : IF '(' condicion ')' THEN '{' sentencias_ejecutables_funcion sentencia_seleccion_compuesta_con_return '}' ENDIF ';'",
"sentencia_seleccion_simple_con_return : IF '(' condicion ')' THEN '{' sentencias_ejecutables_funcion sentencia_return '}' ELSE '{' sentencias_ejecutables_funcion '}' ENDIF ';'",
"sentencia_seleccion_simple_con_return : IF '(' condicion ')' THEN '{' sentencias_ejecutables_funcion sentencia_return '}' ELSE sentencia_ejecutable_funcion ENDIF ';'",
"sentencia_seleccion_simple_con_return : IF '(' condicion ')' THEN '{' sentencias_ejecutables_funcion sentencia_seleccion_compuesta_con_return '}' ELSE sentencia_ejecutable_funcion ENDIF ';'",
"sentencia_seleccion_simple_con_return : IF '(' condicion ')' THEN '{' sentencias_ejecutables_funcion sentencia_seleccion_compuesta_con_return '}' ELSE '{' sentencias_ejecutables_funcion '}' ENDIF ';'",
"sentencia_seleccion_simple_con_return : IF '(' condicion ')' THEN '{' sentencias_ejecutables_funcion '}' ELSE '{' sentencias_ejecutables_funcion sentencia_return '}' ENDIF ';'",
"sentencia_seleccion_simple_con_return : IF '(' condicion ')' THEN '{' sentencias_ejecutables_funcion '}' ELSE '{' sentencias_ejecutables_funcion sentencia_seleccion_compuesta_con_return '}' ENDIF ';'",
"sentencia_seleccion_simple_con_return : IF '(' condicion ')' THEN sentencia_ejecutable_funcion ELSE '{' sentencias_ejecutables_funcion sentencia_return '}' ENDIF ';'",
"sentencia_seleccion_simple_con_return : IF '(' condicion ')' THEN sentencia_ejecutable_funcion ELSE '{' sentencias_ejecutables_funcion sentencia_seleccion_compuesta_con_return '}' ENDIF ';'",
"sentencia_seleccion_simple_con_return : IF '(' condicion ')' THEN '{' sentencias_ejecutables_funcion '}' ELSE '{' sentencias_ejecutables_funcion '}' ENDIF ';'",
"sentencia_when_con_return : WHEN '(' condicion ')' THEN '{' sentencia_funcion '}' ';'",
"sentencia_when_con_return : WHEN '(' condicion ')' THEN '{' sentencia_funcion sentencia_return '}' ';'",
"sentencia_when_con_return : WHEN '(' condicion ')' THEN '{' sentencia_funcion sentencia_seleccion_compuesta_con_return '}' ';'",
"sentencia_when_con_return : WHEN '(' condicion ')' THEN '{' sentencia_funcion '}'",
"sentencia_when_con_return : WHEN '(' condicion ')' THEN '{' sentencia_funcion sentencia_return '}'",
"sentencia_when_con_return : WHEN '(' condicion ')' THEN '{' sentencia_funcion sentencia_seleccion_compuesta_con_return '}'",
"sentencia_when_con_return : WHEN '(' condicion ')' THEN '{' '}' ';'",
"sentencia_when_con_return : WHEN '(' ')' THEN '{' sentencia_funcion '}' ';'",
"sentencia_when_con_return : WHEN '(' ')' THEN '{' sentencia_funcion sentencia_return '}' ';'",
"sentencia_when_con_return : WHEN '(' ')' THEN '{' sentencia_funcion sentencia_seleccion_compuesta_con_return '}' ';'",
"sentencia_when_con_return : WHEN '(' condicion ')' '{' sentencia_funcion '}' ';'",
"sentencia_when_con_return : WHEN '(' condicion ')' '{' sentencia_funcion sentencia_return '}' ';'",
"sentencia_when_con_return : WHEN '(' condicion ')' '{' sentencia_funcion sentencia_seleccion_compuesta_con_return '}' ';'",
"sentencia_do_con_return : DO bloque_sentencias_ejecutables_do_con_return UNTIL '(' condicion ')' ';'",
"sentencia_do_con_return : etiqueta ':' DO bloque_sentencias_ejecutables_do_con_return UNTIL '(' condicion ')' ';'",
"sentencia_do_con_return : DO bloque_sentencias_ejecutables_do_con_return UNTIL '(' condicion ')'",
"sentencia_do_con_return : etiqueta ':' DO bloque_sentencias_ejecutables_do_con_return UNTIL '(' condicion ')'",
"sentencia_do_con_return : DO bloque_sentencias_ejecutables_do_con_return UNTIL '(' ')'",
"sentencia_do_con_return : etiqueta ':' DO bloque_sentencias_ejecutables_do_con_return UNTIL '(' ')'",
"bloque_sentencias_ejecutables_do_con_return : sentencia_return",
"bloque_sentencias_ejecutables_do_con_return : sentencia_seleccion_compuesta_con_return",
"bloque_sentencias_ejecutables_do_con_return : sentencias_ejecutables_do_funcion",
"bloque_sentencias_ejecutables_do_con_return : '{' sentencias_ejecutables_do_funcion sentencia_return '}'",
"bloque_sentencias_ejecutables_do_con_return : '{' sentencias_ejecutables_do_funcion sentencia_seleccion_compuesta_con_return '}'",
"bloque_sentencias_ejecutables_do_con_return : '{' sentencias_ejecutables_do_funcion '}'",
"bloque_sentencias_ejecutables_do_con_return : '{' '}'",
"bloque_sentencias_ejecutables_do_con_return : '{' sentencias_ejecutables_do_funcion sentencia_return",
"bloque_sentencias_ejecutables_do_con_return : sentencias_ejecutables_do_funcion sentencia_return '}'",
"bloque_sentencias_ejecutables_do_con_return : '{' sentencias_ejecutables_do_funcion sentencia_seleccion_compuesta_con_return",
"bloque_sentencias_ejecutables_do_con_return : sentencias_ejecutables_do_funcion sentencia_seleccion_compuesta_con_return '}'",
"bloque_sentencias_ejecutables_do_con_return : '{' sentencias_ejecutables_do_funcion",
"bloque_sentencias_ejecutables_do_con_return : sentencias_ejecutables_do_funcion '}'",
"sentencias_ejecutables_do_funcion : sentencia_ejecutable_do_funcion",
"sentencias_ejecutables_do_funcion : sentencias_ejecutables_do_funcion sentencia_ejecutable_do_funcion",
"sentencia_ejecutable_do_funcion : sentencia_ejecutable_funcion",
"sentencia_ejecutable_do_funcion : sentencia_break",
"sentencia_ejecutable_do_funcion : sentencia_continue",
"encabezado_funcion : FUN ID '(' ')' ':' tipo",
"encabezado_funcion : FUN ID '(' lista_de_parametros ')' ':' tipo",
"encabezado_funcion : FUN ID '(' ')' ':'",
"encabezado_funcion : FUN '(' ')' ':' tipo",
"encabezado_funcion : FUN ID ')' ':' tipo",
"encabezado_funcion : FUN ID '(' ':' tipo",
"encabezado_funcion : FUN ID '(' lista_de_parametros ')' ':'",
"encabezado_funcion : FUN '(' lista_de_parametros ')' ':' tipo",
"encabezado_funcion : FUN ID lista_de_parametros ')' ':' tipo",
"encabezado_funcion : FUN ID '(' lista_de_parametros ':' tipo",
"sentencia_return : RETURN '(' expresion ')' ';'",
"sentencia_return : RETURN '(' expresion ')'",
"sentencia_return : RETURN expresion ')'",
"sentencia_return : RETURN '(' expresion",
"sentencia_return : RETURN '(' ')' ';'",
"lista_de_parametros : parametro",
"lista_de_parametros : parametro ',' parametro",
"lista_de_parametros : parametro ',' parametro ',' lista_parametros_exceso",
"lista_parametros_exceso : parametro",
"lista_parametros_exceso : parametro ',' lista_parametros_exceso",
"parametro : tipo ID",
"parametro : tipo",
"$$1 :",
"parametro : $$1 ID",
"declaracion_constantes : CONST lista_declaracion_constantes ';'",
"declaracion_constantes : CONST lista_declaracion_constantes",
"declaracion_constantes : CONST ';'",
"lista_declaracion_constantes : declaracion_constante",
"lista_declaracion_constantes : declaracion_constante ',' lista_declaracion_constantes",
"declaracion_constante : ID ASIGNACION CTE",
"declaracion_constante : ID ASIGNACION",
"declaracion_constante : ID CTE",
"declaracion_constante : ID",
"sentencia_ejecutable : asignacion",
"sentencia_ejecutable : DEFER asignacion",
"sentencia_ejecutable : seleccion",
"sentencia_ejecutable : DEFER seleccion",
"sentencia_ejecutable : imprimir",
"sentencia_ejecutable : DEFER imprimir",
"sentencia_ejecutable : sentencia_when",
"sentencia_ejecutable : DEFER sentencia_when",
"sentencia_ejecutable : sentencia_do",
"sentencia_ejecutable : DEFER sentencia_do",
"sentencia_ejecutable_do : sentencia_ejecutable",
"sentencia_ejecutable_do : sentencia_break",
"sentencia_ejecutable_do : sentencia_continue",
"sentencia_break : BREAK ';'",
"sentencia_break : BREAK ':' etiqueta ';'",
"sentencia_break : BREAK",
"sentencia_break : BREAK ':' etiqueta",
"sentencia_break : BREAK ':' ';'",
"sentencia_continue : CONTINUE ';'",
"sentencia_continue : CONTINUE",
"sentencia_do : sentencia_do_simple",
"sentencia_do : etiqueta ':' sentencia_do_simple",
"sentencia_do_simple : DO bloque_sentencias_ejecutables_do UNTIL '(' condicion ')' ';'",
"sentencia_do_simple : DO bloque_sentencias_ejecutables_do UNTIL '(' condicion ')'",
"sentencia_do_simple : DO bloque_sentencias_ejecutables_do UNTIL '(' ')' ';'",
"sentencia_do_simple : DO bloque_sentencias_ejecutables_do UNTIL condicion ')' ';'",
"sentencia_do_simple : DO bloque_sentencias_ejecutables_do UNTIL '(' condicion ';'",
"etiqueta : ID",
"bloque_sentencias_ejecutables_do : sentencia_ejecutable_do",
"bloque_sentencias_ejecutables_do : '{' sentencias_ejecutables_do '}'",
"bloque_sentencias_ejecutables_do : '{' sentencias_ejecutables_do",
"bloque_sentencias_ejecutables_do : sentencias_ejecutables_do '}'",
"sentencias_ejecutables_do : sentencia_ejecutable_do",
"sentencias_ejecutables_do : sentencias_ejecutables_do sentencia_ejecutable_do",
"asignacion : ID ASIGNACION expresion ';'",
"asignacion : ID ASIGNACION ';'",
"asignacion : ID ASIGNACION expresion",
"sentencia_when : WHEN '(' condicion ')' THEN '{' sentencias_when '}' ';'",
"sentencia_when : WHEN '(' condicion ')' '{' sentencias_when '}' ';'",
"$$2 :",
"sentencia_when : WHEN '(' ')' THEN '{' sentencias_when '}' ';' $$2 WHEN '(' condicion ')' THEN '{' sentencias_when '}'",
"sentencia_when : WHEN '(' condicion ')' '{' sentencias_when '}'",
"sentencia_when : WHEN '(' condicion ')' '{' '}'",
"sentencias_when : sentencia",
"sentencias_when : sentencia sentencias_when",
"seleccion : IF '(' condicion ')' THEN bloque_sentencias_ejecutables_seleccion ENDIF ';'",
"seleccion : IF '(' condicion ')' THEN bloque_sentencias_ejecutables_seleccion ELSE bloque_sentencias_ejecutables_seleccion ENDIF ';'",
"seleccion : IF '(' condicion ')' THEN bloque_sentencias_ejecutables_seleccion ENDIF",
"seleccion : IF '(' condicion ')' THEN bloque_sentencias_ejecutables_seleccion ELSE bloque_sentencias_ejecutables_seleccion ENDIF",
"seleccion : IF '(' condicion THEN bloque_sentencias_ejecutables_seleccion ENDIF ';'",
"seleccion : IF condicion ')' THEN bloque_sentencias_ejecutables_seleccion ENDIF ';'",
"seleccion : IF '(' ')' THEN bloque_sentencias_ejecutables_seleccion ENDIF ';'",
"seleccion : IF '(' condicion ')' THEN ENDIF ';'",
"seleccion : IF '(' condicion ')' bloque_sentencias_ejecutables_seleccion ENDIF ';'",
"seleccion : IF '(' ')' THEN bloque_sentencias_ejecutables_seleccion ELSE bloque_sentencias_ejecutables_seleccion ENDIF ';'",
"seleccion : IF '(' condicion ')' bloque_sentencias_ejecutables_seleccion ELSE bloque_sentencias_ejecutables_seleccion ENDIF ';'",
"seleccion : IF '(' condicion ')' THEN ELSE ENDIF ';'",
"bloque_sentencias_ejecutables_seleccion : sentencia_ejecutable",
"bloque_sentencias_ejecutables_seleccion : '{' sentencias_ejecutables '}'",
"bloque_sentencias_ejecutables_seleccion : '{' '}'",
"bloque_sentencias_ejecutables_seleccion : '{' sentencias_ejecutables",
"bloque_sentencias_ejecutables_seleccion : sentencias_ejecutables '}'",
"sentencias_ejecutables : sentencia_ejecutable",
"sentencias_ejecutables : sentencias_ejecutables sentencia_ejecutable",
"condicion : expresion comparador expresion",
"condicion : expresion comparador",
"condicion : comparador expresion",
"comparador : COMP_MAYOR_IGUAL",
"comparador : COMP_MENOR_IGUAL",
"comparador : COMP_DISTINTO",
"comparador : '>'",
"comparador : '<'",
"comparador : '='",
"expresion : expresion '+' termino",
"expresion : expresion '-' termino",
"expresion : termino",
"termino : termino '*' factor",
"termino : termino '/' factor",
"termino : factor",
"factor : ID",
"factor : constante",
"factor : invocacion_funcion",
"invocacion_funcion : ID '(' ')'",
"invocacion_funcion : ID '(' lista_de_parametros_reales ')'",
"lista_de_parametros_reales : parametro_real",
"lista_de_parametros_reales : lista_de_parametros_reales ',' parametro_real",
"parametro_real : ID",
"parametro_real : constante",
"imprimir : OUT '(' CADENA ')' ';'",
"imprimir : OUT '(' ID ')' ';'",
"imprimir : OUT '(' ')' ';'",
"imprimir : OUT CADENA ')' ';'",
"imprimir : OUT '(' CADENA ';'",
"imprimir : OUT ID ')' ';'",
"imprimir : OUT '(' ID ';'",
"imprimir : OUT '(' CADENA ')'",
"imprimir : OUT '(' ID ')'",
"constante : CTE",
"constante : '-' CTE",
"tipo : UINT16",
"tipo : DOUBLE64",
};

//#line 424 ".\gramatica.y"

public static AnalizadorLexico lexico = null;
public static Logger logger = null;
public static TablaDeSimbolos ts = null;

public void constanteConSigno(String constante) {
	if (constante.contains(".")) {
		
		String negConstante = "-"+constante;
		
		Double parsedDouble = Double.parseDouble(negConstante.replace('D', 'E'));
		
		if (parsedDouble < -2.2250738585072014E-308 && -1.7976931348623157E+308 > parsedDouble) {
			logger.logWarning("[Parser] Rango invalido para la constante: " + negConstante + ", se trunca al rango permitido");
			
			if (-1.7976931348623157E+308 < parsedDouble) {
				negConstante = new String("-1.7976931348623157D+308");
			} else {
				negConstante =  new String("-2.2250738585072014D-308");
			}
		}
		
		ts.swapLexemas(constante, negConstante);
	} else {
		//se recibio un uint que fue aceptado por el lexico pero resulta ser negativo
		logger.logWarning("[Parser] No se admiten ui16 con valores negativos: " + "-"+constante + ", se trunca a 0");
		
		ts.swapLexemas(constante, "0");
	}
}	

public int yylex() {
	return lexico.yylex(yylval);
}

public void yyerror(String error) {
	logger.logError(error);
}

public static void main(String[] args) {
	if (args.length == 0) {
		System.err.println("No se especifico ningun archivo de codigo");
	} else {
		String archivo_a_leer = args[0];
		System.out.println("Se va a leer archivo " + archivo_a_leer);
		
		logger = new Logger();
		
		FileReaderHelper fileHelper = new FileReaderHelper(logger);
		
		boolean fileOpenSuccess = fileHelper.open(archivo_a_leer);
		
		if (fileOpenSuccess) {
			Parser parser = new Parser();
			ts = new TablaDeSimbolos();
			lexico = new AnalizadorLexico(fileHelper, ts, logger);
			
	        parser.run();

			String path = new File(archivo_a_leer).getAbsolutePath();
	        
	        Output out = new Output(path);
	        
	        String printTs = ts.print();
	        
	        
	        out.saveFile("codigo-lexico.txt", logger.getLexico());
			out.saveFile("codigo-sintetico.txt", logger.getSintactico());
			out.saveFile("tabla-de-simbolos.txt", printTs);
	        
			System.out.println(printTs);
		}
	}
}
//#line 1098 "Parser.java"
//###############################################################
// method: yylexdebug : check lexer state
//###############################################################
void yylexdebug(int state,int ch)
{
String s=null;
  if (ch < 0) ch=0;
  if (ch <= YYMAXTOKEN) //check index bounds
     s = yyname[ch];    //now get it
  if (s==null)
    s = "illegal-symbol";
  debug("state "+state+", reading "+ch+" ("+s+")");
}





//The following are now global, to aid in error reporting
int yyn;       //next next thing to do
int yym;       //
int yystate;   //current parsing state from state table
String yys;    //current token string


//###############################################################
// method: yyparse : parse input and execute indicated items
//###############################################################
int yyparse()
{
boolean doaction;
  init_stacks();
  yynerrs = 0;
  yyerrflag = 0;
  yychar = -1;          //impossible char forces a read
  yystate=0;            //initial state
  state_push(yystate);  //save it
  val_push(yylval);     //save empty value
  while (true) //until parsing is done, either correctly, or w/error
    {
    doaction=true;
    if (yydebug) debug("loop"); 
    //#### NEXT ACTION (from reduction table)
    for (yyn=yydefred[yystate];yyn==0;yyn=yydefred[yystate])
      {
      if (yydebug) debug("yyn:"+yyn+"  state:"+yystate+"  yychar:"+yychar);
      if (yychar < 0)      //we want a char?
        {
        yychar = yylex();  //get next token
        if (yydebug) debug(" next yychar:"+yychar);
        //#### ERROR CHECK ####
        if (yychar < 0)    //it it didn't work/error
          {
          yychar = 0;      //change it to default string (no -1!)
          if (yydebug)
            yylexdebug(yystate,yychar);
          }
        }//yychar<0
      yyn = yysindex[yystate];  //get amount to shift by (shift index)
      if ((yyn != 0) && (yyn += yychar) >= 0 &&
          yyn <= YYTABLESIZE && yycheck[yyn] == yychar)
        {
        if (yydebug)
          debug("state "+yystate+", shifting to state "+yytable[yyn]);
        //#### NEXT STATE ####
        yystate = yytable[yyn];//we are in a new state
        state_push(yystate);   //save it
        val_push(yylval);      //push our lval as the input for next rule
        yychar = -1;           //since we have 'eaten' a token, say we need another
        if (yyerrflag > 0)     //have we recovered an error?
           --yyerrflag;        //give ourselves credit
        doaction=false;        //but don't process yet
        break;   //quit the yyn=0 loop
        }

    yyn = yyrindex[yystate];  //reduce
    if ((yyn !=0 ) && (yyn += yychar) >= 0 &&
            yyn <= YYTABLESIZE && yycheck[yyn] == yychar)
      {   //we reduced!
      if (yydebug) debug("reduce");
      yyn = yytable[yyn];
      doaction=true; //get ready to execute
      break;         //drop down to actions
      }
    else //ERROR RECOVERY
      {
      if (yyerrflag==0)
        {
        yyerror("syntax error");
        yynerrs++;
        }
      if (yyerrflag < 3) //low error count?
        {
        yyerrflag = 3;
        while (true)   //do until break
          {
          if (stateptr<0)   //check for under & overflow here
            {
            yyerror("stack underflow. aborting...");  //note lower case 's'
            return 1;
            }
          yyn = yysindex[state_peek(0)];
          if ((yyn != 0) && (yyn += YYERRCODE) >= 0 &&
                    yyn <= YYTABLESIZE && yycheck[yyn] == YYERRCODE)
            {
            if (yydebug)
              debug("state "+state_peek(0)+", error recovery shifting to state "+yytable[yyn]+" ");
            yystate = yytable[yyn];
            state_push(yystate);
            val_push(yylval);
            doaction=false;
            break;
            }
          else
            {
            if (yydebug)
              debug("error recovery discarding state "+state_peek(0)+" ");
            if (stateptr<0)   //check for under & overflow here
              {
              yyerror("Stack underflow. aborting...");  //capital 'S'
              return 1;
              }
            state_pop();
            val_pop();
            }
          }
        }
      else            //discard this token
        {
        if (yychar == 0)
          return 1; //yyabort
        if (yydebug)
          {
          yys = null;
          if (yychar <= YYMAXTOKEN) yys = yyname[yychar];
          if (yys == null) yys = "illegal-symbol";
          debug("state "+yystate+", error recovery discards token "+yychar+" ("+yys+")");
          }
        yychar = -1;  //read another
        }
      }//end error recovery
    }//yyn=0 loop
    if (!doaction)   //any reason not to proceed?
      continue;      //skip action
    yym = yylen[yyn];          //get count of terminals on rhs
    if (yydebug)
      debug("state "+yystate+", reducing "+yym+" by rule "+yyn+" ("+yyrule[yyn]+")");
    if (yym>0)                 //if count of rhs not 'nil'
      yyval = val_peek(yym-1); //get current semantic value
    yyval = dup_yyval(yyval); //duplicate yyval if ParserVal is used as semantic value
    switch(yyn)
      {
//########## USER-SUPPLIED ACTIONS ##########
case 1:
//#line 17 ".\gramatica.y"
{ logger.logSuccess("[Parser] Programa correcto detectado"); }
break;
case 2:
//#line 18 ".\gramatica.y"
{ logger.logError("[Parser] Se esperaba un identificador nombre del programa"); }
break;
case 3:
//#line 19 ".\gramatica.y"
{ logger.logError("[Parser] Se esperaba un { antes de las sentencias del programa"); }
break;
case 4:
//#line 20 ".\gramatica.y"
{ logger.logError("[Parser] Se esperaba un } al final de las sentencias del programa"); }
break;
case 5:
//#line 21 ".\gramatica.y"
{ logger.logError("[Parser] Se esperaban sentencias del programa"); }
break;
case 15:
//#line 46 ".\gramatica.y"
{ logger.logSuccess("[Parser] Declaracion de lista de variables detectado"); }
break;
case 16:
//#line 47 ".\gramatica.y"
{ logger.logError("[Parser] Se esperaba un ; al final de la lista de variables"); }
break;
case 17:
//#line 48 ".\gramatica.y"
{ logger.logError("[Parser] Se esperaba un tipo para la lista de variables"); }
break;
case 18:
//#line 49 ".\gramatica.y"
{ logger.logError("[Parser] Se esperaba una variable o lista de variables"); }
break;
case 21:
//#line 58 ".\gramatica.y"
{ logger.logSuccess("[Parser] Declaracion de funcion detectado"); }
break;
case 22:
//#line 59 ".\gramatica.y"
{ logger.logSuccess("[Parser] Declaracion de funcion detectado"); }
break;
case 23:
//#line 60 ".\gramatica.y"
{ logger.logError("[Parser] Se esperaban sentencias en la funcion"); }
break;
case 40:
//#line 92 ".\gramatica.y"
{ logger.logSuccess("[Parser] Declaracion de funcion detectado"); }
break;
case 41:
//#line 93 ".\gramatica.y"
{ logger.logSuccess("[Parser] Declaracion de funcion detectado"); }
break;
case 42:
//#line 97 ".\gramatica.y"
{ logger.logSuccess("[Parser] Sentencia seleccion detectada"); }
break;
case 43:
//#line 98 ".\gramatica.y"
{ logger.logSuccess("[Parser] Sentencia seleccion detectada"); }
break;
case 44:
//#line 99 ".\gramatica.y"
{ logger.logSuccess("[Parser] Sentencia seleccion detectada"); }
break;
case 45:
//#line 100 ".\gramatica.y"
{ logger.logSuccess("[Parser] Sentencia seleccion detectada"); }
break;
case 46:
//#line 101 ".\gramatica.y"
{ logger.logSuccess("[Parser] Sentencia seleccion detectada"); }
break;
case 47:
//#line 102 ".\gramatica.y"
{ logger.logSuccess("[Parser] Sentencia seleccion detectada"); }
break;
case 48:
//#line 103 ".\gramatica.y"
{ logger.logSuccess("[Parser] Sentencia seleccion detectada"); }
break;
case 49:
//#line 104 ".\gramatica.y"
{ logger.logError("[Parser] Se esperaba un ; al final de la sentencia de seleccion"); }
break;
case 50:
//#line 105 ".\gramatica.y"
{ logger.logError("[Parser] Se esperaba un ; al final de la sentencia de seleccion"); }
break;
case 51:
//#line 106 ".\gramatica.y"
{ logger.logError("[Parser] Se esperaba un ; al final de la sentencia de seleccion"); }
break;
case 52:
//#line 107 ".\gramatica.y"
{ logger.logError("[Parser] Se esperaba un ; al final de la sentencia de seleccion"); }
break;
case 53:
//#line 108 ".\gramatica.y"
{ logger.logError("[Parser] Se esperaba un ; al final de la sentencia de seleccion"); }
break;
case 54:
//#line 109 ".\gramatica.y"
{ logger.logError("[Parser] Se esperaba un ; al final de la sentencia de seleccion"); }
break;
case 55:
//#line 110 ".\gramatica.y"
{ logger.logError("[Parser] Se esperaba un ; al final de la sentencia de seleccion"); }
break;
case 59:
//#line 120 ".\gramatica.y"
{ logger.logSuccess("[Parser] Sentencia de seleccion detectada"); }
break;
case 60:
//#line 121 ".\gramatica.y"
{ logger.logSuccess("[Parser] Sentencia de seleccion detectada"); }
break;
case 61:
//#line 122 ".\gramatica.y"
{ logger.logSuccess("[Parser] Sentencia de seleccion detectada"); }
break;
case 62:
//#line 123 ".\gramatica.y"
{ logger.logSuccess("[Parser] Sentencia de seleccion detectada"); }
break;
case 63:
//#line 124 ".\gramatica.y"
{ logger.logSuccess("[Parser] Sentencia de seleccion detectada"); }
break;
case 64:
//#line 125 ".\gramatica.y"
{ logger.logSuccess("[Parser] Sentencia de seleccion detectada"); }
break;
case 65:
//#line 126 ".\gramatica.y"
{ logger.logSuccess("[Parser] Sentencia de seleccion detectada"); }
break;
case 66:
//#line 127 ".\gramatica.y"
{ logger.logSuccess("[Parser] Sentencia de seleccion detectada"); }
break;
case 67:
//#line 128 ".\gramatica.y"
{ logger.logSuccess("[Parser] Sentencia de seleccion detectada"); }
break;
case 68:
//#line 129 ".\gramatica.y"
{ logger.logSuccess("[Parser] Sentencia de seleccion detectada"); }
break;
case 69:
//#line 130 ".\gramatica.y"
{ logger.logSuccess("[Parser] Sentencia de seleccion detectada"); }
break;
case 70:
//#line 131 ".\gramatica.y"
{ logger.logSuccess("[Parser] Sentencia de seleccion detectada"); }
break;
case 71:
//#line 132 ".\gramatica.y"
{ logger.logSuccess("[Parser] Sentencia de seleccion detectada"); }
break;
case 72:
//#line 133 ".\gramatica.y"
{ logger.logSuccess("[Parser] Sentencia de seleccion detectada"); }
break;
case 73:
//#line 137 ".\gramatica.y"
{ logger.logSuccess("[Parser] Sentencia when detectada"); }
break;
case 74:
//#line 138 ".\gramatica.y"
{ logger.logSuccess("[Parser] Sentencia when detectada"); }
break;
case 75:
//#line 139 ".\gramatica.y"
{ logger.logSuccess("[Parser] Sentencia when detectada"); }
break;
case 76:
//#line 140 ".\gramatica.y"
{ logger.logError("[Parser] Se esperaba ; al final de la sentencia when"); }
break;
case 77:
//#line 141 ".\gramatica.y"
{ logger.logError("[Parser] Se esperaba ; al final de la sentencia when"); }
break;
case 78:
//#line 142 ".\gramatica.y"
{ logger.logError("[Parser] Se esperaba ; al final de la sentencia when"); }
break;
case 79:
//#line 143 ".\gramatica.y"
{ logger.logError("[Parser] Se esperaban sentencias en la sentencia when"); }
break;
case 80:
//#line 144 ".\gramatica.y"
{ logger.logError("[Parser] Se esperaba una condicion en la sentencia when"); }
break;
case 81:
//#line 145 ".\gramatica.y"
{ logger.logError("[Parser] Se esperaba una condicion en la sentencia when"); }
break;
case 82:
//#line 146 ".\gramatica.y"
{ logger.logError("[Parser] Se esperaba una condicion en la sentencia when"); }
break;
case 83:
//#line 147 ".\gramatica.y"
{ logger.logError("[Parser] Se esperaba la palabra reservada then en la sentencia when"); }
break;
case 84:
//#line 148 ".\gramatica.y"
{ logger.logError("[Parser] Se esperaba la palabra reservada then en la sentencia when"); }
break;
case 85:
//#line 149 ".\gramatica.y"
{ logger.logError("[Parser] Se esperaba la palabra reservada then en la sentencia when"); }
break;
case 86:
//#line 153 ".\gramatica.y"
{ logger.logSuccess("[Parser] Sentencia do until detectada"); }
break;
case 87:
//#line 154 ".\gramatica.y"
{ logger.logSuccess("[Parser] Sentencia do until detectada"); }
break;
case 88:
//#line 155 ".\gramatica.y"
{ logger.logError("[Parser] Se esperaba un ; al final de la sentencia do"); }
break;
case 89:
//#line 156 ".\gramatica.y"
{ logger.logError("[Parser] Se esperaba un ; al final de la sentencia do"); }
break;
case 90:
//#line 157 ".\gramatica.y"
{ logger.logError("[Parser] Se esperaba una condicion en la sentencia do"); }
break;
case 91:
//#line 158 ".\gramatica.y"
{ logger.logError("[Parser] Se esperaba una condicion en la sentencia do"); }
break;
case 98:
//#line 168 ".\gramatica.y"
{ logger.logError("[Parser] Se esperaban sentencias en la sentencia do"); }
break;
case 99:
//#line 169 ".\gramatica.y"
{ logger.logError("[Parser] Se esperaba un } al final de la sentencia do"); }
break;
case 100:
//#line 170 ".\gramatica.y"
{ logger.logError("[Parser] Se esperaba un } al final de la sentencia do"); }
break;
case 101:
//#line 171 ".\gramatica.y"
{ logger.logError("[Parser] Se esperaba un } al final de la sentencia do"); }
break;
case 102:
//#line 172 ".\gramatica.y"
{ logger.logError("[Parser] Se esperaba un } al final de la sentencia do"); }
break;
case 103:
//#line 173 ".\gramatica.y"
{ logger.logError("[Parser] Se esperaba un } al final de la sentencia do"); }
break;
case 104:
//#line 174 ".\gramatica.y"
{ logger.logError("[Parser] Se esperaba un } al final de la sentencia do"); }
break;
case 112:
//#line 191 ".\gramatica.y"
{ logger.logError("[Parser] Se esperaba un tipo de return para la funcion"); }
break;
case 113:
//#line 192 ".\gramatica.y"
{ logger.logError("[Parser] Se esperaba un identificador nombre para la funcion"); }
break;
case 114:
//#line 193 ".\gramatica.y"
{ logger.logError("[Parser] Se esperaba un ( luego del nombre de la funcion"); }
break;
case 115:
//#line 194 ".\gramatica.y"
{ logger.logError("[Parser] Se esperaba un ) luego del nombre para la funcion"); }
break;
case 116:
//#line 195 ".\gramatica.y"
{ logger.logError("[Parser] Se esperaba un tipo de return para la funcion"); }
break;
case 117:
//#line 196 ".\gramatica.y"
{ logger.logError("[Parser] Se esperaba un identificador nombre para la funcion"); }
break;
case 118:
//#line 197 ".\gramatica.y"
{ logger.logError("[Parser] Se esperaba un ( luego del nombre de la funcion"); }
break;
case 119:
//#line 198 ".\gramatica.y"
{ logger.logError("[Parser] Se esperaba un ) luego del nombre para la funcion"); }
break;
case 121:
//#line 203 ".\gramatica.y"
{ logger.logError("[Parser] Se esperaba un ; al final de la sentencia return"); }
break;
case 122:
//#line 204 ".\gramatica.y"
{ logger.logError("[Parser] Se esperaba un ( en la sentencia return"); }
break;
case 123:
//#line 205 ".\gramatica.y"
{ logger.logError("[Parser] Se esperaba un ) en la sentencia return"); }
break;
case 124:
//#line 206 ".\gramatica.y"
{ logger.logError("[Parser] Se esperaba una expresion en la sentencia return"); }
break;
case 127:
//#line 212 ".\gramatica.y"
{ logger.logError("[Parser] Hay mas de 2 parametros en la funcion"); }
break;
case 132:
//#line 222 ".\gramatica.y"
{ logger.logError("[Parser] Se esperaba un identificador nombre para el parametro"); }
break;
case 133:
//#line 223 ".\gramatica.y"
{ logger.logError("[Parser] Se esperaba un tipo valido para el parametro"); }
break;
case 134:
//#line 227 ".\gramatica.y"
{ logger.logSuccess("[Parser] Declaracion de constantes detectado"); }
break;
case 135:
//#line 228 ".\gramatica.y"
{ logger.logError("[Parser] Se esperaba ; al final de la declaracion de constantes"); }
break;
case 136:
//#line 229 ".\gramatica.y"
{ logger.logError("[Parser] Se esperaba una lista de declaracion de constantes"); }
break;
case 140:
//#line 239 ".\gramatica.y"
{ logger.logError("[Parser] Se esperaba una constante del lado derecho de la asignacion"); }
break;
case 141:
//#line 240 ".\gramatica.y"
{ logger.logError("[Parser] Se esperaba el simbolo asignacion en la declaracion de constantes"); }
break;
case 142:
//#line 241 ".\gramatica.y"
{ logger.logError("[Parser] Se esperaba una asignacion en la declaracion de constantes"); }
break;
case 156:
//#line 264 ".\gramatica.y"
{ logger.logSuccess("[Parser] Sentencia break detectada"); }
break;
case 157:
//#line 265 ".\gramatica.y"
{ logger.logSuccess("[Parser] Sentencia break con etiqueta detectada"); }
break;
case 158:
//#line 266 ".\gramatica.y"
{ logger.logError("[Parser] Se esperaba un ; luego de la sentencia break"); }
break;
case 159:
//#line 267 ".\gramatica.y"
{ logger.logError("[Parser] Se esperaba un ; luego de la sentencia break"); }
break;
case 160:
//#line 268 ".\gramatica.y"
{ logger.logError("[Parser] Se esperaba una etiqueta en la sentencia break"); }
break;
case 161:
//#line 272 ".\gramatica.y"
{ logger.logSuccess("[Parser] Sentencia continue detectada"); }
break;
case 162:
//#line 273 ".\gramatica.y"
{ logger.logError("[Parser] Se esperaba un ; al final de la sentencia continue"); }
break;
case 165:
//#line 282 ".\gramatica.y"
{ logger.logSuccess("[Parser] Sentencia do until detectada"); }
break;
case 166:
//#line 283 ".\gramatica.y"
{ logger.logError("[Parser] Se esperaba un ; al final de la sentencia do"); }
break;
case 167:
//#line 284 ".\gramatica.y"
{ logger.logError("[Parser] Se esperaba una condicion para la sentencia do"); }
break;
case 168:
//#line 285 ".\gramatica.y"
{ logger.logSuccess("[Parser] Se esperaba un ( en la condicion para la sentencia do"); }
break;
case 169:
//#line 286 ".\gramatica.y"
{ logger.logSuccess("[Parser] Se esperaba un ) en la condicion para la sentencia do"); }
break;
case 173:
//#line 296 ".\gramatica.y"
{ logger.logError("[Parser] Se esperaba un } al final de la sentencia do"); }
break;
case 174:
//#line 297 ".\gramatica.y"
{ logger.logError("[Parser] Se esperaba un { en la sentencia do"); }
break;
case 177:
//#line 306 ".\gramatica.y"
{ logger.logSuccess("[Parser] Asignacion detectada"); }
break;
case 178:
//#line 307 ".\gramatica.y"
{logger.logError("[Parser] Se espera una expresion del lado derecho de la asignacion");}
break;
case 179:
//#line 308 ".\gramatica.y"
{ logger.logError("[Parser] Se espera un ; al final de la asignacion"); }
break;
case 180:
//#line 312 ".\gramatica.y"
{ logger.logSuccess("[Parser] Sentencia when detectada"); }
break;
case 181:
//#line 313 ".\gramatica.y"
{ logger.logError("[Parser] Se esperaba la palabra reservada then en la sentencia when"); }
break;
case 182:
//#line 314 ".\gramatica.y"
{ logger.logError("[Parser] Se esperaba una condicion en la sentencia when"); }
break;
case 183:
//#line 315 ".\gramatica.y"
{ logger.logError("[Parser] Se esperaba un ; al final de la sentencia when"); }
break;
case 184:
//#line 316 ".\gramatica.y"
{ logger.logError("[Parser] Se esperaba la palabra reservada then en la sentencia when"); }
break;
case 185:
//#line 317 ".\gramatica.y"
{ logger.logError("[Parser] Se esperaban sentencias dentro del when"); }
break;
case 188:
//#line 326 ".\gramatica.y"
{ logger.logSuccess("[Parser] Sentencia if then detectada"); }
break;
case 189:
//#line 327 ".\gramatica.y"
{ logger.logSuccess("[Parser] Sentencia if then else detectada"); }
break;
case 190:
//#line 328 ".\gramatica.y"
{ logger.logError("[Parser] Se esperaba un ; al final de la sentencia seleccion"); }
break;
case 191:
//#line 329 ".\gramatica.y"
{ logger.logError("[Parser] Se esperaba un ; al final de la sentencia seleccion"); }
break;
case 192:
//#line 330 ".\gramatica.y"
{ logger.logError("[Parser] Se esperaba un ) en la condicion de la sentencia seleccion"); }
break;
case 193:
//#line 331 ".\gramatica.y"
{ logger.logError("[Parser] Se esperaba un ( en la condicion de la sentencia seleccion"); }
break;
case 194:
//#line 332 ".\gramatica.y"
{ logger.logError("[Parser] Se esperaba una condicion en la sentencia seleccion"); }
break;
case 195:
//#line 333 ".\gramatica.y"
{ logger.logError("[Parser] Se esperaban sentencias en la sentencia seleccion"); }
break;
case 196:
//#line 334 ".\gramatica.y"
{ logger.logError("[Parser] Se esperaban la palabra reservada then en la sentencia seleccion"); }
break;
case 197:
//#line 335 ".\gramatica.y"
{ logger.logError("[Parser] Se esperaban una condicion en la sentencia seleccion"); }
break;
case 198:
//#line 336 ".\gramatica.y"
{ logger.logError("[Parser] Se esperaban la palabra reservada then en la sentencia seleccion"); }
break;
case 199:
//#line 337 ".\gramatica.y"
{ logger.logError("[Parser] Se esperaban sentencias en la sentencia seleccion"); }
break;
case 202:
//#line 343 ".\gramatica.y"
{ logger.logError("[Parser] Se esperaban sentencias dentro de la seleccion"); }
break;
case 203:
//#line 344 ".\gramatica.y"
{ logger.logError("[Parser] Se esperaba un } al final de la seleccion"); }
break;
case 204:
//#line 345 ".\gramatica.y"
{ logger.logError("[Parser] Se esperaba un { en la seleccion"); }
break;
case 208:
//#line 355 ".\gramatica.y"
{ logger.logError("[Parser] Se esperaba un expresion del lado derecho de la comparacion"); }
break;
case 209:
//#line 356 ".\gramatica.y"
{ logger.logError("[Parser] Se esperaba un expresion del lado izquierdo de la comparacion"); }
break;
case 231:
//#line 402 ".\gramatica.y"
{ logger.logSuccess("[Parser] Sentencia out detectada"); }
break;
case 232:
//#line 403 ".\gramatica.y"
{ logger.logSuccess("[Parser] Sentencia out detectada"); }
break;
case 233:
//#line 404 ".\gramatica.y"
{ logger.logError("[Parser] Se esperaba una cadena o identificador en la sentencia out"); }
break;
case 234:
//#line 405 ".\gramatica.y"
{ logger.logError("[Parser] Se esperaba un ( en la sentencia out"); }
break;
case 235:
//#line 406 ".\gramatica.y"
{ logger.logError("[Parser] Se esperaba un ) en la sentencia out"); }
break;
case 236:
//#line 407 ".\gramatica.y"
{ logger.logError("[Parser] Se esperaba un ( en la sentencia out"); }
break;
case 237:
//#line 408 ".\gramatica.y"
{ logger.logError("[Parser] Se esperaba un ) en la sentencia out"); }
break;
case 238:
//#line 409 ".\gramatica.y"
{ logger.logError("[Parser] Se espera un ; al final de la sentencia out"); }
break;
case 239:
//#line 410 ".\gramatica.y"
{ logger.logError("[Parser] Se espera un ; al final de la sentencia out"); }
break;
case 241:
//#line 415 ".\gramatica.y"
{ constanteConSigno(val_peek(0).sval); }
break;
//#line 1803 "Parser.java"
//########## END OF USER-SUPPLIED ACTIONS ##########
    }//switch
    //#### Now let's reduce... ####
    if (yydebug) debug("reduce");
    state_drop(yym);             //we just reduced yylen states
    yystate = state_peek(0);     //get new state
    val_drop(yym);               //corresponding value drop
    yym = yylhs[yyn];            //select next TERMINAL(on lhs)
    if (yystate == 0 && yym == 0)//done? 'rest' state and at first TERMINAL
      {
      if (yydebug) debug("After reduction, shifting from state 0 to state "+YYFINAL+"");
      yystate = YYFINAL;         //explicitly say we're done
      state_push(YYFINAL);       //and save it
      val_push(yyval);           //also save the semantic value of parsing
      if (yychar < 0)            //we want another character?
        {
        yychar = yylex();        //get next character
        if (yychar<0) yychar=0;  //clean, if necessary
        if (yydebug)
          yylexdebug(yystate,yychar);
        }
      if (yychar == 0)          //Good exit (if lex returns 0 ;-)
         break;                 //quit the loop--all DONE
      }//if yystate
    else                        //else not done yet
      {                         //get next state and push, for next yydefred[]
      yyn = yygindex[yym];      //find out where to go
      if ((yyn != 0) && (yyn += yystate) >= 0 &&
            yyn <= YYTABLESIZE && yycheck[yyn] == yystate)
        yystate = yytable[yyn]; //get new state
      else
        yystate = yydgoto[yym]; //else go to new defred
      if (yydebug) debug("after reduction, shifting from state "+state_peek(0)+" to state "+yystate+"");
      state_push(yystate);     //going again, so push state & val...
      val_push(yyval);         //for next action
      }
    }//main loop
  return 0;//yyaccept!!
}
//## end of method parse() ######################################



//## run() --- for Thread #######################################
/**
 * A default run method, used for operating this parser
 * object in the background.  It is intended for extending Thread
 * or implementing Runnable.  Turn off with -Jnorun .
 */
public void run()
{
  yyparse();
}
//## end of method run() ########################################



//## Constructors ###############################################
/**
 * Default constructor.  Turn off with -Jnoconstruct .

 */
public Parser()
{
  //nothing to do
}


/**
 * Create a parser, setting the debug to true or false.
 * @param debugMe true for debugging, false for no debug.
 */
public Parser(boolean debugMe)
{
  yydebug=debugMe;
}
//###############################################################



}
//################### END OF CLASS ##############################
