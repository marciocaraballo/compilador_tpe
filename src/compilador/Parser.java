//### This file created by BYACC 1.8(/Java extension  1.15)
//### Java capabilities added 7 Jan 97, Bob Jamison
//### Updated : 27 Nov 97  -- Bob Jamison, Joe Nieten
//###           01 Jan 98  -- Bob Jamison -- fixed generic semantic constructor
//###           01 Jun 99  -- Bob Jamison -- added Runnable support
//###           06 Aug 00  -- Bob Jamison -- made state variables class-global
//###           03 Jan 01  -- Bob Jamison -- improved flags, tracing
//###           16 May 01  -- Bob Jamison -- added custom stack sizing
//###           04 Mar 02  -- Yuval Oren  -- improved java performance, added options
//###           14 Mar 02  -- Tomas Hurka -- -d support, static initializer workaround
//### Please send bug reports to tom@hukatronic.cz
//### static char yysccsid[] = "@(#)yaccpar	1.8 (Berkeley) 01/20/90";



package compilador;



//#line 2 "./src/compilador/gramatica.y"
import java.io.File;
//#line 19 "Parser.java"




public class Parser
{

boolean yydebug;        //do I want debug output?
int yynerrs;            //number of errors so far
int yyerrflag;          //was there an error?
int yychar;             //the current working character

//########## MESSAGES ##########
//###############################################################
// method: debug
//###############################################################
void debug(String msg)
{
  if (yydebug)
    System.out.println(msg);
}

//########## STATE STACK ##########
final static int YYSTACKSIZE = 500;  //maximum stack size
int statestk[] = new int[YYSTACKSIZE]; //state stack
int stateptr;
int stateptrmax;                     //highest index of stackptr
int statemax;                        //state when highest index reached
//###############################################################
// methods: state stack push,pop,drop,peek
//###############################################################
final void state_push(int state)
{
  try {
		stateptr++;
		statestk[stateptr]=state;
	 }
	 catch (ArrayIndexOutOfBoundsException e) {
     int oldsize = statestk.length;
     int newsize = oldsize * 2;
     int[] newstack = new int[newsize];
     System.arraycopy(statestk,0,newstack,0,oldsize);
     statestk = newstack;
     statestk[stateptr]=state;
  }
}
final int state_pop()
{
  return statestk[stateptr--];
}
final void state_drop(int cnt)
{
  stateptr -= cnt; 
}
final int state_peek(int relative)
{
  return statestk[stateptr-relative];
}
//###############################################################
// method: init_stacks : allocate and prepare stacks
//###############################################################
final boolean init_stacks()
{
  stateptr = -1;
  val_init();
  return true;
}
//###############################################################
// method: dump_stacks : show n levels of the stacks
//###############################################################
void dump_stacks(int count)
{
int i;
  System.out.println("=index==state====value=     s:"+stateptr+"  v:"+valptr);
  for (i=0;i<count;i++)
    System.out.println(" "+i+"    "+statestk[i]+"      "+valstk[i]);
  System.out.println("======================");
}


//########## SEMANTIC VALUES ##########
//public class ParserVal is defined in ParserVal.java


String   yytext;//user variable to return contextual strings
ParserVal yyval; //used to return semantic vals from action routines
ParserVal yylval;//the 'lval' (result) I got from yylex()
ParserVal valstk[];
int valptr;
//###############################################################
// methods: value stack push,pop,drop,peek.
//###############################################################
void val_init()
{
  valstk=new ParserVal[YYSTACKSIZE];
  yyval=new ParserVal();
  yylval=new ParserVal();
  valptr=-1;
}
void val_push(ParserVal val)
{
  if (valptr>=YYSTACKSIZE)
    return;
  valstk[++valptr]=val;
}
ParserVal val_pop()
{
  if (valptr<0)
    return new ParserVal();
  return valstk[valptr--];
}
void val_drop(int cnt)
{
int ptr;
  ptr=valptr-cnt;
  if (ptr<0)
    return;
  valptr = ptr;
}
ParserVal val_peek(int relative)
{
int ptr;
  ptr=valptr-relative;
  if (ptr<0)
    return new ParserVal();
  return valstk[ptr];
}
final ParserVal dup_yyval(ParserVal val)
{
  ParserVal dup = new ParserVal();
  dup.ival = val.ival;
  dup.dval = val.dval;
  dup.sval = val.sval;
  dup.obj = val.obj;
  return dup;
}
//#### end semantic value section ####
public final static short ID=257;
public final static short CTE=258;
public final static short CADENA=259;
public final static short IF=260;
public final static short ELSE=261;
public final static short ENDIF=262;
public final static short PRINT=263;
public final static short VOID=264;
public final static short RETURN=265;
public final static short COMP_MAYOR_IGUAL=266;
public final static short COMP_MENOR_IGUAL=267;
public final static short COMP_IGUAL=268;
public final static short COMP_DISTINTO=269;
public final static short CLASS=270;
public final static short WHILE=271;
public final static short DO=272;
public final static short INTERFACE=273;
public final static short IMPLEMENT=274;
public final static short INT=275;
public final static short ULONG=276;
public final static short FLOAT=277;
public final static short OPERADOR_MENOS=278;
public final static short YYERRCODE=256;
final static short yylhs[] = {                           -1,
    0,    0,    0,    0,    0,    1,    1,    2,    2,    2,
    4,    4,    4,    4,    4,    4,   11,   11,   12,   12,
   13,   13,   13,   13,   13,   10,   10,    9,    9,    9,
    9,    9,    9,    9,    9,    9,    9,    9,   15,   19,
   15,   15,   15,   15,   15,   15,   15,   15,   15,    8,
    8,    8,    8,    8,    8,    8,    8,    8,   14,   14,
   14,   20,   14,   14,   14,   14,   14,   16,   16,   16,
   16,   16,   16,   18,   18,   18,   18,   18,   18,   18,
   18,   18,   18,   18,   23,   23,   24,   24,   21,   21,
   21,   21,   22,   22,   22,   22,    7,    7,    7,    7,
    7,    7,    7,    6,    6,    6,    6,    6,    6,   28,
   28,    5,    5,    5,   26,   26,    3,    3,    3,    3,
   29,   29,   29,   35,   35,   32,   32,   36,   36,   37,
   37,   39,   39,   39,   39,   40,   40,   40,   40,   40,
   40,   31,   41,   41,   30,   42,   42,   42,   42,   42,
   44,   44,   38,   38,   38,   38,   38,   38,   38,   38,
   43,   43,   43,   43,   43,   43,   43,   43,   43,   43,
   43,   43,   47,   47,   48,   48,   48,   46,   46,   46,
   45,   34,   34,   33,   33,   33,   33,   17,   17,   17,
   17,   49,   49,   49,   49,   49,   49,   27,   27,   27,
   50,   50,   50,   51,   51,   51,   51,   25,   25,
};
final static short yylen[] = {                            2,
    3,    2,    2,    2,    0,    1,    2,    1,    1,    2,
    1,    1,    1,    1,    1,    1,    1,    2,    1,    1,
    1,    1,    1,    1,    1,    2,    1,    7,    6,    6,
    6,    6,    3,    4,    2,    5,    4,    3,    7,    0,
   13,    6,    6,    3,    4,    2,    5,    4,    3,    9,
    7,    8,    6,    8,    6,    8,    8,    6,    9,    7,
    8,    0,   15,    6,    8,    8,    6,    1,    3,    2,
    2,    2,    1,    1,    1,    1,    3,    4,    5,    2,
    3,    2,    3,    2,    1,    2,    1,    1,    1,    2,
    1,    2,    1,    2,    1,    2,    3,    2,    2,    3,
    2,    3,    2,    5,    4,    7,    4,    3,    6,    1,
    3,    4,    3,    3,    1,    3,    1,    1,    1,    1,
    3,    2,    2,    2,    1,    4,    2,    1,    2,    2,
    1,    3,    2,    1,    2,    2,    4,    1,    3,    3,
    2,    4,    1,    2,    2,    4,    3,    6,    5,    2,
    2,    1,    5,    4,    7,    6,    4,    3,    4,    3,
    4,    3,    5,    4,    3,    2,    3,    2,    4,    3,
    2,    1,    1,    2,    1,    1,    1,    1,    3,    2,
    2,    1,    3,    1,    1,    1,    1,    3,    2,    2,
    3,    1,    1,    1,    1,    1,    1,    3,    3,    1,
    3,    3,    1,    1,    2,    1,    3,    1,    2,
};
final static short yydefred[] = {                         0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,  184,
  185,  186,    0,    0,    0,    6,    8,    9,   11,   12,
   13,   14,   15,   16,    0,  117,  118,  119,  120,    0,
    0,    0,    0,    0,   10,    0,    0,  208,    0,    0,
   99,    0,  151,   26,    0,    0,    0,    0,   35,    0,
    0,    0,    0,    0,  124,    4,    0,    2,    7,    0,
    0,    0,  182,  123,    0,    0,  127,    0,    0,    0,
    0,  172,   19,   21,   22,   23,    0,    0,   17,   20,
   24,   25,  145,    0,  150,    0,  192,  193,  194,  195,
    0,    0,  196,  197,    0,  206,    0,    0,    0,  203,
  100,   97,  209,  102,    0,  139,   33,    0,   72,   91,
   89,    0,    0,    0,    0,    0,   71,   92,   90,    1,
    0,    0,  114,    0,  116,  121,    0,    0,    0,  128,
    0,    0,  134,    0,  143,    0,    0,    0,    0,   46,
    0,    0,   75,    0,    0,    0,  166,    0,    0,  168,
  175,  176,  177,    0,  173,  171,    0,   18,  187,  147,
    0,    0,  205,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,  137,    0,   69,   37,    0,   34,    0,
    0,  105,    0,    0,  112,  183,    0,    0,  126,  129,
  130,  135,    0,  142,  144,    0,    0,   44,   84,   95,
   93,    0,    0,    0,    0,    0,   80,   96,    0,   94,
  162,    0,  165,    0,  170,  174,  167,    0,  181,    0,
  146,  178,    0,  207,    0,    0,    0,    0,    0,    0,
    0,    0,    0,  201,  202,    0,   36,    0,    0,    0,
    0,    0,  104,    0,  160,    0,  158,    0,  132,    0,
    0,   77,    0,   48,    0,   45,    0,    0,   81,  164,
  161,    0,  169,    0,    0,  149,  180,    0,   55,    0,
   58,    0,    0,   30,   31,    0,   32,    0,    0,  154,
    0,  159,  157,    0,    0,    0,    0,  115,   78,   87,
   88,    0,   85,   47,    0,    0,    0,  163,  148,  179,
    0,    0,    0,    0,   51,   28,    0,  106,    0,  153,
    0,   64,    0,   67,    0,    0,   79,   86,   42,    0,
   43,   54,   56,   57,    0,    0,  156,    0,    0,    0,
   60,    0,   39,    0,   50,  155,   65,   66,    0,    0,
    0,   59,    0,    0,    0,    0,    0,    0,    0,    0,
    0,   41,    0,   63,
};
final static short yydgoto[] = {                         14,
   15,   16,  151,   52,   74,   75,   76,   22,   23,   24,
   78,   79,  153,   81,   82,   53,   95,  145,  334,  332,
   54,  146,  292,  293,   96,   25,   97,  242,   26,   27,
   28,   29,   30,   65,   31,  129,  130,  131,  135,   32,
  136,   33,   83,   34,  222,  223,  154,  155,   98,   99,
  100,
};
final static short yysindex[] = {                      1100,
   51,    0,   49,   90, -216,   86, -231,  935, -118,    0,
    0,    0, 1281,    0, 1304,    0,    0,    0,    0,    0,
    0,    0,    0,    0,  -10,    0,    0,    0,    0,  -44,
  -57,   21, 1190,   16,    0,  889,  110,    0,  114, -117,
    0,  136,    0,    0, -125,  -88,  -12, 1347,    0, 1008,
    0,    0,  -35, 1369,    0,    0, 1326,    0,    0,   97,
   19,  -72,    0,    0,  -22,  -58,    0,  272,  172,  956,
 1392,    0,    0,    0,    0,    0, 1414, 1437,    0,    0,
    0,    0,    0,   88,    0,  -59,    0,    0,    0,    0,
    5, 1238,    0,    0,  191,    0,  396,    5,   45,    0,
    0,    0,    0,    0,  -23,    0,    0, 1027,    0,    0,
    0, 1459,  196,  205,    4, 1027,    0,    0,    0,    0,
  209,  164,    0,  118,    0,    0,   -1,  -30, -121,    0,
  224,  228,    0,   25,    0,  321, 1014,  231, 1700,    0,
 1059,    0,    0,    0,  -16, 1480,    0, 1502, 1523,    0,
    0,    0,    0, 1545,    0,    0, 1567,    0,    0,    0,
   28,   -6,    0,   71, -142,  984,    5,    5,    5,    5,
  125,    5,    5,    0,  251,    0,    0,  252,    0, 1142,
  257,    0,    5,  256,    0,    0,  -34,  105,    0,    0,
    0,    0,   18,    0,    0, 1259,  264,    0,    0,    0,
    0, 1590,  262,  276,   34, 1027,    0,    0,  188,    0,
    0, 1613,    0, 1635,    0,    0,    0, 1656,    0, -192,
    0,    0,   26,    0, 1238,  278, 1238,  280,  -73,   45,
   45,  125,  125,    0,    0,  282,    0,  284,  279,  288,
  125,   56,    0,  177,    0,  295,    0,  335,    0,  117,
 1073,    0, -112,    0,  339,    0, 1177,  343,    0,    0,
    0, 1678,    0,   32, -192,    0,    0,  123,    0,  124,
    0, 1155,  346,    0,    0,  347,    0,    5,  369,    0,
   58,    0,    0,  389, 1259,  393,  -71,    0,    0,    0,
    0,  226,    0,    0,  398,  399,  400,    0,    0,    0,
  403,  404,  405,  181,    0,    0,  125,    0, -192,    0,
   62,    0,  189,    0, 1216,  415,    0,    0,    0,  418,
    0,    0,    0,    0,  440,   66,    0,  441,  443,  220,
    0,  230,    0,  221,    0,    0,    0,    0,  448,  454,
  225,    0,  456,  455, 1259, 1027,  239,  460, 1259,  458,
  242,    0,  461,    0,
};
final static short yyrindex[] = {                       508,
    0,  -19,    0,    0,  184,   96,  401,    0,  -14,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,  281,    0,  304,    0,
    0,  330,    0,    0,  408,  409,    0,    0,    0,    0,
  701,  745,    0,    0,    0,    0,  533,    0,    0,    0,
    0,    0,    0,    0,  374,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,  132,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,  155,    0,
    0,    0,    0,    0,  411,    0,    0,    0,    0,    0,
    0,  -32,  410,    0,    0,    0,    0,    0,    0,    0,
  438,    0,    0,  463,    0,    0,    0,    0,    0,    0,
 -107,  283,    0,    0,    0,    0,    0,    0,    0,    0,
    0,  770,    0,  820,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,  498,
  509,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,  488,    0,    0,    0,    0,    0,    0,
    0,    0,  384,    0,    0,    0,    0,    0,    0,    0,
    0,  116,  868,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,  204,
  250,  514,  521,    0,    0,    0,    0,    0,    0,    0,
   60,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,  174,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,  530,    0,    0,  559,    0,    0,  582,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,   83,    0,    0,    0,
    0,    0,    0,    0,    0,  311,    0,    0,    0,  300,
    0,    0,    0,    0,  612,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,  904,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,
};
final static short yygindex[] = {                         0,
  560,   -3,    1,  900,  848,  878,  899,    0,    0,  -31,
  512,  -67,  -18,    0,    0,  -61,  -47, -163,    0,    0,
  536,  450,    0,  312,  604,    0,  965,    0,    0,  -45,
    0,    0,  678,  475,    0,    0,  481,    0,  478,    0,
    0,    0,    0,    0,   14, -201, -128, -137,  518,   92,
  115,
};
final static int YYTABLESIZE=1977;
static short yytable[];
static { yytable();}
static void yytable(){
yytable = new short[]{                         64,
   17,   77,  114,  189,  116,  244,  245,   70,   51,  188,
  158,   59,  289,   17,   80,   17,  216,  131,  264,  212,
  115,  126,  133,  206,  187,   45,  115,  108,  218,   60,
  165,  107,  250,   73,  221,   62,  127,  220,  143,  148,
   43,  115,   46,  180,   91,  152,  157,  179,  110,   40,
   61,  144,   80,   59,  118,   84,   85,   17,   91,   80,
  175,  249,  123,   40,  159,   66,  266,   67,  181,  265,
  142,   73,  299,  257,  216,  265,  127,  256,   73,  311,
  216,  158,   10,   11,   12,  262,  172,  287,   36,  197,
  133,  173,   51,  204,   35,   27,  279,  162,  310,  278,
  110,  309,  327,  110,  229,  265,  336,  326,  125,  265,
  125,  224,  118,  167,  209,  168,  152,  214,  225,  226,
  201,  313,  152,  111,  216,  152,  111,  210,  160,   44,
   80,  204,  239,   41,   40,   27,   91,  121,   55,  200,
  103,   40,  128,   68,  288,  247,  208,   69,  105,   73,
    4,  330,    6,  101,  200,   82,  131,  102,  258,   70,
  167,  185,  168,  268,  143,  270,   51,  167,  106,  168,
  253,  204,  204,  204,  204,  204,  204,  144,  204,  104,
  152,  347,  152,  210,  125,  351,  152,  272,  273,  315,
  316,  204,  204,  204,  200,  200,  142,  200,  200,  200,
  246,  248,  208,  198,  184,  128,  167,  183,  168,  296,
  304,  137,   63,   83,  200,  200,  200,  280,  163,  143,
   27,  290,  159,  152,  152,   51,  187,   51,   70,   70,
  152,  166,  144,  174,  291,  115,  267,  187,   70,  177,
   10,   11,   12,  198,  198,  178,  198,  198,  198,  199,
  159,  142,  182,  143,  205,  186,  204,  281,  230,  231,
  290,   86,   38,  198,  198,  198,  144,  191,   10,   11,
   12,  192,   51,  291,  198,   86,   38,  267,  300,  200,
  101,   63,  159,  143,  219,  142,  234,  235,  159,  199,
  199,  236,  199,  199,  199,  237,  144,  240,  348,  243,
   10,   11,   12,   98,  251,  254,   10,   11,   12,  199,
  199,  199,  259,  143,  159,  142,  255,  143,  159,  276,
  101,  269,  159,  271,  267,  274,  144,  275,  198,  103,
  144,  277,   10,   11,   12,  282,   10,   11,   12,  267,
   10,   11,   12,   98,  159,  142,   37,   38,   39,  142,
  317,   27,   27,   86,   38,   27,   27,   27,   27,   27,
   27,  159,   10,   11,   12,   27,   27,   27,   27,  103,
   27,   27,   27,  122,  199,  283,   82,   82,  284,   10,
   11,   12,  294,  297,  301,  302,   82,  204,  204,  305,
  306,  204,  204,  204,  204,  204,  204,  204,  204,  204,
  204,  204,  204,  204,  204,  101,  204,  204,  204,   38,
  200,  200,  308,  122,  200,  200,  200,  200,  200,  200,
  200,  200,  200,  200,  200,  200,  200,  200,   98,  200,
  200,  200,  312,  159,   83,   83,  314,  108,  167,  320,
  168,  319,  325,  321,   83,  194,  322,  323,  324,   38,
  328,   10,   11,   12,  103,   94,  169,   93,  331,  198,
  198,  333,  113,  198,  198,  198,  198,  198,  198,  198,
  198,  198,  198,  198,  198,  198,  198,  108,  198,  198,
  198,  339,  288,  335,  337,   69,  338,  107,    4,  340,
    6,  342,  341,  343,  346,  344,  345,   70,  122,  349,
  350,  352,  113,  353,  354,  199,  199,    5,  133,  199,
  199,  199,  199,  199,  199,  199,  199,  199,  199,  199,
  199,  199,  199,  138,  199,  199,  199,  107,  132,   53,
  136,  141,    3,  140,   38,    5,  101,  101,  189,  187,
  101,  101,  101,  101,  101,  101,   10,   11,   12,  190,
  101,  101,  101,  101,  191,  101,  101,  101,   29,   98,
   98,  188,  108,   98,   98,   98,   98,   98,   98,   53,
   62,   40,   57,   98,   98,   98,   98,  132,   98,   98,
   98,  109,  149,  112,    5,  103,  103,  113,  202,  103,
  103,  103,  103,  103,  103,   10,   11,   12,   29,  103,
  103,  103,  103,  318,  103,  103,  103,   42,  193,  190,
    0,   52,  107,  195,  170,    0,    0,    0,    0,    0,
    0,  109,    0,    0,    0,    0,    0,    0,    0,  122,
  122,    0,    0,  122,  122,  122,  122,  122,  122,    0,
  133,    0,    0,  122,  122,  122,  122,  133,  122,  122,
  122,   52,    0,    0,   53,    0,    0,    0,  133,  133,
  133,   87,   88,   89,   90,   38,   38,    0,    0,   38,
   38,   38,   38,   38,   38,    0,    0,    0,    0,   38,
   38,   38,   38,   29,   38,   38,   38,    0,    0,    0,
    0,    0,    0,  108,  108,    0,    0,  108,  108,  108,
  108,  108,  108,    0,    0,    0,  109,  108,  108,  108,
  108,    0,  108,  108,  108,    0,    0,    0,  113,  113,
    0,    0,  113,  113,  113,  113,  113,  113,    0,    0,
    0,    0,  113,  113,  113,  113,   52,  113,  113,  113,
   73,    0,    0,  107,  107,  134,    0,  107,  107,  107,
  107,  107,  107,    0,    0,    0,    0,  107,  107,  107,
  107,  161,  107,  107,  107,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,   68,   53,   53,    0,    0,   53,
   53,   53,   53,   53,   53,    0,    0,    0,    0,   53,
   53,   53,   53,    0,   53,   53,   53,    0,    0,   76,
    0,    0,    0,  134,   29,   29,    0,    0,   29,   29,
   29,   29,   29,   29,    0,   91,    0,    0,   29,   29,
   29,   29,    0,   29,   29,   29,    0,  109,  109,  161,
    0,  109,  109,  109,  109,  109,  109,   19,    0,    0,
    0,  109,  109,  109,  109,   19,  109,  109,  109,   74,
   19,    0,   19,    0,  161,  161,    0,   52,   52,   89,
    0,   52,   52,   52,   52,   52,   52,   20,    0,    0,
    0,   52,   52,   52,   52,   20,   52,   52,   52,    0,
   20,    0,   20,    0,   95,   19,    0,  161,   21,   18,
  161,   19,    0,    0,   19,    0,   21,   49,    0,    0,
    0,   21,   18,   21,   18,    0,    0,    0,    0,    0,
    0,  161,    0,    0,    0,   20,    0,    0,   91,   92,
    0,   20,    0,   40,   20,    0,    0,    0,    0,   19,
    0,  161,  161,   61,   93,    0,   21,  111,   94,    0,
   93,    0,   21,  119,    0,   21,   18,   91,  161,   19,
   91,   73,   73,   91,   91,   91,    0,    0,    0,   20,
   91,   73,   91,   91,   50,   91,   91,   91,   49,    0,
    0,    0,    0,    0,    0,    0,  161,    0,  161,   20,
   21,    0,   49,    0,    0,  141,    0,    0,    0,  140,
    0,   89,    0,  161,   89,   68,   68,   89,   89,   89,
   21,  119,    0,   19,   89,   68,   89,   89,    0,   89,
   89,   89,    0,    0,  122,  124,   95,    0,   61,   95,
   76,   76,   95,   95,   95,    0,    0,    0,    0,   95,
   76,   95,   95,   20,   95,   95,   95,   91,  113,    0,
    0,    0,   40,   91,  196,  164,    0,   48,   40,    0,
    0,    0,  171,    0,   21,    0,   91,   94,    0,   93,
    0,   40,   19,   94,   19,   93,   93,    0,  139,   93,
   74,   74,   93,   93,   93,    0,   94,    0,   93,   93,
   74,   93,   93,    0,   93,   93,   93,    0,   91,  203,
    0,    0,   20,   40,   20,    0,   48,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,   94,   19,
   93,    0,    0,   21,   49,   21,    0,   49,   49,   49,
   49,   49,   49,  232,  233,    0,    0,   49,   49,   49,
   49,    0,   49,   49,   49,   86,   38,  241,    0,   20,
    0,    0,    0,    0,   87,   88,   89,   90,    0,    0,
   61,    0,    0,   61,   61,   61,   61,   61,   61,    0,
   21,    0,    0,   61,   61,   61,   61,    0,   61,   61,
   61,   91,  238,    0,    0,    0,   40,    0,    0,    0,
    0,    2,    0,    0,    3,  139,    0,    4,    5,    6,
    0,   94,    0,   93,    7,   47,    8,    9,    0,   10,
   11,   12,    2,    0,    0,   69,   91,  295,    4,    5,
    6,   40,   13,    0,    0,    7,  138,   70,    9,    0,
   10,   11,   12,    0,    0,    0,   94,    0,   93,    0,
    2,    0,  307,    3,  227,  228,    4,    5,    6,    0,
    0,    0,    0,    7,    0,    8,    9,    0,   10,   11,
   12,    0,    0,    0,   86,   38,    0,    0,    0,    0,
   86,   38,    0,   87,   88,   89,   90,   48,    0,   87,
   88,   89,   90,   86,   38,    0,    0,    0,    0,    0,
    0,    0,   87,   88,   89,   90,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,   71,    0,   72,   86,   38,    0,    0,    0,
    0,    0,    0,    0,   87,   88,   89,   90,    0,    2,
    0,    0,   69,  285,  286,    4,    5,    6,  139,    0,
    0,    0,    7,    0,   70,    9,    0,   10,   11,   12,
    0,    0,    0,    0,    0,    1,    2,    0,    0,    3,
   48,    0,    4,    5,    6,    0,    0,    0,    0,    7,
    0,    8,    9,    0,   10,   11,   12,    0,    0,    0,
    0,  139,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,   86,   38,
    0,    0,    0,    0,    0,   56,    0,   87,   88,   89,
   90,    2,    0,    0,    3,    0,  303,    4,    5,    6,
    0,    0,    0,    0,    7,    0,    8,    9,   58,   10,
   11,   12,    0,   86,   38,    0,    0,    0,    0,    0,
    0,    0,   87,   88,   89,   90,    2,    0,    0,   69,
  120,    0,    4,    5,    6,    0,    0,    0,    0,    7,
    0,   70,    9,    0,   10,   11,   12,    0,    0,    0,
    0,  109,    2,    0,    0,   69,    0,  329,    4,    5,
    6,    0,    0,    0,    0,    7,    0,   70,    9,    0,
   10,   11,   12,  117,    2,    0,    0,    3,    0,    0,
    4,    5,    6,    0,    0,    0,    0,    7,    0,    8,
    9,    0,   10,   11,   12,    2,  147,    0,   69,    0,
    0,    4,    5,    6,    0,    0,    0,    0,    7,    0,
   70,    9,    0,   10,   11,   12,    1,    2,  150,    0,
    3,    0,    0,    4,    5,    6,    0,    0,    0,    0,
    7,    0,    8,    9,    0,   10,   11,   12,    0,    1,
    2,  156,    0,    3,    0,    0,    4,    5,    6,    0,
    0,    0,    0,    7,    0,    8,    9,    0,   10,   11,
   12,    1,    2,  176,    0,    3,    0,    0,    4,    5,
    6,    0,    0,    0,    0,    7,    0,    8,    9,    0,
   10,   11,   12,    2,  207,    0,    3,    0,    0,    4,
    5,    6,    0,    0,    0,    0,    7,    0,    8,    9,
    0,   10,   11,   12,    0,    2,  211,    0,    3,    0,
    0,    4,    5,    6,    0,    0,    0,    0,    7,    0,
    8,    9,    0,   10,   11,   12,    0,  213,    2,    0,
    0,   69,    0,    0,    4,    5,    6,    0,    0,    0,
    0,    7,    0,   70,    9,    0,   10,   11,   12,  215,
    2,    0,    0,   69,    0,    0,    4,    5,    6,    0,
    0,    0,    0,    7,    0,   70,    9,    0,   10,   11,
   12,  217,    0,    2,    0,    0,   69,    0,    0,    4,
    5,    6,    0,    0,    0,    0,    7,    0,   70,    9,
    0,   10,   11,   12,  252,    2,    0,    0,    3,    0,
    0,    4,    5,    6,    0,    0,    0,    0,    7,    0,
    8,    9,    0,   10,   11,   12,    2,  260,    0,   69,
    0,    0,    4,    5,    6,    0,    0,    0,    0,    7,
    0,   70,    9,    0,   10,   11,   12,    0,    2,  261,
    0,   69,    0,    0,    4,    5,    6,    0,    0,    0,
    0,    7,    0,   70,    9,    0,   10,   11,   12,    2,
  263,    0,   69,    0,    0,    4,    5,    6,    0,    0,
    0,    0,    7,    0,   70,    9,    0,   10,   11,   12,
    0,    2,  298,    0,   69,    0,    0,    4,    5,    6,
    0,    0,    0,    0,    7,    0,   70,    9,    0,   10,
   11,   12,    0,    2,  199,    0,   69,    0,    0,    4,
    5,    6,    0,    0,    0,    0,    7,    0,   70,    9,
    0,   10,   11,   12,    0,    0,    2,    0,    0,   69,
    0,    0,    4,    5,    6,    0,    0,    0,    0,    7,
    0,   70,    9,    0,   10,   11,   12,    0,    0,    2,
    0,    0,   69,    0,    0,    4,    5,    6,    0,    0,
    0,    0,    7,    0,   70,    9,    0,   10,   11,   12,
    0,    2,    0,    0,   69,    0,    0,    4,    5,    6,
    0,    0,    0,    0,    7,    0,   70,    9,    0,   10,
   11,   12,    2,    0,    0,   69,    0,    0,    4,    5,
    6,    0,    0,    0,    0,    7,    0,   70,    9,    0,
   10,   11,   12,    0,    2,    0,    0,   69,    0,    0,
    4,    5,    6,    0,    0,    0,    0,    7,    0,   70,
    9,    0,   10,   11,   12,    0,    2,    0,    0,   69,
    0,    0,    4,    5,    0,    0,    0,    0,    0,    7,
    0,   70,    9,    0,   10,   11,   12,
};
}
static short yycheck[];
static { yycheck(); }
static void yycheck() {
yycheck = new short[] {                         44,
    0,   33,   50,  125,   40,   40,   41,   40,    8,   40,
   78,   15,  125,   13,   33,   15,  154,  125,  220,  148,
   40,   44,   68,   40,   44,  257,   46,   40,  157,   40,
   92,   44,  196,   33,   41,   46,   59,   44,   70,   71,
  257,   61,  274,   40,   40,   77,   78,   44,   48,   45,
   61,   70,   71,   57,   54,   40,   41,   57,   40,   78,
  108,   44,   44,   45,  257,  123,   41,  125,  116,   44,
   70,   71,   41,   40,  212,   44,   59,   44,   78,  281,
  218,  149,  275,  276,  277,  214,   42,  251,   40,  137,
  136,   47,   92,  141,   44,    0,   41,   84,   41,   44,
   41,   44,   41,   44,  166,   44,   41,  309,  123,   44,
  125,   41,  112,   43,  146,   45,  148,  149,  261,  262,
  139,  285,  154,   41,  262,  157,   44,  146,   41,   44,
  149,    0,  180,   44,   45,   40,   40,   41,  257,  139,
  258,   45,  264,  123,  257,   41,  146,  260,  274,  149,
  263,  315,  265,   44,    0,   40,  264,   44,  206,  272,
   43,   44,   45,  225,  196,  227,  166,   43,  257,   45,
  202,   40,   41,   42,   43,   44,   45,  196,   47,   44,
  212,  345,  214,  202,  257,  349,  218,  261,  262,  261,
  262,   60,   61,   62,   40,   41,  196,   43,   44,   45,
  187,  188,  202,    0,   41,  264,   43,   44,   45,  257,
  272,   40,  257,   40,   60,   61,   62,   41,  278,  251,
  125,  253,  257,   40,   41,  225,  257,  227,  261,  262,
  262,   41,  251,  257,  253,  271,  223,  257,  271,   44,
  275,  276,  277,   40,   41,   41,   43,   44,   45,    0,
  257,  251,   44,  285,  271,  257,  125,  244,  167,  168,
  292,  257,  258,   60,   61,   62,  285,   44,  275,  276,
  277,   44,  272,  292,   44,  257,  258,  264,  265,  125,
    0,  257,  257,  315,  257,  285,  172,  173,  257,   40,
   41,   41,   43,   44,   45,   44,  315,   41,  346,   44,
  275,  276,  277,    0,   41,   44,  275,  276,  277,   60,
   61,   62,  125,  345,  257,  315,   41,  349,  257,   41,
   40,   44,  257,   44,  311,   44,  345,   44,  125,    0,
  349,   44,  275,  276,  277,   41,  275,  276,  277,  326,
  275,  276,  277,   40,  257,  345,  257,  258,  259,  349,
  125,  256,  257,  257,  258,  260,  261,  262,  263,  264,
  265,  257,  275,  276,  277,  270,  271,  272,  273,   40,
  275,  276,  277,    0,  125,   41,  261,  262,  262,  275,
  276,  277,   44,   41,  262,  262,  271,  256,  257,   44,
   44,  260,  261,  262,  263,  264,  265,  266,  267,  268,
  269,  270,  271,  272,  273,  125,  275,  276,  277,    0,
  256,  257,   44,   40,  260,  261,  262,  263,  264,  265,
  266,  267,  268,  269,  270,  271,  272,  273,  125,  275,
  276,  277,   44,  257,  261,  262,   44,    0,   43,   41,
   45,   44,  262,   44,  271,  125,   44,   44,   44,   40,
  262,  275,  276,  277,  125,   60,   61,   62,   44,  256,
  257,   44,    0,  260,  261,  262,  263,  264,  265,  266,
  267,  268,  269,  270,  271,  272,  273,   40,  275,  276,
  277,  262,  257,   44,   44,  260,   44,    0,  263,  260,
  265,   44,  272,   40,   40,  271,   41,  272,  125,  261,
   41,   44,   40,  262,   44,  256,  257,    0,  125,  260,
  261,  262,  263,  264,  265,  266,  267,  268,  269,  270,
  271,  272,  273,  123,  275,  276,  277,   40,  257,    0,
  123,  123,    0,  123,  125,  264,  256,  257,   41,  257,
  260,  261,  262,  263,  264,  265,  275,  276,  277,   41,
  270,  271,  272,  273,   41,  275,  276,  277,    0,  256,
  257,   41,  125,  260,  261,  262,  263,  264,  265,   40,
  260,  272,   13,  270,  271,  272,  273,  257,  275,  276,
  277,    0,   71,   48,  264,  256,  257,  125,  139,  260,
  261,  262,  263,  264,  265,  275,  276,  277,   40,  270,
  271,  272,  273,  292,  275,  276,  277,    4,  134,  129,
   -1,    0,  125,  136,   97,   -1,   -1,   -1,   -1,   -1,
   -1,   40,   -1,   -1,   -1,   -1,   -1,   -1,   -1,  256,
  257,   -1,   -1,  260,  261,  262,  263,  264,  265,   -1,
  257,   -1,   -1,  270,  271,  272,  273,  264,  275,  276,
  277,   40,   -1,   -1,  125,   -1,   -1,   -1,  275,  276,
  277,  266,  267,  268,  269,  256,  257,   -1,   -1,  260,
  261,  262,  263,  264,  265,   -1,   -1,   -1,   -1,  270,
  271,  272,  273,  125,  275,  276,  277,   -1,   -1,   -1,
   -1,   -1,   -1,  256,  257,   -1,   -1,  260,  261,  262,
  263,  264,  265,   -1,   -1,   -1,  125,  270,  271,  272,
  273,   -1,  275,  276,  277,   -1,   -1,   -1,  256,  257,
   -1,   -1,  260,  261,  262,  263,  264,  265,   -1,   -1,
   -1,   -1,  270,  271,  272,  273,  125,  275,  276,  277,
   40,   -1,   -1,  256,  257,   68,   -1,  260,  261,  262,
  263,  264,  265,   -1,   -1,   -1,   -1,  270,  271,  272,
  273,   84,  275,  276,  277,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   40,  256,  257,   -1,   -1,  260,
  261,  262,  263,  264,  265,   -1,   -1,   -1,   -1,  270,
  271,  272,  273,   -1,  275,  276,  277,   -1,   -1,   40,
   -1,   -1,   -1,  136,  256,  257,   -1,   -1,  260,  261,
  262,  263,  264,  265,   -1,  125,   -1,   -1,  270,  271,
  272,  273,   -1,  275,  276,  277,   -1,  256,  257,  162,
   -1,  260,  261,  262,  263,  264,  265,    0,   -1,   -1,
   -1,  270,  271,  272,  273,    8,  275,  276,  277,   40,
   13,   -1,   15,   -1,  187,  188,   -1,  256,  257,  125,
   -1,  260,  261,  262,  263,  264,  265,    0,   -1,   -1,
   -1,  270,  271,  272,  273,    8,  275,  276,  277,   -1,
   13,   -1,   15,   -1,  125,   48,   -1,  220,    0,    0,
  223,   54,   -1,   -1,   57,   -1,    8,   40,   -1,   -1,
   -1,   13,   13,   15,   15,   -1,   -1,   -1,   -1,   -1,
   -1,  244,   -1,   -1,   -1,   48,   -1,   -1,   40,   41,
   -1,   54,   -1,   45,   57,   -1,   -1,   -1,   -1,   92,
   -1,  264,  265,   40,  125,   -1,   48,   48,   60,   -1,
   62,   -1,   54,   54,   -1,   57,   57,  257,  281,  112,
  260,  261,  262,  263,  264,  265,   -1,   -1,   -1,   92,
  270,  271,  272,  273,   40,  275,  276,  277,   44,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,  309,   -1,  311,  112,
   92,   -1,  125,   -1,   -1,   40,   -1,   -1,   -1,   44,
   -1,  257,   -1,  326,  260,  261,  262,  263,  264,  265,
  112,  112,   -1,  166,  270,  271,  272,  273,   -1,  275,
  276,  277,   -1,   -1,   60,   61,  257,   -1,  125,  260,
  261,  262,  263,  264,  265,   -1,   -1,   -1,   -1,  270,
  271,  272,  273,  166,  275,  276,  277,   40,   41,   -1,
   -1,   -1,   45,   40,   41,   91,   -1,  123,   45,   -1,
   -1,   -1,   98,   -1,  166,   -1,   40,   60,   -1,   62,
   -1,   45,  225,   60,  227,   62,  257,   -1,  123,  260,
  261,  262,  263,  264,  265,   -1,   60,   -1,   62,  270,
  271,  272,  273,   -1,  275,  276,  277,   -1,   40,   41,
   -1,   -1,  225,   45,  227,   -1,  123,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   60,  272,
   62,   -1,   -1,  225,  257,  227,   -1,  260,  261,  262,
  263,  264,  265,  169,  170,   -1,   -1,  270,  271,  272,
  273,   -1,  275,  276,  277,  257,  258,  183,   -1,  272,
   -1,   -1,   -1,   -1,  266,  267,  268,  269,   -1,   -1,
  257,   -1,   -1,  260,  261,  262,  263,  264,  265,   -1,
  272,   -1,   -1,  270,  271,  272,  273,   -1,  275,  276,
  277,   40,   41,   -1,   -1,   -1,   45,   -1,   -1,   -1,
   -1,  257,   -1,   -1,  260,  123,   -1,  263,  264,  265,
   -1,   60,   -1,   62,  270,  271,  272,  273,   -1,  275,
  276,  277,  257,   -1,   -1,  260,   40,   41,  263,  264,
  265,   45,  123,   -1,   -1,  270,  271,  272,  273,   -1,
  275,  276,  277,   -1,   -1,   -1,   60,   -1,   62,   -1,
  257,   -1,  278,  260,  261,  262,  263,  264,  265,   -1,
   -1,   -1,   -1,  270,   -1,  272,  273,   -1,  275,  276,
  277,   -1,   -1,   -1,  257,  258,   -1,   -1,   -1,   -1,
  257,  258,   -1,  266,  267,  268,  269,  123,   -1,  266,
  267,  268,  269,  257,  258,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,  266,  267,  268,  269,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,  123,   -1,  125,  257,  258,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,  266,  267,  268,  269,   -1,  257,
   -1,   -1,  260,  261,  262,  263,  264,  265,  123,   -1,
   -1,   -1,  270,   -1,  272,  273,   -1,  275,  276,  277,
   -1,   -1,   -1,   -1,   -1,  256,  257,   -1,   -1,  260,
  123,   -1,  263,  264,  265,   -1,   -1,   -1,   -1,  270,
   -1,  272,  273,   -1,  275,  276,  277,   -1,   -1,   -1,
   -1,  123,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,  257,  258,
   -1,   -1,   -1,   -1,   -1,  125,   -1,  266,  267,  268,
  269,  257,   -1,   -1,  260,   -1,  262,  263,  264,  265,
   -1,   -1,   -1,   -1,  270,   -1,  272,  273,  125,  275,
  276,  277,   -1,  257,  258,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,  266,  267,  268,  269,  257,   -1,   -1,  260,
  125,   -1,  263,  264,  265,   -1,   -1,   -1,   -1,  270,
   -1,  272,  273,   -1,  275,  276,  277,   -1,   -1,   -1,
   -1,  125,  257,   -1,   -1,  260,   -1,  262,  263,  264,
  265,   -1,   -1,   -1,   -1,  270,   -1,  272,  273,   -1,
  275,  276,  277,  125,  257,   -1,   -1,  260,   -1,   -1,
  263,  264,  265,   -1,   -1,   -1,   -1,  270,   -1,  272,
  273,   -1,  275,  276,  277,  257,  125,   -1,  260,   -1,
   -1,  263,  264,  265,   -1,   -1,   -1,   -1,  270,   -1,
  272,  273,   -1,  275,  276,  277,  256,  257,  125,   -1,
  260,   -1,   -1,  263,  264,  265,   -1,   -1,   -1,   -1,
  270,   -1,  272,  273,   -1,  275,  276,  277,   -1,  256,
  257,  125,   -1,  260,   -1,   -1,  263,  264,  265,   -1,
   -1,   -1,   -1,  270,   -1,  272,  273,   -1,  275,  276,
  277,  256,  257,  125,   -1,  260,   -1,   -1,  263,  264,
  265,   -1,   -1,   -1,   -1,  270,   -1,  272,  273,   -1,
  275,  276,  277,  257,  125,   -1,  260,   -1,   -1,  263,
  264,  265,   -1,   -1,   -1,   -1,  270,   -1,  272,  273,
   -1,  275,  276,  277,   -1,  257,  125,   -1,  260,   -1,
   -1,  263,  264,  265,   -1,   -1,   -1,   -1,  270,   -1,
  272,  273,   -1,  275,  276,  277,   -1,  125,  257,   -1,
   -1,  260,   -1,   -1,  263,  264,  265,   -1,   -1,   -1,
   -1,  270,   -1,  272,  273,   -1,  275,  276,  277,  125,
  257,   -1,   -1,  260,   -1,   -1,  263,  264,  265,   -1,
   -1,   -1,   -1,  270,   -1,  272,  273,   -1,  275,  276,
  277,  125,   -1,  257,   -1,   -1,  260,   -1,   -1,  263,
  264,  265,   -1,   -1,   -1,   -1,  270,   -1,  272,  273,
   -1,  275,  276,  277,  125,  257,   -1,   -1,  260,   -1,
   -1,  263,  264,  265,   -1,   -1,   -1,   -1,  270,   -1,
  272,  273,   -1,  275,  276,  277,  257,  125,   -1,  260,
   -1,   -1,  263,  264,  265,   -1,   -1,   -1,   -1,  270,
   -1,  272,  273,   -1,  275,  276,  277,   -1,  257,  125,
   -1,  260,   -1,   -1,  263,  264,  265,   -1,   -1,   -1,
   -1,  270,   -1,  272,  273,   -1,  275,  276,  277,  257,
  125,   -1,  260,   -1,   -1,  263,  264,  265,   -1,   -1,
   -1,   -1,  270,   -1,  272,  273,   -1,  275,  276,  277,
   -1,  257,  125,   -1,  260,   -1,   -1,  263,  264,  265,
   -1,   -1,   -1,   -1,  270,   -1,  272,  273,   -1,  275,
  276,  277,   -1,  257,  125,   -1,  260,   -1,   -1,  263,
  264,  265,   -1,   -1,   -1,   -1,  270,   -1,  272,  273,
   -1,  275,  276,  277,   -1,   -1,  257,   -1,   -1,  260,
   -1,   -1,  263,  264,  265,   -1,   -1,   -1,   -1,  270,
   -1,  272,  273,   -1,  275,  276,  277,   -1,   -1,  257,
   -1,   -1,  260,   -1,   -1,  263,  264,  265,   -1,   -1,
   -1,   -1,  270,   -1,  272,  273,   -1,  275,  276,  277,
   -1,  257,   -1,   -1,  260,   -1,   -1,  263,  264,  265,
   -1,   -1,   -1,   -1,  270,   -1,  272,  273,   -1,  275,
  276,  277,  257,   -1,   -1,  260,   -1,   -1,  263,  264,
  265,   -1,   -1,   -1,   -1,  270,   -1,  272,  273,   -1,
  275,  276,  277,   -1,  257,   -1,   -1,  260,   -1,   -1,
  263,  264,  265,   -1,   -1,   -1,   -1,  270,   -1,  272,
  273,   -1,  275,  276,  277,   -1,  257,   -1,   -1,  260,
   -1,   -1,  263,  264,   -1,   -1,   -1,   -1,   -1,  270,
   -1,  272,  273,   -1,  275,  276,  277,
};
}
final static short YYFINAL=14;
final static short YYMAXTOKEN=278;
final static String yyname[] = {
"end-of-file",null,null,null,null,null,null,null,null,null,null,null,null,null,
null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,
null,null,null,null,null,null,null,null,null,null,"'('","')'","'*'","'+'","','",
"'-'","'.'","'/'",null,null,null,null,null,null,null,null,null,null,null,"';'",
"'<'","'='","'>'",null,null,null,null,null,null,null,null,null,null,null,null,
null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,
null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,
null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,
"'{'",null,"'}'",null,null,null,null,null,null,null,null,null,null,null,null,
null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,
null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,
null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,
null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,
null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,
null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,
null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,
null,null,null,null,null,null,null,"ID","CTE","CADENA","IF","ELSE","ENDIF",
"PRINT","VOID","RETURN","COMP_MAYOR_IGUAL","COMP_MENOR_IGUAL","COMP_IGUAL",
"COMP_DISTINTO","CLASS","WHILE","DO","INTERFACE","IMPLEMENT","INT","ULONG",
"FLOAT","OPERADOR_MENOS",
};
final static String yyrule[] = {
"$accept : programa",
"programa : '{' sentencias '}'",
"programa : sentencias '}'",
"programa : '{' sentencias",
"programa : '{' '}'",
"programa :",
"sentencias : sentencia",
"sentencias : sentencias sentencia",
"sentencia : sentencia_declarativa",
"sentencia : sentencia_ejecutable",
"sentencia : error ','",
"sentencia_ejecutable : sentencia_asignacion",
"sentencia_ejecutable : sentencia_invocacion_funcion",
"sentencia_ejecutable : sentencia_imprimir",
"sentencia_ejecutable : sentencia_seleccion",
"sentencia_ejecutable : sentencia_iterativa_do_while",
"sentencia_ejecutable : sentencia_return",
"sentencias_funcion : sentencia_funcion",
"sentencias_funcion : sentencias_funcion sentencia_funcion",
"sentencia_funcion : sentencia_declarativa",
"sentencia_funcion : sentencia_ejecutable_funcion",
"sentencia_ejecutable_funcion : sentencia_asignacion",
"sentencia_ejecutable_funcion : sentencia_invocacion_funcion",
"sentencia_ejecutable_funcion : sentencia_imprimir",
"sentencia_ejecutable_funcion : sentencia_seleccion_funcion",
"sentencia_ejecutable_funcion : sentencia_iterativa_do_while_funcion",
"sentencia_return : RETURN ','",
"sentencia_return : RETURN",
"sentencia_iterativa_do_while : DO bloque_sentencias_ejecutables WHILE '(' condicion ')' ','",
"sentencia_iterativa_do_while : DO bloque_sentencias_ejecutables WHILE '(' condicion ')'",
"sentencia_iterativa_do_while : DO WHILE '(' condicion ')' ','",
"sentencia_iterativa_do_while : DO bloque_sentencias_ejecutables WHILE '(' ')' ','",
"sentencia_iterativa_do_while : DO bloque_sentencias_ejecutables '(' condicion ')' ','",
"sentencia_iterativa_do_while : DO WHILE ','",
"sentencia_iterativa_do_while : DO bloque_sentencias_ejecutables WHILE ','",
"sentencia_iterativa_do_while : DO ','",
"sentencia_iterativa_do_while : DO '(' condicion ')' ','",
"sentencia_iterativa_do_while : DO '(' ')' ','",
"sentencia_iterativa_do_while : DO '(' ')'",
"sentencia_iterativa_do_while_funcion : DO bloque_sentencias_ejecutables_funcion WHILE '(' condicion ')' ','",
"$$1 :",
"sentencia_iterativa_do_while_funcion : DO bloque_sentencias_ejecutables_funcion WHILE '(' condicion ')' $$1 DO WHILE '(' condicion ')' ','",
"sentencia_iterativa_do_while_funcion : DO bloque_sentencias_ejecutables_funcion WHILE '(' ')' ','",
"sentencia_iterativa_do_while_funcion : DO bloque_sentencias_ejecutables_funcion '(' condicion ')' ','",
"sentencia_iterativa_do_while_funcion : DO WHILE ','",
"sentencia_iterativa_do_while_funcion : DO bloque_sentencias_ejecutables_funcion WHILE ','",
"sentencia_iterativa_do_while_funcion : DO ','",
"sentencia_iterativa_do_while_funcion : DO '(' condicion ')' ','",
"sentencia_iterativa_do_while_funcion : DO '(' ')' ','",
"sentencia_iterativa_do_while_funcion : DO '(' ')'",
"sentencia_seleccion : IF '(' condicion ')' bloque_sentencias_ejecutables ELSE bloque_sentencias_ejecutables ENDIF ','",
"sentencia_seleccion : IF '(' condicion ')' bloque_sentencias_ejecutables ENDIF ','",
"sentencia_seleccion : IF '(' condicion ')' bloque_sentencias_ejecutables ELSE bloque_sentencias_ejecutables ENDIF",
"sentencia_seleccion : IF '(' condicion ')' bloque_sentencias_ejecutables ENDIF",
"sentencia_seleccion : IF '(' ')' bloque_sentencias_ejecutables ELSE bloque_sentencias_ejecutables ENDIF ','",
"sentencia_seleccion : IF '(' ')' bloque_sentencias_ejecutables ENDIF ','",
"sentencia_seleccion : IF '(' condicion ')' ELSE bloque_sentencias_ejecutables ENDIF ','",
"sentencia_seleccion : IF '(' condicion ')' bloque_sentencias_ejecutables ELSE ENDIF ','",
"sentencia_seleccion : IF '(' condicion ')' ENDIF ','",
"sentencia_seleccion_funcion : IF '(' condicion ')' bloque_sentencias_ejecutables_funcion ELSE bloque_sentencias_ejecutables_funcion ENDIF ','",
"sentencia_seleccion_funcion : IF '(' condicion ')' bloque_sentencias_ejecutables_funcion ENDIF ','",
"sentencia_seleccion_funcion : IF '(' condicion ')' bloque_sentencias_ejecutables_funcion ELSE bloque_sentencias_ejecutables_funcion ENDIF",
"$$2 :",
"sentencia_seleccion_funcion : IF '(' condicion ')' bloque_sentencias_ejecutables_funcion ENDIF $$2 IF '(' ')' bloque_sentencias_ejecutables_funcion ELSE bloque_sentencias_ejecutables_funcion ENDIF ','",
"sentencia_seleccion_funcion : IF '(' ')' bloque_sentencias_ejecutables_funcion ENDIF ','",
"sentencia_seleccion_funcion : IF '(' condicion ')' ELSE bloque_sentencias_ejecutables_funcion ENDIF ','",
"sentencia_seleccion_funcion : IF '(' condicion ')' bloque_sentencias_ejecutables_funcion ELSE ENDIF ','",
"sentencia_seleccion_funcion : IF '(' condicion ')' ENDIF ','",
"bloque_sentencias_ejecutables : sentencia_ejecutable",
"bloque_sentencias_ejecutables : '{' sentencias_ejecutables '}'",
"bloque_sentencias_ejecutables : '{' sentencias_ejecutables",
"bloque_sentencias_ejecutables : sentencias_ejecutables '}'",
"bloque_sentencias_ejecutables : '{' '}'",
"bloque_sentencias_ejecutables : sentencia_declarativa",
"bloque_sentencias_ejecutables_funcion : sentencia_ejecutable_funcion",
"bloque_sentencias_ejecutables_funcion : sentencia_return",
"bloque_sentencias_ejecutables_funcion : sentencia_declarativa",
"bloque_sentencias_ejecutables_funcion : '{' sentencias_ejecutables_funcion '}'",
"bloque_sentencias_ejecutables_funcion : '{' sentencias_ejecutables_funcion sentencia_return '}'",
"bloque_sentencias_ejecutables_funcion : '{' sentencias_ejecutables_funcion sentencia_return sentencias_ejecutables_funcion_inalcanzable '}'",
"bloque_sentencias_ejecutables_funcion : sentencias_ejecutables_funcion '}'",
"bloque_sentencias_ejecutables_funcion : sentencias_ejecutables_funcion sentencia_return '}'",
"bloque_sentencias_ejecutables_funcion : '{' sentencias_ejecutables_funcion",
"bloque_sentencias_ejecutables_funcion : '{' sentencias_ejecutables_funcion sentencia_return",
"bloque_sentencias_ejecutables_funcion : '{' '}'",
"sentencias_ejecutables_funcion_inalcanzable : sentencia_ejecutable_funcion_inalcanzable",
"sentencias_ejecutables_funcion_inalcanzable : sentencias_ejecutables_funcion_inalcanzable sentencia_ejecutable_funcion_inalcanzable",
"sentencia_ejecutable_funcion_inalcanzable : sentencia_return",
"sentencia_ejecutable_funcion_inalcanzable : sentencia_ejecutable_funcion",
"sentencias_ejecutables : sentencia_ejecutable",
"sentencias_ejecutables : sentencias_ejecutables sentencia_ejecutable",
"sentencias_ejecutables : sentencia_declarativa",
"sentencias_ejecutables : sentencias_ejecutables sentencia_declarativa",
"sentencias_ejecutables_funcion : sentencia_ejecutable_funcion",
"sentencias_ejecutables_funcion : sentencias_ejecutables_funcion sentencia_ejecutable_funcion",
"sentencias_ejecutables_funcion : sentencia_declarativa",
"sentencias_ejecutables_funcion : sentencias_ejecutables_funcion sentencia_declarativa",
"sentencia_imprimir : PRINT CADENA ','",
"sentencia_imprimir : PRINT CADENA",
"sentencia_imprimir : PRINT ','",
"sentencia_imprimir : PRINT ID ','",
"sentencia_imprimir : PRINT ID",
"sentencia_imprimir : PRINT constante ','",
"sentencia_imprimir : PRINT constante",
"sentencia_invocacion_funcion : sentencia_objeto_identificador '(' expresion ')' ','",
"sentencia_invocacion_funcion : sentencia_objeto_identificador '(' ')' ','",
"sentencia_invocacion_funcion : sentencia_objeto_identificador '(' expresion ',' lista_expresiones_invocacion_funcion_exceso ')' ','",
"sentencia_invocacion_funcion : sentencia_objeto_identificador '(' expresion ')'",
"sentencia_invocacion_funcion : sentencia_objeto_identificador '(' ')'",
"sentencia_invocacion_funcion : sentencia_objeto_identificador '(' expresion ',' lista_expresiones_invocacion_funcion_exceso ')'",
"lista_expresiones_invocacion_funcion_exceso : expresion",
"lista_expresiones_invocacion_funcion_exceso : lista_expresiones_invocacion_funcion_exceso ',' expresion",
"sentencia_asignacion : sentencia_objeto_identificador '=' expresion ','",
"sentencia_asignacion : sentencia_objeto_identificador '=' expresion",
"sentencia_asignacion : sentencia_objeto_identificador '=' ','",
"sentencia_objeto_identificador : ID",
"sentencia_objeto_identificador : sentencia_objeto_identificador '.' ID",
"sentencia_declarativa : declaracion_variable",
"sentencia_declarativa : declaracion_funcion",
"sentencia_declarativa : declaracion_clase",
"sentencia_declarativa : declaracion_interfaz",
"declaracion_variable : tipo lista_de_variables ','",
"declaracion_variable : tipo lista_de_variables",
"declaracion_variable : tipo ','",
"declaracion_interfaz_encabezado : INTERFACE ID",
"declaracion_interfaz_encabezado : INTERFACE",
"declaracion_interfaz : declaracion_interfaz_encabezado '{' bloque_encabezado_funcion_declaracion_interfaz '}'",
"declaracion_interfaz : declaracion_interfaz_encabezado '}'",
"bloque_encabezado_funcion_declaracion_interfaz : encabezado_funcion_declaracion_interfaz",
"bloque_encabezado_funcion_declaracion_interfaz : bloque_encabezado_funcion_declaracion_interfaz encabezado_funcion_declaracion_interfaz",
"encabezado_funcion_declaracion_interfaz : encabezado_funcion_interfaz ','",
"encabezado_funcion_declaracion_interfaz : encabezado_funcion_interfaz",
"sentencia_declarativa_clase : tipo lista_de_variables ','",
"sentencia_declarativa_clase : tipo lista_de_variables",
"sentencia_declarativa_clase : declaracion_funcion",
"sentencia_declarativa_clase : ID ','",
"declaracion_clase_encabezado : CLASS ID",
"declaracion_clase_encabezado : CLASS ID IMPLEMENT ID",
"declaracion_clase_encabezado : CLASS",
"declaracion_clase_encabezado : CLASS IMPLEMENT ID",
"declaracion_clase_encabezado : CLASS ID IMPLEMENT",
"declaracion_clase_encabezado : CLASS IMPLEMENT",
"declaracion_clase : declaracion_clase_encabezado '{' bloque_sentencias_declarativas_clase '}'",
"bloque_sentencias_declarativas_clase : sentencia_declarativa_clase",
"bloque_sentencias_declarativas_clase : bloque_sentencias_declarativas_clase sentencia_declarativa_clase",
"declaracion_funcion : encabezado_funcion cuerpo_funcion",
"encabezado_funcion : encabezado_funcion_nombre '(' parametro_funcion ')'",
"encabezado_funcion : encabezado_funcion_nombre '(' ')'",
"encabezado_funcion : encabezado_funcion_nombre '(' parametro_funcion ',' lista_parametros_funcion_exceso ')'",
"encabezado_funcion : encabezado_funcion_nombre '(' parametro_funcion lista_parametros_funcion_exceso ')'",
"encabezado_funcion : encabezado_funcion_nombre ')'",
"encabezado_funcion_nombre : VOID ID",
"encabezado_funcion_nombre : VOID",
"encabezado_funcion_interfaz : VOID ID '(' parametro_funcion ')'",
"encabezado_funcion_interfaz : VOID ID '(' ')'",
"encabezado_funcion_interfaz : VOID ID '(' parametro_funcion ',' lista_parametros_funcion_exceso ')'",
"encabezado_funcion_interfaz : VOID ID '(' parametro_funcion lista_parametros_funcion_exceso ')'",
"encabezado_funcion_interfaz : VOID '(' parametro_funcion ')'",
"encabezado_funcion_interfaz : VOID '(' ')'",
"encabezado_funcion_interfaz : VOID ID parametro_funcion ')'",
"encabezado_funcion_interfaz : VOID ID ')'",
"cuerpo_funcion : '{' sentencias_funcion sentencia_return '}'",
"cuerpo_funcion : '{' sentencia_return '}'",
"cuerpo_funcion : '{' sentencias_funcion sentencia_return sentencias_funcion_inalcanzable '}'",
"cuerpo_funcion : '{' sentencia_return sentencias_funcion_inalcanzable '}'",
"cuerpo_funcion : '{' sentencias_funcion '}'",
"cuerpo_funcion : '{' '}'",
"cuerpo_funcion : sentencias_funcion sentencia_return '}'",
"cuerpo_funcion : sentencia_return '}'",
"cuerpo_funcion : sentencias_funcion sentencia_return sentencias_funcion_inalcanzable '}'",
"cuerpo_funcion : sentencia_return sentencias_funcion_inalcanzable '}'",
"cuerpo_funcion : sentencias_funcion '}'",
"cuerpo_funcion : '}'",
"sentencias_funcion_inalcanzable : sentencia_funcion_inalcanzable",
"sentencias_funcion_inalcanzable : sentencias_funcion_inalcanzable sentencia_funcion_inalcanzable",
"sentencia_funcion_inalcanzable : sentencia_declarativa",
"sentencia_funcion_inalcanzable : sentencia_return",
"sentencia_funcion_inalcanzable : sentencia_ejecutable_funcion",
"lista_parametros_funcion_exceso : parametro_funcion",
"lista_parametros_funcion_exceso : lista_parametros_funcion_exceso ',' parametro_funcion",
"lista_parametros_funcion_exceso : lista_parametros_funcion_exceso parametro_funcion",
"parametro_funcion : tipo ID",
"lista_de_variables : ID",
"lista_de_variables : lista_de_variables ';' ID",
"tipo : INT",
"tipo : ULONG",
"tipo : FLOAT",
"tipo : ID",
"condicion : expresion comparador expresion",
"condicion : expresion comparador",
"condicion : comparador expresion",
"condicion : expresion '=' expresion",
"comparador : COMP_MAYOR_IGUAL",
"comparador : COMP_MENOR_IGUAL",
"comparador : COMP_IGUAL",
"comparador : COMP_DISTINTO",
"comparador : '>'",
"comparador : '<'",
"expresion : expresion '+' termino",
"expresion : expresion '-' termino",
"expresion : termino",
"termino : termino '*' factor",
"termino : termino '/' factor",
"termino : factor",
"factor : ID",
"factor : ID OPERADOR_MENOS",
"factor : constante",
"factor : '(' expresion ')'",
"constante : CTE",
"constante : '-' CTE",
};

//#line 451 "./src/compilador/gramatica.y"

public static AnalizadorLexico lexico = null;
public static GeneracionCodigoIntermedio genCodigoIntermedio = GeneracionCodigoIntermedio.getInstance();
public static Logger logger = Logger.getInstance();
public static TablaDeSimbolos ts = TablaDeSimbolos.getInstance();
public static Parser parser = null;
public static int MAX_INT_VALUE = (int) (Math.pow(2, 15) - 1);

/** Chequea, para los INT, que el valor positivo no supere el valor maximo */
public void corregirConstantePositivaEntera(String constante) {
	if (constante.contains("_i")) {
		//se recibio un INT con signo positivo
		boolean exceptionOutOfRange = false;
		int cte = 0;
		String constanteValue = constante.toString().split("_")[0];

		try {
			cte = Integer.parseInt(constanteValue);
		} catch (NumberFormatException e) {
			exceptionOutOfRange = true;
		}

		if (cte > MAX_INT_VALUE || exceptionOutOfRange) {
			logger.logWarning("[Parser] Rango invalido para la constante: " + constante + ", se trunca al valor " + MAX_INT_VALUE + "_i");

			ts.swapLexemas(constante, MAX_INT_VALUE + "_i");
		}
	}
}

public void constanteConSigno(String constante) {
	/** Check de float negativos */
	if (constante.contains(".")) {
		String negConstante = "-"+constante;
		ts.swapLexemas(constante, negConstante);
	} else {

		if (constante.contains("_ul")) {
			//se recibio un ULONG con signo negativo
			logger.logWarning("[Parser] No se admiten ULONG con valores negativos: " + "-"+constante + ", se trunca a 0_ul");
		
			ts.swapLexemas(constante, "0_ul");
		} else {
			// se recibio un INT negativo
			String negConstante = "-"+constante;
			ts.swapLexemas(constante, negConstante);
		}
	}
}	

public int yylex() {
	return lexico.yylex(parser);
}

public void yyerror(String error) {
	logger.logError(error);
}

public static void main(String[] args) {
	if (args.length == 0) {
		System.err.println("No se especifico ningun archivo de codigo");
	} else {
		String archivo_a_leer = args[0];
		System.out.println("Se va a leer archivo " + archivo_a_leer);
		
		FileReaderHelper fileHelper = new FileReaderHelper();
		
		boolean fileOpenSuccess = fileHelper.open(archivo_a_leer);
		
		if (fileOpenSuccess) {
			parser = new Parser();
			lexico = new AnalizadorLexico(fileHelper);
			
	        parser.run();
	
			String path = new File(archivo_a_leer).getAbsolutePath();
	        
	        Output out = new Output(path);
	        
	        out.saveFile("codigo-lexico.txt", logger.getLexico());
			out.saveFile("codigo-sintactico.txt", logger.getSintactico());
			out.saveFile("tabla-de-simbolos.txt", ts.print());
		}
	}
}
//#line 1019 "Parser.java"
//###############################################################
// method: yylexdebug : check lexer state
//###############################################################
void yylexdebug(int state,int ch)
{
String s=null;
  if (ch < 0) ch=0;
  if (ch <= YYMAXTOKEN) //check index bounds
     s = yyname[ch];    //now get it
  if (s==null)
    s = "illegal-symbol";
  debug("state "+state+", reading "+ch+" ("+s+")");
}





//The following are now global, to aid in error reporting
int yyn;       //next next thing to do
int yym;       //
int yystate;   //current parsing state from state table
String yys;    //current token string


//###############################################################
// method: yyparse : parse input and execute indicated items
//###############################################################
int yyparse()
{
boolean doaction;
  init_stacks();
  yynerrs = 0;
  yyerrflag = 0;
  yychar = -1;          //impossible char forces a read
  yystate=0;            //initial state
  state_push(yystate);  //save it
  val_push(yylval);     //save empty value
  while (true) //until parsing is done, either correctly, or w/error
    {
    doaction=true;
    if (yydebug) debug("loop"); 
    //#### NEXT ACTION (from reduction table)
    for (yyn=yydefred[yystate];yyn==0;yyn=yydefred[yystate])
      {
      if (yydebug) debug("yyn:"+yyn+"  state:"+yystate+"  yychar:"+yychar);
      if (yychar < 0)      //we want a char?
        {
        yychar = yylex();  //get next token
        if (yydebug) debug(" next yychar:"+yychar);
        //#### ERROR CHECK ####
        if (yychar < 0)    //it it didn't work/error
          {
          yychar = 0;      //change it to default string (no -1!)
          if (yydebug)
            yylexdebug(yystate,yychar);
          }
        }//yychar<0
      yyn = yysindex[yystate];  //get amount to shift by (shift index)
      if ((yyn != 0) && (yyn += yychar) >= 0 &&
          yyn <= YYTABLESIZE && yycheck[yyn] == yychar)
        {
        if (yydebug)
          debug("state "+yystate+", shifting to state "+yytable[yyn]);
        //#### NEXT STATE ####
        yystate = yytable[yyn];//we are in a new state
        state_push(yystate);   //save it
        val_push(yylval);      //push our lval as the input for next rule
        yychar = -1;           //since we have 'eaten' a token, say we need another
        if (yyerrflag > 0)     //have we recovered an error?
           --yyerrflag;        //give ourselves credit
        doaction=false;        //but don't process yet
        break;   //quit the yyn=0 loop
        }

    yyn = yyrindex[yystate];  //reduce
    if ((yyn !=0 ) && (yyn += yychar) >= 0 &&
            yyn <= YYTABLESIZE && yycheck[yyn] == yychar)
      {   //we reduced!
      if (yydebug) debug("reduce");
      yyn = yytable[yyn];
      doaction=true; //get ready to execute
      break;         //drop down to actions
      }
    else //ERROR RECOVERY
      {
      if (yyerrflag==0)
        {
        yyerror("syntax error");
        yynerrs++;
        }
      if (yyerrflag < 3) //low error count?
        {
        yyerrflag = 3;
        while (true)   //do until break
          {
          if (stateptr<0)   //check for under & overflow here
            {
            yyerror("stack underflow. aborting...");  //note lower case 's'
            return 1;
            }
          yyn = yysindex[state_peek(0)];
          if ((yyn != 0) && (yyn += YYERRCODE) >= 0 &&
                    yyn <= YYTABLESIZE && yycheck[yyn] == YYERRCODE)
            {
            if (yydebug)
              debug("state "+state_peek(0)+", error recovery shifting to state "+yytable[yyn]+" ");
            yystate = yytable[yyn];
            state_push(yystate);
            val_push(yylval);
            doaction=false;
            break;
            }
          else
            {
            if (yydebug)
              debug("error recovery discarding state "+state_peek(0)+" ");
            if (stateptr<0)   //check for under & overflow here
              {
              yyerror("Stack underflow. aborting...");  //capital 'S'
              return 1;
              }
            state_pop();
            val_pop();
            }
          }
        }
      else            //discard this token
        {
        if (yychar == 0)
          return 1; //yyabort
        if (yydebug)
          {
          yys = null;
          if (yychar <= YYMAXTOKEN) yys = yyname[yychar];
          if (yys == null) yys = "illegal-symbol";
          debug("state "+yystate+", error recovery discards token "+yychar+" ("+yys+")");
          }
        yychar = -1;  //read another
        }
      }//end error recovery
    }//yyn=0 loop
    if (!doaction)   //any reason not to proceed?
      continue;      //skip action
    yym = yylen[yyn];          //get count of terminals on rhs
    if (yydebug)
      debug("state "+yystate+", reducing "+yym+" by rule "+yyn+" ("+yyrule[yyn]+")");
    if (yym>0)                 //if count of rhs not 'nil'
      yyval = val_peek(yym-1); //get current semantic value
    yyval = dup_yyval(yyval); //duplicate yyval if ParserVal is used as semantic value
    switch(yyn)
      {
//########## USER-SUPPLIED ACTIONS ##########
case 1:
//#line 17 "./src/compilador/gramatica.y"
{ logger.logSuccess("[Parser] Programa correcto detectado"); }
break;
case 2:
//#line 18 "./src/compilador/gramatica.y"
{ logger.logError("[Parser] Se esperaba simbolo '{' al principio del programa"); }
break;
case 3:
//#line 19 "./src/compilador/gramatica.y"
{ logger.logError("[Parser] Se esperaba simbolo '}' al final del programa"); }
break;
case 4:
//#line 20 "./src/compilador/gramatica.y"
{ logger.logError("[Parser] Programa vacio"); }
break;
case 5:
//#line 21 "./src/compilador/gramatica.y"
{ logger.logError("[Parser] Programa vacio"); }
break;
case 10:
//#line 32 "./src/compilador/gramatica.y"
{ logger.logError("[Parser] Error de sintaxis en la sentencia"); }
break;
case 16:
//#line 41 "./src/compilador/gramatica.y"
{ logger.logError("[Parser] Sentencia RETURN fuera de funcion"); }
break;
case 27:
//#line 64 "./src/compilador/gramatica.y"
{ logger.logError("[Parser] Se esperaba un simbolo ',' luego del RETURN"); }
break;
case 28:
//#line 68 "./src/compilador/gramatica.y"
{ logger.logSuccess("[Parser] Sentencia iterativa DO WHILE detectada"); }
break;
case 29:
//#line 69 "./src/compilador/gramatica.y"
{ logger.logError("[Parser] Se esperaba ',' luego de sentencia DO WHILE"); }
break;
case 30:
//#line 70 "./src/compilador/gramatica.y"
{ logger.logError("[Parser] Se esperaban sentencias ejecutables en sentencia DO WHILE"); }
break;
case 31:
//#line 71 "./src/compilador/gramatica.y"
{ logger.logError("[Parser] Se esperaba condicion en sentencia DO WHILE"); }
break;
case 32:
//#line 72 "./src/compilador/gramatica.y"
{ logger.logError("[Parser] Se esperaba WHILE en sentencia DO WHILE"); }
break;
case 33:
//#line 73 "./src/compilador/gramatica.y"
{ logger.logError("[Parser] Se esperaban sentencias ejecutables en sentencia DO WHILE"); }
break;
case 34:
//#line 74 "./src/compilador/gramatica.y"
{ logger.logError("[Parser] Se esperaba condicion en sentencia DO WHILE"); }
break;
case 35:
//#line 75 "./src/compilador/gramatica.y"
{ logger.logError("[Parser] Se esperaban sentencias ejecutables en sentencia DO WHILE"); }
break;
case 36:
//#line 76 "./src/compilador/gramatica.y"
{ logger.logError("[Parser] Se esperaban sentencias ejecutables en sentencia DO WHILE"); }
break;
case 37:
//#line 77 "./src/compilador/gramatica.y"
{ logger.logError("[Parser] Se esperaban sentencias ejecutables en sentencia DO WHILE"); }
break;
case 38:
//#line 78 "./src/compilador/gramatica.y"
{ logger.logError("[Parser] Se esperaban sentencias ejecutables en sentencia DO WHILE"); }
break;
case 39:
//#line 82 "./src/compilador/gramatica.y"
{ logger.logSuccess("[Parser] Sentencia iterativa DO WHILE detectada"); }
break;
case 40:
//#line 83 "./src/compilador/gramatica.y"
{ logger.logError("[Parser] Se esperaba ',' luego de sentencia DO WHILE"); }
break;
case 41:
//#line 84 "./src/compilador/gramatica.y"
{ logger.logError("[Parser] Se esperaban sentencias ejecutables en sentencia DO WHILE"); }
break;
case 42:
//#line 85 "./src/compilador/gramatica.y"
{ logger.logError("[Parser] Se esperaba condicion en sentencia DO WHILE"); }
break;
case 43:
//#line 86 "./src/compilador/gramatica.y"
{ logger.logError("[Parser] Se esperaba WHILE en sentencia DO WHILE"); }
break;
case 44:
//#line 87 "./src/compilador/gramatica.y"
{ logger.logError("[Parser] Se esperaban sentencias ejecutables en sentencia DO WHILE"); }
break;
case 45:
//#line 88 "./src/compilador/gramatica.y"
{ logger.logError("[Parser] Se esperaba condicion en sentencia DO WHILE"); }
break;
case 46:
//#line 89 "./src/compilador/gramatica.y"
{ logger.logError("[Parser] Se esperaban sentencias ejecutables en sentencia DO WHILE"); }
break;
case 47:
//#line 90 "./src/compilador/gramatica.y"
{ logger.logError("[Parser] Se esperaban sentencias ejecutables en sentencia DO WHILE"); }
break;
case 48:
//#line 91 "./src/compilador/gramatica.y"
{ logger.logError("[Parser] Se esperaban sentencias ejecutables en sentencia DO WHILE"); }
break;
case 49:
//#line 92 "./src/compilador/gramatica.y"
{ logger.logError("[Parser] Se esperaban sentencias ejecutables en sentencia DO WHILE"); }
break;
case 50:
//#line 96 "./src/compilador/gramatica.y"
{ logger.logSuccess("[Parser] Sentencia seleccion IF ELSE detectada"); }
break;
case 51:
//#line 97 "./src/compilador/gramatica.y"
{ logger.logSuccess("[Parser] Sentencia seleccion IF sin ELSE detectada"); }
break;
case 52:
//#line 98 "./src/compilador/gramatica.y"
{ logger.logError("[Parser] Se esperaba ',' luego de sentencia IF ELSE"); }
break;
case 53:
//#line 99 "./src/compilador/gramatica.y"
{ logger.logError("[Parser] Se esperaba ',' luego de sentencia IF sin ELSE"); }
break;
case 54:
//#line 100 "./src/compilador/gramatica.y"
{ logger.logError("[Parser] Se esperaba condicion en sentencia IF ELSE"); }
break;
case 55:
//#line 101 "./src/compilador/gramatica.y"
{ logger.logError("[Parser] Se esperaba condicion en sentencia IF"); }
break;
case 56:
//#line 102 "./src/compilador/gramatica.y"
{ logger.logError("[Parser] Se esperaban sentencias ejecutables en sentencia IF ELSE"); }
break;
case 57:
//#line 103 "./src/compilador/gramatica.y"
{ logger.logError("[Parser] Se esperaban sentencias ejecutables en sentencia IF ELSE"); }
break;
case 58:
//#line 104 "./src/compilador/gramatica.y"
{ logger.logError("[Parser] Se esperaban sentencias ejecutables en sentencia IF"); }
break;
case 59:
//#line 108 "./src/compilador/gramatica.y"
{ logger.logSuccess("[Parser] Sentencia seleccion IF ELSE detectada"); }
break;
case 60:
//#line 109 "./src/compilador/gramatica.y"
{ logger.logSuccess("[Parser] Sentencia seleccion IF sin ELSE detectada"); }
break;
case 61:
//#line 110 "./src/compilador/gramatica.y"
{ logger.logError("[Parser] Se esperaba ',' luego de sentencia IF ELSE"); }
break;
case 62:
//#line 111 "./src/compilador/gramatica.y"
{ logger.logError("[Parser] Se esperaba ',' luego de sentencia IF sin ELSE"); }
break;
case 63:
//#line 112 "./src/compilador/gramatica.y"
{ logger.logError("[Parser] Se esperaba condicion en sentencia IF ELSE"); }
break;
case 64:
//#line 113 "./src/compilador/gramatica.y"
{ logger.logError("[Parser] Se esperaba condicion en sentencia IF"); }
break;
case 65:
//#line 114 "./src/compilador/gramatica.y"
{ logger.logError("[Parser] Se esperaban sentencias ejecutables en sentencia IF ELSE"); }
break;
case 66:
//#line 115 "./src/compilador/gramatica.y"
{ logger.logError("[Parser] Se esperaban sentencias ejecutables en sentencia IF ELSE"); }
break;
case 67:
//#line 116 "./src/compilador/gramatica.y"
{ logger.logError("[Parser] Se esperaban sentencias ejecutables en sentencia IF"); }
break;
case 70:
//#line 122 "./src/compilador/gramatica.y"
{ logger.logError("[Parser] Se esperaban un simbolo '}' en el bloque"); }
break;
case 71:
//#line 123 "./src/compilador/gramatica.y"
{ logger.logError("[Parser] Se esperaban un simbolo '{' en el bloque"); }
break;
case 72:
//#line 124 "./src/compilador/gramatica.y"
{ logger.logError("[Parser] Se esperaban sentencias ejecutables dentro del bloque"); }
break;
case 73:
//#line 125 "./src/compilador/gramatica.y"
{ logger.logError("[Parser] No se permiten declaraciones de variables dentro de bloque de sentencias ejecutables"); }
break;
case 76:
//#line 131 "./src/compilador/gramatica.y"
{ logger.logError("[Parser] No se permiten declaraciones de variables dentro de bloque de sentencias ejecutables"); }
break;
case 80:
//#line 135 "./src/compilador/gramatica.y"
{ logger.logError("[Parser] Se esperaban un simbolo '{' en el bloque"); }
break;
case 81:
//#line 136 "./src/compilador/gramatica.y"
{ logger.logError("[Parser] Se esperaban un simbolo '{' en el bloque"); }
break;
case 82:
//#line 137 "./src/compilador/gramatica.y"
{ logger.logError("[Parser] Se esperaban un simbolo '}' en el bloque"); }
break;
case 83:
//#line 138 "./src/compilador/gramatica.y"
{ logger.logError("[Parser] Se esperaban un simbolo '}' en el bloque"); }
break;
case 84:
//#line 139 "./src/compilador/gramatica.y"
{ logger.logError("[Parser] Se esperaban sentencias ejecutables en bloque de sentencias ejecutables"); }
break;
case 85:
//#line 143 "./src/compilador/gramatica.y"
{ logger.logError("[Parser] Codigo inalcanzable luego del RETURN, se ignorara"); }
break;
case 86:
//#line 144 "./src/compilador/gramatica.y"
{ logger.logError("[Parser] Codigo inalcanzable luego del RETURN, se ignorara"); }
break;
case 91:
//#line 155 "./src/compilador/gramatica.y"
{ logger.logError("[Parser] No se aceptan declaraciones de variables en sentencias ejecutables"); }
break;
case 92:
//#line 156 "./src/compilador/gramatica.y"
{ logger.logError("[Parser] No se aceptan declaraciones de variables en sentencias ejecutables"); }
break;
case 95:
//#line 162 "./src/compilador/gramatica.y"
{ logger.logError("[Parser] No se aceptan declaraciones de variables en sentencias ejecutables"); }
break;
case 96:
//#line 163 "./src/compilador/gramatica.y"
{ logger.logError("[Parser] No se aceptan declaraciones de variables en sentencias ejecutables"); }
break;
case 97:
//#line 167 "./src/compilador/gramatica.y"
{ logger.logSuccess("[Parser] Sentencia PRINT detectada"); }
break;
case 98:
//#line 168 "./src/compilador/gramatica.y"
{ logger.logError("[Parser] Se esperaba un simbolo ',' en Sentencia PRINT"); }
break;
case 99:
//#line 169 "./src/compilador/gramatica.y"
{ logger.logError("[Parser] Se esperaba CADENA en Sentencia PRINT"); }
break;
case 100:
//#line 170 "./src/compilador/gramatica.y"
{ logger.logError("[Parser] Se esperaba una CADENA y se encontro un IDENTIFICADOR en sentencia PRINT"); }
break;
case 101:
//#line 171 "./src/compilador/gramatica.y"
{ logger.logError("[Parser] Se esperaba un simbolo ',' en sentencia PRINT"); }
break;
case 102:
//#line 172 "./src/compilador/gramatica.y"
{ logger.logError("[Parser] Se esperaba una CADENA y se encontro una constante en sentencia PRINT"); }
break;
case 103:
//#line 173 "./src/compilador/gramatica.y"
{ logger.logError("[Parser] Se esperaba un simbolo ',' en sentencia PRINT"); }
break;
case 104:
//#line 177 "./src/compilador/gramatica.y"
{ logger.logSuccess("[Parser] Invocacion de funcion con expresion detectada"); }
break;
case 105:
//#line 178 "./src/compilador/gramatica.y"
{ logger.logSuccess("[Parser] Invocacion de funcion sin expresion detectada"); }
break;
case 106:
//#line 179 "./src/compilador/gramatica.y"
{ logger.logError("[Parser] Invocacion de funcion con multiples expresiones detectada, se preserva solo la primera expresion"); }
break;
case 107:
//#line 180 "./src/compilador/gramatica.y"
{ logger.logError("[Parser] Se esperaba un simbolo ',' en invocacion de funcion"); }
break;
case 108:
//#line 181 "./src/compilador/gramatica.y"
{ logger.logError("[Parser] Se esperaba un simbolo ',' en invocacion de funcion"); }
break;
case 109:
//#line 182 "./src/compilador/gramatica.y"
{ logger.logError("[Parser] Se esperaba un simbolo ',' en invocacion de funcion"); }
break;
case 112:
//#line 191 "./src/compilador/gramatica.y"
{ logger.logSuccess("[Parser] Asignacion detectada"); }
break;
case 113:
//#line 192 "./src/compilador/gramatica.y"
{ logger.logError("[Parser] Se esperaba un simbolo ',' en sentencia asignacion"); }
break;
case 114:
//#line 193 "./src/compilador/gramatica.y"
{ logger.logError("[Parser] Se esperaba expresion del lado derecho en sentencia asignacion"); }
break;
case 115:
//#line 197 "./src/compilador/gramatica.y"
{
		if (genCodigoIntermedio.existeIdentificadorEnAmbito(val_peek(0).sval)) {
			logger.logSuccess("[Gen Codigo Intermedio] El identificador " + val_peek(0).sval + " existe en el ambito");
		} else {
			logger.logError("[Gen Codigo Intermedio] El identificador " + val_peek(0).sval + " no esta declarado en el ambito");
		}
	}
break;
case 121:
//#line 215 "./src/compilador/gramatica.y"
{ 
		logger.logSuccess("[Parser] Declaracion de lista de variables detectado");
		genCodigoIntermedio.agregarTipoAListaDeVariables(val_peek(2).sval);
		genCodigoIntermedio.agregarUsoAListaDeVariables("variable");
		genCodigoIntermedio.agregarAmbitoAListaDeVariables();
		genCodigoIntermedio.removerListaVariablesADeclarar();
	}
break;
case 122:
//#line 222 "./src/compilador/gramatica.y"
{ logger.logError("[Parser] Se esperaba un simbolo ',' en sentencia declaracion de variables"); }
break;
case 123:
//#line 223 "./src/compilador/gramatica.y"
{ logger.logError("[Parser] Se esperaba una lista de variables en sentencia declaracion de variables"); }
break;
case 124:
//#line 227 "./src/compilador/gramatica.y"
{
		genCodigoIntermedio.agregarUsoAIdentificador(val_peek(0).sval, "nombre_interfaz");
		genCodigoIntermedio.agregarAmbitoAIdentificador(val_peek(0).sval);
		genCodigoIntermedio.setAmbitoClaseInterfaz(val_peek(0).sval);
	}
break;
case 125:
//#line 232 "./src/compilador/gramatica.y"
{ logger.logError("[Parser] Se esperaba un identificador en declaracion de INTERFACE"); }
break;
case 126:
//#line 236 "./src/compilador/gramatica.y"
{ 
		logger.logSuccess("[Parser] Declaracion de INTERFACE detectada");
	}
break;
case 127:
//#line 239 "./src/compilador/gramatica.y"
{ logger.logError("[Parser] Se esperaba un simbolo '{' en declaracion de INTERFACE"); }
break;
case 131:
//#line 249 "./src/compilador/gramatica.y"
{ logger.logError("[Parser] Se esperaba un simbolo ',' en declaracion de metodo en CLASS"); }
break;
case 132:
//#line 253 "./src/compilador/gramatica.y"
{ 
		logger.logSuccess("[Parser] Declaracion de lista de variables en CLASS detectado"); 
		genCodigoIntermedio.agregarTipoAListaDeVariables(val_peek(2).sval);
		genCodigoIntermedio.agregarUsoAListaDeVariables("atributo");
		genCodigoIntermedio.agregarAmbitoAListaDeAtributos();
		genCodigoIntermedio.removerListaVariablesADeclarar();
	}
break;
case 133:
//#line 260 "./src/compilador/gramatica.y"
{ logger.logError("[Parser] Se esperaba un simbolo ',' en declaracion de lista de variables en CLASS"); }
break;
case 136:
//#line 266 "./src/compilador/gramatica.y"
{ 
		genCodigoIntermedio.setAmbitoClaseInterfaz(val_peek(0).sval); 
		genCodigoIntermedio.agregarUsoAIdentificador(val_peek(0).sval, "nombre_clase");
		genCodigoIntermedio.agregarAmbitoAIdentificador(val_peek(0).sval);
	}
break;
case 137:
//#line 271 "./src/compilador/gramatica.y"
{ 
		genCodigoIntermedio.setAmbitoClaseInterfaz(val_peek(2).sval); 
		genCodigoIntermedio.agregarUsoAIdentificador(val_peek(2).sval, "nombre_clase");
		genCodigoIntermedio.agregarAmbitoAIdentificador(val_peek(2).sval);
	}
break;
case 138:
//#line 276 "./src/compilador/gramatica.y"
{ logger.logError("[Parser] Se esperaba un identificador en declaracion de clase"); }
break;
case 139:
//#line 277 "./src/compilador/gramatica.y"
{ logger.logError("[Parser] Se esperaba un identificador en declaracion de clase"); }
break;
case 140:
//#line 278 "./src/compilador/gramatica.y"
{ logger.logError("[Parser] Se esperaba un identificador en IMPLEMENT de clase"); }
break;
case 141:
//#line 279 "./src/compilador/gramatica.y"
{ logger.logError("[Parser] Se esperaba un identificador en declaracion de clase"); }
break;
case 142:
//#line 283 "./src/compilador/gramatica.y"
{ 
		logger.logSuccess("[Parser] Declaracion de clase CLASS detectado"); 
	}
break;
case 145:
//#line 294 "./src/compilador/gramatica.y"
{ 
		logger.logSuccess("[Parser] Declaracion de funcion detectado");
		genCodigoIntermedio.desapilarAmbito(); 
	}
break;
case 148:
//#line 303 "./src/compilador/gramatica.y"
{ logger.logError("[Parser] Encabezado de funcion con mas de 1 parametro detectado, se preserva solo el primer parametro"); }
break;
case 149:
//#line 304 "./src/compilador/gramatica.y"
{ logger.logError("[Parser] Encabezado de funcion con mas de 1 parametro detectado, se preserva solo el primer parametro"); }
break;
case 150:
//#line 305 "./src/compilador/gramatica.y"
{ logger.logError("[Parser] Se esperaba un simbolo '(' en el encabezado de la funcion"); }
break;
case 151:
//#line 309 "./src/compilador/gramatica.y"
{
		genCodigoIntermedio.agregarUsoAIdentificador(val_peek(0).sval, "nombre_funcion");
		genCodigoIntermedio.agregarAmbitoAIdentificador(val_peek(0).sval);
		genCodigoIntermedio.apilarAmbito(val_peek(0).sval); 
	}
break;
case 152:
//#line 314 "./src/compilador/gramatica.y"
{
		logger.logError("[Parser] Se esperaba un identificador en el encabezado de la funcion"); 
	}
break;
case 153:
//#line 320 "./src/compilador/gramatica.y"
{ 
		genCodigoIntermedio.agregarUsoAIdentificador(val_peek(3).sval, "nombre_metodo");
		genCodigoIntermedio.agregarAmbitoAIdentificadorMetodo(val_peek(3).sval);
	}
break;
case 154:
//#line 324 "./src/compilador/gramatica.y"
{ 
		genCodigoIntermedio.agregarUsoAIdentificador(val_peek(2).sval, "nombre_metodo");
		genCodigoIntermedio.agregarAmbitoAIdentificadorMetodo(val_peek(2).sval);
	}
break;
case 155:
//#line 328 "./src/compilador/gramatica.y"
{ logger.logError("[Parser] Encabezado de funcion con mas de 1 parametro detectado, se preserva solo el primer parametro"); }
break;
case 156:
//#line 329 "./src/compilador/gramatica.y"
{ logger.logError("[Parser] Encabezado de funcion con mas de 1 parametro detectado, se preserva solo el primer parametro"); }
break;
case 157:
//#line 330 "./src/compilador/gramatica.y"
{ logger.logError("[Parser] Se esperaba un identificador en el encabezado de la funcion"); }
break;
case 158:
//#line 331 "./src/compilador/gramatica.y"
{ logger.logError("[Parser] Se esperaba un identificador en el encabezado de la funcion"); }
break;
case 159:
//#line 332 "./src/compilador/gramatica.y"
{ logger.logError("[Parser] Se esperaba un simbolo '(' en el encabezado de la funcion"); }
break;
case 160:
//#line 333 "./src/compilador/gramatica.y"
{ logger.logError("[Parser] Se esperaba un simbolo '(' en el encabezado de la funcion"); }
break;
case 165:
//#line 341 "./src/compilador/gramatica.y"
{ logger.logError("[Parser] Se esperaba una sentencia RETURN al final de la funcion"); }
break;
case 166:
//#line 342 "./src/compilador/gramatica.y"
{ logger.logError("[Parser] Se esperaba una sentencia RETURN al final de la funcion"); }
break;
case 167:
//#line 343 "./src/compilador/gramatica.y"
{ logger.logError("[Parser] Se esperaba un simbolo '{' en el cuerpo de la funcion"); }
break;
case 168:
//#line 344 "./src/compilador/gramatica.y"
{ logger.logError("[Parser] Se esperaba un simbolo '{' en el cuerpo de la funcion"); }
break;
case 169:
//#line 345 "./src/compilador/gramatica.y"
{ logger.logError("[Parser] Se esperaba un simbolo '{' en el cuerpo de la funcion"); }
break;
case 170:
//#line 346 "./src/compilador/gramatica.y"
{ logger.logError("[Parser] Se esperaba un simbolo '{' en el cuerpo de la funcion"); }
break;
case 171:
//#line 347 "./src/compilador/gramatica.y"
{ logger.logError("[Parser] Se esperaba un simbolo '{' en el cuerpo de la funcion"); }
break;
case 172:
//#line 348 "./src/compilador/gramatica.y"
{ logger.logError("[Parser] Se esperaba un simbolo '{' en el cuerpo de la funcion"); }
break;
case 173:
//#line 352 "./src/compilador/gramatica.y"
{ logger.logError("[Parser] Codigo inalcanzable luego del RETURN, se ignorara"); }
break;
case 174:
//#line 353 "./src/compilador/gramatica.y"
{ logger.logError("[Parser] Codigo inalcanzable luego del RETURN, se ignorara"); }
break;
case 181:
//#line 369 "./src/compilador/gramatica.y"
{ 
		genCodigoIntermedio.agregarUsoAIdentificador(val_peek(0).sval, "nombre_parametro");
		genCodigoIntermedio.agregarTipoAParametroDeFuncion(val_peek(0).sval, val_peek(1).sval);
		genCodigoIntermedio.agregarAmbitoAIdentificador(val_peek(0).sval);
	}
break;
case 182:
//#line 377 "./src/compilador/gramatica.y"
{ 
		genCodigoIntermedio.agregarVariableADeclarar(val_peek(0).sval);
	}
break;
case 183:
//#line 380 "./src/compilador/gramatica.y"
{ 
		genCodigoIntermedio.agregarVariableADeclarar(val_peek(0).sval);
	}
break;
case 187:
//#line 389 "./src/compilador/gramatica.y"
{
		if (genCodigoIntermedio.existeIdentificadorEnAmbito(val_peek(0).sval)) {
			logger.logSuccess("[Gen Codigo Intermedio] El identificador " + val_peek(0).sval + " existe en el ambito");
		} else {
			logger.logError("[Gen Codigo Intermedio] El identificador " + val_peek(0).sval + " no esta declarado en el ambito");
		}
	}
break;
case 189:
//#line 400 "./src/compilador/gramatica.y"
{ logger.logError("[Parser] Se esperaba una expresion del lado derecho de la comparacion"); }
break;
case 190:
//#line 401 "./src/compilador/gramatica.y"
{ logger.logError("[Parser] Se esperaba una expresion del lado izquierdo de la comparacion"); }
break;
case 191:
//#line 402 "./src/compilador/gramatica.y"
{ logger.logError("[Parser] Se esperaba un comparador valido en la comparacion"); }
break;
case 204:
//#line 427 "./src/compilador/gramatica.y"
{
		if (genCodigoIntermedio.existeIdentificadorEnAmbito(val_peek(0).sval)) {
			logger.logSuccess("[Gen Codigo Intermedio] El identificador " + val_peek(0).sval + " existe en el ambito");
		} else {
			logger.logError("[Gen Codigo Intermedio] El identificador " + val_peek(0).sval + " no esta declarado en el ambito");
		}
	}
break;
case 205:
//#line 434 "./src/compilador/gramatica.y"
{
		if (genCodigoIntermedio.existeIdentificadorEnAmbito(val_peek(1).sval)) {
			logger.logSuccess("[Gen Codigo Intermedio] El identificador " + val_peek(1).sval + " existe en el ambito");
		} else {
			logger.logError("[Gen Codigo Intermedio] El identificador " + val_peek(1).sval + " no esta declarado en el ambito");
		}
	}
break;
case 207:
//#line 442 "./src/compilador/gramatica.y"
{ logger.logError("[Parser] No se admiten expresiones entre parentesis"); }
break;
case 208:
//#line 446 "./src/compilador/gramatica.y"
{ corregirConstantePositivaEntera(val_peek(0).sval); }
break;
case 209:
//#line 447 "./src/compilador/gramatica.y"
{ constanteConSigno(val_peek(0).sval); }
break;
//#line 1779 "Parser.java"
//########## END OF USER-SUPPLIED ACTIONS ##########
    }//switch
    //#### Now let's reduce... ####
    if (yydebug) debug("reduce");
    state_drop(yym);             //we just reduced yylen states
    yystate = state_peek(0);     //get new state
    val_drop(yym);               //corresponding value drop
    yym = yylhs[yyn];            //select next TERMINAL(on lhs)
    if (yystate == 0 && yym == 0)//done? 'rest' state and at first TERMINAL
      {
      if (yydebug) debug("After reduction, shifting from state 0 to state "+YYFINAL+"");
      yystate = YYFINAL;         //explicitly say we're done
      state_push(YYFINAL);       //and save it
      val_push(yyval);           //also save the semantic value of parsing
      if (yychar < 0)            //we want another character?
        {
        yychar = yylex();        //get next character
        if (yychar<0) yychar=0;  //clean, if necessary
        if (yydebug)
          yylexdebug(yystate,yychar);
        }
      if (yychar == 0)          //Good exit (if lex returns 0 ;-)
         break;                 //quit the loop--all DONE
      }//if yystate
    else                        //else not done yet
      {                         //get next state and push, for next yydefred[]
      yyn = yygindex[yym];      //find out where to go
      if ((yyn != 0) && (yyn += yystate) >= 0 &&
            yyn <= YYTABLESIZE && yycheck[yyn] == yystate)
        yystate = yytable[yyn]; //get new state
      else
        yystate = yydgoto[yym]; //else go to new defred
      if (yydebug) debug("after reduction, shifting from state "+state_peek(0)+" to state "+yystate+"");
      state_push(yystate);     //going again, so push state & val...
      val_push(yyval);         //for next action
      }
    }//main loop
  return 0;//yyaccept!!
}
//## end of method parse() ######################################



//## run() --- for Thread #######################################
/**
 * A default run method, used for operating this parser
 * object in the background.  It is intended for extending Thread
 * or implementing Runnable.  Turn off with -Jnorun .
 */
public void run()
{
  yyparse();
}
//## end of method run() ########################################



//## Constructors ###############################################
/**
 * Default constructor.  Turn off with -Jnoconstruct .

 */
public Parser()
{
  //nothing to do
}


/**
 * Create a parser, setting the debug to true or false.
 * @param debugMe true for debugging, false for no debug.
 */
public Parser(boolean debugMe)
{
  yydebug=debugMe;
}
//###############################################################



}
//################### END OF CLASS ##############################
