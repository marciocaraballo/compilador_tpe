//### This file created by BYACC 1.8(/Java extension  1.15)
//### Java capabilities added 7 Jan 97, Bob Jamison
//### Updated : 27 Nov 97  -- Bob Jamison, Joe Nieten
//###           01 Jan 98  -- Bob Jamison -- fixed generic semantic constructor
//###           01 Jun 99  -- Bob Jamison -- added Runnable support
//###           06 Aug 00  -- Bob Jamison -- made state variables class-global
//###           03 Jan 01  -- Bob Jamison -- improved flags, tracing
//###           16 May 01  -- Bob Jamison -- added custom stack sizing
//###           04 Mar 02  -- Yuval Oren  -- improved java performance, added options
//###           14 Mar 02  -- Tomas Hurka -- -d support, static initializer workaround
//### Please send bug reports to tom@hukatronic.cz
//### static char yysccsid[] = "@(#)yaccpar	1.8 (Berkeley) 01/20/90";



package compilador;



//#line 2 "./src/compilador/gramatica.y"
import java.io.File;
//#line 19 "Parser.java"




public class Parser
{

boolean yydebug;        //do I want debug output?
int yynerrs;            //number of errors so far
int yyerrflag;          //was there an error?
int yychar;             //the current working character

//########## MESSAGES ##########
//###############################################################
// method: debug
//###############################################################
void debug(String msg)
{
  if (yydebug)
    System.out.println(msg);
}

//########## STATE STACK ##########
final static int YYSTACKSIZE = 500;  //maximum stack size
int statestk[] = new int[YYSTACKSIZE]; //state stack
int stateptr;
int stateptrmax;                     //highest index of stackptr
int statemax;                        //state when highest index reached
//###############################################################
// methods: state stack push,pop,drop,peek
//###############################################################
final void state_push(int state)
{
  try {
		stateptr++;
		statestk[stateptr]=state;
	 }
	 catch (ArrayIndexOutOfBoundsException e) {
     int oldsize = statestk.length;
     int newsize = oldsize * 2;
     int[] newstack = new int[newsize];
     System.arraycopy(statestk,0,newstack,0,oldsize);
     statestk = newstack;
     statestk[stateptr]=state;
  }
}
final int state_pop()
{
  return statestk[stateptr--];
}
final void state_drop(int cnt)
{
  stateptr -= cnt; 
}
final int state_peek(int relative)
{
  return statestk[stateptr-relative];
}
//###############################################################
// method: init_stacks : allocate and prepare stacks
//###############################################################
final boolean init_stacks()
{
  stateptr = -1;
  val_init();
  return true;
}
//###############################################################
// method: dump_stacks : show n levels of the stacks
//###############################################################
void dump_stacks(int count)
{
int i;
  System.out.println("=index==state====value=     s:"+stateptr+"  v:"+valptr);
  for (i=0;i<count;i++)
    System.out.println(" "+i+"    "+statestk[i]+"      "+valstk[i]);
  System.out.println("======================");
}


//########## SEMANTIC VALUES ##########
//public class ParserVal is defined in ParserVal.java


String   yytext;//user variable to return contextual strings
ParserVal yyval; //used to return semantic vals from action routines
ParserVal yylval;//the 'lval' (result) I got from yylex()
ParserVal valstk[];
int valptr;
//###############################################################
// methods: value stack push,pop,drop,peek.
//###############################################################
void val_init()
{
  valstk=new ParserVal[YYSTACKSIZE];
  yyval=new ParserVal();
  yylval=new ParserVal();
  valptr=-1;
}
void val_push(ParserVal val)
{
  if (valptr>=YYSTACKSIZE)
    return;
  valstk[++valptr]=val;
}
ParserVal val_pop()
{
  if (valptr<0)
    return new ParserVal();
  return valstk[valptr--];
}
void val_drop(int cnt)
{
int ptr;
  ptr=valptr-cnt;
  if (ptr<0)
    return;
  valptr = ptr;
}
ParserVal val_peek(int relative)
{
int ptr;
  ptr=valptr-relative;
  if (ptr<0)
    return new ParserVal();
  return valstk[ptr];
}
final ParserVal dup_yyval(ParserVal val)
{
  ParserVal dup = new ParserVal();
  dup.ival = val.ival;
  dup.dval = val.dval;
  dup.sval = val.sval;
  dup.obj = val.obj;
  return dup;
}
//#### end semantic value section ####
public final static short ID=257;
public final static short CTE=258;
public final static short CADENA=259;
public final static short IF=260;
public final static short ELSE=261;
public final static short ENDIF=262;
public final static short PRINT=263;
public final static short VOID=264;
public final static short RETURN=265;
public final static short COMP_MAYOR_IGUAL=266;
public final static short COMP_MENOR_IGUAL=267;
public final static short COMP_IGUAL=268;
public final static short COMP_DISTINTO=269;
public final static short CLASS=270;
public final static short WHILE=271;
public final static short DO=272;
public final static short INTERFACE=273;
public final static short IMPLEMENT=274;
public final static short INT=275;
public final static short ULONG=276;
public final static short FLOAT=277;
public final static short OPERADOR_MENOS=278;
public final static short YYERRCODE=256;
final static short yylhs[] = {                           -1,
    0,    0,    0,    0,    0,    1,    1,    2,    2,    4,
    4,    4,    4,    4,    4,   11,   11,   12,   12,   13,
   13,   13,   13,   13,   10,   10,    9,    9,    9,    9,
    9,    9,    9,    9,    9,    9,    9,   15,   19,   15,
   15,   15,   15,   15,   15,   15,   15,   15,    8,    8,
    8,    8,    8,    8,    8,    8,    8,   14,   14,   14,
   20,   14,   14,   14,   14,   14,   16,   16,   16,   16,
   16,   16,   18,   18,   18,   18,   18,   18,   18,   18,
   18,   18,   18,   23,   23,   24,   24,   21,   21,   21,
   21,   22,   22,   22,   22,    7,    7,    7,    7,    7,
    7,    7,    6,    6,    6,    6,    6,    6,   28,   28,
    5,    5,    5,   26,   26,    3,    3,    3,    3,   29,
   29,   29,   32,   32,   32,   32,   32,   32,   35,   35,
   36,   36,   38,   38,   38,   38,   31,   31,   31,   31,
   31,   31,   31,   31,   39,   39,   30,   40,   40,   40,
   40,   40,   42,   42,   37,   37,   37,   37,   37,   37,
   37,   37,   41,   41,   41,   41,   41,   41,   41,   41,
   41,   41,   41,   41,   45,   45,   46,   46,   46,   44,
   44,   44,   43,   34,   34,   33,   33,   33,   33,   17,
   17,   17,   17,   47,   47,   47,   47,   47,   47,   27,
   27,   27,   48,   48,   48,   49,   49,   49,   49,   25,
   25,
};
final static short yylen[] = {                            2,
    3,    2,    2,    2,    0,    1,    2,    1,    1,    1,
    1,    1,    1,    1,    1,    1,    2,    1,    1,    1,
    1,    1,    1,    1,    2,    1,    7,    6,    6,    6,
    6,    3,    4,    2,    5,    4,    3,    7,    0,   13,
    6,    6,    3,    4,    2,    5,    4,    3,    9,    7,
    8,    6,    8,    6,    8,    8,    6,    9,    7,    8,
    0,   15,    6,    8,    8,    6,    1,    3,    2,    2,
    2,    1,    1,    1,    1,    3,    4,    5,    2,    3,
    2,    3,    2,    1,    2,    1,    1,    1,    2,    1,
    2,    1,    2,    1,    2,    3,    2,    2,    3,    2,
    3,    2,    5,    4,    7,    4,    3,    6,    1,    3,
    4,    3,    3,    1,    3,    1,    1,    1,    1,    3,
    2,    2,    5,    4,    3,    2,    4,    3,    1,    2,
    2,    1,    3,    2,    1,    2,    5,    7,    4,    3,
    6,    5,    4,    6,    1,    2,    2,    4,    3,    6,
    5,    2,    2,    1,    5,    4,    7,    6,    4,    3,
    4,    3,    4,    3,    5,    4,    3,    2,    3,    2,
    4,    3,    2,    1,    1,    2,    1,    1,    1,    1,
    3,    2,    2,    1,    3,    1,    1,    1,    1,    3,
    2,    2,    3,    1,    1,    1,    1,    1,    1,    3,
    3,    1,    3,    3,    1,    1,    2,    1,    3,    1,
    2,
};
final static short yydefred[] = {                         0,
    0,    0,    0,    0,    0,    0,    0,    0,  186,  187,
  188,    0,    0,    0,    6,    8,    9,   10,   11,   12,
   13,   14,   15,    0,  116,  117,  118,  119,    0,    0,
    0,    0,    0,  210,    0,    0,   98,    0,  153,   25,
    0,    0,    0,    0,    0,   34,    0,    0,    0,    0,
    0,    0,    0,    0,  126,    0,  129,    0,    4,    0,
    2,    7,    0,    0,    0,  184,  122,    0,    0,    0,
    0,  174,   18,   20,   21,   22,    0,    0,   16,   19,
   23,   24,  147,    0,  152,    0,  194,  195,  196,  197,
    0,    0,  198,  199,    0,  208,    0,    0,    0,  205,
   99,   96,  211,  101,    0,    0,    0,  135,    0,  145,
    0,  140,    0,    0,   32,    0,   71,   90,   88,    0,
    0,    0,    0,    0,   70,   91,   89,    0,  128,    0,
    0,    0,    0,  125,  130,  131,    1,    0,    0,  113,
    0,  115,  120,    0,    0,    0,    0,   45,    0,    0,
   74,    0,    0,    0,  168,    0,    0,  170,  177,  178,
  179,    0,  175,  173,    0,   17,  189,  149,    0,    0,
  207,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,  136,    0,    0,    0,    0,  143,  146,    0,  139,
    0,   68,   36,    0,   33,    0,    0,    0,  127,    0,
  162,    0,  160,    0,  124,  104,    0,    0,  111,  185,
    0,    0,   43,   83,   94,   92,    0,    0,    0,    0,
    0,   79,   95,    0,   93,  164,    0,  167,    0,  172,
  176,  169,    0,  183,    0,  148,  180,    0,  209,    0,
    0,    0,    0,    0,    0,    0,    0,    0,  203,  204,
    0,    0,    0,  137,  133,  142,    0,   35,    0,    0,
    0,  123,  156,    0,  161,  159,    0,    0,  103,    0,
    0,   76,    0,   47,    0,   44,    0,    0,   80,  166,
  163,    0,  171,    0,    0,  151,  182,    0,   54,    0,
   57,    0,    0,    0,  144,  141,   29,   30,    0,   31,
    0,  155,    0,    0,    0,    0,    0,    0,    0,  114,
   77,   86,   87,    0,   84,   46,    0,    0,    0,  165,
  150,  181,    0,    0,    0,    0,   50,  138,   27,    0,
  158,    0,  105,   63,    0,   66,    0,    0,   78,   85,
   41,    0,   42,   53,   55,   56,    0,  157,    0,    0,
    0,   59,    0,   38,    0,   49,   64,   65,    0,    0,
    0,   58,    0,    0,    0,    0,    0,    0,    0,    0,
    0,   40,    0,   62,
};
final static short yydgoto[] = {                         13,
   14,   15,  159,   49,   74,   75,   76,   21,   22,   23,
   78,   79,  161,   81,   82,   50,   95,  153,  355,  353,
   51,  154,  314,  315,   96,   24,   97,  268,   25,   26,
   27,   28,   29,   68,   56,   57,   58,  110,  111,   30,
   83,   31,  237,  238,  162,  163,   98,   99,  100,
};
final static short yysindex[] = {                      1243,
    0,  -22,  303, -229,   -8, -101,  900,  -98,    0,    0,
    0,  537,    0, 1315,    0,    0,    0,    0,    0,    0,
    0,    0,    0,   22,    0,    0,    0,    0,  -30, 1100,
  143, 1146,   15,    0,   20, -218,    0,   42,    0,    0,
  226, -119,  760,   60, 1338,    0, 1164,    0,    0,  -31,
 1360,  -88,  -34, -183,    0,  -87,    0,   65,    0, 1384,
    0,    0,    4,   66, -134,    0,    0,   68,   88,  925,
 1405,    0,    0,    0,    0,    0, 1426, 1448,    0,    0,
    0,    0,    0,  167,    0, -148,    0,    0,    0,    0,
   79, 1264,    0,    0,  100,    0, 1004,   79,  -18,    0,
    0,    0,    0,    0,  103,  -70,  760,    0, -112,    0,
  542,    0,  760,  609,    0, 1031,    0,    0,    0, 1469,
  116,  124,   96, 1031,    0,    0,    0, -183,    0,  -86,
  -38,  194,  -84,    0,    0,    0,    0,  126,  467,    0,
  418,    0,    0,  -66, 1170,  170, 1714,    0, 1177,    0,
    0,    0,  -19, 1491,    0, 1513, 1538,    0,    0,    0,
    0, 1559,    0,    0, 1581,    0,    0,    0,  -41,  -21,
    0,  155,  -59, 1051,   79,   79,   79,   79,   71,   79,
   79,    0, -113,  760,  713,   78,    0,    0, 1000,    0,
  179,    0,    0,  182,    0, 1193,  188,  -83,    0,  216,
    0,  193,    0,  203,    0,    0,   79,  207,    0,    0,
 1285,  212,    0,    0,    0,    0, 1602,  224,  222,  165,
 1031,    0,    0,  153,    0,    0, 1624,    0, 1646,    0,
    0,    0, 1667,    0,  219,    0,    0,  -11,    0, 1264,
  236, 1264,  239,   59,  -18,  -18,   71,   71,    0,    0,
  760, 1010, 1068,    0,    0,    0,  242,    0,  246,  251,
  255,    0,    0,   19,    0,    0,   71,   32,    0,   40,
 1076,    0,  956,    0,  265,    0, 1200,  263,    0,    0,
    0, 1692,    0,   50,  219,    0,    0,   51,    0,   56,
    0, 1121,  284, 1125,    0,    0,    0,    0,  290,    0,
  219,    0,   55,   79,  296,  306, 1285,  309,  107,    0,
    0,    0,    0, 1735,    0,    0,  318,  323,  337,    0,
    0,    0,  347,  348,  358,  144,    0,    0,    0,  141,
    0,   71,    0,    0,  146,    0, 1219,  375,    0,    0,
    0,  379,    0,    0,    0,    0,  386,    0,  390,  391,
  149,    0,  177,    0,  168,    0,    0,    0,  397,  405,
  181,    0,  414,  417, 1285, 1031,  205,  423, 1285,  410,
  210,    0,  434,    0,
};
final static short yyrindex[] = {                       481,
   44,    0,    0,  343,  260,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,  282,    0,  413,    0,    0,  439,    0,    0,
    0,    0,    0,    0,    0,    0,    0,  599,  722,    0,
    0,    0,    0,    0,    0,    0,    0,  -74,    0,  482,
    0,    0,    0,    0,    0,    0,    0,  465,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,  335,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,  311,    0,
    0,    0,    0,    0,  227,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,  -29,
  488,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,  509,    0,    0,
  569,    0,    0,    0,    0,    0,    0,    0,    0,  797,
    0,  825,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,  426,  445,    0,
    0,    0,    0,    0,    0, 1329,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,  642,    0,    0,
    0,    0,    0,    0,    0,    0,  128,  851,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,  360,  388,  446,  448,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,  148,    0,    0,    0,
    0,    0,  185,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,  666,    0,    0,    0,    0,    0,  691,    0,
    0,    0,    0,    0,  743,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,  187,    0,    0,    0,    0,    0,  237,    0,    0,
    0,  235,    0,    0,    0,    0,  768,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,  876,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,
};
final static short yygindex[] = {                         0,
  487,   18,    1,  776,    5,   75,  101,    0,    0,  -23,
  427,  -62,   -4,    0,    0,   37,  -47,  486,    0,    0,
  461,  368,    0,  200,  513,    0,   -6,    0,    0,  867,
    0,    0,  174,  409,  145,   24,    0, 1067,  367,    0,
    0,    0,  -14, -132, -122,  112,  422,  211,  234,
};
final static int YYTABLESIZE=2007;
static short yytable[];
static { yytable();}
static void yytable(){
yytable = new short[]{                        122,
   16,  200,  201,  113,   18,  132,   77,   48,  124,  251,
   69,   18,   16,   67,   16,  166,   18,   32,   18,  236,
  221,   43,  235,  180,   54,   80,   55,   39,  181,  286,
   73,   62,  285,  227,  128,   40,  129,  134,  199,  103,
  205,  262,  233,   91,  138,  118,  151,  156,   36,   18,
  132,  126,  184,  160,  165,   18,  139,  141,  101,  302,
   16,   63,  301,  102,   18,  152,   80,   65,  191,  170,
  150,   73,  305,   80,   19,  304,  197,   62,   73,  135,
   53,   19,   64,  114,  172,  104,   19,  189,   19,  114,
  321,  179,   48,  285,  166,  331,   18,  212,  285,  116,
   20,  219,  284,  115,  114,   91,  282,   20,  136,  140,
   36,  143,   20,  175,   20,  176,  202,  204,   91,   19,
  126,  255,  142,   36,   18,   19,  144,  145,  173,  171,
  224,  303,  160,  229,   19,  196,  144,  112,  160,  195,
  174,  160,  216,  105,   66,   20,  182,  215,  260,  225,
    4,   20,   80,  135,  223,   41,  135,   73,   52,  193,
   20,    9,   10,   11,  194,   53,   19,   81,  330,  206,
  247,  248,   42,  278,   48,   53,   53,   53,   18,   53,
   53,  348,   84,   85,  285,  264,  183,  151,  109,  132,
  210,  109,   20,  273,   19,  239,  130,  175,  133,  176,
  267,  240,  241,  160,  277,  160,  152,  168,  276,  160,
  244,  150,  225,  213,  109,  234,  109,  223,  167,  257,
   20,  135,  131,  287,   82,  258,   66,  110,  261,  318,
  110,   69,   69,  265,  203,  167,    9,   10,   11,  123,
   48,   69,   48,  266,   18,  167,   18,  151,   19,  312,
  269,  220,  271,    9,   10,   11,  263,  169,  160,   26,
   86,   34,  275,    9,   10,   11,  152,  274,  313,  287,
  322,  150,  198,  231,   20,  167,  288,  279,  290,  289,
  109,  100,  291,  151,  109,  297,  109,  109,  287,  298,
  312,  299,   48,    9,   10,   11,   18,  332,  300,   26,
  189,  306,  152,  319,  169,  169,  167,  150,  316,  313,
  202,  167,  323,  151,   19,  287,   19,  324,  368,  292,
  293,  100,   86,   34,    9,   10,   11,  327,  326,    9,
   10,   11,  152,  329,  206,   86,   34,  150,  231,  333,
   20,  151,   20,  169,  231,  151,   37,   36,  107,  334,
  202,  202,  336,  202,  202,  202,  109,  109,  109,  200,
  152,  341,  109,  342,  152,  150,   19,  337,  338,  150,
  202,  202,  202,  169,  206,  206,  206,  206,  206,  206,
  343,  206,  154,  154,   26,  245,  246,  201,   81,   81,
  344,  345,   20,  231,  206,  206,  206,  167,   81,  200,
  200,  346,  200,  200,  200,  347,  100,  349,  169,  114,
  359,  169,   97,  249,  250,    9,   10,   11,  352,  200,
  200,  200,  354,  167,  109,  109,  109,  201,  201,  356,
  201,  201,  201,  357,  358,  202,  360,  169,  102,  361,
  362,    9,   10,   11,  363,   82,   82,  201,  201,  201,
  167,  364,   97,  372,  365,   82,  366,  169,  169,  206,
  175,  209,  176,  370,  121,  369,  191,  109,    9,   10,
   11,  373,  167,  185,  169,  167,  169,  374,  102,  189,
    5,    3,  105,  189,  200,  192,  193,   37,  190,    4,
    9,   10,   11,    9,   10,   11,   61,  157,   60,  106,
    9,   10,   11,  169,  121,  120,   39,  208,  107,  175,
  207,  176,  201,  340,  217,   38,   26,  186,  178,   26,
   26,   26,   26,   26,   26,    0,    0,   37,    0,   26,
   26,   26,   26,    0,   26,   26,   26,   97,  100,    0,
    0,  100,  100,  100,  100,  100,  100,    0,  107,  252,
  253,  100,  100,  100,  100,    0,  100,  100,  100,   33,
   34,   35,    0,  102,    0,    0,    0,  202,  112,    0,
  202,  202,  202,  202,  202,  202,  202,  202,  202,  202,
  202,  202,  202,  202,    0,  202,  202,  202,    0,  121,
    0,  206,    0,    0,  206,  206,  206,  206,  206,  206,
  206,  206,  206,  206,  206,  206,  206,  206,  112,  206,
  206,  206,   37,    0,    0,    0,  200,  294,    0,  200,
  200,  200,  200,  200,  200,  200,  200,  200,  200,  200,
  200,  200,  200,  107,  200,  200,  200,    0,   72,    0,
    0,  106,    0,    0,  201,    0,    0,  201,  201,  201,
  201,  201,  201,  201,  201,  201,  201,  201,  201,  201,
  201,   59,  201,  201,  201,   52,  187,    0,    0,   97,
    0,    0,   97,   97,   97,   97,   97,   97,    0,    0,
    0,  106,   97,   97,   97,   97,    0,   97,   97,   97,
   28,    0,    0,  112,    0,  102,  270,    0,  102,  102,
  102,  102,  102,  102,    0,   52,    0,    0,  102,  102,
  102,  102,    0,  102,  102,  102,    0,    0,    0,    0,
    0,  121,    0,   90,  121,  121,  121,  121,  121,  121,
   28,    0,    0,  190,  121,  121,  121,  121,    0,  121,
  121,  121,  108,    0,   37,    0,    0,   37,   37,   37,
   37,   37,   37,    0,    0,    0,  309,   37,   37,   37,
   37,   67,   37,   37,   37,  107,  106,   51,  107,  107,
  107,  107,  107,  107,    0,   17,    0,    0,  107,  107,
  107,  107,  108,  107,  107,  107,    0,   17,    0,   17,
   52,    0,  335,    1,    0,    0,    2,    0,  105,    3,
    4,    5,    0,    0,    0,    4,    6,   51,    7,    8,
    0,    9,   10,   11,    0,   28,    9,   10,   11,    0,
  119,    0,  351,    0,    0,  112,  127,    0,  112,  112,
  112,  112,  112,  112,    0,   17,   75,  254,  112,  112,
  112,  112,    0,  112,  112,  112,   88,    0,    0,    0,
  367,    0,    0,    0,  371,   90,    0,    0,   90,   72,
   72,   90,   90,   90,   73,  105,    0,  108,   90,   72,
   90,   90,    4,   90,   90,   90,    0,    0,    0,    0,
    0,    0,    0,    9,   10,   11,    0,    0,    0,    0,
   48,    0,   51,    0,    0,  127,    0,    0,  106,    0,
    0,  106,  106,  106,  106,  106,  106,  108,    0,  108,
    0,  106,  106,  106,  106,   60,  106,  106,  106,    0,
    0,   94,   52,    0,    0,   52,   52,   52,   52,   52,
   52,    0,    0,    0,    0,   52,   52,   52,   52,   47,
   52,   52,   52,   46,    0,    0,    0,   28,    0,   92,
   28,   28,   28,   28,   28,   28,    0,    0,    0,    0,
   28,   28,   28,   28,  149,   28,   28,   28,  148,  105,
    0,    0,    0,  108,    0,   48,    4,  108,   88,  108,
  108,   88,   67,   67,   88,   88,   88,    9,   10,   11,
    0,   88,   67,   88,   88,    0,   88,   88,   88,  108,
   60,    0,  108,  108,  108,  108,  108,  108,    0,    0,
    0,    0,  108,  108,  108,  108,  105,  108,  108,  108,
    0,    0,   45,    4,   51,    0,    0,   51,   51,   51,
   51,   51,   51,    0,    9,   10,   11,   51,   51,   51,
   51,    0,   51,   51,   51,    0,  175,  147,  176,  108,
  108,  108,    0,   94,    0,  108,   94,   75,   75,   94,
   94,   94,    0,   94,  177,   93,   94,   75,   94,   94,
   91,   94,   94,   94,    0,   36,    0,    0,    0,    0,
  311,   92,    0,    0,   92,   73,   73,   92,   92,   92,
   94,    0,   93,    0,   92,   73,   92,   92,    0,   92,
   92,   92,    0,    0,    0,    0,    0,   48,    0,    0,
   48,   48,   48,   48,   48,   48,    0,  108,  108,  108,
   48,   48,   48,   48,  256,   48,   48,   48,    0,    0,
    0,    0,   60,    0,  295,   60,   60,   60,   60,   60,
   60,    0,    0,    0,    0,   60,   60,   60,   60,    0,
   60,   60,   60,    0,    0,    0,    1,    0,    0,    2,
  108,    0,    3,    4,    5,    0,    0,    0,    0,    6,
   44,    7,    8,   45,    9,   10,   11,  188,    0,    0,
  188,    1,    0,    0,   69,   91,   92,    3,    4,    5,
   36,    0,  296,    0,    6,  146,   70,    8,  147,    9,
   10,   11,    0,   91,  121,   94,    0,   93,   36,   91,
  211,    0,  310,    0,   36,   69,   91,  218,    3,    0,
    5,   36,   71,   94,   72,   93,    0,   70,    0,   94,
    0,   93,   91,  259,    0,    0,   94,   36,   93,   91,
  317,    0,    0,   45,   36,    0,    0,    0,    0,  328,
    0,  188,   94,    0,   93,  188,  105,    0,    0,   94,
    0,   93,    0,    4,    0,    0,  105,    0,    0,   87,
   88,   89,   90,    4,    9,   10,   11,    0,    0,    0,
    0,    0,    0,    0,    9,   10,   11,   86,   34,    0,
    0,    0,    0,    0,    0,    0,   87,   88,   89,   90,
    0,    0,    0,    0,    0,    0,    0,    1,    0,    0,
    2,  242,  243,    3,    4,    5,    0,    0,  188,  188,
    6,    0,    7,    8,  105,    9,   10,   11,    0,    0,
    0,    4,    1,    0,    0,   69,  307,  308,    3,    4,
    5,  147,    9,   10,   11,    6,    0,   70,    8,    0,
    9,   10,   11,    0,    0,    0,    1,    0,    0,   69,
  188,    0,    3,    4,    5,   12,    0,    0,    0,    6,
    0,   70,    8,    0,    9,   10,   11,    1,    0,    0,
    2,  105,  325,    3,    4,    5,   45,    0,    4,    0,
    6,    0,    7,    8,    0,    9,   10,   11,    0,    9,
   10,   11,   86,   34,    0,    0,    0,  147,    0,    0,
    0,   87,   88,   89,   90,    0,    0,    0,    0,    0,
   86,   34,    0,    0,    0,    0,   86,   34,    0,   87,
   88,   89,   90,   86,   34,   87,   88,   89,   90,   61,
    0,    0,   87,   88,   89,   90,    0,    0,    0,   86,
   34,    0,    0,  134,    0,    0,   86,   34,   87,   88,
   89,   90,  117,    0,    0,   87,   88,   89,   90,    0,
    0,    0,    0,    0,    0,    1,    0,    0,   69,    0,
  350,    3,    4,    5,  125,    0,    0,    0,    6,    0,
   70,    8,    0,    9,   10,   11,    0,    0,    0,    1,
    0,    0,    2,    0,    0,    3,    4,    5,  137,    0,
    0,    0,    6,    0,    7,    8,    0,    9,   10,   11,
    1,    0,    0,    2,    0,    0,    3,    4,    5,  155,
    0,    0,    0,    6,    0,    7,    8,    0,    9,   10,
   11,    1,    0,    0,   69,    0,    0,    3,    4,    5,
  158,    0,    0,    0,    6,    0,   70,    8,    0,    9,
   10,   11,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    1,  164,    0,    2,    0,    0,    3,    4,    5,
    0,    0,    0,    0,    6,  134,    7,    8,    0,    9,
   10,   11,  134,  192,    1,    0,    0,    2,    0,    0,
    3,    4,    5,  134,  134,  134,    0,    6,    0,    7,
    8,    0,    9,   10,   11,  222,    1,    0,    0,    2,
    0,    0,    3,    4,    5,    0,    0,    0,    0,    6,
    0,    7,    8,    0,    9,   10,   11,  226,    0,    0,
    1,    0,    0,    2,    0,    0,    3,    4,    5,    0,
    0,    0,    0,    6,    0,    7,    8,    0,    9,   10,
   11,    1,  228,    0,   69,    0,    0,    3,    4,    5,
    0,    0,    0,    0,    6,    0,   70,    8,    0,    9,
   10,   11,    1,  230,    0,   69,    0,    0,    3,    4,
    5,    0,    0,    0,    0,    6,    0,   70,    8,    0,
    9,   10,   11,    0,    1,  232,    0,   69,    0,    0,
    3,    4,    5,    0,    0,    0,    0,    6,    0,   70,
    8,    0,    9,   10,   11,    1,  272,    0,    2,    0,
    0,    3,    4,    5,    0,    0,    0,    0,    6,    0,
    7,    8,    0,    9,   10,   11,    0,    1,  280,    0,
   69,    0,    0,    3,    4,    5,    0,    0,    0,    0,
    6,    0,   70,    8,    0,    9,   10,   11,    0,    1,
  281,    0,   69,    0,    0,    3,    4,    5,    0,    0,
    0,    0,    6,    0,   70,    8,    0,    9,   10,   11,
    0,  283,    0,    0,    1,    0,    0,   69,    0,    0,
    3,    4,    5,    0,    0,    0,    0,    6,    0,   70,
    8,    0,    9,   10,   11,    1,  320,    0,   69,    0,
    0,    3,    4,    5,    0,    0,    0,    0,    6,    0,
   70,    8,    0,    9,   10,   11,    0,    1,  214,    0,
   69,    0,    0,    3,    4,    5,    0,    0,    0,    0,
    6,    0,   70,    8,    0,    9,   10,   11,    1,  339,
    0,   69,    0,    0,    3,    4,    5,    0,    0,    0,
    0,    6,    0,   70,    8,    0,    9,   10,   11,    0,
    1,    0,    0,   69,    0,    0,    3,    4,    5,    0,
    0,    0,    0,    6,    0,   70,    8,    0,    9,   10,
   11,    0,    1,    0,    0,   69,    0,    0,    3,    4,
    5,    0,    0,    0,    0,    6,    0,   70,    8,    0,
    9,   10,   11,    1,    0,    0,   69,    0,    0,    3,
    4,    5,    0,    0,    0,    0,    6,    0,   70,    8,
    0,    9,   10,   11,    0,    0,    0,    0,    1,    0,
    0,   69,    0,    0,    3,    4,    5,    0,    0,    0,
    0,    6,    0,   70,    8,    0,    9,   10,   11,    0,
    1,    0,    0,   69,    0,    0,    3,    4,    0,    0,
    0,    0,    0,    6,    0,   70,    8,    0,    9,   10,
   11,  310,    0,    0,   69,    0,    0,    3,    0,    5,
    0,    0,    0,    0,    0,    0,   70,
};
}
static short yycheck[];
static { yycheck(); }
static void yycheck() {
yycheck = new short[] {                         47,
    0,   40,   41,  123,    0,   40,   30,    7,   40,  123,
   40,    7,   12,   44,   14,   78,   12,   40,   14,   41,
   40,  123,   44,   42,  123,   30,  125,  257,   47,   41,
   30,   14,   44,  156,  123,   44,  125,  125,  125,  258,
  125,  125,  165,   40,   41,   45,   70,   71,   45,   45,
  125,   51,  123,   77,   78,   51,   63,   64,   44,   41,
   60,   40,   44,   44,   60,   70,   71,   46,  116,   84,
   70,   71,   41,   78,    0,   44,  124,   60,   78,   56,
  264,    7,   61,   40,   91,   44,   12,   44,   14,   46,
   41,   98,   92,   44,  157,   41,   92,  145,   44,   40,
    0,  149,  235,   44,   61,   40,  229,    7,   44,   44,
   45,   44,   12,   43,   14,   45,  131,  132,   40,   45,
  120,   44,  257,   45,  120,   51,   59,   40,   92,  278,
  154,  264,  156,  157,   60,   40,   59,  257,  162,   44,
   41,  165,  147,  257,  257,   45,   44,  147,  196,  154,
  264,   51,  157,  130,  154,  257,  133,  157,  257,   44,
   60,  275,  276,  277,   41,  264,   92,   40,  301,   44,
  177,  178,  274,  221,  174,  264,  264,  264,  174,  264,
  264,   41,   40,   41,   44,  200,  257,  211,   41,  264,
  257,   44,   92,  217,  120,   41,   52,   43,   54,   45,
  207,  261,  262,  227,   40,  229,  211,   41,   44,  233,
  174,  211,  217,   44,   41,  257,   43,  217,  257,   41,
  120,  198,  257,  238,   40,   44,  257,   41,   41,  277,
   44,  261,  262,   41,   41,  257,  275,  276,  277,  271,
  240,  271,  242,   41,  240,  257,  242,  271,  174,  273,
   44,  271,   41,  275,  276,  277,   41,   84,  282,    0,
  257,  258,   41,  275,  276,  277,  271,   44,  273,  284,
  285,  271,  128,  162,  174,  257,  240,  125,  242,   44,
  107,    0,   44,  307,  111,   44,  113,  114,  303,   44,
  314,   41,  292,  275,  276,  277,  292,  304,   44,   40,
  257,  262,  307,   41,  131,  132,  257,  307,   44,  314,
    0,  257,  262,  337,  240,  330,  242,  262,  366,  261,
  262,   40,  257,  258,  275,  276,  277,   44,  292,  275,
  276,  277,  337,   44,    0,  257,  258,  337,  227,   44,
  240,  365,  242,  170,  233,  369,   44,   45,  123,   44,
   40,   41,   44,   43,   44,   45,  183,  184,  185,    0,
  365,   44,  189,   41,  369,  365,  292,  261,  262,  369,
   60,   61,   62,  200,   40,   41,   42,   43,   44,   45,
   44,   47,   40,   41,  125,  175,  176,    0,  261,  262,
   44,   44,  292,  282,   60,   61,   62,  257,  271,   40,
   41,   44,   43,   44,   45,  262,  125,  262,  235,   43,
  262,  238,    0,  180,  181,  275,  276,  277,   44,   60,
   61,   62,   44,  257,  251,  252,  253,   40,   41,   44,
   43,   44,   45,   44,   44,  125,  260,  264,    0,  272,
   44,  275,  276,  277,   40,  261,  262,   60,   61,   62,
  257,  271,   40,   44,   41,  271,   40,  284,  285,  125,
   43,   44,   45,   41,    0,  261,   41,  294,  275,  276,
  277,  262,  257,  107,  301,  257,  303,   44,   40,  113,
    0,    0,  257,  257,  125,   41,   41,    0,   41,  264,
  275,  276,  277,  275,  276,  277,  260,   71,   12,  274,
  275,  276,  277,  330,   40,   45,  272,   41,    0,   43,
   44,   45,  125,  314,  147,    3,  257,  109,   97,  260,
  261,  262,  263,  264,  265,   -1,   -1,   40,   -1,  270,
  271,  272,  273,   -1,  275,  276,  277,  125,  257,   -1,
   -1,  260,  261,  262,  263,  264,  265,   -1,   40,  183,
  184,  270,  271,  272,  273,   -1,  275,  276,  277,  257,
  258,  259,   -1,  125,   -1,   -1,   -1,  257,    0,   -1,
  260,  261,  262,  263,  264,  265,  266,  267,  268,  269,
  270,  271,  272,  273,   -1,  275,  276,  277,   -1,  125,
   -1,  257,   -1,   -1,  260,  261,  262,  263,  264,  265,
  266,  267,  268,  269,  270,  271,  272,  273,   40,  275,
  276,  277,  125,   -1,   -1,   -1,  257,  251,   -1,  260,
  261,  262,  263,  264,  265,  266,  267,  268,  269,  270,
  271,  272,  273,  125,  275,  276,  277,   -1,   40,   -1,
   -1,    0,   -1,   -1,  257,   -1,   -1,  260,  261,  262,
  263,  264,  265,  266,  267,  268,  269,  270,  271,  272,
  273,  125,  275,  276,  277,    0,  125,   -1,   -1,  257,
   -1,   -1,  260,  261,  262,  263,  264,  265,   -1,   -1,
   -1,   40,  270,  271,  272,  273,   -1,  275,  276,  277,
    0,   -1,   -1,  125,   -1,  257,  211,   -1,  260,  261,
  262,  263,  264,  265,   -1,   40,   -1,   -1,  270,  271,
  272,  273,   -1,  275,  276,  277,   -1,   -1,   -1,   -1,
   -1,  257,   -1,  125,  260,  261,  262,  263,  264,  265,
   40,   -1,   -1,  125,  270,  271,  272,  273,   -1,  275,
  276,  277,    0,   -1,  257,   -1,   -1,  260,  261,  262,
  263,  264,  265,   -1,   -1,   -1,  271,  270,  271,  272,
  273,   40,  275,  276,  277,  257,  125,    0,  260,  261,
  262,  263,  264,  265,   -1,    0,   -1,   -1,  270,  271,
  272,  273,   40,  275,  276,  277,   -1,   12,   -1,   14,
  125,   -1,  307,  257,   -1,   -1,  260,   -1,  257,  263,
  264,  265,   -1,   -1,   -1,  264,  270,   40,  272,  273,
   -1,  275,  276,  277,   -1,  125,  275,  276,  277,   -1,
   45,   -1,  337,   -1,   -1,  257,   51,   -1,  260,  261,
  262,  263,  264,  265,   -1,   60,   40,  125,  270,  271,
  272,  273,   -1,  275,  276,  277,  125,   -1,   -1,   -1,
  365,   -1,   -1,   -1,  369,  257,   -1,   -1,  260,  261,
  262,  263,  264,  265,   40,  257,   -1,  125,  270,  271,
  272,  273,  264,  275,  276,  277,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,  275,  276,  277,   -1,   -1,   -1,   -1,
   40,   -1,  125,   -1,   -1,  120,   -1,   -1,  257,   -1,
   -1,  260,  261,  262,  263,  264,  265,   41,   -1,   43,
   -1,  270,  271,  272,  273,   40,  275,  276,  277,   -1,
   -1,  125,  257,   -1,   -1,  260,  261,  262,  263,  264,
  265,   -1,   -1,   -1,   -1,  270,  271,  272,  273,   40,
  275,  276,  277,   44,   -1,   -1,   -1,  257,   -1,  125,
  260,  261,  262,  263,  264,  265,   -1,   -1,   -1,   -1,
  270,  271,  272,  273,   40,  275,  276,  277,   44,  257,
   -1,   -1,   -1,  107,   -1,  125,  264,  111,  257,  113,
  114,  260,  261,  262,  263,  264,  265,  275,  276,  277,
   -1,  270,  271,  272,  273,   -1,  275,  276,  277,  257,
  125,   -1,  260,  261,  262,  263,  264,  265,   -1,   -1,
   -1,   -1,  270,  271,  272,  273,  257,  275,  276,  277,
   -1,   -1,  123,  264,  257,   -1,   -1,  260,  261,  262,
  263,  264,  265,   -1,  275,  276,  277,  270,  271,  272,
  273,   -1,  275,  276,  277,   -1,   43,  123,   45,  183,
  184,  185,   -1,  257,   -1,  189,  260,  261,  262,  263,
  264,  265,   -1,   60,   61,   62,  270,  271,  272,  273,
   40,  275,  276,  277,   -1,   45,   -1,   -1,   -1,   -1,
  125,  257,   -1,   -1,  260,  261,  262,  263,  264,  265,
   60,   -1,   62,   -1,  270,  271,  272,  273,   -1,  275,
  276,  277,   -1,   -1,   -1,   -1,   -1,  257,   -1,   -1,
  260,  261,  262,  263,  264,  265,   -1,  251,  252,  253,
  270,  271,  272,  273,  125,  275,  276,  277,   -1,   -1,
   -1,   -1,  257,   -1,  125,  260,  261,  262,  263,  264,
  265,   -1,   -1,   -1,   -1,  270,  271,  272,  273,   -1,
  275,  276,  277,   -1,   -1,   -1,  257,   -1,   -1,  260,
  294,   -1,  263,  264,  265,   -1,   -1,   -1,   -1,  270,
  271,  272,  273,  123,  275,  276,  277,  111,   -1,   -1,
  114,  257,   -1,   -1,  260,   40,   41,  263,  264,  265,
   45,   -1,  125,   -1,  270,  271,  272,  273,  123,  275,
  276,  277,   -1,   40,   41,   60,   -1,   62,   45,   40,
   41,   -1,  257,   -1,   45,  260,   40,   41,  263,   -1,
  265,   45,  123,   60,  125,   62,   -1,  272,   -1,   60,
   -1,   62,   40,   41,   -1,   -1,   60,   45,   62,   40,
   41,   -1,   -1,  123,   45,   -1,   -1,   -1,   -1,  125,
   -1,  185,   60,   -1,   62,  189,  257,   -1,   -1,   60,
   -1,   62,   -1,  264,   -1,   -1,  257,   -1,   -1,  266,
  267,  268,  269,  264,  275,  276,  277,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,  275,  276,  277,  257,  258,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,  266,  267,  268,  269,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,  257,   -1,   -1,
  260,  261,  262,  263,  264,  265,   -1,   -1,  252,  253,
  270,   -1,  272,  273,  257,  275,  276,  277,   -1,   -1,
   -1,  264,  257,   -1,   -1,  260,  261,  262,  263,  264,
  265,  123,  275,  276,  277,  270,   -1,  272,  273,   -1,
  275,  276,  277,   -1,   -1,   -1,  257,   -1,   -1,  260,
  294,   -1,  263,  264,  265,  123,   -1,   -1,   -1,  270,
   -1,  272,  273,   -1,  275,  276,  277,  257,   -1,   -1,
  260,  257,  262,  263,  264,  265,  123,   -1,  264,   -1,
  270,   -1,  272,  273,   -1,  275,  276,  277,   -1,  275,
  276,  277,  257,  258,   -1,   -1,   -1,  123,   -1,   -1,
   -1,  266,  267,  268,  269,   -1,   -1,   -1,   -1,   -1,
  257,  258,   -1,   -1,   -1,   -1,  257,  258,   -1,  266,
  267,  268,  269,  257,  258,  266,  267,  268,  269,  125,
   -1,   -1,  266,  267,  268,  269,   -1,   -1,   -1,  257,
  258,   -1,   -1,  125,   -1,   -1,  257,  258,  266,  267,
  268,  269,  125,   -1,   -1,  266,  267,  268,  269,   -1,
   -1,   -1,   -1,   -1,   -1,  257,   -1,   -1,  260,   -1,
  262,  263,  264,  265,  125,   -1,   -1,   -1,  270,   -1,
  272,  273,   -1,  275,  276,  277,   -1,   -1,   -1,  257,
   -1,   -1,  260,   -1,   -1,  263,  264,  265,  125,   -1,
   -1,   -1,  270,   -1,  272,  273,   -1,  275,  276,  277,
  257,   -1,   -1,  260,   -1,   -1,  263,  264,  265,  125,
   -1,   -1,   -1,  270,   -1,  272,  273,   -1,  275,  276,
  277,  257,   -1,   -1,  260,   -1,   -1,  263,  264,  265,
  125,   -1,   -1,   -1,  270,   -1,  272,  273,   -1,  275,
  276,  277,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,  257,  125,   -1,  260,   -1,   -1,  263,  264,  265,
   -1,   -1,   -1,   -1,  270,  257,  272,  273,   -1,  275,
  276,  277,  264,  125,  257,   -1,   -1,  260,   -1,   -1,
  263,  264,  265,  275,  276,  277,   -1,  270,   -1,  272,
  273,   -1,  275,  276,  277,  125,  257,   -1,   -1,  260,
   -1,   -1,  263,  264,  265,   -1,   -1,   -1,   -1,  270,
   -1,  272,  273,   -1,  275,  276,  277,  125,   -1,   -1,
  257,   -1,   -1,  260,   -1,   -1,  263,  264,  265,   -1,
   -1,   -1,   -1,  270,   -1,  272,  273,   -1,  275,  276,
  277,  257,  125,   -1,  260,   -1,   -1,  263,  264,  265,
   -1,   -1,   -1,   -1,  270,   -1,  272,  273,   -1,  275,
  276,  277,  257,  125,   -1,  260,   -1,   -1,  263,  264,
  265,   -1,   -1,   -1,   -1,  270,   -1,  272,  273,   -1,
  275,  276,  277,   -1,  257,  125,   -1,  260,   -1,   -1,
  263,  264,  265,   -1,   -1,   -1,   -1,  270,   -1,  272,
  273,   -1,  275,  276,  277,  257,  125,   -1,  260,   -1,
   -1,  263,  264,  265,   -1,   -1,   -1,   -1,  270,   -1,
  272,  273,   -1,  275,  276,  277,   -1,  257,  125,   -1,
  260,   -1,   -1,  263,  264,  265,   -1,   -1,   -1,   -1,
  270,   -1,  272,  273,   -1,  275,  276,  277,   -1,  257,
  125,   -1,  260,   -1,   -1,  263,  264,  265,   -1,   -1,
   -1,   -1,  270,   -1,  272,  273,   -1,  275,  276,  277,
   -1,  125,   -1,   -1,  257,   -1,   -1,  260,   -1,   -1,
  263,  264,  265,   -1,   -1,   -1,   -1,  270,   -1,  272,
  273,   -1,  275,  276,  277,  257,  125,   -1,  260,   -1,
   -1,  263,  264,  265,   -1,   -1,   -1,   -1,  270,   -1,
  272,  273,   -1,  275,  276,  277,   -1,  257,  125,   -1,
  260,   -1,   -1,  263,  264,  265,   -1,   -1,   -1,   -1,
  270,   -1,  272,  273,   -1,  275,  276,  277,  257,  125,
   -1,  260,   -1,   -1,  263,  264,  265,   -1,   -1,   -1,
   -1,  270,   -1,  272,  273,   -1,  275,  276,  277,   -1,
  257,   -1,   -1,  260,   -1,   -1,  263,  264,  265,   -1,
   -1,   -1,   -1,  270,   -1,  272,  273,   -1,  275,  276,
  277,   -1,  257,   -1,   -1,  260,   -1,   -1,  263,  264,
  265,   -1,   -1,   -1,   -1,  270,   -1,  272,  273,   -1,
  275,  276,  277,  257,   -1,   -1,  260,   -1,   -1,  263,
  264,  265,   -1,   -1,   -1,   -1,  270,   -1,  272,  273,
   -1,  275,  276,  277,   -1,   -1,   -1,   -1,  257,   -1,
   -1,  260,   -1,   -1,  263,  264,  265,   -1,   -1,   -1,
   -1,  270,   -1,  272,  273,   -1,  275,  276,  277,   -1,
  257,   -1,   -1,  260,   -1,   -1,  263,  264,   -1,   -1,
   -1,   -1,   -1,  270,   -1,  272,  273,   -1,  275,  276,
  277,  257,   -1,   -1,  260,   -1,   -1,  263,   -1,  265,
   -1,   -1,   -1,   -1,   -1,   -1,  272,
};
}
final static short YYFINAL=13;
final static short YYMAXTOKEN=278;
final static String yyname[] = {
"end-of-file",null,null,null,null,null,null,null,null,null,null,null,null,null,
null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,
null,null,null,null,null,null,null,null,null,null,"'('","')'","'*'","'+'","','",
"'-'","'.'","'/'",null,null,null,null,null,null,null,null,null,null,null,"';'",
"'<'","'='","'>'",null,null,null,null,null,null,null,null,null,null,null,null,
null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,
null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,
null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,
"'{'",null,"'}'",null,null,null,null,null,null,null,null,null,null,null,null,
null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,
null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,
null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,
null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,
null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,
null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,
null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,
null,null,null,null,null,null,null,"ID","CTE","CADENA","IF","ELSE","ENDIF",
"PRINT","VOID","RETURN","COMP_MAYOR_IGUAL","COMP_MENOR_IGUAL","COMP_IGUAL",
"COMP_DISTINTO","CLASS","WHILE","DO","INTERFACE","IMPLEMENT","INT","ULONG",
"FLOAT","OPERADOR_MENOS",
};
final static String yyrule[] = {
"$accept : programa",
"programa : '{' sentencias '}'",
"programa : sentencias '}'",
"programa : '{' sentencias",
"programa : '{' '}'",
"programa :",
"sentencias : sentencia",
"sentencias : sentencias sentencia",
"sentencia : sentencia_declarativa",
"sentencia : sentencia_ejecutable",
"sentencia_ejecutable : sentencia_asignacion",
"sentencia_ejecutable : sentencia_invocacion_funcion",
"sentencia_ejecutable : sentencia_imprimir",
"sentencia_ejecutable : sentencia_seleccion",
"sentencia_ejecutable : sentencia_iterativa_do_while",
"sentencia_ejecutable : sentencia_return",
"sentencias_funcion : sentencia_funcion",
"sentencias_funcion : sentencias_funcion sentencia_funcion",
"sentencia_funcion : sentencia_declarativa",
"sentencia_funcion : sentencia_ejecutable_funcion",
"sentencia_ejecutable_funcion : sentencia_asignacion",
"sentencia_ejecutable_funcion : sentencia_invocacion_funcion",
"sentencia_ejecutable_funcion : sentencia_imprimir",
"sentencia_ejecutable_funcion : sentencia_seleccion_funcion",
"sentencia_ejecutable_funcion : sentencia_iterativa_do_while_funcion",
"sentencia_return : RETURN ','",
"sentencia_return : RETURN",
"sentencia_iterativa_do_while : DO bloque_sentencias_ejecutables WHILE '(' condicion ')' ','",
"sentencia_iterativa_do_while : DO bloque_sentencias_ejecutables WHILE '(' condicion ')'",
"sentencia_iterativa_do_while : DO WHILE '(' condicion ')' ','",
"sentencia_iterativa_do_while : DO bloque_sentencias_ejecutables WHILE '(' ')' ','",
"sentencia_iterativa_do_while : DO bloque_sentencias_ejecutables '(' condicion ')' ','",
"sentencia_iterativa_do_while : DO WHILE ','",
"sentencia_iterativa_do_while : DO bloque_sentencias_ejecutables WHILE ','",
"sentencia_iterativa_do_while : DO ','",
"sentencia_iterativa_do_while : DO '(' condicion ')' ','",
"sentencia_iterativa_do_while : DO '(' ')' ','",
"sentencia_iterativa_do_while : DO '(' ')'",
"sentencia_iterativa_do_while_funcion : DO bloque_sentencias_ejecutables_funcion WHILE '(' condicion ')' ','",
"$$1 :",
"sentencia_iterativa_do_while_funcion : DO bloque_sentencias_ejecutables_funcion WHILE '(' condicion ')' $$1 DO WHILE '(' condicion ')' ','",
"sentencia_iterativa_do_while_funcion : DO bloque_sentencias_ejecutables_funcion WHILE '(' ')' ','",
"sentencia_iterativa_do_while_funcion : DO bloque_sentencias_ejecutables_funcion '(' condicion ')' ','",
"sentencia_iterativa_do_while_funcion : DO WHILE ','",
"sentencia_iterativa_do_while_funcion : DO bloque_sentencias_ejecutables_funcion WHILE ','",
"sentencia_iterativa_do_while_funcion : DO ','",
"sentencia_iterativa_do_while_funcion : DO '(' condicion ')' ','",
"sentencia_iterativa_do_while_funcion : DO '(' ')' ','",
"sentencia_iterativa_do_while_funcion : DO '(' ')'",
"sentencia_seleccion : IF '(' condicion ')' bloque_sentencias_ejecutables ELSE bloque_sentencias_ejecutables ENDIF ','",
"sentencia_seleccion : IF '(' condicion ')' bloque_sentencias_ejecutables ENDIF ','",
"sentencia_seleccion : IF '(' condicion ')' bloque_sentencias_ejecutables ELSE bloque_sentencias_ejecutables ENDIF",
"sentencia_seleccion : IF '(' condicion ')' bloque_sentencias_ejecutables ENDIF",
"sentencia_seleccion : IF '(' ')' bloque_sentencias_ejecutables ELSE bloque_sentencias_ejecutables ENDIF ','",
"sentencia_seleccion : IF '(' ')' bloque_sentencias_ejecutables ENDIF ','",
"sentencia_seleccion : IF '(' condicion ')' ELSE bloque_sentencias_ejecutables ENDIF ','",
"sentencia_seleccion : IF '(' condicion ')' bloque_sentencias_ejecutables ELSE ENDIF ','",
"sentencia_seleccion : IF '(' condicion ')' ENDIF ','",
"sentencia_seleccion_funcion : IF '(' condicion ')' bloque_sentencias_ejecutables_funcion ELSE bloque_sentencias_ejecutables_funcion ENDIF ','",
"sentencia_seleccion_funcion : IF '(' condicion ')' bloque_sentencias_ejecutables_funcion ENDIF ','",
"sentencia_seleccion_funcion : IF '(' condicion ')' bloque_sentencias_ejecutables_funcion ELSE bloque_sentencias_ejecutables_funcion ENDIF",
"$$2 :",
"sentencia_seleccion_funcion : IF '(' condicion ')' bloque_sentencias_ejecutables_funcion ENDIF $$2 IF '(' ')' bloque_sentencias_ejecutables_funcion ELSE bloque_sentencias_ejecutables_funcion ENDIF ','",
"sentencia_seleccion_funcion : IF '(' ')' bloque_sentencias_ejecutables_funcion ENDIF ','",
"sentencia_seleccion_funcion : IF '(' condicion ')' ELSE bloque_sentencias_ejecutables_funcion ENDIF ','",
"sentencia_seleccion_funcion : IF '(' condicion ')' bloque_sentencias_ejecutables_funcion ELSE ENDIF ','",
"sentencia_seleccion_funcion : IF '(' condicion ')' ENDIF ','",
"bloque_sentencias_ejecutables : sentencia_ejecutable",
"bloque_sentencias_ejecutables : '{' sentencias_ejecutables '}'",
"bloque_sentencias_ejecutables : '{' sentencias_ejecutables",
"bloque_sentencias_ejecutables : sentencias_ejecutables '}'",
"bloque_sentencias_ejecutables : '{' '}'",
"bloque_sentencias_ejecutables : sentencia_declarativa",
"bloque_sentencias_ejecutables_funcion : sentencia_ejecutable_funcion",
"bloque_sentencias_ejecutables_funcion : sentencia_return",
"bloque_sentencias_ejecutables_funcion : sentencia_declarativa",
"bloque_sentencias_ejecutables_funcion : '{' sentencias_ejecutables_funcion '}'",
"bloque_sentencias_ejecutables_funcion : '{' sentencias_ejecutables_funcion sentencia_return '}'",
"bloque_sentencias_ejecutables_funcion : '{' sentencias_ejecutables_funcion sentencia_return sentencias_ejecutables_funcion_inalcanzable '}'",
"bloque_sentencias_ejecutables_funcion : sentencias_ejecutables_funcion '}'",
"bloque_sentencias_ejecutables_funcion : sentencias_ejecutables_funcion sentencia_return '}'",
"bloque_sentencias_ejecutables_funcion : '{' sentencias_ejecutables_funcion",
"bloque_sentencias_ejecutables_funcion : '{' sentencias_ejecutables_funcion sentencia_return",
"bloque_sentencias_ejecutables_funcion : '{' '}'",
"sentencias_ejecutables_funcion_inalcanzable : sentencia_ejecutable_funcion_inalcanzable",
"sentencias_ejecutables_funcion_inalcanzable : sentencias_ejecutables_funcion_inalcanzable sentencia_ejecutable_funcion_inalcanzable",
"sentencia_ejecutable_funcion_inalcanzable : sentencia_return",
"sentencia_ejecutable_funcion_inalcanzable : sentencia_ejecutable_funcion",
"sentencias_ejecutables : sentencia_ejecutable",
"sentencias_ejecutables : sentencias_ejecutables sentencia_ejecutable",
"sentencias_ejecutables : sentencia_declarativa",
"sentencias_ejecutables : sentencias_ejecutables sentencia_declarativa",
"sentencias_ejecutables_funcion : sentencia_ejecutable_funcion",
"sentencias_ejecutables_funcion : sentencias_ejecutables_funcion sentencia_ejecutable_funcion",
"sentencias_ejecutables_funcion : sentencia_declarativa",
"sentencias_ejecutables_funcion : sentencias_ejecutables_funcion sentencia_declarativa",
"sentencia_imprimir : PRINT CADENA ','",
"sentencia_imprimir : PRINT CADENA",
"sentencia_imprimir : PRINT ','",
"sentencia_imprimir : PRINT ID ','",
"sentencia_imprimir : PRINT ID",
"sentencia_imprimir : PRINT constante ','",
"sentencia_imprimir : PRINT constante",
"sentencia_invocacion_funcion : sentencia_objeto_identificador '(' expresion ')' ','",
"sentencia_invocacion_funcion : sentencia_objeto_identificador '(' ')' ','",
"sentencia_invocacion_funcion : sentencia_objeto_identificador '(' expresion ',' lista_expresiones_invocacion_funcion_exceso ')' ','",
"sentencia_invocacion_funcion : sentencia_objeto_identificador '(' expresion ')'",
"sentencia_invocacion_funcion : sentencia_objeto_identificador '(' ')'",
"sentencia_invocacion_funcion : sentencia_objeto_identificador '(' expresion ',' lista_expresiones_invocacion_funcion_exceso ')'",
"lista_expresiones_invocacion_funcion_exceso : expresion",
"lista_expresiones_invocacion_funcion_exceso : lista_expresiones_invocacion_funcion_exceso ',' expresion",
"sentencia_asignacion : sentencia_objeto_identificador '=' expresion ','",
"sentencia_asignacion : sentencia_objeto_identificador '=' expresion",
"sentencia_asignacion : sentencia_objeto_identificador '=' ','",
"sentencia_objeto_identificador : ID",
"sentencia_objeto_identificador : sentencia_objeto_identificador '.' ID",
"sentencia_declarativa : declaracion_variable",
"sentencia_declarativa : declaracion_funcion",
"sentencia_declarativa : declaracion_clase",
"sentencia_declarativa : declaracion_interfaz",
"declaracion_variable : tipo lista_de_variables ','",
"declaracion_variable : tipo lista_de_variables",
"declaracion_variable : tipo ','",
"declaracion_interfaz : INTERFACE ID '{' bloque_encabezado_funcion_declaracion_interfaz '}'",
"declaracion_interfaz : INTERFACE '{' bloque_encabezado_funcion_declaracion_interfaz '}'",
"declaracion_interfaz : INTERFACE bloque_encabezado_funcion_declaracion_interfaz '}'",
"declaracion_interfaz : INTERFACE '}'",
"declaracion_interfaz : INTERFACE ID bloque_encabezado_funcion_declaracion_interfaz '}'",
"declaracion_interfaz : INTERFACE ID '}'",
"bloque_encabezado_funcion_declaracion_interfaz : encabezado_funcion_declaracion_interfaz",
"bloque_encabezado_funcion_declaracion_interfaz : bloque_encabezado_funcion_declaracion_interfaz encabezado_funcion_declaracion_interfaz",
"encabezado_funcion_declaracion_interfaz : encabezado_funcion_interfaz ','",
"encabezado_funcion_declaracion_interfaz : encabezado_funcion_interfaz",
"sentencia_declarativa_clase : tipo lista_de_variables ','",
"sentencia_declarativa_clase : tipo lista_de_variables",
"sentencia_declarativa_clase : declaracion_funcion",
"sentencia_declarativa_clase : ID ','",
"declaracion_clase : CLASS ID '{' bloque_sentencias_declarativas_clase '}'",
"declaracion_clase : CLASS ID IMPLEMENT ID '{' bloque_sentencias_declarativas_clase '}'",
"declaracion_clase : CLASS '{' bloque_sentencias_declarativas_clase '}'",
"declaracion_clase : CLASS IMPLEMENT ID",
"declaracion_clase : CLASS ID IMPLEMENT '{' bloque_sentencias_declarativas_clase '}'",
"declaracion_clase : CLASS IMPLEMENT '{' bloque_sentencias_declarativas_clase '}'",
"declaracion_clase : CLASS ID bloque_sentencias_declarativas_clase '}'",
"declaracion_clase : CLASS ID IMPLEMENT ID bloque_sentencias_declarativas_clase '}'",
"bloque_sentencias_declarativas_clase : sentencia_declarativa_clase",
"bloque_sentencias_declarativas_clase : bloque_sentencias_declarativas_clase sentencia_declarativa_clase",
"declaracion_funcion : encabezado_funcion cuerpo_funcion",
"encabezado_funcion : encabezado_funcion_nombre '(' parametro_funcion ')'",
"encabezado_funcion : encabezado_funcion_nombre '(' ')'",
"encabezado_funcion : encabezado_funcion_nombre '(' parametro_funcion ',' lista_parametros_funcion_exceso ')'",
"encabezado_funcion : encabezado_funcion_nombre '(' parametro_funcion lista_parametros_funcion_exceso ')'",
"encabezado_funcion : encabezado_funcion_nombre ')'",
"encabezado_funcion_nombre : VOID ID",
"encabezado_funcion_nombre : VOID",
"encabezado_funcion_interfaz : VOID ID '(' parametro_funcion ')'",
"encabezado_funcion_interfaz : VOID ID '(' ')'",
"encabezado_funcion_interfaz : VOID ID '(' parametro_funcion ',' lista_parametros_funcion_exceso ')'",
"encabezado_funcion_interfaz : VOID ID '(' parametro_funcion lista_parametros_funcion_exceso ')'",
"encabezado_funcion_interfaz : VOID '(' parametro_funcion ')'",
"encabezado_funcion_interfaz : VOID '(' ')'",
"encabezado_funcion_interfaz : VOID ID parametro_funcion ')'",
"encabezado_funcion_interfaz : VOID ID ')'",
"cuerpo_funcion : '{' sentencias_funcion sentencia_return '}'",
"cuerpo_funcion : '{' sentencia_return '}'",
"cuerpo_funcion : '{' sentencias_funcion sentencia_return sentencias_funcion_inalcanzable '}'",
"cuerpo_funcion : '{' sentencia_return sentencias_funcion_inalcanzable '}'",
"cuerpo_funcion : '{' sentencias_funcion '}'",
"cuerpo_funcion : '{' '}'",
"cuerpo_funcion : sentencias_funcion sentencia_return '}'",
"cuerpo_funcion : sentencia_return '}'",
"cuerpo_funcion : sentencias_funcion sentencia_return sentencias_funcion_inalcanzable '}'",
"cuerpo_funcion : sentencia_return sentencias_funcion_inalcanzable '}'",
"cuerpo_funcion : sentencias_funcion '}'",
"cuerpo_funcion : '}'",
"sentencias_funcion_inalcanzable : sentencia_funcion_inalcanzable",
"sentencias_funcion_inalcanzable : sentencias_funcion_inalcanzable sentencia_funcion_inalcanzable",
"sentencia_funcion_inalcanzable : sentencia_declarativa",
"sentencia_funcion_inalcanzable : sentencia_return",
"sentencia_funcion_inalcanzable : sentencia_ejecutable_funcion",
"lista_parametros_funcion_exceso : parametro_funcion",
"lista_parametros_funcion_exceso : lista_parametros_funcion_exceso ',' parametro_funcion",
"lista_parametros_funcion_exceso : lista_parametros_funcion_exceso parametro_funcion",
"parametro_funcion : tipo ID",
"lista_de_variables : ID",
"lista_de_variables : lista_de_variables ';' ID",
"tipo : INT",
"tipo : ULONG",
"tipo : FLOAT",
"tipo : ID",
"condicion : expresion comparador expresion",
"condicion : expresion comparador",
"condicion : comparador expresion",
"condicion : expresion '=' expresion",
"comparador : COMP_MAYOR_IGUAL",
"comparador : COMP_MENOR_IGUAL",
"comparador : COMP_IGUAL",
"comparador : COMP_DISTINTO",
"comparador : '>'",
"comparador : '<'",
"expresion : expresion '+' termino",
"expresion : expresion '-' termino",
"expresion : termino",
"termino : termino '*' factor",
"termino : termino '/' factor",
"termino : factor",
"factor : ID",
"factor : ID OPERADOR_MENOS",
"factor : constante",
"factor : '(' expresion ')'",
"constante : CTE",
"constante : '-' CTE",
};

//#line 448 "./src/compilador/gramatica.y"

public static AnalizadorLexico lexico = null;
public static GeneracionCodigoIntermedio genCodigoIntermedio = GeneracionCodigoIntermedio.getInstance();
public static Logger logger = Logger.getInstance();
public static TablaDeSimbolos ts = TablaDeSimbolos.getInstance();
public static Parser parser = null;
public static int MAX_INT_VALUE = (int) (Math.pow(2, 15) - 1);

/** Chequea, para los INT, que el valor positivo no supere el valor maximo */
public void corregirConstantePositivaEntera(String constante) {
	if (constante.contains("_i")) {
		//se recibio un INT con signo positivo
		boolean exceptionOutOfRange = false;
		int cte = 0;
		String constanteValue = constante.toString().split("_")[0];

		try {
			cte = Integer.parseInt(constanteValue);
		} catch (NumberFormatException e) {
			exceptionOutOfRange = true;
		}

		if (cte > MAX_INT_VALUE || exceptionOutOfRange) {
			logger.logWarning("[Parser] Rango invalido para la constante: " + constante + ", se trunca al valor " + MAX_INT_VALUE + "_i");

			ts.swapLexemas(constante, MAX_INT_VALUE + "_i");
		}
	}
}

public void constanteConSigno(String constante) {
	/** Check de float negativos */
	if (constante.contains(".")) {
		String negConstante = "-"+constante;
		ts.swapLexemas(constante, negConstante);
	} else {

		if (constante.contains("_ul")) {
			//se recibio un ULONG con signo negativo
			logger.logWarning("[Parser] No se admiten ULONG con valores negativos: " + "-"+constante + ", se trunca a 0_ul");
		
			ts.swapLexemas(constante, "0_ul");
		} else {
			// se recibio un INT negativo
			String negConstante = "-"+constante;
			ts.swapLexemas(constante, negConstante);
		}
	}
}	

public int yylex() {
	return lexico.yylex(parser);
}

public void yyerror(String error) {
	logger.logError(error);
}

public static void main(String[] args) {
	if (args.length == 0) {
		System.err.println("No se especifico ningun archivo de codigo");
	} else {
		String archivo_a_leer = args[0];
		System.out.println("Se va a leer archivo " + archivo_a_leer);
		
		FileReaderHelper fileHelper = new FileReaderHelper();
		
		boolean fileOpenSuccess = fileHelper.open(archivo_a_leer);
		
		if (fileOpenSuccess) {
			parser = new Parser();
			lexico = new AnalizadorLexico(fileHelper);
			
	        parser.run();
	
			String path = new File(archivo_a_leer).getAbsolutePath();
	        
	        Output out = new Output(path);
	        
	        out.saveFile("codigo-lexico.txt", logger.getLexico());
			out.saveFile("codigo-sintactico.txt", logger.getSintactico());
			out.saveFile("tabla-de-simbolos.txt", ts.print());
		}
	}
}
//#line 1033 "Parser.java"
//###############################################################
// method: yylexdebug : check lexer state
//###############################################################
void yylexdebug(int state,int ch)
{
String s=null;
  if (ch < 0) ch=0;
  if (ch <= YYMAXTOKEN) //check index bounds
     s = yyname[ch];    //now get it
  if (s==null)
    s = "illegal-symbol";
  debug("state "+state+", reading "+ch+" ("+s+")");
}





//The following are now global, to aid in error reporting
int yyn;       //next next thing to do
int yym;       //
int yystate;   //current parsing state from state table
String yys;    //current token string


//###############################################################
// method: yyparse : parse input and execute indicated items
//###############################################################
int yyparse()
{
boolean doaction;
  init_stacks();
  yynerrs = 0;
  yyerrflag = 0;
  yychar = -1;          //impossible char forces a read
  yystate=0;            //initial state
  state_push(yystate);  //save it
  val_push(yylval);     //save empty value
  while (true) //until parsing is done, either correctly, or w/error
    {
    doaction=true;
    if (yydebug) debug("loop"); 
    //#### NEXT ACTION (from reduction table)
    for (yyn=yydefred[yystate];yyn==0;yyn=yydefred[yystate])
      {
      if (yydebug) debug("yyn:"+yyn+"  state:"+yystate+"  yychar:"+yychar);
      if (yychar < 0)      //we want a char?
        {
        yychar = yylex();  //get next token
        if (yydebug) debug(" next yychar:"+yychar);
        //#### ERROR CHECK ####
        if (yychar < 0)    //it it didn't work/error
          {
          yychar = 0;      //change it to default string (no -1!)
          if (yydebug)
            yylexdebug(yystate,yychar);
          }
        }//yychar<0
      yyn = yysindex[yystate];  //get amount to shift by (shift index)
      if ((yyn != 0) && (yyn += yychar) >= 0 &&
          yyn <= YYTABLESIZE && yycheck[yyn] == yychar)
        {
        if (yydebug)
          debug("state "+yystate+", shifting to state "+yytable[yyn]);
        //#### NEXT STATE ####
        yystate = yytable[yyn];//we are in a new state
        state_push(yystate);   //save it
        val_push(yylval);      //push our lval as the input for next rule
        yychar = -1;           //since we have 'eaten' a token, say we need another
        if (yyerrflag > 0)     //have we recovered an error?
           --yyerrflag;        //give ourselves credit
        doaction=false;        //but don't process yet
        break;   //quit the yyn=0 loop
        }

    yyn = yyrindex[yystate];  //reduce
    if ((yyn !=0 ) && (yyn += yychar) >= 0 &&
            yyn <= YYTABLESIZE && yycheck[yyn] == yychar)
      {   //we reduced!
      if (yydebug) debug("reduce");
      yyn = yytable[yyn];
      doaction=true; //get ready to execute
      break;         //drop down to actions
      }
    else //ERROR RECOVERY
      {
      if (yyerrflag==0)
        {
        yyerror("syntax error");
        yynerrs++;
        }
      if (yyerrflag < 3) //low error count?
        {
        yyerrflag = 3;
        while (true)   //do until break
          {
          if (stateptr<0)   //check for under & overflow here
            {
            yyerror("stack underflow. aborting...");  //note lower case 's'
            return 1;
            }
          yyn = yysindex[state_peek(0)];
          if ((yyn != 0) && (yyn += YYERRCODE) >= 0 &&
                    yyn <= YYTABLESIZE && yycheck[yyn] == YYERRCODE)
            {
            if (yydebug)
              debug("state "+state_peek(0)+", error recovery shifting to state "+yytable[yyn]+" ");
            yystate = yytable[yyn];
            state_push(yystate);
            val_push(yylval);
            doaction=false;
            break;
            }
          else
            {
            if (yydebug)
              debug("error recovery discarding state "+state_peek(0)+" ");
            if (stateptr<0)   //check for under & overflow here
              {
              yyerror("Stack underflow. aborting...");  //capital 'S'
              return 1;
              }
            state_pop();
            val_pop();
            }
          }
        }
      else            //discard this token
        {
        if (yychar == 0)
          return 1; //yyabort
        if (yydebug)
          {
          yys = null;
          if (yychar <= YYMAXTOKEN) yys = yyname[yychar];
          if (yys == null) yys = "illegal-symbol";
          debug("state "+yystate+", error recovery discards token "+yychar+" ("+yys+")");
          }
        yychar = -1;  //read another
        }
      }//end error recovery
    }//yyn=0 loop
    if (!doaction)   //any reason not to proceed?
      continue;      //skip action
    yym = yylen[yyn];          //get count of terminals on rhs
    if (yydebug)
      debug("state "+yystate+", reducing "+yym+" by rule "+yyn+" ("+yyrule[yyn]+")");
    if (yym>0)                 //if count of rhs not 'nil'
      yyval = val_peek(yym-1); //get current semantic value
    yyval = dup_yyval(yyval); //duplicate yyval if ParserVal is used as semantic value
    switch(yyn)
      {
//########## USER-SUPPLIED ACTIONS ##########
case 1:
//#line 17 "./src/compilador/gramatica.y"
{ logger.logSuccess("[Parser] Programa correcto detectado"); }
break;
case 2:
//#line 18 "./src/compilador/gramatica.y"
{ logger.logError("[Parser] Se esperaba simbolo '{' al principio del programa"); }
break;
case 3:
//#line 19 "./src/compilador/gramatica.y"
{ logger.logError("[Parser] Se esperaba simbolo '}' al final del programa"); }
break;
case 4:
//#line 20 "./src/compilador/gramatica.y"
{ logger.logError("[Parser] Programa vacio"); }
break;
case 5:
//#line 21 "./src/compilador/gramatica.y"
{ logger.logError("[Parser] Programa vacio"); }
break;
case 15:
//#line 40 "./src/compilador/gramatica.y"
{ logger.logError("[Parser] Sentencia RETURN fuera de funcion"); }
break;
case 26:
//#line 63 "./src/compilador/gramatica.y"
{ logger.logError("[Parser] Se esperab un simbolo ',' luego del RETURN"); }
break;
case 27:
//#line 67 "./src/compilador/gramatica.y"
{ logger.logSuccess("[Parser] Sentencia iterativa DO WHILE detectada"); }
break;
case 28:
//#line 68 "./src/compilador/gramatica.y"
{ logger.logError("[Parser] Se esperaba ',' luego de sentencia DO WHILE"); }
break;
case 29:
//#line 69 "./src/compilador/gramatica.y"
{ logger.logError("[Parser] Se esperaban sentencias ejecutables en sentencia DO WHILE"); }
break;
case 30:
//#line 70 "./src/compilador/gramatica.y"
{ logger.logError("[Parser] Se esperaba condicion en sentencia DO WHILE"); }
break;
case 31:
//#line 71 "./src/compilador/gramatica.y"
{ logger.logError("[Parser] Se esperaba WHILE en sentencia DO WHILE"); }
break;
case 32:
//#line 72 "./src/compilador/gramatica.y"
{ logger.logError("[Parser] Se esperaban sentencias ejecutables en sentencia DO WHILE"); }
break;
case 33:
//#line 73 "./src/compilador/gramatica.y"
{ logger.logError("[Parser] Se esperaba condicion en sentencia DO WHILE"); }
break;
case 34:
//#line 74 "./src/compilador/gramatica.y"
{ logger.logError("[Parser] Se esperaban sentencias ejecutables en sentencia DO WHILE"); }
break;
case 35:
//#line 75 "./src/compilador/gramatica.y"
{ logger.logError("[Parser] Se esperaban sentencias ejecutables en sentencia DO WHILE"); }
break;
case 36:
//#line 76 "./src/compilador/gramatica.y"
{ logger.logError("[Parser] Se esperaban sentencias ejecutables en sentencia DO WHILE"); }
break;
case 37:
//#line 77 "./src/compilador/gramatica.y"
{ logger.logError("[Parser] Se esperaban sentencias ejecutables en sentencia DO WHILE"); }
break;
case 38:
//#line 81 "./src/compilador/gramatica.y"
{ logger.logSuccess("[Parser] Sentencia iterativa DO WHILE detectada"); }
break;
case 39:
//#line 82 "./src/compilador/gramatica.y"
{ logger.logError("[Parser] Se esperaba ',' luego de sentencia DO WHILE"); }
break;
case 40:
//#line 83 "./src/compilador/gramatica.y"
{ logger.logError("[Parser] Se esperaban sentencias ejecutables en sentencia DO WHILE"); }
break;
case 41:
//#line 84 "./src/compilador/gramatica.y"
{ logger.logError("[Parser] Se esperaba condicion en sentencia DO WHILE"); }
break;
case 42:
//#line 85 "./src/compilador/gramatica.y"
{ logger.logError("[Parser] Se esperaba WHILE en sentencia DO WHILE"); }
break;
case 43:
//#line 86 "./src/compilador/gramatica.y"
{ logger.logError("[Parser] Se esperaban sentencias ejecutables en sentencia DO WHILE"); }
break;
case 44:
//#line 87 "./src/compilador/gramatica.y"
{ logger.logError("[Parser] Se esperaba condicion en sentencia DO WHILE"); }
break;
case 45:
//#line 88 "./src/compilador/gramatica.y"
{ logger.logError("[Parser] Se esperaban sentencias ejecutables en sentencia DO WHILE"); }
break;
case 46:
//#line 89 "./src/compilador/gramatica.y"
{ logger.logError("[Parser] Se esperaban sentencias ejecutables en sentencia DO WHILE"); }
break;
case 47:
//#line 90 "./src/compilador/gramatica.y"
{ logger.logError("[Parser] Se esperaban sentencias ejecutables en sentencia DO WHILE"); }
break;
case 48:
//#line 91 "./src/compilador/gramatica.y"
{ logger.logError("[Parser] Se esperaban sentencias ejecutables en sentencia DO WHILE"); }
break;
case 49:
//#line 95 "./src/compilador/gramatica.y"
{ logger.logSuccess("[Parser] Sentencia seleccion IF ELSE detectada"); }
break;
case 50:
//#line 96 "./src/compilador/gramatica.y"
{ logger.logSuccess("[Parser] Sentencia seleccion IF sin ELSE detectada"); }
break;
case 51:
//#line 97 "./src/compilador/gramatica.y"
{ logger.logError("[Parser] Se esperaba ',' luego de sentencia IF ELSE"); }
break;
case 52:
//#line 98 "./src/compilador/gramatica.y"
{ logger.logError("[Parser] Se esperaba ',' luego de sentencia IF sin ELSE"); }
break;
case 53:
//#line 99 "./src/compilador/gramatica.y"
{ logger.logError("[Parser] Se esperaba condicion en sentencia IF ELSE"); }
break;
case 54:
//#line 100 "./src/compilador/gramatica.y"
{ logger.logError("[Parser] Se esperaba condicion en sentencia IF"); }
break;
case 55:
//#line 101 "./src/compilador/gramatica.y"
{ logger.logError("[Parser] Se esperaban sentencias ejecutables en sentencia IF ELSE"); }
break;
case 56:
//#line 102 "./src/compilador/gramatica.y"
{ logger.logError("[Parser] Se esperaban sentencias ejecutables en sentencia IF ELSE"); }
break;
case 57:
//#line 103 "./src/compilador/gramatica.y"
{ logger.logError("[Parser] Se esperaban sentencias ejecutables en sentencia IF"); }
break;
case 58:
//#line 107 "./src/compilador/gramatica.y"
{ logger.logSuccess("[Parser] Sentencia seleccion IF ELSE detectada"); }
break;
case 59:
//#line 108 "./src/compilador/gramatica.y"
{ logger.logSuccess("[Parser] Sentencia seleccion IF sin ELSE detectada"); }
break;
case 60:
//#line 109 "./src/compilador/gramatica.y"
{ logger.logError("[Parser] Se esperaba ',' luego de sentencia IF ELSE"); }
break;
case 61:
//#line 110 "./src/compilador/gramatica.y"
{ logger.logError("[Parser] Se esperaba ',' luego de sentencia IF sin ELSE"); }
break;
case 62:
//#line 111 "./src/compilador/gramatica.y"
{ logger.logError("[Parser] Se esperaba condicion en sentencia IF ELSE"); }
break;
case 63:
//#line 112 "./src/compilador/gramatica.y"
{ logger.logError("[Parser] Se esperaba condicion en sentencia IF"); }
break;
case 64:
//#line 113 "./src/compilador/gramatica.y"
{ logger.logError("[Parser] Se esperaban sentencias ejecutables en sentencia IF ELSE"); }
break;
case 65:
//#line 114 "./src/compilador/gramatica.y"
{ logger.logError("[Parser] Se esperaban sentencias ejecutables en sentencia IF ELSE"); }
break;
case 66:
//#line 115 "./src/compilador/gramatica.y"
{ logger.logError("[Parser] Se esperaban sentencias ejecutables en sentencia IF"); }
break;
case 69:
//#line 121 "./src/compilador/gramatica.y"
{ logger.logError("[Parser] Se esperaban un simbolo '}' en el bloque"); }
break;
case 70:
//#line 122 "./src/compilador/gramatica.y"
{ logger.logError("[Parser] Se esperaban un simbolo '{' en el bloque"); }
break;
case 71:
//#line 123 "./src/compilador/gramatica.y"
{ logger.logError("[Parser] Se esperaban sentencias ejecutables dentro del bloque"); }
break;
case 72:
//#line 124 "./src/compilador/gramatica.y"
{ logger.logError("[Parser] No se permiten declaraciones de variables dentro de bloque de sentencias ejecutables"); }
break;
case 75:
//#line 130 "./src/compilador/gramatica.y"
{ logger.logError("[Parser] No se permiten declaraciones de variables dentro de bloque de sentencias ejecutables"); }
break;
case 79:
//#line 134 "./src/compilador/gramatica.y"
{ logger.logError("[Parser] Se esperaban un simbolo '{' en el bloque"); }
break;
case 80:
//#line 135 "./src/compilador/gramatica.y"
{ logger.logError("[Parser] Se esperaban un simbolo '{' en el bloque"); }
break;
case 81:
//#line 136 "./src/compilador/gramatica.y"
{ logger.logError("[Parser] Se esperaban un simbolo '}' en el bloque"); }
break;
case 82:
//#line 137 "./src/compilador/gramatica.y"
{ logger.logError("[Parser] Se esperaban un simbolo '}' en el bloque"); }
break;
case 83:
//#line 138 "./src/compilador/gramatica.y"
{ logger.logError("[Parser] Se esperaban sentencias ejecutables en bloque de sentencias ejecutables"); }
break;
case 84:
//#line 142 "./src/compilador/gramatica.y"
{ logger.logError("[Parser] Codigo inalcanzable luego del RETURN, se ignorara"); }
break;
case 85:
//#line 143 "./src/compilador/gramatica.y"
{ logger.logError("[Parser] Codigo inalcanzable luego del RETURN, se ignorara"); }
break;
case 90:
//#line 154 "./src/compilador/gramatica.y"
{ logger.logError("[Parser] No se aceptan declaraciones de variables en sentencias ejecutables"); }
break;
case 91:
//#line 155 "./src/compilador/gramatica.y"
{ logger.logError("[Parser] No se aceptan declaraciones de variables en sentencias ejecutables"); }
break;
case 94:
//#line 161 "./src/compilador/gramatica.y"
{ logger.logError("[Parser] No se aceptan declaraciones de variables en sentencias ejecutables"); }
break;
case 95:
//#line 162 "./src/compilador/gramatica.y"
{ logger.logError("[Parser] No se aceptan declaraciones de variables en sentencias ejecutables"); }
break;
case 96:
//#line 166 "./src/compilador/gramatica.y"
{ logger.logSuccess("[Parser] Sentencia PRINT detectada"); }
break;
case 97:
//#line 167 "./src/compilador/gramatica.y"
{ logger.logError("[Parser] Se esperaba un simbolo ',' en Sentencia PRINT"); }
break;
case 98:
//#line 168 "./src/compilador/gramatica.y"
{ logger.logError("[Parser] Se esperaba CADENA en Sentencia PRINT"); }
break;
case 99:
//#line 169 "./src/compilador/gramatica.y"
{ logger.logError("[Parser] Se esperaba una CADENA y se encontro un IDENTIFICADOR en sentencia PRINT"); }
break;
case 100:
//#line 170 "./src/compilador/gramatica.y"
{ logger.logError("[Parser] Se esperaba un simbolo ',' en sentencia PRINT"); }
break;
case 101:
//#line 171 "./src/compilador/gramatica.y"
{ logger.logError("[Parser] Se esperaba una CADENA y se encontro una constante en sentencia PRINT"); }
break;
case 102:
//#line 172 "./src/compilador/gramatica.y"
{ logger.logError("[Parser] Se esperaba un simbolo ',' en sentencia PRINT"); }
break;
case 103:
//#line 176 "./src/compilador/gramatica.y"
{ logger.logSuccess("[Parser] Invocacion de funcion con expresion detectada"); }
break;
case 104:
//#line 177 "./src/compilador/gramatica.y"
{ logger.logSuccess("[Parser] Invocacion de funcion sin expresion detectada"); }
break;
case 105:
//#line 178 "./src/compilador/gramatica.y"
{ logger.logError("[Parser] Invocacion de funcion con multiples expresiones detectada, se preserva solo la primera expresion"); }
break;
case 106:
//#line 179 "./src/compilador/gramatica.y"
{ logger.logError("[Parser] Se esperaba un simbolo ',' en invocacion de funcion"); }
break;
case 107:
//#line 180 "./src/compilador/gramatica.y"
{ logger.logError("[Parser] Se esperaba un simbolo ',' en invocacion de funcion"); }
break;
case 108:
//#line 181 "./src/compilador/gramatica.y"
{ logger.logError("[Parser] Se esperaba un simbolo ',' en invocacion de funcion"); }
break;
case 111:
//#line 190 "./src/compilador/gramatica.y"
{ logger.logSuccess("[Parser] Asignacion detectada"); }
break;
case 112:
//#line 191 "./src/compilador/gramatica.y"
{ logger.logError("[Parser] Se esperaba un simbolo ',' en sentencia asignacion"); }
break;
case 113:
//#line 192 "./src/compilador/gramatica.y"
{ logger.logError("[Parser] Se esperaba expresion del lado derecho en sentencia asignacion"); }
break;
case 114:
//#line 196 "./src/compilador/gramatica.y"
{
		if (genCodigoIntermedio.existeIdentificadorEnAmbito(val_peek(0).sval)) {
			logger.logSuccess("[Gen Codigo Intermedio] El identificador " + val_peek(0).sval + " existe en el ambito");
		} else {
			logger.logError("[Gen Codigo Intermedio] El identificador " + val_peek(0).sval + " no esta declarado en el ambito");
		}
	}
break;
case 120:
//#line 214 "./src/compilador/gramatica.y"
{ 
		logger.logSuccess("[Parser] Declaracion de lista de variables detectado");
		genCodigoIntermedio.agregarTipoAListaDeVariables(val_peek(2).sval);
		genCodigoIntermedio.agregarAmbitoAListaDeVariables();
		genCodigoIntermedio.removerListaVariablesADeclarar();
	}
break;
case 121:
//#line 220 "./src/compilador/gramatica.y"
{ logger.logError("[Parser] Se esperaba un simbolo ',' en sentencia declaracion de variables"); }
break;
case 122:
//#line 221 "./src/compilador/gramatica.y"
{ logger.logError("[Parser] Se esperaba una lista de variables en sentencia declaracion de variables"); }
break;
case 123:
//#line 225 "./src/compilador/gramatica.y"
{ 
		logger.logSuccess("[Parser] Declaracion de INTERFACE detectada"); 
		genCodigoIntermedio.agregarUsoAIdentificador(val_peek(3).sval, "nombre_interfaz");
		genCodigoIntermedio.agregarAmbitoAIdentificador(val_peek(3).sval);
	}
break;
case 124:
//#line 230 "./src/compilador/gramatica.y"
{ logger.logError("[Parser] Se esperaba un identificador en declaracion de INTERFACE"); }
break;
case 125:
//#line 231 "./src/compilador/gramatica.y"
{ logger.logError("[Parser] Se esperaba un identificador en declaracion de INTERFACE"); }
break;
case 126:
//#line 232 "./src/compilador/gramatica.y"
{ logger.logError("[Parser] Se esperaba un identificador en declaracion de INTERFACE"); }
break;
case 127:
//#line 233 "./src/compilador/gramatica.y"
{ logger.logError("[Parser] Se esperaba un simbolo '{' en declaracion de INTERFACE"); }
break;
case 128:
//#line 234 "./src/compilador/gramatica.y"
{ logger.logError("[Parser] Se esperaba un simbolo '{' en declaracion de INTERFACE"); }
break;
case 132:
//#line 244 "./src/compilador/gramatica.y"
{ logger.logError("[Parser] Se esperaba un simbolo ',' en declaracion de metodo en CLASS"); }
break;
case 133:
//#line 248 "./src/compilador/gramatica.y"
{ 
		logger.logSuccess("[Parser] Declaracion de lista de variables en CLASS detectado"); 
		genCodigoIntermedio.agregarTipoAListaDeVariables(val_peek(2).sval);
		genCodigoIntermedio.removerListaVariablesADeclarar();
	}
break;
case 134:
//#line 253 "./src/compilador/gramatica.y"
{ logger.logError("[Parser] Se esperaba un simbolo ',' en declaracion de lista de variables en CLASS"); }
break;
case 137:
//#line 259 "./src/compilador/gramatica.y"
{ 
		logger.logSuccess("[Parser] Declaracion de clase CLASS detectado"); 

		if (genCodigoIntermedio.existeIdentificadorEnAmbito(val_peek(3).sval)) {
			logger.logError("[Gen Codigo Intermedio] El identificador " + val_peek(3).sval + " existe en el ambito");
		} else {
			logger.logSuccess("[Gen Codigo Intermedio] El identificador " + val_peek(3).sval + " no esta declarado en el ambito");
			genCodigoIntermedio.agregarUsoAIdentificador(val_peek(3).sval, "nombre_clase");
			genCodigoIntermedio.agregarAmbitoAIdentificador(val_peek(3).sval);
		}
	}
break;
case 138:
//#line 270 "./src/compilador/gramatica.y"
{ 
		logger.logSuccess("[Parser] Declaracion de clase CLASS detectado"); 
		genCodigoIntermedio.agregarUsoAIdentificador(val_peek(5).sval, "nombre_clase");
		genCodigoIntermedio.agregarAmbitoAIdentificador(val_peek(5).sval);
	}
break;
case 139:
//#line 275 "./src/compilador/gramatica.y"
{ logger.logError("[Parser] Se esperaba un identificador en declaracion de clase"); }
break;
case 140:
//#line 276 "./src/compilador/gramatica.y"
{ logger.logError("[Parser] Se esperaba un identificador en declaracion de clase"); }
break;
case 141:
//#line 277 "./src/compilador/gramatica.y"
{ logger.logError("[Parser] Se esperaba un identificador en IMPLEMENT de clase"); }
break;
case 142:
//#line 278 "./src/compilador/gramatica.y"
{ logger.logError("[Parser] Se esperaba un identificador en declaracion de clase"); }
break;
case 143:
//#line 279 "./src/compilador/gramatica.y"
{ logger.logError("[Parser] Se esperaba un simbolo '{' en declaracion de clase"); }
break;
case 144:
//#line 280 "./src/compilador/gramatica.y"
{ logger.logError("[Parser] Se esperaba un simbolo '{' en declaracion de clase"); }
break;
case 147:
//#line 289 "./src/compilador/gramatica.y"
{ 
		logger.logSuccess("[Parser] Declaracion de funcion detectado");
		genCodigoIntermedio.desapilarAmbito(); 
	}
break;
case 150:
//#line 298 "./src/compilador/gramatica.y"
{ logger.logError("[Parser] Encabezado de funcion con mas de 1 parametro detectado, se preserva solo el primer parametro"); }
break;
case 151:
//#line 299 "./src/compilador/gramatica.y"
{ logger.logError("[Parser] Encabezado de funcion con mas de 1 parametro detectado, se preserva solo el primer parametro"); }
break;
case 152:
//#line 300 "./src/compilador/gramatica.y"
{ logger.logError("[Parser] Se esperaba un simbolo '(' en el encabezado de la funcion"); }
break;
case 153:
//#line 304 "./src/compilador/gramatica.y"
{
		genCodigoIntermedio.agregarUsoAIdentificador(val_peek(0).sval, "nombre_funcion");
		genCodigoIntermedio.agregarAmbitoAIdentificador(val_peek(0).sval);
		genCodigoIntermedio.apilarAmbito(val_peek(0).sval); 
	}
break;
case 154:
//#line 309 "./src/compilador/gramatica.y"
{
		logger.logError("[Parser] Se esperaba un identificador en el encabezado de la funcion"); 
	}
break;
case 155:
//#line 315 "./src/compilador/gramatica.y"
{ 
		genCodigoIntermedio.agregarUsoAIdentificador(val_peek(3).sval, "nombre_metodo");
		genCodigoIntermedio.agregarAmbitoAIdentificador(val_peek(3).sval);
	}
break;
case 156:
//#line 319 "./src/compilador/gramatica.y"
{ 
		genCodigoIntermedio.agregarUsoAIdentificador(val_peek(2).sval, "nombre_metodo");
		genCodigoIntermedio.agregarAmbitoAIdentificador(val_peek(2).sval);
	}
break;
case 157:
//#line 323 "./src/compilador/gramatica.y"
{ logger.logError("[Parser] Encabezado de funcion con mas de 1 parametro detectado, se preserva solo el primer parametro"); }
break;
case 158:
//#line 324 "./src/compilador/gramatica.y"
{ logger.logError("[Parser] Encabezado de funcion con mas de 1 parametro detectado, se preserva solo el primer parametro"); }
break;
case 159:
//#line 325 "./src/compilador/gramatica.y"
{ logger.logError("[Parser] Se esperaba un identificador en el encabezado de la funcion"); }
break;
case 160:
//#line 326 "./src/compilador/gramatica.y"
{ logger.logError("[Parser] Se esperaba un identificador en el encabezado de la funcion"); }
break;
case 161:
//#line 327 "./src/compilador/gramatica.y"
{ logger.logError("[Parser] Se esperaba un simbolo '(' en el encabezado de la funcion"); }
break;
case 162:
//#line 328 "./src/compilador/gramatica.y"
{ logger.logError("[Parser] Se esperaba un simbolo '(' en el encabezado de la funcion"); }
break;
case 167:
//#line 336 "./src/compilador/gramatica.y"
{ logger.logError("[Parser] Se esperaba una sentencia RETURN al final de la funcion"); }
break;
case 168:
//#line 337 "./src/compilador/gramatica.y"
{ logger.logError("[Parser] Se esperaba una sentencia RETURN al final de la funcion"); }
break;
case 169:
//#line 338 "./src/compilador/gramatica.y"
{ logger.logError("[Parser] Se esperaba un simbolo '{' en el cuerpo de la funcion"); }
break;
case 170:
//#line 339 "./src/compilador/gramatica.y"
{ logger.logError("[Parser] Se esperaba un simbolo '{' en el cuerpo de la funcion"); }
break;
case 171:
//#line 340 "./src/compilador/gramatica.y"
{ logger.logError("[Parser] Se esperaba un simbolo '{' en el cuerpo de la funcion"); }
break;
case 172:
//#line 341 "./src/compilador/gramatica.y"
{ logger.logError("[Parser] Se esperaba un simbolo '{' en el cuerpo de la funcion"); }
break;
case 173:
//#line 342 "./src/compilador/gramatica.y"
{ logger.logError("[Parser] Se esperaba un simbolo '{' en el cuerpo de la funcion"); }
break;
case 174:
//#line 343 "./src/compilador/gramatica.y"
{ logger.logError("[Parser] Se esperaba un simbolo '{' en el cuerpo de la funcion"); }
break;
case 175:
//#line 347 "./src/compilador/gramatica.y"
{ logger.logError("[Parser] Codigo inalcanzable luego del RETURN, se ignorara"); }
break;
case 176:
//#line 348 "./src/compilador/gramatica.y"
{ logger.logError("[Parser] Codigo inalcanzable luego del RETURN, se ignorara"); }
break;
case 183:
//#line 364 "./src/compilador/gramatica.y"
{ 
		genCodigoIntermedio.agregarUsoAIdentificador(val_peek(0).sval, "nombre_parametro");
		genCodigoIntermedio.agregarTipoAParametroDeFuncion(val_peek(0).sval, val_peek(1).sval);
		genCodigoIntermedio.agregarAmbitoAIdentificador(val_peek(0).sval);
	}
break;
case 184:
//#line 372 "./src/compilador/gramatica.y"
{ 
		genCodigoIntermedio.agregarVariableADeclarar(val_peek(0).sval); 
		genCodigoIntermedio.agregarUsoAIdentificador(val_peek(0).sval, "variable");
	}
break;
case 185:
//#line 376 "./src/compilador/gramatica.y"
{ 
		genCodigoIntermedio.agregarVariableADeclarar(val_peek(0).sval); 
		genCodigoIntermedio.agregarUsoAIdentificador(val_peek(0).sval, "variable");
	}
break;
case 189:
//#line 386 "./src/compilador/gramatica.y"
{
		if (genCodigoIntermedio.existeIdentificadorEnAmbito(val_peek(0).sval)) {
			logger.logSuccess("[Gen Codigo Intermedio] El identificador " + val_peek(0).sval + " existe en el ambito");
		} else {
			logger.logError("[Gen Codigo Intermedio] El identificador " + val_peek(0).sval + " no esta declarado en el ambito");
		}
	}
break;
case 191:
//#line 397 "./src/compilador/gramatica.y"
{ logger.logError("[Parser] Se esperaba una expresion del lado derecho de la comparacion"); }
break;
case 192:
//#line 398 "./src/compilador/gramatica.y"
{ logger.logError("[Parser] Se esperaba una expresion del lado izquierdo de la comparacion"); }
break;
case 193:
//#line 399 "./src/compilador/gramatica.y"
{ logger.logError("[Parser] Se esperaba un comparador valido en la comparacion"); }
break;
case 206:
//#line 424 "./src/compilador/gramatica.y"
{
		if (genCodigoIntermedio.existeIdentificadorEnAmbito(val_peek(0).sval)) {
			logger.logSuccess("[Gen Codigo Intermedio] El identificador " + val_peek(0).sval + " existe en el ambito");
		} else {
			logger.logError("[Gen Codigo Intermedio] El identificador " + val_peek(0).sval + " no esta declarado en el ambito");
		}
	}
break;
case 207:
//#line 431 "./src/compilador/gramatica.y"
{
		if (genCodigoIntermedio.existeIdentificadorEnAmbito(val_peek(1).sval)) {
			logger.logSuccess("[Gen Codigo Intermedio] El identificador " + val_peek(1).sval + " existe en el ambito");
		} else {
			logger.logError("[Gen Codigo Intermedio] El identificador " + val_peek(1).sval + " no esta declarado en el ambito");
		}
	}
break;
case 209:
//#line 439 "./src/compilador/gramatica.y"
{ logger.logError("[Parser] No se admiten expresiones entre parentesis"); }
break;
case 210:
//#line 443 "./src/compilador/gramatica.y"
{ corregirConstantePositivaEntera(val_peek(0).sval); }
break;
case 211:
//#line 444 "./src/compilador/gramatica.y"
{ constanteConSigno(val_peek(0).sval); }
break;
//#line 1802 "Parser.java"
//########## END OF USER-SUPPLIED ACTIONS ##########
    }//switch
    //#### Now let's reduce... ####
    if (yydebug) debug("reduce");
    state_drop(yym);             //we just reduced yylen states
    yystate = state_peek(0);     //get new state
    val_drop(yym);               //corresponding value drop
    yym = yylhs[yyn];            //select next TERMINAL(on lhs)
    if (yystate == 0 && yym == 0)//done? 'rest' state and at first TERMINAL
      {
      if (yydebug) debug("After reduction, shifting from state 0 to state "+YYFINAL+"");
      yystate = YYFINAL;         //explicitly say we're done
      state_push(YYFINAL);       //and save it
      val_push(yyval);           //also save the semantic value of parsing
      if (yychar < 0)            //we want another character?
        {
        yychar = yylex();        //get next character
        if (yychar<0) yychar=0;  //clean, if necessary
        if (yydebug)
          yylexdebug(yystate,yychar);
        }
      if (yychar == 0)          //Good exit (if lex returns 0 ;-)
         break;                 //quit the loop--all DONE
      }//if yystate
    else                        //else not done yet
      {                         //get next state and push, for next yydefred[]
      yyn = yygindex[yym];      //find out where to go
      if ((yyn != 0) && (yyn += yystate) >= 0 &&
            yyn <= YYTABLESIZE && yycheck[yyn] == yystate)
        yystate = yytable[yyn]; //get new state
      else
        yystate = yydgoto[yym]; //else go to new defred
      if (yydebug) debug("after reduction, shifting from state "+state_peek(0)+" to state "+yystate+"");
      state_push(yystate);     //going again, so push state & val...
      val_push(yyval);         //for next action
      }
    }//main loop
  return 0;//yyaccept!!
}
//## end of method parse() ######################################



//## run() --- for Thread #######################################
/**
 * A default run method, used for operating this parser
 * object in the background.  It is intended for extending Thread
 * or implementing Runnable.  Turn off with -Jnorun .
 */
public void run()
{
  yyparse();
}
//## end of method run() ########################################



//## Constructors ###############################################
/**
 * Default constructor.  Turn off with -Jnoconstruct .

 */
public Parser()
{
  //nothing to do
}


/**
 * Create a parser, setting the debug to true or false.
 * @param debugMe true for debugging, false for no debug.
 */
public Parser(boolean debugMe)
{
  yydebug=debugMe;
}
//###############################################################



}
//################### END OF CLASS ##############################
