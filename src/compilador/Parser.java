//### This file created by BYACC 1.8(/Java extension  1.15)
//### Java capabilities added 7 Jan 97, Bob Jamison
//### Updated : 27 Nov 97  -- Bob Jamison, Joe Nieten
//###           01 Jan 98  -- Bob Jamison -- fixed generic semantic constructor
//###           01 Jun 99  -- Bob Jamison -- added Runnable support
//###           06 Aug 00  -- Bob Jamison -- made state variables class-global
//###           03 Jan 01  -- Bob Jamison -- improved flags, tracing
//###           16 May 01  -- Bob Jamison -- added custom stack sizing
//###           04 Mar 02  -- Yuval Oren  -- improved java performance, added options
//###           14 Mar 02  -- Tomas Hurka -- -d support, static initializer workaround
//### Please send bug reports to tom@hukatronic.cz
//### static char yysccsid[] = "@(#)yaccpar	1.8 (Berkeley) 01/20/90";






//#line 2 ".\gramatica.y"
package compilador;
import java.io.File;
//#line 20 "Parser.java"




public class Parser
{

boolean yydebug;        //do I want debug output?
int yynerrs;            //number of errors so far
int yyerrflag;          //was there an error?
int yychar;             //the current working character

//########## MESSAGES ##########
//###############################################################
// method: debug
//###############################################################
void debug(String msg)
{
  if (yydebug)
    System.out.println(msg);
}

//########## STATE STACK ##########
final static int YYSTACKSIZE = 500;  //maximum stack size
int statestk[] = new int[YYSTACKSIZE]; //state stack
int stateptr;
int stateptrmax;                     //highest index of stackptr
int statemax;                        //state when highest index reached
//###############################################################
// methods: state stack push,pop,drop,peek
//###############################################################
final void state_push(int state)
{
  try {
		stateptr++;
		statestk[stateptr]=state;
	 }
	 catch (ArrayIndexOutOfBoundsException e) {
     int oldsize = statestk.length;
     int newsize = oldsize * 2;
     int[] newstack = new int[newsize];
     System.arraycopy(statestk,0,newstack,0,oldsize);
     statestk = newstack;
     statestk[stateptr]=state;
  }
}
final int state_pop()
{
  return statestk[stateptr--];
}
final void state_drop(int cnt)
{
  stateptr -= cnt; 
}
final int state_peek(int relative)
{
  return statestk[stateptr-relative];
}
//###############################################################
// method: init_stacks : allocate and prepare stacks
//###############################################################
final boolean init_stacks()
{
  stateptr = -1;
  val_init();
  return true;
}
//###############################################################
// method: dump_stacks : show n levels of the stacks
//###############################################################
void dump_stacks(int count)
{
int i;
  System.out.println("=index==state====value=     s:"+stateptr+"  v:"+valptr);
  for (i=0;i<count;i++)
    System.out.println(" "+i+"    "+statestk[i]+"      "+valstk[i]);
  System.out.println("======================");
}


//########## SEMANTIC VALUES ##########
//public class ParserVal is defined in ParserVal.java


String   yytext;//user variable to return contextual strings
ParserVal yyval; //used to return semantic vals from action routines
ParserVal yylval;//the 'lval' (result) I got from yylex()
ParserVal valstk[];
int valptr;
//###############################################################
// methods: value stack push,pop,drop,peek.
//###############################################################
void val_init()
{
  valstk=new ParserVal[YYSTACKSIZE];
  yyval=new ParserVal();
  yylval=new ParserVal();
  valptr=-1;
}
void val_push(ParserVal val)
{
  if (valptr>=YYSTACKSIZE)
    return;
  valstk[++valptr]=val;
}
ParserVal val_pop()
{
  if (valptr<0)
    return new ParserVal();
  return valstk[valptr--];
}
void val_drop(int cnt)
{
int ptr;
  ptr=valptr-cnt;
  if (ptr<0)
    return;
  valptr = ptr;
}
ParserVal val_peek(int relative)
{
int ptr;
  ptr=valptr-relative;
  if (ptr<0)
    return new ParserVal();
  return valstk[ptr];
}
final ParserVal dup_yyval(ParserVal val)
{
  ParserVal dup = new ParserVal();
  dup.ival = val.ival;
  dup.dval = val.dval;
  dup.sval = val.sval;
  dup.obj = val.obj;
  return dup;
}
//#### end semantic value section ####
public final static short ID=257;
public final static short CTE=258;
public final static short CADENA=259;
public final static short IF=260;
public final static short THEN=261;
public final static short ELSE=262;
public final static short ENDIF=263;
public final static short OUT=264;
public final static short FUN=265;
public final static short RETURN=266;
public final static short BREAK=267;
public final static short ASIGNACION=268;
public final static short COMP_MAYOR_IGUAL=269;
public final static short COMP_MENOR_IGUAL=270;
public final static short COMP_DISTINTO=271;
public final static short WHEN=272;
public final static short DO=273;
public final static short UNTIL=274;
public final static short CONTINUE=275;
public final static short DOUBLE64=276;
public final static short UINT16=277;
public final static short DEFER=278;
public final static short CONST=279;
public final static short YYERRCODE=256;
final static short yylhs[] = {                           -1,
    0,    0,    0,    0,    0,    1,    2,    2,    3,    3,
    4,    4,    4,    4,    6,    6,    6,    6,   11,   11,
    7,    7,    7,   14,   14,   15,   15,   16,   16,   16,
   16,   16,   16,   16,   16,   16,   16,   22,   22,    8,
    8,   23,   23,   23,   23,   23,   23,   23,   25,   25,
   25,   21,   21,   21,   21,   21,   21,   21,   21,   21,
   21,   21,   21,   21,   21,   19,   19,   19,   19,   19,
   19,   19,   20,   20,   26,   26,   26,   26,   26,   26,
   26,   26,   26,   26,   26,   26,   26,   28,   28,   29,
   29,   29,   12,   12,   12,   12,   12,   12,   12,   12,
   12,   12,   13,   13,   13,   13,   13,   32,   32,   32,
   35,   35,   34,   34,   36,   34,    9,    9,    9,   37,
   37,   38,   38,   38,   38,    5,    5,    5,    5,    5,
    5,    5,    5,    5,    5,   42,   42,   42,   30,   30,
   30,   30,   30,   31,   31,   41,   41,   43,   43,   43,
   43,   43,   27,   44,   44,   44,   44,   45,   45,   17,
   17,   17,   40,   40,   47,   40,   40,   40,   46,   46,
   39,   39,   48,   48,   49,   49,   24,   24,   24,   50,
   50,   50,   50,   50,   50,   33,   33,   33,   51,   51,
   51,   52,   52,   52,   54,   54,   55,   55,   56,   56,
   18,   18,   18,   18,   18,   18,   18,   18,   18,   53,
   53,   10,   10,
};
final static short yylen[] = {                            2,
    4,    3,    3,    3,    3,    1,    1,    2,    1,    1,
    1,    1,    1,    1,    3,    2,    2,    2,    3,    1,
    4,    5,    3,    1,    2,    1,    1,    1,    2,    1,
    2,    1,    2,    1,    2,    1,    2,    1,    2,    4,
    5,   10,   13,   13,   13,   13,   16,   16,    1,    1,
    2,    8,    8,    8,   11,   11,   15,   13,   13,   15,
   15,   15,   13,   13,   14,    9,   10,   10,    8,    9,
    9,    8,    7,    9,    1,    1,    1,    4,    4,    3,
    2,    3,    3,    3,    3,    2,    2,    1,    2,    1,
    1,    1,    6,    7,    5,    5,    5,    5,    6,    6,
    6,    6,    5,    4,    3,    3,    4,    1,    3,    5,
    1,    3,    2,    1,    0,    2,    3,    2,    2,    1,
    3,    3,    2,    2,    1,    1,    2,    1,    2,    1,
    2,    1,    2,    1,    2,    1,    1,    1,    2,    4,
    1,    3,    3,    2,    1,    1,    3,    7,    6,    6,
    6,    6,    1,    1,    3,    2,    2,    1,    2,    4,
    3,    3,    9,    8,    0,   17,    7,    6,    1,    2,
    8,   10,    1,    3,    1,    2,    3,    2,    2,    1,
    1,    1,    1,    1,    1,    3,    3,    1,    3,    3,
    1,    1,    1,    1,    3,    4,    1,    3,    1,    1,
    5,    5,    4,    4,    4,    4,    4,    4,    4,    1,
    2,    1,    1,
};
final static short yydefred[] = {                         0,
    6,    0,    0,    0,    0,    0,    0,    0,    0,    0,
  213,  212,    0,    0,    0,    7,    9,   10,   11,   12,
   13,   14,    0,    0,    0,  126,  130,    0,  128,  132,
  134,  146,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,  136,  137,  138,
    0,    0,    0,  127,  131,  129,  133,  135,    0,  119,
    0,    0,    2,    8,    0,   18,    0,   17,    0,    0,
    5,    0,    3,    0,  210,    0,  161,    0,    0,  191,
  193,  194,   19,  180,  181,  182,  183,  184,  185,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,  139,    0,  144,
  158,    0,    0,  157,  159,  124,    0,  117,    0,   15,
    0,    0,    0,    0,    0,   23,   26,    0,    0,   24,
   27,   28,   30,   32,   34,   36,    0,    0,  147,    1,
    0,  211,    0,    0,  160,    0,    0,    0,    0,    0,
  206,  204,  207,    0,  205,    0,  203,    0,    0,    0,
    0,  113,    0,    0,  116,    0,    0,    0,    0,  153,
  143,    0,  155,    0,    0,  122,  121,    0,    0,    0,
    0,    0,   75,   90,   76,    0,    0,   88,   91,   92,
    0,   29,   31,   33,   35,   37,   21,    0,   25,    0,
   40,    0,  199,  195,  200,    0,  197,    0,    0,  189,
  190,    0,    0,  202,  201,    0,   98,    0,    0,   97,
    0,    0,   96,    0,    0,    0,    0,  140,    0,    0,
    0,    0,    0,    0,  105,    0,   81,    0,    0,   87,
    0,    0,   89,    0,   22,   41,    0,    0,  196,    0,
  173,    0,   93,    0,  102,  101,    0,  100,    0,    0,
    0,  168,    0,  150,  152,    0,  151,    0,  107,    0,
    0,   80,    0,    0,    0,   83,   85,    0,    0,  198,
  175,    0,    0,    0,   94,    0,  110,  170,    0,    0,
    0,  148,    0,  103,    0,   78,   79,    0,    0,    0,
  174,  176,    0,  171,    0,  165,    0,  164,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,  112,
    0,  163,   51,   38,    0,    0,    0,    0,    0,    0,
    0,    0,   73,    0,    0,    0,    0,  172,    0,    0,
    0,   39,    0,   52,    0,   54,   53,    0,    0,    0,
   49,   50,    0,   72,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,   66,    0,    0,
    0,    0,   74,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,   42,   67,   68,    0,    0,    0,
    0,    0,    0,    0,   55,    0,    0,    0,   56,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,   58,
   43,    0,    0,   59,   44,   63,   64,    0,   45,   46,
    0,    0,    0,   65,    0,    0,    0,    0,    0,    0,
    0,  166,   61,   62,   57,    0,   60,    0,    0,    0,
   47,   48,    0,    0,    0,    0,    0,    0,    0,    0,
};
final static short yydgoto[] = {                          3,
    4,   15,  259,   17,   18,   19,   20,   21,   22,   23,
   24,   25,  351,  129,  130,  324,  132,  133,  134,  135,
  136,  325,  352,   90,  314,  186,  138,  187,  188,  189,
  190,  101,   91,  102,  287,  103,   61,   62,   29,   30,
   31,  115,   32,   52,   53,  260,  321,  252,  282,   92,
   79,   80,   81,   82,  206,  207,
};
final static short yysindex[] = {                       -85,
    0, 1287,    0,  -94,  -24,   33,  -39,  -35,   36,  740,
    0,    0,  442,  -41,  919,    0,    0,    0,    0,    0,
    0,    0,  -29,  -17,  -14,    0,    0,   74,    0,    0,
    0,    0,  942,  952,   56, -165,  555,   87,   96,  -27,
  -31,  -34,  132, -122,  130,  108,  512,    0,    0,    0,
    0,  -99, 1150,    0,    0,    0,    0,    0,  -61,    0,
  127,  168,    0,    0,  195,    0,  188,    0,  909,  -13,
    0,  976,    0,  228,    0,   12,    0,   60,   57,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,  235,
  294,   51,  220,  231,   -1,   39,  234,   11,  254,   42,
  276,  285,   76,  280,  305,   89,  311,    0,    5,    0,
    0, 1169,   73,    0,    0,    0,  100,    0,  114,    0,
  322,   20,  325,  224,  510,    0,    0,  251,  792,    0,
    0,    0,    0,    0,    0,    0,  253,  323,    0,    0,
   -4,    0,   51,   51,    0,   51,   51,  137,   51,  117,
    0,    0,    0,  329,    0,  347,    0,  352,  -76,   25,
  -76,    0,  354,  -76,    0,  -76,  356,  298, -102,    0,
    0,  366,    0,  732,  418,    0,    0,  555,   34,  170,
  555, 1186,    0,    0,    0,  187, 1097,    0,    0,    0,
  426,    0,    0,    0,    0,    0,    0,  344,    0,  348,
    0,  197,    0,    0,    0,    9,    0,   57,   57,    0,
    0,  542,  117,    0,    0,  -76,    0,  414,  -76,    0,
  -76,  430,    0,  -76, 1287,  357,  986,    0,  416,   65,
  423,  444,  427,  259,    0,  448,    0, 1114,  452,    0,
  368,  375,    0,  555,    0,    0,  224,   62,    0, -121,
    0,   98,    0,  -76,    0,    0,  -76,    0, 1287,  384,
 1287,    0,  385,    0,    0,  453,    0,  250,    0,  464,
  264,    0,  401,  402,  555,    0,    0,  489,  267,    0,
    0, 1257,  542,  474,    0,  499,    0,    0,  494,  429,
  497,    0,  398,    0,  443,    0,    0,  535,  316,  538,
    0,    0,  319,    0,  -76,    0,  521,    0,  574, 1167,
  320,  105,  321,  324, 1009,  526,  602,  555,  528,    0,
  342,    0,    0,    0, 1203,  529,  468,  534,  559,  -79,
  560,  -92,    0, 1167,  320,  321,  580,    0,  582,  358,
  500,    0,  501,    0, 1167,    0,    0,  584,  369, 1167,
    0,    0,  365,    0,  572,  527,  532, 1203,  592,  555,
  530,  120,  124,  640,  555,  640,  595,    0,  600,  601,
  536,  541,    0,  622, 1167,  759,  608,  782,  609,  544,
  550,  637,  573,  575,    0,    0,    0,  156,  161,  424,
 1213, 1167,  438,  440,    0, 1167,  445,  447,    0,  449,
  454,  446,  459,  461,  802,  821,  588,  463,  611,  612,
 1230,  646,  668, 1240,  680,  681,  682,  683,   75,  684,
  686, 1167, 1167, 1287,  687,  485,  490,  492,  631,    0,
    0,  495,  632,    0,    0,    0,    0, 1167,    0,    0,
 1259, 1276,  643,    0,  712,  719,  721,  518,  727,  537,
  640,    0,    0,    0,    0,  730,    0,  742,  691,  693,
    0,    0,  543,  549,  205,  262, 1167, 1167, 1310, 1310,
};
final static short yyrindex[] = {                         0,
    0,    0,    0,    0,  175,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
  564,  564,    0,  765, 1032, 1052,    0,    0,    0,    0,
 1131,    0,    0,    0,    0,    0,    0,    0,  531,    0,
  673,  613,    0,    0,  650,    0,  697,    0,    0,    0,
    0,  827,    0,  332,    0,    0,    0,  241,  176,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,  564,    0,  106,
    0,   31,    0,    0,    0,    0,    0,    0,    0,    0,
    0,  554,    0,    0,    0,    0,  579,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,   70,   71,
    0,    0,    0,  272,    0,  295,    0,    0,    0,    0,
    0,    0,    0,  564,    0,    0,    0,    0,    0,    0,
    0, 1075,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,  558,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,  370,  417,    0,
    0,    0,   79,    0,    0,  706,    0,    0,    0,    0,
    0,  107,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,  133,    0,    0,    0,  561,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,  710,    0,    0,  564,    0,  715,    0,
    0,    0,    0,    0,    0,  456,    0,    0,    0,  142,
    0,    0,  563,  567,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,  150,    0,    0,    0,    0,
  487,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,  564,    0,    0,    0,    0,    0,
  591,    0,  603,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,  840,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,  863,  886,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
};
final static short yygindex[] = {                         0,
    0,   52,  815,  -66,   14,    0,    0,    0,    0,  819,
  119,    0,   -7,    0, -113,  -42,   -2,    2, -106, -103,
 -100, 1193,  -43,  -20, 1144,  607,   44,  660, -144,   37,
   78,   -3,  345, -136,  545,    0,  745,    0,  854,  856,
  858,   61,  806,    0,  825, -159,    0,  598,    0,  793,
  291,  317, -107,    0,    0,  635,
};
final static int YYTABLESIZE=1661;
static short yytable[];
static { yytable();}
static void yytable(){
yytable = new short[]{                         26,
   40,   26,  127,   27,   42,   27,  104,   26,   98,   99,
   54,   27,   26,   97,   55,  199,   27,   60,  194,   36,
  227,  195,  107,   48,  196,  137,  131,  222,   33,   66,
   26,   26,  355,  205,   27,   27,  204,    2,  105,  154,
   76,   68,  243,  350,   26,   28,   49,   28,   27,  249,
   26,  158,  248,   28,   27,   34,   28,  153,   28,  179,
   48,  128,  127,  171,   76,  218,   48,  263,  159,   26,
   51,  108,   37,   27,  233,   43,   28,   28,   76,  156,
  185,  184,  219,   49,   72,  200,  131,   50,  108,   49,
   28,   65,  175,  243,  160,   76,   28,  155,  146,  288,
   76,  290,  143,  147,  144,  266,   76,  111,   69,   26,
  178,  179,  174,   27,   77,   28,  183,   76,  145,  177,
  286,  198,  192,  265,   50,   48,  193,   93,  178,  179,
   50,   70,   88,   89,   87,   44,   94,  177,    6,  184,
  205,   67,    7,  242,  184,   35,  114,  109,   49,  114,
    9,   10,  172,  230,   83,   28,   13,  232,  226,  143,
  236,  144,    5,  114,  109,    6,  110,  348,  286,    7,
    8,    1,  106,  122,  113,  188,   76,    9,   10,  241,
  348,   11,   12,   13,   14,  118,  122,  109,  108,   50,
  111,   88,   89,   87,  274,  184,  116,  438,  349,   11,
   12,  332,  194,  185,  184,  195,  117,  111,  196,   26,
  235,  119,  143,   27,  144,   59,  188,   38,  188,   39,
  188,   41,   26,  278,   26,  251,   27,   65,   27,   95,
  273,   96,  153,   20,  188,  188,  188,  188,   36,  183,
  162,   11,   12,   35,   11,   12,  120,   26,  127,  313,
  312,   27,  203,   75,  298,   28,   26,  106,   26,   10,
   27,  170,   27,  281,  443,  323,  104,  141,   28,  142,
   28,  209,  131,  336,  312,  148,   74,   75,  151,   26,
   26,  343,  342,   27,   27,  311,   11,   12,  357,  152,
   74,   75,  157,   28,  208,  302,  251,  337,  162,  270,
  188,  143,   28,  144,   28,  323,  192,   74,   75,  335,
  193,  161,   74,   75,  372,  342,  163,  341,  203,   75,
  381,  342,  384,  342,  356,   28,   28,  467,  164,   74,
   75,  192,  165,  393,  348,  397,  143,  166,  144,  374,
  122,   84,   85,   86,  382,  167,  182,  410,  342,  168,
  371,  169,  349,   88,   89,   87,  380,  176,  383,  283,
  284,  178,  393,  397,  181,  162,  327,  328,  342,  186,
   59,  342,  192,  192,  192,  197,  192,  201,  192,   78,
  202,  376,  377,  409,  468,  378,  379,  214,   74,   75,
  192,  192,  192,  192,  106,  106,  209,  212,  342,  342,
   84,   85,   86,  104,  104,  215,  106,  460,  342,  216,
  186,  221,  186,  224,  186,  104,  187,  405,  377,  208,
  225,   26,  406,  379,  228,   27,  342,  342,  186,  186,
  186,  186,  188,  208,  209,  188,  150,  188,  188,  188,
  188,  188,  188,  459,  188,  188,  188,  188,  188,  188,
  188,  188,  188,  188,  188,  149,  192,  187,  231,  187,
  239,  187,  210,  211,  348,  244,  180,   28,  245,  247,
  122,  254,  246,  257,  264,  187,  187,  187,  187,  261,
   44,  267,  349,  121,  268,  269,  167,    7,  271,  122,
   45,  275,  276,  213,  186,  123,  124,  162,   46,  277,
  162,  125,  162,  162,  162,  162,  162,  162,  289,  291,
  293,  292,  162,  162,  162,  162,  162,  162,  162,  162,
  310,  348,  294,  234,  295,  296,  297,  122,  209,  299,
  125,  209,  304,  209,  209,  209,  209,  209,  209,  349,
  300,  187,  305,  209,  209,  209,  209,  209,  209,  209,
  209,  208,  306,  307,  208,  308,  208,  208,  208,  208,
  208,  208,   84,   85,   86,  315,  208,  208,  208,  208,
  208,  208,  208,  208,  125,  316,  317,  318,  123,  322,
  149,  319,  326,  329,  333,  330,  338,  344,  192,  125,
  345,  192,  346,  192,  192,  192,  192,  192,  192,   76,
  192,  192,  192,  192,  192,  192,  192,  192,  192,  192,
  192,  167,  120,  339,   88,   89,   87,  347,  354,  361,
  359,  360,  123,  365,  362,  363,  186,  367,  348,  186,
  368,  186,  186,  186,  186,  186,  186,  123,  186,  186,
  186,  186,  186,  186,  186,  186,  186,  186,  186,   20,
  373,  369,  375,  385,   44,  125,  370,  121,  386,  387,
  388,    7,  390,  122,  250,  389,  395,  399,  400,  123,
  124,  120,  118,  187,  401,  309,  187,  402,  187,  187,
  187,  187,  187,  187,  407,  187,  187,  187,  187,  187,
  187,  187,  187,  187,  187,  187,   16,  403,   44,  404,
  412,    6,  413,  123,  430,    7,  419,  415,   20,  416,
  424,  417,  149,    9,   10,  149,  418,  149,  149,  149,
  149,  420,  149,  421,  334,  425,  431,  149,  149,  149,
  149,  149,  149,  149,  149,  426,  427,  120,  434,  435,
  436,  437,  439,  167,  440,  444,  167,  445,  167,  167,
  167,  167,  446,  167,  447,  448,  450,  449,  167,  167,
  167,  167,  167,  167,  167,  167,   44,  452,   44,  191,
  453,    6,  229,    7,   20,    7,   76,  454,   45,  455,
  456,  123,  124,    9,   10,  457,   46,  125,  461,   13,
  125,   88,   89,   87,  125,  125,  125,  118,   44,  458,
  462,    6,  125,  125,  465,    7,  125,  125,  125,  125,
  466,   74,   75,    9,   10,  463,   16,  464,   16,   13,
  115,   16,  153,   84,   85,   86,    4,  156,   95,   64,
   44,   77,   99,  121,   86,  123,   82,    7,  123,  169,
   84,  238,  123,  123,  123,  123,  124,   16,   64,  320,
  123,  123,   49,  279,  123,  123,  123,  123,   44,  100,
  100,  121,   47,  177,   50,    7,   56,  122,   57,  120,
   58,  112,  120,  123,  124,  139,  120,  120,  120,  125,
  303,  392,  280,  149,  120,  120,   64,    0,  120,  120,
  120,  120,    0,    0,    0,    0,   44,    0,    0,  121,
    0,    0,    0,    7,  396,  122,   20,    0,    0,   20,
    0,  123,  124,   20,   20,   20,  100,  125,    0,    0,
    0,   20,   20,    0,  422,   20,   20,   20,   20,  118,
    0,    0,  118,    0,    0,    0,  118,  118,  118,    0,
    0,    0,    0,  423,  118,  118,    0,    0,  118,  118,
  118,  118,    0,   16,    0,    0,   16,    0,    0,    0,
   16,   16,   16,    0,   69,    0,    0,    0,   16,   16,
    0,    0,   16,   16,   16,   16,    0,  217,    0,  220,
    0,    0,  100,    0,  223,    0,    0,   70,   74,   75,
    0,    0,    0,    0,    0,    0,   44,    0,    0,    6,
   84,   85,   86,    7,    0,    0,   45,    0,    0,    0,
   71,    9,   10,    0,   46,   44,    0,   13,  121,    0,
    0,    0,    7,    0,  122,    0,    0,    0,    0,    0,
  123,  124,    0,  126,  253,    0,  309,  255,   44,  256,
    0,  121,  258,   63,    0,    7,    0,  122,    5,    0,
    0,  121,    0,  123,  124,    7,    8,  122,   44,  309,
    0,  191,    0,  123,  124,    7,   71,   11,   12,  125,
   14,    0,  285,  123,  124,  100,   73,   44,    0,  125,
  191,    0,    0,    0,    7,    0,    0,    0,    0,    0,
    0,    0,  123,  124,    0,    0,   69,    0,  125,   69,
  140,   69,   69,   69,   69,   69,   69,    0,    0,    0,
  262,   69,   69,   69,   69,   69,   69,   69,   69,   70,
    0,    0,   70,  100,   70,   70,   70,   70,   70,   70,
    0,    0,    0,  331,   70,   70,   70,   70,   70,   70,
   70,   70,   71,    0,    0,   71,    0,   71,   71,   71,
   71,   71,   71,    0,    0,    0,  141,   71,   71,   71,
   71,   71,   71,   71,   71,    5,    0,    0,  121,    0,
    0,    0,    7,    8,  122,    5,  145,    0,    6,    0,
  123,  124,    7,    8,   11,   12,  125,   14,    0,    0,
    9,   10,    0,    0,   11,   12,   13,   14,    5,  142,
    0,    6,    0,    0,    0,    7,    8,    0,    5,    0,
    0,    6,    0,    9,   10,    7,    8,   11,   12,   13,
   14,  240,    0,    9,   10,    0,    0,   11,   12,   13,
   14,    0,    5,    0,    0,    6,    0,    0,  272,    7,
    8,    0,    5,    0,    0,    6,    0,    9,   10,    7,
    8,   11,   12,   13,   14,  158,    0,    9,   10,    0,
    0,   11,   12,   13,   14,    5,    0,    0,  191,    0,
    0,    0,    7,    8,  114,    0,    0,    0,    0,    0,
  123,  124,    0,    0,   11,   12,  125,   14,  141,    0,
    0,  141,    0,  173,    0,  141,    0,  141,  141,    0,
    0,    0,    0,  141,  141,  141,  141,    0,  145,  141,
  237,  145,    0,    0,    0,  145,    0,  145,  145,    0,
    0,    0,    0,  145,  145,  145,  145,  340,    0,  145,
    0,  142,    0,    0,  142,    0,    0,  408,  142,    0,
  142,  142,    0,    0,    0,    0,  142,  142,  142,  142,
    0,    0,  142,   44,  428,    0,  121,    0,    0,    0,
    7,    0,  122,   45,  432,    0,    0,    0,  123,  124,
   44,   46,    0,  121,  125,    0,    0,    7,    0,  122,
   45,  301,    0,  428,    0,  123,  124,  158,   46,    0,
  158,  125,    0,    0,  158,    0,    0,  158,    0,    0,
  432,    0,  158,  158,  154,  158,   44,    0,  158,    6,
    0,    0,    0,    7,    0,    0,   45,    0,    0,    0,
    0,    9,   10,   44,   46,   44,  191,   13,    6,    0,
    7,    0,    7,    0,    0,   45,    0,    0,  123,  124,
    9,   10,   44,   46,  125,  191,   13,    0,    0,    7,
    0,    0,   45,    0,    0,    0,    0,  123,  124,   44,
   46,    0,  121,  125,    0,    0,    7,    0,  122,   44,
    0,    0,  121,  353,  123,  124,    7,    0,  122,    0,
  125,    0,    0,    0,  123,  124,   44,    0,    0,  121,
  125,    0,    0,    7,    0,  122,   44,    0,    0,  121,
    0,  123,  124,    7,    0,  122,    0,  309,    0,    0,
    0,  123,  124,   44,    0,   44,    6,  309,  191,  394,
    7,  398,    7,    0,    0,    0,  358,    0,    9,   10,
  123,  124,   44,    0,   13,  191,  125,  364,    0,    7,
    0,    0,  366,    5,    0,    0,    6,  123,  124,    0,
    7,    8,    0,  125,  429,    0,    0,  433,    9,   10,
    0,    0,   11,   12,   13,   14,   44,  391,    0,  121,
    0,    0,    0,    7,    0,  122,    0,    0,    0,    0,
    0,  123,  124,    0,  411,    0,    0,  309,  414,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,  394,  398,
    0,    0,  429,  433,  441,  442,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
  451,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,  469,
  470,
};
}
static short yycheck[];
static { yycheck(); }
static void yycheck() {
yycheck = new short[] {                          2,
   40,    4,   69,    2,   40,    4,   41,   10,   40,   41,
   13,   10,   15,   41,   13,  129,   15,   59,  125,   44,
  123,  125,   43,   10,  125,   69,   69,  164,  123,   59,
   33,   34,  125,  141,   33,   34,   41,  123,   42,   41,
   45,   59,  187,  123,   47,    2,   10,    4,   47,   41,
   53,   41,   44,   10,   53,    4,   13,   59,   15,   40,
   47,   69,  129,   59,   45,   41,   53,  227,   58,   72,
   10,   41,   40,   72,   41,   40,   33,   34,   45,   41,
  124,  124,   58,   47,   33,  129,  129,   10,   58,   53,
   47,  257,  113,  238,   98,   45,   53,   59,   42,  259,
   45,  261,   43,   47,   45,   41,   45,   47,  123,  112,
   41,   41,   40,  112,   59,   72,  124,   45,   59,   41,
  257,  129,  125,   59,   47,  112,  125,   41,   59,   59,
   53,   58,   60,   61,   62,  257,   41,   59,  260,  182,
  248,   23,  264,  187,  187,  268,   41,   41,  112,   44,
  272,  273,  109,  174,   36,  112,  278,  178,  261,   43,
  181,   45,  257,   58,   58,  260,   59,  260,  305,  264,
  265,  257,   41,  266,  274,    0,   45,  272,  273,  187,
  260,  276,  277,  278,  279,   59,  266,   58,   59,  112,
   41,   60,   61,   62,  238,  238,  258,  123,  278,  276,
  277,  315,  309,  247,  247,  309,  268,   58,  309,  212,
   41,   44,   43,  212,   45,  257,   41,  257,   43,  259,
   45,  257,  225,  244,  227,  212,  225,  257,  227,  257,
  238,  259,   58,   59,   59,   60,   61,   62,   44,  247,
    0,  276,  277,  268,  276,  277,   59,  250,  315,  293,
  293,  250,  257,  258,  275,  212,  259,  125,  261,  273,
  259,  257,  261,  250,  424,  309,  125,   40,  225,  258,
  227,    0,  315,  317,  317,   41,  257,  258,   59,  282,
  283,  325,  325,  282,  283,  293,  276,  277,  332,   59,
  257,  258,   59,  250,    0,  282,  283,  318,  257,   41,
  125,   43,  259,   45,  261,  349,  309,  257,  258,  317,
  309,   58,  257,  258,  358,  358,   41,  325,  257,  258,
  364,  364,  366,  366,  332,  282,  283,  123,   44,  257,
  258,    0,  257,  376,  260,  378,   43,   58,   45,  360,
  266,  269,  270,  271,  365,   41,  123,  391,  391,  261,
  358,   41,  278,   60,   61,   62,  364,  258,  366,  262,
  263,   40,  405,  406,   40,  125,  262,  263,  411,    0,
  257,  414,   41,   42,   43,  125,   45,  125,   47,   35,
   58,  262,  263,  391,  123,  262,  263,   59,  257,  258,
   59,   60,   61,   62,  262,  263,  125,  261,  441,  442,
  269,  270,  271,  262,  263,   59,  274,  451,  451,   58,
   41,   58,   43,   58,   45,  274,    0,  262,  263,  125,
  123,  424,  262,  263,   59,  424,  469,  470,   59,   60,
   61,   62,  257,  143,  144,  260,   92,  262,  263,  264,
  265,  266,  267,  451,  269,  270,  271,  272,  273,  274,
  275,  276,  277,  278,  279,    0,  125,   41,   41,   43,
  274,   45,  146,  147,  260,   40,  122,  424,  125,  273,
  266,   58,  125,   44,   59,   59,   60,   61,   62,  123,
  257,   59,  278,  260,   41,   59,    0,  264,   41,  266,
  267,   40,  125,  149,  125,  272,  273,  257,  275,  125,
  260,  278,  262,  263,  264,  265,  266,  267,  125,  125,
  261,   59,  272,  273,  274,  275,  276,  277,  278,  279,
  123,  260,   59,  179,  261,  125,  125,  266,  257,   41,
    0,  260,   59,  262,  263,  264,  265,  266,  267,  278,
  274,  125,   44,  272,  273,  274,  275,  276,  277,  278,
  279,  257,   59,  125,  260,   59,  262,  263,  264,  265,
  266,  267,  269,  270,  271,  123,  272,  273,  274,  275,
  276,  277,  278,  279,   44,   41,  261,   40,    0,   59,
  125,  263,  263,  263,   59,  262,   59,   59,  257,   59,
  123,  260,   59,  262,  263,  264,  265,  266,  267,   45,
  269,  270,  271,  272,  273,  274,  275,  276,  277,  278,
  279,  125,    0,  272,   60,   61,   62,   59,   59,  262,
   41,   40,   44,   40,  125,  125,  257,  263,  260,  260,
   59,  262,  263,  264,  265,  266,  267,   59,  269,  270,
  271,  272,  273,  274,  275,  276,  277,  278,  279,    0,
   59,  125,  123,   59,  257,  125,  125,  260,   59,   59,
  125,  264,   41,  266,  123,  125,   59,   59,  125,  272,
  273,   59,    0,  257,  125,  278,  260,   41,  262,  263,
  264,  265,  266,  267,  261,  269,  270,  271,  272,  273,
  274,  275,  276,  277,  278,  279,    0,  125,  257,  125,
  263,  260,  263,  125,   59,  264,  261,  263,   59,  263,
  123,  263,  257,  272,  273,  260,  263,  262,  263,  264,
  265,  263,  267,  263,  123,  263,   59,  272,  273,  274,
  275,  276,  277,  278,  279,  125,  125,  125,   59,   59,
   59,   59,   59,  257,   59,   59,  260,  263,  262,  263,
  264,  265,  263,  267,  263,  125,  125,  263,  272,  273,
  274,  275,  276,  277,  278,  279,  257,  125,  257,  260,
   59,  260,   41,  264,  125,  264,   45,   59,  267,   59,
  263,  272,  273,  272,  273,   59,  275,  257,   59,  278,
  260,   60,   61,   62,  264,  265,  266,  125,  257,  263,
   59,  260,  272,  273,  262,  264,  276,  277,  278,  279,
  262,  257,  258,  272,  273,  125,    2,  125,    4,  278,
  257,  125,   58,  269,  270,  271,    0,  274,  123,   15,
  257,  274,  123,  260,  274,  257,  274,  264,  260,  125,
  274,  182,  264,  265,  266,  272,  273,   33,   34,  305,
  272,  273,  262,  247,  276,  277,  278,  279,  257,   41,
   42,  260,  123,  119,  262,  264,   13,  266,   13,  257,
   13,   47,  260,  272,  273,   70,  264,  265,  266,  278,
  283,  123,  248,   91,  272,  273,   72,   -1,  276,  277,
  278,  279,   -1,   -1,   -1,   -1,  257,   -1,   -1,  260,
   -1,   -1,   -1,  264,  123,  266,  257,   -1,   -1,  260,
   -1,  272,  273,  264,  265,  266,   98,  278,   -1,   -1,
   -1,  272,  273,   -1,  123,  276,  277,  278,  279,  257,
   -1,   -1,  260,   -1,   -1,   -1,  264,  265,  266,   -1,
   -1,   -1,   -1,  123,  272,  273,   -1,   -1,  276,  277,
  278,  279,   -1,  257,   -1,   -1,  260,   -1,   -1,   -1,
  264,  265,  266,   -1,  125,   -1,   -1,   -1,  272,  273,
   -1,   -1,  276,  277,  278,  279,   -1,  159,   -1,  161,
   -1,   -1,  164,   -1,  166,   -1,   -1,  125,  257,  258,
   -1,   -1,   -1,   -1,   -1,   -1,  257,   -1,   -1,  260,
  269,  270,  271,  264,   -1,   -1,  267,   -1,   -1,   -1,
  125,  272,  273,   -1,  275,  257,   -1,  278,  260,   -1,
   -1,   -1,  264,   -1,  266,   -1,   -1,   -1,   -1,   -1,
  272,  273,   -1,  125,  216,   -1,  278,  219,  257,  221,
   -1,  260,  224,  125,   -1,  264,   -1,  266,  257,   -1,
   -1,  260,   -1,  272,  273,  264,  265,  266,  257,  278,
   -1,  260,   -1,  272,  273,  264,  125,  276,  277,  278,
  279,   -1,  254,  272,  273,  257,  125,  257,   -1,  278,
  260,   -1,   -1,   -1,  264,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,  272,  273,   -1,   -1,  257,   -1,  278,  260,
  125,  262,  263,  264,  265,  266,  267,   -1,   -1,   -1,
  125,  272,  273,  274,  275,  276,  277,  278,  279,  257,
   -1,   -1,  260,  305,  262,  263,  264,  265,  266,  267,
   -1,   -1,   -1,  125,  272,  273,  274,  275,  276,  277,
  278,  279,  257,   -1,   -1,  260,   -1,  262,  263,  264,
  265,  266,  267,   -1,   -1,   -1,  125,  272,  273,  274,
  275,  276,  277,  278,  279,  257,   -1,   -1,  260,   -1,
   -1,   -1,  264,  265,  266,  257,  125,   -1,  260,   -1,
  272,  273,  264,  265,  276,  277,  278,  279,   -1,   -1,
  272,  273,   -1,   -1,  276,  277,  278,  279,  257,  125,
   -1,  260,   -1,   -1,   -1,  264,  265,   -1,  257,   -1,
   -1,  260,   -1,  272,  273,  264,  265,  276,  277,  278,
  279,  125,   -1,  272,  273,   -1,   -1,  276,  277,  278,
  279,   -1,  257,   -1,   -1,  260,   -1,   -1,  125,  264,
  265,   -1,  257,   -1,   -1,  260,   -1,  272,  273,  264,
  265,  276,  277,  278,  279,  125,   -1,  272,  273,   -1,
   -1,  276,  277,  278,  279,  257,   -1,   -1,  260,   -1,
   -1,   -1,  264,  265,  125,   -1,   -1,   -1,   -1,   -1,
  272,  273,   -1,   -1,  276,  277,  278,  279,  257,   -1,
   -1,  260,   -1,  125,   -1,  264,   -1,  266,  267,   -1,
   -1,   -1,   -1,  272,  273,  274,  275,   -1,  257,  278,
  125,  260,   -1,   -1,   -1,  264,   -1,  266,  267,   -1,
   -1,   -1,   -1,  272,  273,  274,  275,  125,   -1,  278,
   -1,  257,   -1,   -1,  260,   -1,   -1,  125,  264,   -1,
  266,  267,   -1,   -1,   -1,   -1,  272,  273,  274,  275,
   -1,   -1,  278,  257,  125,   -1,  260,   -1,   -1,   -1,
  264,   -1,  266,  267,  125,   -1,   -1,   -1,  272,  273,
  257,  275,   -1,  260,  278,   -1,   -1,  264,   -1,  266,
  267,  125,   -1,  125,   -1,  272,  273,  257,  275,   -1,
  260,  278,   -1,   -1,  264,   -1,   -1,  267,   -1,   -1,
  125,   -1,  272,  273,  274,  275,  257,   -1,  278,  260,
   -1,   -1,   -1,  264,   -1,   -1,  267,   -1,   -1,   -1,
   -1,  272,  273,  257,  275,  257,  260,  278,  260,   -1,
  264,   -1,  264,   -1,   -1,  267,   -1,   -1,  272,  273,
  272,  273,  257,  275,  278,  260,  278,   -1,   -1,  264,
   -1,   -1,  267,   -1,   -1,   -1,   -1,  272,  273,  257,
  275,   -1,  260,  278,   -1,   -1,  264,   -1,  266,  257,
   -1,   -1,  260,  330,  272,  273,  264,   -1,  266,   -1,
  278,   -1,   -1,   -1,  272,  273,  257,   -1,   -1,  260,
  278,   -1,   -1,  264,   -1,  266,  257,   -1,   -1,  260,
   -1,  272,  273,  264,   -1,  266,   -1,  278,   -1,   -1,
   -1,  272,  273,  257,   -1,  257,  260,  278,  260,  376,
  264,  378,  264,   -1,   -1,   -1,  334,   -1,  272,  273,
  272,  273,  257,   -1,  278,  260,  278,  345,   -1,  264,
   -1,   -1,  350,  257,   -1,   -1,  260,  272,  273,   -1,
  264,  265,   -1,  278,  411,   -1,   -1,  414,  272,  273,
   -1,   -1,  276,  277,  278,  279,  257,  375,   -1,  260,
   -1,   -1,   -1,  264,   -1,  266,   -1,   -1,   -1,   -1,
   -1,  272,  273,   -1,  392,   -1,   -1,  278,  396,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,  465,  466,
   -1,   -1,  469,  470,  422,  423,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
  438,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,  467,
  468,
};
}
final static short YYFINAL=3;
final static short YYMAXTOKEN=279;
final static String yyname[] = {
"end-of-file",null,null,null,null,null,null,null,null,null,null,null,null,null,
null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,
null,null,null,null,null,null,null,null,null,null,"'('","')'","'*'","'+'","','",
"'-'",null,"'/'",null,null,null,null,null,null,null,null,null,null,"':'","';'",
"'<'","'='","'>'",null,null,null,null,null,null,null,null,null,null,null,null,
null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,
null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,
null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,
"'{'",null,"'}'",null,null,null,null,null,null,null,null,null,null,null,null,
null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,
null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,
null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,
null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,
null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,
null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,
null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,
null,null,null,null,null,null,null,"ID","CTE","CADENA","IF","THEN","ELSE",
"ENDIF","OUT","FUN","RETURN","BREAK","ASIGNACION","COMP_MAYOR_IGUAL",
"COMP_MENOR_IGUAL","COMP_DISTINTO","WHEN","DO","UNTIL","CONTINUE","DOUBLE64",
"UINT16","DEFER","CONST",
};
final static String yyrule[] = {
"$accept : programa",
"programa : nombre_programa '{' sentencias '}'",
"programa : '{' sentencias '}'",
"programa : nombre_programa sentencias '}'",
"programa : nombre_programa '{' sentencias",
"programa : nombre_programa '{' '}'",
"nombre_programa : ID",
"sentencias : sentencia",
"sentencias : sentencias sentencia",
"sentencia : sentencia_declarativa",
"sentencia : sentencia_ejecutable",
"sentencia_declarativa : sentencia_declarativa_variables",
"sentencia_declarativa : funcion_con_return",
"sentencia_declarativa : funcion_sin_return",
"sentencia_declarativa : declaracion_constantes",
"sentencia_declarativa_variables : tipo lista_de_variables ';'",
"sentencia_declarativa_variables : tipo lista_de_variables",
"sentencia_declarativa_variables : lista_de_variables ';'",
"sentencia_declarativa_variables : tipo ';'",
"lista_de_variables : ID ',' lista_de_variables",
"lista_de_variables : ID",
"funcion_con_return : encabezado_funcion '{' sentencia_return '}'",
"funcion_con_return : encabezado_funcion '{' sentencias_funcion sentencia_return '}'",
"funcion_con_return : encabezado_funcion '{' '}'",
"sentencias_funcion : sentencia_funcion",
"sentencias_funcion : sentencias_funcion sentencia_funcion",
"sentencia_funcion : sentencia_declarativa",
"sentencia_funcion : sentencia_ejecutable_funcion",
"sentencia_ejecutable_funcion : asignacion",
"sentencia_ejecutable_funcion : DEFER asignacion",
"sentencia_ejecutable_funcion : imprimir",
"sentencia_ejecutable_funcion : DEFER imprimir",
"sentencia_ejecutable_funcion : sentencia_when_con_return",
"sentencia_ejecutable_funcion : DEFER sentencia_when_con_return",
"sentencia_ejecutable_funcion : sentencia_do_con_return",
"sentencia_ejecutable_funcion : DEFER sentencia_do_con_return",
"sentencia_ejecutable_funcion : sentencia_seleccion_simple_con_return",
"sentencia_ejecutable_funcion : DEFER sentencia_seleccion_simple_con_return",
"sentencias_ejecutables_funcion : sentencia_ejecutable_funcion",
"sentencias_ejecutables_funcion : sentencias_ejecutables_funcion sentencia_ejecutable_funcion",
"funcion_sin_return : encabezado_funcion '{' sentencia_seleccion_compuesta_con_return '}'",
"funcion_sin_return : encabezado_funcion '{' sentencias_funcion sentencia_seleccion_compuesta_con_return '}'",
"sentencia_seleccion_compuesta_con_return : IF '(' condicion ')' THEN sentencia_seleccion_compuesta_con_return_simple ELSE sentencia_seleccion_compuesta_con_return_simple ENDIF ';'",
"sentencia_seleccion_compuesta_con_return : IF '(' condicion ')' THEN '{' sentencias_ejecutables_funcion sentencia_return '}' ELSE sentencia_seleccion_compuesta_con_return_simple ENDIF ';'",
"sentencia_seleccion_compuesta_con_return : IF '(' condicion ')' THEN '{' sentencias_ejecutables_funcion sentencia_seleccion_compuesta_con_return '}' ELSE sentencia_seleccion_compuesta_con_return_simple ENDIF ';'",
"sentencia_seleccion_compuesta_con_return : IF '(' condicion ')' THEN sentencia_seleccion_compuesta_con_return_simple ELSE '{' sentencias_ejecutables_funcion sentencia_return '}' ENDIF ';'",
"sentencia_seleccion_compuesta_con_return : IF '(' condicion ')' THEN sentencia_seleccion_compuesta_con_return_simple ELSE '{' sentencias_ejecutables_funcion sentencia_seleccion_compuesta_con_return '}' ENDIF ';'",
"sentencia_seleccion_compuesta_con_return : IF '(' condicion ')' THEN '{' sentencias_ejecutables_funcion sentencia_return '}' ELSE '{' sentencias_ejecutables_funcion sentencia_seleccion_compuesta_con_return_simple '}' ENDIF ';'",
"sentencia_seleccion_compuesta_con_return : IF '(' condicion ')' THEN '{' sentencias_ejecutables_funcion sentencia_seleccion_compuesta_con_return '}' ELSE '{' sentencias_ejecutables_funcion sentencia_seleccion_compuesta_con_return_simple '}' ENDIF ';'",
"sentencia_seleccion_compuesta_con_return_simple : sentencia_return",
"sentencia_seleccion_compuesta_con_return_simple : sentencia_seleccion_compuesta_con_return",
"sentencia_seleccion_compuesta_con_return_simple : DEFER sentencia_seleccion_compuesta_con_return",
"sentencia_seleccion_simple_con_return : IF '(' condicion ')' THEN sentencia_return ENDIF ';'",
"sentencia_seleccion_simple_con_return : IF '(' condicion ')' THEN sentencia_seleccion_compuesta_con_return ENDIF ';'",
"sentencia_seleccion_simple_con_return : IF '(' condicion ')' THEN sentencia_ejecutable_funcion ENDIF ';'",
"sentencia_seleccion_simple_con_return : IF '(' condicion ')' THEN '{' sentencias_ejecutables_funcion sentencia_return '}' ENDIF ';'",
"sentencia_seleccion_simple_con_return : IF '(' condicion ')' THEN '{' sentencias_ejecutables_funcion sentencia_seleccion_compuesta_con_return '}' ENDIF ';'",
"sentencia_seleccion_simple_con_return : IF '(' condicion ')' THEN '{' sentencias_ejecutables_funcion sentencia_return '}' ELSE '{' sentencias_ejecutables_funcion '}' ENDIF ';'",
"sentencia_seleccion_simple_con_return : IF '(' condicion ')' THEN '{' sentencias_ejecutables_funcion sentencia_return '}' ELSE sentencia_ejecutable_funcion ENDIF ';'",
"sentencia_seleccion_simple_con_return : IF '(' condicion ')' THEN '{' sentencias_ejecutables_funcion sentencia_seleccion_compuesta_con_return '}' ELSE sentencia_ejecutable_funcion ENDIF ';'",
"sentencia_seleccion_simple_con_return : IF '(' condicion ')' THEN '{' sentencias_ejecutables_funcion sentencia_seleccion_compuesta_con_return '}' ELSE '{' sentencias_ejecutables_funcion '}' ENDIF ';'",
"sentencia_seleccion_simple_con_return : IF '(' condicion ')' THEN '{' sentencias_ejecutables_funcion '}' ELSE '{' sentencias_ejecutables_funcion sentencia_return '}' ENDIF ';'",
"sentencia_seleccion_simple_con_return : IF '(' condicion ')' THEN '{' sentencias_ejecutables_funcion '}' ELSE '{' sentencias_ejecutables_funcion sentencia_seleccion_compuesta_con_return '}' ENDIF ';'",
"sentencia_seleccion_simple_con_return : IF '(' condicion ')' THEN sentencia_ejecutable_funcion ELSE '{' sentencias_ejecutables_funcion sentencia_return '}' ENDIF ';'",
"sentencia_seleccion_simple_con_return : IF '(' condicion ')' THEN sentencia_ejecutable_funcion ELSE '{' sentencias_ejecutables_funcion sentencia_seleccion_compuesta_con_return '}' ENDIF ';'",
"sentencia_seleccion_simple_con_return : IF '(' condicion ')' THEN '{' sentencias_ejecutables_funcion '}' ELSE '{' sentencias_ejecutables_funcion '}' ENDIF ';'",
"sentencia_when_con_return : WHEN '(' condicion ')' THEN '{' sentencia_funcion '}' ';'",
"sentencia_when_con_return : WHEN '(' condicion ')' THEN '{' sentencia_funcion sentencia_return '}' ';'",
"sentencia_when_con_return : WHEN '(' condicion ')' THEN '{' sentencia_funcion sentencia_seleccion_compuesta_con_return '}' ';'",
"sentencia_when_con_return : WHEN '(' condicion ')' THEN '{' sentencia_funcion '}'",
"sentencia_when_con_return : WHEN '(' condicion ')' THEN '{' sentencia_funcion sentencia_return '}'",
"sentencia_when_con_return : WHEN '(' condicion ')' THEN '{' sentencia_funcion sentencia_seleccion_compuesta_con_return '}'",
"sentencia_when_con_return : WHEN '(' condicion ')' THEN '{' '}' ';'",
"sentencia_do_con_return : DO bloque_sentencias_ejecutables_do_con_return UNTIL '(' condicion ')' ';'",
"sentencia_do_con_return : etiqueta ':' DO bloque_sentencias_ejecutables_do_con_return UNTIL '(' condicion ')' ';'",
"bloque_sentencias_ejecutables_do_con_return : sentencia_return",
"bloque_sentencias_ejecutables_do_con_return : sentencia_seleccion_compuesta_con_return",
"bloque_sentencias_ejecutables_do_con_return : sentencias_ejecutables_do_funcion",
"bloque_sentencias_ejecutables_do_con_return : '{' sentencias_ejecutables_do_funcion sentencia_return '}'",
"bloque_sentencias_ejecutables_do_con_return : '{' sentencias_ejecutables_do_funcion sentencia_seleccion_compuesta_con_return '}'",
"bloque_sentencias_ejecutables_do_con_return : '{' sentencias_ejecutables_do_funcion '}'",
"bloque_sentencias_ejecutables_do_con_return : '{' '}'",
"bloque_sentencias_ejecutables_do_con_return : '{' sentencias_ejecutables_do_funcion sentencia_return",
"bloque_sentencias_ejecutables_do_con_return : sentencias_ejecutables_do_funcion sentencia_return '}'",
"bloque_sentencias_ejecutables_do_con_return : '{' sentencias_ejecutables_do_funcion sentencia_seleccion_compuesta_con_return",
"bloque_sentencias_ejecutables_do_con_return : sentencias_ejecutables_do_funcion sentencia_seleccion_compuesta_con_return '}'",
"bloque_sentencias_ejecutables_do_con_return : '{' sentencias_ejecutables_do_funcion",
"bloque_sentencias_ejecutables_do_con_return : sentencias_ejecutables_do_funcion '}'",
"sentencias_ejecutables_do_funcion : sentencia_ejecutable_do_funcion",
"sentencias_ejecutables_do_funcion : sentencias_ejecutables_do_funcion sentencia_ejecutable_do_funcion",
"sentencia_ejecutable_do_funcion : sentencia_ejecutable_funcion",
"sentencia_ejecutable_do_funcion : sentencia_break",
"sentencia_ejecutable_do_funcion : sentencia_continue",
"encabezado_funcion : FUN ID '(' ')' ':' tipo",
"encabezado_funcion : FUN ID '(' lista_de_parametros ')' ':' tipo",
"encabezado_funcion : FUN ID '(' ')' ':'",
"encabezado_funcion : FUN '(' ')' ':' tipo",
"encabezado_funcion : FUN ID ')' ':' tipo",
"encabezado_funcion : FUN ID '(' ':' tipo",
"encabezado_funcion : FUN ID '(' lista_de_parametros ')' ':'",
"encabezado_funcion : FUN '(' lista_de_parametros ')' ':' tipo",
"encabezado_funcion : FUN ID lista_de_parametros ')' ':' tipo",
"encabezado_funcion : FUN ID '(' lista_de_parametros ':' tipo",
"sentencia_return : RETURN '(' expresion ')' ';'",
"sentencia_return : RETURN '(' expresion ')'",
"sentencia_return : RETURN expresion ')'",
"sentencia_return : RETURN '(' expresion",
"sentencia_return : RETURN '(' ')' ';'",
"lista_de_parametros : parametro",
"lista_de_parametros : parametro ',' parametro",
"lista_de_parametros : parametro ',' parametro ',' lista_parametros_exceso",
"lista_parametros_exceso : parametro",
"lista_parametros_exceso : parametro ',' lista_parametros_exceso",
"parametro : tipo ID",
"parametro : tipo",
"$$1 :",
"parametro : $$1 ID",
"declaracion_constantes : CONST lista_declaracion_constantes ';'",
"declaracion_constantes : CONST lista_declaracion_constantes",
"declaracion_constantes : CONST ';'",
"lista_declaracion_constantes : declaracion_constante",
"lista_declaracion_constantes : declaracion_constante ',' lista_declaracion_constantes",
"declaracion_constante : ID ASIGNACION CTE",
"declaracion_constante : ID ASIGNACION",
"declaracion_constante : ID CTE",
"declaracion_constante : ID",
"sentencia_ejecutable : asignacion",
"sentencia_ejecutable : DEFER asignacion",
"sentencia_ejecutable : seleccion",
"sentencia_ejecutable : DEFER seleccion",
"sentencia_ejecutable : imprimir",
"sentencia_ejecutable : DEFER imprimir",
"sentencia_ejecutable : sentencia_when",
"sentencia_ejecutable : DEFER sentencia_when",
"sentencia_ejecutable : sentencia_do",
"sentencia_ejecutable : DEFER sentencia_do",
"sentencia_ejecutable_do : sentencia_ejecutable",
"sentencia_ejecutable_do : sentencia_break",
"sentencia_ejecutable_do : sentencia_continue",
"sentencia_break : BREAK ';'",
"sentencia_break : BREAK ':' etiqueta ';'",
"sentencia_break : BREAK",
"sentencia_break : BREAK ':' etiqueta",
"sentencia_break : BREAK ':' ';'",
"sentencia_continue : CONTINUE ';'",
"sentencia_continue : CONTINUE",
"sentencia_do : sentencia_do_simple",
"sentencia_do : etiqueta ':' sentencia_do_simple",
"sentencia_do_simple : DO bloque_sentencias_ejecutables_do UNTIL '(' condicion ')' ';'",
"sentencia_do_simple : DO bloque_sentencias_ejecutables_do UNTIL '(' condicion ')'",
"sentencia_do_simple : DO bloque_sentencias_ejecutables_do UNTIL '(' ')' ';'",
"sentencia_do_simple : DO bloque_sentencias_ejecutables_do UNTIL condicion ')' ';'",
"sentencia_do_simple : DO bloque_sentencias_ejecutables_do UNTIL '(' condicion ';'",
"etiqueta : ID",
"bloque_sentencias_ejecutables_do : sentencia_ejecutable_do",
"bloque_sentencias_ejecutables_do : '{' sentencias_ejecutables_do '}'",
"bloque_sentencias_ejecutables_do : '{' sentencias_ejecutables_do",
"bloque_sentencias_ejecutables_do : sentencias_ejecutables_do '}'",
"sentencias_ejecutables_do : sentencia_ejecutable_do",
"sentencias_ejecutables_do : sentencias_ejecutables_do sentencia_ejecutable_do",
"asignacion : ID ASIGNACION expresion ';'",
"asignacion : ID ASIGNACION ';'",
"asignacion : ID ASIGNACION expresion",
"sentencia_when : WHEN '(' condicion ')' THEN '{' sentencias_when '}' ';'",
"sentencia_when : WHEN '(' condicion ')' '{' sentencias_when '}' ';'",
"$$2 :",
"sentencia_when : WHEN '(' ')' THEN '{' sentencias_when '}' ';' $$2 WHEN '(' condicion ')' THEN '{' sentencias_when '}'",
"sentencia_when : WHEN '(' condicion ')' '{' sentencias_when '}'",
"sentencia_when : WHEN '(' condicion ')' '{' '}'",
"sentencias_when : sentencia",
"sentencias_when : sentencia sentencias_when",
"seleccion : IF '(' condicion ')' THEN bloque_sentencias_ejecutables_seleccion ENDIF ';'",
"seleccion : IF '(' condicion ')' THEN bloque_sentencias_ejecutables_seleccion ELSE bloque_sentencias_ejecutables_seleccion ENDIF ';'",
"bloque_sentencias_ejecutables_seleccion : sentencia_ejecutable",
"bloque_sentencias_ejecutables_seleccion : '{' sentencias_ejecutables '}'",
"sentencias_ejecutables : sentencia_ejecutable",
"sentencias_ejecutables : sentencias_ejecutables sentencia_ejecutable",
"condicion : expresion comparador expresion",
"condicion : expresion comparador",
"condicion : comparador expresion",
"comparador : COMP_MAYOR_IGUAL",
"comparador : COMP_MENOR_IGUAL",
"comparador : COMP_DISTINTO",
"comparador : '>'",
"comparador : '<'",
"comparador : '='",
"expresion : expresion '+' termino",
"expresion : expresion '-' termino",
"expresion : termino",
"termino : termino '*' factor",
"termino : termino '/' factor",
"termino : factor",
"factor : ID",
"factor : constante",
"factor : invocacion_funcion",
"invocacion_funcion : ID '(' ')'",
"invocacion_funcion : ID '(' lista_de_parametros_reales ')'",
"lista_de_parametros_reales : parametro_real",
"lista_de_parametros_reales : lista_de_parametros_reales ',' parametro_real",
"parametro_real : ID",
"parametro_real : constante",
"imprimir : OUT '(' CADENA ')' ';'",
"imprimir : OUT '(' ID ')' ';'",
"imprimir : OUT '(' ')' ';'",
"imprimir : OUT CADENA ')' ';'",
"imprimir : OUT '(' CADENA ';'",
"imprimir : OUT ID ')' ';'",
"imprimir : OUT '(' ID ';'",
"imprimir : OUT '(' CADENA ')'",
"imprimir : OUT '(' ID ')'",
"constante : CTE",
"constante : '-' CTE",
"tipo : UINT16",
"tipo : DOUBLE64",
};

//#line 394 ".\gramatica.y"

public static AnalizadorLexico lexico = null;
public static Logger logger = null;
public static TablaDeSimbolos ts = null;

public void constanteConSigno(String constante) {
	if (constante.contains(".")) {
		
		String negConstante = "-"+constante;
		
		Double parsedDouble = Double.parseDouble(negConstante.replace('D', 'E'));
		
		if (parsedDouble < -2.2250738585072014E-308 && -1.7976931348623157E+308 > parsedDouble) {
			logger.logWarning("[Parser] Rango invalido para la constante: " + negConstante + ", se trunca al rango permitido");
			
			if (-1.7976931348623157E+308 < parsedDouble) {
				negConstante = new String("-1.7976931348623157D+308");
			} else {
				negConstante =  new String("-2.2250738585072014D-308");
			}
		}
		
		ts.swapLexemas(constante, negConstante);
	} else {
		//se recibio un uint que fue aceptado por el lexico pero resulta ser negativo
		logger.logWarning("[Parser] No se admiten ui16 con valores negativos: " + "-"+constante + ", se trunca a 0");
		
		ts.swapLexemas(constante, "0");
	}
}	

public int yylex() {
	return lexico.yylex(yylval);
}

public void yyerror(String error) {
	logger.logError(error);
}

public static void main(String[] args) {
	if (args.length == 0) {
		System.err.println("No se especifico ningun archivo de codigo");
	} else {
		String archivo_a_leer = args[0];
		System.out.println("Se va a leer archivo " + archivo_a_leer);
		
		FileReaderHelper fileHelper = new FileReaderHelper();
		
		fileHelper.open(archivo_a_leer);
		
		Parser parser = new Parser();
		logger = new Logger();
		ts = new TablaDeSimbolos();
		lexico = new AnalizadorLexico(fileHelper, ts, logger);
		
        parser.run();

		String path = new File(archivo_a_leer).getAbsolutePath().replaceAll(args[0],"");
        
        Output out = new Output(path);
        
        String printTs = ts.print();
        
        
        out.saveFile("codigo-lexico.txt", logger.getLexico());
		out.saveFile("codigo-sintetico.txt", logger.getSintactico());
		out.saveFile("tabla-de-simbolos.txt", printTs);
        
		System.out.println(printTs);
	}
}
//#line 984 "Parser.java"
//###############################################################
// method: yylexdebug : check lexer state
//###############################################################
void yylexdebug(int state,int ch)
{
String s=null;
  if (ch < 0) ch=0;
  if (ch <= YYMAXTOKEN) //check index bounds
     s = yyname[ch];    //now get it
  if (s==null)
    s = "illegal-symbol";
  debug("state "+state+", reading "+ch+" ("+s+")");
}





//The following are now global, to aid in error reporting
int yyn;       //next next thing to do
int yym;       //
int yystate;   //current parsing state from state table
String yys;    //current token string


//###############################################################
// method: yyparse : parse input and execute indicated items
//###############################################################
int yyparse()
{
boolean doaction;
  init_stacks();
  yynerrs = 0;
  yyerrflag = 0;
  yychar = -1;          //impossible char forces a read
  yystate=0;            //initial state
  state_push(yystate);  //save it
  val_push(yylval);     //save empty value
  while (true) //until parsing is done, either correctly, or w/error
    {
    doaction=true;
    if (yydebug) debug("loop"); 
    //#### NEXT ACTION (from reduction table)
    for (yyn=yydefred[yystate];yyn==0;yyn=yydefred[yystate])
      {
      if (yydebug) debug("yyn:"+yyn+"  state:"+yystate+"  yychar:"+yychar);
      if (yychar < 0)      //we want a char?
        {
        yychar = yylex();  //get next token
        if (yydebug) debug(" next yychar:"+yychar);
        //#### ERROR CHECK ####
        if (yychar < 0)    //it it didn't work/error
          {
          yychar = 0;      //change it to default string (no -1!)
          if (yydebug)
            yylexdebug(yystate,yychar);
          }
        }//yychar<0
      yyn = yysindex[yystate];  //get amount to shift by (shift index)
      if ((yyn != 0) && (yyn += yychar) >= 0 &&
          yyn <= YYTABLESIZE && yycheck[yyn] == yychar)
        {
        if (yydebug)
          debug("state "+yystate+", shifting to state "+yytable[yyn]);
        //#### NEXT STATE ####
        yystate = yytable[yyn];//we are in a new state
        state_push(yystate);   //save it
        val_push(yylval);      //push our lval as the input for next rule
        yychar = -1;           //since we have 'eaten' a token, say we need another
        if (yyerrflag > 0)     //have we recovered an error?
           --yyerrflag;        //give ourselves credit
        doaction=false;        //but don't process yet
        break;   //quit the yyn=0 loop
        }

    yyn = yyrindex[yystate];  //reduce
    if ((yyn !=0 ) && (yyn += yychar) >= 0 &&
            yyn <= YYTABLESIZE && yycheck[yyn] == yychar)
      {   //we reduced!
      if (yydebug) debug("reduce");
      yyn = yytable[yyn];
      doaction=true; //get ready to execute
      break;         //drop down to actions
      }
    else //ERROR RECOVERY
      {
      if (yyerrflag==0)
        {
        yyerror("syntax error");
        yynerrs++;
        }
      if (yyerrflag < 3) //low error count?
        {
        yyerrflag = 3;
        while (true)   //do until break
          {
          if (stateptr<0)   //check for under & overflow here
            {
            yyerror("stack underflow. aborting...");  //note lower case 's'
            return 1;
            }
          yyn = yysindex[state_peek(0)];
          if ((yyn != 0) && (yyn += YYERRCODE) >= 0 &&
                    yyn <= YYTABLESIZE && yycheck[yyn] == YYERRCODE)
            {
            if (yydebug)
              debug("state "+state_peek(0)+", error recovery shifting to state "+yytable[yyn]+" ");
            yystate = yytable[yyn];
            state_push(yystate);
            val_push(yylval);
            doaction=false;
            break;
            }
          else
            {
            if (yydebug)
              debug("error recovery discarding state "+state_peek(0)+" ");
            if (stateptr<0)   //check for under & overflow here
              {
              yyerror("Stack underflow. aborting...");  //capital 'S'
              return 1;
              }
            state_pop();
            val_pop();
            }
          }
        }
      else            //discard this token
        {
        if (yychar == 0)
          return 1; //yyabort
        if (yydebug)
          {
          yys = null;
          if (yychar <= YYMAXTOKEN) yys = yyname[yychar];
          if (yys == null) yys = "illegal-symbol";
          debug("state "+yystate+", error recovery discards token "+yychar+" ("+yys+")");
          }
        yychar = -1;  //read another
        }
      }//end error recovery
    }//yyn=0 loop
    if (!doaction)   //any reason not to proceed?
      continue;      //skip action
    yym = yylen[yyn];          //get count of terminals on rhs
    if (yydebug)
      debug("state "+yystate+", reducing "+yym+" by rule "+yyn+" ("+yyrule[yyn]+")");
    if (yym>0)                 //if count of rhs not 'nil'
      yyval = val_peek(yym-1); //get current semantic value
    yyval = dup_yyval(yyval); //duplicate yyval if ParserVal is used as semantic value
    switch(yyn)
      {
//########## USER-SUPPLIED ACTIONS ##########
case 1:
//#line 17 ".\gramatica.y"
{ logger.logSuccess("[Parser] Programa correcto detectado"); }
break;
case 2:
//#line 18 ".\gramatica.y"
{ logger.logError("[Parser] Se esperaba un identificador nombre del programa"); }
break;
case 3:
//#line 19 ".\gramatica.y"
{ logger.logError("[Parser] Se esperaba un { antes de las sentencias del programa"); }
break;
case 4:
//#line 20 ".\gramatica.y"
{ logger.logError("[Parser] Se esperaba un } al final de las sentencias del programa"); }
break;
case 5:
//#line 21 ".\gramatica.y"
{ logger.logError("[Parser] Se esperaban sentencias del programa"); }
break;
case 15:
//#line 46 ".\gramatica.y"
{ logger.logSuccess("[Parser] Declaracion de lista de variables detectado"); }
break;
case 16:
//#line 47 ".\gramatica.y"
{ logger.logError("[Parser] Se esperaba un ; al final de la lista de variables"); }
break;
case 17:
//#line 48 ".\gramatica.y"
{ logger.logError("[Parser] Se esperaba un tipo para la lista de variables"); }
break;
case 18:
//#line 49 ".\gramatica.y"
{ logger.logError("[Parser] Se esperaba una variable o lista de variables"); }
break;
case 21:
//#line 58 ".\gramatica.y"
{ logger.logSuccess("[Parser] Declaracion de funcion detectado"); }
break;
case 22:
//#line 59 ".\gramatica.y"
{ logger.logSuccess("[Parser] Declaracion de funcion detectado"); }
break;
case 23:
//#line 60 ".\gramatica.y"
{ logger.logError("[Parser] Se esperaban sentencias en la funcion"); }
break;
case 40:
//#line 92 ".\gramatica.y"
{ logger.logSuccess("[Parser] Declaracion de funcion detectado"); }
break;
case 41:
//#line 93 ".\gramatica.y"
{ logger.logSuccess("[Parser] Declaracion de funcion detectado"); }
break;
case 52:
//#line 113 ".\gramatica.y"
{ logger.logSuccess("[Parser] Sentencia de seleccion detectada"); }
break;
case 53:
//#line 114 ".\gramatica.y"
{ logger.logSuccess("[Parser] Sentencia de seleccion detectada"); }
break;
case 54:
//#line 115 ".\gramatica.y"
{ logger.logSuccess("[Parser] Sentencia de seleccion detectada"); }
break;
case 55:
//#line 116 ".\gramatica.y"
{ logger.logSuccess("[Parser] Sentencia de seleccion detectada"); }
break;
case 56:
//#line 117 ".\gramatica.y"
{ logger.logSuccess("[Parser] Sentencia de seleccion detectada"); }
break;
case 57:
//#line 118 ".\gramatica.y"
{ logger.logSuccess("[Parser] Sentencia de seleccion detectada"); }
break;
case 58:
//#line 119 ".\gramatica.y"
{ logger.logSuccess("[Parser] Sentencia de seleccion detectada"); }
break;
case 59:
//#line 120 ".\gramatica.y"
{ logger.logSuccess("[Parser] Sentencia de seleccion detectada"); }
break;
case 60:
//#line 121 ".\gramatica.y"
{ logger.logSuccess("[Parser] Sentencia de seleccion detectada"); }
break;
case 61:
//#line 122 ".\gramatica.y"
{ logger.logSuccess("[Parser] Sentencia de seleccion detectada"); }
break;
case 62:
//#line 123 ".\gramatica.y"
{ logger.logSuccess("[Parser] Sentencia de seleccion detectada"); }
break;
case 63:
//#line 124 ".\gramatica.y"
{ logger.logSuccess("[Parser] Sentencia de seleccion detectada"); }
break;
case 64:
//#line 125 ".\gramatica.y"
{ logger.logSuccess("[Parser] Sentencia de seleccion detectada"); }
break;
case 65:
//#line 126 ".\gramatica.y"
{ logger.logSuccess("[Parser] Sentencia de seleccion detectada"); }
break;
case 66:
//#line 130 ".\gramatica.y"
{ logger.logSuccess("[Parser] Sentencia when detectada"); }
break;
case 67:
//#line 131 ".\gramatica.y"
{ logger.logSuccess("[Parser] Sentencia when detectada"); }
break;
case 68:
//#line 132 ".\gramatica.y"
{ logger.logSuccess("[Parser] Sentencia when detectada"); }
break;
case 69:
//#line 133 ".\gramatica.y"
{ logger.logError("[Parser] Se esperaba ; al final de la sentencia when"); }
break;
case 70:
//#line 134 ".\gramatica.y"
{ logger.logError("[Parser] Se esperaba ; al final de la sentencia when"); }
break;
case 71:
//#line 135 ".\gramatica.y"
{ logger.logError("[Parser] Se esperaba ; al final de la sentencia when"); }
break;
case 72:
//#line 136 ".\gramatica.y"
{ logger.logError("[Parser] Se esperaban sentencias en la sentencia when"); }
break;
case 73:
//#line 140 ".\gramatica.y"
{ logger.logSuccess("[Parser] Sentencia do until detectada"); }
break;
case 74:
//#line 141 ".\gramatica.y"
{ logger.logSuccess("[Parser] Sentencia do until detectada"); }
break;
case 81:
//#line 151 ".\gramatica.y"
{ logger.logError("[Parser] Se esperaban sentencias en la sentencia do"); }
break;
case 82:
//#line 152 ".\gramatica.y"
{ logger.logError("[Parser] Se esperaba un } al final de la sentencia do"); }
break;
case 83:
//#line 153 ".\gramatica.y"
{ logger.logError("[Parser] Se esperaba un } al final de la sentencia do"); }
break;
case 84:
//#line 154 ".\gramatica.y"
{ logger.logError("[Parser] Se esperaba un } al final de la sentencia do"); }
break;
case 85:
//#line 155 ".\gramatica.y"
{ logger.logError("[Parser] Se esperaba un } al final de la sentencia do"); }
break;
case 86:
//#line 156 ".\gramatica.y"
{ logger.logError("[Parser] Se esperaba un } al final de la sentencia do"); }
break;
case 87:
//#line 157 ".\gramatica.y"
{ logger.logError("[Parser] Se esperaba un } al final de la sentencia do"); }
break;
case 95:
//#line 174 ".\gramatica.y"
{ logger.logError("[Parser] Se esperaba un tipo de return para la funcion"); }
break;
case 96:
//#line 175 ".\gramatica.y"
{ logger.logError("[Parser] Se esperaba un identificador nombre para la funcion"); }
break;
case 97:
//#line 176 ".\gramatica.y"
{ logger.logError("[Parser] Se esperaba un ( luego del nombre de la funcion"); }
break;
case 98:
//#line 177 ".\gramatica.y"
{ logger.logError("[Parser] Se esperaba un ) luego del nombre para la funcion"); }
break;
case 99:
//#line 178 ".\gramatica.y"
{ logger.logError("[Parser] Se esperaba un tipo de return para la funcion"); }
break;
case 100:
//#line 179 ".\gramatica.y"
{ logger.logError("[Parser] Se esperaba un identificador nombre para la funcion"); }
break;
case 101:
//#line 180 ".\gramatica.y"
{ logger.logError("[Parser] Se esperaba un ( luego del nombre de la funcion"); }
break;
case 102:
//#line 181 ".\gramatica.y"
{ logger.logError("[Parser] Se esperaba un ) luego del nombre para la funcion"); }
break;
case 104:
//#line 186 ".\gramatica.y"
{ logger.logError("[Parser] Se esperaba un ; al final de la sentencia return"); }
break;
case 105:
//#line 187 ".\gramatica.y"
{ logger.logError("[Parser] Se esperaba un ( en la sentencia return"); }
break;
case 106:
//#line 188 ".\gramatica.y"
{ logger.logError("[Parser] Se esperaba un ) en la sentencia return"); }
break;
case 107:
//#line 189 ".\gramatica.y"
{ logger.logError("[Parser] Se esperaba una expresion en la sentencia return"); }
break;
case 110:
//#line 195 ".\gramatica.y"
{ logger.logError("[Parser] Hay mas de 2 parametros en la funcion"); }
break;
case 115:
//#line 205 ".\gramatica.y"
{ logger.logError("[Parser] Se esperaba un identificador nombre para el parametro"); }
break;
case 116:
//#line 206 ".\gramatica.y"
{ logger.logError("[Parser] Se esperaba un tipo valido para el parametro"); }
break;
case 117:
//#line 210 ".\gramatica.y"
{ logger.logSuccess("[Parser] Declaracion de constantes detectado"); }
break;
case 118:
//#line 211 ".\gramatica.y"
{ logger.logError("[Parser] Se esperaba ; al final de la declaracion de constantes"); }
break;
case 119:
//#line 212 ".\gramatica.y"
{ logger.logError("[Parser] Se esperaba una lista de declaracion de constantes"); }
break;
case 123:
//#line 222 ".\gramatica.y"
{ logger.logError("[Parser] Se esperaba una constante del lado derecho de la asignacion"); }
break;
case 124:
//#line 223 ".\gramatica.y"
{ logger.logError("[Parser] Se esperaba el simbolo asignacion en la declaracion de constantes"); }
break;
case 125:
//#line 224 ".\gramatica.y"
{ logger.logError("[Parser] Se esperaba una asignacion en la declaracion de constantes"); }
break;
case 139:
//#line 247 ".\gramatica.y"
{ logger.logSuccess("[Parser] Sentencia break detectada"); }
break;
case 140:
//#line 248 ".\gramatica.y"
{ logger.logSuccess("[Parser] Sentencia break con etiqueta detectada"); }
break;
case 141:
//#line 249 ".\gramatica.y"
{ logger.logError("[Parser] Se esperaba un ; luego de la sentencia break"); }
break;
case 142:
//#line 250 ".\gramatica.y"
{ logger.logError("[Parser] Se esperaba un ; luego de la sentencia break"); }
break;
case 143:
//#line 251 ".\gramatica.y"
{ logger.logError("[Parser] Se esperaba una etiqueta en la sentencia break"); }
break;
case 144:
//#line 255 ".\gramatica.y"
{ logger.logSuccess("[Parser] Sentencia continue detectada"); }
break;
case 145:
//#line 256 ".\gramatica.y"
{ logger.logError("[Parser] Se esperaba un ; al final de la sentencia continue"); }
break;
case 148:
//#line 265 ".\gramatica.y"
{ logger.logSuccess("[Parser] Sentencia do until detectada"); }
break;
case 149:
//#line 266 ".\gramatica.y"
{ logger.logError("[Parser] Se esperaba un ; al final de la sentencia do"); }
break;
case 150:
//#line 267 ".\gramatica.y"
{ logger.logError("[Parser] Se esperaba una condicion para la sentencia do"); }
break;
case 151:
//#line 268 ".\gramatica.y"
{ logger.logSuccess("[Parser] Se esperaba un ( en la condicion para la sentencia do"); }
break;
case 152:
//#line 269 ".\gramatica.y"
{ logger.logSuccess("[Parser] Se esperaba un ) en la condicion para la sentencia do"); }
break;
case 156:
//#line 279 ".\gramatica.y"
{ logger.logError("[Parser] Se esperaba un } al final de la sentencia do"); }
break;
case 157:
//#line 280 ".\gramatica.y"
{ logger.logError("[Parser] Se esperaba un { en la sentencia do"); }
break;
case 160:
//#line 289 ".\gramatica.y"
{ logger.logSuccess("[Parser] Asignacion detectada"); }
break;
case 161:
//#line 290 ".\gramatica.y"
{logger.logError("[Parser] Se espera una expresion del lado derecho de la asignacion");}
break;
case 162:
//#line 291 ".\gramatica.y"
{ logger.logError("[Parser] Se espera un ; al final de la asignacion"); }
break;
case 163:
//#line 295 ".\gramatica.y"
{ logger.logSuccess("[Parser] Sentencia when detectada"); }
break;
case 164:
//#line 296 ".\gramatica.y"
{ logger.logError("[Parser] Se esperaba la palabra reservada then en la sentencia when"); }
break;
case 165:
//#line 297 ".\gramatica.y"
{ logger.logError("[Parser] Se esperaba una condicion en la sentencia when"); }
break;
case 166:
//#line 298 ".\gramatica.y"
{ logger.logError("[Parser] Se esperaba un ; al final de la sentencia when"); }
break;
case 167:
//#line 299 ".\gramatica.y"
{ logger.logError("[Parser] Se esperaba la palabra reservada then en la sentencia when"); }
break;
case 168:
//#line 300 ".\gramatica.y"
{ logger.logError("[Parser] Se esperaban sentencias dentro del when"); }
break;
case 171:
//#line 309 ".\gramatica.y"
{ logger.logSuccess("[Parser] Sentencia if then detectada"); }
break;
case 172:
//#line 310 ".\gramatica.y"
{ logger.logSuccess("[Parser] Sentencia if then else detectada"); }
break;
case 178:
//#line 325 ".\gramatica.y"
{ logger.logError("[Parser] Se esperaba un expresion del lado derecho de la comparacion"); }
break;
case 179:
//#line 326 ".\gramatica.y"
{ logger.logError("[Parser] Se esperaba un expresion del lado izquierdo de la comparacion"); }
break;
case 201:
//#line 372 ".\gramatica.y"
{ logger.logSuccess("[Parser] Sentencia out detectada"); }
break;
case 202:
//#line 373 ".\gramatica.y"
{ logger.logSuccess("[Parser] Sentencia out detectada"); }
break;
case 203:
//#line 374 ".\gramatica.y"
{ logger.logError("[Parser] Se esperaba una cadena o identificador en la sentencia out"); }
break;
case 204:
//#line 375 ".\gramatica.y"
{ logger.logError("[Parser] Se esperaba un ( en la sentencia out"); }
break;
case 205:
//#line 376 ".\gramatica.y"
{ logger.logError("[Parser] Se esperaba un ) en la sentencia out"); }
break;
case 206:
//#line 377 ".\gramatica.y"
{ logger.logError("[Parser] Se esperaba un ( en la sentencia out"); }
break;
case 207:
//#line 378 ".\gramatica.y"
{ logger.logError("[Parser] Se esperaba un ) en la sentencia out"); }
break;
case 208:
//#line 379 ".\gramatica.y"
{ logger.logError("[Parser] Se espera un ; al final de la sentencia out"); }
break;
case 209:
//#line 380 ".\gramatica.y"
{ logger.logError("[Parser] Se espera un ; al final de la sentencia out"); }
break;
case 211:
//#line 385 ".\gramatica.y"
{ constanteConSigno(val_peek(0).sval); }
break;
//#line 1541 "Parser.java"
//########## END OF USER-SUPPLIED ACTIONS ##########
    }//switch
    //#### Now let's reduce... ####
    if (yydebug) debug("reduce");
    state_drop(yym);             //we just reduced yylen states
    yystate = state_peek(0);     //get new state
    val_drop(yym);               //corresponding value drop
    yym = yylhs[yyn];            //select next TERMINAL(on lhs)
    if (yystate == 0 && yym == 0)//done? 'rest' state and at first TERMINAL
      {
      if (yydebug) debug("After reduction, shifting from state 0 to state "+YYFINAL+"");
      yystate = YYFINAL;         //explicitly say we're done
      state_push(YYFINAL);       //and save it
      val_push(yyval);           //also save the semantic value of parsing
      if (yychar < 0)            //we want another character?
        {
        yychar = yylex();        //get next character
        if (yychar<0) yychar=0;  //clean, if necessary
        if (yydebug)
          yylexdebug(yystate,yychar);
        }
      if (yychar == 0)          //Good exit (if lex returns 0 ;-)
         break;                 //quit the loop--all DONE
      }//if yystate
    else                        //else not done yet
      {                         //get next state and push, for next yydefred[]
      yyn = yygindex[yym];      //find out where to go
      if ((yyn != 0) && (yyn += yystate) >= 0 &&
            yyn <= YYTABLESIZE && yycheck[yyn] == yystate)
        yystate = yytable[yyn]; //get new state
      else
        yystate = yydgoto[yym]; //else go to new defred
      if (yydebug) debug("after reduction, shifting from state "+state_peek(0)+" to state "+yystate+"");
      state_push(yystate);     //going again, so push state & val...
      val_push(yyval);         //for next action
      }
    }//main loop
  return 0;//yyaccept!!
}
//## end of method parse() ######################################



//## run() --- for Thread #######################################
/**
 * A default run method, used for operating this parser
 * object in the background.  It is intended for extending Thread
 * or implementing Runnable.  Turn off with -Jnorun .
 */
public void run()
{
  yyparse();
}
//## end of method run() ########################################



//## Constructors ###############################################
/**
 * Default constructor.  Turn off with -Jnoconstruct .

 */
public Parser()
{
  //nothing to do
}


/**
 * Create a parser, setting the debug to true or false.
 * @param debugMe true for debugging, false for no debug.
 */
public Parser(boolean debugMe)
{
  yydebug=debugMe;
}
//###############################################################



}
//################### END OF CLASS ##############################
