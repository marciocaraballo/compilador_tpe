//### This file created by BYACC 1.8(/Java extension  1.15)
//### Java capabilities added 7 Jan 97, Bob Jamison
//### Updated : 27 Nov 97  -- Bob Jamison, Joe Nieten
//###           01 Jan 98  -- Bob Jamison -- fixed generic semantic constructor
//###           01 Jun 99  -- Bob Jamison -- added Runnable support
//###           06 Aug 00  -- Bob Jamison -- made state variables class-global
//###           03 Jan 01  -- Bob Jamison -- improved flags, tracing
//###           16 May 01  -- Bob Jamison -- added custom stack sizing
//###           04 Mar 02  -- Yuval Oren  -- improved java performance, added options
//###           14 Mar 02  -- Tomas Hurka -- -d support, static initializer workaround
//### Please send bug reports to tom@hukatronic.cz
//### static char yysccsid[] = "@(#)yaccpar	1.8 (Berkeley) 01/20/90";



package compilador;



//#line 2 "./src/compilador/gramatica.y"
import java.io.File;
//#line 19 "Parser.java"




public class Parser
{

boolean yydebug;        //do I want debug output?
int yynerrs;            //number of errors so far
int yyerrflag;          //was there an error?
int yychar;             //the current working character

//########## MESSAGES ##########
//###############################################################
// method: debug
//###############################################################
void debug(String msg)
{
  if (yydebug)
    System.out.println(msg);
}

//########## STATE STACK ##########
final static int YYSTACKSIZE = 500;  //maximum stack size
int statestk[] = new int[YYSTACKSIZE]; //state stack
int stateptr;
int stateptrmax;                     //highest index of stackptr
int statemax;                        //state when highest index reached
//###############################################################
// methods: state stack push,pop,drop,peek
//###############################################################
final void state_push(int state)
{
  try {
		stateptr++;
		statestk[stateptr]=state;
	 }
	 catch (ArrayIndexOutOfBoundsException e) {
     int oldsize = statestk.length;
     int newsize = oldsize * 2;
     int[] newstack = new int[newsize];
     System.arraycopy(statestk,0,newstack,0,oldsize);
     statestk = newstack;
     statestk[stateptr]=state;
  }
}
final int state_pop()
{
  return statestk[stateptr--];
}
final void state_drop(int cnt)
{
  stateptr -= cnt; 
}
final int state_peek(int relative)
{
  return statestk[stateptr-relative];
}
//###############################################################
// method: init_stacks : allocate and prepare stacks
//###############################################################
final boolean init_stacks()
{
  stateptr = -1;
  val_init();
  return true;
}
//###############################################################
// method: dump_stacks : show n levels of the stacks
//###############################################################
void dump_stacks(int count)
{
int i;
  System.out.println("=index==state====value=     s:"+stateptr+"  v:"+valptr);
  for (i=0;i<count;i++)
    System.out.println(" "+i+"    "+statestk[i]+"      "+valstk[i]);
  System.out.println("======================");
}


//########## SEMANTIC VALUES ##########
//public class ParserVal is defined in ParserVal.java


String   yytext;//user variable to return contextual strings
ParserVal yyval; //used to return semantic vals from action routines
ParserVal yylval;//the 'lval' (result) I got from yylex()
ParserVal valstk[];
int valptr;
//###############################################################
// methods: value stack push,pop,drop,peek.
//###############################################################
void val_init()
{
  valstk=new ParserVal[YYSTACKSIZE];
  yyval=new ParserVal();
  yylval=new ParserVal();
  valptr=-1;
}
void val_push(ParserVal val)
{
  if (valptr>=YYSTACKSIZE)
    return;
  valstk[++valptr]=val;
}
ParserVal val_pop()
{
  if (valptr<0)
    return new ParserVal();
  return valstk[valptr--];
}
void val_drop(int cnt)
{
int ptr;
  ptr=valptr-cnt;
  if (ptr<0)
    return;
  valptr = ptr;
}
ParserVal val_peek(int relative)
{
int ptr;
  ptr=valptr-relative;
  if (ptr<0)
    return new ParserVal();
  return valstk[ptr];
}
final ParserVal dup_yyval(ParserVal val)
{
  ParserVal dup = new ParserVal();
  dup.ival = val.ival;
  dup.dval = val.dval;
  dup.sval = val.sval;
  dup.obj = val.obj;
  return dup;
}
//#### end semantic value section ####
public final static short ID=257;
public final static short CTE=258;
public final static short CADENA=259;
public final static short IF=260;
public final static short ELSE=261;
public final static short ENDIF=262;
public final static short PRINT=263;
public final static short VOID=264;
public final static short RETURN=265;
public final static short COMP_MAYOR_IGUAL=266;
public final static short COMP_MENOR_IGUAL=267;
public final static short COMP_IGUAL=268;
public final static short COMP_DISTINTO=269;
public final static short CLASS=270;
public final static short WHILE=271;
public final static short DO=272;
public final static short INTERFACE=273;
public final static short IMPLEMENT=274;
public final static short INT=275;
public final static short ULONG=276;
public final static short FLOAT=277;
public final static short OPERADOR_MENOS=278;
public final static short YYERRCODE=256;
final static short yylhs[] = {                           -1,
    0,    0,    0,    0,    0,    1,    1,    2,    2,    4,
    4,    4,    4,    4,    4,   11,   11,   12,   12,   13,
   13,   13,   13,   13,   10,   10,    9,    9,    9,    9,
    9,    9,    9,    9,    9,    9,    9,   15,   19,   15,
   15,   15,   15,   15,   15,   15,   15,   15,    8,    8,
    8,    8,    8,    8,    8,    8,    8,   14,   14,   14,
   20,   14,   14,   14,   14,   14,   16,   16,   16,   16,
   16,   16,   18,   18,   18,   18,   18,   18,   18,   18,
   18,   18,   18,   23,   23,   24,   24,   21,   21,   21,
   21,   22,   22,   22,   22,    7,    7,    7,    7,    7,
    7,    7,    6,    6,    6,    6,    6,    6,   28,   28,
    5,    5,    5,   26,   26,    3,    3,    3,    3,   29,
   29,   29,   32,   32,   32,   32,   32,   32,   35,   35,
   36,   36,   38,   38,   38,   38,   31,   31,   31,   31,
   31,   31,   31,   31,   39,   39,   30,   40,   40,   40,
   40,   40,   40,   40,   40,   37,   37,   37,   37,   37,
   37,   37,   37,   41,   41,   41,   41,   41,   41,   41,
   41,   41,   41,   41,   41,   44,   44,   45,   45,   45,
   43,   43,   43,   42,   34,   34,   33,   33,   33,   33,
   17,   17,   17,   17,   46,   46,   46,   46,   46,   46,
   27,   27,   27,   47,   47,   47,   48,   48,   48,   48,
   25,   25,
};
final static short yylen[] = {                            2,
    3,    2,    2,    2,    0,    1,    2,    1,    1,    1,
    1,    1,    1,    1,    1,    1,    2,    1,    1,    1,
    1,    1,    1,    1,    2,    1,    7,    6,    6,    6,
    6,    3,    4,    2,    5,    4,    3,    7,    0,   13,
    6,    6,    3,    4,    2,    5,    4,    3,    9,    7,
    8,    6,    8,    6,    8,    8,    6,    9,    7,    8,
    0,   15,    6,    8,    8,    6,    1,    3,    2,    2,
    2,    1,    1,    1,    1,    3,    4,    5,    2,    3,
    2,    3,    2,    1,    2,    1,    1,    1,    2,    1,
    2,    1,    2,    1,    2,    3,    2,    2,    3,    2,
    3,    2,    5,    4,    7,    4,    3,    6,    1,    3,
    4,    3,    3,    1,    3,    1,    1,    1,    1,    3,
    2,    2,    5,    4,    3,    2,    4,    3,    1,    2,
    2,    1,    3,    2,    1,    2,    5,    7,    4,    3,
    6,    5,    4,    6,    1,    2,    2,    5,    4,    7,
    6,    4,    3,    4,    3,    5,    4,    7,    6,    4,
    3,    4,    3,    4,    3,    5,    4,    3,    2,    3,
    2,    4,    3,    2,    1,    1,    2,    1,    1,    1,
    1,    3,    2,    2,    1,    3,    1,    1,    1,    1,
    3,    2,    2,    3,    1,    1,    1,    1,    1,    1,
    3,    3,    1,    3,    3,    1,    1,    2,    1,    3,
    1,    2,
};
final static short yydefred[] = {                         0,
    0,    0,    0,    0,    0,    0,    0,    0,  187,  188,
  189,    0,    0,    0,    6,    8,    9,   10,   11,   12,
   13,   14,   15,    0,  116,  117,  118,  119,    0,    0,
    0,    0,  211,    0,    0,   98,    0,    0,    0,   25,
    0,    0,    0,    0,    0,   34,    0,    0,    0,    0,
    0,    0,    0,    0,  126,    0,  129,    0,    4,    0,
    2,    7,    0,    0,    0,  185,  122,    0,    0,    0,
    0,  175,   18,   20,   21,   22,    0,    0,   16,   19,
   23,   24,  147,    0,  195,  196,  197,  198,    0,    0,
  199,  200,    0,  209,    0,    0,    0,  206,   99,   96,
  212,  101,  190,    0,  155,    0,    0,  153,    0,    0,
    0,    0,  135,    0,  145,    0,  140,    0,    0,   32,
    0,   71,   90,   88,    0,    0,    0,    0,    0,   70,
   91,   89,    0,  128,    0,    0,    0,    0,  125,  130,
  131,    1,    0,    0,  113,    0,  115,  120,    0,    0,
    0,    0,   45,    0,    0,   74,    0,    0,    0,  169,
    0,    0,  171,  178,  179,  180,    0,  176,  174,    0,
   17,  208,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,  149,    0,  184,  154,  152,  136,    0,    0,
    0,    0,  143,  146,    0,  139,    0,   68,   36,    0,
   33,    0,    0,    0,  127,    0,  163,    0,  161,    0,
  124,  104,    0,    0,  111,  186,    0,    0,   43,   83,
   94,   92,    0,    0,    0,    0,    0,   79,   95,    0,
   93,  165,    0,  168,    0,  173,  177,  170,    0,  210,
    0,    0,    0,    0,    0,    0,    0,    0,    0,  204,
  205,    0,  148,  181,    0,    0,    0,    0,  137,  133,
  142,    0,   35,    0,    0,    0,  123,  157,    0,  162,
  160,    0,    0,  103,    0,    0,   76,    0,   47,    0,
   44,    0,    0,   80,  167,  164,    0,  172,    0,   54,
    0,   57,    0,    0,    0,    0,  151,  183,    0,  144,
  141,   29,   30,    0,   31,    0,  156,    0,    0,    0,
    0,    0,    0,    0,  114,   77,   86,   87,    0,   84,
   46,    0,    0,    0,  166,    0,    0,    0,    0,   50,
  150,  182,  138,   27,    0,  159,    0,  105,   63,    0,
   66,    0,    0,   78,   85,   41,    0,   42,   53,   55,
   56,    0,  158,    0,    0,    0,   59,    0,   38,    0,
   49,   64,   65,    0,    0,    0,   58,    0,    0,    0,
    0,    0,    0,    0,    0,    0,   40,    0,   62,
};
final static short yydgoto[] = {                         13,
   14,   15,  164,   49,   74,   75,   76,   21,   22,   23,
   78,   79,  166,   81,   82,   50,   93,  158,  360,  358,
   51,  159,  319,  320,   94,   24,   95,  273,   25,   26,
   27,   28,   29,   68,   56,   57,   58,  115,  116,   30,
   83,  254,  255,  167,  168,   96,   97,   98,
};
final static short yysindex[] = {                      1269,
    0,   -6,  125,  -31,   20,  -63,  961,  286,    0,    0,
    0, 1199,    0, 1332,    0,    0,    0,    0,    0,    0,
    0,    0,    0,   67,    0,    0,    0,    0,  -42, 1105,
 1045,   36,    0,   38, -246,    0,   43,   -2,  282,    0,
  398, -107,  569,   50, 1355,    0, 1151,    0,    0,  -35,
 1379,  -93,   -7, -165,    0,  -89,    0,  118,    0, 1402,
    0,    0,   71,  111, -142,    0,    0,  -15,  139,  983,
 1423,    0,    0,    0,    0,    0, 1444, 1465,    0,    0,
    0,    0,    0,  -97,    0,    0,    0,    0,   30, 1290,
    0,    0,  154,    0,  159,   30,   11,    0,    0,    0,
    0,    0,    0,  394,    0,  -59,  169,    0,  173,  212,
  -98,  569,    0,   21,    0,  634,    0,  569,  860,    0,
 1234,    0,    0,    0, 1486,  226,  245,   77, 1234,    0,
    0,    0, -165,    0,  -68,   57,  403,  -58,    0,    0,
    0,    0,  246,  265,    0,   79,    0,    0,   35, 1157,
  251, 1731,    0, 1182,    0,    0,    0,  -34, 1508,    0,
 1532, 1556,    0,    0,    0,    0, 1577,    0,    0, 1598,
    0,    0,  200,  -39, 1058,   30,   30,   30,   30,   -8,
   30,   30,    0,   22,    0,    0,    0,    0,  817,  569,
  988,   83,    0,    0, 1033,    0,  279,    0,    0,  281,
    0, 1221,  294,  -56,    0,  561,    0,  298,    0,  300,
    0,    0,   30,  306,    0,    0, 1311,  310,    0,    0,
    0,    0, 1619,  308,  318,  121, 1234,    0,    0,  235,
    0,    0, 1641,    0, 1662,    0,    0,    0, 1685,    0,
 1290,  329, 1290,  330,  -32,   11,   11,   -8,   -8,    0,
    0, -173,    0,    0,  104,  569, 1676, 1702,    0,    0,
    0,  332,    0,  348,  354,  353,    0,    0,  156,    0,
    0,   -8,  -37,    0,  136, 1080,    0,  -83,    0,  357,
    0, 1227,  369,    0,    0,    0, 1710,    0,  150,    0,
  152,    0, 1126,  375,  184, -173,    0,    0, 1735,    0,
    0,    0,    0,  379,    0, -173,    0,  220,   30,  390,
  392, 1311,  401,   40,    0,    0,    0,    0,  326,    0,
    0,  404,  408,  406,    0,  410,  412,  413,  190,    0,
    0,    0,    0,    0,  278,    0,   -8,    0,    0,  196,
    0, 1248,  422,    0,    0,    0,  428,    0,    0,    0,
    0,  429,    0,  430,  431,  214,    0,  110,    0,  206,
    0,    0,    0,  445,  453,  223,    0,  457,  459, 1311,
 1234,  239,  462, 1311,  461,  249,    0,  475,    0,
};
final static short yyrindex[] = {                       522,
  -18,    0,    0,    0,  253,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,  305,    0,  480,    0,    0,  501,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,  685,  749,    0,
    0,    0,    0,    0,    0,    0,    0,  -47,    0,  527,
    0,    0,    0,    0,    0,    0,    0,  531,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,  346,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,  377,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,  275,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,   10,  552,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,  596,    0,    0,  624,    0,    0,    0,    0,
    0,    0,    0,    0,  839,    0,  868,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,  496,  499,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0, 1741,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,  658,    0,    0,    0,    0,    0,    0,
    0,    0,   95,  892,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,  424,  447,  503,  510,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,   89,    0,    0,    0,    0,    0,  101,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,  706,    0,    0,    0,    0,    0,    0,
    0,    0,    0,  727,    0,    0,    0,    0,    0,  779,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,  108,    0,    0,    0,
    0,    0,  296,    0,    0,    0,  270,    0,    0,    0,
    0,  800,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,  913,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,
};
final static short yygindex[] = {                         0,
  549,   13,    1,  534,   74,  240,  304,    0,    0,  -30,
  492,  -61,  -16,    0,    0,  295,  -44, -158,    0,    0,
  519,  421,    0,  255,  581,    0,  -40,    0,    0,  -23,
    0,    0,  147,  473,  -33,    9,    0,  205,    2,    0,
    0,  -28, -201,  -78,  273,  495,   55,  166,
};
final static int YYTABLESIZE=2018;
static short yytable[];
static { yytable();}
static void yytable(){
yytable = new short[]{                         77,
   16,   67,  127,  310,  129,  227,  309,   48,   39,  107,
  109,  101,   16,   80,   16,  118,  171,  113,  135,  113,
  138,  114,  144,  146,  190,  190,   62,  114,  148,  133,
   73,  134,  137,   31,  176,  139,  177,  104,  105,  156,
  161,  316,  114,  149,  119,  123,  165,  170,  173,   69,
  295,  131,  181,  157,   80,  180,  205,  182,  275,   43,
   16,   80,  253,   40,  140,  252,  211,  308,  267,   89,
  155,   73,   62,   18,   35,  184,  197,  132,   73,   99,
   18,  100,  233,  103,  203,   18,  102,   18,  113,  121,
   48,  239,  113,  120,  113,  113,  206,  207,   53,  204,
  171,    9,   10,   11,  335,  218,   63,  208,  210,  225,
   89,  143,   65,  191,  147,   35,  202,  314,   18,  195,
  201,  176,  215,  177,   18,  131,  260,   64,  230,  109,
  165,  235,  109,   18,   81,  222,  165,  248,  249,  165,
   82,  149,  231,  140,  297,   80,  140,  296,  110,  117,
   89,  110,  221,  340,  145,   35,  287,  265,  189,  229,
  282,  141,   73,   18,  281,  113,  113,  113,   36,   35,
   53,  113,  272,  315,   53,   48,   69,  269,  150,    3,
  172,    5,  283,  356,  106,  106,  156,  114,   70,  114,
  257,  258,  278,   41,  175,   53,  307,  185,   18,  306,
  157,  176,  165,  177,  165,   53,  231,   53,  165,  186,
   42,  372,  140,  187,   66,  376,  132,  155,   92,  178,
   91,  241,  242,  229,  331,   38,  298,  296,  293,  294,
  246,  247,  113,  113,  113,  128,  226,  323,  190,   19,
  240,   48,  176,   48,  177,  156,   19,  317,   18,  136,
  106,   19,   26,   19,  103,  188,  165,  299,  114,  157,
  336,  318,  114,  296,  114,  114,  298,  332,  337,  199,
   69,   69,    9,   10,   11,  113,  155,   66,  103,  298,
   69,  156,  106,  106,   19,  200,   84,   33,  317,  212,
   19,  216,   26,   48,  219,  157,    9,   10,   11,   19,
  342,  343,  318,   20,  100,  214,  298,  176,  213,  177,
   20,  156,  155,  103,   18,   20,   18,   20,  353,  262,
  194,  296,  108,  194,  263,  157,  373,   84,   33,   19,
  106,    9,   10,   11,  266,  114,  114,  114,  270,  156,
  271,  114,  155,  156,  100,  207,  250,  251,   20,  274,
  276,  279,  106,  157,   20,   81,   81,  157,  280,  284,
  103,   82,   82,   20,   19,   81,   18,   84,   33,  365,
  155,   82,  290,  292,  155,  302,  203,   26,    9,   10,
   11,   32,   33,   34,  174,  207,  207,  207,  207,  207,
  207,  303,  207,   20,  304,  194,  305,  311,  106,  194,
  321,  106,  114,  114,  114,  207,  207,  207,   54,  324,
   55,  326,  103,  327,   19,  106,  203,  203,  330,  203,
  203,  203,  334,  201,   85,   86,   87,   88,   20,  100,
    9,   10,   11,  338,  183,  339,  203,  203,  203,  237,
  103,  106,  106,  209,  341,  114,  202,  346,  347,  348,
  344,  352,  106,  349,  106,  350,  351,  354,    9,   10,
   11,  194,  194,  201,  201,  357,  201,  201,  201,  245,
  207,  359,  361,  362,  363,  364,  103,  366,   20,   97,
   19,  106,   19,  201,  201,  201,  202,  202,  367,  202,
  202,  202,  368,  369,    9,   10,   11,  370,  371,  374,
  102,  203,  375,  194,  377,  237,  202,  202,  202,   26,
  378,  237,   26,   26,   26,   26,   26,   26,  379,   97,
  112,    5,   26,   26,   26,   26,    3,   26,   26,   26,
  121,  190,   19,   17,  103,  289,  192,  291,  103,  193,
  102,   39,   52,  194,   20,   17,   20,   17,  201,   53,
  191,   37,    9,   10,   11,   61,    9,   10,   11,  237,
   60,  100,  162,  125,  100,  100,  100,  100,  100,  100,
  121,  202,  223,  345,  100,  100,  100,  100,  124,  100,
  100,  100,  315,   37,  132,   69,  192,  329,    3,  179,
    5,   37,    0,   17,    0,  107,   20,   70,    0,    0,
    0,  268,  207,    0,   97,  207,  207,  207,  207,  207,
  207,  207,  207,  207,  207,  207,  207,  207,  207,    0,
  207,  207,  207,  112,    0,  102,    0,    0,    0,    0,
    0,    0,    0,  203,    0,  107,  203,  203,  203,  203,
  203,  203,  203,  203,  203,  203,  203,  203,  203,  203,
  103,  203,  203,  203,  110,  121,    0,  106,  132,  103,
    0,    4,    0,  112,    0,    0,    0,    0,    9,   10,
   11,  111,    9,   10,   11,    0,   37,    9,   10,   11,
  201,    0,    0,  201,  201,  201,  201,  201,  201,  201,
  201,  201,  201,  201,  201,  201,  201,  106,  201,  201,
  201,    0,    0,  202,    0,   52,  202,  202,  202,  202,
  202,  202,  202,  202,  202,  202,  202,  202,  202,  202,
  107,  202,  202,  202,   72,    0,   28,    0,    0,    0,
    0,    0,    0,    0,    0,    0,   97,    0,    0,   97,
   97,   97,   97,   97,   97,   52,    0,    0,  112,   97,
   97,   97,   97,    0,   97,   97,   97,  102,  193,    0,
  102,  102,  102,  102,  102,  102,   28,    0,    0,    0,
  102,  102,  102,  102,    0,  102,  102,  102,  108,    0,
    0,    0,  106,    0,    0,    0,    0,  121,   67,    0,
  121,  121,  121,  121,  121,  121,    0,    0,    0,   51,
  121,  121,  121,  121,    0,  121,  121,  121,   37,   90,
    0,   37,   37,   37,   37,   37,   37,  103,  108,    0,
    0,   37,   37,   37,   37,  110,   37,   37,   37,    0,
   52,    0,    4,    0,    0,    9,   10,   11,    0,   51,
    0,    0,    0,    9,   10,   11,    0,    0,    0,    0,
    0,   28,  107,    0,    0,  107,  107,  107,  107,  107,
  107,    0,    0,    0,    0,  107,  107,  107,  107,    0,
  107,  107,  107,   88,    0,    0,    0,    0,   75,    0,
  112,    0,    0,  112,  112,  112,  112,  112,  112,    0,
  110,    0,    0,  112,  112,  112,  112,    4,  112,  112,
  112,    0,    0,  108,    0,    0,    0,   73,    9,   10,
   11,    0,    0,    0,  106,    0,    0,  106,  106,  106,
  106,  106,  106,    0,   51,    0,    0,  106,  106,  106,
  106,   48,  106,  106,  106,    0,    0,    0,    0,  256,
    0,   90,    0,    0,   90,   72,   72,   90,   90,   90,
    0,    0,   60,    0,   90,   72,   90,   90,    0,   90,
   90,   90,   52,   94,    0,   52,   52,   52,   52,   52,
   52,    0,    0,    0,    0,   52,   52,   52,   52,    0,
   52,   52,   52,   28,  196,    0,   28,   28,   28,   28,
   28,   28,   92,    0,    0,    0,   28,   28,   28,   28,
   47,   28,   28,   28,   46,   88,    0,    0,   88,   67,
   67,   88,   88,   88,    0,    0,   48,    0,   88,   67,
   88,   88,  154,   88,   88,   88,  153,    0,    0,    0,
    0,    0,    0,    0,    0,  108,    0,   60,  108,  108,
  108,  108,  108,  108,    0,    0,    0,    0,  108,  108,
  108,  108,    0,  108,  108,  108,   51,    0,    0,   51,
   51,   51,   51,   51,   51,    0,    0,    0,    0,   51,
   51,   51,   51,  110,   51,   51,   51,    0,    0,    0,
    4,    0,    0,   45,   89,   90,    0,    0,    0,   35,
    0,    9,   10,   11,    0,   94,    0,    0,   94,   75,
   75,   94,   94,   94,   92,  152,   91,    0,   94,   75,
   94,   94,  259,   94,   94,   94,  110,    0,    0,    0,
    0,    0,    0,    4,   92,    0,    0,   92,   73,   73,
   92,   92,   92,    0,    9,   10,   11,   92,   73,   92,
   92,    0,   92,   92,   92,    0,    0,    0,   48,    0,
    0,   48,   48,   48,   48,   48,   48,  261,    0,    0,
    0,   48,   48,   48,   48,    0,   48,   48,   48,   60,
    0,    0,   60,   60,   60,   60,   60,   60,    0,    0,
   45,    0,   60,   60,   60,   60,    0,   60,   60,   60,
   89,  126,    0,    0,    0,   35,   89,  217,    0,    0,
    0,   35,  152,    0,    0,    0,    0,    0,    0,    0,
   92,    0,   91,    0,    0,    0,   92,    1,   91,    0,
    2,   89,  224,    3,    4,    5,   35,   71,    0,   72,
    6,   44,    7,    8,    0,    9,   10,   11,    0,    1,
    0,   92,   69,   91,  110,    3,    4,    5,   45,    0,
    0,    4,    6,  151,   70,    8,    0,    9,   10,   11,
   89,  264,    9,   10,   11,   35,   89,  322,    0,    0,
    0,   35,    0,   89,    0,    0,    0,    0,   35,    0,
   92,    0,   91,    0,    0,    0,   92,    0,   91,  110,
    0,    0,    0,   92,    0,   91,    4,    0,    0,    0,
    0,   84,   33,    0,    0,    0,    0,    9,   10,   11,
   85,   86,   87,   88,    1,    0,    0,    2,  243,  244,
    3,    4,    5,   59,    0,    0,    0,    6,    0,    7,
    8,    0,    9,   10,   11,    0,    1,    0,    0,   69,
  312,  313,    3,    4,    5,    0,    0,    0,    0,    6,
    0,   70,    8,    0,    9,   10,   11,    0,    0,    0,
    0,    1,    0,    0,   69,    0,    0,    3,    4,    5,
  152,    0,    0,    0,    6,    0,   70,    8,    0,    9,
   10,   11,    1,    0,    0,    2,    0,  328,    3,    4,
    5,   12,    0,    0,    0,    6,    0,    7,    8,    0,
    9,   10,   11,    0,    0,    0,    0,   84,   33,    0,
    0,    0,   45,   84,   33,    0,   85,   86,   87,   88,
    0,    0,   85,   86,   87,   88,    0,    0,    0,    0,
    0,    0,    0,  152,    0,    0,    0,    0,   84,   33,
    0,    0,    0,    0,    0,    0,    0,   85,   86,   87,
   88,    0,    0,    0,    0,    1,   61,    0,    2,    0,
    0,    3,    4,    5,    0,    0,    0,    0,    6,    0,
    7,    8,    0,    9,   10,   11,    0,   84,   33,  122,
    0,    0,    0,   84,   33,    0,   85,   86,   87,   88,
   84,   33,   85,   86,   87,   88,    0,    0,    0,   85,
   86,   87,   88,  130,    1,    0,    0,   69,    0,  355,
    3,    4,    5,    0,    0,    0,    0,    6,    0,   70,
    8,    0,    9,   10,   11,    1,  142,    0,    2,    0,
    0,    3,    4,    5,    0,    0,    0,    0,    6,    0,
    7,    8,    0,    9,   10,   11,    1,  160,    0,    2,
    0,    0,    3,    4,    5,    0,    0,    0,    0,    6,
    0,    7,    8,    0,    9,   10,   11,    1,  163,    0,
   69,    0,    0,    3,    4,    5,    0,    0,    0,    0,
    6,    0,   70,    8,    0,    9,   10,   11,    1,  169,
    0,    2,    0,    0,    3,    4,    5,    0,    0,    0,
    0,    6,    0,    7,    8,    0,    9,   10,   11,    0,
  198,    1,    0,    0,    2,    0,    0,    3,    4,    5,
    0,    0,    0,    0,    6,    0,    7,    8,    0,    9,
   10,   11,  228,    0,    0,    1,    0,    0,    2,    0,
    0,    3,    4,    5,    0,    0,    0,    0,    6,    0,
    7,    8,    0,    9,   10,   11,  232,    0,    1,    0,
    0,    2,    0,    0,    3,    4,    5,    0,    0,    0,
    0,    6,    0,    7,    8,    0,    9,   10,   11,    1,
  234,    0,   69,    0,    0,    3,    4,    5,    0,    0,
    0,    0,    6,    0,   70,    8,    0,    9,   10,   11,
    1,  236,    0,   69,    0,    0,    3,    4,    5,    0,
    0,    0,    0,    6,    0,   70,    8,    0,    9,   10,
   11,    1,  238,    0,   69,    0,    0,    3,    4,    5,
    0,    0,    0,    0,    6,    0,   70,    8,    0,    9,
   10,   11,    1,  277,    0,    2,    0,    0,    3,    4,
    5,    0,    0,    0,    0,    6,    0,    7,    8,    0,
    9,   10,   11,    0,    1,  285,    0,   69,    0,    0,
    3,    4,    5,    0,    0,    0,    0,    6,    0,   70,
    8,    0,    9,   10,   11,    0,  286,    0,    1,    0,
    0,   69,    0,    0,    3,    4,    5,    0,    0,    0,
  300,    6,    0,   70,    8,    0,    9,   10,   11,  288,
    0,    0,    1,    0,    0,   69,    0,    0,    3,    4,
    5,    0,    0,    0,    0,    6,  301,   70,    8,    0,
    9,   10,   11,    1,  325,    0,   69,    0,    0,    3,
    4,    5,    0,    0,    0,    0,    6,    0,   70,    8,
    0,    9,   10,   11,    1,  220,    0,   69,    0,  333,
    3,    4,    5,    0,    0,  134,    0,    6,    0,   70,
    8,    0,    9,   10,   11,    1,    0,    0,   69,    0,
    0,    3,    4,    5,    0,    0,    0,    0,    6,    0,
   70,    8,    0,    9,   10,   11,    0,    1,    0,    0,
   69,    0,    0,    3,    4,    5,    0,    0,    0,    0,
    6,    0,   70,    8,    0,    9,   10,   11,    1,    0,
    0,   69,    0,    0,    3,    4,    5,    0,    0,    0,
    0,    6,  110,   70,    8,    0,    9,   10,   11,    4,
    0,    1,    0,    0,   69,    0,    0,    3,    4,    5,
    9,   10,   11,    0,    6,    0,   70,    8,  110,    9,
   10,   11,    0,    0,    0,    4,    1,    0,    0,   69,
    0,    0,    3,    4,    5,    0,    9,   10,   11,    6,
    0,   70,    8,    0,    9,   10,   11,    1,    0,    0,
   69,  110,    0,    3,    4,    0,    0,  134,    4,    0,
    6,    0,   70,    8,  134,    9,   10,   11,    0,    9,
   10,   11,    0,    0,    0,  134,  134,  134,
};
}
static short yycheck[];
static { yycheck(); }
static void yycheck() {
yycheck = new short[] {                         30,
    0,   44,   47,   41,   40,   40,   44,    7,   40,   38,
   39,  258,   12,   30,   14,  123,   78,   41,   52,   43,
   54,   40,   63,   64,  123,   44,   14,   46,   44,  123,
   30,  125,   40,   40,   43,  125,   45,   40,   41,   70,
   71,  125,   61,   59,   43,   45,   77,   78,   89,   40,
  252,   51,   42,   70,   71,   96,  125,   47,  217,  123,
   60,   78,   41,   44,   56,   44,  125,  269,  125,   40,
   70,   71,   60,    0,   45,  104,  121,  125,   78,   44,
    7,   44,  161,  257,  129,   12,   44,   14,  112,   40,
   90,  170,  116,   44,  118,  119,   40,   41,  264,  133,
  162,  275,  276,  277,  306,  150,   40,  136,  137,  154,
   40,   41,   46,  112,  257,   45,   40,  276,   45,  118,
   44,   43,   44,   45,   51,  125,   44,   61,  159,   41,
  161,  162,   44,   60,   40,  152,  167,  178,  179,  170,
   40,   59,  159,  135,   41,  162,  138,   44,   41,  257,
   40,   44,  152,  312,   44,   45,  235,  202,  257,  159,
   40,   44,  162,   90,   44,  189,  190,  191,   44,   45,
  264,  195,  213,  257,  264,  175,  260,  206,   40,  263,
  278,  265,  227,  342,   38,   39,  217,   41,  272,   43,
  189,  190,  223,  257,   41,  264,   41,  257,  125,   44,
  217,   43,  233,   45,  235,  264,  223,  264,  239,   41,
  274,  370,  204,   41,  257,  374,  264,  217,   60,   61,
   62,  261,  262,  223,   41,  257,  255,   44,  261,  262,
  176,  177,  256,  257,  258,  271,  271,  282,  257,    0,
   41,  241,   43,  243,   45,  276,    7,  278,  175,  257,
  104,   12,    0,   14,  257,   44,  287,  256,  112,  276,
   41,  278,  116,   44,  118,  119,  295,  296,  309,   44,
  261,  262,  275,  276,  277,  299,  276,  257,  257,  308,
  271,  312,  136,  137,   45,   41,  257,  258,  319,   44,
   51,  257,   40,  293,   44,  312,  275,  276,  277,   60,
  261,  262,  319,    0,    0,   41,  335,   43,   44,   45,
    7,  342,  312,  257,  241,   12,  243,   14,   41,   41,
  116,   44,   41,  119,   44,  342,  371,  257,  258,   90,
  184,  275,  276,  277,   41,  189,  190,  191,   41,  370,
   41,  195,  342,  374,   40,    0,  181,  182,   45,   44,
   41,   44,  206,  370,   51,  261,  262,  374,   41,  125,
  257,  261,  262,   60,  125,  271,  293,  257,  258,  260,
  370,  271,   44,   44,  374,   44,    0,  125,  275,  276,
  277,  257,  258,  259,   90,   40,   41,   42,   43,   44,
   45,   44,   47,   90,   41,  191,   44,  262,  252,  195,
   44,  255,  256,  257,  258,   60,   61,   62,  123,   41,
  125,  262,  257,  262,  175,  269,   40,   41,   44,   43,
   44,   45,   44,    0,  266,  267,  268,  269,  125,  125,
  275,  276,  277,   44,   41,   44,   60,   61,   62,  167,
  257,  295,  296,   41,   44,  299,    0,   44,   41,   44,
  125,  262,  306,   44,  308,   44,   44,  262,  275,  276,
  277,  257,  258,   40,   41,   44,   43,   44,   45,  175,
  125,   44,   44,   44,   44,  262,  257,  272,  175,    0,
  241,  335,  243,   60,   61,   62,   40,   41,   44,   43,
   44,   45,   40,  271,  275,  276,  277,   41,   40,  261,
    0,  125,   41,  299,   44,  233,   60,   61,   62,  257,
  262,  239,  260,  261,  262,  263,  264,  265,   44,   40,
  123,    0,  270,  271,  272,  273,    0,  275,  276,  277,
    0,  257,  293,    0,  257,  241,   41,  243,  257,   41,
   40,  272,  257,   41,  241,   12,  243,   14,  125,  264,
   41,    0,  275,  276,  277,  260,  275,  276,  277,  287,
   12,  257,   71,   45,  260,  261,  262,  263,  264,  265,
   40,  125,  152,  319,  270,  271,  272,  273,   45,  275,
  276,  277,  257,    3,   51,  260,  114,  293,  263,   95,
  265,   40,   -1,   60,   -1,    0,  293,  272,   -1,   -1,
   -1,   41,  257,   -1,  125,  260,  261,  262,  263,  264,
  265,  266,  267,  268,  269,  270,  271,  272,  273,   -1,
  275,  276,  277,    0,   -1,  125,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,  257,   -1,   40,  260,  261,  262,  263,
  264,  265,  266,  267,  268,  269,  270,  271,  272,  273,
  257,  275,  276,  277,  257,  125,   -1,    0,  125,  257,
   -1,  264,   -1,   40,   -1,   -1,   -1,   -1,  275,  276,
  277,  274,  275,  276,  277,   -1,  125,  275,  276,  277,
  257,   -1,   -1,  260,  261,  262,  263,  264,  265,  266,
  267,  268,  269,  270,  271,  272,  273,   40,  275,  276,
  277,   -1,   -1,  257,   -1,    0,  260,  261,  262,  263,
  264,  265,  266,  267,  268,  269,  270,  271,  272,  273,
  125,  275,  276,  277,   40,   -1,    0,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,  257,   -1,   -1,  260,
  261,  262,  263,  264,  265,   40,   -1,   -1,  125,  270,
  271,  272,  273,   -1,  275,  276,  277,  257,  125,   -1,
  260,  261,  262,  263,  264,  265,   40,   -1,   -1,   -1,
  270,  271,  272,  273,   -1,  275,  276,  277,    0,   -1,
   -1,   -1,  125,   -1,   -1,   -1,   -1,  257,   40,   -1,
  260,  261,  262,  263,  264,  265,   -1,   -1,   -1,    0,
  270,  271,  272,  273,   -1,  275,  276,  277,  257,  125,
   -1,  260,  261,  262,  263,  264,  265,  257,   40,   -1,
   -1,  270,  271,  272,  273,  257,  275,  276,  277,   -1,
  125,   -1,  264,   -1,   -1,  275,  276,  277,   -1,   40,
   -1,   -1,   -1,  275,  276,  277,   -1,   -1,   -1,   -1,
   -1,  125,  257,   -1,   -1,  260,  261,  262,  263,  264,
  265,   -1,   -1,   -1,   -1,  270,  271,  272,  273,   -1,
  275,  276,  277,  125,   -1,   -1,   -1,   -1,   40,   -1,
  257,   -1,   -1,  260,  261,  262,  263,  264,  265,   -1,
  257,   -1,   -1,  270,  271,  272,  273,  264,  275,  276,
  277,   -1,   -1,  125,   -1,   -1,   -1,   40,  275,  276,
  277,   -1,   -1,   -1,  257,   -1,   -1,  260,  261,  262,
  263,  264,  265,   -1,  125,   -1,   -1,  270,  271,  272,
  273,   40,  275,  276,  277,   -1,   -1,   -1,   -1,  123,
   -1,  257,   -1,   -1,  260,  261,  262,  263,  264,  265,
   -1,   -1,   40,   -1,  270,  271,  272,  273,   -1,  275,
  276,  277,  257,  125,   -1,  260,  261,  262,  263,  264,
  265,   -1,   -1,   -1,   -1,  270,  271,  272,  273,   -1,
  275,  276,  277,  257,  125,   -1,  260,  261,  262,  263,
  264,  265,  125,   -1,   -1,   -1,  270,  271,  272,  273,
   40,  275,  276,  277,   44,  257,   -1,   -1,  260,  261,
  262,  263,  264,  265,   -1,   -1,  125,   -1,  270,  271,
  272,  273,   40,  275,  276,  277,   44,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,  257,   -1,  125,  260,  261,
  262,  263,  264,  265,   -1,   -1,   -1,   -1,  270,  271,
  272,  273,   -1,  275,  276,  277,  257,   -1,   -1,  260,
  261,  262,  263,  264,  265,   -1,   -1,   -1,   -1,  270,
  271,  272,  273,  257,  275,  276,  277,   -1,   -1,   -1,
  264,   -1,   -1,  123,   40,   41,   -1,   -1,   -1,   45,
   -1,  275,  276,  277,   -1,  257,   -1,   -1,  260,  261,
  262,  263,  264,  265,   60,  123,   62,   -1,  270,  271,
  272,  273,  125,  275,  276,  277,  257,   -1,   -1,   -1,
   -1,   -1,   -1,  264,  257,   -1,   -1,  260,  261,  262,
  263,  264,  265,   -1,  275,  276,  277,  270,  271,  272,
  273,   -1,  275,  276,  277,   -1,   -1,   -1,  257,   -1,
   -1,  260,  261,  262,  263,  264,  265,  125,   -1,   -1,
   -1,  270,  271,  272,  273,   -1,  275,  276,  277,  257,
   -1,   -1,  260,  261,  262,  263,  264,  265,   -1,   -1,
  123,   -1,  270,  271,  272,  273,   -1,  275,  276,  277,
   40,   41,   -1,   -1,   -1,   45,   40,   41,   -1,   -1,
   -1,   45,  123,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   60,   -1,   62,   -1,   -1,   -1,   60,  257,   62,   -1,
  260,   40,   41,  263,  264,  265,   45,  123,   -1,  125,
  270,  271,  272,  273,   -1,  275,  276,  277,   -1,  257,
   -1,   60,  260,   62,  257,  263,  264,  265,  123,   -1,
   -1,  264,  270,  271,  272,  273,   -1,  275,  276,  277,
   40,   41,  275,  276,  277,   45,   40,   41,   -1,   -1,
   -1,   45,   -1,   40,   -1,   -1,   -1,   -1,   45,   -1,
   60,   -1,   62,   -1,   -1,   -1,   60,   -1,   62,  257,
   -1,   -1,   -1,   60,   -1,   62,  264,   -1,   -1,   -1,
   -1,  257,  258,   -1,   -1,   -1,   -1,  275,  276,  277,
  266,  267,  268,  269,  257,   -1,   -1,  260,  261,  262,
  263,  264,  265,  125,   -1,   -1,   -1,  270,   -1,  272,
  273,   -1,  275,  276,  277,   -1,  257,   -1,   -1,  260,
  261,  262,  263,  264,  265,   -1,   -1,   -1,   -1,  270,
   -1,  272,  273,   -1,  275,  276,  277,   -1,   -1,   -1,
   -1,  257,   -1,   -1,  260,   -1,   -1,  263,  264,  265,
  123,   -1,   -1,   -1,  270,   -1,  272,  273,   -1,  275,
  276,  277,  257,   -1,   -1,  260,   -1,  262,  263,  264,
  265,  123,   -1,   -1,   -1,  270,   -1,  272,  273,   -1,
  275,  276,  277,   -1,   -1,   -1,   -1,  257,  258,   -1,
   -1,   -1,  123,  257,  258,   -1,  266,  267,  268,  269,
   -1,   -1,  266,  267,  268,  269,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,  123,   -1,   -1,   -1,   -1,  257,  258,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,  266,  267,  268,
  269,   -1,   -1,   -1,   -1,  257,  125,   -1,  260,   -1,
   -1,  263,  264,  265,   -1,   -1,   -1,   -1,  270,   -1,
  272,  273,   -1,  275,  276,  277,   -1,  257,  258,  125,
   -1,   -1,   -1,  257,  258,   -1,  266,  267,  268,  269,
  257,  258,  266,  267,  268,  269,   -1,   -1,   -1,  266,
  267,  268,  269,  125,  257,   -1,   -1,  260,   -1,  262,
  263,  264,  265,   -1,   -1,   -1,   -1,  270,   -1,  272,
  273,   -1,  275,  276,  277,  257,  125,   -1,  260,   -1,
   -1,  263,  264,  265,   -1,   -1,   -1,   -1,  270,   -1,
  272,  273,   -1,  275,  276,  277,  257,  125,   -1,  260,
   -1,   -1,  263,  264,  265,   -1,   -1,   -1,   -1,  270,
   -1,  272,  273,   -1,  275,  276,  277,  257,  125,   -1,
  260,   -1,   -1,  263,  264,  265,   -1,   -1,   -1,   -1,
  270,   -1,  272,  273,   -1,  275,  276,  277,  257,  125,
   -1,  260,   -1,   -1,  263,  264,  265,   -1,   -1,   -1,
   -1,  270,   -1,  272,  273,   -1,  275,  276,  277,   -1,
  125,  257,   -1,   -1,  260,   -1,   -1,  263,  264,  265,
   -1,   -1,   -1,   -1,  270,   -1,  272,  273,   -1,  275,
  276,  277,  125,   -1,   -1,  257,   -1,   -1,  260,   -1,
   -1,  263,  264,  265,   -1,   -1,   -1,   -1,  270,   -1,
  272,  273,   -1,  275,  276,  277,  125,   -1,  257,   -1,
   -1,  260,   -1,   -1,  263,  264,  265,   -1,   -1,   -1,
   -1,  270,   -1,  272,  273,   -1,  275,  276,  277,  257,
  125,   -1,  260,   -1,   -1,  263,  264,  265,   -1,   -1,
   -1,   -1,  270,   -1,  272,  273,   -1,  275,  276,  277,
  257,  125,   -1,  260,   -1,   -1,  263,  264,  265,   -1,
   -1,   -1,   -1,  270,   -1,  272,  273,   -1,  275,  276,
  277,  257,  125,   -1,  260,   -1,   -1,  263,  264,  265,
   -1,   -1,   -1,   -1,  270,   -1,  272,  273,   -1,  275,
  276,  277,  257,  125,   -1,  260,   -1,   -1,  263,  264,
  265,   -1,   -1,   -1,   -1,  270,   -1,  272,  273,   -1,
  275,  276,  277,   -1,  257,  125,   -1,  260,   -1,   -1,
  263,  264,  265,   -1,   -1,   -1,   -1,  270,   -1,  272,
  273,   -1,  275,  276,  277,   -1,  125,   -1,  257,   -1,
   -1,  260,   -1,   -1,  263,  264,  265,   -1,   -1,   -1,
  125,  270,   -1,  272,  273,   -1,  275,  276,  277,  125,
   -1,   -1,  257,   -1,   -1,  260,   -1,   -1,  263,  264,
  265,   -1,   -1,   -1,   -1,  270,  125,  272,  273,   -1,
  275,  276,  277,  257,  125,   -1,  260,   -1,   -1,  263,
  264,  265,   -1,   -1,   -1,   -1,  270,   -1,  272,  273,
   -1,  275,  276,  277,  257,  125,   -1,  260,   -1,  125,
  263,  264,  265,   -1,   -1,  125,   -1,  270,   -1,  272,
  273,   -1,  275,  276,  277,  257,   -1,   -1,  260,   -1,
   -1,  263,  264,  265,   -1,   -1,   -1,   -1,  270,   -1,
  272,  273,   -1,  275,  276,  277,   -1,  257,   -1,   -1,
  260,   -1,   -1,  263,  264,  265,   -1,   -1,   -1,   -1,
  270,   -1,  272,  273,   -1,  275,  276,  277,  257,   -1,
   -1,  260,   -1,   -1,  263,  264,  265,   -1,   -1,   -1,
   -1,  270,  257,  272,  273,   -1,  275,  276,  277,  264,
   -1,  257,   -1,   -1,  260,   -1,   -1,  263,  264,  265,
  275,  276,  277,   -1,  270,   -1,  272,  273,  257,  275,
  276,  277,   -1,   -1,   -1,  264,  257,   -1,   -1,  260,
   -1,   -1,  263,  264,  265,   -1,  275,  276,  277,  270,
   -1,  272,  273,   -1,  275,  276,  277,  257,   -1,   -1,
  260,  257,   -1,  263,  264,   -1,   -1,  257,  264,   -1,
  270,   -1,  272,  273,  264,  275,  276,  277,   -1,  275,
  276,  277,   -1,   -1,   -1,  275,  276,  277,
};
}
final static short YYFINAL=13;
final static short YYMAXTOKEN=278;
final static String yyname[] = {
"end-of-file",null,null,null,null,null,null,null,null,null,null,null,null,null,
null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,
null,null,null,null,null,null,null,null,null,null,"'('","')'","'*'","'+'","','",
"'-'","'.'","'/'",null,null,null,null,null,null,null,null,null,null,null,"';'",
"'<'","'='","'>'",null,null,null,null,null,null,null,null,null,null,null,null,
null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,
null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,
null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,
"'{'",null,"'}'",null,null,null,null,null,null,null,null,null,null,null,null,
null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,
null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,
null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,
null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,
null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,
null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,
null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,
null,null,null,null,null,null,null,"ID","CTE","CADENA","IF","ELSE","ENDIF",
"PRINT","VOID","RETURN","COMP_MAYOR_IGUAL","COMP_MENOR_IGUAL","COMP_IGUAL",
"COMP_DISTINTO","CLASS","WHILE","DO","INTERFACE","IMPLEMENT","INT","ULONG",
"FLOAT","OPERADOR_MENOS",
};
final static String yyrule[] = {
"$accept : programa",
"programa : '{' sentencias '}'",
"programa : sentencias '}'",
"programa : '{' sentencias",
"programa : '{' '}'",
"programa :",
"sentencias : sentencia",
"sentencias : sentencias sentencia",
"sentencia : sentencia_declarativa",
"sentencia : sentencia_ejecutable",
"sentencia_ejecutable : sentencia_asignacion",
"sentencia_ejecutable : sentencia_invocacion_funcion",
"sentencia_ejecutable : sentencia_imprimir",
"sentencia_ejecutable : sentencia_seleccion",
"sentencia_ejecutable : sentencia_iterativa_do_while",
"sentencia_ejecutable : sentencia_return",
"sentencias_funcion : sentencia_funcion",
"sentencias_funcion : sentencias_funcion sentencia_funcion",
"sentencia_funcion : sentencia_declarativa",
"sentencia_funcion : sentencia_ejecutable_funcion",
"sentencia_ejecutable_funcion : sentencia_asignacion",
"sentencia_ejecutable_funcion : sentencia_invocacion_funcion",
"sentencia_ejecutable_funcion : sentencia_imprimir",
"sentencia_ejecutable_funcion : sentencia_seleccion_funcion",
"sentencia_ejecutable_funcion : sentencia_iterativa_do_while_funcion",
"sentencia_return : RETURN ','",
"sentencia_return : RETURN",
"sentencia_iterativa_do_while : DO bloque_sentencias_ejecutables WHILE '(' condicion ')' ','",
"sentencia_iterativa_do_while : DO bloque_sentencias_ejecutables WHILE '(' condicion ')'",
"sentencia_iterativa_do_while : DO WHILE '(' condicion ')' ','",
"sentencia_iterativa_do_while : DO bloque_sentencias_ejecutables WHILE '(' ')' ','",
"sentencia_iterativa_do_while : DO bloque_sentencias_ejecutables '(' condicion ')' ','",
"sentencia_iterativa_do_while : DO WHILE ','",
"sentencia_iterativa_do_while : DO bloque_sentencias_ejecutables WHILE ','",
"sentencia_iterativa_do_while : DO ','",
"sentencia_iterativa_do_while : DO '(' condicion ')' ','",
"sentencia_iterativa_do_while : DO '(' ')' ','",
"sentencia_iterativa_do_while : DO '(' ')'",
"sentencia_iterativa_do_while_funcion : DO bloque_sentencias_ejecutables_funcion WHILE '(' condicion ')' ','",
"$$1 :",
"sentencia_iterativa_do_while_funcion : DO bloque_sentencias_ejecutables_funcion WHILE '(' condicion ')' $$1 DO WHILE '(' condicion ')' ','",
"sentencia_iterativa_do_while_funcion : DO bloque_sentencias_ejecutables_funcion WHILE '(' ')' ','",
"sentencia_iterativa_do_while_funcion : DO bloque_sentencias_ejecutables_funcion '(' condicion ')' ','",
"sentencia_iterativa_do_while_funcion : DO WHILE ','",
"sentencia_iterativa_do_while_funcion : DO bloque_sentencias_ejecutables_funcion WHILE ','",
"sentencia_iterativa_do_while_funcion : DO ','",
"sentencia_iterativa_do_while_funcion : DO '(' condicion ')' ','",
"sentencia_iterativa_do_while_funcion : DO '(' ')' ','",
"sentencia_iterativa_do_while_funcion : DO '(' ')'",
"sentencia_seleccion : IF '(' condicion ')' bloque_sentencias_ejecutables ELSE bloque_sentencias_ejecutables ENDIF ','",
"sentencia_seleccion : IF '(' condicion ')' bloque_sentencias_ejecutables ENDIF ','",
"sentencia_seleccion : IF '(' condicion ')' bloque_sentencias_ejecutables ELSE bloque_sentencias_ejecutables ENDIF",
"sentencia_seleccion : IF '(' condicion ')' bloque_sentencias_ejecutables ENDIF",
"sentencia_seleccion : IF '(' ')' bloque_sentencias_ejecutables ELSE bloque_sentencias_ejecutables ENDIF ','",
"sentencia_seleccion : IF '(' ')' bloque_sentencias_ejecutables ENDIF ','",
"sentencia_seleccion : IF '(' condicion ')' ELSE bloque_sentencias_ejecutables ENDIF ','",
"sentencia_seleccion : IF '(' condicion ')' bloque_sentencias_ejecutables ELSE ENDIF ','",
"sentencia_seleccion : IF '(' condicion ')' ENDIF ','",
"sentencia_seleccion_funcion : IF '(' condicion ')' bloque_sentencias_ejecutables_funcion ELSE bloque_sentencias_ejecutables_funcion ENDIF ','",
"sentencia_seleccion_funcion : IF '(' condicion ')' bloque_sentencias_ejecutables_funcion ENDIF ','",
"sentencia_seleccion_funcion : IF '(' condicion ')' bloque_sentencias_ejecutables_funcion ELSE bloque_sentencias_ejecutables_funcion ENDIF",
"$$2 :",
"sentencia_seleccion_funcion : IF '(' condicion ')' bloque_sentencias_ejecutables_funcion ENDIF $$2 IF '(' ')' bloque_sentencias_ejecutables_funcion ELSE bloque_sentencias_ejecutables_funcion ENDIF ','",
"sentencia_seleccion_funcion : IF '(' ')' bloque_sentencias_ejecutables_funcion ENDIF ','",
"sentencia_seleccion_funcion : IF '(' condicion ')' ELSE bloque_sentencias_ejecutables_funcion ENDIF ','",
"sentencia_seleccion_funcion : IF '(' condicion ')' bloque_sentencias_ejecutables_funcion ELSE ENDIF ','",
"sentencia_seleccion_funcion : IF '(' condicion ')' ENDIF ','",
"bloque_sentencias_ejecutables : sentencia_ejecutable",
"bloque_sentencias_ejecutables : '{' sentencias_ejecutables '}'",
"bloque_sentencias_ejecutables : '{' sentencias_ejecutables",
"bloque_sentencias_ejecutables : sentencias_ejecutables '}'",
"bloque_sentencias_ejecutables : '{' '}'",
"bloque_sentencias_ejecutables : sentencia_declarativa",
"bloque_sentencias_ejecutables_funcion : sentencia_ejecutable_funcion",
"bloque_sentencias_ejecutables_funcion : sentencia_return",
"bloque_sentencias_ejecutables_funcion : sentencia_declarativa",
"bloque_sentencias_ejecutables_funcion : '{' sentencias_ejecutables_funcion '}'",
"bloque_sentencias_ejecutables_funcion : '{' sentencias_ejecutables_funcion sentencia_return '}'",
"bloque_sentencias_ejecutables_funcion : '{' sentencias_ejecutables_funcion sentencia_return sentencias_ejecutables_funcion_inalcanzable '}'",
"bloque_sentencias_ejecutables_funcion : sentencias_ejecutables_funcion '}'",
"bloque_sentencias_ejecutables_funcion : sentencias_ejecutables_funcion sentencia_return '}'",
"bloque_sentencias_ejecutables_funcion : '{' sentencias_ejecutables_funcion",
"bloque_sentencias_ejecutables_funcion : '{' sentencias_ejecutables_funcion sentencia_return",
"bloque_sentencias_ejecutables_funcion : '{' '}'",
"sentencias_ejecutables_funcion_inalcanzable : sentencia_ejecutable_funcion_inalcanzable",
"sentencias_ejecutables_funcion_inalcanzable : sentencias_ejecutables_funcion_inalcanzable sentencia_ejecutable_funcion_inalcanzable",
"sentencia_ejecutable_funcion_inalcanzable : sentencia_return",
"sentencia_ejecutable_funcion_inalcanzable : sentencia_ejecutable_funcion",
"sentencias_ejecutables : sentencia_ejecutable",
"sentencias_ejecutables : sentencias_ejecutables sentencia_ejecutable",
"sentencias_ejecutables : sentencia_declarativa",
"sentencias_ejecutables : sentencias_ejecutables sentencia_declarativa",
"sentencias_ejecutables_funcion : sentencia_ejecutable_funcion",
"sentencias_ejecutables_funcion : sentencias_ejecutables_funcion sentencia_ejecutable_funcion",
"sentencias_ejecutables_funcion : sentencia_declarativa",
"sentencias_ejecutables_funcion : sentencias_ejecutables_funcion sentencia_declarativa",
"sentencia_imprimir : PRINT CADENA ','",
"sentencia_imprimir : PRINT CADENA",
"sentencia_imprimir : PRINT ','",
"sentencia_imprimir : PRINT ID ','",
"sentencia_imprimir : PRINT ID",
"sentencia_imprimir : PRINT constante ','",
"sentencia_imprimir : PRINT constante",
"sentencia_invocacion_funcion : sentencia_objeto_identificador '(' expresion ')' ','",
"sentencia_invocacion_funcion : sentencia_objeto_identificador '(' ')' ','",
"sentencia_invocacion_funcion : sentencia_objeto_identificador '(' expresion ',' lista_expresiones_invocacion_funcion_exceso ')' ','",
"sentencia_invocacion_funcion : sentencia_objeto_identificador '(' expresion ')'",
"sentencia_invocacion_funcion : sentencia_objeto_identificador '(' ')'",
"sentencia_invocacion_funcion : sentencia_objeto_identificador '(' expresion ',' lista_expresiones_invocacion_funcion_exceso ')'",
"lista_expresiones_invocacion_funcion_exceso : expresion",
"lista_expresiones_invocacion_funcion_exceso : lista_expresiones_invocacion_funcion_exceso ',' expresion",
"sentencia_asignacion : sentencia_objeto_identificador '=' expresion ','",
"sentencia_asignacion : sentencia_objeto_identificador '=' expresion",
"sentencia_asignacion : sentencia_objeto_identificador '=' ','",
"sentencia_objeto_identificador : ID",
"sentencia_objeto_identificador : sentencia_objeto_identificador '.' ID",
"sentencia_declarativa : declaracion_variable",
"sentencia_declarativa : declaracion_funcion",
"sentencia_declarativa : declaracion_clase",
"sentencia_declarativa : declaracion_interfaz",
"declaracion_variable : tipo lista_de_variables ','",
"declaracion_variable : tipo lista_de_variables",
"declaracion_variable : tipo ','",
"declaracion_interfaz : INTERFACE ID '{' bloque_encabezado_funcion_declaracion_interfaz '}'",
"declaracion_interfaz : INTERFACE '{' bloque_encabezado_funcion_declaracion_interfaz '}'",
"declaracion_interfaz : INTERFACE bloque_encabezado_funcion_declaracion_interfaz '}'",
"declaracion_interfaz : INTERFACE '}'",
"declaracion_interfaz : INTERFACE ID bloque_encabezado_funcion_declaracion_interfaz '}'",
"declaracion_interfaz : INTERFACE ID '}'",
"bloque_encabezado_funcion_declaracion_interfaz : encabezado_funcion_declaracion_interfaz",
"bloque_encabezado_funcion_declaracion_interfaz : bloque_encabezado_funcion_declaracion_interfaz encabezado_funcion_declaracion_interfaz",
"encabezado_funcion_declaracion_interfaz : encabezado_funcion_interfaz ','",
"encabezado_funcion_declaracion_interfaz : encabezado_funcion_interfaz",
"sentencia_declarativa_clase : tipo lista_de_variables ','",
"sentencia_declarativa_clase : tipo lista_de_variables",
"sentencia_declarativa_clase : declaracion_funcion",
"sentencia_declarativa_clase : ID ','",
"declaracion_clase : CLASS ID '{' bloque_sentencias_declarativas_clase '}'",
"declaracion_clase : CLASS ID IMPLEMENT ID '{' bloque_sentencias_declarativas_clase '}'",
"declaracion_clase : CLASS '{' bloque_sentencias_declarativas_clase '}'",
"declaracion_clase : CLASS IMPLEMENT ID",
"declaracion_clase : CLASS ID IMPLEMENT '{' bloque_sentencias_declarativas_clase '}'",
"declaracion_clase : CLASS IMPLEMENT '{' bloque_sentencias_declarativas_clase '}'",
"declaracion_clase : CLASS ID bloque_sentencias_declarativas_clase '}'",
"declaracion_clase : CLASS ID IMPLEMENT ID bloque_sentencias_declarativas_clase '}'",
"bloque_sentencias_declarativas_clase : sentencia_declarativa_clase",
"bloque_sentencias_declarativas_clase : bloque_sentencias_declarativas_clase sentencia_declarativa_clase",
"declaracion_funcion : encabezado_funcion cuerpo_funcion",
"encabezado_funcion : VOID ID '(' parametro_funcion ')'",
"encabezado_funcion : VOID ID '(' ')'",
"encabezado_funcion : VOID ID '(' parametro_funcion ',' lista_parametros_funcion_exceso ')'",
"encabezado_funcion : VOID ID '(' parametro_funcion lista_parametros_funcion_exceso ')'",
"encabezado_funcion : VOID '(' parametro_funcion ')'",
"encabezado_funcion : VOID '(' ')'",
"encabezado_funcion : VOID ID parametro_funcion ')'",
"encabezado_funcion : VOID ID ')'",
"encabezado_funcion_interfaz : VOID ID '(' parametro_funcion ')'",
"encabezado_funcion_interfaz : VOID ID '(' ')'",
"encabezado_funcion_interfaz : VOID ID '(' parametro_funcion ',' lista_parametros_funcion_exceso ')'",
"encabezado_funcion_interfaz : VOID ID '(' parametro_funcion lista_parametros_funcion_exceso ')'",
"encabezado_funcion_interfaz : VOID '(' parametro_funcion ')'",
"encabezado_funcion_interfaz : VOID '(' ')'",
"encabezado_funcion_interfaz : VOID ID parametro_funcion ')'",
"encabezado_funcion_interfaz : VOID ID ')'",
"cuerpo_funcion : '{' sentencias_funcion sentencia_return '}'",
"cuerpo_funcion : '{' sentencia_return '}'",
"cuerpo_funcion : '{' sentencias_funcion sentencia_return sentencias_funcion_inalcanzable '}'",
"cuerpo_funcion : '{' sentencia_return sentencias_funcion_inalcanzable '}'",
"cuerpo_funcion : '{' sentencias_funcion '}'",
"cuerpo_funcion : '{' '}'",
"cuerpo_funcion : sentencias_funcion sentencia_return '}'",
"cuerpo_funcion : sentencia_return '}'",
"cuerpo_funcion : sentencias_funcion sentencia_return sentencias_funcion_inalcanzable '}'",
"cuerpo_funcion : sentencia_return sentencias_funcion_inalcanzable '}'",
"cuerpo_funcion : sentencias_funcion '}'",
"cuerpo_funcion : '}'",
"sentencias_funcion_inalcanzable : sentencia_funcion_inalcanzable",
"sentencias_funcion_inalcanzable : sentencias_funcion_inalcanzable sentencia_funcion_inalcanzable",
"sentencia_funcion_inalcanzable : sentencia_declarativa",
"sentencia_funcion_inalcanzable : sentencia_return",
"sentencia_funcion_inalcanzable : sentencia_ejecutable_funcion",
"lista_parametros_funcion_exceso : parametro_funcion",
"lista_parametros_funcion_exceso : lista_parametros_funcion_exceso ',' parametro_funcion",
"lista_parametros_funcion_exceso : lista_parametros_funcion_exceso parametro_funcion",
"parametro_funcion : tipo ID",
"lista_de_variables : ID",
"lista_de_variables : lista_de_variables ';' ID",
"tipo : INT",
"tipo : ULONG",
"tipo : FLOAT",
"tipo : ID",
"condicion : expresion comparador expresion",
"condicion : expresion comparador",
"condicion : comparador expresion",
"condicion : expresion '=' expresion",
"comparador : COMP_MAYOR_IGUAL",
"comparador : COMP_MENOR_IGUAL",
"comparador : COMP_IGUAL",
"comparador : COMP_DISTINTO",
"comparador : '>'",
"comparador : '<'",
"expresion : expresion '+' termino",
"expresion : expresion '-' termino",
"expresion : termino",
"termino : termino '*' factor",
"termino : termino '/' factor",
"termino : factor",
"factor : ID",
"factor : ID OPERADOR_MENOS",
"factor : constante",
"factor : '(' expresion ')'",
"constante : CTE",
"constante : '-' CTE",
};

//#line 414 "./src/compilador/gramatica.y"

public static AnalizadorLexico lexico = null;
public static GeneracionCodigoIntermedio genCodigoIntermedio = GeneracionCodigoIntermedio.getInstance();
public static Logger logger = Logger.getInstance();
public static TablaDeSimbolos ts = TablaDeSimbolos.getInstance();
public static Parser parser = null;
public static int MAX_INT_VALUE = (int) (Math.pow(2, 15) - 1);

/** Chequea, para los INT, que el valor positivo no supere el valor maximo */
public void corregirConstantePositivaEntera(String constante) {
	if (constante.contains("_i")) {
		//se recibio un INT con signo positivo
		boolean exceptionOutOfRange = false;
		int cte = 0;
		String constanteValue = constante.toString().split("_")[0];

		try {
			cte = Integer.parseInt(constanteValue);
		} catch (NumberFormatException e) {
			exceptionOutOfRange = true;
		}

		if (cte > MAX_INT_VALUE || exceptionOutOfRange) {
			logger.logWarning("[Parser] Rango invalido para la constante: " + constante + ", se trunca al valor " + MAX_INT_VALUE + "_i");

			ts.swapLexemas(constante, MAX_INT_VALUE + "_i");
		}
	}
}

public void constanteConSigno(String constante) {
	/** Check de float negativos */
	if (constante.contains(".")) {
		String negConstante = "-"+constante;
		ts.swapLexemas(constante, negConstante);
	} else {

		if (constante.contains("_ul")) {
			//se recibio un ULONG con signo negativo
			logger.logWarning("[Parser] No se admiten ULONG con valores negativos: " + "-"+constante + ", se trunca a 0_ul");
		
			ts.swapLexemas(constante, "0_ul");
		} else {
			// se recibio un INT negativo
			String negConstante = "-"+constante;
			ts.swapLexemas(constante, negConstante);
		}
	}
}	

public int yylex() {
	return lexico.yylex(parser);
}

public void yyerror(String error) {
	logger.logError(error);
}

public static void main(String[] args) {
	if (args.length == 0) {
		System.err.println("No se especifico ningun archivo de codigo");
	} else {
		String archivo_a_leer = args[0];
		System.out.println("Se va a leer archivo " + archivo_a_leer);
		
		FileReaderHelper fileHelper = new FileReaderHelper();
		
		boolean fileOpenSuccess = fileHelper.open(archivo_a_leer);
		
		if (fileOpenSuccess) {
			parser = new Parser();
			lexico = new AnalizadorLexico(fileHelper);
			
	        parser.run();
	
			String path = new File(archivo_a_leer).getAbsolutePath();
	        
	        Output out = new Output(path);
	        
	        out.saveFile("codigo-lexico.txt", logger.getLexico());
			out.saveFile("codigo-sintactico.txt", logger.getSintactico());
			out.saveFile("tabla-de-simbolos.txt", ts.print());
		}
	}
}
//#line 1036 "Parser.java"
//###############################################################
// method: yylexdebug : check lexer state
//###############################################################
void yylexdebug(int state,int ch)
{
String s=null;
  if (ch < 0) ch=0;
  if (ch <= YYMAXTOKEN) //check index bounds
     s = yyname[ch];    //now get it
  if (s==null)
    s = "illegal-symbol";
  debug("state "+state+", reading "+ch+" ("+s+")");
}





//The following are now global, to aid in error reporting
int yyn;       //next next thing to do
int yym;       //
int yystate;   //current parsing state from state table
String yys;    //current token string


//###############################################################
// method: yyparse : parse input and execute indicated items
//###############################################################
int yyparse()
{
boolean doaction;
  init_stacks();
  yynerrs = 0;
  yyerrflag = 0;
  yychar = -1;          //impossible char forces a read
  yystate=0;            //initial state
  state_push(yystate);  //save it
  val_push(yylval);     //save empty value
  while (true) //until parsing is done, either correctly, or w/error
    {
    doaction=true;
    if (yydebug) debug("loop"); 
    //#### NEXT ACTION (from reduction table)
    for (yyn=yydefred[yystate];yyn==0;yyn=yydefred[yystate])
      {
      if (yydebug) debug("yyn:"+yyn+"  state:"+yystate+"  yychar:"+yychar);
      if (yychar < 0)      //we want a char?
        {
        yychar = yylex();  //get next token
        if (yydebug) debug(" next yychar:"+yychar);
        //#### ERROR CHECK ####
        if (yychar < 0)    //it it didn't work/error
          {
          yychar = 0;      //change it to default string (no -1!)
          if (yydebug)
            yylexdebug(yystate,yychar);
          }
        }//yychar<0
      yyn = yysindex[yystate];  //get amount to shift by (shift index)
      if ((yyn != 0) && (yyn += yychar) >= 0 &&
          yyn <= YYTABLESIZE && yycheck[yyn] == yychar)
        {
        if (yydebug)
          debug("state "+yystate+", shifting to state "+yytable[yyn]);
        //#### NEXT STATE ####
        yystate = yytable[yyn];//we are in a new state
        state_push(yystate);   //save it
        val_push(yylval);      //push our lval as the input for next rule
        yychar = -1;           //since we have 'eaten' a token, say we need another
        if (yyerrflag > 0)     //have we recovered an error?
           --yyerrflag;        //give ourselves credit
        doaction=false;        //but don't process yet
        break;   //quit the yyn=0 loop
        }

    yyn = yyrindex[yystate];  //reduce
    if ((yyn !=0 ) && (yyn += yychar) >= 0 &&
            yyn <= YYTABLESIZE && yycheck[yyn] == yychar)
      {   //we reduced!
      if (yydebug) debug("reduce");
      yyn = yytable[yyn];
      doaction=true; //get ready to execute
      break;         //drop down to actions
      }
    else //ERROR RECOVERY
      {
      if (yyerrflag==0)
        {
        yyerror("syntax error");
        yynerrs++;
        }
      if (yyerrflag < 3) //low error count?
        {
        yyerrflag = 3;
        while (true)   //do until break
          {
          if (stateptr<0)   //check for under & overflow here
            {
            yyerror("stack underflow. aborting...");  //note lower case 's'
            return 1;
            }
          yyn = yysindex[state_peek(0)];
          if ((yyn != 0) && (yyn += YYERRCODE) >= 0 &&
                    yyn <= YYTABLESIZE && yycheck[yyn] == YYERRCODE)
            {
            if (yydebug)
              debug("state "+state_peek(0)+", error recovery shifting to state "+yytable[yyn]+" ");
            yystate = yytable[yyn];
            state_push(yystate);
            val_push(yylval);
            doaction=false;
            break;
            }
          else
            {
            if (yydebug)
              debug("error recovery discarding state "+state_peek(0)+" ");
            if (stateptr<0)   //check for under & overflow here
              {
              yyerror("Stack underflow. aborting...");  //capital 'S'
              return 1;
              }
            state_pop();
            val_pop();
            }
          }
        }
      else            //discard this token
        {
        if (yychar == 0)
          return 1; //yyabort
        if (yydebug)
          {
          yys = null;
          if (yychar <= YYMAXTOKEN) yys = yyname[yychar];
          if (yys == null) yys = "illegal-symbol";
          debug("state "+yystate+", error recovery discards token "+yychar+" ("+yys+")");
          }
        yychar = -1;  //read another
        }
      }//end error recovery
    }//yyn=0 loop
    if (!doaction)   //any reason not to proceed?
      continue;      //skip action
    yym = yylen[yyn];          //get count of terminals on rhs
    if (yydebug)
      debug("state "+yystate+", reducing "+yym+" by rule "+yyn+" ("+yyrule[yyn]+")");
    if (yym>0)                 //if count of rhs not 'nil'
      yyval = val_peek(yym-1); //get current semantic value
    yyval = dup_yyval(yyval); //duplicate yyval if ParserVal is used as semantic value
    switch(yyn)
      {
//########## USER-SUPPLIED ACTIONS ##########
case 1:
//#line 17 "./src/compilador/gramatica.y"
{ logger.logSuccess("[Parser] Programa correcto detectado"); }
break;
case 2:
//#line 18 "./src/compilador/gramatica.y"
{ logger.logError("[Parser] Se esperaba simbolo '{' al principio del programa"); }
break;
case 3:
//#line 19 "./src/compilador/gramatica.y"
{ logger.logError("[Parser] Se esperaba simbolo '}' al final del programa"); }
break;
case 4:
//#line 20 "./src/compilador/gramatica.y"
{ logger.logError("[Parser] Programa vacio"); }
break;
case 5:
//#line 21 "./src/compilador/gramatica.y"
{ logger.logError("[Parser] Programa vacio"); }
break;
case 15:
//#line 40 "./src/compilador/gramatica.y"
{ logger.logError("[Parser] Sentencia RETURN fuera de funcion"); }
break;
case 26:
//#line 63 "./src/compilador/gramatica.y"
{ logger.logError("[Parser] Se esperab un simbolo ',' luego del RETURN"); }
break;
case 27:
//#line 67 "./src/compilador/gramatica.y"
{ logger.logSuccess("[Parser] Sentencia iterativa DO WHILE detectada"); }
break;
case 28:
//#line 68 "./src/compilador/gramatica.y"
{ logger.logError("[Parser] Se esperaba ',' luego de sentencia DO WHILE"); }
break;
case 29:
//#line 69 "./src/compilador/gramatica.y"
{ logger.logError("[Parser] Se esperaban sentencias ejecutables en sentencia DO WHILE"); }
break;
case 30:
//#line 70 "./src/compilador/gramatica.y"
{ logger.logError("[Parser] Se esperaba condicion en sentencia DO WHILE"); }
break;
case 31:
//#line 71 "./src/compilador/gramatica.y"
{ logger.logError("[Parser] Se esperaba WHILE en sentencia DO WHILE"); }
break;
case 32:
//#line 72 "./src/compilador/gramatica.y"
{ logger.logError("[Parser] Se esperaban sentencias ejecutables en sentencia DO WHILE"); }
break;
case 33:
//#line 73 "./src/compilador/gramatica.y"
{ logger.logError("[Parser] Se esperaba condicion en sentencia DO WHILE"); }
break;
case 34:
//#line 74 "./src/compilador/gramatica.y"
{ logger.logError("[Parser] Se esperaban sentencias ejecutables en sentencia DO WHILE"); }
break;
case 35:
//#line 75 "./src/compilador/gramatica.y"
{ logger.logError("[Parser] Se esperaban sentencias ejecutables en sentencia DO WHILE"); }
break;
case 36:
//#line 76 "./src/compilador/gramatica.y"
{ logger.logError("[Parser] Se esperaban sentencias ejecutables en sentencia DO WHILE"); }
break;
case 37:
//#line 77 "./src/compilador/gramatica.y"
{ logger.logError("[Parser] Se esperaban sentencias ejecutables en sentencia DO WHILE"); }
break;
case 38:
//#line 81 "./src/compilador/gramatica.y"
{ logger.logSuccess("[Parser] Sentencia iterativa DO WHILE detectada"); }
break;
case 39:
//#line 82 "./src/compilador/gramatica.y"
{ logger.logError("[Parser] Se esperaba ',' luego de sentencia DO WHILE"); }
break;
case 40:
//#line 83 "./src/compilador/gramatica.y"
{ logger.logError("[Parser] Se esperaban sentencias ejecutables en sentencia DO WHILE"); }
break;
case 41:
//#line 84 "./src/compilador/gramatica.y"
{ logger.logError("[Parser] Se esperaba condicion en sentencia DO WHILE"); }
break;
case 42:
//#line 85 "./src/compilador/gramatica.y"
{ logger.logError("[Parser] Se esperaba WHILE en sentencia DO WHILE"); }
break;
case 43:
//#line 86 "./src/compilador/gramatica.y"
{ logger.logError("[Parser] Se esperaban sentencias ejecutables en sentencia DO WHILE"); }
break;
case 44:
//#line 87 "./src/compilador/gramatica.y"
{ logger.logError("[Parser] Se esperaba condicion en sentencia DO WHILE"); }
break;
case 45:
//#line 88 "./src/compilador/gramatica.y"
{ logger.logError("[Parser] Se esperaban sentencias ejecutables en sentencia DO WHILE"); }
break;
case 46:
//#line 89 "./src/compilador/gramatica.y"
{ logger.logError("[Parser] Se esperaban sentencias ejecutables en sentencia DO WHILE"); }
break;
case 47:
//#line 90 "./src/compilador/gramatica.y"
{ logger.logError("[Parser] Se esperaban sentencias ejecutables en sentencia DO WHILE"); }
break;
case 48:
//#line 91 "./src/compilador/gramatica.y"
{ logger.logError("[Parser] Se esperaban sentencias ejecutables en sentencia DO WHILE"); }
break;
case 49:
//#line 95 "./src/compilador/gramatica.y"
{ logger.logSuccess("[Parser] Sentencia seleccion IF ELSE detectada"); }
break;
case 50:
//#line 96 "./src/compilador/gramatica.y"
{ logger.logSuccess("[Parser] Sentencia seleccion IF sin ELSE detectada"); }
break;
case 51:
//#line 97 "./src/compilador/gramatica.y"
{ logger.logError("[Parser] Se esperaba ',' luego de sentencia IF ELSE"); }
break;
case 52:
//#line 98 "./src/compilador/gramatica.y"
{ logger.logError("[Parser] Se esperaba ',' luego de sentencia IF sin ELSE"); }
break;
case 53:
//#line 99 "./src/compilador/gramatica.y"
{ logger.logError("[Parser] Se esperaba condicion en sentencia IF ELSE"); }
break;
case 54:
//#line 100 "./src/compilador/gramatica.y"
{ logger.logError("[Parser] Se esperaba condicion en sentencia IF"); }
break;
case 55:
//#line 101 "./src/compilador/gramatica.y"
{ logger.logError("[Parser] Se esperaban sentencias ejecutables en sentencia IF ELSE"); }
break;
case 56:
//#line 102 "./src/compilador/gramatica.y"
{ logger.logError("[Parser] Se esperaban sentencias ejecutables en sentencia IF ELSE"); }
break;
case 57:
//#line 103 "./src/compilador/gramatica.y"
{ logger.logError("[Parser] Se esperaban sentencias ejecutables en sentencia IF"); }
break;
case 58:
//#line 107 "./src/compilador/gramatica.y"
{ logger.logSuccess("[Parser] Sentencia seleccion IF ELSE detectada"); }
break;
case 59:
//#line 108 "./src/compilador/gramatica.y"
{ logger.logSuccess("[Parser] Sentencia seleccion IF sin ELSE detectada"); }
break;
case 60:
//#line 109 "./src/compilador/gramatica.y"
{ logger.logError("[Parser] Se esperaba ',' luego de sentencia IF ELSE"); }
break;
case 61:
//#line 110 "./src/compilador/gramatica.y"
{ logger.logError("[Parser] Se esperaba ',' luego de sentencia IF sin ELSE"); }
break;
case 62:
//#line 111 "./src/compilador/gramatica.y"
{ logger.logError("[Parser] Se esperaba condicion en sentencia IF ELSE"); }
break;
case 63:
//#line 112 "./src/compilador/gramatica.y"
{ logger.logError("[Parser] Se esperaba condicion en sentencia IF"); }
break;
case 64:
//#line 113 "./src/compilador/gramatica.y"
{ logger.logError("[Parser] Se esperaban sentencias ejecutables en sentencia IF ELSE"); }
break;
case 65:
//#line 114 "./src/compilador/gramatica.y"
{ logger.logError("[Parser] Se esperaban sentencias ejecutables en sentencia IF ELSE"); }
break;
case 66:
//#line 115 "./src/compilador/gramatica.y"
{ logger.logError("[Parser] Se esperaban sentencias ejecutables en sentencia IF"); }
break;
case 69:
//#line 121 "./src/compilador/gramatica.y"
{ logger.logError("[Parser] Se esperaban un simbolo '}' en el bloque"); }
break;
case 70:
//#line 122 "./src/compilador/gramatica.y"
{ logger.logError("[Parser] Se esperaban un simbolo '{' en el bloque"); }
break;
case 71:
//#line 123 "./src/compilador/gramatica.y"
{ logger.logError("[Parser] Se esperaban sentencias ejecutables dentro del bloque"); }
break;
case 72:
//#line 124 "./src/compilador/gramatica.y"
{ logger.logError("[Parser] No se permiten declaraciones de variables dentro de bloque de sentencias ejecutables"); }
break;
case 75:
//#line 130 "./src/compilador/gramatica.y"
{ logger.logError("[Parser] No se permiten declaraciones de variables dentro de bloque de sentencias ejecutables"); }
break;
case 79:
//#line 134 "./src/compilador/gramatica.y"
{ logger.logError("[Parser] Se esperaban un simbolo '{' en el bloque"); }
break;
case 80:
//#line 135 "./src/compilador/gramatica.y"
{ logger.logError("[Parser] Se esperaban un simbolo '{' en el bloque"); }
break;
case 81:
//#line 136 "./src/compilador/gramatica.y"
{ logger.logError("[Parser] Se esperaban un simbolo '}' en el bloque"); }
break;
case 82:
//#line 137 "./src/compilador/gramatica.y"
{ logger.logError("[Parser] Se esperaban un simbolo '}' en el bloque"); }
break;
case 83:
//#line 138 "./src/compilador/gramatica.y"
{ logger.logError("[Parser] Se esperaban sentencias ejecutables en bloque de sentencias ejecutables"); }
break;
case 84:
//#line 142 "./src/compilador/gramatica.y"
{ logger.logError("[Parser] Codigo inalcanzable luego del RETURN, se ignorara"); }
break;
case 85:
//#line 143 "./src/compilador/gramatica.y"
{ logger.logError("[Parser] Codigo inalcanzable luego del RETURN, se ignorara"); }
break;
case 90:
//#line 154 "./src/compilador/gramatica.y"
{ logger.logError("[Parser] No se aceptan declaraciones de variables en sentencias ejecutables"); }
break;
case 91:
//#line 155 "./src/compilador/gramatica.y"
{ logger.logError("[Parser] No se aceptan declaraciones de variables en sentencias ejecutables"); }
break;
case 94:
//#line 161 "./src/compilador/gramatica.y"
{ logger.logError("[Parser] No se aceptan declaraciones de variables en sentencias ejecutables"); }
break;
case 95:
//#line 162 "./src/compilador/gramatica.y"
{ logger.logError("[Parser] No se aceptan declaraciones de variables en sentencias ejecutables"); }
break;
case 96:
//#line 166 "./src/compilador/gramatica.y"
{ logger.logSuccess("[Parser] Sentencia PRINT detectada"); }
break;
case 97:
//#line 167 "./src/compilador/gramatica.y"
{ logger.logError("[Parser] Se esperaba un simbolo ',' en Sentencia PRINT"); }
break;
case 98:
//#line 168 "./src/compilador/gramatica.y"
{ logger.logError("[Parser] Se esperaba CADENA en Sentencia PRINT"); }
break;
case 99:
//#line 169 "./src/compilador/gramatica.y"
{ logger.logError("[Parser] Se esperaba una CADENA y se encontro un IDENTIFICADOR en sentencia PRINT"); }
break;
case 100:
//#line 170 "./src/compilador/gramatica.y"
{ logger.logError("[Parser] Se esperaba un simbolo ',' en sentencia PRINT"); }
break;
case 101:
//#line 171 "./src/compilador/gramatica.y"
{ logger.logError("[Parser] Se esperaba una CADENA y se encontro una constante en sentencia PRINT"); }
break;
case 102:
//#line 172 "./src/compilador/gramatica.y"
{ logger.logError("[Parser] Se esperaba un simbolo ',' en sentencia PRINT"); }
break;
case 103:
//#line 176 "./src/compilador/gramatica.y"
{ logger.logSuccess("[Parser] Invocacion de funcion con expresion detectada"); }
break;
case 104:
//#line 177 "./src/compilador/gramatica.y"
{ logger.logSuccess("[Parser] Invocacion de funcion sin expresion detectada"); }
break;
case 105:
//#line 178 "./src/compilador/gramatica.y"
{ logger.logError("[Parser] Invocacion de funcion con multiples expresiones detectada, se preserva solo la primera expresion"); }
break;
case 106:
//#line 179 "./src/compilador/gramatica.y"
{ logger.logError("[Parser] Se esperaba un simbolo ',' en invocacion de funcion"); }
break;
case 107:
//#line 180 "./src/compilador/gramatica.y"
{ logger.logError("[Parser] Se esperaba un simbolo ',' en invocacion de funcion"); }
break;
case 108:
//#line 181 "./src/compilador/gramatica.y"
{ logger.logError("[Parser] Se esperaba un simbolo ',' en invocacion de funcion"); }
break;
case 111:
//#line 190 "./src/compilador/gramatica.y"
{ logger.logSuccess("[Parser] Asignacion detectada"); }
break;
case 112:
//#line 191 "./src/compilador/gramatica.y"
{ logger.logError("[Parser] Se esperaba un simbolo ',' en sentencia asignacion"); }
break;
case 113:
//#line 192 "./src/compilador/gramatica.y"
{ logger.logError("[Parser] Se esperaba expresion del lado derecho en sentencia asignacion"); }
break;
case 120:
//#line 208 "./src/compilador/gramatica.y"
{ 
		logger.logSuccess("[Parser] Declaracion de lista de variables detectado");
		genCodigoIntermedio.agregarTipoAListaDeVariables(val_peek(2).sval);
		genCodigoIntermedio.agregarAmbitoAListaDeVariables();
		genCodigoIntermedio.removerListaVariablesADeclarar();
	}
break;
case 121:
//#line 214 "./src/compilador/gramatica.y"
{ logger.logError("[Parser] Se esperaba un simbolo ',' en sentencia declaracion de variables"); }
break;
case 122:
//#line 215 "./src/compilador/gramatica.y"
{ logger.logError("[Parser] Se esperaba una lista de variables en sentencia declaracion de variables"); }
break;
case 123:
//#line 219 "./src/compilador/gramatica.y"
{ 
		logger.logSuccess("[Parser] Declaracion de INTERFACE detectada"); 
		genCodigoIntermedio.agregarUsoAIdentificador(val_peek(3).sval, "nombre_interfaz");
		genCodigoIntermedio.agregarAmbitoADeclaracionDeInterfaz(val_peek(3).sval);
	}
break;
case 124:
//#line 224 "./src/compilador/gramatica.y"
{ logger.logError("[Parser] Se esperaba un identificador en declaracion de INTERFACE"); }
break;
case 125:
//#line 225 "./src/compilador/gramatica.y"
{ logger.logError("[Parser] Se esperaba un identificador en declaracion de INTERFACE"); }
break;
case 126:
//#line 226 "./src/compilador/gramatica.y"
{ logger.logError("[Parser] Se esperaba un identificador en declaracion de INTERFACE"); }
break;
case 127:
//#line 227 "./src/compilador/gramatica.y"
{ logger.logError("[Parser] Se esperaba un simbolo '{' en declaracion de INTERFACE"); }
break;
case 128:
//#line 228 "./src/compilador/gramatica.y"
{ logger.logError("[Parser] Se esperaba un simbolo '{' en declaracion de INTERFACE"); }
break;
case 132:
//#line 238 "./src/compilador/gramatica.y"
{ logger.logError("[Parser] Se esperaba un simbolo ',' en declaracion de metodo en CLASS"); }
break;
case 133:
//#line 242 "./src/compilador/gramatica.y"
{ 
		logger.logSuccess("[Parser] Declaracion de lista de variables en CLASS detectado"); 
		genCodigoIntermedio.agregarTipoAListaDeVariables(val_peek(2).sval);
		genCodigoIntermedio.removerListaVariablesADeclarar();
	}
break;
case 134:
//#line 247 "./src/compilador/gramatica.y"
{ logger.logError("[Parser] Se esperaba un simbolo ',' en declaracion de lista de variables en CLASS"); }
break;
case 137:
//#line 253 "./src/compilador/gramatica.y"
{ 
		logger.logSuccess("[Parser] Declaracion de clase CLASS detectado"); 
		genCodigoIntermedio.agregarUsoAIdentificador(val_peek(3).sval, "nombre_clase");
		genCodigoIntermedio.agregarAmbitoADeclaracionDeClase(val_peek(3).sval);
	}
break;
case 138:
//#line 258 "./src/compilador/gramatica.y"
{ 
		logger.logSuccess("[Parser] Declaracion de clase CLASS detectado"); 
		genCodigoIntermedio.agregarUsoAIdentificador(val_peek(5).sval, "nombre_clase");
		genCodigoIntermedio.agregarAmbitoADeclaracionDeClase(val_peek(5).sval);
	}
break;
case 139:
//#line 263 "./src/compilador/gramatica.y"
{ logger.logError("[Parser] Se esperaba un identificador en declaracion de clase"); }
break;
case 140:
//#line 264 "./src/compilador/gramatica.y"
{ logger.logError("[Parser] Se esperaba un identificador en declaracion de clase"); }
break;
case 141:
//#line 265 "./src/compilador/gramatica.y"
{ logger.logError("[Parser] Se esperaba un identificador en IMPLEMENT de clase"); }
break;
case 142:
//#line 266 "./src/compilador/gramatica.y"
{ logger.logError("[Parser] Se esperaba un identificador en declaracion de clase"); }
break;
case 143:
//#line 267 "./src/compilador/gramatica.y"
{ logger.logError("[Parser] Se esperaba un simbolo '{' en declaracion de clase"); }
break;
case 144:
//#line 268 "./src/compilador/gramatica.y"
{ logger.logError("[Parser] Se esperaba un simbolo '{' en declaracion de clase"); }
break;
case 147:
//#line 277 "./src/compilador/gramatica.y"
{ 
		logger.logSuccess("[Parser] Declaracion de funcion detectado");
		genCodigoIntermedio.desapilarAmbito(); 
	}
break;
case 148:
//#line 284 "./src/compilador/gramatica.y"
{ 
		genCodigoIntermedio.agregarUsoAIdentificador(val_peek(3).sval, "nombre_funcion");
		genCodigoIntermedio.agregarAmbitoADeclaracionDeFuncion(val_peek(3).sval);
		genCodigoIntermedio.apilarAmbito(val_peek(3).sval); 
	}
break;
case 149:
//#line 289 "./src/compilador/gramatica.y"
{ 
		genCodigoIntermedio.agregarUsoAIdentificador(val_peek(2).sval, "nombre_funcion");
		genCodigoIntermedio.agregarAmbitoADeclaracionDeFuncion(val_peek(2).sval);
		genCodigoIntermedio.apilarAmbito(val_peek(2).sval); 
	}
break;
case 150:
//#line 294 "./src/compilador/gramatica.y"
{ logger.logError("[Parser] Encabezado de funcion con mas de 1 parametro detectado, se preserva solo el primer parametro"); }
break;
case 151:
//#line 295 "./src/compilador/gramatica.y"
{ logger.logError("[Parser] Encabezado de funcion con mas de 1 parametro detectado, se preserva solo el primer parametro"); }
break;
case 152:
//#line 296 "./src/compilador/gramatica.y"
{ logger.logError("[Parser] Se esperaba un identificador en el encabezado de la funcion"); }
break;
case 153:
//#line 297 "./src/compilador/gramatica.y"
{ logger.logError("[Parser] Se esperaba un identificador en el encabezado de la funcion"); }
break;
case 154:
//#line 298 "./src/compilador/gramatica.y"
{ logger.logError("[Parser] Se esperaba un simbolo '(' en el encabezado de la funcion"); }
break;
case 155:
//#line 299 "./src/compilador/gramatica.y"
{ logger.logError("[Parser] Se esperaba un simbolo '(' en el encabezado de la funcion"); }
break;
case 156:
//#line 303 "./src/compilador/gramatica.y"
{ 
		genCodigoIntermedio.agregarUsoAIdentificador(val_peek(3).sval, "nombre_metodo");
		genCodigoIntermedio.agregarAmbitoADeclaracionDeFuncion(val_peek(3).sval);
	}
break;
case 157:
//#line 307 "./src/compilador/gramatica.y"
{ 
		genCodigoIntermedio.agregarUsoAIdentificador(val_peek(2).sval, "nombre_metodo");
		genCodigoIntermedio.agregarAmbitoADeclaracionDeFuncion(val_peek(2).sval);
	}
break;
case 158:
//#line 311 "./src/compilador/gramatica.y"
{ logger.logError("[Parser] Encabezado de funcion con mas de 1 parametro detectado, se preserva solo el primer parametro"); }
break;
case 159:
//#line 312 "./src/compilador/gramatica.y"
{ logger.logError("[Parser] Encabezado de funcion con mas de 1 parametro detectado, se preserva solo el primer parametro"); }
break;
case 160:
//#line 313 "./src/compilador/gramatica.y"
{ logger.logError("[Parser] Se esperaba un identificador en el encabezado de la funcion"); }
break;
case 161:
//#line 314 "./src/compilador/gramatica.y"
{ logger.logError("[Parser] Se esperaba un identificador en el encabezado de la funcion"); }
break;
case 162:
//#line 315 "./src/compilador/gramatica.y"
{ logger.logError("[Parser] Se esperaba un simbolo '(' en el encabezado de la funcion"); }
break;
case 163:
//#line 316 "./src/compilador/gramatica.y"
{ logger.logError("[Parser] Se esperaba un simbolo '(' en el encabezado de la funcion"); }
break;
case 168:
//#line 324 "./src/compilador/gramatica.y"
{ logger.logError("[Parser] Se esperaba una sentencia RETURN al final de la funcion"); }
break;
case 169:
//#line 325 "./src/compilador/gramatica.y"
{ logger.logError("[Parser] Se esperaba una sentencia RETURN al final de la funcion"); }
break;
case 170:
//#line 326 "./src/compilador/gramatica.y"
{ logger.logError("[Parser] Se esperaba un simbolo '{' en el cuerpo de la funcion"); }
break;
case 171:
//#line 327 "./src/compilador/gramatica.y"
{ logger.logError("[Parser] Se esperaba un simbolo '{' en el cuerpo de la funcion"); }
break;
case 172:
//#line 328 "./src/compilador/gramatica.y"
{ logger.logError("[Parser] Se esperaba un simbolo '{' en el cuerpo de la funcion"); }
break;
case 173:
//#line 329 "./src/compilador/gramatica.y"
{ logger.logError("[Parser] Se esperaba un simbolo '{' en el cuerpo de la funcion"); }
break;
case 174:
//#line 330 "./src/compilador/gramatica.y"
{ logger.logError("[Parser] Se esperaba un simbolo '{' en el cuerpo de la funcion"); }
break;
case 175:
//#line 331 "./src/compilador/gramatica.y"
{ logger.logError("[Parser] Se esperaba un simbolo '{' en el cuerpo de la funcion"); }
break;
case 176:
//#line 335 "./src/compilador/gramatica.y"
{ logger.logError("[Parser] Codigo inalcanzable luego del RETURN, se ignorara"); }
break;
case 177:
//#line 336 "./src/compilador/gramatica.y"
{ logger.logError("[Parser] Codigo inalcanzable luego del RETURN, se ignorara"); }
break;
case 184:
//#line 352 "./src/compilador/gramatica.y"
{ genCodigoIntermedio.agregarUsoAIdentificador(val_peek(0).sval, "nombre_parametro"); }
break;
case 185:
//#line 356 "./src/compilador/gramatica.y"
{ 
		genCodigoIntermedio.agregarVariableADeclarar(val_peek(0).sval); 
		genCodigoIntermedio.agregarUsoAIdentificador(val_peek(0).sval, "variable");
	}
break;
case 186:
//#line 360 "./src/compilador/gramatica.y"
{ 
		genCodigoIntermedio.agregarVariableADeclarar(val_peek(0).sval); 
		genCodigoIntermedio.agregarUsoAIdentificador(val_peek(0).sval, "variable");
	}
break;
case 192:
//#line 375 "./src/compilador/gramatica.y"
{ logger.logError("[Parser] Se esperaba una expresion del lado derecho de la comparacion"); }
break;
case 193:
//#line 376 "./src/compilador/gramatica.y"
{ logger.logError("[Parser] Se esperaba una expresion del lado izquierdo de la comparacion"); }
break;
case 194:
//#line 377 "./src/compilador/gramatica.y"
{ logger.logError("[Parser] Se esperaba un comparador valido en la comparacion"); }
break;
case 210:
//#line 405 "./src/compilador/gramatica.y"
{ logger.logError("[Parser] No se admiten expresiones entre parentesis"); }
break;
case 211:
//#line 409 "./src/compilador/gramatica.y"
{ corregirConstantePositivaEntera(val_peek(0).sval); }
break;
case 212:
//#line 410 "./src/compilador/gramatica.y"
{ constanteConSigno(val_peek(0).sval); }
break;
//#line 1769 "Parser.java"
//########## END OF USER-SUPPLIED ACTIONS ##########
    }//switch
    //#### Now let's reduce... ####
    if (yydebug) debug("reduce");
    state_drop(yym);             //we just reduced yylen states
    yystate = state_peek(0);     //get new state
    val_drop(yym);               //corresponding value drop
    yym = yylhs[yyn];            //select next TERMINAL(on lhs)
    if (yystate == 0 && yym == 0)//done? 'rest' state and at first TERMINAL
      {
      if (yydebug) debug("After reduction, shifting from state 0 to state "+YYFINAL+"");
      yystate = YYFINAL;         //explicitly say we're done
      state_push(YYFINAL);       //and save it
      val_push(yyval);           //also save the semantic value of parsing
      if (yychar < 0)            //we want another character?
        {
        yychar = yylex();        //get next character
        if (yychar<0) yychar=0;  //clean, if necessary
        if (yydebug)
          yylexdebug(yystate,yychar);
        }
      if (yychar == 0)          //Good exit (if lex returns 0 ;-)
         break;                 //quit the loop--all DONE
      }//if yystate
    else                        //else not done yet
      {                         //get next state and push, for next yydefred[]
      yyn = yygindex[yym];      //find out where to go
      if ((yyn != 0) && (yyn += yystate) >= 0 &&
            yyn <= YYTABLESIZE && yycheck[yyn] == yystate)
        yystate = yytable[yyn]; //get new state
      else
        yystate = yydgoto[yym]; //else go to new defred
      if (yydebug) debug("after reduction, shifting from state "+state_peek(0)+" to state "+yystate+"");
      state_push(yystate);     //going again, so push state & val...
      val_push(yyval);         //for next action
      }
    }//main loop
  return 0;//yyaccept!!
}
//## end of method parse() ######################################



//## run() --- for Thread #######################################
/**
 * A default run method, used for operating this parser
 * object in the background.  It is intended for extending Thread
 * or implementing Runnable.  Turn off with -Jnorun .
 */
public void run()
{
  yyparse();
}
//## end of method run() ########################################



//## Constructors ###############################################
/**
 * Default constructor.  Turn off with -Jnoconstruct .

 */
public Parser()
{
  //nothing to do
}


/**
 * Create a parser, setting the debug to true or false.
 * @param debugMe true for debugging, false for no debug.
 */
public Parser(boolean debugMe)
{
  yydebug=debugMe;
}
//###############################################################



}
//################### END OF CLASS ##############################
