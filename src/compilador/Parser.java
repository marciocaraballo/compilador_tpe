//### This file created by BYACC 1.8(/Java extension  1.15)
//### Java capabilities added 7 Jan 97, Bob Jamison
//### Updated : 27 Nov 97  -- Bob Jamison, Joe Nieten
//###           01 Jan 98  -- Bob Jamison -- fixed generic semantic constructor
//###           01 Jun 99  -- Bob Jamison -- added Runnable support
//###           06 Aug 00  -- Bob Jamison -- made state variables class-global
//###           03 Jan 01  -- Bob Jamison -- improved flags, tracing
//###           16 May 01  -- Bob Jamison -- added custom stack sizing
//###           04 Mar 02  -- Yuval Oren  -- improved java performance, added options
//###           14 Mar 02  -- Tomas Hurka -- -d support, static initializer workaround
//### Please send bug reports to tom@hukatronic.cz
//### static char yysccsid[] = "@(#)yaccpar	1.8 (Berkeley) 01/20/90";






//#line 2 ".\gramatica.y"
package compilador;
import java.io.File;
//#line 20 "Parser.java"




public class Parser
{

boolean yydebug;        //do I want debug output?
int yynerrs;            //number of errors so far
int yyerrflag;          //was there an error?
int yychar;             //the current working character

//########## MESSAGES ##########
//###############################################################
// method: debug
//###############################################################
void debug(String msg)
{
  if (yydebug)
    System.out.println(msg);
}

//########## STATE STACK ##########
final static int YYSTACKSIZE = 500;  //maximum stack size
int statestk[] = new int[YYSTACKSIZE]; //state stack
int stateptr;
int stateptrmax;                     //highest index of stackptr
int statemax;                        //state when highest index reached
//###############################################################
// methods: state stack push,pop,drop,peek
//###############################################################
final void state_push(int state)
{
  try {
		stateptr++;
		statestk[stateptr]=state;
	 }
	 catch (ArrayIndexOutOfBoundsException e) {
     int oldsize = statestk.length;
     int newsize = oldsize * 2;
     int[] newstack = new int[newsize];
     System.arraycopy(statestk,0,newstack,0,oldsize);
     statestk = newstack;
     statestk[stateptr]=state;
  }
}
final int state_pop()
{
  return statestk[stateptr--];
}
final void state_drop(int cnt)
{
  stateptr -= cnt; 
}
final int state_peek(int relative)
{
  return statestk[stateptr-relative];
}
//###############################################################
// method: init_stacks : allocate and prepare stacks
//###############################################################
final boolean init_stacks()
{
  stateptr = -1;
  val_init();
  return true;
}
//###############################################################
// method: dump_stacks : show n levels of the stacks
//###############################################################
void dump_stacks(int count)
{
int i;
  System.out.println("=index==state====value=     s:"+stateptr+"  v:"+valptr);
  for (i=0;i<count;i++)
    System.out.println(" "+i+"    "+statestk[i]+"      "+valstk[i]);
  System.out.println("======================");
}


//########## SEMANTIC VALUES ##########
//public class ParserVal is defined in ParserVal.java


String   yytext;//user variable to return contextual strings
ParserVal yyval; //used to return semantic vals from action routines
ParserVal yylval;//the 'lval' (result) I got from yylex()
ParserVal valstk[];
int valptr;
//###############################################################
// methods: value stack push,pop,drop,peek.
//###############################################################
void val_init()
{
  valstk=new ParserVal[YYSTACKSIZE];
  yyval=new ParserVal();
  yylval=new ParserVal();
  valptr=-1;
}
void val_push(ParserVal val)
{
  if (valptr>=YYSTACKSIZE)
    return;
  valstk[++valptr]=val;
}
ParserVal val_pop()
{
  if (valptr<0)
    return new ParserVal();
  return valstk[valptr--];
}
void val_drop(int cnt)
{
int ptr;
  ptr=valptr-cnt;
  if (ptr<0)
    return;
  valptr = ptr;
}
ParserVal val_peek(int relative)
{
int ptr;
  ptr=valptr-relative;
  if (ptr<0)
    return new ParserVal();
  return valstk[ptr];
}
final ParserVal dup_yyval(ParserVal val)
{
  ParserVal dup = new ParserVal();
  dup.ival = val.ival;
  dup.dval = val.dval;
  dup.sval = val.sval;
  dup.obj = val.obj;
  return dup;
}
//#### end semantic value section ####
public final static short ID=257;
public final static short CTE=258;
public final static short CADENA=259;
public final static short IF=260;
public final static short THEN=261;
public final static short ELSE=262;
public final static short ENDIF=263;
public final static short OUT=264;
public final static short FUN=265;
public final static short RETURN=266;
public final static short BREAK=267;
public final static short ASIGNACION=268;
public final static short COMP_MAYOR_IGUAL=269;
public final static short COMP_MENOR_IGUAL=270;
public final static short COMP_DISTINTO=271;
public final static short WHEN=272;
public final static short DO=273;
public final static short UNTIL=274;
public final static short CONTINUE=275;
public final static short DOUBLE64=276;
public final static short UINT16=277;
public final static short DEFER=278;
public final static short CONST=279;
public final static short YYERRCODE=256;
final static short yylhs[] = {                           -1,
    0,    0,    0,    0,    0,    1,    2,    2,    3,    3,
    4,    4,    4,    4,    6,    6,    6,    6,   11,   11,
    7,    7,    7,   14,   14,   15,   15,   16,   16,   16,
   16,   16,   16,   16,   16,   16,   16,   22,   22,    8,
    8,   23,   23,   23,   23,   23,   23,   23,   25,   25,
   25,   21,   21,   21,   21,   21,   21,   21,   21,   21,
   21,   21,   21,   21,   21,   19,   19,   19,   19,   19,
   19,   19,   20,   20,   26,   26,   26,   26,   26,   26,
   26,   26,   26,   26,   26,   26,   26,   28,   28,   29,
   29,   29,   12,   12,   12,   12,   12,   12,   12,   12,
   12,   12,   13,   13,   13,   13,   13,   32,   32,   32,
   35,   35,   34,   34,   36,   34,    9,    9,    9,   37,
   37,   38,   38,   38,   38,    5,    5,    5,    5,    5,
    5,    5,    5,    5,    5,   42,   42,   42,   30,   30,
   30,   30,   30,   31,   31,   41,   41,   43,   43,   43,
   43,   43,   27,   44,   44,   44,   44,   45,   45,   17,
   17,   17,   40,   40,   47,   40,   40,   40,   46,   46,
   39,   39,   48,   48,   48,   48,   48,   49,   49,   24,
   24,   24,   50,   50,   50,   50,   50,   50,   33,   33,
   33,   51,   51,   51,   52,   52,   52,   54,   54,   55,
   55,   56,   56,   18,   18,   18,   18,   18,   18,   18,
   18,   18,   53,   53,   10,   10,
};
final static short yylen[] = {                            2,
    4,    3,    3,    3,    3,    1,    1,    2,    1,    1,
    1,    1,    1,    1,    3,    2,    2,    2,    3,    1,
    4,    5,    3,    1,    2,    1,    1,    1,    2,    1,
    2,    1,    2,    1,    2,    1,    2,    1,    2,    4,
    5,   10,   13,   13,   13,   13,   16,   16,    1,    1,
    2,    8,    8,    8,   11,   11,   15,   13,   13,   15,
   15,   15,   13,   13,   14,    9,   10,   10,    8,    9,
    9,    8,    7,    9,    1,    1,    1,    4,    4,    3,
    2,    3,    3,    3,    3,    2,    2,    1,    2,    1,
    1,    1,    6,    7,    5,    5,    5,    5,    6,    6,
    6,    6,    5,    4,    3,    3,    4,    1,    3,    5,
    1,    3,    2,    1,    0,    2,    3,    2,    2,    1,
    3,    3,    2,    2,    1,    1,    2,    1,    2,    1,
    2,    1,    2,    1,    2,    1,    1,    1,    2,    4,
    1,    3,    3,    2,    1,    1,    3,    7,    6,    6,
    6,    6,    1,    1,    3,    2,    2,    1,    2,    4,
    3,    3,    9,    8,    0,   17,    7,    6,    1,    2,
    8,   10,    1,    3,    2,    2,    2,    1,    2,    3,
    2,    2,    1,    1,    1,    1,    1,    1,    3,    3,
    1,    3,    3,    1,    1,    1,    1,    3,    4,    1,
    3,    1,    1,    5,    5,    4,    4,    4,    4,    4,
    4,    4,    1,    2,    1,    1,
};
final static short yydefred[] = {                         0,
    6,    0,    0,    0,    0,    0,    0,    0,    0,    0,
  216,  215,    0,    0,    0,    7,    9,   10,   11,   12,
   13,   14,    0,    0,    0,  126,  130,    0,  128,  132,
  134,  146,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,  136,  137,  138,
    0,    0,    0,  127,  131,  129,  133,  135,    0,  119,
    0,    0,    2,    8,    0,   18,    0,   17,    0,    0,
    5,    0,    3,    0,  213,    0,  161,    0,    0,  194,
  196,  197,   19,  183,  184,  185,  186,  187,  188,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,  139,    0,  144,
  158,    0,    0,  157,  159,  124,    0,  117,    0,   15,
    0,    0,    0,    0,    0,   23,   26,    0,    0,   24,
   27,   28,   30,   32,   34,   36,    0,    0,  147,    1,
    0,  214,    0,    0,  160,    0,    0,    0,    0,    0,
  209,  207,  210,    0,  208,    0,  206,    0,    0,    0,
    0,  113,    0,    0,  116,    0,    0,    0,    0,  153,
  143,    0,  155,    0,    0,  122,  121,    0,    0,    0,
    0,    0,   75,   90,   76,    0,    0,   88,   91,   92,
    0,   29,   31,   33,   35,   37,   21,    0,   25,    0,
   40,    0,  202,  198,  203,    0,  200,    0,    0,  192,
  193,    0,    0,  205,  204,    0,   98,    0,    0,   97,
    0,    0,   96,    0,    0,    0,    0,  140,    0,    0,
    0,    0,    0,    0,  105,    0,   81,    0,    0,   87,
    0,    0,   89,    0,   22,   41,    0,    0,  199,    0,
    0,    0,    0,   93,    0,  102,  101,    0,  100,    0,
    0,    0,  168,    0,  150,  152,    0,  151,    0,  107,
    0,    0,   80,    0,    0,    0,   83,   85,    0,    0,
  201,  175,  178,    0,    0,    0,  177,  179,   94,    0,
  110,  170,    0,    0,    0,  148,    0,  103,    0,   78,
   79,    0,    0,    0,  174,    0,  171,    0,  165,    0,
  164,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,  112,    0,  163,   51,   38,    0,    0,    0,
    0,    0,    0,    0,    0,   73,    0,    0,    0,    0,
  172,    0,    0,    0,   39,    0,   52,    0,   54,   53,
    0,    0,    0,   49,   50,    0,   72,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
   66,    0,    0,    0,    0,   74,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,   42,   67,   68,
    0,    0,    0,    0,    0,    0,    0,   55,    0,    0,
    0,   56,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,   58,   43,    0,    0,   59,   44,   63,   64,
    0,   45,   46,    0,    0,    0,   65,    0,    0,    0,
    0,    0,    0,    0,  166,   61,   62,   57,    0,   60,
    0,    0,    0,   47,   48,    0,    0,    0,    0,    0,
    0,    0,    0,
};
final static short yydgoto[] = {                          3,
    4,   15,  260,   17,   18,   19,   20,   21,   22,   23,
   24,   25,  354,  129,  130,  327,  132,  133,  134,  135,
  136,  328,  355,   90,  317,  186,  138,  187,  188,  189,
  190,  101,   91,  102,  291,  103,   61,   62,   29,   30,
   31,  115,   32,   52,   53,  261,  324,  252,  253,   92,
   79,   80,   81,   82,  206,  207,
};
final static short yysindex[] = {                      -102,
    0, 1342,    0,  -93,  -28,   22,  -26,  -13,   56,  734,
    0,    0,  197,  -41,  911,    0,    0,    0,    0,    0,
    0,    0,  -37,  -17,  -39,    0,    0,   50,    0,    0,
    0,    0,  934,  944,   42, -154,  718,   85,   94,    6,
  -31,  -34,  709, -128,   87,  104,  524,    0,    0,    0,
    0,  -78, 1164,    0,    0,    0,    0,    0, -215,    0,
  107,  129,    0,    0,  169,    0,  150,    0,  901,  -51,
    0,  971,    0,  186,    0,   12,    0,  273,   39,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,  234,
   99,   38,  219,  233,   17,   23,  242,  -38,  247,   20,
  268,  267,   76,  261,  297,   84,  311,    0,  -36,    0,
    0, 1181,  137,    0,    0,    0,  101,    0,  110,    0,
  331,  -21,  346,  626,  557,    0,    0,  255, 1318,    0,
    0,    0,    0,    0,    0,    0,  263,  334,    0,    0,
   -8,    0,   38,   38,    0,   38,   38,  148,   38,   77,
    0,    0,    0,  354,    0,  368,    0,  370, -108,   71,
 -108,    0,  374, -108,    0, -108,  378,  314,  -85,    0,
    0,  380,    0,  715,  405,    0,    0,  718,   15,  279,
  718, 1198,    0,    0,    0,  173, 1108,    0,    0,    0,
  408,    0,    0,    0,    0,    0,    0,  328,    0,  330,
    0,  190,    0,    0,    0,  121,    0,   39,   39,    0,
    0,  659,   77,    0,    0, -108,    0,  401, -108,    0,
 -108,  420,    0, -108, 1342,  343,  995,    0,  413,   34,
  415,  439,  422,  348,    0,  441,    0, 1128,  443,    0,
  359,  360,    0,  718,    0,    0,  626,   45,    0,  609,
    0,  -58, 1268,    0, -108,    0,    0, -108,    0, 1342,
  361, 1342,    0,  362,    0,    0,  431,    0,  230,    0,
  434,  240,    0,  377,  387,  718,    0,    0,  462,  239,
    0,    0,    0, 1279,  659,  457,    0,    0,    0,  474,
    0,    0,  466,  402,  467,    0,   70,    0,  416,    0,
    0,  487,  277,  501,    0,  286,    0, -108,    0,  484,
    0,  676,  291,  287,  103,  298,  292, 1018,  503,  751,
  718,  507,    0,  295,    0,    0,    0, 1020,  509,  448,
  513,  522,  -71,  535,   75,    0,  291,  287,  298,  554,
    0,  556,  336,  476,    0,  483,    0,  291,    0,    0,
  581,  364,  291,    0,    0,  369,    0,  563,  506,  519,
 1020,  575,  718,  523,  114,  134, 1368,  718, 1368,  586,
    0,  589,  592,  545,  546,    0,  632,  291,  761,  616,
  771,  617,  560,  573,  660,  585,  595,    0,    0,    0,
  149,  158,  445, 1229,  291,  458,  460,    0,  291,  463,
  464,    0,  473,  475,  450,  485,  488,  794,  811,  606,
  489,  614,  628, 1246,  699,  700, 1257,  702,  703,  705,
  706,  -54,  707,  708,  291,  291, 1342,  713,  505,  510,
  520,  662,    0,    0,  526,  667,    0,    0,    0,    0,
  291,    0,    0, 1290, 1301,  669,    0,  736,  739,  741,
  538,  746,  543, 1368,    0,    0,    0,    0,  749,    0,
  750,  685,  690,    0,    0,  565,  566,  -19,  138,  291,
  291, 1378, 1378,
};
final static short yyrindex[] = {                         0,
    0,    0,    0,    0,  133,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
  559,  559,    0,  760, 1044, 1067,    0,    0,    0,    0,
 1145,    0,    0,    0,    0,    0,    0,    0,  599,    0,
  280,  574,    0,    0,  649,    0,  547,    0,    0,    0,
    0,  822,    0,  313,    0,    0,    0,  232,  340,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,  559,    0,   93,
    0,   80,    0,    0,    0,    0,    0,    0,    0,    0,
    0,  558,    0,    0,    0,    0,  678,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,   48,   54,
    0,    0,    0,  257,    0,  363,    0,    0,    0,    0,
    0,    0,    0,  559,    0,    0,    0,    0,    0,    0,
    0, 1089,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,  561,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,  390,  417,    0,
    0,    0,   59,    0,    0,  710,    0,    0,    0,    0,
    0,   92,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,  156,    0,    0,    0,  562,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
 1218,    0,    0,    0,  714,    0,    0,  559,    0,  716,
    0,    0,    0,    0,    0,    0,  440,    0,    0,    0,
  182,    0,    0,  569,  580,    0,    0,    0,    0,    0,
    0,    0,    0,  160,    0,    0,    0,    0,    0,  100,
    0,    0,    0,    0,  468,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,  559,    0,    0,
    0,    0,    0,  593,    0,  596,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,  828,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,  852,  875,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,
};
final static short yygindex[] = {                         0,
    0,   40,  115,  -64,   62,    0,    0,    0,    0,  744,
  165,    0,  106,    0, -103,  -30,   -2,    2,  -46,  -27,
  -23, 1160,  -44,  -42,  376,  613,   44,  679, -146,   58,
   78,    8,   32, -130,  571,    0,  743,    0,  854,  855,
  857,   19,  810,    0,  838, -199,    0,  603,  639,  800,
  218,   72, -101,    0,    0,  647,
};
final static int YYTABLESIZE=1656;
static short yytable[];
static { yytable();}
static void yytable(){
yytable = new short[]{                         26,
  107,   26,  158,   27,  127,   27,  104,   26,   98,   99,
   54,   27,   26,   40,   55,   36,   27,   60,  179,  159,
    2,   66,  171,   76,  137,  199,   42,  264,   51,   33,
   26,   26,  204,  222,   27,   27,   76,  227,  131,  205,
  243,   68,  116,   34,   26,   28,   97,   28,   27,  105,
   26,  353,  117,   28,   27,  233,   28,  154,   28,   76,
  292,   37,  294,  156,  127,  111,   78,   49,  441,   26,
  175,   48,   72,   27,  267,  153,   28,   28,  194,  185,
  146,  155,   76,   69,  200,  147,   76,   50,  181,   76,
   28,  243,  266,  184,  182,   43,   28,  195,  131,  180,
   77,  196,   65,  470,   49,  160,  181,   70,   48,   26,
   49,  218,  182,   27,   48,   28,   16,  180,   16,  143,
  108,  144,  192,  150,   50,   93,  193,  290,  219,   64,
   50,  230,  109,  114,   94,  232,  114,  108,  236,   35,
  111,  143,  242,  144,  109,  108,  205,   16,   64,  109,
  114,  184,  172,  180,    1,   28,  184,  111,   88,   89,
   87,  249,  110,    5,  248,  118,    6,   11,   12,   49,
    7,    8,  119,   48,  128,  226,  174,  290,    9,   10,
  213,   76,   11,   12,   13,   14,   64,   67,  351,   50,
  153,   20,  313,  275,  122,  113,   88,   89,   87,  358,
   83,  279,  185,  285,  286,  351,  352,  184,  120,   26,
  234,  122,   36,   27,  335,   59,  184,  210,  211,   65,
  170,   10,   26,  352,   26,  141,   27,  446,   27,  183,
   38,  162,   39,  302,  198,   74,   75,   11,   12,   35,
  351,   11,   12,   41,   11,   12,  122,   26,  203,   75,
   26,   27,  316,  127,   27,   28,  212,   26,  352,   26,
  471,   27,   95,   27,   96,  194,  315,  326,   28,  142,
   28,   74,   75,  251,  148,  339,  162,  151,  340,  118,
  106,   26,   26,  346,  195,   27,   27,  131,  196,  315,
  360,  152,  241,   28,   74,   75,   28,  345,   74,   75,
  157,  203,   75,   28,  161,   28,  104,  326,  163,  192,
  164,  283,  195,  193,  288,  143,  375,  144,  166,  235,
  377,  143,  384,  144,  387,  385,   44,   28,   28,  121,
  345,  145,  165,    7,  351,  122,  345,  167,  345,  191,
  122,  123,  124,  274,  168,  288,  251,  312,  396,  413,
  400,  169,  183,  195,  195,  195,  162,  195,  176,  195,
  208,  209,  211,  345,  330,  331,   59,   84,   85,   86,
  178,  195,  195,  195,  195,  379,  380,  396,  400,  197,
  191,  212,  191,  345,  191,  181,  345,  201,  271,  189,
  143,  202,  144,   74,   75,  381,  382,  351,  191,  191,
  191,  191,  314,  122,  118,   84,   85,   86,  212,  463,
  408,  380,  214,  345,  345,  352,  190,  106,  106,  409,
  382,  176,  176,  345,   26,  338,  215,  216,   27,  106,
  189,  221,  189,  344,  189,  224,  225,  195,  228,  149,
  359,  345,  345,  104,  104,  231,  239,  244,  189,  189,
  189,  189,  245,   44,  246,  104,    6,  190,  255,  190,
    7,  190,  247,  258,  191,  262,  374,  167,    9,   10,
   28,  265,  383,  268,  386,  190,  190,  190,  190,  269,
  270,  272,  276,  277,  278,  293,  295,  211,  162,  296,
  297,  162,  298,  162,  162,  162,  162,  162,  162,  412,
  299,  300,  303,  162,  162,  162,  162,  162,  162,  162,
  162,  301,  304,  212,  189,  307,  212,  308,  212,  212,
  212,  212,  212,  212,  309,  311,  310,  319,  212,  212,
  212,  212,  212,  212,  212,  212,  118,  320,  318,  118,
  321,  190,  325,  118,  118,  118,   16,   44,  322,  329,
  191,  118,  118,  333,    7,  118,  118,  118,  118,  462,
  332,  336,  123,  124,  149,  341,  342,  347,  125,  195,
  348,  349,  195,  120,  195,  195,  195,  195,  195,  195,
  350,  195,  195,  195,  195,  195,  195,  195,  195,  195,
  195,  195,  167,  357,  362,  363,  191,  364,  125,  191,
  365,  191,  191,  191,  191,  191,  191,  366,  191,  191,
  191,  191,  191,  191,  191,  191,  191,  191,  191,  211,
  368,  371,  211,  351,  211,  211,  211,  211,  211,  211,
  372,  370,  120,  376,  211,  211,  211,  211,  211,  211,
  211,  211,  125,  373,  388,  378,  189,  389,   20,  189,
  390,  189,  189,  189,  189,  189,  189,  125,  189,  189,
  189,  189,  189,  189,  189,  189,  189,  189,  189,  391,
  392,   16,  393,  190,  398,  402,  190,  123,  190,  190,
  190,  190,  190,  190,  403,  190,  190,  190,  190,  190,
  190,  190,  190,  190,  190,  190,  149,  404,  120,  149,
  405,  149,  149,  149,  149,  410,  149,   20,  356,  406,
  422,  149,  149,  149,  149,  149,  149,  149,  149,  407,
  415,  123,  416,  125,  167,  418,  419,  167,  427,  167,
  167,  167,  167,  282,  167,  420,  123,  421,  429,  167,
  167,  167,  167,  167,  167,  167,  167,  423,  182,  106,
  424,  428,  430,   76,  397,  229,  401,  433,  434,   76,
  437,  438,   76,  439,  440,  442,  443,  448,   88,   89,
   87,  447,  449,   20,   88,   89,   87,   88,   89,   87,
   44,  250,  450,    6,  100,  100,  451,    7,  452,  432,
   45,  453,  436,  455,  456,    9,   10,  457,   46,  458,
  459,   13,  123,   16,  460,  461,   16,  464,  465,  466,
   16,   16,   16,   44,  467,  115,  191,  153,   16,   16,
    7,    4,   16,   16,   16,   16,  468,  469,  123,  124,
  120,  156,   95,  120,   77,   86,   99,  120,  120,  120,
  169,  100,   82,  397,  401,  120,  120,  432,  436,  120,
  120,  120,  120,   84,   49,  125,   47,   50,  125,  280,
  238,  177,  125,  125,  125,   44,   56,   57,    6,   58,
  125,  125,    7,  337,  125,  125,  125,  125,  323,  139,
    9,   10,   44,  395,  112,  121,   13,  306,  284,    7,
  149,  122,   45,  399,  281,    0,    0,  123,  124,    0,
   46,    0,  217,  125,  220,   20,    0,  100,   20,  223,
    0,    0,   20,   20,   20,   44,  425,    0,    6,    0,
   20,   20,    7,    0,   20,   20,   20,   20,    0,    0,
    9,   10,   44,  426,  123,  121,   13,  123,    0,    7,
    0,  123,  123,  123,    0,    0,    0,  123,  124,  123,
  123,    0,   69,  123,  123,  123,  123,    0,    0,  254,
    0,    0,  256,    0,  257,   74,   75,  259,    0,    0,
    0,   74,   75,    0,   74,   75,   70,   84,   85,   86,
    0,    0,    0,   84,   85,   86,   84,   85,   86,    0,
   44,    0,    0,    6,    0,    0,    0,    7,  289,   71,
   45,  100,    0,    0,    0,    9,   10,   44,   46,    0,
  121,   13,    0,    0,    7,    0,  122,   44,    0,    0,
  121,    0,  123,  124,    7,  126,  122,   44,  125,    0,
  121,    0,  123,  124,    7,   63,  122,    0,  312,    0,
    0,    0,  123,  124,    0,    0,    0,    0,  312,    0,
   44,  100,    0,  191,    0,    0,    0,    7,   71,    0,
    0,    0,    0,    0,    0,  123,  124,   44,   73,    0,
  191,  125,    0,    0,    7,    0,    0,    0,    0,    0,
    0,    0,  123,  124,   69,    0,    0,   69,  125,   69,
   69,   69,   69,   69,   69,  140,    0,    0,    0,   69,
   69,   69,   69,   69,   69,   69,   69,    0,   70,    0,
    0,   70,    0,   70,   70,   70,   70,   70,   70,  263,
    0,    0,    0,   70,   70,   70,   70,   70,   70,   70,
   70,   71,    0,    0,   71,    0,   71,   71,   71,   71,
   71,   71,  334,    0,  343,    0,   71,   71,   71,   71,
   71,   71,   71,   71,    0,    0,    0,    5,    0,    0,
  121,    0,    0,    0,    7,    8,  122,    5,  141,    0,
    6,    0,  123,  124,    7,    8,   11,   12,  125,   14,
    0,    0,    9,   10,    0,    0,   11,   12,   13,   14,
    5,  145,    0,    6,    0,    0,    0,    7,    8,    0,
    5,    0,    0,    6,    0,    9,   10,    7,    8,   11,
   12,   13,   14,  142,    0,    9,   10,    0,    0,   11,
   12,   13,   14,    0,    0,    0,    0,    5,    0,    0,
    6,    0,  240,    0,    7,    8,    0,    0,    0,    0,
    0,    0,    9,   10,    0,    0,   11,   12,   13,   14,
    0,    5,  273,    0,    6,    0,    0,    0,    7,    8,
    0,    0,    0,    0,    0,    0,    9,   10,    0,  158,
   11,   12,   13,   14,    5,    0,   44,  191,    0,  121,
    0,    7,    8,    7,    0,  122,    0,    0,  114,  123,
  124,  123,  124,   11,   12,  125,   14,  125,    0,    0,
  141,    0,    0,  141,    0,  173,    0,  141,    0,  141,
  141,    0,    0,    0,    0,  141,  141,  141,  141,    0,
    0,  141,  237,  145,    0,    0,  145,    0,    0,    0,
  145,    0,  145,  145,    0,    0,    0,    0,  145,  145,
  145,  145,  178,    0,  145,  142,    0,    0,  142,    0,
    0,    0,  142,  411,  142,  142,    0,    0,    0,    0,
  142,  142,  142,  142,   44,    0,  142,  121,    0,    0,
  431,    7,    0,  122,   45,    0,    0,    0,    0,  123,
  124,  435,   46,    0,   44,  125,    0,  121,    0,    0,
    0,    7,  287,  122,   45,    0,    0,    0,    0,  123,
  124,  158,   46,  305,  158,  125,    0,    0,  158,    0,
    0,  158,    0,    0,  431,    0,  158,  158,  154,  158,
   44,    0,  158,    6,    0,  435,    0,    7,    0,    0,
   45,    0,    0,    0,    0,    9,   10,   44,   46,    0,
    6,   13,    0,    0,    7,    0,    0,   45,    0,    0,
    0,    0,    9,   10,   44,   46,    0,  191,   13,    0,
    0,    7,    0,    0,   45,    0,    0,    0,    0,  123,
  124,    0,   46,    0,  178,  125,    0,  178,    0,  173,
  173,  178,    0,    0,    0,   44,    0,    0,  121,  178,
  178,    0,    7,    0,  122,  178,  361,    0,    0,    0,
  123,  124,   44,    0,    0,  121,  125,  367,    0,    7,
    0,  122,  369,   44,    0,    0,  121,  123,  124,    0,
    7,    0,  122,  312,   44,    0,    0,    6,  123,  124,
    0,    7,    0,    0,  312,   44,    0,  394,    6,    9,
   10,    0,    7,    0,    0,   13,   44,    0,    0,  191,
    9,   10,    0,    7,  414,    0,   13,   44,  417,    0,
  191,  123,  124,    0,    7,    0,    0,  125,    0,    0,
    0,    0,  123,  124,    5,    0,    0,  121,  125,    0,
    0,    7,    8,  122,  444,  445,    0,    0,    0,  123,
  124,    0,    0,   11,   12,  125,   14,    0,    5,    0,
  454,    6,    0,    0,    0,    7,    8,    0,    0,    0,
    0,    0,    0,    9,   10,    0,    0,   11,   12,   13,
   14,    0,    0,    0,   44,    0,    0,  121,    0,  472,
  473,    7,    0,  122,   44,    0,    0,  121,    0,  123,
  124,    7,    0,  122,    0,  125,    0,    0,    0,  123,
  124,    0,    0,    0,    0,  312,
};
}
static short yycheck[];
static { yycheck(); }
static void yycheck() {
yycheck = new short[] {                          2,
   43,    4,   41,    2,   69,    4,   41,   10,   40,   41,
   13,   10,   15,   40,   13,   44,   15,   59,   40,   58,
  123,   59,   59,   45,   69,  129,   40,  227,   10,  123,
   33,   34,   41,  164,   33,   34,   45,  123,   69,  141,
  187,   59,  258,    4,   47,    2,   41,    4,   47,   42,
   53,  123,  268,   10,   53,   41,   13,   41,   15,   45,
  260,   40,  262,   41,  129,   47,   35,   10,  123,   72,
  113,   10,   33,   72,   41,   59,   33,   34,  125,  124,
   42,   59,   45,  123,  129,   47,   45,   10,   41,   45,
   47,  238,   59,  124,   41,   40,   53,  125,  129,   41,
   59,  125,  257,  123,   47,   98,   59,   58,   47,  112,
   53,   41,   59,  112,   53,   72,    2,   59,    4,   43,
   41,   45,  125,   92,   47,   41,  125,  258,   58,   15,
   53,  174,   41,   41,   41,  178,   44,   58,  181,  268,
   41,   43,  187,   45,   58,   59,  248,   33,   34,   58,
   58,  182,  109,  122,  257,  112,  187,   58,   60,   61,
   62,   41,   59,  257,   44,   59,  260,  276,  277,  112,
  264,  265,   44,  112,   69,  261,   40,  308,  272,  273,
  149,   45,  276,  277,  278,  279,   72,   23,  260,  112,
   58,   59,  123,  238,  266,  274,   60,   61,   62,  125,
   36,  244,  247,  262,  263,  260,  278,  238,   59,  212,
  179,  266,   44,  212,  318,  257,  247,  146,  147,  257,
  257,  273,  225,  278,  227,   40,  225,  427,  227,  124,
  257,    0,  259,  276,  129,  257,  258,  276,  277,  268,
  260,  276,  277,  257,  276,  277,  266,  250,  257,  258,
  253,  250,  297,  318,  253,  212,    0,  260,  278,  262,
  123,  260,  257,  262,  259,  312,  297,  312,  225,  258,
  227,  257,  258,  212,   41,  320,  257,   59,  321,    0,
  125,  284,  285,  328,  312,  284,  285,  318,  312,  320,
  335,   59,  187,  250,  257,  258,  253,  328,  257,  258,
   59,  257,  258,  260,   58,  262,  125,  352,   41,  312,
   44,  250,    0,  312,  253,   43,  361,   45,   58,   41,
  363,   43,  367,   45,  369,  368,  257,  284,  285,  260,
  361,   59,  257,  264,  260,  266,  367,   41,  369,    0,
  266,  272,  273,  238,  261,  284,  285,  278,  379,  394,
  381,   41,  247,   41,   42,   43,  125,   45,  258,   47,
  143,  144,    0,  394,  262,  263,  257,  269,  270,  271,
   40,   59,   60,   61,   62,  262,  263,  408,  409,  125,
   41,  125,   43,  414,   45,   40,  417,  125,   41,    0,
   43,   58,   45,  257,  258,  262,  263,  260,   59,   60,
   61,   62,  297,  266,  125,  269,  270,  271,  261,  454,
  262,  263,   59,  444,  445,  278,    0,  262,  263,  262,
  263,  262,  263,  454,  427,  320,   59,   58,  427,  274,
   41,   58,   43,  328,   45,   58,  123,  125,   59,    0,
  335,  472,  473,  262,  263,   41,  274,   40,   59,   60,
   61,   62,  125,  257,  125,  274,  260,   41,   58,   43,
  264,   45,  273,   44,  125,  123,  361,    0,  272,  273,
  427,   59,  367,   59,  369,   59,   60,   61,   62,   41,
   59,   41,   40,  125,  125,  125,  125,  125,  257,   59,
  261,  260,   59,  262,  263,  264,  265,  266,  267,  394,
  261,  125,   41,  272,  273,  274,  275,  276,  277,  278,
  279,  125,  274,  257,  125,   59,  260,   44,  262,  263,
  264,  265,  266,  267,   59,   59,  125,   41,  272,  273,
  274,  275,  276,  277,  278,  279,  257,  261,  123,  260,
   40,  125,   59,  264,  265,  266,    0,  257,  263,  263,
  260,  272,  273,  262,  264,  276,  277,  278,  279,  454,
  263,   59,  272,  273,  125,   59,  272,   59,  278,  257,
  123,   59,  260,    0,  262,  263,  264,  265,  266,  267,
   59,  269,  270,  271,  272,  273,  274,  275,  276,  277,
  278,  279,  125,   59,   41,   40,  257,  262,    0,  260,
  125,  262,  263,  264,  265,  266,  267,  125,  269,  270,
  271,  272,  273,  274,  275,  276,  277,  278,  279,  257,
   40,   59,  260,  260,  262,  263,  264,  265,  266,  267,
  125,  263,   59,   59,  272,  273,  274,  275,  276,  277,
  278,  279,   44,  125,   59,  123,  257,   59,    0,  260,
   59,  262,  263,  264,  265,  266,  267,   59,  269,  270,
  271,  272,  273,  274,  275,  276,  277,  278,  279,  125,
  125,  125,   41,  257,   59,   59,  260,    0,  262,  263,
  264,  265,  266,  267,  125,  269,  270,  271,  272,  273,
  274,  275,  276,  277,  278,  279,  257,  125,  125,  260,
   41,  262,  263,  264,  265,  261,  267,   59,  333,  125,
  261,  272,  273,  274,  275,  276,  277,  278,  279,  125,
  263,   44,  263,  125,  257,  263,  263,  260,  123,  262,
  263,  264,  265,  125,  267,  263,   59,  263,  125,  272,
  273,  274,  275,  276,  277,  278,  279,  263,  123,   41,
  263,  263,  125,   45,  379,   41,  381,   59,   59,   45,
   59,   59,   45,   59,   59,   59,   59,  263,   60,   61,
   62,   59,  263,  125,   60,   61,   62,   60,   61,   62,
  257,  123,  263,  260,   41,   42,  125,  264,  263,  414,
  267,  125,  417,  125,   59,  272,  273,   59,  275,   59,
  263,  278,  125,  257,   59,  263,  260,   59,   59,  125,
  264,  265,  266,  257,  125,  257,  260,   58,  272,  273,
  264,    0,  276,  277,  278,  279,  262,  262,  272,  273,
  257,  274,  123,  260,  274,  274,  123,  264,  265,  266,
  125,   98,  274,  468,  469,  272,  273,  472,  473,  276,
  277,  278,  279,  274,  262,  257,  123,  262,  260,  247,
  182,  119,  264,  265,  266,  257,   13,   13,  260,   13,
  272,  273,  264,  123,  276,  277,  278,  279,  308,   70,
  272,  273,  257,  123,   47,  260,  278,  285,  250,  264,
   91,  266,  267,  123,  248,   -1,   -1,  272,  273,   -1,
  275,   -1,  159,  278,  161,  257,   -1,  164,  260,  166,
   -1,   -1,  264,  265,  266,  257,  123,   -1,  260,   -1,
  272,  273,  264,   -1,  276,  277,  278,  279,   -1,   -1,
  272,  273,  257,  123,  257,  260,  278,  260,   -1,  264,
   -1,  264,  265,  266,   -1,   -1,   -1,  272,  273,  272,
  273,   -1,  125,  276,  277,  278,  279,   -1,   -1,  216,
   -1,   -1,  219,   -1,  221,  257,  258,  224,   -1,   -1,
   -1,  257,  258,   -1,  257,  258,  125,  269,  270,  271,
   -1,   -1,   -1,  269,  270,  271,  269,  270,  271,   -1,
  257,   -1,   -1,  260,   -1,   -1,   -1,  264,  255,  125,
  267,  258,   -1,   -1,   -1,  272,  273,  257,  275,   -1,
  260,  278,   -1,   -1,  264,   -1,  266,  257,   -1,   -1,
  260,   -1,  272,  273,  264,  125,  266,  257,  278,   -1,
  260,   -1,  272,  273,  264,  125,  266,   -1,  278,   -1,
   -1,   -1,  272,  273,   -1,   -1,   -1,   -1,  278,   -1,
  257,  308,   -1,  260,   -1,   -1,   -1,  264,  125,   -1,
   -1,   -1,   -1,   -1,   -1,  272,  273,  257,  125,   -1,
  260,  278,   -1,   -1,  264,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,  272,  273,  257,   -1,   -1,  260,  278,  262,
  263,  264,  265,  266,  267,  125,   -1,   -1,   -1,  272,
  273,  274,  275,  276,  277,  278,  279,   -1,  257,   -1,
   -1,  260,   -1,  262,  263,  264,  265,  266,  267,  125,
   -1,   -1,   -1,  272,  273,  274,  275,  276,  277,  278,
  279,  257,   -1,   -1,  260,   -1,  262,  263,  264,  265,
  266,  267,  125,   -1,  125,   -1,  272,  273,  274,  275,
  276,  277,  278,  279,   -1,   -1,   -1,  257,   -1,   -1,
  260,   -1,   -1,   -1,  264,  265,  266,  257,  125,   -1,
  260,   -1,  272,  273,  264,  265,  276,  277,  278,  279,
   -1,   -1,  272,  273,   -1,   -1,  276,  277,  278,  279,
  257,  125,   -1,  260,   -1,   -1,   -1,  264,  265,   -1,
  257,   -1,   -1,  260,   -1,  272,  273,  264,  265,  276,
  277,  278,  279,  125,   -1,  272,  273,   -1,   -1,  276,
  277,  278,  279,   -1,   -1,   -1,   -1,  257,   -1,   -1,
  260,   -1,  125,   -1,  264,  265,   -1,   -1,   -1,   -1,
   -1,   -1,  272,  273,   -1,   -1,  276,  277,  278,  279,
   -1,  257,  125,   -1,  260,   -1,   -1,   -1,  264,  265,
   -1,   -1,   -1,   -1,   -1,   -1,  272,  273,   -1,  125,
  276,  277,  278,  279,  257,   -1,  257,  260,   -1,  260,
   -1,  264,  265,  264,   -1,  266,   -1,   -1,  125,  272,
  273,  272,  273,  276,  277,  278,  279,  278,   -1,   -1,
  257,   -1,   -1,  260,   -1,  125,   -1,  264,   -1,  266,
  267,   -1,   -1,   -1,   -1,  272,  273,  274,  275,   -1,
   -1,  278,  125,  257,   -1,   -1,  260,   -1,   -1,   -1,
  264,   -1,  266,  267,   -1,   -1,   -1,   -1,  272,  273,
  274,  275,  125,   -1,  278,  257,   -1,   -1,  260,   -1,
   -1,   -1,  264,  125,  266,  267,   -1,   -1,   -1,   -1,
  272,  273,  274,  275,  257,   -1,  278,  260,   -1,   -1,
  125,  264,   -1,  266,  267,   -1,   -1,   -1,   -1,  272,
  273,  125,  275,   -1,  257,  278,   -1,  260,   -1,   -1,
   -1,  264,  125,  266,  267,   -1,   -1,   -1,   -1,  272,
  273,  257,  275,  125,  260,  278,   -1,   -1,  264,   -1,
   -1,  267,   -1,   -1,  125,   -1,  272,  273,  274,  275,
  257,   -1,  278,  260,   -1,  125,   -1,  264,   -1,   -1,
  267,   -1,   -1,   -1,   -1,  272,  273,  257,  275,   -1,
  260,  278,   -1,   -1,  264,   -1,   -1,  267,   -1,   -1,
   -1,   -1,  272,  273,  257,  275,   -1,  260,  278,   -1,
   -1,  264,   -1,   -1,  267,   -1,   -1,   -1,   -1,  272,
  273,   -1,  275,   -1,  257,  278,   -1,  260,   -1,  262,
  263,  264,   -1,   -1,   -1,  257,   -1,   -1,  260,  272,
  273,   -1,  264,   -1,  266,  278,  337,   -1,   -1,   -1,
  272,  273,  257,   -1,   -1,  260,  278,  348,   -1,  264,
   -1,  266,  353,  257,   -1,   -1,  260,  272,  273,   -1,
  264,   -1,  266,  278,  257,   -1,   -1,  260,  272,  273,
   -1,  264,   -1,   -1,  278,  257,   -1,  378,  260,  272,
  273,   -1,  264,   -1,   -1,  278,  257,   -1,   -1,  260,
  272,  273,   -1,  264,  395,   -1,  278,  257,  399,   -1,
  260,  272,  273,   -1,  264,   -1,   -1,  278,   -1,   -1,
   -1,   -1,  272,  273,  257,   -1,   -1,  260,  278,   -1,
   -1,  264,  265,  266,  425,  426,   -1,   -1,   -1,  272,
  273,   -1,   -1,  276,  277,  278,  279,   -1,  257,   -1,
  441,  260,   -1,   -1,   -1,  264,  265,   -1,   -1,   -1,
   -1,   -1,   -1,  272,  273,   -1,   -1,  276,  277,  278,
  279,   -1,   -1,   -1,  257,   -1,   -1,  260,   -1,  470,
  471,  264,   -1,  266,  257,   -1,   -1,  260,   -1,  272,
  273,  264,   -1,  266,   -1,  278,   -1,   -1,   -1,  272,
  273,   -1,   -1,   -1,   -1,  278,
};
}
final static short YYFINAL=3;
final static short YYMAXTOKEN=279;
final static String yyname[] = {
"end-of-file",null,null,null,null,null,null,null,null,null,null,null,null,null,
null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,
null,null,null,null,null,null,null,null,null,null,"'('","')'","'*'","'+'","','",
"'-'",null,"'/'",null,null,null,null,null,null,null,null,null,null,"':'","';'",
"'<'","'='","'>'",null,null,null,null,null,null,null,null,null,null,null,null,
null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,
null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,
null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,
"'{'",null,"'}'",null,null,null,null,null,null,null,null,null,null,null,null,
null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,
null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,
null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,
null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,
null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,
null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,
null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,
null,null,null,null,null,null,null,"ID","CTE","CADENA","IF","THEN","ELSE",
"ENDIF","OUT","FUN","RETURN","BREAK","ASIGNACION","COMP_MAYOR_IGUAL",
"COMP_MENOR_IGUAL","COMP_DISTINTO","WHEN","DO","UNTIL","CONTINUE","DOUBLE64",
"UINT16","DEFER","CONST",
};
final static String yyrule[] = {
"$accept : programa",
"programa : nombre_programa '{' sentencias '}'",
"programa : '{' sentencias '}'",
"programa : nombre_programa sentencias '}'",
"programa : nombre_programa '{' sentencias",
"programa : nombre_programa '{' '}'",
"nombre_programa : ID",
"sentencias : sentencia",
"sentencias : sentencias sentencia",
"sentencia : sentencia_declarativa",
"sentencia : sentencia_ejecutable",
"sentencia_declarativa : sentencia_declarativa_variables",
"sentencia_declarativa : funcion_con_return",
"sentencia_declarativa : funcion_sin_return",
"sentencia_declarativa : declaracion_constantes",
"sentencia_declarativa_variables : tipo lista_de_variables ';'",
"sentencia_declarativa_variables : tipo lista_de_variables",
"sentencia_declarativa_variables : lista_de_variables ';'",
"sentencia_declarativa_variables : tipo ';'",
"lista_de_variables : ID ',' lista_de_variables",
"lista_de_variables : ID",
"funcion_con_return : encabezado_funcion '{' sentencia_return '}'",
"funcion_con_return : encabezado_funcion '{' sentencias_funcion sentencia_return '}'",
"funcion_con_return : encabezado_funcion '{' '}'",
"sentencias_funcion : sentencia_funcion",
"sentencias_funcion : sentencias_funcion sentencia_funcion",
"sentencia_funcion : sentencia_declarativa",
"sentencia_funcion : sentencia_ejecutable_funcion",
"sentencia_ejecutable_funcion : asignacion",
"sentencia_ejecutable_funcion : DEFER asignacion",
"sentencia_ejecutable_funcion : imprimir",
"sentencia_ejecutable_funcion : DEFER imprimir",
"sentencia_ejecutable_funcion : sentencia_when_con_return",
"sentencia_ejecutable_funcion : DEFER sentencia_when_con_return",
"sentencia_ejecutable_funcion : sentencia_do_con_return",
"sentencia_ejecutable_funcion : DEFER sentencia_do_con_return",
"sentencia_ejecutable_funcion : sentencia_seleccion_simple_con_return",
"sentencia_ejecutable_funcion : DEFER sentencia_seleccion_simple_con_return",
"sentencias_ejecutables_funcion : sentencia_ejecutable_funcion",
"sentencias_ejecutables_funcion : sentencias_ejecutables_funcion sentencia_ejecutable_funcion",
"funcion_sin_return : encabezado_funcion '{' sentencia_seleccion_compuesta_con_return '}'",
"funcion_sin_return : encabezado_funcion '{' sentencias_funcion sentencia_seleccion_compuesta_con_return '}'",
"sentencia_seleccion_compuesta_con_return : IF '(' condicion ')' THEN sentencia_seleccion_compuesta_con_return_simple ELSE sentencia_seleccion_compuesta_con_return_simple ENDIF ';'",
"sentencia_seleccion_compuesta_con_return : IF '(' condicion ')' THEN '{' sentencias_ejecutables_funcion sentencia_return '}' ELSE sentencia_seleccion_compuesta_con_return_simple ENDIF ';'",
"sentencia_seleccion_compuesta_con_return : IF '(' condicion ')' THEN '{' sentencias_ejecutables_funcion sentencia_seleccion_compuesta_con_return '}' ELSE sentencia_seleccion_compuesta_con_return_simple ENDIF ';'",
"sentencia_seleccion_compuesta_con_return : IF '(' condicion ')' THEN sentencia_seleccion_compuesta_con_return_simple ELSE '{' sentencias_ejecutables_funcion sentencia_return '}' ENDIF ';'",
"sentencia_seleccion_compuesta_con_return : IF '(' condicion ')' THEN sentencia_seleccion_compuesta_con_return_simple ELSE '{' sentencias_ejecutables_funcion sentencia_seleccion_compuesta_con_return '}' ENDIF ';'",
"sentencia_seleccion_compuesta_con_return : IF '(' condicion ')' THEN '{' sentencias_ejecutables_funcion sentencia_return '}' ELSE '{' sentencias_ejecutables_funcion sentencia_seleccion_compuesta_con_return_simple '}' ENDIF ';'",
"sentencia_seleccion_compuesta_con_return : IF '(' condicion ')' THEN '{' sentencias_ejecutables_funcion sentencia_seleccion_compuesta_con_return '}' ELSE '{' sentencias_ejecutables_funcion sentencia_seleccion_compuesta_con_return_simple '}' ENDIF ';'",
"sentencia_seleccion_compuesta_con_return_simple : sentencia_return",
"sentencia_seleccion_compuesta_con_return_simple : sentencia_seleccion_compuesta_con_return",
"sentencia_seleccion_compuesta_con_return_simple : DEFER sentencia_seleccion_compuesta_con_return",
"sentencia_seleccion_simple_con_return : IF '(' condicion ')' THEN sentencia_return ENDIF ';'",
"sentencia_seleccion_simple_con_return : IF '(' condicion ')' THEN sentencia_seleccion_compuesta_con_return ENDIF ';'",
"sentencia_seleccion_simple_con_return : IF '(' condicion ')' THEN sentencia_ejecutable_funcion ENDIF ';'",
"sentencia_seleccion_simple_con_return : IF '(' condicion ')' THEN '{' sentencias_ejecutables_funcion sentencia_return '}' ENDIF ';'",
"sentencia_seleccion_simple_con_return : IF '(' condicion ')' THEN '{' sentencias_ejecutables_funcion sentencia_seleccion_compuesta_con_return '}' ENDIF ';'",
"sentencia_seleccion_simple_con_return : IF '(' condicion ')' THEN '{' sentencias_ejecutables_funcion sentencia_return '}' ELSE '{' sentencias_ejecutables_funcion '}' ENDIF ';'",
"sentencia_seleccion_simple_con_return : IF '(' condicion ')' THEN '{' sentencias_ejecutables_funcion sentencia_return '}' ELSE sentencia_ejecutable_funcion ENDIF ';'",
"sentencia_seleccion_simple_con_return : IF '(' condicion ')' THEN '{' sentencias_ejecutables_funcion sentencia_seleccion_compuesta_con_return '}' ELSE sentencia_ejecutable_funcion ENDIF ';'",
"sentencia_seleccion_simple_con_return : IF '(' condicion ')' THEN '{' sentencias_ejecutables_funcion sentencia_seleccion_compuesta_con_return '}' ELSE '{' sentencias_ejecutables_funcion '}' ENDIF ';'",
"sentencia_seleccion_simple_con_return : IF '(' condicion ')' THEN '{' sentencias_ejecutables_funcion '}' ELSE '{' sentencias_ejecutables_funcion sentencia_return '}' ENDIF ';'",
"sentencia_seleccion_simple_con_return : IF '(' condicion ')' THEN '{' sentencias_ejecutables_funcion '}' ELSE '{' sentencias_ejecutables_funcion sentencia_seleccion_compuesta_con_return '}' ENDIF ';'",
"sentencia_seleccion_simple_con_return : IF '(' condicion ')' THEN sentencia_ejecutable_funcion ELSE '{' sentencias_ejecutables_funcion sentencia_return '}' ENDIF ';'",
"sentencia_seleccion_simple_con_return : IF '(' condicion ')' THEN sentencia_ejecutable_funcion ELSE '{' sentencias_ejecutables_funcion sentencia_seleccion_compuesta_con_return '}' ENDIF ';'",
"sentencia_seleccion_simple_con_return : IF '(' condicion ')' THEN '{' sentencias_ejecutables_funcion '}' ELSE '{' sentencias_ejecutables_funcion '}' ENDIF ';'",
"sentencia_when_con_return : WHEN '(' condicion ')' THEN '{' sentencia_funcion '}' ';'",
"sentencia_when_con_return : WHEN '(' condicion ')' THEN '{' sentencia_funcion sentencia_return '}' ';'",
"sentencia_when_con_return : WHEN '(' condicion ')' THEN '{' sentencia_funcion sentencia_seleccion_compuesta_con_return '}' ';'",
"sentencia_when_con_return : WHEN '(' condicion ')' THEN '{' sentencia_funcion '}'",
"sentencia_when_con_return : WHEN '(' condicion ')' THEN '{' sentencia_funcion sentencia_return '}'",
"sentencia_when_con_return : WHEN '(' condicion ')' THEN '{' sentencia_funcion sentencia_seleccion_compuesta_con_return '}'",
"sentencia_when_con_return : WHEN '(' condicion ')' THEN '{' '}' ';'",
"sentencia_do_con_return : DO bloque_sentencias_ejecutables_do_con_return UNTIL '(' condicion ')' ';'",
"sentencia_do_con_return : etiqueta ':' DO bloque_sentencias_ejecutables_do_con_return UNTIL '(' condicion ')' ';'",
"bloque_sentencias_ejecutables_do_con_return : sentencia_return",
"bloque_sentencias_ejecutables_do_con_return : sentencia_seleccion_compuesta_con_return",
"bloque_sentencias_ejecutables_do_con_return : sentencias_ejecutables_do_funcion",
"bloque_sentencias_ejecutables_do_con_return : '{' sentencias_ejecutables_do_funcion sentencia_return '}'",
"bloque_sentencias_ejecutables_do_con_return : '{' sentencias_ejecutables_do_funcion sentencia_seleccion_compuesta_con_return '}'",
"bloque_sentencias_ejecutables_do_con_return : '{' sentencias_ejecutables_do_funcion '}'",
"bloque_sentencias_ejecutables_do_con_return : '{' '}'",
"bloque_sentencias_ejecutables_do_con_return : '{' sentencias_ejecutables_do_funcion sentencia_return",
"bloque_sentencias_ejecutables_do_con_return : sentencias_ejecutables_do_funcion sentencia_return '}'",
"bloque_sentencias_ejecutables_do_con_return : '{' sentencias_ejecutables_do_funcion sentencia_seleccion_compuesta_con_return",
"bloque_sentencias_ejecutables_do_con_return : sentencias_ejecutables_do_funcion sentencia_seleccion_compuesta_con_return '}'",
"bloque_sentencias_ejecutables_do_con_return : '{' sentencias_ejecutables_do_funcion",
"bloque_sentencias_ejecutables_do_con_return : sentencias_ejecutables_do_funcion '}'",
"sentencias_ejecutables_do_funcion : sentencia_ejecutable_do_funcion",
"sentencias_ejecutables_do_funcion : sentencias_ejecutables_do_funcion sentencia_ejecutable_do_funcion",
"sentencia_ejecutable_do_funcion : sentencia_ejecutable_funcion",
"sentencia_ejecutable_do_funcion : sentencia_break",
"sentencia_ejecutable_do_funcion : sentencia_continue",
"encabezado_funcion : FUN ID '(' ')' ':' tipo",
"encabezado_funcion : FUN ID '(' lista_de_parametros ')' ':' tipo",
"encabezado_funcion : FUN ID '(' ')' ':'",
"encabezado_funcion : FUN '(' ')' ':' tipo",
"encabezado_funcion : FUN ID ')' ':' tipo",
"encabezado_funcion : FUN ID '(' ':' tipo",
"encabezado_funcion : FUN ID '(' lista_de_parametros ')' ':'",
"encabezado_funcion : FUN '(' lista_de_parametros ')' ':' tipo",
"encabezado_funcion : FUN ID lista_de_parametros ')' ':' tipo",
"encabezado_funcion : FUN ID '(' lista_de_parametros ':' tipo",
"sentencia_return : RETURN '(' expresion ')' ';'",
"sentencia_return : RETURN '(' expresion ')'",
"sentencia_return : RETURN expresion ')'",
"sentencia_return : RETURN '(' expresion",
"sentencia_return : RETURN '(' ')' ';'",
"lista_de_parametros : parametro",
"lista_de_parametros : parametro ',' parametro",
"lista_de_parametros : parametro ',' parametro ',' lista_parametros_exceso",
"lista_parametros_exceso : parametro",
"lista_parametros_exceso : parametro ',' lista_parametros_exceso",
"parametro : tipo ID",
"parametro : tipo",
"$$1 :",
"parametro : $$1 ID",
"declaracion_constantes : CONST lista_declaracion_constantes ';'",
"declaracion_constantes : CONST lista_declaracion_constantes",
"declaracion_constantes : CONST ';'",
"lista_declaracion_constantes : declaracion_constante",
"lista_declaracion_constantes : declaracion_constante ',' lista_declaracion_constantes",
"declaracion_constante : ID ASIGNACION CTE",
"declaracion_constante : ID ASIGNACION",
"declaracion_constante : ID CTE",
"declaracion_constante : ID",
"sentencia_ejecutable : asignacion",
"sentencia_ejecutable : DEFER asignacion",
"sentencia_ejecutable : seleccion",
"sentencia_ejecutable : DEFER seleccion",
"sentencia_ejecutable : imprimir",
"sentencia_ejecutable : DEFER imprimir",
"sentencia_ejecutable : sentencia_when",
"sentencia_ejecutable : DEFER sentencia_when",
"sentencia_ejecutable : sentencia_do",
"sentencia_ejecutable : DEFER sentencia_do",
"sentencia_ejecutable_do : sentencia_ejecutable",
"sentencia_ejecutable_do : sentencia_break",
"sentencia_ejecutable_do : sentencia_continue",
"sentencia_break : BREAK ';'",
"sentencia_break : BREAK ':' etiqueta ';'",
"sentencia_break : BREAK",
"sentencia_break : BREAK ':' etiqueta",
"sentencia_break : BREAK ':' ';'",
"sentencia_continue : CONTINUE ';'",
"sentencia_continue : CONTINUE",
"sentencia_do : sentencia_do_simple",
"sentencia_do : etiqueta ':' sentencia_do_simple",
"sentencia_do_simple : DO bloque_sentencias_ejecutables_do UNTIL '(' condicion ')' ';'",
"sentencia_do_simple : DO bloque_sentencias_ejecutables_do UNTIL '(' condicion ')'",
"sentencia_do_simple : DO bloque_sentencias_ejecutables_do UNTIL '(' ')' ';'",
"sentencia_do_simple : DO bloque_sentencias_ejecutables_do UNTIL condicion ')' ';'",
"sentencia_do_simple : DO bloque_sentencias_ejecutables_do UNTIL '(' condicion ';'",
"etiqueta : ID",
"bloque_sentencias_ejecutables_do : sentencia_ejecutable_do",
"bloque_sentencias_ejecutables_do : '{' sentencias_ejecutables_do '}'",
"bloque_sentencias_ejecutables_do : '{' sentencias_ejecutables_do",
"bloque_sentencias_ejecutables_do : sentencias_ejecutables_do '}'",
"sentencias_ejecutables_do : sentencia_ejecutable_do",
"sentencias_ejecutables_do : sentencias_ejecutables_do sentencia_ejecutable_do",
"asignacion : ID ASIGNACION expresion ';'",
"asignacion : ID ASIGNACION ';'",
"asignacion : ID ASIGNACION expresion",
"sentencia_when : WHEN '(' condicion ')' THEN '{' sentencias_when '}' ';'",
"sentencia_when : WHEN '(' condicion ')' '{' sentencias_when '}' ';'",
"$$2 :",
"sentencia_when : WHEN '(' ')' THEN '{' sentencias_when '}' ';' $$2 WHEN '(' condicion ')' THEN '{' sentencias_when '}'",
"sentencia_when : WHEN '(' condicion ')' '{' sentencias_when '}'",
"sentencia_when : WHEN '(' condicion ')' '{' '}'",
"sentencias_when : sentencia",
"sentencias_when : sentencia sentencias_when",
"seleccion : IF '(' condicion ')' THEN bloque_sentencias_ejecutables_seleccion ENDIF ';'",
"seleccion : IF '(' condicion ')' THEN bloque_sentencias_ejecutables_seleccion ELSE bloque_sentencias_ejecutables_seleccion ENDIF ';'",
"bloque_sentencias_ejecutables_seleccion : sentencia_ejecutable",
"bloque_sentencias_ejecutables_seleccion : '{' sentencias_ejecutables '}'",
"bloque_sentencias_ejecutables_seleccion : '{' '}'",
"bloque_sentencias_ejecutables_seleccion : '{' sentencias_ejecutables",
"bloque_sentencias_ejecutables_seleccion : sentencias_ejecutables '}'",
"sentencias_ejecutables : sentencia_ejecutable",
"sentencias_ejecutables : sentencias_ejecutables sentencia_ejecutable",
"condicion : expresion comparador expresion",
"condicion : expresion comparador",
"condicion : comparador expresion",
"comparador : COMP_MAYOR_IGUAL",
"comparador : COMP_MENOR_IGUAL",
"comparador : COMP_DISTINTO",
"comparador : '>'",
"comparador : '<'",
"comparador : '='",
"expresion : expresion '+' termino",
"expresion : expresion '-' termino",
"expresion : termino",
"termino : termino '*' factor",
"termino : termino '/' factor",
"termino : factor",
"factor : ID",
"factor : constante",
"factor : invocacion_funcion",
"invocacion_funcion : ID '(' ')'",
"invocacion_funcion : ID '(' lista_de_parametros_reales ')'",
"lista_de_parametros_reales : parametro_real",
"lista_de_parametros_reales : lista_de_parametros_reales ',' parametro_real",
"parametro_real : ID",
"parametro_real : constante",
"imprimir : OUT '(' CADENA ')' ';'",
"imprimir : OUT '(' ID ')' ';'",
"imprimir : OUT '(' ')' ';'",
"imprimir : OUT CADENA ')' ';'",
"imprimir : OUT '(' CADENA ';'",
"imprimir : OUT ID ')' ';'",
"imprimir : OUT '(' ID ';'",
"imprimir : OUT '(' CADENA ')'",
"imprimir : OUT '(' ID ')'",
"constante : CTE",
"constante : '-' CTE",
"tipo : UINT16",
"tipo : DOUBLE64",
};

//#line 397 ".\gramatica.y"

public static AnalizadorLexico lexico = null;
public static Logger logger = null;
public static TablaDeSimbolos ts = null;

public void constanteConSigno(String constante) {
	if (constante.contains(".")) {
		
		String negConstante = "-"+constante;
		
		Double parsedDouble = Double.parseDouble(negConstante.replace('D', 'E'));
		
		if (parsedDouble < -2.2250738585072014E-308 && -1.7976931348623157E+308 > parsedDouble) {
			logger.logWarning("[Parser] Rango invalido para la constante: " + negConstante + ", se trunca al rango permitido");
			
			if (-1.7976931348623157E+308 < parsedDouble) {
				negConstante = new String("-1.7976931348623157D+308");
			} else {
				negConstante =  new String("-2.2250738585072014D-308");
			}
		}
		
		ts.swapLexemas(constante, negConstante);
	} else {
		//se recibio un uint que fue aceptado por el lexico pero resulta ser negativo
		logger.logWarning("[Parser] No se admiten ui16 con valores negativos: " + "-"+constante + ", se trunca a 0");
		
		ts.swapLexemas(constante, "0");
	}
}	

public int yylex() {
	return lexico.yylex(yylval);
}

public void yyerror(String error) {
	logger.logError(error);
}

public static void main(String[] args) {
	if (args.length == 0) {
		System.err.println("No se especifico ningun archivo de codigo");
	} else {
		String archivo_a_leer = args[0];
		System.out.println("Se va a leer archivo " + archivo_a_leer);
		
		FileReaderHelper fileHelper = new FileReaderHelper();
		
		fileHelper.open(archivo_a_leer);
		
		Parser parser = new Parser();
		logger = new Logger();
		ts = new TablaDeSimbolos();
		lexico = new AnalizadorLexico(fileHelper, ts, logger);
		
        parser.run();

		String path = new File(archivo_a_leer).getAbsolutePath().replaceAll(args[0],"");
        
        Output out = new Output(path);
        
        String printTs = ts.print();
        
        
        out.saveFile("codigo-lexico.txt", logger.getLexico());
		out.saveFile("codigo-sintetico.txt", logger.getSintactico());
		out.saveFile("tabla-de-simbolos.txt", printTs);
        
		System.out.println(printTs);
	}
}
//#line 988 "Parser.java"
//###############################################################
// method: yylexdebug : check lexer state
//###############################################################
void yylexdebug(int state,int ch)
{
String s=null;
  if (ch < 0) ch=0;
  if (ch <= YYMAXTOKEN) //check index bounds
     s = yyname[ch];    //now get it
  if (s==null)
    s = "illegal-symbol";
  debug("state "+state+", reading "+ch+" ("+s+")");
}





//The following are now global, to aid in error reporting
int yyn;       //next next thing to do
int yym;       //
int yystate;   //current parsing state from state table
String yys;    //current token string


//###############################################################
// method: yyparse : parse input and execute indicated items
//###############################################################
int yyparse()
{
boolean doaction;
  init_stacks();
  yynerrs = 0;
  yyerrflag = 0;
  yychar = -1;          //impossible char forces a read
  yystate=0;            //initial state
  state_push(yystate);  //save it
  val_push(yylval);     //save empty value
  while (true) //until parsing is done, either correctly, or w/error
    {
    doaction=true;
    if (yydebug) debug("loop"); 
    //#### NEXT ACTION (from reduction table)
    for (yyn=yydefred[yystate];yyn==0;yyn=yydefred[yystate])
      {
      if (yydebug) debug("yyn:"+yyn+"  state:"+yystate+"  yychar:"+yychar);
      if (yychar < 0)      //we want a char?
        {
        yychar = yylex();  //get next token
        if (yydebug) debug(" next yychar:"+yychar);
        //#### ERROR CHECK ####
        if (yychar < 0)    //it it didn't work/error
          {
          yychar = 0;      //change it to default string (no -1!)
          if (yydebug)
            yylexdebug(yystate,yychar);
          }
        }//yychar<0
      yyn = yysindex[yystate];  //get amount to shift by (shift index)
      if ((yyn != 0) && (yyn += yychar) >= 0 &&
          yyn <= YYTABLESIZE && yycheck[yyn] == yychar)
        {
        if (yydebug)
          debug("state "+yystate+", shifting to state "+yytable[yyn]);
        //#### NEXT STATE ####
        yystate = yytable[yyn];//we are in a new state
        state_push(yystate);   //save it
        val_push(yylval);      //push our lval as the input for next rule
        yychar = -1;           //since we have 'eaten' a token, say we need another
        if (yyerrflag > 0)     //have we recovered an error?
           --yyerrflag;        //give ourselves credit
        doaction=false;        //but don't process yet
        break;   //quit the yyn=0 loop
        }

    yyn = yyrindex[yystate];  //reduce
    if ((yyn !=0 ) && (yyn += yychar) >= 0 &&
            yyn <= YYTABLESIZE && yycheck[yyn] == yychar)
      {   //we reduced!
      if (yydebug) debug("reduce");
      yyn = yytable[yyn];
      doaction=true; //get ready to execute
      break;         //drop down to actions
      }
    else //ERROR RECOVERY
      {
      if (yyerrflag==0)
        {
        yyerror("syntax error");
        yynerrs++;
        }
      if (yyerrflag < 3) //low error count?
        {
        yyerrflag = 3;
        while (true)   //do until break
          {
          if (stateptr<0)   //check for under & overflow here
            {
            yyerror("stack underflow. aborting...");  //note lower case 's'
            return 1;
            }
          yyn = yysindex[state_peek(0)];
          if ((yyn != 0) && (yyn += YYERRCODE) >= 0 &&
                    yyn <= YYTABLESIZE && yycheck[yyn] == YYERRCODE)
            {
            if (yydebug)
              debug("state "+state_peek(0)+", error recovery shifting to state "+yytable[yyn]+" ");
            yystate = yytable[yyn];
            state_push(yystate);
            val_push(yylval);
            doaction=false;
            break;
            }
          else
            {
            if (yydebug)
              debug("error recovery discarding state "+state_peek(0)+" ");
            if (stateptr<0)   //check for under & overflow here
              {
              yyerror("Stack underflow. aborting...");  //capital 'S'
              return 1;
              }
            state_pop();
            val_pop();
            }
          }
        }
      else            //discard this token
        {
        if (yychar == 0)
          return 1; //yyabort
        if (yydebug)
          {
          yys = null;
          if (yychar <= YYMAXTOKEN) yys = yyname[yychar];
          if (yys == null) yys = "illegal-symbol";
          debug("state "+yystate+", error recovery discards token "+yychar+" ("+yys+")");
          }
        yychar = -1;  //read another
        }
      }//end error recovery
    }//yyn=0 loop
    if (!doaction)   //any reason not to proceed?
      continue;      //skip action
    yym = yylen[yyn];          //get count of terminals on rhs
    if (yydebug)
      debug("state "+yystate+", reducing "+yym+" by rule "+yyn+" ("+yyrule[yyn]+")");
    if (yym>0)                 //if count of rhs not 'nil'
      yyval = val_peek(yym-1); //get current semantic value
    yyval = dup_yyval(yyval); //duplicate yyval if ParserVal is used as semantic value
    switch(yyn)
      {
//########## USER-SUPPLIED ACTIONS ##########
case 1:
//#line 17 ".\gramatica.y"
{ logger.logSuccess("[Parser] Programa correcto detectado"); }
break;
case 2:
//#line 18 ".\gramatica.y"
{ logger.logError("[Parser] Se esperaba un identificador nombre del programa"); }
break;
case 3:
//#line 19 ".\gramatica.y"
{ logger.logError("[Parser] Se esperaba un { antes de las sentencias del programa"); }
break;
case 4:
//#line 20 ".\gramatica.y"
{ logger.logError("[Parser] Se esperaba un } al final de las sentencias del programa"); }
break;
case 5:
//#line 21 ".\gramatica.y"
{ logger.logError("[Parser] Se esperaban sentencias del programa"); }
break;
case 15:
//#line 46 ".\gramatica.y"
{ logger.logSuccess("[Parser] Declaracion de lista de variables detectado"); }
break;
case 16:
//#line 47 ".\gramatica.y"
{ logger.logError("[Parser] Se esperaba un ; al final de la lista de variables"); }
break;
case 17:
//#line 48 ".\gramatica.y"
{ logger.logError("[Parser] Se esperaba un tipo para la lista de variables"); }
break;
case 18:
//#line 49 ".\gramatica.y"
{ logger.logError("[Parser] Se esperaba una variable o lista de variables"); }
break;
case 21:
//#line 58 ".\gramatica.y"
{ logger.logSuccess("[Parser] Declaracion de funcion detectado"); }
break;
case 22:
//#line 59 ".\gramatica.y"
{ logger.logSuccess("[Parser] Declaracion de funcion detectado"); }
break;
case 23:
//#line 60 ".\gramatica.y"
{ logger.logError("[Parser] Se esperaban sentencias en la funcion"); }
break;
case 40:
//#line 92 ".\gramatica.y"
{ logger.logSuccess("[Parser] Declaracion de funcion detectado"); }
break;
case 41:
//#line 93 ".\gramatica.y"
{ logger.logSuccess("[Parser] Declaracion de funcion detectado"); }
break;
case 52:
//#line 113 ".\gramatica.y"
{ logger.logSuccess("[Parser] Sentencia de seleccion detectada"); }
break;
case 53:
//#line 114 ".\gramatica.y"
{ logger.logSuccess("[Parser] Sentencia de seleccion detectada"); }
break;
case 54:
//#line 115 ".\gramatica.y"
{ logger.logSuccess("[Parser] Sentencia de seleccion detectada"); }
break;
case 55:
//#line 116 ".\gramatica.y"
{ logger.logSuccess("[Parser] Sentencia de seleccion detectada"); }
break;
case 56:
//#line 117 ".\gramatica.y"
{ logger.logSuccess("[Parser] Sentencia de seleccion detectada"); }
break;
case 57:
//#line 118 ".\gramatica.y"
{ logger.logSuccess("[Parser] Sentencia de seleccion detectada"); }
break;
case 58:
//#line 119 ".\gramatica.y"
{ logger.logSuccess("[Parser] Sentencia de seleccion detectada"); }
break;
case 59:
//#line 120 ".\gramatica.y"
{ logger.logSuccess("[Parser] Sentencia de seleccion detectada"); }
break;
case 60:
//#line 121 ".\gramatica.y"
{ logger.logSuccess("[Parser] Sentencia de seleccion detectada"); }
break;
case 61:
//#line 122 ".\gramatica.y"
{ logger.logSuccess("[Parser] Sentencia de seleccion detectada"); }
break;
case 62:
//#line 123 ".\gramatica.y"
{ logger.logSuccess("[Parser] Sentencia de seleccion detectada"); }
break;
case 63:
//#line 124 ".\gramatica.y"
{ logger.logSuccess("[Parser] Sentencia de seleccion detectada"); }
break;
case 64:
//#line 125 ".\gramatica.y"
{ logger.logSuccess("[Parser] Sentencia de seleccion detectada"); }
break;
case 65:
//#line 126 ".\gramatica.y"
{ logger.logSuccess("[Parser] Sentencia de seleccion detectada"); }
break;
case 66:
//#line 130 ".\gramatica.y"
{ logger.logSuccess("[Parser] Sentencia when detectada"); }
break;
case 67:
//#line 131 ".\gramatica.y"
{ logger.logSuccess("[Parser] Sentencia when detectada"); }
break;
case 68:
//#line 132 ".\gramatica.y"
{ logger.logSuccess("[Parser] Sentencia when detectada"); }
break;
case 69:
//#line 133 ".\gramatica.y"
{ logger.logError("[Parser] Se esperaba ; al final de la sentencia when"); }
break;
case 70:
//#line 134 ".\gramatica.y"
{ logger.logError("[Parser] Se esperaba ; al final de la sentencia when"); }
break;
case 71:
//#line 135 ".\gramatica.y"
{ logger.logError("[Parser] Se esperaba ; al final de la sentencia when"); }
break;
case 72:
//#line 136 ".\gramatica.y"
{ logger.logError("[Parser] Se esperaban sentencias en la sentencia when"); }
break;
case 73:
//#line 140 ".\gramatica.y"
{ logger.logSuccess("[Parser] Sentencia do until detectada"); }
break;
case 74:
//#line 141 ".\gramatica.y"
{ logger.logSuccess("[Parser] Sentencia do until detectada"); }
break;
case 81:
//#line 151 ".\gramatica.y"
{ logger.logError("[Parser] Se esperaban sentencias en la sentencia do"); }
break;
case 82:
//#line 152 ".\gramatica.y"
{ logger.logError("[Parser] Se esperaba un } al final de la sentencia do"); }
break;
case 83:
//#line 153 ".\gramatica.y"
{ logger.logError("[Parser] Se esperaba un } al final de la sentencia do"); }
break;
case 84:
//#line 154 ".\gramatica.y"
{ logger.logError("[Parser] Se esperaba un } al final de la sentencia do"); }
break;
case 85:
//#line 155 ".\gramatica.y"
{ logger.logError("[Parser] Se esperaba un } al final de la sentencia do"); }
break;
case 86:
//#line 156 ".\gramatica.y"
{ logger.logError("[Parser] Se esperaba un } al final de la sentencia do"); }
break;
case 87:
//#line 157 ".\gramatica.y"
{ logger.logError("[Parser] Se esperaba un } al final de la sentencia do"); }
break;
case 95:
//#line 174 ".\gramatica.y"
{ logger.logError("[Parser] Se esperaba un tipo de return para la funcion"); }
break;
case 96:
//#line 175 ".\gramatica.y"
{ logger.logError("[Parser] Se esperaba un identificador nombre para la funcion"); }
break;
case 97:
//#line 176 ".\gramatica.y"
{ logger.logError("[Parser] Se esperaba un ( luego del nombre de la funcion"); }
break;
case 98:
//#line 177 ".\gramatica.y"
{ logger.logError("[Parser] Se esperaba un ) luego del nombre para la funcion"); }
break;
case 99:
//#line 178 ".\gramatica.y"
{ logger.logError("[Parser] Se esperaba un tipo de return para la funcion"); }
break;
case 100:
//#line 179 ".\gramatica.y"
{ logger.logError("[Parser] Se esperaba un identificador nombre para la funcion"); }
break;
case 101:
//#line 180 ".\gramatica.y"
{ logger.logError("[Parser] Se esperaba un ( luego del nombre de la funcion"); }
break;
case 102:
//#line 181 ".\gramatica.y"
{ logger.logError("[Parser] Se esperaba un ) luego del nombre para la funcion"); }
break;
case 104:
//#line 186 ".\gramatica.y"
{ logger.logError("[Parser] Se esperaba un ; al final de la sentencia return"); }
break;
case 105:
//#line 187 ".\gramatica.y"
{ logger.logError("[Parser] Se esperaba un ( en la sentencia return"); }
break;
case 106:
//#line 188 ".\gramatica.y"
{ logger.logError("[Parser] Se esperaba un ) en la sentencia return"); }
break;
case 107:
//#line 189 ".\gramatica.y"
{ logger.logError("[Parser] Se esperaba una expresion en la sentencia return"); }
break;
case 110:
//#line 195 ".\gramatica.y"
{ logger.logError("[Parser] Hay mas de 2 parametros en la funcion"); }
break;
case 115:
//#line 205 ".\gramatica.y"
{ logger.logError("[Parser] Se esperaba un identificador nombre para el parametro"); }
break;
case 116:
//#line 206 ".\gramatica.y"
{ logger.logError("[Parser] Se esperaba un tipo valido para el parametro"); }
break;
case 117:
//#line 210 ".\gramatica.y"
{ logger.logSuccess("[Parser] Declaracion de constantes detectado"); }
break;
case 118:
//#line 211 ".\gramatica.y"
{ logger.logError("[Parser] Se esperaba ; al final de la declaracion de constantes"); }
break;
case 119:
//#line 212 ".\gramatica.y"
{ logger.logError("[Parser] Se esperaba una lista de declaracion de constantes"); }
break;
case 123:
//#line 222 ".\gramatica.y"
{ logger.logError("[Parser] Se esperaba una constante del lado derecho de la asignacion"); }
break;
case 124:
//#line 223 ".\gramatica.y"
{ logger.logError("[Parser] Se esperaba el simbolo asignacion en la declaracion de constantes"); }
break;
case 125:
//#line 224 ".\gramatica.y"
{ logger.logError("[Parser] Se esperaba una asignacion en la declaracion de constantes"); }
break;
case 139:
//#line 247 ".\gramatica.y"
{ logger.logSuccess("[Parser] Sentencia break detectada"); }
break;
case 140:
//#line 248 ".\gramatica.y"
{ logger.logSuccess("[Parser] Sentencia break con etiqueta detectada"); }
break;
case 141:
//#line 249 ".\gramatica.y"
{ logger.logError("[Parser] Se esperaba un ; luego de la sentencia break"); }
break;
case 142:
//#line 250 ".\gramatica.y"
{ logger.logError("[Parser] Se esperaba un ; luego de la sentencia break"); }
break;
case 143:
//#line 251 ".\gramatica.y"
{ logger.logError("[Parser] Se esperaba una etiqueta en la sentencia break"); }
break;
case 144:
//#line 255 ".\gramatica.y"
{ logger.logSuccess("[Parser] Sentencia continue detectada"); }
break;
case 145:
//#line 256 ".\gramatica.y"
{ logger.logError("[Parser] Se esperaba un ; al final de la sentencia continue"); }
break;
case 148:
//#line 265 ".\gramatica.y"
{ logger.logSuccess("[Parser] Sentencia do until detectada"); }
break;
case 149:
//#line 266 ".\gramatica.y"
{ logger.logError("[Parser] Se esperaba un ; al final de la sentencia do"); }
break;
case 150:
//#line 267 ".\gramatica.y"
{ logger.logError("[Parser] Se esperaba una condicion para la sentencia do"); }
break;
case 151:
//#line 268 ".\gramatica.y"
{ logger.logSuccess("[Parser] Se esperaba un ( en la condicion para la sentencia do"); }
break;
case 152:
//#line 269 ".\gramatica.y"
{ logger.logSuccess("[Parser] Se esperaba un ) en la condicion para la sentencia do"); }
break;
case 156:
//#line 279 ".\gramatica.y"
{ logger.logError("[Parser] Se esperaba un } al final de la sentencia do"); }
break;
case 157:
//#line 280 ".\gramatica.y"
{ logger.logError("[Parser] Se esperaba un { en la sentencia do"); }
break;
case 160:
//#line 289 ".\gramatica.y"
{ logger.logSuccess("[Parser] Asignacion detectada"); }
break;
case 161:
//#line 290 ".\gramatica.y"
{logger.logError("[Parser] Se espera una expresion del lado derecho de la asignacion");}
break;
case 162:
//#line 291 ".\gramatica.y"
{ logger.logError("[Parser] Se espera un ; al final de la asignacion"); }
break;
case 163:
//#line 295 ".\gramatica.y"
{ logger.logSuccess("[Parser] Sentencia when detectada"); }
break;
case 164:
//#line 296 ".\gramatica.y"
{ logger.logError("[Parser] Se esperaba la palabra reservada then en la sentencia when"); }
break;
case 165:
//#line 297 ".\gramatica.y"
{ logger.logError("[Parser] Se esperaba una condicion en la sentencia when"); }
break;
case 166:
//#line 298 ".\gramatica.y"
{ logger.logError("[Parser] Se esperaba un ; al final de la sentencia when"); }
break;
case 167:
//#line 299 ".\gramatica.y"
{ logger.logError("[Parser] Se esperaba la palabra reservada then en la sentencia when"); }
break;
case 168:
//#line 300 ".\gramatica.y"
{ logger.logError("[Parser] Se esperaban sentencias dentro del when"); }
break;
case 171:
//#line 309 ".\gramatica.y"
{ logger.logSuccess("[Parser] Sentencia if then detectada"); }
break;
case 172:
//#line 310 ".\gramatica.y"
{ logger.logSuccess("[Parser] Sentencia if then else detectada"); }
break;
case 175:
//#line 316 ".\gramatica.y"
{ logger.logError("[Parser] Se esperaban sentencias dentro de la seleccion"); }
break;
case 176:
//#line 317 ".\gramatica.y"
{ logger.logError("[Parser] Se esperaba un } al final de la seleccion"); }
break;
case 177:
//#line 318 ".\gramatica.y"
{ logger.logError("[Parser] Se esperaba un { en la seleccion"); }
break;
case 181:
//#line 328 ".\gramatica.y"
{ logger.logError("[Parser] Se esperaba un expresion del lado derecho de la comparacion"); }
break;
case 182:
//#line 329 ".\gramatica.y"
{ logger.logError("[Parser] Se esperaba un expresion del lado izquierdo de la comparacion"); }
break;
case 204:
//#line 375 ".\gramatica.y"
{ logger.logSuccess("[Parser] Sentencia out detectada"); }
break;
case 205:
//#line 376 ".\gramatica.y"
{ logger.logSuccess("[Parser] Sentencia out detectada"); }
break;
case 206:
//#line 377 ".\gramatica.y"
{ logger.logError("[Parser] Se esperaba una cadena o identificador en la sentencia out"); }
break;
case 207:
//#line 378 ".\gramatica.y"
{ logger.logError("[Parser] Se esperaba un ( en la sentencia out"); }
break;
case 208:
//#line 379 ".\gramatica.y"
{ logger.logError("[Parser] Se esperaba un ) en la sentencia out"); }
break;
case 209:
//#line 380 ".\gramatica.y"
{ logger.logError("[Parser] Se esperaba un ( en la sentencia out"); }
break;
case 210:
//#line 381 ".\gramatica.y"
{ logger.logError("[Parser] Se esperaba un ) en la sentencia out"); }
break;
case 211:
//#line 382 ".\gramatica.y"
{ logger.logError("[Parser] Se espera un ; al final de la sentencia out"); }
break;
case 212:
//#line 383 ".\gramatica.y"
{ logger.logError("[Parser] Se espera un ; al final de la sentencia out"); }
break;
case 214:
//#line 388 ".\gramatica.y"
{ constanteConSigno(val_peek(0).sval); }
break;
//#line 1557 "Parser.java"
//########## END OF USER-SUPPLIED ACTIONS ##########
    }//switch
    //#### Now let's reduce... ####
    if (yydebug) debug("reduce");
    state_drop(yym);             //we just reduced yylen states
    yystate = state_peek(0);     //get new state
    val_drop(yym);               //corresponding value drop
    yym = yylhs[yyn];            //select next TERMINAL(on lhs)
    if (yystate == 0 && yym == 0)//done? 'rest' state and at first TERMINAL
      {
      if (yydebug) debug("After reduction, shifting from state 0 to state "+YYFINAL+"");
      yystate = YYFINAL;         //explicitly say we're done
      state_push(YYFINAL);       //and save it
      val_push(yyval);           //also save the semantic value of parsing
      if (yychar < 0)            //we want another character?
        {
        yychar = yylex();        //get next character
        if (yychar<0) yychar=0;  //clean, if necessary
        if (yydebug)
          yylexdebug(yystate,yychar);
        }
      if (yychar == 0)          //Good exit (if lex returns 0 ;-)
         break;                 //quit the loop--all DONE
      }//if yystate
    else                        //else not done yet
      {                         //get next state and push, for next yydefred[]
      yyn = yygindex[yym];      //find out where to go
      if ((yyn != 0) && (yyn += yystate) >= 0 &&
            yyn <= YYTABLESIZE && yycheck[yyn] == yystate)
        yystate = yytable[yyn]; //get new state
      else
        yystate = yydgoto[yym]; //else go to new defred
      if (yydebug) debug("after reduction, shifting from state "+state_peek(0)+" to state "+yystate+"");
      state_push(yystate);     //going again, so push state & val...
      val_push(yyval);         //for next action
      }
    }//main loop
  return 0;//yyaccept!!
}
//## end of method parse() ######################################



//## run() --- for Thread #######################################
/**
 * A default run method, used for operating this parser
 * object in the background.  It is intended for extending Thread
 * or implementing Runnable.  Turn off with -Jnorun .
 */
public void run()
{
  yyparse();
}
//## end of method run() ########################################



//## Constructors ###############################################
/**
 * Default constructor.  Turn off with -Jnoconstruct .

 */
public Parser()
{
  //nothing to do
}


/**
 * Create a parser, setting the debug to true or false.
 * @param debugMe true for debugging, false for no debug.
 */
public Parser(boolean debugMe)
{
  yydebug=debugMe;
}
//###############################################################



}
//################### END OF CLASS ##############################
