//### This file created by BYACC 1.8(/Java extension  1.15)
//### Java capabilities added 7 Jan 97, Bob Jamison
//### Updated : 27 Nov 97  -- Bob Jamison, Joe Nieten
//###           01 Jan 98  -- Bob Jamison -- fixed generic semantic constructor
//###           01 Jun 99  -- Bob Jamison -- added Runnable support
//###           06 Aug 00  -- Bob Jamison -- made state variables class-global
//###           03 Jan 01  -- Bob Jamison -- improved flags, tracing
//###           16 May 01  -- Bob Jamison -- added custom stack sizing
//###           04 Mar 02  -- Yuval Oren  -- improved java performance, added options
//###           14 Mar 02  -- Tomas Hurka -- -d support, static initializer workaround
//### Please send bug reports to tom@hukatronic.cz
//### static char yysccsid[] = "@(#)yaccpar	1.8 (Berkeley) 01/20/90";



package compilador;



//#line 2 "./src/compilador/gramatica.y"
import java.io.File;
//#line 19 "Parser.java"




public class Parser
{

boolean yydebug;        //do I want debug output?
int yynerrs;            //number of errors so far
int yyerrflag;          //was there an error?
int yychar;             //the current working character

//########## MESSAGES ##########
//###############################################################
// method: debug
//###############################################################
void debug(String msg)
{
  if (yydebug)
    System.out.println(msg);
}

//########## STATE STACK ##########
final static int YYSTACKSIZE = 500;  //maximum stack size
int statestk[] = new int[YYSTACKSIZE]; //state stack
int stateptr;
int stateptrmax;                     //highest index of stackptr
int statemax;                        //state when highest index reached
//###############################################################
// methods: state stack push,pop,drop,peek
//###############################################################
final void state_push(int state)
{
  try {
		stateptr++;
		statestk[stateptr]=state;
	 }
	 catch (ArrayIndexOutOfBoundsException e) {
     int oldsize = statestk.length;
     int newsize = oldsize * 2;
     int[] newstack = new int[newsize];
     System.arraycopy(statestk,0,newstack,0,oldsize);
     statestk = newstack;
     statestk[stateptr]=state;
  }
}
final int state_pop()
{
  return statestk[stateptr--];
}
final void state_drop(int cnt)
{
  stateptr -= cnt; 
}
final int state_peek(int relative)
{
  return statestk[stateptr-relative];
}
//###############################################################
// method: init_stacks : allocate and prepare stacks
//###############################################################
final boolean init_stacks()
{
  stateptr = -1;
  val_init();
  return true;
}
//###############################################################
// method: dump_stacks : show n levels of the stacks
//###############################################################
void dump_stacks(int count)
{
int i;
  System.out.println("=index==state====value=     s:"+stateptr+"  v:"+valptr);
  for (i=0;i<count;i++)
    System.out.println(" "+i+"    "+statestk[i]+"      "+valstk[i]);
  System.out.println("======================");
}


//########## SEMANTIC VALUES ##########
//public class ParserVal is defined in ParserVal.java


String   yytext;//user variable to return contextual strings
ParserVal yyval; //used to return semantic vals from action routines
ParserVal yylval;//the 'lval' (result) I got from yylex()
ParserVal valstk[];
int valptr;
//###############################################################
// methods: value stack push,pop,drop,peek.
//###############################################################
void val_init()
{
  valstk=new ParserVal[YYSTACKSIZE];
  yyval=new ParserVal();
  yylval=new ParserVal();
  valptr=-1;
}
void val_push(ParserVal val)
{
  if (valptr>=YYSTACKSIZE)
    return;
  valstk[++valptr]=val;
}
ParserVal val_pop()
{
  if (valptr<0)
    return new ParserVal();
  return valstk[valptr--];
}
void val_drop(int cnt)
{
int ptr;
  ptr=valptr-cnt;
  if (ptr<0)
    return;
  valptr = ptr;
}
ParserVal val_peek(int relative)
{
int ptr;
  ptr=valptr-relative;
  if (ptr<0)
    return new ParserVal();
  return valstk[ptr];
}
final ParserVal dup_yyval(ParserVal val)
{
  ParserVal dup = new ParserVal();
  dup.ival = val.ival;
  dup.dval = val.dval;
  dup.sval = val.sval;
  dup.obj = val.obj;
  return dup;
}
//#### end semantic value section ####
public final static short ID=257;
public final static short CTE=258;
public final static short CADENA=259;
public final static short IF=260;
public final static short ELSE=261;
public final static short ENDIF=262;
public final static short PRINT=263;
public final static short VOID=264;
public final static short RETURN=265;
public final static short COMP_MAYOR_IGUAL=266;
public final static short COMP_MENOR_IGUAL=267;
public final static short COMP_IGUAL=268;
public final static short COMP_DISTINTO=269;
public final static short CLASS=270;
public final static short WHILE=271;
public final static short DO=272;
public final static short INTERFACE=273;
public final static short IMPLEMENT=274;
public final static short INT=275;
public final static short ULONG=276;
public final static short FLOAT=277;
public final static short OPERADOR_MENOS=278;
public final static short YYERRCODE=256;
final static short yylhs[] = {                           -1,
    0,    0,    0,    0,    0,    1,    1,    2,    2,    4,
    4,    4,    4,    4,    4,   11,   11,   12,   12,   13,
   13,   13,   13,   13,   10,   10,    9,    9,    9,    9,
    9,    9,    9,    9,    9,    9,    9,   15,   19,   15,
   15,   15,   15,   15,   15,   15,   15,   15,    8,    8,
    8,    8,    8,    8,    8,    8,    8,   14,   14,   14,
   20,   14,   14,   14,   14,   14,   16,   16,   16,   16,
   18,   18,   18,   18,   18,   18,   18,   23,   23,   24,
   24,   21,   21,   21,   21,   22,   22,   22,   22,    7,
    7,    7,    7,    7,    7,    7,    6,    6,    6,    6,
    6,    6,   28,   28,    5,    5,    5,   26,   26,    3,
    3,    3,    3,   29,   29,   29,   32,   32,   32,   32,
   32,   32,   35,   35,   36,   36,   38,   38,   38,   38,
   31,   31,   31,   31,   31,   31,   31,   31,   39,   39,
   30,   37,   37,   37,   37,   37,   37,   37,   37,   40,
   40,   40,   40,   40,   40,   40,   40,   40,   40,   40,
   40,   43,   43,   44,   44,   44,   42,   42,   42,   41,
   34,   34,   33,   33,   33,   33,   17,   17,   17,   17,
   45,   45,   45,   45,   45,   45,   27,   27,   27,   46,
   46,   46,   47,   47,   47,   25,   25,
};
final static short yylen[] = {                            2,
    3,    2,    2,    2,    0,    1,    2,    1,    1,    1,
    1,    1,    1,    1,    1,    1,    2,    1,    1,    1,
    1,    1,    1,    1,    2,    1,    7,    6,    6,    6,
    6,    3,    4,    2,    5,    4,    3,    7,    0,   13,
    6,    6,    3,    4,    2,    5,    4,    3,    9,    7,
    8,    6,    8,    6,    8,    8,    6,    9,    7,    8,
    0,   15,    6,    8,    8,    6,    1,    3,    2,    1,
    1,    1,    1,    3,    4,    5,    2,    1,    2,    1,
    1,    1,    2,    1,    2,    1,    2,    1,    2,    3,
    2,    2,    3,    2,    3,    2,    5,    4,    7,    4,
    3,    6,    1,    3,    4,    3,    3,    1,    3,    1,
    1,    1,    1,    3,    2,    2,    5,    4,    3,    2,
    4,    3,    1,    2,    2,    1,    3,    2,    1,    2,
    5,    7,    4,    3,    6,    5,    4,    6,    1,    2,
    2,    5,    4,    7,    6,    4,    3,    4,    3,    4,
    3,    5,    4,    3,    2,    3,    2,    4,    3,    2,
    1,    1,    2,    1,    1,    1,    1,    3,    2,    2,
    1,    3,    1,    1,    1,    1,    3,    2,    2,    3,
    1,    1,    1,    1,    1,    1,    3,    3,    1,    3,
    3,    1,    1,    2,    1,    1,    2,
};
final static short yydefred[] = {                         0,
    0,    0,    0,    0,    0,    0,    0,    0,  173,  174,
  175,    0,    0,    0,    6,    8,    9,   10,   11,   12,
   13,   14,   15,    0,  110,  111,  112,  113,    0,    0,
    0,    0,  196,    0,    0,   92,    0,    0,    0,   25,
    0,    0,    0,    0,    0,   34,    0,   70,   67,    0,
    0,    0,  120,    0,  123,    0,    4,    0,    2,    7,
    0,    0,    0,  171,  116,    0,    0,    0,    0,  161,
   18,   20,   21,   22,    0,    0,   16,   19,   23,   24,
  141,    0,  181,  182,  183,  184,    0,  185,  186,    0,
  195,    0,    0,    0,  192,   93,   90,  197,   95,  176,
    0,  149,    0,    0,  147,    0,    0,    0,    0,  129,
    0,  139,    0,  134,    0,    0,   32,    0,   69,   84,
   82,    0,    0,    0,    0,    0,    0,  122,    0,    0,
  119,  124,  125,    1,    0,    0,  107,    0,  109,  114,
    0,    0,    0,    0,   45,    0,   73,   72,   71,    0,
  155,    0,    0,  157,  164,  165,  166,    0,  162,  160,
    0,   17,  194,    0,    0,    0,    0,    0,    0,    0,
    0,    0,  143,    0,  170,  148,  146,  130,    0,    0,
    0,    0,  137,  140,    0,  133,    0,   68,   85,   83,
   36,    0,   33,    0,    0,    0,  121,  118,   98,    0,
    0,  105,  172,    0,    0,   43,   77,   88,   86,    0,
    0,    0,    0,    0,  151,    0,  154,    0,  159,  163,
  156,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,  190,  191,    0,  142,  167,    0,    0,    0,    0,
  131,  127,  136,    0,   35,    0,    0,    0,  117,    0,
    0,   97,    0,    0,   74,   89,    0,   87,   47,    0,
   44,    0,    0,  153,  150,    0,  158,    0,   54,    0,
   57,    0,    0,    0,    0,  145,  169,    0,  138,  135,
   29,   30,    0,   31,    0,    0,    0,    0,    0,    0,
  108,   75,   80,   81,    0,   78,   46,    0,    0,    0,
  152,    0,    0,    0,    0,   50,  144,  168,  132,   27,
    0,   99,   63,    0,   66,    0,    0,   76,   79,   41,
    0,   42,   53,   55,   56,    0,    0,    0,    0,   59,
    0,   38,    0,   49,   64,   65,    0,    0,    0,   58,
    0,    0,    0,    0,    0,    0,    0,    0,    0,   40,
    0,   62,
};
final static short yydgoto[] = {                         13,
   14,   15,  155,   49,   72,   73,   74,   21,   22,   23,
   76,   77,  157,   79,   80,   50,   90,  150,  333,  331,
  122,  210,  295,  296,   91,   24,   92,  251,   25,   26,
   27,   28,   29,   66,   54,   55,   30,  112,  113,   81,
  236,  237,  158,  159,   93,   94,   95,
};
final static short yysindex[] = {                      1083,
    0,  -38,   80,  -18,   17, -114,  772,  -57,    0,    0,
    0, 1152,    0, 1173,    0,    0,    0,    0,    0,    0,
    0,    0,    0,   36,    0,    0,    0,    0,  -30, 1019,
  851,   61,    0,   67, -239,    0,   75,  -23,   44,    0,
  338,  -94, -155,   40, 1194,    0,  882,    0,    0,  -33,
  -50, -223,    0, -105,    0,   98,    0, 1216,    0,    0,
  -13,  -41, -113,    0,    0,   -7,  121,  827, 1237,    0,
    0,    0,    0,    0, 1262, 1283,    0,    0,    0,    0,
    0, -132,    0,    0,    0,    0, 1108,    0,    0,  146,
    0,  800,    4,   11,    0,    0,    0,    0,    0,    0,
   66,    0,  -95,  148,    0,  151,  150,  -84, -155,    0,
  -27,    0,  482,    0, -155,  777,    0,  911,    0,    0,
    0, 1306,  160,  187,   43,  911, -223,    0, -100,  -99,
    0,    0,    0,    0,  204,  269,    0,  241,    0,    0,
    8,  898,  214, 1524,    0,  942,    0,    0,    0,  -29,
    0, 1327, 1349,    0,    0,    0,    0, 1370,    0,    0,
 1391,    0,    0,  -53,  973,    4,    4,    4,    4,    2,
    4,    4,    0,   19,    0,    0,    0,    0,  389, -155,
  849,   34,    0,    0,  859,    0,  228,    0,    0,    0,
    0,  244,    0,  947,  251,  -90,    0,    0,    0,    4,
  271,    0,    0, 1129,  289,    0,    0,    0,    0, 1416,
  284,  291,   50,  911,    0, 1437,    0, 1460,    0,    0,
    0, 1482, 1108,  301, 1108,  303,   88,   11,   11,    2,
    2,    0,    0, -161,    0,    0,   23, -155,  926,  990,
    0,    0,    0,  310,    0,  313,  314,  316,    0,    2,
   48,    0,   10,  998,    0,    0,  -77,    0,    0,  320,
    0,  960,  325,    0,    0, 1503,    0,  105,    0,  120,
    0, 1040,  342,   59, -161,    0,    0, 1100,    0,    0,
    0,    0,  343,    0,    4,  354,  356, 1129,  361,   91,
    0,    0,    0,    0,  334,    0,    0,  365,  370,  369,
    0,  388,  395,  403,  152,    0,    0,    0,    0,    0,
    2,    0,    0,  186,    0, 1061,  405,    0,    0,    0,
  406,    0,    0,    0,    0,  416,  418,  420,  223,    0,
  226,    0,  215,    0,    0,    0,  445,  450,  227,    0,
  456,  459, 1129,  911,  239,  468, 1129,  466,  249,    0,
  470,    0,
};
final static short yyrindex[] = {                       515,
  -34,    0,    0,    0,  131,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,  181,    0,  231,    0,    0,  287,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,  -89,    0,  516,    0,    0,
    0,    0,    0,    0,    0,  311,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,  108,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,  158,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,  260,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,  359,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,  397,    0,    0,  440,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,  477,  478,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0, 1254,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
  465,    0,    0,    0,    0,    0,    0,    0,    0,    0,
  644,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,  206,  264,  479,
  151,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,   60,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,  513,    0,    0,    0,    0,    0,    0,    0,
    0,    0,  538,    0,    0,  561,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
   85,    0,    0,    0,    0,    0,  263,    0,    0,    0,
  270,    0,    0,    0,    0,  593,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,  705,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,
};
final static short yygindex[] = {                         0,
  531,   16,    1,  873,  675,  707,  835,    0,    0,  -25,
  476,  -55,  -14,    0,    0,  138,  -47,  444,    0,    0,
    0,    0,    0,  259,  543,    0,  -28,    0,    0,   -3,
    0,    0,  836,  455,    5,  -12,   83,  177,  568,    0,
  -15,  321,  -80,  124,  464,  -10,  106,
};
final static int YYTABLESIZE=1801;
static short yytable[];
static { yytable();}
static void yytable(){
yytable = new short[]{                        124,
   16,   31,  137,   35,   75,  108,  126,   48,   43,  176,
  214,  108,   16,   65,   16,   78,  101,  102,   98,  131,
  162,   39,  104,  106,  197,  198,  108,  135,  115,   60,
   71,   35,  136,  138,  249,  126,  140,  110,  180,  110,
    4,  132,  148,  152,  166,  120,  167,  292,   35,  156,
  161,  141,  171,  149,   78,  129,  130,  172,   16,  235,
   40,   78,  234,  276,  170,   52,  275,   53,  147,   71,
  187,  216,  127,   60,  128,   61,   71,  242,  195,  118,
  222,   63,  194,  117,  105,  174,  193,   48,  286,  262,
   56,  285,  141,  261,  205,  100,   62,  162,  212,  307,
  103,  107,  275,  103,   96,  110,  173,  193,    4,  110,
   97,  110,  110,    9,   10,   11,  132,  132,   99,    9,
   10,   11,  189,   36,   35,  104,  156,  218,  104,  209,
   26,  196,  156,   56,   56,  156,   56,  266,   78,  230,
  231,  133,   41,  139,  208,  163,  247,  193,  193,  193,
  193,  193,  193,   71,  193,  228,  229,  189,    4,   42,
  142,  175,  114,    4,    4,   48,  263,  193,  193,  193,
   26,  250,  179,    4,  126,  110,  110,  110,  148,  291,
   94,  110,   67,  132,  257,    3,  165,    5,  176,  149,
  156,  177,  156,  178,   68,  258,  156,  189,  189,   51,
  189,  189,  189,  191,  147,  187,    4,  223,  224,   56,
  256,   56,   56,    4,  299,   82,   33,  189,  189,  189,
   94,  277,  176,   48,  164,   48,   64,  192,  148,   64,
   91,  293,  193,  100,  110,  110,  110,  125,   38,  149,
  156,  213,  294,   82,   33,  187,  187,  199,  187,  187,
  187,    9,   10,   11,  147,   26,  311,  206,  277,  308,
   82,   33,  148,  188,  203,  187,  187,  187,  244,  293,
   91,  287,   48,  149,  110,  100,  232,  233,   56,  100,
  294,  220,  189,  166,  202,  167,   96,  245,  147,  184,
  148,  248,  184,    9,   10,   11,  346,    9,   10,   11,
  100,  149,  227,  188,  188,   94,  188,  188,  188,  201,
  115,  166,  200,  167,  252,  100,  147,  148,    9,   10,
   11,  148,  100,  188,  188,  188,   96,  259,  149,  254,
  187,  260,  149,    9,   10,   11,   32,   33,   34,  220,
    9,   10,   11,  147,  269,  220,  271,  147,  272,  273,
  115,  316,  317,  281,  283,   91,  282,  184,   37,  284,
  268,  184,  270,  297,  193,  300,  302,  193,  193,  193,
  193,  193,  193,  193,  193,  193,  193,  193,  193,  193,
  193,  303,  193,  193,  193,  306,  310,   26,  188,  220,
   26,   26,   26,   26,   26,   26,  101,  312,   37,  313,
   26,   26,   26,   26,  315,   26,   26,   26,  320,  305,
  321,   96,  322,  326,  189,  184,  184,  189,  189,  189,
  189,  189,  189,  189,  189,  189,  189,  189,  189,  189,
  189,  323,  189,  189,  189,  115,  101,   94,  324,  106,
   94,   94,   94,   94,   94,   94,  325,  327,  330,  332,
   94,   94,   94,   94,  184,   94,   94,   94,  318,  334,
  109,  335,  187,  336,  100,  187,  187,  187,  187,  187,
  187,  187,  187,  187,  187,  187,  187,  187,  187,  106,
  187,  187,  187,   37,  337,  338,  339,   91,  340,  341,
   91,   91,   91,   91,   91,   91,  343,  342,  344,  347,
   91,   91,   91,   91,  100,   91,   91,   91,  348,  350,
  351,  238,   52,  352,    5,    3,  176,  178,  179,  180,
  188,  101,   61,  188,  188,  188,  188,  188,  188,  188,
  188,  188,  188,  188,  188,  188,  188,   28,  188,  188,
  188,   39,   58,   96,  153,   37,   96,   96,   96,   96,
   96,   96,   52,  319,  274,  169,   96,   96,   96,   96,
  102,   96,   96,   96,  106,  182,    0,  115,    0,    0,
  115,  115,  115,  115,  115,  115,    0,   28,    0,    0,
  115,  115,  115,  115,    0,  115,  115,  115,    0,  100,
  291,    0,   51,   67,  107,    0,    3,    0,    5,    0,
  102,    4,    0,    0,    0,   68,  183,    0,    0,    0,
  116,  108,    9,   10,   11,   37,    0,    0,   37,   37,
   37,   37,   37,   37,    0,    0,    0,    0,   37,   37,
   37,   37,   51,   37,   37,   37,    0,   52,    0,    0,
    0,    0,    0,    0,    0,  107,    0,  253,    0,    0,
    0,    0,    4,  101,    0,    0,  101,  101,  101,  101,
  101,  101,   28,    9,   10,   11,  101,  101,  101,  101,
    0,  101,  101,  101,   18,    0,  181,    0,    0,    0,
    0,   18,  185,   48,    0,  102,   18,    0,   18,    0,
    0,    0,    0,    0,    0,    0,  106,  290,    0,  106,
  106,  106,  106,  106,  106,    0,   19,    0,    0,  106,
  106,  106,  106,   19,  106,  106,  106,   51,   19,   18,
   19,  100,    0,    0,  100,  100,  100,  100,  100,  100,
    0,  314,   18,    0,  100,  100,  100,  100,  107,  100,
  100,  100,    0,    0,   60,    4,  239,  240,    0,    0,
    0,   19,    0,    0,    0,    0,    9,   10,   11,  329,
    0,   18,    0,    0,   19,    0,    0,    0,   48,   52,
    0,    0,   52,   52,   52,   52,   52,   52,    0,    0,
    0,    0,   52,   52,   52,   52,  345,   52,   52,   52,
  349,    0,    0,   19,   28,    0,   18,   28,   28,   28,
   28,   28,   28,    0,    0,  278,    0,   28,   28,   28,
   28,   47,   28,   28,   28,   46,    0,  102,    0,    0,
  102,  102,  102,  102,  102,  102,    0,    0,   19,   60,
  102,  102,  102,  102,   20,  102,  102,  102,    0,   18,
    0,   20,  166,    0,  167,    0,   20,    0,   20,   51,
    0,    0,   51,   51,   51,   51,   51,   51,    0,   89,
  168,   88,   51,   51,   51,   51,  146,   51,   51,   51,
  145,   19,   17,  103,  103,    0,  111,    0,  111,   20,
    0,    0,    0,    0,   17,    0,   17,    0,    0,    0,
    0,   87,   20,    0,   45,   35,    0,   18,    0,   18,
   48,  186,    0,   48,   48,   48,   48,   48,   48,    0,
   89,    0,   88,   48,   48,   48,   48,  121,   48,   48,
   48,   20,  123,    0,    0,    0,   35,    0,    0,   19,
   17,   19,    0,    0,    0,    0,  103,    0,  204,    0,
    0,   89,   35,   88,  111,    0,   18,    0,  111,  144,
  111,  111,    0,    0,    0,   35,   20,   89,    0,   88,
    0,   60,    0,    0,   60,   60,   60,   60,   60,   60,
   89,    0,   88,  241,   60,   60,   60,   60,   19,   60,
   60,   60,  211,  243,    0,    0,   35,  246,    0,    0,
    0,   35,    0,    0,  190,    0,    0,    0,    0,   20,
  298,   89,    0,   88,   35,    0,   89,    0,   88,  103,
    0,    0,    0,    0,  111,  111,  111,    0,    0,   89,
  111,   88,    0,    0,    0,    0,    0,    0,    1,    0,
    0,    2,    0,  107,    3,    4,    5,    0,    0,    0,
    4,    6,   44,    7,    8,    0,    9,   10,   11,    0,
  279,    9,   10,   11,    0,    0,    0,   20,    0,   20,
    0,    0,    0,    0,    0,   83,   84,   85,   86,  103,
    0,    0,  103,  111,  111,  111,    0,    0,    0,    0,
    0,    0,    0,    1,    0,    0,   67,    0,    0,    3,
    4,    5,    0,    0,    0,   45,    6,  143,   68,    8,
    0,    9,   10,   11,    0,  107,   20,   82,   33,  103,
  103,    0,    4,  111,  280,  107,   83,   84,   85,   86,
  144,    0,    4,    9,   10,   11,    0,    0,    0,    0,
    0,    0,    0,    9,   10,   11,    0,    0,   82,   33,
    0,   69,    0,   70,    0,    0,    0,   83,   84,   85,
   86,    0,    0,    0,   82,   33,    0,    0,    0,    0,
    0,    0,   45,   83,   84,   85,   86,   82,   33,    0,
    0,    0,    0,    0,    0,    0,   83,   84,   85,   86,
    0,    0,  107,  144,    0,    0,    0,    0,    0,    4,
    0,    0,    0,    0,    0,    0,    0,    0,   82,   33,
    9,   10,   11,   82,   33,   12,    0,   83,   84,   85,
   86,    0,   83,   84,   85,   86,   82,   33,    0,    0,
    0,    0,    0,    0,  309,   83,   84,   85,   86,    1,
   45,    0,    2,  225,  226,    3,    4,    5,    0,    0,
    0,    0,    6,    0,    7,    8,  107,    9,   10,   11,
    0,  144,    0,    4,    1,    0,    0,   67,  288,  289,
    3,    4,    5,    0,    9,   10,   11,    6,    0,   68,
    8,    0,    9,   10,   11,    1,   57,    0,   67,    0,
    0,    3,    4,    5,    0,    0,    0,    0,    6,    0,
   68,    8,    0,    9,   10,   11,    1,   59,    0,    2,
    0,  304,    3,    4,    5,    0,    0,    0,    0,    6,
    0,    7,    8,    0,    9,   10,   11,    1,  119,    0,
   67,    0,  328,    3,    4,    5,    0,    0,    0,    0,
    6,    0,   68,    8,    0,    9,   10,   11,    0,    1,
  134,    0,    2,    0,    0,    3,    4,    5,    0,    0,
    0,    0,    6,    0,    7,    8,  107,    9,   10,   11,
    0,  151,    0,    4,    1,    0,    0,    2,    0,    0,
    3,    4,    5,    0,    9,   10,   11,    6,  128,    7,
    8,    0,    9,   10,   11,    1,  154,    0,   67,    0,
    0,    3,    4,    5,    0,    0,    0,    0,    6,    0,
   68,    8,    0,    9,   10,   11,    0,  160,    1,    0,
    0,    2,    0,    0,    3,    4,    5,    0,    0,    0,
    0,    6,    0,    7,    8,    0,    9,   10,   11,    1,
  188,    0,    2,    0,    0,    3,    4,    5,    0,    0,
    0,    0,    6,    0,    7,    8,    0,    9,   10,   11,
    1,  215,    0,    2,    0,    0,    3,    4,    5,    0,
    0,    0,    0,    6,    0,    7,    8,    0,    9,   10,
   11,    0,    1,  217,    0,    2,    0,    0,    3,    4,
    5,    0,    0,    0,    0,    6,    0,    7,    8,    0,
    9,   10,   11,    1,  219,    0,   67,    0,    0,    3,
    4,    5,    0,    0,    0,    0,    6,    0,   68,    8,
  128,    9,   10,   11,    0,  221,    0,  128,    1,    0,
    0,   67,    0,    0,    3,    4,    5,    0,  128,  128,
  128,    6,    0,   68,    8,    0,    9,   10,   11,    1,
  255,    0,   67,    0,    0,    3,    4,    5,    0,    0,
    0,    0,    6,    0,   68,    8,    0,    9,   10,   11,
    0,  264,    1,    0,    0,    2,    0,    0,    3,    4,
    5,    0,    0,    0,    0,    6,    0,    7,    8,    0,
    9,   10,   11,    1,  265,    0,   67,    0,    0,    3,
    4,    5,    0,    0,    0,    0,    6,    0,   68,    8,
    0,    9,   10,   11,    0,    1,  267,    0,   67,    0,
    0,    3,    4,    5,    0,    0,    0,    0,    6,    0,
   68,    8,    0,    9,   10,   11,    1,  301,    0,   67,
    0,    0,    3,    4,    5,    0,    0,    0,    0,    6,
    0,   68,    8,    0,    9,   10,   11,    1,  207,    0,
   67,    0,    0,    3,    4,    5,    0,    0,    0,    0,
    6,    0,   68,    8,    0,    9,   10,   11,    0,    0,
    0,    0,    1,    0,    0,   67,    0,    0,    3,    4,
    5,    0,    0,    0,    0,    6,    0,   68,    8,    0,
    9,   10,   11,    1,    0,    0,   67,    0,    0,    3,
    4,    5,    0,    0,    0,    0,    6,    0,   68,    8,
    0,    9,   10,   11,    0,    0,    1,    0,    0,   67,
    0,    0,    3,    4,    5,    0,    0,    0,    0,    6,
    0,   68,    8,    0,    9,   10,   11,    0,    1,    0,
    0,   67,    0,    0,    3,    4,    5,    0,    0,    0,
    0,    6,    0,   68,    8,    0,    9,   10,   11,    1,
    0,    0,   67,    0,    0,    3,    4,    5,    0,    0,
    0,    0,    6,    0,   68,    8,    0,    9,   10,   11,
    1,    0,    0,   67,    0,    0,    3,    4,    0,    0,
    0,    0,    0,    6,    0,   68,    8,    0,    9,   10,
   11,
};
}
static short yycheck[];
static { yycheck(); }
static void yycheck() {
yycheck = new short[] {                         47,
    0,   40,   44,   45,   30,   40,   40,    7,  123,   44,
   40,   46,   12,   44,   14,   30,   40,   41,  258,  125,
   76,   40,   38,   39,  125,  125,   61,   41,  123,   14,
   30,   45,   61,   62,  125,  125,   44,   41,  123,   43,
  264,   54,   68,   69,   43,   45,   45,  125,   45,   75,
   76,   59,   42,   68,   69,   51,   52,   47,   58,   41,
   44,   76,   44,   41,   93,  123,   44,  125,   68,   69,
  118,  152,  123,   58,  125,   40,   76,   44,  126,   40,
  161,   46,   40,   44,   41,  101,   44,   87,   41,   40,
    8,   44,   59,   44,  142,  257,   61,  153,  146,   41,
   41,  257,   44,   44,   44,  109,   41,    0,  264,  113,
   44,  115,  116,  275,  276,  277,  129,  130,   44,  275,
  276,  277,  122,   44,   45,   41,  152,  153,   44,  144,
    0,  127,  158,   51,   52,  161,   54,  218,  153,  168,
  169,   44,  257,  257,  144,  278,  194,   40,   41,   42,
   43,   44,   45,  153,   47,  166,  167,    0,  264,  274,
   40,  257,  257,  264,  264,  165,  214,   60,   61,   62,
   40,  200,  257,  264,  264,  179,  180,  181,  204,  257,
    0,  185,  260,  196,  210,  263,   41,  265,   41,  204,
  216,   41,  218,   44,  272,  210,  222,   40,   41,  257,
   43,   44,   45,   44,  204,    0,  264,  261,  262,  127,
  210,  129,  130,  264,  262,  257,  258,   60,   61,   62,
   40,  237,  257,  223,   87,  225,  257,   41,  254,  257,
    0,  257,  125,  257,  238,  239,  240,  271,  257,  254,
  266,  271,  257,  257,  258,   40,   41,   44,   43,   44,
   45,  275,  276,  277,  254,  125,  285,   44,  274,  275,
  257,  258,  288,    0,  257,   60,   61,   62,   41,  295,
   40,  262,  272,  288,  278,  257,  171,  172,  196,  257,
  295,  158,  125,   43,   44,   45,    0,   44,  288,  113,
  316,   41,  116,  275,  276,  277,  344,  275,  276,  277,
  257,  316,  165,   40,   41,  125,   43,   44,   45,   41,
    0,   43,   44,   45,   44,  257,  316,  343,  275,  276,
  277,  347,  257,   60,   61,   62,   40,   44,  343,   41,
  125,   41,  347,  275,  276,  277,  257,  258,  259,  216,
  275,  276,  277,  343,   44,  222,   44,  347,  261,  262,
   40,  261,  262,   44,   41,  125,   44,  181,    0,   44,
  223,  185,  225,   44,  257,   41,  262,  260,  261,  262,
  263,  264,  265,  266,  267,  268,  269,  270,  271,  272,
  273,  262,  275,  276,  277,   44,   44,  257,  125,  266,
  260,  261,  262,  263,  264,  265,    0,   44,   40,   44,
  270,  271,  272,  273,   44,  275,  276,  277,   44,  272,
   41,  125,   44,  262,  257,  239,  240,  260,  261,  262,
  263,  264,  265,  266,  267,  268,  269,  270,  271,  272,
  273,   44,  275,  276,  277,  125,   40,  257,   44,    0,
  260,  261,  262,  263,  264,  265,   44,  262,   44,   44,
  270,  271,  272,  273,  278,  275,  276,  277,  125,   44,
  123,   44,  257,   44,    0,  260,  261,  262,  263,  264,
  265,  266,  267,  268,  269,  270,  271,  272,  273,   40,
  275,  276,  277,  125,  262,  260,  272,  257,   44,   40,
  260,  261,  262,  263,  264,  265,   41,  271,   40,  261,
  270,  271,  272,  273,   40,  275,  276,  277,   41,   44,
  262,  123,    0,   44,    0,    0,  257,   41,   41,   41,
  257,  125,  260,  260,  261,  262,  263,  264,  265,  266,
  267,  268,  269,  270,  271,  272,  273,    0,  275,  276,
  277,  272,   12,  257,   69,    3,  260,  261,  262,  263,
  264,  265,   40,  295,  234,   92,  270,  271,  272,  273,
    0,  275,  276,  277,  125,  111,   -1,  257,   -1,   -1,
  260,  261,  262,  263,  264,  265,   -1,   40,   -1,   -1,
  270,  271,  272,  273,   -1,  275,  276,  277,   -1,  125,
  257,   -1,    0,  260,  257,   -1,  263,   -1,  265,   -1,
   40,  264,   -1,   -1,   -1,  272,  125,   -1,   -1,   -1,
   43,  274,  275,  276,  277,  257,   -1,   -1,  260,  261,
  262,  263,  264,  265,   -1,   -1,   -1,   -1,  270,  271,
  272,  273,   40,  275,  276,  277,   -1,  125,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,  257,   -1,  204,   -1,   -1,
   -1,   -1,  264,  257,   -1,   -1,  260,  261,  262,  263,
  264,  265,  125,  275,  276,  277,  270,  271,  272,  273,
   -1,  275,  276,  277,    0,   -1,  109,   -1,   -1,   -1,
   -1,    7,  115,   40,   -1,  125,   12,   -1,   14,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,  257,  254,   -1,  260,
  261,  262,  263,  264,  265,   -1,    0,   -1,   -1,  270,
  271,  272,  273,    7,  275,  276,  277,  125,   12,   45,
   14,  257,   -1,   -1,  260,  261,  262,  263,  264,  265,
   -1,  288,   58,   -1,  270,  271,  272,  273,  257,  275,
  276,  277,   -1,   -1,   40,  264,  179,  180,   -1,   -1,
   -1,   45,   -1,   -1,   -1,   -1,  275,  276,  277,  316,
   -1,   87,   -1,   -1,   58,   -1,   -1,   -1,  125,  257,
   -1,   -1,  260,  261,  262,  263,  264,  265,   -1,   -1,
   -1,   -1,  270,  271,  272,  273,  343,  275,  276,  277,
  347,   -1,   -1,   87,  257,   -1,  122,  260,  261,  262,
  263,  264,  265,   -1,   -1,  238,   -1,  270,  271,  272,
  273,   40,  275,  276,  277,   44,   -1,  257,   -1,   -1,
  260,  261,  262,  263,  264,  265,   -1,   -1,  122,  125,
  270,  271,  272,  273,    0,  275,  276,  277,   -1,  165,
   -1,    7,   43,   -1,   45,   -1,   12,   -1,   14,  257,
   -1,   -1,  260,  261,  262,  263,  264,  265,   -1,   60,
   61,   62,  270,  271,  272,  273,   40,  275,  276,  277,
   44,  165,    0,   38,   39,   -1,   41,   -1,   43,   45,
   -1,   -1,   -1,   -1,   12,   -1,   14,   -1,   -1,   -1,
   -1,   41,   58,   -1,  123,   45,   -1,  223,   -1,  225,
  257,  125,   -1,  260,  261,  262,  263,  264,  265,   -1,
   60,   -1,   62,  270,  271,  272,  273,   45,  275,  276,
  277,   87,   41,   -1,   -1,   -1,   45,   -1,   -1,  223,
   58,  225,   -1,   -1,   -1,   -1,  101,   -1,   41,   -1,
   -1,   60,   45,   62,  109,   -1,  272,   -1,  113,  123,
  115,  116,   -1,   -1,   -1,   45,  122,   60,   -1,   62,
   -1,  257,   -1,   -1,  260,  261,  262,  263,  264,  265,
   60,   -1,   62,  125,  270,  271,  272,  273,  272,  275,
  276,  277,   41,  125,   -1,   -1,   45,   41,   -1,   -1,
   -1,   45,   -1,   -1,  122,   -1,   -1,   -1,   -1,  165,
   41,   60,   -1,   62,   45,   -1,   60,   -1,   62,  174,
   -1,   -1,   -1,   -1,  179,  180,  181,   -1,   -1,   60,
  185,   62,   -1,   -1,   -1,   -1,   -1,   -1,  257,   -1,
   -1,  260,   -1,  257,  263,  264,  265,   -1,   -1,   -1,
  264,  270,  271,  272,  273,   -1,  275,  276,  277,   -1,
  125,  275,  276,  277,   -1,   -1,   -1,  223,   -1,  225,
   -1,   -1,   -1,   -1,   -1,  266,  267,  268,  269,  234,
   -1,   -1,  237,  238,  239,  240,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,  257,   -1,   -1,  260,   -1,   -1,  263,
  264,  265,   -1,   -1,   -1,  123,  270,  271,  272,  273,
   -1,  275,  276,  277,   -1,  257,  272,  257,  258,  274,
  275,   -1,  264,  278,  125,  257,  266,  267,  268,  269,
  123,   -1,  264,  275,  276,  277,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,  275,  276,  277,   -1,   -1,  257,  258,
   -1,  123,   -1,  125,   -1,   -1,   -1,  266,  267,  268,
  269,   -1,   -1,   -1,  257,  258,   -1,   -1,   -1,   -1,
   -1,   -1,  123,  266,  267,  268,  269,  257,  258,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,  266,  267,  268,  269,
   -1,   -1,  257,  123,   -1,   -1,   -1,   -1,   -1,  264,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,  257,  258,
  275,  276,  277,  257,  258,  123,   -1,  266,  267,  268,
  269,   -1,  266,  267,  268,  269,  257,  258,   -1,   -1,
   -1,   -1,   -1,   -1,  125,  266,  267,  268,  269,  257,
  123,   -1,  260,  261,  262,  263,  264,  265,   -1,   -1,
   -1,   -1,  270,   -1,  272,  273,  257,  275,  276,  277,
   -1,  123,   -1,  264,  257,   -1,   -1,  260,  261,  262,
  263,  264,  265,   -1,  275,  276,  277,  270,   -1,  272,
  273,   -1,  275,  276,  277,  257,  125,   -1,  260,   -1,
   -1,  263,  264,  265,   -1,   -1,   -1,   -1,  270,   -1,
  272,  273,   -1,  275,  276,  277,  257,  125,   -1,  260,
   -1,  262,  263,  264,  265,   -1,   -1,   -1,   -1,  270,
   -1,  272,  273,   -1,  275,  276,  277,  257,  125,   -1,
  260,   -1,  262,  263,  264,  265,   -1,   -1,   -1,   -1,
  270,   -1,  272,  273,   -1,  275,  276,  277,   -1,  257,
  125,   -1,  260,   -1,   -1,  263,  264,  265,   -1,   -1,
   -1,   -1,  270,   -1,  272,  273,  257,  275,  276,  277,
   -1,  125,   -1,  264,  257,   -1,   -1,  260,   -1,   -1,
  263,  264,  265,   -1,  275,  276,  277,  270,  125,  272,
  273,   -1,  275,  276,  277,  257,  125,   -1,  260,   -1,
   -1,  263,  264,  265,   -1,   -1,   -1,   -1,  270,   -1,
  272,  273,   -1,  275,  276,  277,   -1,  125,  257,   -1,
   -1,  260,   -1,   -1,  263,  264,  265,   -1,   -1,   -1,
   -1,  270,   -1,  272,  273,   -1,  275,  276,  277,  257,
  125,   -1,  260,   -1,   -1,  263,  264,  265,   -1,   -1,
   -1,   -1,  270,   -1,  272,  273,   -1,  275,  276,  277,
  257,  125,   -1,  260,   -1,   -1,  263,  264,  265,   -1,
   -1,   -1,   -1,  270,   -1,  272,  273,   -1,  275,  276,
  277,   -1,  257,  125,   -1,  260,   -1,   -1,  263,  264,
  265,   -1,   -1,   -1,   -1,  270,   -1,  272,  273,   -1,
  275,  276,  277,  257,  125,   -1,  260,   -1,   -1,  263,
  264,  265,   -1,   -1,   -1,   -1,  270,   -1,  272,  273,
  257,  275,  276,  277,   -1,  125,   -1,  264,  257,   -1,
   -1,  260,   -1,   -1,  263,  264,  265,   -1,  275,  276,
  277,  270,   -1,  272,  273,   -1,  275,  276,  277,  257,
  125,   -1,  260,   -1,   -1,  263,  264,  265,   -1,   -1,
   -1,   -1,  270,   -1,  272,  273,   -1,  275,  276,  277,
   -1,  125,  257,   -1,   -1,  260,   -1,   -1,  263,  264,
  265,   -1,   -1,   -1,   -1,  270,   -1,  272,  273,   -1,
  275,  276,  277,  257,  125,   -1,  260,   -1,   -1,  263,
  264,  265,   -1,   -1,   -1,   -1,  270,   -1,  272,  273,
   -1,  275,  276,  277,   -1,  257,  125,   -1,  260,   -1,
   -1,  263,  264,  265,   -1,   -1,   -1,   -1,  270,   -1,
  272,  273,   -1,  275,  276,  277,  257,  125,   -1,  260,
   -1,   -1,  263,  264,  265,   -1,   -1,   -1,   -1,  270,
   -1,  272,  273,   -1,  275,  276,  277,  257,  125,   -1,
  260,   -1,   -1,  263,  264,  265,   -1,   -1,   -1,   -1,
  270,   -1,  272,  273,   -1,  275,  276,  277,   -1,   -1,
   -1,   -1,  257,   -1,   -1,  260,   -1,   -1,  263,  264,
  265,   -1,   -1,   -1,   -1,  270,   -1,  272,  273,   -1,
  275,  276,  277,  257,   -1,   -1,  260,   -1,   -1,  263,
  264,  265,   -1,   -1,   -1,   -1,  270,   -1,  272,  273,
   -1,  275,  276,  277,   -1,   -1,  257,   -1,   -1,  260,
   -1,   -1,  263,  264,  265,   -1,   -1,   -1,   -1,  270,
   -1,  272,  273,   -1,  275,  276,  277,   -1,  257,   -1,
   -1,  260,   -1,   -1,  263,  264,  265,   -1,   -1,   -1,
   -1,  270,   -1,  272,  273,   -1,  275,  276,  277,  257,
   -1,   -1,  260,   -1,   -1,  263,  264,  265,   -1,   -1,
   -1,   -1,  270,   -1,  272,  273,   -1,  275,  276,  277,
  257,   -1,   -1,  260,   -1,   -1,  263,  264,   -1,   -1,
   -1,   -1,   -1,  270,   -1,  272,  273,   -1,  275,  276,
  277,
};
}
final static short YYFINAL=13;
final static short YYMAXTOKEN=278;
final static String yyname[] = {
"end-of-file",null,null,null,null,null,null,null,null,null,null,null,null,null,
null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,
null,null,null,null,null,null,null,null,null,null,"'('","')'","'*'","'+'","','",
"'-'","'.'","'/'",null,null,null,null,null,null,null,null,null,null,null,"';'",
"'<'","'='","'>'",null,null,null,null,null,null,null,null,null,null,null,null,
null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,
null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,
null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,
"'{'",null,"'}'",null,null,null,null,null,null,null,null,null,null,null,null,
null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,
null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,
null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,
null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,
null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,
null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,
null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,
null,null,null,null,null,null,null,"ID","CTE","CADENA","IF","ELSE","ENDIF",
"PRINT","VOID","RETURN","COMP_MAYOR_IGUAL","COMP_MENOR_IGUAL","COMP_IGUAL",
"COMP_DISTINTO","CLASS","WHILE","DO","INTERFACE","IMPLEMENT","INT","ULONG",
"FLOAT","OPERADOR_MENOS",
};
final static String yyrule[] = {
"$accept : programa",
"programa : '{' sentencias '}'",
"programa : sentencias '}'",
"programa : '{' sentencias",
"programa : '{' '}'",
"programa :",
"sentencias : sentencia",
"sentencias : sentencias sentencia",
"sentencia : sentencia_declarativa",
"sentencia : sentencia_ejecutable",
"sentencia_ejecutable : sentencia_asignacion",
"sentencia_ejecutable : sentencia_invocacion_funcion",
"sentencia_ejecutable : sentencia_imprimir",
"sentencia_ejecutable : sentencia_seleccion",
"sentencia_ejecutable : sentencia_iterativa_do_while",
"sentencia_ejecutable : sentencia_return",
"sentencias_funcion : sentencia_funcion",
"sentencias_funcion : sentencias_funcion sentencia_funcion",
"sentencia_funcion : sentencia_declarativa",
"sentencia_funcion : sentencia_ejecutable_funcion",
"sentencia_ejecutable_funcion : sentencia_asignacion",
"sentencia_ejecutable_funcion : sentencia_invocacion_funcion",
"sentencia_ejecutable_funcion : sentencia_imprimir",
"sentencia_ejecutable_funcion : sentencia_seleccion_funcion",
"sentencia_ejecutable_funcion : sentencia_iterativa_do_while_funcion",
"sentencia_return : RETURN ','",
"sentencia_return : RETURN",
"sentencia_iterativa_do_while : DO bloque_sentencias_ejecutables WHILE '(' condicion ')' ','",
"sentencia_iterativa_do_while : DO bloque_sentencias_ejecutables WHILE '(' condicion ')'",
"sentencia_iterativa_do_while : DO WHILE '(' condicion ')' ','",
"sentencia_iterativa_do_while : DO bloque_sentencias_ejecutables WHILE '(' ')' ','",
"sentencia_iterativa_do_while : DO bloque_sentencias_ejecutables '(' condicion ')' ','",
"sentencia_iterativa_do_while : DO WHILE ','",
"sentencia_iterativa_do_while : DO bloque_sentencias_ejecutables WHILE ','",
"sentencia_iterativa_do_while : DO ','",
"sentencia_iterativa_do_while : DO '(' condicion ')' ','",
"sentencia_iterativa_do_while : DO '(' ')' ','",
"sentencia_iterativa_do_while : DO '(' ')'",
"sentencia_iterativa_do_while_funcion : DO bloque_sentencias_ejecutables_funcion WHILE '(' condicion ')' ','",
"$$1 :",
"sentencia_iterativa_do_while_funcion : DO bloque_sentencias_ejecutables_funcion WHILE '(' condicion ')' $$1 DO WHILE '(' condicion ')' ','",
"sentencia_iterativa_do_while_funcion : DO bloque_sentencias_ejecutables_funcion WHILE '(' ')' ','",
"sentencia_iterativa_do_while_funcion : DO bloque_sentencias_ejecutables_funcion '(' condicion ')' ','",
"sentencia_iterativa_do_while_funcion : DO WHILE ','",
"sentencia_iterativa_do_while_funcion : DO bloque_sentencias_ejecutables_funcion WHILE ','",
"sentencia_iterativa_do_while_funcion : DO ','",
"sentencia_iterativa_do_while_funcion : DO '(' condicion ')' ','",
"sentencia_iterativa_do_while_funcion : DO '(' ')' ','",
"sentencia_iterativa_do_while_funcion : DO '(' ')'",
"sentencia_seleccion : IF '(' condicion ')' bloque_sentencias_ejecutables ELSE bloque_sentencias_ejecutables ENDIF ','",
"sentencia_seleccion : IF '(' condicion ')' bloque_sentencias_ejecutables ENDIF ','",
"sentencia_seleccion : IF '(' condicion ')' bloque_sentencias_ejecutables ELSE bloque_sentencias_ejecutables ENDIF",
"sentencia_seleccion : IF '(' condicion ')' bloque_sentencias_ejecutables ENDIF",
"sentencia_seleccion : IF '(' ')' bloque_sentencias_ejecutables ELSE bloque_sentencias_ejecutables ENDIF ','",
"sentencia_seleccion : IF '(' ')' bloque_sentencias_ejecutables ENDIF ','",
"sentencia_seleccion : IF '(' condicion ')' ELSE bloque_sentencias_ejecutables ENDIF ','",
"sentencia_seleccion : IF '(' condicion ')' bloque_sentencias_ejecutables ELSE ENDIF ','",
"sentencia_seleccion : IF '(' condicion ')' ENDIF ','",
"sentencia_seleccion_funcion : IF '(' condicion ')' bloque_sentencias_ejecutables_funcion ELSE bloque_sentencias_ejecutables_funcion ENDIF ','",
"sentencia_seleccion_funcion : IF '(' condicion ')' bloque_sentencias_ejecutables_funcion ENDIF ','",
"sentencia_seleccion_funcion : IF '(' condicion ')' bloque_sentencias_ejecutables_funcion ELSE bloque_sentencias_ejecutables_funcion ENDIF",
"$$2 :",
"sentencia_seleccion_funcion : IF '(' condicion ')' bloque_sentencias_ejecutables_funcion ENDIF $$2 IF '(' ')' bloque_sentencias_ejecutables_funcion ELSE bloque_sentencias_ejecutables_funcion ENDIF ','",
"sentencia_seleccion_funcion : IF '(' ')' bloque_sentencias_ejecutables_funcion ENDIF ','",
"sentencia_seleccion_funcion : IF '(' condicion ')' ELSE bloque_sentencias_ejecutables_funcion ENDIF ','",
"sentencia_seleccion_funcion : IF '(' condicion ')' bloque_sentencias_ejecutables_funcion ELSE ENDIF ','",
"sentencia_seleccion_funcion : IF '(' condicion ')' ENDIF ','",
"bloque_sentencias_ejecutables : sentencia_ejecutable",
"bloque_sentencias_ejecutables : '{' sentencias_ejecutables '}'",
"bloque_sentencias_ejecutables : '{' '}'",
"bloque_sentencias_ejecutables : sentencia_declarativa",
"bloque_sentencias_ejecutables_funcion : sentencia_ejecutable_funcion",
"bloque_sentencias_ejecutables_funcion : sentencia_return",
"bloque_sentencias_ejecutables_funcion : sentencia_declarativa",
"bloque_sentencias_ejecutables_funcion : '{' sentencias_ejecutables_funcion '}'",
"bloque_sentencias_ejecutables_funcion : '{' sentencias_ejecutables_funcion sentencia_return '}'",
"bloque_sentencias_ejecutables_funcion : '{' sentencias_ejecutables_funcion sentencia_return sentencias_ejecutables_funcion_inalcanzable '}'",
"bloque_sentencias_ejecutables_funcion : '{' '}'",
"sentencias_ejecutables_funcion_inalcanzable : sentencia_ejecutable_funcion_inalcanzable",
"sentencias_ejecutables_funcion_inalcanzable : sentencias_ejecutables_funcion_inalcanzable sentencia_ejecutable_funcion_inalcanzable",
"sentencia_ejecutable_funcion_inalcanzable : sentencia_return",
"sentencia_ejecutable_funcion_inalcanzable : sentencia_ejecutable_funcion",
"sentencias_ejecutables : sentencia_ejecutable",
"sentencias_ejecutables : sentencias_ejecutables sentencia_ejecutable",
"sentencias_ejecutables : sentencia_declarativa",
"sentencias_ejecutables : sentencias_ejecutables sentencia_declarativa",
"sentencias_ejecutables_funcion : sentencia_ejecutable_funcion",
"sentencias_ejecutables_funcion : sentencias_ejecutables_funcion sentencia_ejecutable_funcion",
"sentencias_ejecutables_funcion : sentencia_declarativa",
"sentencias_ejecutables_funcion : sentencias_ejecutables_funcion sentencia_declarativa",
"sentencia_imprimir : PRINT CADENA ','",
"sentencia_imprimir : PRINT CADENA",
"sentencia_imprimir : PRINT ','",
"sentencia_imprimir : PRINT ID ','",
"sentencia_imprimir : PRINT ID",
"sentencia_imprimir : PRINT constante ','",
"sentencia_imprimir : PRINT constante",
"sentencia_invocacion_funcion : sentencia_objeto_identificador '(' expresion ')' ','",
"sentencia_invocacion_funcion : sentencia_objeto_identificador '(' ')' ','",
"sentencia_invocacion_funcion : sentencia_objeto_identificador '(' expresion ',' lista_expresiones_invocacion_funcion_exceso ')' ','",
"sentencia_invocacion_funcion : sentencia_objeto_identificador '(' expresion ')'",
"sentencia_invocacion_funcion : sentencia_objeto_identificador '(' ')'",
"sentencia_invocacion_funcion : sentencia_objeto_identificador '(' expresion ',' lista_expresiones_invocacion_funcion_exceso ')'",
"lista_expresiones_invocacion_funcion_exceso : expresion",
"lista_expresiones_invocacion_funcion_exceso : lista_expresiones_invocacion_funcion_exceso ',' expresion",
"sentencia_asignacion : sentencia_objeto_identificador '=' expresion ','",
"sentencia_asignacion : sentencia_objeto_identificador '=' expresion",
"sentencia_asignacion : sentencia_objeto_identificador '=' ','",
"sentencia_objeto_identificador : ID",
"sentencia_objeto_identificador : sentencia_objeto_identificador '.' ID",
"sentencia_declarativa : declaracion_variable",
"sentencia_declarativa : declaracion_funcion",
"sentencia_declarativa : declaracion_clase",
"sentencia_declarativa : declaracion_interfaz",
"declaracion_variable : tipo lista_de_variables ','",
"declaracion_variable : tipo lista_de_variables",
"declaracion_variable : tipo ','",
"declaracion_interfaz : INTERFACE ID '{' bloque_encabezado_funcion_declaracion_interfaz '}'",
"declaracion_interfaz : INTERFACE '{' bloque_encabezado_funcion_declaracion_interfaz '}'",
"declaracion_interfaz : INTERFACE bloque_encabezado_funcion_declaracion_interfaz '}'",
"declaracion_interfaz : INTERFACE '}'",
"declaracion_interfaz : INTERFACE ID bloque_encabezado_funcion_declaracion_interfaz '}'",
"declaracion_interfaz : INTERFACE ID '}'",
"bloque_encabezado_funcion_declaracion_interfaz : encabezado_funcion_declaracion_interfaz",
"bloque_encabezado_funcion_declaracion_interfaz : bloque_encabezado_funcion_declaracion_interfaz encabezado_funcion_declaracion_interfaz",
"encabezado_funcion_declaracion_interfaz : encabezado_funcion ','",
"encabezado_funcion_declaracion_interfaz : encabezado_funcion",
"sentencia_declarativa_clase : tipo lista_de_variables ','",
"sentencia_declarativa_clase : tipo lista_de_variables",
"sentencia_declarativa_clase : declaracion_funcion",
"sentencia_declarativa_clase : ID ','",
"declaracion_clase : CLASS ID '{' bloque_sentencias_declarativas_clase '}'",
"declaracion_clase : CLASS ID IMPLEMENT ID '{' bloque_sentencias_declarativas_clase '}'",
"declaracion_clase : CLASS '{' bloque_sentencias_declarativas_clase '}'",
"declaracion_clase : CLASS IMPLEMENT ID",
"declaracion_clase : CLASS ID IMPLEMENT '{' bloque_sentencias_declarativas_clase '}'",
"declaracion_clase : CLASS IMPLEMENT '{' bloque_sentencias_declarativas_clase '}'",
"declaracion_clase : CLASS ID bloque_sentencias_declarativas_clase '}'",
"declaracion_clase : CLASS ID IMPLEMENT ID bloque_sentencias_declarativas_clase '}'",
"bloque_sentencias_declarativas_clase : sentencia_declarativa_clase",
"bloque_sentencias_declarativas_clase : bloque_sentencias_declarativas_clase sentencia_declarativa_clase",
"declaracion_funcion : encabezado_funcion cuerpo_funcion",
"encabezado_funcion : VOID ID '(' parametro_funcion ')'",
"encabezado_funcion : VOID ID '(' ')'",
"encabezado_funcion : VOID ID '(' parametro_funcion ',' lista_parametros_funcion_exceso ')'",
"encabezado_funcion : VOID ID '(' parametro_funcion lista_parametros_funcion_exceso ')'",
"encabezado_funcion : VOID '(' parametro_funcion ')'",
"encabezado_funcion : VOID '(' ')'",
"encabezado_funcion : VOID ID parametro_funcion ')'",
"encabezado_funcion : VOID ID ')'",
"cuerpo_funcion : '{' sentencias_funcion sentencia_return '}'",
"cuerpo_funcion : '{' sentencia_return '}'",
"cuerpo_funcion : '{' sentencias_funcion sentencia_return sentencias_funcion_inalcanzable '}'",
"cuerpo_funcion : '{' sentencia_return sentencias_funcion_inalcanzable '}'",
"cuerpo_funcion : '{' sentencias_funcion '}'",
"cuerpo_funcion : '{' '}'",
"cuerpo_funcion : sentencias_funcion sentencia_return '}'",
"cuerpo_funcion : sentencia_return '}'",
"cuerpo_funcion : sentencias_funcion sentencia_return sentencias_funcion_inalcanzable '}'",
"cuerpo_funcion : sentencia_return sentencias_funcion_inalcanzable '}'",
"cuerpo_funcion : sentencias_funcion '}'",
"cuerpo_funcion : '}'",
"sentencias_funcion_inalcanzable : sentencia_funcion_inalcanzable",
"sentencias_funcion_inalcanzable : sentencias_funcion_inalcanzable sentencia_funcion_inalcanzable",
"sentencia_funcion_inalcanzable : sentencia_declarativa",
"sentencia_funcion_inalcanzable : sentencia_return",
"sentencia_funcion_inalcanzable : sentencia_ejecutable_funcion",
"lista_parametros_funcion_exceso : parametro_funcion",
"lista_parametros_funcion_exceso : lista_parametros_funcion_exceso ',' parametro_funcion",
"lista_parametros_funcion_exceso : lista_parametros_funcion_exceso parametro_funcion",
"parametro_funcion : tipo ID",
"lista_de_variables : ID",
"lista_de_variables : lista_de_variables ';' ID",
"tipo : INT",
"tipo : ULONG",
"tipo : FLOAT",
"tipo : ID",
"condicion : expresion comparador expresion",
"condicion : expresion comparador",
"condicion : comparador expresion",
"condicion : expresion '=' expresion",
"comparador : COMP_MAYOR_IGUAL",
"comparador : COMP_MENOR_IGUAL",
"comparador : COMP_IGUAL",
"comparador : COMP_DISTINTO",
"comparador : '>'",
"comparador : '<'",
"expresion : expresion '+' termino",
"expresion : expresion '-' termino",
"expresion : termino",
"termino : termino '*' factor",
"termino : termino '/' factor",
"termino : factor",
"factor : ID",
"factor : ID OPERADOR_MENOS",
"factor : constante",
"constante : CTE",
"constante : '-' CTE",
};

//#line 352 "./src/compilador/gramatica.y"

public static AnalizadorLexico lexico = null;
public static Logger logger = Logger.getInstance();
public static TablaDeSimbolos ts = TablaDeSimbolos.getInstance();
public static Parser parser = null;
public static int MAX_INT_VALUE = (int) (Math.pow(2, 15) - 1);

/** Chequea, para los INT, que el valor positivo no supere el valor maximo */
public void corregirConstantePositivaEntera(String constante) {
	if (constante.contains("_i")) {
		//se recibio un INT con signo positivo
		boolean exceptionOutOfRange = false;
		int cte = 0;
		String constanteValue = constante.toString().split("_")[0];

		try {
			cte = Integer.parseInt(constanteValue);
		} catch (NumberFormatException e) {
			exceptionOutOfRange = true;
		}

		if (cte > MAX_INT_VALUE || exceptionOutOfRange) {
			logger.logWarning("[Parser] Rango invalido para la constante: " + constante + ", se trunca al valor " + MAX_INT_VALUE + "_i");

			ts.swapLexemas(constante, MAX_INT_VALUE + "_i");
		}
	}
}

public void constanteConSigno(String constante) {
	/** Check de float negativos */
	if (constante.contains(".")) {
		String negConstante = "-"+constante;
		ts.swapLexemas(constante, negConstante);
	} else {

		if (constante.contains("_ul")) {
			//se recibio un ULONG con signo negativo
			logger.logWarning("[Parser] No se admiten ULONG con valores negativos: " + "-"+constante + ", se trunca a 0_ul");
		
			ts.swapLexemas(constante, "0_ul");
		} else {
			// se recibio un INT negativo
			String negConstante = "-"+constante;
			ts.swapLexemas(constante, negConstante);
		}
	}
}	

public int yylex() {
	return lexico.yylex(yylval);
}

public void yyerror(String error) {
	logger.logError(error);
}

public static void main(String[] args) {
	if (args.length == 0) {
		System.err.println("No se especifico ningun archivo de codigo");
	} else {
		String archivo_a_leer = args[0];
		System.out.println("Se va a leer archivo " + archivo_a_leer);
		
		FileReaderHelper fileHelper = new FileReaderHelper();
		
		boolean fileOpenSuccess = fileHelper.open(archivo_a_leer);
		
		if (fileOpenSuccess) {
			parser = new Parser();
			lexico = new AnalizadorLexico(fileHelper);
			
	        parser.run();
	
			String path = new File(archivo_a_leer).getAbsolutePath();
	        
	        Output out = new Output(path);
	        
	        out.saveFile("codigo-lexico.txt", logger.getLexico());
			out.saveFile("codigo-sintactico.txt", logger.getSintactico());
			out.saveFile("tabla-de-simbolos.txt", ts.print());
		}
	}
}
//#line 968 "Parser.java"
//###############################################################
// method: yylexdebug : check lexer state
//###############################################################
void yylexdebug(int state,int ch)
{
String s=null;
  if (ch < 0) ch=0;
  if (ch <= YYMAXTOKEN) //check index bounds
     s = yyname[ch];    //now get it
  if (s==null)
    s = "illegal-symbol";
  debug("state "+state+", reading "+ch+" ("+s+")");
}





//The following are now global, to aid in error reporting
int yyn;       //next next thing to do
int yym;       //
int yystate;   //current parsing state from state table
String yys;    //current token string


//###############################################################
// method: yyparse : parse input and execute indicated items
//###############################################################
int yyparse()
{
boolean doaction;
  init_stacks();
  yynerrs = 0;
  yyerrflag = 0;
  yychar = -1;          //impossible char forces a read
  yystate=0;            //initial state
  state_push(yystate);  //save it
  val_push(yylval);     //save empty value
  while (true) //until parsing is done, either correctly, or w/error
    {
    doaction=true;
    if (yydebug) debug("loop"); 
    //#### NEXT ACTION (from reduction table)
    for (yyn=yydefred[yystate];yyn==0;yyn=yydefred[yystate])
      {
      if (yydebug) debug("yyn:"+yyn+"  state:"+yystate+"  yychar:"+yychar);
      if (yychar < 0)      //we want a char?
        {
        yychar = yylex();  //get next token
        if (yydebug) debug(" next yychar:"+yychar);
        //#### ERROR CHECK ####
        if (yychar < 0)    //it it didn't work/error
          {
          yychar = 0;      //change it to default string (no -1!)
          if (yydebug)
            yylexdebug(yystate,yychar);
          }
        }//yychar<0
      yyn = yysindex[yystate];  //get amount to shift by (shift index)
      if ((yyn != 0) && (yyn += yychar) >= 0 &&
          yyn <= YYTABLESIZE && yycheck[yyn] == yychar)
        {
        if (yydebug)
          debug("state "+yystate+", shifting to state "+yytable[yyn]);
        //#### NEXT STATE ####
        yystate = yytable[yyn];//we are in a new state
        state_push(yystate);   //save it
        val_push(yylval);      //push our lval as the input for next rule
        yychar = -1;           //since we have 'eaten' a token, say we need another
        if (yyerrflag > 0)     //have we recovered an error?
           --yyerrflag;        //give ourselves credit
        doaction=false;        //but don't process yet
        break;   //quit the yyn=0 loop
        }

    yyn = yyrindex[yystate];  //reduce
    if ((yyn !=0 ) && (yyn += yychar) >= 0 &&
            yyn <= YYTABLESIZE && yycheck[yyn] == yychar)
      {   //we reduced!
      if (yydebug) debug("reduce");
      yyn = yytable[yyn];
      doaction=true; //get ready to execute
      break;         //drop down to actions
      }
    else //ERROR RECOVERY
      {
      if (yyerrflag==0)
        {
        yyerror("syntax error");
        yynerrs++;
        }
      if (yyerrflag < 3) //low error count?
        {
        yyerrflag = 3;
        while (true)   //do until break
          {
          if (stateptr<0)   //check for under & overflow here
            {
            yyerror("stack underflow. aborting...");  //note lower case 's'
            return 1;
            }
          yyn = yysindex[state_peek(0)];
          if ((yyn != 0) && (yyn += YYERRCODE) >= 0 &&
                    yyn <= YYTABLESIZE && yycheck[yyn] == YYERRCODE)
            {
            if (yydebug)
              debug("state "+state_peek(0)+", error recovery shifting to state "+yytable[yyn]+" ");
            yystate = yytable[yyn];
            state_push(yystate);
            val_push(yylval);
            doaction=false;
            break;
            }
          else
            {
            if (yydebug)
              debug("error recovery discarding state "+state_peek(0)+" ");
            if (stateptr<0)   //check for under & overflow here
              {
              yyerror("Stack underflow. aborting...");  //capital 'S'
              return 1;
              }
            state_pop();
            val_pop();
            }
          }
        }
      else            //discard this token
        {
        if (yychar == 0)
          return 1; //yyabort
        if (yydebug)
          {
          yys = null;
          if (yychar <= YYMAXTOKEN) yys = yyname[yychar];
          if (yys == null) yys = "illegal-symbol";
          debug("state "+yystate+", error recovery discards token "+yychar+" ("+yys+")");
          }
        yychar = -1;  //read another
        }
      }//end error recovery
    }//yyn=0 loop
    if (!doaction)   //any reason not to proceed?
      continue;      //skip action
    yym = yylen[yyn];          //get count of terminals on rhs
    if (yydebug)
      debug("state "+yystate+", reducing "+yym+" by rule "+yyn+" ("+yyrule[yyn]+")");
    if (yym>0)                 //if count of rhs not 'nil'
      yyval = val_peek(yym-1); //get current semantic value
    yyval = dup_yyval(yyval); //duplicate yyval if ParserVal is used as semantic value
    switch(yyn)
      {
//########## USER-SUPPLIED ACTIONS ##########
case 1:
//#line 17 "./src/compilador/gramatica.y"
{ logger.logSuccess("[Parser] Programa correcto detectado"); }
break;
case 2:
//#line 18 "./src/compilador/gramatica.y"
{ logger.logError("[Parser] Se esperaba simbolo '{' al principio del programa"); }
break;
case 3:
//#line 19 "./src/compilador/gramatica.y"
{ logger.logError("[Parser] Se esperaba simbolo '}' al final del programa"); }
break;
case 4:
//#line 20 "./src/compilador/gramatica.y"
{ logger.logError("[Parser] Programa vacio"); }
break;
case 5:
//#line 21 "./src/compilador/gramatica.y"
{ logger.logError("[Parser] Programa vacio"); }
break;
case 15:
//#line 40 "./src/compilador/gramatica.y"
{ logger.logError("[Parser] Sentencia RETURN fuera de funcion"); }
break;
case 26:
//#line 63 "./src/compilador/gramatica.y"
{ logger.logError("[Parser] Se esperab un simbolo ',' luego del RETURN"); }
break;
case 27:
//#line 67 "./src/compilador/gramatica.y"
{ logger.logSuccess("[Parser] Sentencia iterativa DO WHILE detectada"); }
break;
case 28:
//#line 68 "./src/compilador/gramatica.y"
{ logger.logError("[Parser] Se esperaba ',' luego de sentencia DO WHILE"); }
break;
case 29:
//#line 69 "./src/compilador/gramatica.y"
{ logger.logError("[Parser] Se esperaban sentencias ejecutables en sentencia DO WHILE"); }
break;
case 30:
//#line 70 "./src/compilador/gramatica.y"
{ logger.logError("[Parser] Se esperaba condicion en sentencia DO WHILE"); }
break;
case 31:
//#line 71 "./src/compilador/gramatica.y"
{ logger.logError("[Parser] Se esperaba WHILE en sentencia DO WHILE"); }
break;
case 32:
//#line 72 "./src/compilador/gramatica.y"
{ logger.logError("[Parser] Se esperaban sentencias ejecutables en sentencia DO WHILE"); }
break;
case 33:
//#line 73 "./src/compilador/gramatica.y"
{ logger.logError("[Parser] Se esperaba condicion en sentencia DO WHILE"); }
break;
case 34:
//#line 74 "./src/compilador/gramatica.y"
{ logger.logError("[Parser] Se esperaban sentencias ejecutables en sentencia DO WHILE"); }
break;
case 35:
//#line 75 "./src/compilador/gramatica.y"
{ logger.logError("[Parser] Se esperaban sentencias ejecutables en sentencia DO WHILE"); }
break;
case 36:
//#line 76 "./src/compilador/gramatica.y"
{ logger.logError("[Parser] Se esperaban sentencias ejecutables en sentencia DO WHILE"); }
break;
case 37:
//#line 77 "./src/compilador/gramatica.y"
{ logger.logError("[Parser] Se esperaban sentencias ejecutables en sentencia DO WHILE"); }
break;
case 38:
//#line 81 "./src/compilador/gramatica.y"
{ logger.logSuccess("[Parser] Sentencia iterativa DO WHILE detectada"); }
break;
case 39:
//#line 82 "./src/compilador/gramatica.y"
{ logger.logError("[Parser] Se esperaba ',' luego de sentencia DO WHILE"); }
break;
case 40:
//#line 83 "./src/compilador/gramatica.y"
{ logger.logError("[Parser] Se esperaban sentencias ejecutables en sentencia DO WHILE"); }
break;
case 41:
//#line 84 "./src/compilador/gramatica.y"
{ logger.logError("[Parser] Se esperaba condicion en sentencia DO WHILE"); }
break;
case 42:
//#line 85 "./src/compilador/gramatica.y"
{ logger.logError("[Parser] Se esperaba WHILE en sentencia DO WHILE"); }
break;
case 43:
//#line 86 "./src/compilador/gramatica.y"
{ logger.logError("[Parser] Se esperaban sentencias ejecutables en sentencia DO WHILE"); }
break;
case 44:
//#line 87 "./src/compilador/gramatica.y"
{ logger.logError("[Parser] Se esperaba condicion en sentencia DO WHILE"); }
break;
case 45:
//#line 88 "./src/compilador/gramatica.y"
{ logger.logError("[Parser] Se esperaban sentencias ejecutables en sentencia DO WHILE"); }
break;
case 46:
//#line 89 "./src/compilador/gramatica.y"
{ logger.logError("[Parser] Se esperaban sentencias ejecutables en sentencia DO WHILE"); }
break;
case 47:
//#line 90 "./src/compilador/gramatica.y"
{ logger.logError("[Parser] Se esperaban sentencias ejecutables en sentencia DO WHILE"); }
break;
case 48:
//#line 91 "./src/compilador/gramatica.y"
{ logger.logError("[Parser] Se esperaban sentencias ejecutables en sentencia DO WHILE"); }
break;
case 49:
//#line 95 "./src/compilador/gramatica.y"
{ logger.logSuccess("[Parser] Sentencia seleccion IF ELSE detectada"); }
break;
case 50:
//#line 96 "./src/compilador/gramatica.y"
{ logger.logSuccess("[Parser] Sentencia seleccion IF sin ELSE detectada"); }
break;
case 51:
//#line 97 "./src/compilador/gramatica.y"
{ logger.logError("[Parser] Se esperaba ',' luego de sentencia IF ELSE"); }
break;
case 52:
//#line 98 "./src/compilador/gramatica.y"
{ logger.logError("[Parser] Se esperaba ',' luego de sentencia IF sin ELSE"); }
break;
case 53:
//#line 99 "./src/compilador/gramatica.y"
{ logger.logError("[Parser] Se esperaba condicion en sentencia IF ELSE"); }
break;
case 54:
//#line 100 "./src/compilador/gramatica.y"
{ logger.logError("[Parser] Se esperaba condicion en sentencia IF"); }
break;
case 55:
//#line 101 "./src/compilador/gramatica.y"
{ logger.logError("[Parser] Se esperaban sentencias ejecutables en sentencia IF ELSE"); }
break;
case 56:
//#line 102 "./src/compilador/gramatica.y"
{ logger.logError("[Parser] Se esperaban sentencias ejecutables en sentencia IF ELSE"); }
break;
case 57:
//#line 103 "./src/compilador/gramatica.y"
{ logger.logError("[Parser] Se esperaban sentencias ejecutables en sentencia IF"); }
break;
case 58:
//#line 107 "./src/compilador/gramatica.y"
{ logger.logSuccess("[Parser] Sentencia seleccion IF ELSE detectada"); }
break;
case 59:
//#line 108 "./src/compilador/gramatica.y"
{ logger.logSuccess("[Parser] Sentencia seleccion IF sin ELSE detectada"); }
break;
case 60:
//#line 109 "./src/compilador/gramatica.y"
{ logger.logError("[Parser] Se esperaba ',' luego de sentencia IF ELSE"); }
break;
case 61:
//#line 110 "./src/compilador/gramatica.y"
{ logger.logError("[Parser] Se esperaba ',' luego de sentencia IF sin ELSE"); }
break;
case 62:
//#line 111 "./src/compilador/gramatica.y"
{ logger.logError("[Parser] Se esperaba condicion en sentencia IF ELSE"); }
break;
case 63:
//#line 112 "./src/compilador/gramatica.y"
{ logger.logError("[Parser] Se esperaba condicion en sentencia IF"); }
break;
case 64:
//#line 113 "./src/compilador/gramatica.y"
{ logger.logError("[Parser] Se esperaban sentencias ejecutables en sentencia IF ELSE"); }
break;
case 65:
//#line 114 "./src/compilador/gramatica.y"
{ logger.logError("[Parser] Se esperaban sentencias ejecutables en sentencia IF ELSE"); }
break;
case 66:
//#line 115 "./src/compilador/gramatica.y"
{ logger.logError("[Parser] Se esperaban sentencias ejecutables en sentencia IF"); }
break;
case 69:
//#line 121 "./src/compilador/gramatica.y"
{ logger.logError("[Parser] Se esperaban sentencias ejecutables dentro del bloque"); }
break;
case 70:
//#line 122 "./src/compilador/gramatica.y"
{ logger.logError("[Parser] No se permiten declaraciones de variables dentro de bloque de sentencias ejecutables"); }
break;
case 73:
//#line 128 "./src/compilador/gramatica.y"
{ logger.logError("[Parser] No se permiten declaraciones de variables dentro de bloque de sentencias ejecutables"); }
break;
case 77:
//#line 132 "./src/compilador/gramatica.y"
{ logger.logError("[Parser] Se esperaban sentencias ejecutables en bloque de sentencias ejecutables"); }
break;
case 78:
//#line 136 "./src/compilador/gramatica.y"
{ logger.logError("[Parser] Codigo inalcanzable luego del RETURN, se ignorara"); }
break;
case 79:
//#line 137 "./src/compilador/gramatica.y"
{ logger.logError("[Parser] Codigo inalcanzable luego del RETURN, se ignorara"); }
break;
case 84:
//#line 148 "./src/compilador/gramatica.y"
{ logger.logError("[Parser] No se aceptan declaraciones de variables en sentencias ejecutables"); }
break;
case 85:
//#line 149 "./src/compilador/gramatica.y"
{ logger.logError("[Parser] No se aceptan declaraciones de variables en sentencias ejecutables"); }
break;
case 88:
//#line 155 "./src/compilador/gramatica.y"
{ logger.logError("[Parser] No se aceptan declaraciones de variables en sentencias ejecutables"); }
break;
case 89:
//#line 156 "./src/compilador/gramatica.y"
{ logger.logError("[Parser] No se aceptan declaraciones de variables en sentencias ejecutables"); }
break;
case 90:
//#line 160 "./src/compilador/gramatica.y"
{ logger.logSuccess("[Parser] Sentencia PRINT detectada"); }
break;
case 91:
//#line 161 "./src/compilador/gramatica.y"
{ logger.logError("[Parser] Se esperaba un simbolo ',' en Sentencia PRINT"); }
break;
case 92:
//#line 162 "./src/compilador/gramatica.y"
{ logger.logError("[Parser] Se esperaba CADENA en Sentencia PRINT"); }
break;
case 93:
//#line 163 "./src/compilador/gramatica.y"
{ logger.logError("[Parser] Se esperaba una CADENA y se encontro un IDENTIFICADOR en sentencia PRINT"); }
break;
case 94:
//#line 164 "./src/compilador/gramatica.y"
{ logger.logError("[Parser] Se esperaba un simbolo ',' en sentencia PRINT"); }
break;
case 95:
//#line 165 "./src/compilador/gramatica.y"
{ logger.logError("[Parser] Se esperaba una CADENA y se encontro una constante en sentencia PRINT"); }
break;
case 96:
//#line 166 "./src/compilador/gramatica.y"
{ logger.logError("[Parser] Se esperaba un simbolo ',' en sentencia PRINT"); }
break;
case 97:
//#line 170 "./src/compilador/gramatica.y"
{ logger.logSuccess("[Parser] Invocacion de funcion con expresion detectada"); }
break;
case 98:
//#line 171 "./src/compilador/gramatica.y"
{ logger.logSuccess("[Parser] Invocacion de funcion sin expresion detectada"); }
break;
case 99:
//#line 172 "./src/compilador/gramatica.y"
{ logger.logError("[Parser] Invocacion de funcion con multiples expresiones detectada, se preserva solo la primera expresion"); }
break;
case 100:
//#line 173 "./src/compilador/gramatica.y"
{ logger.logError("[Parser] Se esperaba un simbolo ',' en invocacion de funcion"); }
break;
case 101:
//#line 174 "./src/compilador/gramatica.y"
{ logger.logError("[Parser] Se esperaba un simbolo ',' en invocacion de funcion"); }
break;
case 102:
//#line 175 "./src/compilador/gramatica.y"
{ logger.logError("[Parser] Se esperaba un simbolo ',' en invocacion de funcion"); }
break;
case 105:
//#line 184 "./src/compilador/gramatica.y"
{ logger.logSuccess("[Parser] Asignacion detectada"); }
break;
case 106:
//#line 185 "./src/compilador/gramatica.y"
{ logger.logError("[Parser] Se esperaba un simbolo ',' en sentencia asignacion"); }
break;
case 107:
//#line 186 "./src/compilador/gramatica.y"
{ logger.logError("[Parser] Se esperaba expresion del lado derecho en sentencia asignacion"); }
break;
case 114:
//#line 202 "./src/compilador/gramatica.y"
{ logger.logSuccess("[Parser] Declaracion de lista de variables detectado"); }
break;
case 115:
//#line 203 "./src/compilador/gramatica.y"
{ logger.logError("[Parser] Se esperaba un simbolo ',' en sentencia declaracion de variables"); }
break;
case 116:
//#line 204 "./src/compilador/gramatica.y"
{ logger.logError("[Parser] Se esperaba una lista de variables en sentencia declaracion de variables"); }
break;
case 117:
//#line 208 "./src/compilador/gramatica.y"
{ logger.logSuccess("[Parser] Declaracion de INTERFACE detectada"); }
break;
case 118:
//#line 209 "./src/compilador/gramatica.y"
{ logger.logError("[Parser] Se esperaba un identificador en declaracion de INTERFACE"); }
break;
case 119:
//#line 210 "./src/compilador/gramatica.y"
{ logger.logError("[Parser] Se esperaba un identificador en declaracion de INTERFACE"); }
break;
case 120:
//#line 211 "./src/compilador/gramatica.y"
{ logger.logError("[Parser] Se esperaba un identificador en declaracion de INTERFACE"); }
break;
case 121:
//#line 212 "./src/compilador/gramatica.y"
{ logger.logError("[Parser] Se esperaba un simbolo '{' en declaracion de INTERFACE"); }
break;
case 122:
//#line 213 "./src/compilador/gramatica.y"
{ logger.logError("[Parser] Se esperaba un simbolo '{' en declaracion de INTERFACE"); }
break;
case 126:
//#line 223 "./src/compilador/gramatica.y"
{ logger.logError("[Parser] Se esperaba un simbolo ',' en declaracion de metodo en CLASS"); }
break;
case 127:
//#line 227 "./src/compilador/gramatica.y"
{ logger.logSuccess("[Parser] Declaracion de lista de variables en CLASS detectado"); }
break;
case 128:
//#line 228 "./src/compilador/gramatica.y"
{ logger.logError("[Parser] Se esperaba un simbolo ',' en declaracion de lista de variables en CLASS"); }
break;
case 131:
//#line 234 "./src/compilador/gramatica.y"
{ logger.logSuccess("[Parser] Declaracion de clase CLASS detectado"); }
break;
case 132:
//#line 235 "./src/compilador/gramatica.y"
{ logger.logSuccess("[Parser] Declaracion de clase CLASS detectado"); }
break;
case 133:
//#line 236 "./src/compilador/gramatica.y"
{ logger.logError("[Parser] Se esperaba un identificador en declaracion de clase"); }
break;
case 134:
//#line 237 "./src/compilador/gramatica.y"
{ logger.logError("[Parser] Se esperaba un identificador en declaracion de clase"); }
break;
case 135:
//#line 238 "./src/compilador/gramatica.y"
{ logger.logError("[Parser] Se esperaba un identificador en IMPLEMENT de clase"); }
break;
case 136:
//#line 239 "./src/compilador/gramatica.y"
{ logger.logError("[Parser] Se esperaba un identificador en declaracion de clase"); }
break;
case 137:
//#line 240 "./src/compilador/gramatica.y"
{ logger.logError("[Parser] Se esperaba un simbolo '{' en declaracion de clase"); }
break;
case 138:
//#line 241 "./src/compilador/gramatica.y"
{ logger.logError("[Parser] Se esperaba un simbolo '{' en declaracion de clase"); }
break;
case 141:
//#line 250 "./src/compilador/gramatica.y"
{ logger.logSuccess("[Parser] Declaracion de funcion detectado"); }
break;
case 144:
//#line 256 "./src/compilador/gramatica.y"
{ logger.logError("[Parser] Encabezado de funcion con mas de 1 parametro detectado, se preserva solo el primer parametro"); }
break;
case 145:
//#line 257 "./src/compilador/gramatica.y"
{ logger.logError("[Parser] Encabezado de funcion con mas de 1 parametro detectado, se preserva solo el primer parametro"); }
break;
case 146:
//#line 258 "./src/compilador/gramatica.y"
{ logger.logError("[Parser] Se esperaba un identificador en el encabezado de la funcion"); }
break;
case 147:
//#line 259 "./src/compilador/gramatica.y"
{ logger.logError("[Parser] Se esperaba un identificador en el encabezado de la funcion"); }
break;
case 148:
//#line 260 "./src/compilador/gramatica.y"
{ logger.logError("[Parser] Se esperaba un simbolo '(' en el encabezado de la funcion"); }
break;
case 149:
//#line 261 "./src/compilador/gramatica.y"
{ logger.logError("[Parser] Se esperaba un simbolo '(' en el encabezado de la funcion"); }
break;
case 154:
//#line 269 "./src/compilador/gramatica.y"
{ logger.logError("[Parser] Se esperaba una sentencia RETURN al final de la funcion"); }
break;
case 155:
//#line 270 "./src/compilador/gramatica.y"
{ logger.logError("[Parser] Se esperaba una sentencia RETURN al final de la funcion"); }
break;
case 156:
//#line 271 "./src/compilador/gramatica.y"
{ logger.logError("[Parser] Se esperaba un simbolo '{' en el cuerpo de la funcion"); }
break;
case 157:
//#line 272 "./src/compilador/gramatica.y"
{ logger.logError("[Parser] Se esperaba un simbolo '{' en el cuerpo de la funcion"); }
break;
case 158:
//#line 273 "./src/compilador/gramatica.y"
{ logger.logError("[Parser] Se esperaba un simbolo '{' en el cuerpo de la funcion"); }
break;
case 159:
//#line 274 "./src/compilador/gramatica.y"
{ logger.logError("[Parser] Se esperaba un simbolo '{' en el cuerpo de la funcion"); }
break;
case 160:
//#line 275 "./src/compilador/gramatica.y"
{ logger.logError("[Parser] Se esperaba un simbolo '{' en el cuerpo de la funcion"); }
break;
case 161:
//#line 276 "./src/compilador/gramatica.y"
{ logger.logError("[Parser] Se esperaba un simbolo '{' en el cuerpo de la funcion"); }
break;
case 162:
//#line 280 "./src/compilador/gramatica.y"
{ logger.logError("[Parser] Codigo inalcanzable luego del RETURN, se ignorara"); }
break;
case 163:
//#line 281 "./src/compilador/gramatica.y"
{ logger.logError("[Parser] Codigo inalcanzable luego del RETURN, se ignorara"); }
break;
case 178:
//#line 314 "./src/compilador/gramatica.y"
{ logger.logError("[Parser] Se esperaba una expresion del lado derecho de la comparacion"); }
break;
case 179:
//#line 315 "./src/compilador/gramatica.y"
{ logger.logError("[Parser] Se esperaba una expresion del lado izquierdo de la comparacion"); }
break;
case 180:
//#line 316 "./src/compilador/gramatica.y"
{ logger.logError("[Parser] Se esperaba un comparador valido en la comparacion"); }
break;
case 196:
//#line 347 "./src/compilador/gramatica.y"
{ corregirConstantePositivaEntera(val_peek(0).sval); }
break;
case 197:
//#line 348 "./src/compilador/gramatica.y"
{ constanteConSigno(val_peek(0).sval); }
break;
//#line 1577 "Parser.java"
//########## END OF USER-SUPPLIED ACTIONS ##########
    }//switch
    //#### Now let's reduce... ####
    if (yydebug) debug("reduce");
    state_drop(yym);             //we just reduced yylen states
    yystate = state_peek(0);     //get new state
    val_drop(yym);               //corresponding value drop
    yym = yylhs[yyn];            //select next TERMINAL(on lhs)
    if (yystate == 0 && yym == 0)//done? 'rest' state and at first TERMINAL
      {
      if (yydebug) debug("After reduction, shifting from state 0 to state "+YYFINAL+"");
      yystate = YYFINAL;         //explicitly say we're done
      state_push(YYFINAL);       //and save it
      val_push(yyval);           //also save the semantic value of parsing
      if (yychar < 0)            //we want another character?
        {
        yychar = yylex();        //get next character
        if (yychar<0) yychar=0;  //clean, if necessary
        if (yydebug)
          yylexdebug(yystate,yychar);
        }
      if (yychar == 0)          //Good exit (if lex returns 0 ;-)
         break;                 //quit the loop--all DONE
      }//if yystate
    else                        //else not done yet
      {                         //get next state and push, for next yydefred[]
      yyn = yygindex[yym];      //find out where to go
      if ((yyn != 0) && (yyn += yystate) >= 0 &&
            yyn <= YYTABLESIZE && yycheck[yyn] == yystate)
        yystate = yytable[yyn]; //get new state
      else
        yystate = yydgoto[yym]; //else go to new defred
      if (yydebug) debug("after reduction, shifting from state "+state_peek(0)+" to state "+yystate+"");
      state_push(yystate);     //going again, so push state & val...
      val_push(yyval);         //for next action
      }
    }//main loop
  return 0;//yyaccept!!
}
//## end of method parse() ######################################



//## run() --- for Thread #######################################
/**
 * A default run method, used for operating this parser
 * object in the background.  It is intended for extending Thread
 * or implementing Runnable.  Turn off with -Jnorun .
 */
public void run()
{
  yyparse();
}
//## end of method run() ########################################



//## Constructors ###############################################
/**
 * Default constructor.  Turn off with -Jnoconstruct .

 */
public Parser()
{
  //nothing to do
}


/**
 * Create a parser, setting the debug to true or false.
 * @param debugMe true for debugging, false for no debug.
 */
public Parser(boolean debugMe)
{
  yydebug=debugMe;
}
//###############################################################



}
//################### END OF CLASS ##############################
