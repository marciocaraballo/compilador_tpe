//### This file created by BYACC 1.8(/Java extension  1.15)
//### Java capabilities added 7 Jan 97, Bob Jamison
//### Updated : 27 Nov 97  -- Bob Jamison, Joe Nieten
//###           01 Jan 98  -- Bob Jamison -- fixed generic semantic constructor
//###           01 Jun 99  -- Bob Jamison -- added Runnable support
//###           06 Aug 00  -- Bob Jamison -- made state variables class-global
//###           03 Jan 01  -- Bob Jamison -- improved flags, tracing
//###           16 May 01  -- Bob Jamison -- added custom stack sizing
//###           04 Mar 02  -- Yuval Oren  -- improved java performance, added options
//###           14 Mar 02  -- Tomas Hurka -- -d support, static initializer workaround
//### Please send bug reports to tom@hukatronic.cz
//### static char yysccsid[] = "@(#)yaccpar	1.8 (Berkeley) 01/20/90";






//#line 2 ".\gramatica.y"
package compilador;
import java.io.File;
import java.util.ArrayList;
import java.util.Iterator;
//#line 22 "Parser.java"




public class Parser
{

boolean yydebug;        //do I want debug output?
int yynerrs;            //number of errors so far
int yyerrflag;          //was there an error?
int yychar;             //the current working character

//########## MESSAGES ##########
//###############################################################
// method: debug
//###############################################################
void debug(String msg)
{
  if (yydebug)
    System.out.println(msg);
}

//########## STATE STACK ##########
final static int YYSTACKSIZE = 500;  //maximum stack size
int statestk[] = new int[YYSTACKSIZE]; //state stack
int stateptr;
int stateptrmax;                     //highest index of stackptr
int statemax;                        //state when highest index reached
//###############################################################
// methods: state stack push,pop,drop,peek
//###############################################################
final void state_push(int state)
{
  try {
		stateptr++;
		statestk[stateptr]=state;
	 }
	 catch (ArrayIndexOutOfBoundsException e) {
     int oldsize = statestk.length;
     int newsize = oldsize * 2;
     int[] newstack = new int[newsize];
     System.arraycopy(statestk,0,newstack,0,oldsize);
     statestk = newstack;
     statestk[stateptr]=state;
  }
}
final int state_pop()
{
  return statestk[stateptr--];
}
final void state_drop(int cnt)
{
  stateptr -= cnt; 
}
final int state_peek(int relative)
{
  return statestk[stateptr-relative];
}
//###############################################################
// method: init_stacks : allocate and prepare stacks
//###############################################################
final boolean init_stacks()
{
  stateptr = -1;
  val_init();
  return true;
}
//###############################################################
// method: dump_stacks : show n levels of the stacks
//###############################################################
void dump_stacks(int count)
{
int i;
  System.out.println("=index==state====value=     s:"+stateptr+"  v:"+valptr);
  for (i=0;i<count;i++)
    System.out.println(" "+i+"    "+statestk[i]+"      "+valstk[i]);
  System.out.println("======================");
}


//########## SEMANTIC VALUES ##########
//public class ParserVal is defined in ParserVal.java


String   yytext;//user variable to return contextual strings
ParserVal yyval; //used to return semantic vals from action routines
ParserVal yylval;//the 'lval' (result) I got from yylex()
ParserVal valstk[];
int valptr;
//###############################################################
// methods: value stack push,pop,drop,peek.
//###############################################################
void val_init()
{
  valstk=new ParserVal[YYSTACKSIZE];
  yyval=new ParserVal();
  yylval=new ParserVal();
  valptr=-1;
}
void val_push(ParserVal val)
{
  if (valptr>=YYSTACKSIZE)
    return;
  valstk[++valptr]=val;
}
ParserVal val_pop()
{
  if (valptr<0)
    return new ParserVal();
  return valstk[valptr--];
}
void val_drop(int cnt)
{
int ptr;
  ptr=valptr-cnt;
  if (ptr<0)
    return;
  valptr = ptr;
}
ParserVal val_peek(int relative)
{
int ptr;
  ptr=valptr-relative;
  if (ptr<0)
    return new ParserVal();
  return valstk[ptr];
}
final ParserVal dup_yyval(ParserVal val)
{
  ParserVal dup = new ParserVal();
  dup.ival = val.ival;
  dup.dval = val.dval;
  dup.sval = val.sval;
  dup.obj = val.obj;
  return dup;
}
//#### end semantic value section ####
public final static short ID=257;
public final static short CTE=258;
public final static short CADENA=259;
public final static short IF=260;
public final static short THEN=261;
public final static short ELSE=262;
public final static short ENDIF=263;
public final static short OUT=264;
public final static short FUN=265;
public final static short RETURN=266;
public final static short BREAK=267;
public final static short ASIGNACION=268;
public final static short COMP_MAYOR_IGUAL=269;
public final static short COMP_MENOR_IGUAL=270;
public final static short COMP_DISTINTO=271;
public final static short WHEN=272;
public final static short DO=273;
public final static short UNTIL=274;
public final static short CONTINUE=275;
public final static short DOUBLE64=276;
public final static short UINT16=277;
public final static short DEFER=278;
public final static short CONST=279;
public final static short YYERRCODE=256;
final static short yylhs[] = {                           -1,
    0,    0,    0,    0,    0,    0,    1,    2,    2,    3,
    3,    4,    4,    4,    4,    6,    6,    6,    6,   11,
   11,    7,    7,    7,   14,   14,   15,   15,   16,   16,
   16,   16,   16,   16,   16,   16,   16,   16,   22,   22,
    8,    8,   23,   23,   23,   23,   23,   23,   23,   23,
   23,   23,   23,   23,   23,   23,   25,   25,   25,   21,
   21,   21,   21,   21,   21,   21,   21,   21,   21,   21,
   21,   21,   21,   19,   19,   19,   19,   19,   19,   19,
   19,   19,   19,   20,   20,   20,   20,   26,   26,   26,
   26,   26,   26,   26,   26,   26,   26,   26,   26,   26,
   28,   28,   29,   29,   29,   12,   12,   12,   12,   12,
   12,   12,   12,   12,   12,   12,   13,   13,   13,   13,
   13,   32,   32,   32,   35,   35,   34,   34,   36,   34,
    9,    9,    9,   37,   37,   38,   38,   38,   38,   38,
    5,    5,    5,    5,    5,    5,    5,    5,    5,    5,
   42,   42,   42,   30,   30,   30,   30,   30,   31,   31,
   41,   41,   44,   43,   43,   45,   27,   46,   46,   46,
   46,   47,   47,   17,   17,   17,   17,   17,   40,   40,
   40,   40,   40,   48,   48,   39,   39,   39,   39,   39,
   39,   39,   39,   51,   51,   51,   51,   51,   52,   52,
   49,   50,   24,   24,   24,   24,   24,   24,   53,   53,
   53,   53,   53,   53,   33,   33,   33,   54,   54,   54,
   55,   55,   55,   57,   57,   58,   58,   59,   59,   18,
   18,   18,   18,   18,   18,   18,   18,   18,   56,   56,
   10,   10,
};
final static short yylen[] = {                            2,
    4,    3,    3,    3,    3,    0,    1,    1,    2,    1,
    1,    1,    1,    1,    1,    3,    2,    2,    2,    3,
    1,    4,    5,    3,    1,    2,    1,    1,    1,    2,
    1,    2,    1,    2,    1,    2,    1,    2,    1,    2,
    4,    5,    8,   11,   11,   11,   11,   14,   14,    7,
   10,   10,   10,   10,   13,   13,    1,    1,    2,    6,
    6,    6,    9,    9,   13,   11,   11,   13,   13,   13,
   11,   11,   12,    7,    8,    8,    6,    7,    7,    6,
    6,    7,    7,    5,    7,    4,    6,    1,    1,    1,
    4,    4,    3,    2,    3,    3,    3,    3,    2,    2,
    1,    2,    1,    1,    1,    6,    7,    6,    5,    5,
    5,    5,    6,    6,    6,    6,    5,    4,    3,    3,
    4,    1,    3,    5,    1,    3,    2,    1,    0,    2,
    3,    2,    2,    1,    3,    3,    2,    2,    1,    3,
    1,    2,    1,    2,    1,    2,    1,    2,    1,    2,
    1,    1,    1,    2,    4,    1,    3,    3,    2,    1,
    1,    3,    1,    5,    4,    1,    1,    1,    3,    2,
    2,    1,    2,    4,    3,    3,    4,    3,    7,    6,
    6,    5,    4,    1,    2,    6,    8,    5,    7,    5,
    5,    7,    6,    1,    3,    2,    2,    2,    1,    2,
    1,    1,    5,    4,    4,    4,    4,    2,    1,    1,
    1,    1,    1,    1,    3,    3,    1,    3,    3,    1,
    1,    1,    1,    3,    4,    1,    3,    1,    1,    5,
    5,    4,    4,    4,    4,    4,    4,    4,    1,    2,
    1,    1,
};
final static short yydefred[] = {                         0,
    7,    0,    0,    0,    0,    0,    0,    0,    0,  166,
  242,  241,    0,    0,    0,    8,   10,   11,   12,   13,
   14,   15,    0,    0,    0,  141,  145,  163,  143,  147,
  149,  161,    0,    0,    0,    0,    0,    0,    0,    0,
  239,    0,    0,    0,    0,    0,  220,  222,  223,    0,
    0,    0,    0,    0,    0,    0,  142,  146,  144,  148,
  150,    0,  133,    0,    0,    2,    9,    0,   19,    0,
   18,    0,    0,    0,    0,    0,  151,  152,  153,    0,
    0,    0,    5,    0,    3,  175,    0,   20,    0,    0,
  240,  209,  210,  211,  208,  214,  212,  213,    0,    0,
    0,    0,    0,    0,  201,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,  138,    0,    0,  131,
    0,   16,    0,    0,    0,    0,    0,   24,   27,    0,
    0,   25,   28,   29,   31,   33,   35,   37,    0,    0,
  162,  154,    0,  159,  172,    0,    0,  171,  173,    1,
  174,  177,  228,  224,  229,    0,  226,    0,    0,    0,
    0,    0,  196,  199,    0,    0,    0,  198,  200,    0,
    0,    0,  218,  219,  235,  233,  236,    0,  234,    0,
  232,    0,    0,    0,    0,  127,    0,    0,  130,    0,
    0,    0,  183,    0,    0,  136,  140,  135,    0,    0,
    0,    0,    0,   88,  103,   89,    0,    0,  101,  104,
  105,    0,   30,   32,   34,   36,   38,   22,    0,   26,
    0,   41,    0,  167,  158,    0,  169,    0,    0,  225,
  204,    0,  205,    0,  190,    0,    0,  195,    0,  202,
  191,  206,  231,  230,  112,    0,    0,    0,  111,    0,
    0,  110,    0,    0,  185,    0,    0,    0,    0,  119,
    0,    0,   94,    0,    0,  100,    0,    0,  102,    0,
   23,   42,    0,  155,  164,  227,  203,  193,    0,  186,
    0,  106,  116,    0,  108,  115,    0,  114,    0,  180,
    0,    0,    0,    0,    0,    0,  121,    0,    0,    0,
   93,    0,    0,    0,   96,   98,    0,    0,    0,  192,
  107,    0,  124,  179,   59,   39,    0,    0,    0,    0,
    0,    0,  117,    0,    0,    0,    0,    0,    0,   91,
   92,   84,    0,    0,    0,    0,  187,    0,    0,    0,
   40,    0,   60,    0,   62,   61,    0,    0,   57,   58,
    0,   80,    0,    0,    0,    0,   81,    0,    0,    0,
    0,  126,    0,    0,    0,    0,    0,    0,   74,    0,
    0,    0,   82,   83,    0,    0,   85,    0,    0,    0,
    0,    0,    0,    0,    0,    0,   43,   75,   76,    0,
    0,    0,    0,    0,    0,    0,   63,    0,    0,    0,
   64,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
   66,   44,    0,    0,   67,   45,   71,   72,   46,   47,
    0,    0,    0,    0,   73,    0,    0,    0,    0,    0,
    0,    0,    0,   69,   70,   65,    0,   68,    0,    0,
    0,   48,   49,    0,    0,
};
final static short yydgoto[] = {                          3,
    4,   15,   16,   17,   18,   19,   20,   21,   22,   23,
   24,   25,  359,  141,  142,  326,  144,  145,  146,  147,
  148,  327,  360,   44,  306,  217,  150,  218,  219,  220,
  221,  120,   45,  121,  323,  122,   64,   65,   29,   30,
   31,  159,   32,   33,   34,   81,   82,  205,  104,  249,
  105,  106,  100,   46,   47,   48,   49,  166,  167,
};
final static short yysindex[] = {                       -89,
    0, 1624,    0,  642,  -30,    4,  -29,  -10,    4,    0,
    0,    0,   68,  -36, 1187,    0,    0,    0,    0,    0,
    0,    0,  -13,   24,  -62,    0,    0,    0,    0,    0,
    0,    0,   36,  892, 1212, 1239,   39, -194,  -33,   31,
    0, -151,   13,  -90,  -35,   23,    0,    0,    0,   72,
   74,  -40,  -34,  -24,  -99,  -41,    0,    0,    0,    0,
    0,  -42,    0,   83,   87,    0,    0,   90,    0,   86,
    0, 1159, -125,   94,   99, -143,    0,    0,    0,    0,
 -114, 1418,    0, 1249,    0,    0,   57,    0,  309,   35,
    0,    0,    0,    0,    0,    0,    0,    0,  -35,  -33,
  915, 1527,    0,   80,    0, 1544,  -33,  -33,  -33,  -33,
  -33,  119,  133,   -3,   -2,  135,  -37,  139,  -58,  163,
  162,  -47,  175,  213,  134, 1276,    0,    9,   22,    0,
   28,    0,    4,    7,    4,  864,  148,    0,    0,  166,
 1598,    0,    0,    0,    0,    0,    0,    0,  188,  229,
    0,    0,   -8,    0,    0, 1435,    4,    0,    0,    0,
    0,    0,    0,    0,    0,    1,    0,   52,  342,   37,
  235,   97,    0,    0, 1554,   42,  244,    0,    0,   23,
   23,  343,    0,    0,    0,    0,    0,  259,    0,  274,
    0,  123,  278,    2,  123,    0,  290,  123,    0,  123,
  305, 1624,    0, 1624,  240,    0,    0,    0,  109,   54,
  352,  -68, 1457,    0,    0,    0,  120, 1362,    0,    0,
    0,    4,    0,    0,    0,    0,    0,    0,  271,    0,
  285,    0,  144,    0,    0,  360,    0,  363,   17,    0,
    0,  370,    0,  371,    0,   42,  390,    0,  170,    0,
    0,    0,    0,    0,    0,  123,  123,  -17,    0,  123,
  407,    0,  123,  332,    0,  408,  934,  415,  373,    0,
  361, 1634,    0, 1382,    4,    0,  358,  365,    0,  230,
    0,    0,  864,    0,    0,    0,    0,    0,  236,    0,
  433,    0,    0,  123,    0,    0,  123,    0,  447,    0,
  640, -117,  245,  173,  246,  251,    0,  448, 1301,   12,
    0,  389,  393,  466,    0,    0,  961,  255,  469,    0,
    0,  486,    0,    0,    0,    0, 1278,  472,  414,  487,
  488,  -94,    0,  499,   29,    4,  501,  436,  437,    0,
    0,    0, -117,  245,  246,    4,    0,  123,  303,  442,
    0,  444,    0, -117,    0,    0,  311, -117,    0,    0,
  319,    0,  539,  489,  500,  350,    0,  554,  565, 1278,
  567,    0,  514,  178,  180, 1660, 1660,  579,    0,  588,
  590,  -91,    0,    0,  523,  525,    0, -117,  984,  600,
 1004,  602,  537,  538,  543,  552,    0,    0,    0, -117,
  182,  184, 1486, -117,  401,  427,    0, -117,  430,  439,
    0,  452,  453,  455,  465, 1660,  754, 1015,  477,  618,
  621, 1505,  694,  695, 1516,  696,  697,  707,  709,  710,
  720,  655,  656, -117, -117,  732,  530,  531,  555,  681,
    0,    0,  556,  698,    0,    0,    0,    0,    0,    0,
  558,  560, 1564, 1581,    0,  773,  774,  775,  572,  788,
  585,  -75,  -70,    0,    0,    0,  791,    0,  796, -117,
 -117,    0,    0, 1670, 1670,
};
final static short yyrindex[] = {                       857,
    0,    0,    0,    0,  403,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,  330,
    0,    0,    0,    0,    0,  409,    0,    0,    0,    0,
    0,    0,  601,  601,    0,  812,    0,    0,    0,    0,
    0,  771,    0,  692,  719,    0,    0,  744,    0,  825,
    0,    0,    0,  306, 1324,    0,    0,    0,    0, 1399,
    0,    0,    0,  859,    0,    0,  276,    0,  355,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0, 1476,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,  601,    0,   45,    0,
   65,    0,    0,    0,    0,    0,    0,  801,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,  597,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,  210,    0,    0,    0,    0,  434,
  460,    0,    0,    0,    0,    0,    0,  485,    0,  510,
    0,    0,    0,    0,    0,    0,    0,  601,    0,    0,
    0,    0,    0,  747,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,  608,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0, 1343,    0,  535,    0,    0,
    0,  379,    0,    0,    0,    0,  564,    0,    0,    0,
    0,    0,    0,    0,    0,  751,    0,    0,    0,    0,
   67,    0,    0,    0,    0,  589,    0,    0,  202,    0,
    0,    0,    0,  610,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,  752,    0,    0,  601,    0,  616,    0,
    0,    0,  623,    0,  624,    0,    0,  226,    0,    0,
    0,  613,  627, 1032,    0,    0,    0,    0,  665,    0,
    0,   81,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,  601,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0, 1057,    0,    0,    0,    0,    0,    0,    0,
 1083,    0,    0,    0,    0,    0,    0,  249,    0, 1106,
 1133,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,  253,    0,    0,  282,    0,    0,  312,
  314,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,  542,    0,  671,    0,
    0,    0,    0,    0,    0,
};
final static short yygindex[] = {                         0,
    0,   33,  254,  -63,  969,    0,    0,    0,    0,  169,
   43,    0,  -54,    0, -136,  -72,   75,  322, -122, -121,
 -115, 1452,  -69,   -7,  721,  615, 1079,  703, -182,   51,
   62,  -26,  866, -185,  562,    0,  777,    0,  898,  904,
  910,   25,  851,    0,    0,    0,  855,  -84,  834,  690,
 -141,  844,    5,  374,  376,  -50,    0,    0,  708,
};
final static int YYTABLESIZE=1948;
static short yytable[];
static { yytable();}
static void yytable(){
yytable = new short[]{                        143,
  116,   55,  149,  193,  230,  117,  118,  107,  139,  108,
   52,   42,  261,   38,  225,  226,  123,  140,  129,   39,
  192,  227,   63,  126,   98,   96,   97,  124,  358,   54,
   39,  400,  102,    2,  250,  279,   36,  188,  190,  165,
  294,  240,  258,   43,  239,   69,  210,  470,   42,  109,
  235,   42,  471,   95,  272,  187,  189,   42,   80,  257,
   72,   42,   68,  215,  110,   70,  216,   84,  143,  111,
   90,  231,   98,   96,   97,  164,   26,  139,   26,   42,
   88,  214,   71,   42,   78,  128,  229,   57,  128,   26,
  194,  279,  241,   73,  268,   79,   42,   86,   42,  107,
  155,  108,  128,  168,  250,  122,   91,  123,   26,   26,
   26,  322,  112,   56,  113,  161,    6,  264,   26,  265,
    7,  125,  122,   74,  123,  209,   78,  212,    9,   10,
  131,   75,   78,   38,   13,  310,  337,   79,  125,   56,
  215,  130,  222,   79,  132,  215,    7,   10,  278,  238,
   26,  153,  152,  363,  135,  136,   26,  154,   26,  157,
  137,  125,  322,  277,  102,  336,   56,    1,  336,    6,
  101,  134,  335,    7,  134,   26,   26,  185,  225,  226,
   26,    9,   10,  357,  336,  227,  357,   13,  165,  336,
  134,  186,  271,  191,  304,  134,  195,  305,  196,  143,
   26,  215,  357,  197,  313,  198,   78,  357,  139,  199,
  215,  223,  303,  216,  280,  127,  114,   79,  115,  312,
   62,  119,  119,   40,   41,  128,   37,   50,  214,   51,
   26,  325,  200,   92,   93,   94,  143,   37,   11,   12,
  339,   11,   12,   68,  304,  139,   53,  345,  234,   26,
   26,   11,   12,  201,  351,  338,  202,  352,   11,   12,
   40,   41,  344,   40,   41,  365,  206,  314,   67,   40,
   41,  336,  350,  163,   41,  176,   26,  134,   26,  207,
  364,   92,   93,   94,   62,  119,  233,  325,  336,   67,
  228,  163,   41,  245,  134,   40,   41,  351,   56,  244,
  386,    6,  251,  351,  351,    7,  394,  396,   40,   41,
   40,   41,  232,    9,   10,  385,  405,  253,  409,   13,
   26,  393,  395,   27,   56,   27,  120,    6,  366,  221,
  351,    7,  254,  421,   58,  256,   27,   67,  371,    9,
   10,  176,  177,  351,  405,  409,  433,  260,  420,  351,
  118,  107,  351,  108,  178,   27,   27,   27,  246,  247,
  255,  432,  263,  259,  266,   27,  119,  162,  262,  267,
  221,  221,  221,   50,  221,  223,  221,   51,  207,  204,
  351,  351,  243,  252,  107,  107,  108,  108,  221,  221,
  221,  221,  270,  275,  107,  281,  108,   27,   11,   12,
  176,  351,  351,   27,   56,   27,   52,  222,  217,  282,
  287,    7,  107,  308,  108,  107,  283,  108,  284,  135,
  136,  285,   27,   27,  292,  293,  295,   27,  296,  288,
  156,  298,  291,  215,  329,  330,   53,  207,   54,  389,
  390,  391,  392,  417,  390,  418,  392,   27,  290,  217,
  297,  217,  221,  217,  221,  204,  299,  204,  224,  216,
  167,   21,  321,  120,  120,  119,  300,  217,  217,  217,
  217,  197,  197,  307,  215,  120,  215,   27,  215,  178,
  180,  181,  315,  309,  238,  183,  184,  118,  118,  316,
  317,  320,  215,  215,  215,  215,   27,   27,  319,  118,
  216,  207,  216,  207,  216,  324,  333,  328,  331,  237,
   50,   50,  332,  340,   51,   51,  119,  341,  216,  216,
  216,  216,   50,   27,  342,   27,   51,  347,  346,  348,
  353,  217,  176,  217,  165,  176,  354,  176,  176,  176,
  176,  176,  176,   52,   52,  355,  356,  176,  176,  176,
  176,  176,  176,  176,  176,   52,  215,  362,  215,  367,
  368,  369,  156,  188,  373,  156,  374,   27,  375,  156,
  336,  156,  156,   53,   53,   54,   54,  156,  156,  156,
  156,  378,  216,  156,  216,   53,  221,   54,  182,  221,
  221,  221,  221,  221,  221,  221,  221,  379,  221,  221,
  221,  221,  221,  221,  221,  221,  221,  221,  221,  238,
  382,  178,  383,  380,  178,  181,  178,  178,  178,  178,
  178,  178,  224,  384,  381,  387,  178,  178,  178,  178,
  178,  178,  178,  178,  237,  207,  388,  397,  207,  207,
  207,  207,  207,  207,  207,  207,  398,  401,  399,  402,
  207,  207,  207,  207,  207,  207,  207,  207,  407,  165,
  411,  412,  413,  423,  189,  217,   55,  414,  217,  217,
  217,  217,  217,  217,  217,  217,  415,  217,  217,  217,
  217,  217,  217,  217,  217,  217,  217,  217,  188,  424,
  215,  132,  426,  215,  215,  215,  215,  215,  215,  215,
  215,  427,  215,  215,  215,  215,  215,  215,  215,  215,
  215,  215,  215,  182,  428,  429,  216,  430,  134,  216,
  216,  216,  216,  216,  216,  216,  216,  431,  216,  216,
  216,  216,  216,  216,  216,  216,  216,  216,  216,  436,
  181,  238,  437,   21,  238,  438,  238,  238,  238,  238,
  238,  238,  441,  442,  445,  446,  238,  238,  238,  238,
  238,  238,  238,  238,   35,  447,  237,  448,  449,  237,
  139,  237,  237,  237,  237,  237,  237,  134,  450,  451,
  452,  237,  237,  237,  237,  237,  237,  237,  237,  189,
  455,  165,  456,  457,  165,   56,  165,  165,  165,  165,
  137,  165,   21,   55,   55,  459,  165,  165,  165,  165,
  165,  165,  165,  165,  139,   55,  132,  458,  460,  462,
  188,  463,  461,  188,   17,  188,  188,  188,  188,  139,
  188,  464,  465,  466,  467,  188,  188,  188,  188,  188,
  188,  188,  188,  134,  137,  182,  468,  469,  182,  472,
  182,  182,  182,  182,  473,  182,    6,  129,    4,  137,
  182,  182,  182,  182,  182,  182,  182,  182,   21,  167,
  170,  184,  181,  109,  113,  181,  434,  181,  181,  181,
  181,   90,  181,   99,   57,   58,   95,  181,  181,  181,
  181,  181,  181,  181,  181,  139,   56,  318,    5,  133,
   97,    6,   87,    7,   89,    7,    8,  208,   99,  372,
   59,  135,  136,    9,   10,  274,   60,   11,   12,   13,
   14,  189,   61,  151,  189,  137,  189,  189,  189,  189,
  156,  189,   56,   56,  172,  289,  189,  189,  189,  189,
  189,  189,  189,  189,   56,  175,  286,    0,  132,   17,
    0,  132,    0,    0,    0,  132,  132,  132,    0,    0,
    0,    0,    0,  132,  132,  169,    0,  132,  132,  132,
  132,    0,    0,    0,  182,  134,    0,    0,  134,    0,
    0,    0,  134,  134,  134,    0,  213,    0,    0,    0,
  134,  134,    0,    0,  134,  134,  134,  134,    0,  211,
   21,    0,   77,   21,    0,    0,    0,   21,   21,   21,
   56,    0,  103,  222,   76,   21,   21,    7,    0,   21,
   21,   21,   21,    0,    0,  135,  136,  139,    0,    0,
  139,  137,    0,  242,  139,  139,  139,  102,    0,    0,
    0,    0,  139,  139,   77,    0,  139,  139,  139,  139,
   77,    0,  361,    0,    0,    0,  302,  137,    0,    0,
  137,    0,    0,    0,  137,  137,  137,    0,    0,  103,
  174,    0,  137,  137,  179,  269,  137,  137,  137,  137,
   28,   17,   28,  343,   17,    0,    0,    0,   17,   17,
   17,   28,    0,   28,    0,    0,   17,   17,    0,    0,
   17,   17,   17,   17,    0,    0,  404,    0,    0,  406,
    0,  410,   28,   28,   28,    0,    0,    0,    0,    0,
   56,    0,   28,  133,   77,    0,  408,    7,    0,  134,
   74,    0,    0,    0,    0,  135,  136,  435,   75,    0,
    0,  137,  440,  179,  103,  444,    0,    0,   56,    0,
    0,    6,    0,    0,   28,    7,   86,    0,   74,    0,
   28,    0,   28,    9,   10,    0,   75,    0,    0,   13,
    0,   56,    0,    0,    6,    0,  170,  171,    7,   28,
   28,   77,  406,  410,   28,    0,    9,   10,    0,    0,
   56,    0,   13,  133,  440,  444,    0,    7,    0,  134,
    0,    0,    0,    0,   28,  135,  136,   87,    0,    0,
    0,  301,    0,    0,  103,    0,    0,   56,    0,    0,
  133,    0,    0,    0,    7,    0,  134,    0,    0,    0,
   78,  236,  135,  136,   28,    0,    0,    0,  137,    0,
   56,    0,    0,  133,    0,    0,    0,    7,    0,  134,
    0,    0,    0,   28,   28,  135,  136,   79,    0,    0,
   56,  301,    0,  133,    0,    0,    0,    7,    0,  134,
    0,   56,    0,    0,  222,  135,  136,    0,    7,    0,
   28,  301,   28,  138,    0,    0,  135,  136,   86,    0,
    0,   86,  137,   86,   86,   86,   86,   86,   86,    0,
    0,    0,    0,   86,   86,   86,   86,   86,   86,   86,
   86,   66,    0,   77,    0,    0,   77,    0,   77,   77,
   77,   77,   77,   77,   28,    0,    0,    0,   77,   77,
   77,   77,   77,   77,   77,   77,   83,    0,    0,   87,
    0,    0,   87,    0,   87,   87,   87,   87,   87,   87,
    0,    0,    0,    0,   87,   87,   87,   87,   87,   87,
   87,   87,   78,   85,    0,   78,    0,   78,   78,   78,
   78,   78,   78,  160,    0,    0,    0,   78,   78,   78,
   78,   78,   78,   78,   78,    0,    0,    0,    0,   79,
    0,    0,   79,    0,   79,   79,   79,   79,   79,   79,
  203,    0,  349,    0,   79,   79,   79,   79,   79,   79,
   79,   79,    0,    0,    0,    5,    0,    0,  133,    0,
    0,    0,    7,    8,  134,  334,    0,    0,    0,    0,
  135,  136,    0,    0,   11,   12,  137,   14,    0,    0,
    0,    0,    0,    5,    0,    0,    6,    0,  160,    0,
    7,    8,    0,    0,    0,    0,    0,    0,    9,   10,
    0,    0,   11,   12,   13,   14,    0,  157,    5,    0,
    0,    6,    0,    0,    0,    7,    8,    0,    0,    0,
    0,    0,    0,    9,   10,    0,  276,   11,   12,   13,
   14,    0,    0,    0,    0,    5,    0,    0,    6,    0,
    0,    0,    7,    8,    0,    5,  311,    0,    6,    0,
    9,   10,    7,    8,   11,   12,   13,   14,    0,    0,
    9,   10,    0,  172,   11,   12,   13,   14,    0,    0,
    0,    0,    5,    0,   56,    6,    0,  133,    0,    7,
    8,    7,  158,  134,    0,    0,    0,    9,   10,  135,
  136,   11,   12,   13,   14,  137,    0,    5,    0,  237,
  222,    0,    0,    0,    7,    8,    0,    0,    0,    0,
    0,    0,  135,  136,    0,    0,   11,   12,  137,   14,
  160,  273,    0,  160,    0,    0,    0,  160,    0,  160,
  160,    0,    0,    0,    0,  160,  160,  160,  160,  157,
  199,  160,  157,    0,    0,    0,  157,    0,  157,  157,
  419,    0,    0,    0,  157,  157,  157,  157,   56,    0,
  157,  133,    0,    0,    0,    7,    0,  134,   74,  439,
    0,    0,    0,  135,  136,    0,   75,    0,   56,  137,
  443,  133,    0,    0,    0,    7,    0,  134,   74,    0,
    0,  173,    0,  135,  136,  172,   75,    0,  172,  137,
    0,    0,  172,    0,    0,  172,    0,    0,  178,    0,
  172,  172,  168,  172,   56,    0,  172,    6,  248,    0,
    0,    7,    0,    0,   74,    0,    0,    0,  439,    9,
   10,   56,   75,    0,    6,   13,    0,    0,    7,    0,
    0,   74,    0,    0,    0,  443,    9,   10,    0,   75,
    0,    0,   13,   56,    0,    0,  222,    0,    0,    0,
    7,    0,    0,   74,    0,    0,    0,    0,  135,  136,
    0,   75,  199,    0,  137,  199,    0,  194,  194,  199,
    0,    0,   56,    0,    0,  133,    0,  199,  199,    7,
    0,  134,    0,  199,    0,    0,    0,  135,  136,    0,
    0,   56,    0,  137,  133,    0,    0,    0,    7,    0,
  134,    0,   56,    0,    0,  133,  135,  136,    0,    7,
    0,  134,  301,   56,    0,    0,    6,  135,  136,    0,
    7,    0,    0,  301,  370,    0,    0,    0,    9,   10,
   56,    0,    0,    6,   13,  376,    0,    7,    0,  377,
   56,    0,    0,    6,    0,    9,   10,    7,    0,    0,
   56,   13,    0,  222,    0,    9,   10,    7,    0,    0,
    0,   13,    0,    0,    0,  135,  136,   56,    0,  403,
  222,  137,    0,    0,    7,    0,    0,    0,    0,    0,
    0,  416,  135,  136,    5,  422,    0,  133,  137,  425,
    0,    7,    8,  134,    0,    0,    0,    0,    0,  135,
  136,    0,    0,   11,   12,  137,   14,    0,    0,    0,
    5,    0,    0,    6,    0,  453,  454,    7,    8,    0,
    5,    0,    0,  222,    0,    9,   10,    7,    8,   11,
   12,   13,   14,    0,    0,  135,  136,    0,    0,   11,
   12,  137,   14,    0,    0,    0,   56,    0,    0,  133,
    0,  474,  475,    7,    0,  134,   56,    0,    0,  133,
    0,  135,  136,    7,    0,  134,    0,  137,    0,    0,
    0,  135,  136,    0,    0,    0,    0,  301,
};
}
static short yycheck[];
static { yycheck(); }
static void yycheck() {
yycheck = new short[] {                         72,
   41,    9,   72,   41,  141,   40,   41,   43,   72,   45,
   40,   45,  198,   44,  137,  137,   41,   72,   61,   61,
   58,  137,   59,  123,   60,   61,   62,   54,  123,   40,
   61,  123,  123,  123,  176,  218,    4,   41,   41,   90,
   58,   41,   41,   40,   44,   59,   40,  123,   45,   45,
   59,   45,  123,   41,  123,   59,   59,   45,   34,   58,
  123,   45,  257,  136,   42,   23,  136,   35,  141,   47,
   40,  141,   60,   61,   62,   41,    2,  141,    4,   45,
   38,  136,   59,   45,   34,   41,  141,   13,   44,   15,
  117,  274,   41,   58,   41,   34,   45,   59,   45,   43,
   76,   45,   58,   99,  246,   41,  258,   41,   34,   35,
   36,  297,   41,  257,   41,   59,  260,  202,   44,  204,
  264,   41,   58,  267,   58,  133,   76,  135,  272,  273,
   44,  275,   82,   44,  278,  272,  125,   76,   58,  257,
  213,   59,  260,   82,   59,  218,  264,  273,  218,  157,
   76,   58,   59,  125,  272,  273,   82,   59,   84,  274,
  278,  261,  348,  218,  123,  260,  257,  257,  260,  260,
  261,  266,  309,  264,  266,  101,  102,   59,  301,  301,
  106,  272,  273,  278,  260,  301,  278,  278,  239,  260,
  266,   59,  261,   59,  267,  266,   58,  267,  257,  272,
  126,  274,  278,   41,  274,   44,  156,  278,  272,  257,
  283,  137,  267,  283,  222,  258,  257,  156,  259,  274,
  257,   53,   54,  257,  258,  268,  268,  257,  283,  259,
  156,  301,   58,  269,  270,  271,  309,  268,  276,  277,
  310,  276,  277,  257,  317,  309,  257,  317,  257,  175,
  176,  276,  277,   41,  327,  310,  123,  327,  276,  277,
  257,  258,  317,  257,  258,  335,  258,  275,   15,  257,
  258,  260,  327,  257,  258,    0,  202,  266,  204,  258,
  335,  269,  270,  271,  257,  117,   58,  357,  260,   36,
  125,  257,  258,   59,  266,  257,  258,  370,  257,  263,
  370,  260,   59,  376,  377,  264,  376,  377,  257,  258,
  257,  258,  125,  272,  273,  370,  389,   59,  391,  278,
  246,  376,  377,    2,  257,    4,  125,  260,  336,    0,
  403,  264,   59,  403,   13,   58,   15,   84,  346,  272,
  273,  262,  263,  416,  417,  418,  416,   58,  403,  422,
  125,   43,  425,   45,    0,   34,   35,   36,  262,  263,
  192,  416,   58,  195,  125,   44,  198,   59,  200,  261,
   41,   42,   43,  125,   45,  301,   47,  125,    0,  126,
  453,  454,   41,   41,   43,   43,   45,   45,   59,   60,
   61,   62,   41,  274,   43,  125,   45,   76,  276,  277,
  125,  474,  475,   82,  257,   84,  125,  260,    0,  125,
   41,  264,   43,   41,   45,   43,  273,   45,   59,  272,
  273,   59,  101,  102,  256,  257,  258,  106,  260,   59,
  125,  263,  263,    0,  262,  263,  125,   59,  125,  262,
  263,  262,  263,  262,  263,  262,  263,  126,   59,   41,
   44,   43,  123,   45,  125,  202,  125,  204,  137,    0,
   58,   59,  294,  262,  263,  297,   59,   59,   60,   61,
   62,  262,  263,   59,   41,  274,   43,  156,   45,  125,
  107,  108,  125,  123,    0,  110,  111,  262,  263,  125,
  261,   59,   59,   60,   61,   62,  175,  176,  263,  274,
   41,  123,   43,  125,   45,   59,   59,  263,  263,    0,
  262,  263,  262,  125,  262,  263,  348,  125,   59,   60,
   61,   62,  274,  202,   59,  204,  274,   59,  274,   44,
   59,  123,  257,  125,    0,  260,  123,  262,  263,  264,
  265,  266,  267,  262,  263,   59,   59,  272,  273,  274,
  275,  276,  277,  278,  279,  274,  123,   59,  125,   59,
  125,  125,  257,    0,  262,  260,  125,  246,  125,  264,
  260,  266,  267,  262,  263,  262,  263,  272,  273,  274,
  275,  263,  123,  278,  125,  274,  257,  274,    0,  260,
  261,  262,  263,  264,  265,  266,  267,   59,  269,  270,
  271,  272,  273,  274,  275,  276,  277,  278,  279,  125,
  261,  257,   59,  125,  260,    0,  262,  263,  264,  265,
  266,  267,  301,   59,  125,   59,  272,  273,  274,  275,
  276,  277,  278,  279,  125,  257,  123,   59,  260,  261,
  262,  263,  264,  265,  266,  267,   59,  125,   59,  125,
  272,  273,  274,  275,  276,  277,  278,  279,   59,  125,
   59,  125,  125,  263,    0,  257,  125,  125,  260,  261,
  262,  263,  264,  265,  266,  267,  125,  269,  270,  271,
  272,  273,  274,  275,  276,  277,  278,  279,  125,  263,
  257,    0,  263,  260,  261,  262,  263,  264,  265,  266,
  267,  263,  269,  270,  271,  272,  273,  274,  275,  276,
  277,  278,  279,  125,  263,  263,  257,  263,    0,  260,
  261,  262,  263,  264,  265,  266,  267,  263,  269,  270,
  271,  272,  273,  274,  275,  276,  277,  278,  279,  263,
  125,  257,  125,    0,  260,  125,  262,  263,  264,  265,
  266,  267,   59,   59,   59,   59,  272,  273,  274,  275,
  276,  277,  278,  279,  123,   59,  257,   59,   59,  260,
    0,  262,  263,  264,  265,  266,  267,   59,   59,  125,
  125,  272,  273,  274,  275,  276,  277,  278,  279,  125,
   59,  257,  263,  263,  260,  125,  262,  263,  264,  265,
    0,  267,   59,  262,  263,  125,  272,  273,  274,  275,
  276,  277,  278,  279,   44,  274,  125,  263,  263,  262,
  257,  262,  125,  260,    0,  262,  263,  264,  265,   59,
  267,   59,   59,   59,  263,  272,  273,  274,  275,  276,
  277,  278,  279,  125,   44,  257,   59,  263,  260,   59,
  262,  263,  264,  265,   59,  267,    0,  257,    0,   59,
  272,  273,  274,  275,  276,  277,  278,  279,  125,   58,
  274,  125,  257,  123,  123,  260,  123,  262,  263,  264,
  265,  274,  267,  274,  262,  262,  274,  272,  273,  274,
  275,  276,  277,  278,  279,  125,  257,  283,  257,  260,
  274,  260,   37,  264,   39,  264,  265,  131,   43,  348,
   13,  272,  273,  272,  273,  213,   13,  276,  277,  278,
  279,  257,   13,   73,  260,  125,  262,  263,  264,  265,
   76,  267,  262,  263,  101,  246,  272,  273,  274,  275,
  276,  277,  278,  279,  274,  102,  239,   -1,  257,  125,
   -1,  260,   -1,   -1,   -1,  264,  265,  266,   -1,   -1,
   -1,   -1,   -1,  272,  273,  100,   -1,  276,  277,  278,
  279,   -1,   -1,   -1,  109,  257,   -1,   -1,  260,   -1,
   -1,   -1,  264,  265,  266,   -1,  123,   -1,   -1,   -1,
  272,  273,   -1,   -1,  276,  277,  278,  279,   -1,  134,
  257,   -1,   34,  260,   -1,   -1,   -1,  264,  265,  266,
  257,   -1,   44,  260,  123,  272,  273,  264,   -1,  276,
  277,  278,  279,   -1,   -1,  272,  273,  257,   -1,   -1,
  260,  278,   -1,  168,  264,  265,  266,  123,   -1,   -1,
   -1,   -1,  272,  273,   76,   -1,  276,  277,  278,  279,
   82,   -1,  332,   -1,   -1,   -1,  123,  257,   -1,   -1,
  260,   -1,   -1,   -1,  264,  265,  266,   -1,   -1,  101,
  102,   -1,  272,  273,  106,  210,  276,  277,  278,  279,
    2,  257,    4,  123,  260,   -1,   -1,   -1,  264,  265,
  266,   13,   -1,   15,   -1,   -1,  272,  273,   -1,   -1,
  276,  277,  278,  279,   -1,   -1,  123,   -1,   -1,  389,
   -1,  391,   34,   35,   36,   -1,   -1,   -1,   -1,   -1,
  257,   -1,   44,  260,  156,   -1,  123,  264,   -1,  266,
  267,   -1,   -1,   -1,   -1,  272,  273,  123,  275,   -1,
   -1,  278,  422,  175,  176,  425,   -1,   -1,  257,   -1,
   -1,  260,   -1,   -1,   76,  264,  125,   -1,  267,   -1,
   82,   -1,   84,  272,  273,   -1,  275,   -1,   -1,  278,
   -1,  257,   -1,   -1,  260,   -1,  262,  263,  264,  101,
  102,  125,  462,  463,  106,   -1,  272,  273,   -1,   -1,
  257,   -1,  278,  260,  474,  475,   -1,  264,   -1,  266,
   -1,   -1,   -1,   -1,  126,  272,  273,  125,   -1,   -1,
   -1,  278,   -1,   -1,  246,   -1,   -1,  257,   -1,   -1,
  260,   -1,   -1,   -1,  264,   -1,  266,   -1,   -1,   -1,
  125,  153,  272,  273,  156,   -1,   -1,   -1,  278,   -1,
  257,   -1,   -1,  260,   -1,   -1,   -1,  264,   -1,  266,
   -1,   -1,   -1,  175,  176,  272,  273,  125,   -1,   -1,
  257,  278,   -1,  260,   -1,   -1,   -1,  264,   -1,  266,
   -1,  257,   -1,   -1,  260,  272,  273,   -1,  264,   -1,
  202,  278,  204,  125,   -1,   -1,  272,  273,  257,   -1,
   -1,  260,  278,  262,  263,  264,  265,  266,  267,   -1,
   -1,   -1,   -1,  272,  273,  274,  275,  276,  277,  278,
  279,  125,   -1,  257,   -1,   -1,  260,   -1,  262,  263,
  264,  265,  266,  267,  246,   -1,   -1,   -1,  272,  273,
  274,  275,  276,  277,  278,  279,  125,   -1,   -1,  257,
   -1,   -1,  260,   -1,  262,  263,  264,  265,  266,  267,
   -1,   -1,   -1,   -1,  272,  273,  274,  275,  276,  277,
  278,  279,  257,  125,   -1,  260,   -1,  262,  263,  264,
  265,  266,  267,  125,   -1,   -1,   -1,  272,  273,  274,
  275,  276,  277,  278,  279,   -1,   -1,   -1,   -1,  257,
   -1,   -1,  260,   -1,  262,  263,  264,  265,  266,  267,
  125,   -1,  125,   -1,  272,  273,  274,  275,  276,  277,
  278,  279,   -1,   -1,   -1,  257,   -1,   -1,  260,   -1,
   -1,   -1,  264,  265,  266,  125,   -1,   -1,   -1,   -1,
  272,  273,   -1,   -1,  276,  277,  278,  279,   -1,   -1,
   -1,   -1,   -1,  257,   -1,   -1,  260,   -1,  125,   -1,
  264,  265,   -1,   -1,   -1,   -1,   -1,   -1,  272,  273,
   -1,   -1,  276,  277,  278,  279,   -1,  125,  257,   -1,
   -1,  260,   -1,   -1,   -1,  264,  265,   -1,   -1,   -1,
   -1,   -1,   -1,  272,  273,   -1,  125,  276,  277,  278,
  279,   -1,   -1,   -1,   -1,  257,   -1,   -1,  260,   -1,
   -1,   -1,  264,  265,   -1,  257,  125,   -1,  260,   -1,
  272,  273,  264,  265,  276,  277,  278,  279,   -1,   -1,
  272,  273,   -1,  125,  276,  277,  278,  279,   -1,   -1,
   -1,   -1,  257,   -1,  257,  260,   -1,  260,   -1,  264,
  265,  264,  125,  266,   -1,   -1,   -1,  272,  273,  272,
  273,  276,  277,  278,  279,  278,   -1,  257,   -1,  125,
  260,   -1,   -1,   -1,  264,  265,   -1,   -1,   -1,   -1,
   -1,   -1,  272,  273,   -1,   -1,  276,  277,  278,  279,
  257,  125,   -1,  260,   -1,   -1,   -1,  264,   -1,  266,
  267,   -1,   -1,   -1,   -1,  272,  273,  274,  275,  257,
  125,  278,  260,   -1,   -1,   -1,  264,   -1,  266,  267,
  125,   -1,   -1,   -1,  272,  273,  274,  275,  257,   -1,
  278,  260,   -1,   -1,   -1,  264,   -1,  266,  267,  125,
   -1,   -1,   -1,  272,  273,   -1,  275,   -1,  257,  278,
  125,  260,   -1,   -1,   -1,  264,   -1,  266,  267,   -1,
   -1,  125,   -1,  272,  273,  257,  275,   -1,  260,  278,
   -1,   -1,  264,   -1,   -1,  267,   -1,   -1,  125,   -1,
  272,  273,  274,  275,  257,   -1,  278,  260,  125,   -1,
   -1,  264,   -1,   -1,  267,   -1,   -1,   -1,  125,  272,
  273,  257,  275,   -1,  260,  278,   -1,   -1,  264,   -1,
   -1,  267,   -1,   -1,   -1,  125,  272,  273,   -1,  275,
   -1,   -1,  278,  257,   -1,   -1,  260,   -1,   -1,   -1,
  264,   -1,   -1,  267,   -1,   -1,   -1,   -1,  272,  273,
   -1,  275,  257,   -1,  278,  260,   -1,  262,  263,  264,
   -1,   -1,  257,   -1,   -1,  260,   -1,  272,  273,  264,
   -1,  266,   -1,  278,   -1,   -1,   -1,  272,  273,   -1,
   -1,  257,   -1,  278,  260,   -1,   -1,   -1,  264,   -1,
  266,   -1,  257,   -1,   -1,  260,  272,  273,   -1,  264,
   -1,  266,  278,  257,   -1,   -1,  260,  272,  273,   -1,
  264,   -1,   -1,  278,  343,   -1,   -1,   -1,  272,  273,
  257,   -1,   -1,  260,  278,  354,   -1,  264,   -1,  358,
  257,   -1,   -1,  260,   -1,  272,  273,  264,   -1,   -1,
  257,  278,   -1,  260,   -1,  272,  273,  264,   -1,   -1,
   -1,  278,   -1,   -1,   -1,  272,  273,  257,   -1,  388,
  260,  278,   -1,   -1,  264,   -1,   -1,   -1,   -1,   -1,
   -1,  400,  272,  273,  257,  404,   -1,  260,  278,  408,
   -1,  264,  265,  266,   -1,   -1,   -1,   -1,   -1,  272,
  273,   -1,   -1,  276,  277,  278,  279,   -1,   -1,   -1,
  257,   -1,   -1,  260,   -1,  434,  435,  264,  265,   -1,
  257,   -1,   -1,  260,   -1,  272,  273,  264,  265,  276,
  277,  278,  279,   -1,   -1,  272,  273,   -1,   -1,  276,
  277,  278,  279,   -1,   -1,   -1,  257,   -1,   -1,  260,
   -1,  470,  471,  264,   -1,  266,  257,   -1,   -1,  260,
   -1,  272,  273,  264,   -1,  266,   -1,  278,   -1,   -1,
   -1,  272,  273,   -1,   -1,   -1,   -1,  278,
};
}
final static short YYFINAL=3;
final static short YYMAXTOKEN=279;
final static String yyname[] = {
"end-of-file",null,null,null,null,null,null,null,null,null,null,null,null,null,
null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,
null,null,null,null,null,null,null,null,null,null,"'('","')'","'*'","'+'","','",
"'-'",null,"'/'",null,null,null,null,null,null,null,null,null,null,"':'","';'",
"'<'","'='","'>'",null,null,null,null,null,null,null,null,null,null,null,null,
null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,
null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,
null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,
"'{'",null,"'}'",null,null,null,null,null,null,null,null,null,null,null,null,
null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,
null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,
null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,
null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,
null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,
null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,
null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,
null,null,null,null,null,null,null,"ID","CTE","CADENA","IF","THEN","ELSE",
"ENDIF","OUT","FUN","RETURN","BREAK","ASIGNACION","COMP_MAYOR_IGUAL",
"COMP_MENOR_IGUAL","COMP_DISTINTO","WHEN","DO","UNTIL","CONTINUE","DOUBLE64",
"UINT16","DEFER","CONST",
};
final static String yyrule[] = {
"$accept : programa",
"programa : nombre_programa '{' sentencias '}'",
"programa : '{' sentencias '}'",
"programa : nombre_programa sentencias '}'",
"programa : nombre_programa '{' sentencias",
"programa : nombre_programa '{' '}'",
"programa :",
"nombre_programa : ID",
"sentencias : sentencia",
"sentencias : sentencias sentencia",
"sentencia : sentencia_declarativa",
"sentencia : sentencia_ejecutable",
"sentencia_declarativa : sentencia_declarativa_variables",
"sentencia_declarativa : funcion_con_return",
"sentencia_declarativa : funcion_sin_return",
"sentencia_declarativa : declaracion_constantes",
"sentencia_declarativa_variables : tipo lista_de_variables ';'",
"sentencia_declarativa_variables : tipo lista_de_variables",
"sentencia_declarativa_variables : lista_de_variables ';'",
"sentencia_declarativa_variables : tipo ';'",
"lista_de_variables : ID ',' lista_de_variables",
"lista_de_variables : ID",
"funcion_con_return : encabezado_funcion '{' sentencia_return '}'",
"funcion_con_return : encabezado_funcion '{' sentencias_funcion sentencia_return '}'",
"funcion_con_return : encabezado_funcion '{' '}'",
"sentencias_funcion : sentencia_funcion",
"sentencias_funcion : sentencias_funcion sentencia_funcion",
"sentencia_funcion : sentencia_declarativa",
"sentencia_funcion : sentencia_ejecutable_funcion",
"sentencia_ejecutable_funcion : asignacion",
"sentencia_ejecutable_funcion : DEFER asignacion",
"sentencia_ejecutable_funcion : imprimir",
"sentencia_ejecutable_funcion : DEFER imprimir",
"sentencia_ejecutable_funcion : sentencia_when_con_return",
"sentencia_ejecutable_funcion : DEFER sentencia_when_con_return",
"sentencia_ejecutable_funcion : sentencia_do_con_return",
"sentencia_ejecutable_funcion : DEFER sentencia_do_con_return",
"sentencia_ejecutable_funcion : sentencia_seleccion_simple_con_return",
"sentencia_ejecutable_funcion : DEFER sentencia_seleccion_simple_con_return",
"sentencias_ejecutables_funcion : sentencia_ejecutable_funcion",
"sentencias_ejecutables_funcion : sentencias_ejecutables_funcion sentencia_ejecutable_funcion",
"funcion_sin_return : encabezado_funcion '{' sentencia_seleccion_compuesta_con_return '}'",
"funcion_sin_return : encabezado_funcion '{' sentencias_funcion sentencia_seleccion_compuesta_con_return '}'",
"sentencia_seleccion_compuesta_con_return : IF condicion THEN sentencia_seleccion_compuesta_con_return_simple ELSE sentencia_seleccion_compuesta_con_return_simple ENDIF ';'",
"sentencia_seleccion_compuesta_con_return : IF condicion THEN '{' sentencias_ejecutables_funcion sentencia_return '}' ELSE sentencia_seleccion_compuesta_con_return_simple ENDIF ';'",
"sentencia_seleccion_compuesta_con_return : IF condicion THEN '{' sentencias_ejecutables_funcion sentencia_seleccion_compuesta_con_return '}' ELSE sentencia_seleccion_compuesta_con_return_simple ENDIF ';'",
"sentencia_seleccion_compuesta_con_return : IF condicion THEN sentencia_seleccion_compuesta_con_return_simple ELSE '{' sentencias_ejecutables_funcion sentencia_return '}' ENDIF ';'",
"sentencia_seleccion_compuesta_con_return : IF condicion THEN sentencia_seleccion_compuesta_con_return_simple ELSE '{' sentencias_ejecutables_funcion sentencia_seleccion_compuesta_con_return '}' ENDIF ';'",
"sentencia_seleccion_compuesta_con_return : IF condicion THEN '{' sentencias_ejecutables_funcion sentencia_return '}' ELSE '{' sentencias_ejecutables_funcion sentencia_seleccion_compuesta_con_return_simple '}' ENDIF ';'",
"sentencia_seleccion_compuesta_con_return : IF condicion THEN '{' sentencias_ejecutables_funcion sentencia_seleccion_compuesta_con_return '}' ELSE '{' sentencias_ejecutables_funcion sentencia_seleccion_compuesta_con_return_simple '}' ENDIF ';'",
"sentencia_seleccion_compuesta_con_return : IF condicion THEN sentencia_seleccion_compuesta_con_return_simple ELSE sentencia_seleccion_compuesta_con_return_simple ENDIF",
"sentencia_seleccion_compuesta_con_return : IF condicion THEN '{' sentencias_ejecutables_funcion sentencia_return '}' ELSE sentencia_seleccion_compuesta_con_return_simple ENDIF",
"sentencia_seleccion_compuesta_con_return : IF condicion THEN '{' sentencias_ejecutables_funcion sentencia_seleccion_compuesta_con_return '}' ELSE sentencia_seleccion_compuesta_con_return_simple ENDIF",
"sentencia_seleccion_compuesta_con_return : IF condicion THEN sentencia_seleccion_compuesta_con_return_simple ELSE '{' sentencias_ejecutables_funcion sentencia_return '}' ENDIF",
"sentencia_seleccion_compuesta_con_return : IF condicion THEN sentencia_seleccion_compuesta_con_return_simple ELSE '{' sentencias_ejecutables_funcion sentencia_seleccion_compuesta_con_return '}' ENDIF",
"sentencia_seleccion_compuesta_con_return : IF condicion THEN '{' sentencias_ejecutables_funcion sentencia_return '}' ELSE '{' sentencias_ejecutables_funcion sentencia_seleccion_compuesta_con_return_simple '}' ENDIF",
"sentencia_seleccion_compuesta_con_return : IF condicion THEN '{' sentencias_ejecutables_funcion sentencia_seleccion_compuesta_con_return '}' ELSE '{' sentencias_ejecutables_funcion sentencia_seleccion_compuesta_con_return_simple '}' ENDIF",
"sentencia_seleccion_compuesta_con_return_simple : sentencia_return",
"sentencia_seleccion_compuesta_con_return_simple : sentencia_seleccion_compuesta_con_return",
"sentencia_seleccion_compuesta_con_return_simple : DEFER sentencia_seleccion_compuesta_con_return",
"sentencia_seleccion_simple_con_return : IF condicion THEN sentencia_return ENDIF ';'",
"sentencia_seleccion_simple_con_return : IF condicion THEN sentencia_seleccion_compuesta_con_return ENDIF ';'",
"sentencia_seleccion_simple_con_return : IF condicion THEN sentencia_ejecutable_funcion ENDIF ';'",
"sentencia_seleccion_simple_con_return : IF condicion THEN '{' sentencias_ejecutables_funcion sentencia_return '}' ENDIF ';'",
"sentencia_seleccion_simple_con_return : IF condicion THEN '{' sentencias_ejecutables_funcion sentencia_seleccion_compuesta_con_return '}' ENDIF ';'",
"sentencia_seleccion_simple_con_return : IF condicion THEN '{' sentencias_ejecutables_funcion sentencia_return '}' ELSE '{' sentencias_ejecutables_funcion '}' ENDIF ';'",
"sentencia_seleccion_simple_con_return : IF condicion THEN '{' sentencias_ejecutables_funcion sentencia_return '}' ELSE sentencia_ejecutable_funcion ENDIF ';'",
"sentencia_seleccion_simple_con_return : IF condicion THEN '{' sentencias_ejecutables_funcion sentencia_seleccion_compuesta_con_return '}' ELSE sentencia_ejecutable_funcion ENDIF ';'",
"sentencia_seleccion_simple_con_return : IF condicion THEN '{' sentencias_ejecutables_funcion sentencia_seleccion_compuesta_con_return '}' ELSE '{' sentencias_ejecutables_funcion '}' ENDIF ';'",
"sentencia_seleccion_simple_con_return : IF condicion THEN '{' sentencias_ejecutables_funcion '}' ELSE '{' sentencias_ejecutables_funcion sentencia_return '}' ENDIF ';'",
"sentencia_seleccion_simple_con_return : IF condicion THEN '{' sentencias_ejecutables_funcion '}' ELSE '{' sentencias_ejecutables_funcion sentencia_seleccion_compuesta_con_return '}' ENDIF ';'",
"sentencia_seleccion_simple_con_return : IF condicion THEN sentencia_ejecutable_funcion ELSE '{' sentencias_ejecutables_funcion sentencia_return '}' ENDIF ';'",
"sentencia_seleccion_simple_con_return : IF condicion THEN sentencia_ejecutable_funcion ELSE '{' sentencias_ejecutables_funcion sentencia_seleccion_compuesta_con_return '}' ENDIF ';'",
"sentencia_seleccion_simple_con_return : IF condicion THEN '{' sentencias_ejecutables_funcion '}' ELSE '{' sentencias_ejecutables_funcion '}' ENDIF ';'",
"sentencia_when_con_return : WHEN condicion THEN '{' sentencia_funcion '}' ';'",
"sentencia_when_con_return : WHEN condicion THEN '{' sentencia_funcion sentencia_return '}' ';'",
"sentencia_when_con_return : WHEN condicion THEN '{' sentencia_funcion sentencia_seleccion_compuesta_con_return '}' ';'",
"sentencia_when_con_return : WHEN condicion THEN '{' sentencia_funcion '}'",
"sentencia_when_con_return : WHEN condicion THEN '{' sentencia_funcion sentencia_return '}'",
"sentencia_when_con_return : WHEN condicion THEN '{' sentencia_funcion sentencia_seleccion_compuesta_con_return '}'",
"sentencia_when_con_return : WHEN condicion THEN '{' '}' ';'",
"sentencia_when_con_return : WHEN condicion '{' sentencia_funcion '}' ';'",
"sentencia_when_con_return : WHEN condicion '{' sentencia_funcion sentencia_return '}' ';'",
"sentencia_when_con_return : WHEN condicion '{' sentencia_funcion sentencia_seleccion_compuesta_con_return '}' ';'",
"sentencia_do_con_return : DO bloque_sentencias_ejecutables_do_con_return UNTIL condicion ';'",
"sentencia_do_con_return : etiqueta ':' DO bloque_sentencias_ejecutables_do_con_return UNTIL condicion ';'",
"sentencia_do_con_return : DO bloque_sentencias_ejecutables_do_con_return UNTIL condicion",
"sentencia_do_con_return : etiqueta ':' DO bloque_sentencias_ejecutables_do_con_return UNTIL condicion",
"bloque_sentencias_ejecutables_do_con_return : sentencia_return",
"bloque_sentencias_ejecutables_do_con_return : sentencia_seleccion_compuesta_con_return",
"bloque_sentencias_ejecutables_do_con_return : sentencias_ejecutables_do_funcion",
"bloque_sentencias_ejecutables_do_con_return : '{' sentencias_ejecutables_do_funcion sentencia_return '}'",
"bloque_sentencias_ejecutables_do_con_return : '{' sentencias_ejecutables_do_funcion sentencia_seleccion_compuesta_con_return '}'",
"bloque_sentencias_ejecutables_do_con_return : '{' sentencias_ejecutables_do_funcion '}'",
"bloque_sentencias_ejecutables_do_con_return : '{' '}'",
"bloque_sentencias_ejecutables_do_con_return : '{' sentencias_ejecutables_do_funcion sentencia_return",
"bloque_sentencias_ejecutables_do_con_return : sentencias_ejecutables_do_funcion sentencia_return '}'",
"bloque_sentencias_ejecutables_do_con_return : '{' sentencias_ejecutables_do_funcion sentencia_seleccion_compuesta_con_return",
"bloque_sentencias_ejecutables_do_con_return : sentencias_ejecutables_do_funcion sentencia_seleccion_compuesta_con_return '}'",
"bloque_sentencias_ejecutables_do_con_return : '{' sentencias_ejecutables_do_funcion",
"bloque_sentencias_ejecutables_do_con_return : sentencias_ejecutables_do_funcion '}'",
"sentencias_ejecutables_do_funcion : sentencia_ejecutable_do_funcion",
"sentencias_ejecutables_do_funcion : sentencias_ejecutables_do_funcion sentencia_ejecutable_do_funcion",
"sentencia_ejecutable_do_funcion : sentencia_ejecutable_funcion",
"sentencia_ejecutable_do_funcion : sentencia_break",
"sentencia_ejecutable_do_funcion : sentencia_continue",
"encabezado_funcion : FUN ID '(' ')' ':' tipo",
"encabezado_funcion : FUN ID '(' lista_de_parametros ')' ':' tipo",
"encabezado_funcion : FUN ID '(' lista_de_parametros ')' tipo",
"encabezado_funcion : FUN ID '(' ')' ':'",
"encabezado_funcion : FUN '(' ')' ':' tipo",
"encabezado_funcion : FUN ID ')' ':' tipo",
"encabezado_funcion : FUN ID '(' ':' tipo",
"encabezado_funcion : FUN ID '(' lista_de_parametros ')' ':'",
"encabezado_funcion : FUN '(' lista_de_parametros ')' ':' tipo",
"encabezado_funcion : FUN ID lista_de_parametros ')' ':' tipo",
"encabezado_funcion : FUN ID '(' lista_de_parametros ':' tipo",
"sentencia_return : RETURN '(' expresion ')' ';'",
"sentencia_return : RETURN '(' expresion ')'",
"sentencia_return : RETURN expresion ')'",
"sentencia_return : RETURN '(' expresion",
"sentencia_return : RETURN '(' ')' ';'",
"lista_de_parametros : parametro",
"lista_de_parametros : parametro ',' parametro",
"lista_de_parametros : parametro ',' parametro ',' lista_parametros_exceso",
"lista_parametros_exceso : parametro",
"lista_parametros_exceso : parametro ',' lista_parametros_exceso",
"parametro : tipo ID",
"parametro : tipo",
"$$1 :",
"parametro : $$1 ID",
"declaracion_constantes : CONST lista_declaracion_constantes ';'",
"declaracion_constantes : CONST lista_declaracion_constantes",
"declaracion_constantes : CONST ';'",
"lista_declaracion_constantes : declaracion_constante",
"lista_declaracion_constantes : declaracion_constante ',' lista_declaracion_constantes",
"declaracion_constante : ID ASIGNACION CTE",
"declaracion_constante : ID ASIGNACION",
"declaracion_constante : ID CTE",
"declaracion_constante : ID",
"declaracion_constante : ID '=' CTE",
"sentencia_ejecutable : asignacion",
"sentencia_ejecutable : DEFER asignacion",
"sentencia_ejecutable : seleccion",
"sentencia_ejecutable : DEFER seleccion",
"sentencia_ejecutable : imprimir",
"sentencia_ejecutable : DEFER imprimir",
"sentencia_ejecutable : sentencia_when",
"sentencia_ejecutable : DEFER sentencia_when",
"sentencia_ejecutable : sentencia_do",
"sentencia_ejecutable : DEFER sentencia_do",
"sentencia_ejecutable_do : sentencia_ejecutable",
"sentencia_ejecutable_do : sentencia_break",
"sentencia_ejecutable_do : sentencia_continue",
"sentencia_break : BREAK ';'",
"sentencia_break : BREAK ':' etiqueta ';'",
"sentencia_break : BREAK",
"sentencia_break : BREAK ':' etiqueta",
"sentencia_break : BREAK ':' ';'",
"sentencia_continue : CONTINUE ';'",
"sentencia_continue : CONTINUE",
"sentencia_do : sentencia_do_simple",
"sentencia_do : sentencia_do_etiqueta ':' sentencia_do_simple",
"sentencia_do_etiqueta : etiqueta",
"sentencia_do_simple : keyword_do bloque_sentencias_ejecutables_do UNTIL condicion ';'",
"sentencia_do_simple : keyword_do bloque_sentencias_ejecutables_do UNTIL condicion",
"keyword_do : DO",
"etiqueta : ID",
"bloque_sentencias_ejecutables_do : sentencia_ejecutable_do",
"bloque_sentencias_ejecutables_do : '{' sentencias_ejecutables_do '}'",
"bloque_sentencias_ejecutables_do : '{' sentencias_ejecutables_do",
"bloque_sentencias_ejecutables_do : sentencias_ejecutables_do '}'",
"sentencias_ejecutables_do : sentencia_ejecutable_do",
"sentencias_ejecutables_do : sentencias_ejecutables_do sentencia_ejecutable_do",
"asignacion : ID ASIGNACION expresion ';'",
"asignacion : ID ASIGNACION ';'",
"asignacion : ID ASIGNACION expresion",
"asignacion : ID '=' expresion ';'",
"asignacion : ID '=' expresion",
"sentencia_when : WHEN condicion THEN '{' sentencias_when '}' ';'",
"sentencia_when : WHEN condicion '{' sentencias_when '}' ';'",
"sentencia_when : WHEN condicion THEN '{' sentencias_when '}'",
"sentencia_when : WHEN condicion '{' sentencias_when '}'",
"sentencia_when : WHEN condicion '{' '}'",
"sentencias_when : sentencia",
"sentencias_when : sentencia sentencias_when",
"seleccion : IF condicion THEN bloque_sentencias_ejecutables_seleccion_then ENDIF ';'",
"seleccion : IF condicion THEN bloque_sentencias_ejecutables_seleccion_then ELSE bloque_sentencias_ejecutables_seleccion_else ENDIF ';'",
"seleccion : IF condicion THEN bloque_sentencias_ejecutables_seleccion_then ENDIF",
"seleccion : IF condicion THEN bloque_sentencias_ejecutables_seleccion_then ELSE bloque_sentencias_ejecutables_seleccion_else ENDIF",
"seleccion : IF condicion THEN ENDIF ';'",
"seleccion : IF condicion bloque_sentencias_ejecutables_seleccion_then ENDIF ';'",
"seleccion : IF condicion bloque_sentencias_ejecutables_seleccion_then ELSE bloque_sentencias_ejecutables_seleccion_else ENDIF ';'",
"seleccion : IF condicion THEN ELSE ENDIF ';'",
"bloque_sentencias_ejecutables_seleccion : sentencia_ejecutable",
"bloque_sentencias_ejecutables_seleccion : '{' sentencias_ejecutables '}'",
"bloque_sentencias_ejecutables_seleccion : '{' '}'",
"bloque_sentencias_ejecutables_seleccion : '{' sentencias_ejecutables",
"bloque_sentencias_ejecutables_seleccion : sentencias_ejecutables '}'",
"sentencias_ejecutables : sentencia_ejecutable",
"sentencias_ejecutables : sentencias_ejecutables sentencia_ejecutable",
"bloque_sentencias_ejecutables_seleccion_then : bloque_sentencias_ejecutables_seleccion",
"bloque_sentencias_ejecutables_seleccion_else : bloque_sentencias_ejecutables_seleccion",
"condicion : '(' expresion comparador expresion ')'",
"condicion : '(' expresion comparador ')'",
"condicion : '(' comparador expresion ')'",
"condicion : expresion comparador expresion ')'",
"condicion : '(' expresion comparador expresion",
"condicion : '(' ')'",
"comparador : COMP_MAYOR_IGUAL",
"comparador : COMP_MENOR_IGUAL",
"comparador : COMP_DISTINTO",
"comparador : '>'",
"comparador : '<'",
"comparador : '='",
"expresion : expresion '+' termino",
"expresion : expresion '-' termino",
"expresion : termino",
"termino : termino '*' factor",
"termino : termino '/' factor",
"termino : factor",
"factor : ID",
"factor : constante",
"factor : invocacion_funcion",
"invocacion_funcion : ID '(' ')'",
"invocacion_funcion : ID '(' lista_de_parametros_reales ')'",
"lista_de_parametros_reales : parametro_real",
"lista_de_parametros_reales : lista_de_parametros_reales ',' parametro_real",
"parametro_real : ID",
"parametro_real : constante",
"imprimir : OUT '(' CADENA ')' ';'",
"imprimir : OUT '(' ID ')' ';'",
"imprimir : OUT '(' ')' ';'",
"imprimir : OUT CADENA ')' ';'",
"imprimir : OUT '(' CADENA ';'",
"imprimir : OUT ID ')' ';'",
"imprimir : OUT '(' ID ';'",
"imprimir : OUT '(' CADENA ')'",
"imprimir : OUT '(' ID ')'",
"constante : CTE",
"constante : '-' CTE",
"tipo : UINT16",
"tipo : DOUBLE64",
};

//#line 643 ".\gramatica.y"

public static AnalizadorLexico lexico = null;
public static Logger logger = Logger.getInstance();
public static TablaDeSimbolos ts = TablaDeSimbolos.getInstance();
public static Parser parser = null;

public static StringBuilder negConstante = new StringBuilder();

public void constanteConSigno(String constante) {
	if (constante.contains(".")) {

		negConstante.setLength(0);
		negConstante.append("-");
		negConstante.append(constante);
		
		Double parsedDouble = Double.parseDouble(negConstante.toString().replace('D', 'E'));
		
		if (parsedDouble < -2.2250738585072014E-308 && -1.7976931348623157E+308 > parsedDouble) {
			logger.logWarning("[Parser] Rango invalido para la constante: " + negConstante + ", se trunca al rango permitido");
			
			if (-1.7976931348623157E+308 < parsedDouble) {
				negConstante.setLength(0);
				negConstante.append("-1.7976931348623157D+308");
			} else {
				negConstante.setLength(0);
				negConstante.append("-2.2250738585072014D-308");
			}
		}
		
		ts.swapLexemas(constante, negConstante.toString());
	} else {
		//se recibio un uint que fue aceptado por el lexico pero resulta ser negativo
		logger.logWarning("[Parser] No se admiten ui16 con obj[0]es negativos: " + "-"+constante + ", se trunca a 0");
		
		ts.swapLexemas(constante, "0");
	}
}	

public int yylex() {
	return lexico.yylex(parser);
}

public void yyerror(String error) {
	logger.logError(error);
}

public static void main(String[] args) {
	if (args.length == 0) {
		System.err.println("No se especifico ningun archivo de codigo");
	} else {
		String archivo_a_leer = args[0];
		System.out.println("Se va a leer archivo " + archivo_a_leer);
		
		FileReaderHelper fileHelper = new FileReaderHelper();
		
		boolean fileOpenSuccess = fileHelper.open(archivo_a_leer);
		
		if (fileOpenSuccess) {
			parser = new Parser();
			lexico = new AnalizadorLexico(fileHelper);
			
	        parser.run();
	
			String path = new File(archivo_a_leer).getAbsolutePath();
	        
	        Output out = new Output(path);
	        
	        String printTs = ts.print();
	        
	        out.saveFile("codigo-lexico.txt", logger.getLexico());
			out.saveFile("codigo-sintetico.txt", logger.getSintactico());
			out.saveFile("tabla-de-simbolos.txt", printTs);
	        
			System.out.println(printTs);

			GeneracionCodigoIntermedio instance = GeneracionCodigoIntermedio.getInstance();

			instance.printTercetos();
		}
	}
}
//#line 1090 "Parser.java"
//###############################################################
// method: yylexdebug : check lexer state
//###############################################################
void yylexdebug(int state,int ch)
{
String s=null;
  if (ch < 0) ch=0;
  if (ch <= YYMAXTOKEN) //check index bounds
     s = yyname[ch];    //now get it
  if (s==null)
    s = "illegal-symbol";
  debug("state "+state+", reading "+ch+" ("+s+")");
}





//The following are now global, to aid in error reporting
int yyn;       //next next thing to do
int yym;       //
int yystate;   //current parsing state from state table
String yys;    //current token string


//###############################################################
// method: yyparse : parse input and execute indicated items
//###############################################################
int yyparse()
{
boolean doaction;
  init_stacks();
  yynerrs = 0;
  yyerrflag = 0;
  yychar = -1;          //impossible char forces a read
  yystate=0;            //initial state
  state_push(yystate);  //save it
  val_push(yylval);     //save empty value
  while (true) //until parsing is done, either correctly, or w/error
    {
    doaction=true;
    if (yydebug) debug("loop"); 
    //#### NEXT ACTION (from reduction table)
    for (yyn=yydefred[yystate];yyn==0;yyn=yydefred[yystate])
      {
      if (yydebug) debug("yyn:"+yyn+"  state:"+yystate+"  yychar:"+yychar);
      if (yychar < 0)      //we want a char?
        {
        yychar = yylex();  //get next token
        if (yydebug) debug(" next yychar:"+yychar);
        //#### ERROR CHECK ####
        if (yychar < 0)    //it it didn't work/error
          {
          yychar = 0;      //change it to default string (no -1!)
          if (yydebug)
            yylexdebug(yystate,yychar);
          }
        }//yychar<0
      yyn = yysindex[yystate];  //get amount to shift by (shift index)
      if ((yyn != 0) && (yyn += yychar) >= 0 &&
          yyn <= YYTABLESIZE && yycheck[yyn] == yychar)
        {
        if (yydebug)
          debug("state "+yystate+", shifting to state "+yytable[yyn]);
        //#### NEXT STATE ####
        yystate = yytable[yyn];//we are in a new state
        state_push(yystate);   //save it
        val_push(yylval);      //push our lval as the input for next rule
        yychar = -1;           //since we have 'eaten' a token, say we need another
        if (yyerrflag > 0)     //have we recovered an error?
           --yyerrflag;        //give ourselves credit
        doaction=false;        //but don't process yet
        break;   //quit the yyn=0 loop
        }

    yyn = yyrindex[yystate];  //reduce
    if ((yyn !=0 ) && (yyn += yychar) >= 0 &&
            yyn <= YYTABLESIZE && yycheck[yyn] == yychar)
      {   //we reduced!
      if (yydebug) debug("reduce");
      yyn = yytable[yyn];
      doaction=true; //get ready to execute
      break;         //drop down to actions
      }
    else //ERROR RECOVERY
      {
      if (yyerrflag==0)
        {
        yyerror("syntax error");
        yynerrs++;
        }
      if (yyerrflag < 3) //low error count?
        {
        yyerrflag = 3;
        while (true)   //do until break
          {
          if (stateptr<0)   //check for under & overflow here
            {
            yyerror("stack underflow. aborting...");  //note lower case 's'
            return 1;
            }
          yyn = yysindex[state_peek(0)];
          if ((yyn != 0) && (yyn += YYERRCODE) >= 0 &&
                    yyn <= YYTABLESIZE && yycheck[yyn] == YYERRCODE)
            {
            if (yydebug)
              debug("state "+state_peek(0)+", error recovery shifting to state "+yytable[yyn]+" ");
            yystate = yytable[yyn];
            state_push(yystate);
            val_push(yylval);
            doaction=false;
            break;
            }
          else
            {
            if (yydebug)
              debug("error recovery discarding state "+state_peek(0)+" ");
            if (stateptr<0)   //check for under & overflow here
              {
              yyerror("Stack underflow. aborting...");  //capital 'S'
              return 1;
              }
            state_pop();
            val_pop();
            }
          }
        }
      else            //discard this token
        {
        if (yychar == 0)
          return 1; //yyabort
        if (yydebug)
          {
          yys = null;
          if (yychar <= YYMAXTOKEN) yys = yyname[yychar];
          if (yys == null) yys = "illegal-symbol";
          debug("state "+yystate+", error recovery discards token "+yychar+" ("+yys+")");
          }
        yychar = -1;  //read another
        }
      }//end error recovery
    }//yyn=0 loop
    if (!doaction)   //any reason not to proceed?
      continue;      //skip action
    yym = yylen[yyn];          //get count of terminals on rhs
    if (yydebug)
      debug("state "+yystate+", reducing "+yym+" by rule "+yyn+" ("+yyrule[yyn]+")");
    if (yym>0)                 //if count of rhs not 'nil'
      yyval = val_peek(yym-1); //get current semantic value
    yyval = dup_yyval(yyval); //duplicate yyval if ParserVal is used as semantic value
    switch(yyn)
      {
//########## USER-SUPPLIED ACTIONS ##########
case 1:
//#line 20 ".\gramatica.y"
{ 
		logger.logSuccess("[Parser] Programa correcto detectado");
		GeneracionCodigoIntermedio instance = GeneracionCodigoIntermedio.getInstance();
		instance.agregarUsoAIdentificador(val_peek(3).obj[0], "nombre_programa");
	}
break;
case 2:
//#line 25 ".\gramatica.y"
{ logger.logError("[Parser] Se esperaba un identificador nombre del programa"); }
break;
case 3:
//#line 26 ".\gramatica.y"
{ logger.logError("[Parser] Se esperaba un { antes de las sentencias del programa"); }
break;
case 4:
//#line 27 ".\gramatica.y"
{ logger.logError("[Parser] Se esperaba un } al final de las sentencias del programa"); }
break;
case 5:
//#line 28 ".\gramatica.y"
{ logger.logError("[Parser] Se esperaban sentencias del programa"); }
break;
case 6:
//#line 29 ".\gramatica.y"
{ logger.logError("[Parser] Se esperaban sentencias del programa"); }
break;
case 16:
//#line 54 ".\gramatica.y"
{ 
		logger.logSuccess("[Parser] Declaracion de lista de variables detectado"); 
		GeneracionCodigoIntermedio instance = GeneracionCodigoIntermedio.getInstance(); 
		instance.agregarTipoAListaDeVariables(val_peek(2).obj[0]);
	}
break;
case 17:
//#line 59 ".\gramatica.y"
{ logger.logError("[Parser] Se esperaba un ; al final de la lista de variables"); }
break;
case 18:
//#line 60 ".\gramatica.y"
{ logger.logError("[Parser] Se esperaba un tipo para la lista de variables"); }
break;
case 19:
//#line 61 ".\gramatica.y"
{ logger.logError("[Parser] Se esperaba una variable o lista de variables"); }
break;
case 20:
//#line 65 ".\gramatica.y"
{ 
		GeneracionCodigoIntermedio instance = GeneracionCodigoIntermedio.getInstance(); 
		instance.agregarVariableADeclarar(val_peek(2).obj[0]);
	}
break;
case 21:
//#line 69 ".\gramatica.y"
{
		GeneracionCodigoIntermedio instance = GeneracionCodigoIntermedio.getInstance(); 
		instance.agregarVariableADeclarar(val_peek(0).obj[0]);
	}
break;
case 22:
//#line 76 ".\gramatica.y"
{ logger.logSuccess("[Parser] Declaracion de funcion detectado"); }
break;
case 23:
//#line 77 ".\gramatica.y"
{ logger.logSuccess("[Parser] Declaracion de funcion detectado"); }
break;
case 24:
//#line 78 ".\gramatica.y"
{ logger.logError("[Parser] Se esperaban sentencias en la funcion"); }
break;
case 41:
//#line 110 ".\gramatica.y"
{ logger.logSuccess("[Parser] Declaracion de funcion detectado"); }
break;
case 42:
//#line 111 ".\gramatica.y"
{ logger.logSuccess("[Parser] Declaracion de funcion detectado"); }
break;
case 43:
//#line 115 ".\gramatica.y"
{ logger.logSuccess("[Parser] Sentencia seleccion detectada"); }
break;
case 44:
//#line 116 ".\gramatica.y"
{ logger.logSuccess("[Parser] Sentencia seleccion detectada"); }
break;
case 45:
//#line 117 ".\gramatica.y"
{ logger.logSuccess("[Parser] Sentencia seleccion detectada"); }
break;
case 46:
//#line 118 ".\gramatica.y"
{ logger.logSuccess("[Parser] Sentencia seleccion detectada"); }
break;
case 47:
//#line 119 ".\gramatica.y"
{ logger.logSuccess("[Parser] Sentencia seleccion detectada"); }
break;
case 48:
//#line 120 ".\gramatica.y"
{ logger.logSuccess("[Parser] Sentencia seleccion detectada"); }
break;
case 49:
//#line 121 ".\gramatica.y"
{ logger.logSuccess("[Parser] Sentencia seleccion detectada"); }
break;
case 50:
//#line 122 ".\gramatica.y"
{ logger.logError("[Parser] Se esperaba un ; al final de la sentencia de seleccion"); }
break;
case 51:
//#line 123 ".\gramatica.y"
{ logger.logError("[Parser] Se esperaba un ; al final de la sentencia de seleccion"); }
break;
case 52:
//#line 124 ".\gramatica.y"
{ logger.logError("[Parser] Se esperaba un ; al final de la sentencia de seleccion"); }
break;
case 53:
//#line 125 ".\gramatica.y"
{ logger.logError("[Parser] Se esperaba un ; al final de la sentencia de seleccion"); }
break;
case 54:
//#line 126 ".\gramatica.y"
{ logger.logError("[Parser] Se esperaba un ; al final de la sentencia de seleccion"); }
break;
case 55:
//#line 127 ".\gramatica.y"
{ logger.logError("[Parser] Se esperaba un ; al final de la sentencia de seleccion"); }
break;
case 56:
//#line 128 ".\gramatica.y"
{ logger.logError("[Parser] Se esperaba un ; al final de la sentencia de seleccion"); }
break;
case 60:
//#line 138 ".\gramatica.y"
{ logger.logSuccess("[Parser] Sentencia de seleccion detectada"); }
break;
case 61:
//#line 139 ".\gramatica.y"
{ logger.logSuccess("[Parser] Sentencia de seleccion detectada"); }
break;
case 62:
//#line 140 ".\gramatica.y"
{ logger.logSuccess("[Parser] Sentencia de seleccion detectada"); }
break;
case 63:
//#line 141 ".\gramatica.y"
{ logger.logSuccess("[Parser] Sentencia de seleccion detectada"); }
break;
case 64:
//#line 142 ".\gramatica.y"
{ logger.logSuccess("[Parser] Sentencia de seleccion detectada"); }
break;
case 65:
//#line 143 ".\gramatica.y"
{ logger.logSuccess("[Parser] Sentencia de seleccion detectada"); }
break;
case 66:
//#line 144 ".\gramatica.y"
{ logger.logSuccess("[Parser] Sentencia de seleccion detectada"); }
break;
case 67:
//#line 145 ".\gramatica.y"
{ logger.logSuccess("[Parser] Sentencia de seleccion detectada"); }
break;
case 68:
//#line 146 ".\gramatica.y"
{ logger.logSuccess("[Parser] Sentencia de seleccion detectada"); }
break;
case 69:
//#line 147 ".\gramatica.y"
{ logger.logSuccess("[Parser] Sentencia de seleccion detectada"); }
break;
case 70:
//#line 148 ".\gramatica.y"
{ logger.logSuccess("[Parser] Sentencia de seleccion detectada"); }
break;
case 71:
//#line 149 ".\gramatica.y"
{ logger.logSuccess("[Parser] Sentencia de seleccion detectada"); }
break;
case 72:
//#line 150 ".\gramatica.y"
{ logger.logSuccess("[Parser] Sentencia de seleccion detectada"); }
break;
case 73:
//#line 151 ".\gramatica.y"
{ logger.logSuccess("[Parser] Sentencia de seleccion detectada"); }
break;
case 74:
//#line 155 ".\gramatica.y"
{ logger.logSuccess("[Parser] Sentencia when detectada"); }
break;
case 75:
//#line 156 ".\gramatica.y"
{ logger.logSuccess("[Parser] Sentencia when detectada"); }
break;
case 76:
//#line 157 ".\gramatica.y"
{ logger.logSuccess("[Parser] Sentencia when detectada"); }
break;
case 77:
//#line 158 ".\gramatica.y"
{ logger.logError("[Parser] Se esperaba ; al final de la sentencia when"); }
break;
case 78:
//#line 159 ".\gramatica.y"
{ logger.logError("[Parser] Se esperaba ; al final de la sentencia when"); }
break;
case 79:
//#line 160 ".\gramatica.y"
{ logger.logError("[Parser] Se esperaba ; al final de la sentencia when"); }
break;
case 80:
//#line 161 ".\gramatica.y"
{ logger.logError("[Parser] Se esperaban sentencias en la sentencia when"); }
break;
case 81:
//#line 162 ".\gramatica.y"
{ logger.logError("[Parser] Se esperaba la palabra reservada then en la sentencia when"); }
break;
case 82:
//#line 163 ".\gramatica.y"
{ logger.logError("[Parser] Se esperaba la palabra reservada then en la sentencia when"); }
break;
case 83:
//#line 164 ".\gramatica.y"
{ logger.logError("[Parser] Se esperaba la palabra reservada then en la sentencia when"); }
break;
case 84:
//#line 168 ".\gramatica.y"
{ logger.logSuccess("[Parser] Sentencia do until detectada"); }
break;
case 85:
//#line 169 ".\gramatica.y"
{ logger.logSuccess("[Parser] Sentencia do until detectada"); }
break;
case 86:
//#line 170 ".\gramatica.y"
{ logger.logError("[Parser] Se esperaba un ; al final de la sentencia do"); }
break;
case 87:
//#line 171 ".\gramatica.y"
{ logger.logError("[Parser] Se esperaba un ; al final de la sentencia do"); }
break;
case 94:
//#line 181 ".\gramatica.y"
{ logger.logError("[Parser] Se esperaban sentencias en la sentencia do"); }
break;
case 95:
//#line 182 ".\gramatica.y"
{ logger.logError("[Parser] Se esperaba un } al final de la sentencia do"); }
break;
case 96:
//#line 183 ".\gramatica.y"
{ logger.logError("[Parser] Se esperaba un } al final de la sentencia do"); }
break;
case 97:
//#line 184 ".\gramatica.y"
{ logger.logError("[Parser] Se esperaba un } al final de la sentencia do"); }
break;
case 98:
//#line 185 ".\gramatica.y"
{ logger.logError("[Parser] Se esperaba un } al final de la sentencia do"); }
break;
case 99:
//#line 186 ".\gramatica.y"
{ logger.logError("[Parser] Se esperaba un } al final de la sentencia do"); }
break;
case 100:
//#line 187 ".\gramatica.y"
{ logger.logError("[Parser] Se esperaba un } al final de la sentencia do"); }
break;
case 106:
//#line 202 ".\gramatica.y"
{
		GeneracionCodigoIntermedio instance = GeneracionCodigoIntermedio.getInstance();
		instance.agregarUsoAIdentificador(val_peek(4).obj[0], "nombre_funcion");
	}
break;
case 107:
//#line 206 ".\gramatica.y"
{
		GeneracionCodigoIntermedio instance = GeneracionCodigoIntermedio.getInstance();
		instance.agregarUsoAIdentificador(val_peek(5).obj[0], "nombre_funcion");
	}
break;
case 108:
//#line 210 ".\gramatica.y"
{ logger.logError("[Parser] Se esperaba un : antes del tipo para la funcion"); }
break;
case 109:
//#line 211 ".\gramatica.y"
{ logger.logError("[Parser] Se esperaba un tipo de return para la funcion"); }
break;
case 110:
//#line 212 ".\gramatica.y"
{ logger.logError("[Parser] Se esperaba un identificador nombre para la funcion"); }
break;
case 111:
//#line 213 ".\gramatica.y"
{ logger.logError("[Parser] Se esperaba un ( luego del nombre de la funcion"); }
break;
case 112:
//#line 214 ".\gramatica.y"
{ logger.logError("[Parser] Se esperaba un ) luego del nombre para la funcion"); }
break;
case 113:
//#line 215 ".\gramatica.y"
{ logger.logError("[Parser] Se esperaba un tipo de return para la funcion"); }
break;
case 114:
//#line 216 ".\gramatica.y"
{ logger.logError("[Parser] Se esperaba un identificador nombre para la funcion"); }
break;
case 115:
//#line 217 ".\gramatica.y"
{ logger.logError("[Parser] Se esperaba un ( luego del nombre de la funcion"); }
break;
case 116:
//#line 218 ".\gramatica.y"
{ logger.logError("[Parser] Se esperaba un ) luego del nombre para la funcion"); }
break;
case 118:
//#line 223 ".\gramatica.y"
{ logger.logError("[Parser] Se esperaba un ; al final de la sentencia return"); }
break;
case 119:
//#line 224 ".\gramatica.y"
{ logger.logError("[Parser] Se esperaba un ( en la sentencia return"); }
break;
case 120:
//#line 225 ".\gramatica.y"
{ logger.logError("[Parser] Se esperaba un ) en la sentencia return"); }
break;
case 121:
//#line 226 ".\gramatica.y"
{ logger.logError("[Parser] Se esperaba una expresion en la sentencia return"); }
break;
case 124:
//#line 232 ".\gramatica.y"
{ logger.logError("[Parser] Hay mas de 2 parametros en la funcion"); }
break;
case 127:
//#line 241 ".\gramatica.y"
{
		GeneracionCodigoIntermedio instance = GeneracionCodigoIntermedio.getInstance();
		instance.agregarTipoAParametro(val_peek(0).obj[0], val_peek(1).obj[0]);
	}
break;
case 129:
//#line 245 ".\gramatica.y"
{ logger.logError("[Parser] Se esperaba un identificador nombre para el parametro"); }
break;
case 130:
//#line 246 ".\gramatica.y"
{ logger.logError("[Parser] Se esperaba un tipo valido para el parametro"); }
break;
case 131:
//#line 250 ".\gramatica.y"
{ logger.logSuccess("[Parser] Declaracion de constantes detectado"); }
break;
case 132:
//#line 251 ".\gramatica.y"
{ logger.logError("[Parser] Se esperaba ; al final de la declaracion de constantes"); }
break;
case 133:
//#line 252 ".\gramatica.y"
{ logger.logError("[Parser] Se esperaba una lista de declaracion de constantes"); }
break;
case 137:
//#line 262 ".\gramatica.y"
{ logger.logError("[Parser] Se esperaba una constante del lado derecho de la asignacion"); }
break;
case 138:
//#line 263 ".\gramatica.y"
{ logger.logError("[Parser] Se esperaba el simbolo asignacion en la declaracion de constantes"); }
break;
case 139:
//#line 264 ".\gramatica.y"
{ logger.logError("[Parser] Se esperaba una asignacion en la declaracion de constantes"); }
break;
case 154:
//#line 288 ".\gramatica.y"
{ 
		logger.logSuccess("[Parser] Sentencia break detectada"); 
		Terceto tercetoBreak = new Terceto("BI", "-", "-");

		GeneracionCodigoIntermedio instance = GeneracionCodigoIntermedio.getInstance();
		instance.agregarTercetoBreakAListaTercetosBreakDo(tercetoBreak);
		instance.agregarTerceto(tercetoBreak);
	}
break;
case 155:
//#line 296 ".\gramatica.y"
{ 
		logger.logSuccess("[Parser] Sentencia break con etiqueta detectada"); 

		Terceto tercetoBreak = new Terceto("BI", "-", "-");

		GeneracionCodigoIntermedio instance = GeneracionCodigoIntermedio.getInstance();
		instance.agregarTerceto(tercetoBreak);
		instance.agregarTercetoBreakAEtiquetaDo(val_peek(1).obj[0], tercetoBreak);
	}
break;
case 156:
//#line 305 ".\gramatica.y"
{ logger.logError("[Parser] Se esperaba un ; luego de la sentencia break"); }
break;
case 157:
//#line 306 ".\gramatica.y"
{ logger.logError("[Parser] Se esperaba un ; luego de la sentencia break"); }
break;
case 158:
//#line 307 ".\gramatica.y"
{ logger.logError("[Parser] Se esperaba una etiqueta en la sentencia break"); }
break;
case 159:
//#line 311 ".\gramatica.y"
{ 
		logger.logSuccess("[Parser] Sentencia continue detectada"); 

		GeneracionCodigoIntermedio instance = GeneracionCodigoIntermedio.getInstance();
		int posPrimeraInstruccionDo = instance.getUltimaPosicionTerceto();

		Terceto tercetoContinue = new Terceto("BI", "[" + String.valueOf(posPrimeraInstruccionDo) + "]", "-");
		instance.agregarTerceto(tercetoContinue);
	}
break;
case 160:
//#line 320 ".\gramatica.y"
{ logger.logError("[Parser] Se esperaba un ; al final de la sentencia continue"); }
break;
case 162:
//#line 325 ".\gramatica.y"
{
		GeneracionCodigoIntermedio instance = GeneracionCodigoIntermedio.getInstance();
		ArrayList<Terceto> tercetos_etiqueta_break = instance.getTercetosBreakDeEtiquetaDo(val_peek(2).obj[0]);
		Iterator<Terceto> it = tercetos_etiqueta_break.listIterator();

		while(it.hasNext()) {
			Terceto tercetoBreakConEtiqueta = it.next();
			tercetoBreakConEtiqueta.setOperando1("[" + instance.getTamanioListaTercetos() + "]");
		}

		instance.borrarEtiquetaDo(val_peek(2).obj[0]);
	}
break;
case 163:
//#line 340 ".\gramatica.y"
{
		GeneracionCodigoIntermedio instance = GeneracionCodigoIntermedio.getInstance();
		instance.agregarDoConEtiqueta(val_peek(0).obj[0]);
		yyval.obj[0] = val_peek(0).obj[0];
	}
break;
case 164:
//#line 348 ".\gramatica.y"
{ 
		logger.logSuccess("[Parser] Sentencia do until detectada"); 
		GeneracionCodigoIntermedio instance = GeneracionCodigoIntermedio.getInstance();
		Terceto tercetoDo = instance.desapilarTerceto();
		int posPrimerTerceto = instance.desapilarPosicionTerceto();

		tercetoDo.setOperando2("[" + posPrimerTerceto + "]");

		ArrayList<Terceto> lista_breaks_do = instance.getListaTercetosBreakDo();
		Iterator<Terceto> it = lista_breaks_do.listIterator();

		while (it.hasNext()) {
			Terceto breakTerceto = it.next();
			breakTerceto.setOperando1("[" + instance.getTamanioListaTercetos() + "]");
		}
	}
break;
case 165:
//#line 364 ".\gramatica.y"
{ logger.logError("[Parser] Se esperaba un ; al final de la sentencia do"); }
break;
case 166:
//#line 368 ".\gramatica.y"
{
		GeneracionCodigoIntermedio instance = GeneracionCodigoIntermedio.getInstance();
		instance.apilarPosicionTerceto(instance.getTamanioListaTercetos());
		instance.iniciarListaTercetosBreakDo();
	}
break;
case 167:
//#line 376 ".\gramatica.y"
{
		GeneracionCodigoIntermedio instance = GeneracionCodigoIntermedio.getInstance();
		instance.agregarUsoAIdentificador(val_peek(0).obj[0], "nombre_etiqueta");
	}
break;
case 170:
//#line 385 ".\gramatica.y"
{ logger.logError("[Parser] Se esperaba un } al final de la sentencia do"); }
break;
case 171:
//#line 386 ".\gramatica.y"
{ logger.logError("[Parser] Se esperaba un { en la sentencia do"); }
break;
case 174:
//#line 396 ".\gramatica.y"
{ 
		logger.logSuccess("[Parser] Asignacion detectada"); 

		GeneracionCodigoIntermedio instance = GeneracionCodigoIntermedio.getInstance();

		Terceto terceto = new Terceto(":=", val_peek(3).obj[0], val_peek(1).obj[0]);

		val_peek(3).obj[1] = ts.getTipo(val_peek(3).obj[0]);
		
		if (val_peek(3).obj[1].contains("ui16") && val_peek(1).obj[1].contains("ui16")){
			instance.agregarTerceto(terceto);
			yyval.obj[1] = "ui16";
		}
		else if (val_peek(3).obj[1].contains("f64") && val_peek(1).obj[1].contains("f64")){
			instance.agregarTerceto(terceto);
			yyval.obj[1] = "f64";
		}
		else if (val_peek(3).obj[1].contains("ui16") && val_peek(1).obj[1].contains("f64")){
			logger.logError("[Generacion de codigo] Incompatibilidad de tipos");
		}
		else if (val_peek(3).obj[1].contains("f64") && val_peek(1).obj[1].contains("ui16")){
			Terceto aux = new Terceto("itof", val_peek(1).obj[0], "-");
			terceto.setOperando1("[" + String.valueOf(instance.getTamanioListaTercetos() + "]"));
			instance.agregarTerceto(aux);
			instance.agregarTerceto(terceto);
			yyval.obj[1] = "f64";
		}
		yyval.obj[0] = val_peek(3).obj[0];

	}
break;
case 175:
//#line 426 ".\gramatica.y"
{logger.logError("[Parser] Se espera una expresion del lado derecho de la asignacion");}
break;
case 176:
//#line 427 ".\gramatica.y"
{ logger.logError("[Parser] Se espera un ; al final de la asignacion"); }
break;
case 177:
//#line 428 ".\gramatica.y"
{ logger.logError("[Parser] Se espera el simbolo =: en lugar de = para la asignacion"); }
break;
case 178:
//#line 429 ".\gramatica.y"
{ logger.logError("[Parser] Se espera el simbolo =: en lugar de = para la asignacion"); }
break;
case 179:
//#line 433 ".\gramatica.y"
{ logger.logSuccess("[Parser] Sentencia when detectada"); }
break;
case 180:
//#line 434 ".\gramatica.y"
{ logger.logError("[Parser] Se esperaba la palabra reservada then en la sentencia when"); }
break;
case 181:
//#line 435 ".\gramatica.y"
{ logger.logError("[Parser] Se esperaba un ; al final de la sentencia when"); }
break;
case 182:
//#line 436 ".\gramatica.y"
{ logger.logError("[Parser] Se esperaba la palabra reservada then en la sentencia when"); }
break;
case 183:
//#line 437 ".\gramatica.y"
{ logger.logError("[Parser] Se esperaban sentencias dentro del when"); }
break;
case 186:
//#line 447 ".\gramatica.y"
{ 
		logger.logSuccess("[Parser] Sentencia if then detectada");

		GeneracionCodigoIntermedio instance = GeneracionCodigoIntermedio.getInstance();

		Terceto bi = instance.desapilarTerceto();
		bi.setOperando1("[" + String.valueOf(instance.getTamanioListaTercetos()) + "]");
	}
break;
case 187:
//#line 455 ".\gramatica.y"
{ 
		logger.logSuccess("[Parser] Sentencia if then else detectada"); 
		GeneracionCodigoIntermedio instance = GeneracionCodigoIntermedio.getInstance();
		Terceto bi = instance.desapilarTerceto();
		bi.setOperando1("[" + String.valueOf(instance.getTamanioListaTercetos()) + "]");
	}
break;
case 188:
//#line 461 ".\gramatica.y"
{ logger.logError("[Parser] Se esperaba un ; al final de la sentencia seleccion"); }
break;
case 189:
//#line 462 ".\gramatica.y"
{ logger.logError("[Parser] Se esperaba un ; al final de la sentencia seleccion"); }
break;
case 190:
//#line 463 ".\gramatica.y"
{ logger.logError("[Parser] Se esperaban sentencias en la sentencia seleccion"); }
break;
case 191:
//#line 464 ".\gramatica.y"
{ logger.logError("[Parser] Se esperaban la palabra reservada then en la sentencia seleccion"); }
break;
case 192:
//#line 465 ".\gramatica.y"
{ logger.logError("[Parser] Se esperaban la palabra reservada then en la sentencia seleccion"); }
break;
case 193:
//#line 466 ".\gramatica.y"
{ logger.logError("[Parser] Se esperaban sentencias en la sentencia seleccion"); }
break;
case 196:
//#line 472 ".\gramatica.y"
{ logger.logError("[Parser] Se esperaban sentencias dentro de la seleccion"); }
break;
case 197:
//#line 473 ".\gramatica.y"
{ logger.logError("[Parser] Se esperaba un } al final de la seleccion"); }
break;
case 198:
//#line 474 ".\gramatica.y"
{ logger.logError("[Parser] Se esperaba un { en la seleccion"); }
break;
case 201:
//#line 483 ".\gramatica.y"
{

		GeneracionCodigoIntermedio instance = GeneracionCodigoIntermedio.getInstance();

		Terceto t = instance.desapilarTerceto();

		t.setOperando2("[" + String.valueOf(instance.getTamanioListaTercetos() + 1) + "]");

		Terceto bi = new Terceto("BI", "-", "-");

		instance.agregarTerceto(bi);
		instance.apilarTerceto(bi);
	}
break;
case 203:
//#line 504 ".\gramatica.y"
{
		GeneracionCodigoIntermedio instance = GeneracionCodigoIntermedio.getInstance();
		int tercetoPosicion = 0;

		Terceto terceto = new Terceto(val_peek(2).obj[0], val_peek(3).obj[0], val_peek(1).obj[0]);

		tercetoPosicion = instance.getTamanioListaTercetos();

		instance.agregarTerceto(terceto);
		
		yyval.obj[0] = "[" + tercetoPosicion + "]";

		terceto = new Terceto("BF", "[" + tercetoPosicion + "]", "-");

		instance.agregarTerceto(terceto);
		instance.apilarTerceto(terceto);

		yyval.obj[0] = "[" + tercetoPosicion + "]";
	}
break;
case 204:
//#line 523 ".\gramatica.y"
{ logger.logError("[Parser] Se esperaba un expresion del lado derecho de la comparacion"); }
break;
case 205:
//#line 524 ".\gramatica.y"
{ logger.logError("[Parser] Se esperaba un expresion del lado izquierdo de la comparacion"); }
break;
case 206:
//#line 525 ".\gramatica.y"
{ logger.logError("[Parser] Se esperaba un ( al comienzo de la comparacion"); }
break;
case 207:
//#line 526 ".\gramatica.y"
{ logger.logError("[Parser] Se esperaba un ) al final de la comparacion"); }
break;
case 208:
//#line 527 ".\gramatica.y"
{ logger.logError("[Parser] Se esperaba una comparacion"); }
break;
case 209:
//#line 531 ".\gramatica.y"
{yyval.obj[0] = ">=";}
break;
case 210:
//#line 532 ".\gramatica.y"
{yyval.obj[0] = "<=";}
break;
case 211:
//#line 533 ".\gramatica.y"
{yyval.obj[0] = "=!";}
break;
case 212:
//#line 534 ".\gramatica.y"
{yyval.obj[0] = ">";}
break;
case 213:
//#line 535 ".\gramatica.y"
{yyval.obj[0] = "<";}
break;
case 214:
//#line 536 ".\gramatica.y"
{yyval.obj[0] = "=";}
break;
case 215:
//#line 540 ".\gramatica.y"
{
		GeneracionCodigoIntermedio instance = GeneracionCodigoIntermedio.getInstance();

		yyval.obj = instance.AgregarTercetoExpresiones(yyval.obj[0], yyval.obj[1], val_peek(2).obj[0], val_peek(2).obj[1], val_peek(0).obj[0], val_peek(0).obj[1], "+");

	}
break;
case 216:
//#line 546 ".\gramatica.y"
{

		GeneracionCodigoIntermedio instance = GeneracionCodigoIntermedio.getInstance();

		yyval.obj = instance.AgregarTercetoExpresiones(yyval.obj[0], yyval.obj[1], val_peek(2).obj[0], val_peek(2).obj[1], val_peek(0).obj[0], val_peek(0).obj[1], "-");
	}
break;
case 217:
//#line 552 ".\gramatica.y"
{
		
		yyval.obj[0] = val_peek(0).obj[0];
		yyval.obj[1] = val_peek(0).obj[1];
	}
break;
case 218:
//#line 560 ".\gramatica.y"
{
		GeneracionCodigoIntermedio instance = GeneracionCodigoIntermedio.getInstance();

		
		yyval.obj = instance.AgregarTercetoExpresiones(yyval.obj[0], yyval.obj[1], val_peek(2).obj[0], val_peek(2).obj[1], val_peek(0).obj[0], val_peek(0).obj[1], "*");

	}
break;
case 219:
//#line 567 ".\gramatica.y"
{

		GeneracionCodigoIntermedio instance = GeneracionCodigoIntermedio.getInstance();
		yyval.obj = instance.AgregarTercetoExpresiones(yyval.obj[0], yyval.obj[1], val_peek(2).obj[0], val_peek(2).obj[1], val_peek(0).obj[0], val_peek(0).obj[1], "/");
	}
break;
case 220:
//#line 572 ".\gramatica.y"
{
		yyval.obj[0] = val_peek(0).obj[0];
		yyval.obj[1] = val_peek(0).obj[1];
	}
break;
case 221:
//#line 579 ".\gramatica.y"
{
		yyval.obj[0] = val_peek(0).obj[0];
		yyval.obj[1] = ts.getTipo(val_peek(0).obj[0]);
	}
break;
case 222:
//#line 583 ".\gramatica.y"
{
		
		yyval.obj[0] = val_peek(0).obj[0];
		yyval.obj[1] = ts.getTipo(val_peek(0).obj[0]);
	}
break;
case 230:
//#line 607 ".\gramatica.y"
{ 
		logger.logSuccess("[Parser] Sentencia out detectada"); 
		GeneracionCodigoIntermedio instance = GeneracionCodigoIntermedio.getInstance();

		Terceto out = new Terceto("out", val_peek(2).obj[0], "-");

		instance.agregarTerceto(out);
	}
break;
case 231:
//#line 615 ".\gramatica.y"
{ 
		logger.logSuccess("[Parser] Sentencia out detectada"); 
		GeneracionCodigoIntermedio instance = GeneracionCodigoIntermedio.getInstance();

		Terceto out = new Terceto("out", val_peek(2).obj[0], "-");

		instance.agregarTerceto(out);
	}
break;
case 232:
//#line 623 ".\gramatica.y"
{ logger.logError("[Parser] Se esperaba una cadena o identificador en la sentencia out"); }
break;
case 233:
//#line 624 ".\gramatica.y"
{ logger.logError("[Parser] Se esperaba un ( en la sentencia out"); }
break;
case 234:
//#line 625 ".\gramatica.y"
{ logger.logError("[Parser] Se esperaba un ) en la sentencia out"); }
break;
case 235:
//#line 626 ".\gramatica.y"
{ logger.logError("[Parser] Se esperaba un ( en la sentencia out"); }
break;
case 236:
//#line 627 ".\gramatica.y"
{ logger.logError("[Parser] Se esperaba un ) en la sentencia out"); }
break;
case 237:
//#line 628 ".\gramatica.y"
{ logger.logError("[Parser] Se espera un ; al final de la sentencia out"); }
break;
case 238:
//#line 629 ".\gramatica.y"
{ logger.logError("[Parser] Se espera un ; al final de la sentencia out"); }
break;
case 240:
//#line 634 ".\gramatica.y"
{ constanteConSigno(val_peek(0).obj[0]); }
break;
//#line 2073 "Parser.java"
//########## END OF USER-SUPPLIED ACTIONS ##########
    }//switch
    //#### Now let's reduce... ####
    if (yydebug) debug("reduce");
    state_drop(yym);             //we just reduced yylen states
    yystate = state_peek(0);     //get new state
    val_drop(yym);               //corresponding value drop
    yym = yylhs[yyn];            //select next TERMINAL(on lhs)
    if (yystate == 0 && yym == 0)//done? 'rest' state and at first TERMINAL
      {
      if (yydebug) debug("After reduction, shifting from state 0 to state "+YYFINAL+"");
      yystate = YYFINAL;         //explicitly say we're done
      state_push(YYFINAL);       //and save it
      val_push(yyval);           //also save the semantic value of parsing
      if (yychar < 0)            //we want another character?
        {
        yychar = yylex();        //get next character
        if (yychar<0) yychar=0;  //clean, if necessary
        if (yydebug)
          yylexdebug(yystate,yychar);
        }
      if (yychar == 0)          //Good exit (if lex returns 0 ;-)
         break;                 //quit the loop--all DONE
      }//if yystate
    else                        //else not done yet
      {                         //get next state and push, for next yydefred[]
      yyn = yygindex[yym];      //find out where to go
      if ((yyn != 0) && (yyn += yystate) >= 0 &&
            yyn <= YYTABLESIZE && yycheck[yyn] == yystate)
        yystate = yytable[yyn]; //get new state
      else
        yystate = yydgoto[yym]; //else go to new defred
      if (yydebug) debug("after reduction, shifting from state "+state_peek(0)+" to state "+yystate+"");
      state_push(yystate);     //going again, so push state & val...
      val_push(yyval);         //for next action
      }
    }//main loop
  return 0;//yyaccept!!
}
//## end of method parse() ######################################



//## run() --- for Thread #######################################
/**
 * A default run method, used for operating this parser
 * object in the background.  It is intended for extending Thread
 * or implementing Runnable.  Turn off with -Jnorun .
 */
public void run()
{
  yyparse();
}
//## end of method run() ########################################



//## Constructors ###############################################
/**
 * Default constructor.  Turn off with -Jnoconstruct .

 */
public Parser()
{
  //nothing to do
}


/**
 * Create a parser, setting the debug to true or false.
 * @param debugMe true for debugging, false for no debug.
 */
public Parser(boolean debugMe)
{
  yydebug=debugMe;
}
//###############################################################



}
//################### END OF CLASS ##############################
