//### This file created by BYACC 1.8(/Java extension  1.15)
//### Java capabilities added 7 Jan 97, Bob Jamison
//### Updated : 27 Nov 97  -- Bob Jamison, Joe Nieten
//###           01 Jan 98  -- Bob Jamison -- fixed generic semantic constructor
//###           01 Jun 99  -- Bob Jamison -- added Runnable support
//###           06 Aug 00  -- Bob Jamison -- made state variables class-global
//###           03 Jan 01  -- Bob Jamison -- improved flags, tracing
//###           16 May 01  -- Bob Jamison -- added custom stack sizing
//###           04 Mar 02  -- Yuval Oren  -- improved java performance, added options
//###           14 Mar 02  -- Tomas Hurka -- -d support, static initializer workaround
//### Please send bug reports to tom@hukatronic.cz
//### static char yysccsid[] = "@(#)yaccpar	1.8 (Berkeley) 01/20/90";



package compilador;



//#line 2 "./src/compilador/gramatica.y"
import java.io.File;
//#line 19 "Parser.java"




public class Parser
{

boolean yydebug;        //do I want debug output?
int yynerrs;            //number of errors so far
int yyerrflag;          //was there an error?
int yychar;             //the current working character

//########## MESSAGES ##########
//###############################################################
// method: debug
//###############################################################
void debug(String msg)
{
  if (yydebug)
    System.out.println(msg);
}

//########## STATE STACK ##########
final static int YYSTACKSIZE = 500;  //maximum stack size
int statestk[] = new int[YYSTACKSIZE]; //state stack
int stateptr;
int stateptrmax;                     //highest index of stackptr
int statemax;                        //state when highest index reached
//###############################################################
// methods: state stack push,pop,drop,peek
//###############################################################
final void state_push(int state)
{
  try {
		stateptr++;
		statestk[stateptr]=state;
	 }
	 catch (ArrayIndexOutOfBoundsException e) {
     int oldsize = statestk.length;
     int newsize = oldsize * 2;
     int[] newstack = new int[newsize];
     System.arraycopy(statestk,0,newstack,0,oldsize);
     statestk = newstack;
     statestk[stateptr]=state;
  }
}
final int state_pop()
{
  return statestk[stateptr--];
}
final void state_drop(int cnt)
{
  stateptr -= cnt; 
}
final int state_peek(int relative)
{
  return statestk[stateptr-relative];
}
//###############################################################
// method: init_stacks : allocate and prepare stacks
//###############################################################
final boolean init_stacks()
{
  stateptr = -1;
  val_init();
  return true;
}
//###############################################################
// method: dump_stacks : show n levels of the stacks
//###############################################################
void dump_stacks(int count)
{
int i;
  System.out.println("=index==state====value=     s:"+stateptr+"  v:"+valptr);
  for (i=0;i<count;i++)
    System.out.println(" "+i+"    "+statestk[i]+"      "+valstk[i]);
  System.out.println("======================");
}


//########## SEMANTIC VALUES ##########
//public class ParserVal is defined in ParserVal.java


String   yytext;//user variable to return contextual strings
ParserVal yyval; //used to return semantic vals from action routines
ParserVal yylval;//the 'lval' (result) I got from yylex()
ParserVal valstk[];
int valptr;
//###############################################################
// methods: value stack push,pop,drop,peek.
//###############################################################
void val_init()
{
  valstk=new ParserVal[YYSTACKSIZE];
  yyval=new ParserVal();
  yylval=new ParserVal();
  valptr=-1;
}
void val_push(ParserVal val)
{
  if (valptr>=YYSTACKSIZE)
    return;
  valstk[++valptr]=val;
}
ParserVal val_pop()
{
  if (valptr<0)
    return new ParserVal();
  return valstk[valptr--];
}
void val_drop(int cnt)
{
int ptr;
  ptr=valptr-cnt;
  if (ptr<0)
    return;
  valptr = ptr;
}
ParserVal val_peek(int relative)
{
int ptr;
  ptr=valptr-relative;
  if (ptr<0)
    return new ParserVal();
  return valstk[ptr];
}
final ParserVal dup_yyval(ParserVal val)
{
  ParserVal dup = new ParserVal();
  dup.ival = val.ival;
  dup.dval = val.dval;
  dup.sval = val.sval;
  dup.obj = val.obj;
  return dup;
}
//#### end semantic value section ####
public final static short ID=257;
public final static short CTE=258;
public final static short CADENA=259;
public final static short IF=260;
public final static short ELSE=261;
public final static short ENDIF=262;
public final static short PRINT=263;
public final static short VOID=264;
public final static short RETURN=265;
public final static short COMP_MAYOR_IGUAL=266;
public final static short COMP_MENOR_IGUAL=267;
public final static short COMP_IGUAL=268;
public final static short COMP_DISTINTO=269;
public final static short CLASS=270;
public final static short WHILE=271;
public final static short DO=272;
public final static short INTERFACE=273;
public final static short IMPLEMENT=274;
public final static short INT=275;
public final static short ULONG=276;
public final static short FLOAT=277;
public final static short OPERADOR_MENOS=278;
public final static short YYERRCODE=256;
final static short yylhs[] = {                           -1,
    0,    0,    0,    0,    0,    1,    1,    2,    2,    2,
    4,    4,    4,    4,    4,    4,   11,   11,   12,   12,
   13,   13,   13,   13,   13,   10,   10,    9,    9,    9,
    9,    9,    9,    9,    9,    9,    9,    9,   15,   19,
   15,   15,   15,   15,   15,   15,   15,   15,   15,    8,
    8,    8,    8,    8,    8,    8,    8,    8,   14,   14,
   14,   24,   14,   14,   14,   14,   14,   20,   20,   20,
   20,   20,   20,   16,   16,   16,   16,   16,   16,   26,
   27,   21,   21,   21,   21,   21,   21,   22,   22,   22,
   22,   22,   22,   22,   22,   22,   22,   22,   18,   18,
   18,   18,   18,   18,   18,   18,   18,   18,   18,   23,
   23,   23,   23,   23,   23,   23,   23,   23,   23,   23,
   29,   29,   30,   30,   25,   25,   25,   25,   28,   28,
   28,   28,    7,    7,    7,    7,    7,    7,    7,    6,
    6,    6,    6,    6,    6,   34,   34,    5,    5,    5,
   32,   32,    3,    3,    3,    3,   35,   35,   35,   41,
   41,   38,   38,   38,   42,   42,   43,   43,   43,   43,
   45,   45,   45,   45,   45,   37,   46,   46,   46,   46,
   46,   46,   47,   47,   36,   48,   48,   48,   48,   48,
   50,   50,   44,   44,   44,   44,   44,   44,   44,   44,
   49,   49,   49,   49,   49,   49,   49,   49,   49,   49,
   49,   49,   53,   53,   54,   54,   54,   52,   52,   52,
   51,   40,   40,   39,   39,   39,   39,   17,   17,   17,
   17,   55,   55,   55,   55,   55,   55,   33,   33,   33,
   56,   56,   56,   57,   57,   57,   57,   31,   31,
};
final static short yylen[] = {                            2,
    3,    2,    2,    2,    0,    1,    2,    1,    1,    2,
    1,    1,    1,    1,    1,    1,    1,    2,    1,    1,
    1,    1,    1,    1,    1,    2,    1,    7,    6,    6,
    6,    6,    3,    4,    2,    5,    4,    3,    7,    0,
   13,    6,    6,    3,    4,    2,    5,    4,    3,    9,
    7,    8,    6,    8,    6,    8,    8,    6,    9,    7,
    8,    0,   15,    6,    8,    8,    6,    1,    3,    2,
    2,    2,    1,    3,    4,    3,    3,    2,    1,    1,
    1,    1,    4,    3,    3,    2,    1,    1,    1,    1,
    3,    4,    5,    2,    3,    2,    3,    2,    3,    1,
    1,    4,    5,    6,    3,    4,    3,    4,    2,    1,
    1,    1,    3,    4,    5,    2,    3,    2,    3,    2,
    1,    2,    1,    1,    1,    2,    1,    2,    1,    2,
    1,    2,    3,    2,    2,    3,    2,    3,    2,    5,
    4,    7,    4,    3,    6,    1,    3,    4,    3,    3,
    1,    3,    1,    1,    1,    1,    3,    2,    2,    2,
    1,    4,    3,    2,    1,    2,    2,    1,    3,    2,
    3,    2,    1,    2,    2,    4,    2,    4,    1,    3,
    3,    2,    1,    2,    2,    4,    3,    6,    5,    2,
    2,    1,    5,    4,    7,    6,    4,    3,    4,    3,
    4,    3,    5,    4,    3,    2,    3,    2,    4,    3,
    2,    1,    1,    2,    1,    1,    1,    1,    3,    2,
    2,    1,    3,    1,    1,    1,    1,    3,    2,    2,
    3,    1,    1,    1,    1,    1,    1,    3,    3,    1,
    3,    3,    1,    1,    2,    1,    3,    1,    2,
};
final static short yydefred[] = {                         0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,  224,
  225,  226,    0,    0,    0,    6,    8,    9,   11,   12,
   13,   14,   15,   16,    0,  153,  154,  155,  156,    0,
    0,    0,    0,    0,   10,    0,    0,  248,    0,    0,
  135,    0,  191,   26,    0,    0,    0,    0,   35,    0,
   79,   80,    0,    0,  160,    4,    0,    2,    7,    0,
    0,    0,  222,  159,    0,    0,  164,    0,    0,    0,
    0,  212,   19,   21,   22,   23,    0,    0,   17,   20,
   24,   25,  185,    0,  190,    0,  232,  233,  234,  235,
    0,    0,  236,  237,    0,  246,    0,    0,    0,  243,
  136,  133,  249,  138,    0,  180,   33,    0,  151,   78,
    0,    0,    0,    0,    0,  127,  125,    0,    1,    0,
    0,  150,    0,  152,  157,    0,  227,    0,  163,    0,
    0,  165,    0,    0,    0,    0,  183,    0,    0,    0,
    0,   46,    0,  101,  100,   81,    0,    0,  206,    0,
    0,  208,  215,  216,  217,    0,  213,  211,    0,   18,
  187,    0,    0,  245,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,  178,    0,
   74,    0,   37,    0,   34,    0,    0,   77,  128,  126,
  141,    0,    0,  148,  223,    0,    0,    0,  162,  166,
  167,  175,  174,    0,  176,  184,    0,    0,   44,  109,
    0,    0,    0,    0,    0,  131,  129,    0,  202,    0,
  205,    0,  210,  214,  207,    0,  221,    0,  186,  218,
    0,  247,   72,    0,    0,    0,   71,    0,    0,    0,
    0,    0,    0,    0,  241,  242,    0,   75,   36,    0,
    0,    0,    0,    0,  140,    0,  200,    0,  198,    0,
  169,  171,    0,    0,   89,    0,    0,    0,    0,   99,
    0,   48,    0,   45,    0,    0,  105,  132,    0,  130,
  204,  201,    0,  209,    0,    0,  189,  220,   69,    0,
   87,    0,    0,   55,    0,   58,    0,    0,   30,   31,
    0,   32,    0,    0,  194,    0,  199,  197,   98,    0,
    0,   94,    0,    0,    0,    0,  102,    0,   47,    0,
    0,    0,  106,  203,  188,  219,   86,    0,    0,    0,
    0,    0,    0,   51,   28,    0,  142,    0,  193,    0,
   91,    0,   64,   95,    0,    0,  111,    0,    0,    0,
   67,    0,    0,  103,  123,  124,    0,  121,   42,    0,
   43,    0,   85,   54,   56,   57,    0,    0,  196,   92,
    0,  120,    0,    0,  116,    0,    0,    0,   60,    0,
  104,  122,   39,    0,   83,   50,  195,   93,  113,    0,
   65,  117,   66,    0,    0,    0,  114,    0,   59,    0,
    0,  115,    0,    0,    0,    0,    0,    0,    0,   41,
    0,   63,
};
final static short yydgoto[] = {                         14,
   15,   16,  153,  190,   74,   75,   76,   22,   23,   24,
   78,   79,  155,   81,   82,   53,   95,  147,  384,  169,
  293,  267,  349,  380,  170,   54,  148,  268,  357,  358,
   96,   25,   97,  254,   26,   27,   28,   29,   30,   65,
   31,  131,  132,  133,  137,   32,  138,   33,   83,   34,
  230,  231,  156,  157,   98,   99,  100,
};
final static short yysindex[] = {                      1208,
   15,    0,   51,  143, -153,   79, -217, 1110,  -98,    0,
    0,    0, 1543,    0, 1565,    0,    0,    0,    0,    0,
    0,    0,    0,    0,   57,    0,    0,    0,    0,  -44,
   11,   50, 1230,   73,    0,  234,  121,    0,  151,  -79,
    0,  159,    0,    0,  -69,  -43,   22,  -56,    0,  899,
    0,    0,  -34, 2291,    0,    0, 1587,    0,    0,   -9,
   55,  -39,    0,    0,   -6, -113,    0, -168,  171, 1157,
 1652,    0,    0,    0,    0,    0, 1676, 1698,    0,    0,
    0,    0,    0,  174,    0,  -49,    0,    0,    0,    0,
   76, 1363,    0,    0,  183,    0,  615,   76,   33,    0,
    0,    0,    0,    0,  -24,    0,    0, 1332,    0,    0,
 1720,  196,  215,   66, 1332,    0,    0, 1741,    0,  221,
  141,    0,   84,    0,    0,   14,    0,  -32,    0,   16,
  340,    0,  241,  253,  256,   16,    0,  346, 1303,  258,
  270,    0, 1309,    0,    0,    0,  -27, 2312,    0, 1763,
 1785,    0,    0,    0,    0, 1806,    0,    0, 1829,    0,
    0,   21,    6,    0,  105, 1851,    0,    0, -108, 1874,
  773,   76,   76,   76,   76,  135,   76,   76,    0,  269,
    0, 1896,    0,  276,    0, 1316,  284,    0,    0,    0,
    0,   76,  283,    0,    0,  -23,  180,   -3,    0,    0,
    0,    0,    0,   23,    0,    0, 1385,  294,    0,    0,
 2202,  300,  308,   82, 1332,    0,    0, 1918,    0, 1939,
    0, 1960,    0,    0,    0, 1982,    0, -101,    0,    0,
   32,    0,    0, 2004, 1407,  310,    0, 1407,  312,  -72,
   33,   33,  135,  135,    0,    0,  316,    0,    0,  317,
  311,  318,  135,    5,    0,  187,    0,  329,    0,  330,
    0,    0, 2226,    0,    0,    0,  107, 2027, 1182,    0,
 2049,    0,  331,    0, 1348,  337,    0,    0,  255,    0,
    0,    0, 2072,    0,   42, -101,    0,    0,    0,  307,
    0, 2291,  122,    0,  124,    0, 1256,  344,    0,    0,
  345,    0,   76,  350,    0,   46,    0,    0,    0, 2093,
  353,    0,  273, 1428,  359,  -64,    0,  456,    0,  361,
  365,  363,    0,    0,    0,    0,    0, 2291, 2115,  366,
  368,  372,  147,    0,    0,  135,    0, -101,    0,   91,
    0,  695,    0,    0, 2248,    0,    0,    0,  153, 2137,
    0, 1277,  378,    0,    0,    0, 1144,    0,    0,  380,
    0, 2158,    0,    0,    0,    0,  383,  116,    0,    0,
 2270,    0, 2180,  384,    0,  322,  389,  173,    0,  176,
    0,    0,    0,  186,    0,    0,    0,    0,    0, 2271,
    0,    0,    0,  404,  412,  189,    0, 2281,    0,  413,
  421,    0, 1385, 1332,  205,  428, 1428,  424,  208,    0,
  429,    0,
};
final static short yyrindex[] = {                       475,
    0,  -19,    0,    0,  182,  505,  354,    0,   68,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,  571,    0,  593,    0,
    0,  661,    0,    0,  356,  360,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,  480,    0,    0,    0,
    0,    0,    0,    0,  748,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,  474,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,  546,    0,
    0,    0,    0,    0,  367,    0,    0,    0,    0,    0,
    0,  805,    0,    0,    0,    0,    0,    0,    0,  838,
    0,    0,  872,    0,    0,    0,    0,    0,    0,    0,
    0,    0,  371,   21,  427,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0, 1454, 1477,    0,    0,
    0,    0,    0,    0,  445,  448,    0,    0,    0,    0,
    0,  -25,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,  916,    0,    0,    0,    0, 1148,    0,    0,
    0,    0,    0, 1199,    0,    0,    0,    0,    0,    0,
    0,  967,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,  -35,    0,    0,    0,    0,    0,    0,
  638,  712,  452,  463,    0,    0,    0,    0,    0,    0,
    0,    0,  117,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0, 1499,    0, 1521,    0,    0,    0,    0,
  -21,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,  235,    0,    0,    0,    0,    0,  946,    0,    0,
  991,    0,    0, 1014,    0,    0,    0,    0,    0,   29,
    0,    0,    0,    0,    0,    0,    0,  -20,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,  125,    0,    0,    0,    0,
    0,   44,    0,    0,    0, 1608,    0, 1630,    0,    0,
    0,    0,  246,    0,    0,    0,    0,    0,    0,  237,
    0,  245,    0,    0,    0,    0, 1039,    0,    0,    0,
    0,    0,  249,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,  250,
    0,    0,    0, 1065,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,
};
final static short yygindex[] = {                         0,
  510,   20,    1,  342,  247,  328,  430,    0,    0,  -26,
  453,  -50,   69,    0,    0,    0,  -45,    0,    0,  355,
 -212, -258, -323,    0,  -51,  477,  387, -146, -309, -293,
  525,    0,  -37,    0,    0,  -46,    0,    0,  357,  -93,
    0,    0,  400,    0,  394,    0,    0,    0,    0,    0,
  -54, -218, -111, -152,  441,   86,   90,
};
final static int YYTABLESIZE=2589;
static short yytable[];
static { yytable();}
static void yytable(){
yytable = new short[]{                         64,
   17,  218,  118,  224,  113,  115,   77,  197,   51,  285,
  316,  129,  215,   17,   76,   17,  256,  257,  107,  108,
  151,  135,  121,  123,  227,  295,  151,  160,  378,  163,
   91,  120,  371,   73,   59,   40,  198,  125,  220,   45,
  261,  151,  204,  145,  150,  304,  229,  226,  303,  228,
  154,  159,  126,  165,  116,  126,   46,   17,   35,  182,
  176,  108,  180,  382,  271,  107,  262,  224,  110,  187,
  144,   73,  287,  224,  177,  286,   59,  382,   73,  178,
  398,  126,  325,  409,  333,  286,  339,  340,  134,  338,
   36,  135,  167,  208,   91,    5,   60,  213,  122,   40,
  160,   80,   62,   43,  382,  186,   10,   11,   12,  185,
  283,  116,   84,   85,  234,   91,  310,   61,  189,  368,
   40,  275,   44,  154,  222,  274,  172,  194,  173,  154,
  224,  369,  154,   66,  286,   67,  243,  244,  146,   80,
  251,  258,  260,  127,  405,  232,   80,  172,  216,  173,
  128,   73,  235,  236,  253,  127,  387,  146,   55,  286,
  146,   10,   11,   12,  101,  147,  116,  350,  147,  276,
  189,  167,   68,   10,   11,   12,  288,  172,  103,  173,
  265,  193,  189,  172,  192,  173,   41,   40,  297,  298,
  161,  279,  161,  154,  102,  154,  352,  353,  373,  154,
  109,  306,  104,    3,  105,  350,    4,  264,    6,  146,
  139,  216,   63,  106,  161,    8,  217,  124,  278,   80,
  259,  192,  192,  171,  196,   70,   70,  305,  164,  321,
  288,  326,  179,  127,  189,  291,  114,  227,  291,  183,
  329,  313,  265,  214,  318,   76,   19,   86,   38,  107,
  108,   10,   11,   12,   19,  184,  154,  241,  242,   19,
  350,   19,  127,  216,  191,  336,  245,  246,  278,  264,
  195,  278,   63,   91,   92,  266,  362,  227,   40,  217,
   10,   11,   12,  342,  201,  288,  280,  347,  127,   96,
   96,  355,  116,   94,   19,   93,  202,  291,  127,  203,
   19,  209,  127,   19,   97,   97,   10,   11,   12,  247,
  278,   86,   38,  288,  346,  355,   10,   11,   12,  249,
   10,   11,   12,  376,  252,  347,  255,   20,  116,  189,
  355,  217,   86,   38,  269,   20,  280,  266,   19,  280,
   20,   18,   20,  272,  355,  216,  390,  127,  273,   52,
  278,  301,  346,  294,   18,  296,   18,   19,  406,  299,
  300,  302,  189,  355,   19,   10,   11,   12,  311,  307,
  308,  355,  127,  278,  319,   20,  265,  322,  280,  323,
  347,   20,  348,  330,   20,  331,  356,  334,  335,   52,
   10,   11,   12,  337,  210,  117,  343,  344,   18,   37,
   38,   39,  351,  264,  359,  360,  361,  346,  367,  364,
  356,  365,   19,  217,  374,  366,   19,   19,  280,   20,
  348,  379,  130,  383,  136,  356,  386,  391,   19,   21,
  127,  327,  393,  168,  394,  395,  127,   21,   20,  356,
  162,  280,   21,  127,   21,   20,  392,  399,   10,   11,
   12,  400,  117,  403,   10,   11,   12,  396,  356,  401,
  404,   10,   11,   12,  199,  407,  356,  410,  408,  411,
  205,  266,  412,  244,    5,  348,  179,   21,  177,    3,
   19,   19,  182,   21,   19,  229,   21,  130,  230,  181,
   86,   38,  231,   20,  136,  168,   82,   20,   20,   87,
   88,   89,   90,  228,   27,   62,   84,  117,   40,   20,
  118,  119,  168,  244,  244,  244,  244,  244,  244,  162,
  244,   21,   57,  151,  111,  240,  109,  211,   42,   69,
  200,  206,    4,  244,  244,  244,   19,  175,   19,    0,
   21,   70,    0,   19,   27,  240,    0,   21,    0,    0,
    0,  173,  162,  162,    0,    0,    0,    0,    0,    0,
    0,   20,   20,  109,    0,   20,    3,    0,    0,    4,
  137,    6,    0,    0,   19,   19,  292,    0,    8,  292,
  354,    0,    0,    0,  162,  240,  240,  162,  240,  240,
  240,    0,  134,    0,    0,   21,  127,    0,  244,   21,
   21,    0,  134,  128,    0,  240,  240,  240,   19,    5,
  137,   21,  162,    0,   10,   11,   12,   20,    0,   20,
   10,   11,   12,    0,   20,    0,    0,  168,    0,   27,
    0,  328,  134,  117,  168,    0,    0,  238,  292,    0,
    0,  162,  162,    0,    0,  168,  168,  168,    0,    0,
    0,    0,    0,    0,    0,   20,   20,  172,    0,  173,
  139,    0,  162,   21,   21,    0,    0,   21,    0,  117,
  240,    0,    0,    0,   94,  174,   93,  238,  238,    0,
  238,  238,  238,  173,    0,    0,    0,    0,    0,   20,
  173,    0,    0,    0,  162,  137,  162,  238,  238,  238,
  139,  173,  173,  173,    0,    0,    0,    0,    0,    0,
    0,  239,  109,    0,    0,   69,    0,  134,    4,   21,
    6,   21,    0,    0,  162,    0,   21,   70,    0,  244,
  244,    0,    0,  244,  244,  244,  244,  244,  244,  244,
  244,  244,  244,  244,  244,  244,  244,  158,  244,  244,
  244,  239,  239,    0,  239,  239,  239,   21,   21,    0,
   27,   27,  238,    0,   27,   27,   27,   27,   27,   27,
    0,  239,  239,  239,   27,   27,   27,   27,    0,   27,
   27,   27,    0,    0,    0,  139,    0,  158,    0,    0,
    0,   21,    0,    0,    0,    0,    0,    0,    0,    0,
    0,  240,  240,    0,   38,  240,  240,  240,  240,  240,
  240,  240,  240,  240,  240,  240,  240,  240,  240,  370,
  240,  240,  240,    0,    0,    0,  137,  137,    0,    0,
  137,  137,  137,  137,  137,  137,  239,  144,    0,    0,
  137,  137,  137,  137,   38,  137,  137,  137,  134,  134,
    0,    0,  134,  134,  134,  134,  134,  134,    0,    0,
    0,    0,  134,  134,  134,  134,    0,  134,  134,  134,
    0,  149,  158,    0,    0,    0,    0,  144,    0,    0,
   87,   88,   89,   90,    0,    0,    0,    0,    0,    0,
    0,    0,    0,  238,  238,  166,    0,  238,  238,  238,
  238,  238,  238,  238,  238,  238,  238,  238,  238,  238,
  238,  149,  238,  238,  238,  143,  139,  139,    0,    0,
  139,  139,  139,  139,  139,  139,    0,    0,    0,   38,
  139,  139,  139,  139,    0,  139,  139,  139,   91,  112,
    0,    0,    0,   40,    0,   53,    0,    0,    0,    0,
    0,  109,    0,    0,   69,  143,    0,    4,   94,    6,
   93,    0,  144,    0,    0,    0,   70,  239,  239,    0,
    0,  239,  239,  239,  239,  239,  239,  239,  239,  239,
  239,  239,  239,  239,  239,   53,  239,  239,  239,    0,
   29,    0,    0,    0,    0,    0,  149,    0,    0,    0,
    0,    0,    0,  158,  158,    0,   49,  158,  158,  158,
  158,  158,  158,  145,    0,    0,    0,  158,  158,  158,
  158,    0,  158,  158,  158,    0,    0,    0,    0,    2,
   29,    0,    3,  238,  239,    4,    5,    6,   52,    0,
  143,    0,    7,    0,    8,    9,    0,   10,   11,   12,
    0,    0,    0,  145,    0,    0,    0,    0,    0,    0,
   38,   38,    0,    0,   38,   38,   38,   38,   38,   38,
   53,    0,    0,    0,   38,   38,   38,   38,   52,   38,
   38,   38,    0,    0,    0,    0,    0,    0,    0,    0,
    0,   49,    0,  144,  144,    0,    0,  144,  144,  144,
  144,  144,  144,    0,   61,    0,    0,  144,  144,  144,
  144,    0,  144,  144,  144,   29,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,  149,  149,    0,
    0,  149,  149,  149,  149,  149,  149,    0,  145,    0,
    0,  149,  149,  149,  149,    0,  149,  149,  149,   50,
    0,    0,    0,   49,    0,   86,   38,    0,    0,    0,
    0,    0,    0,   52,   87,   88,   89,   90,    0,    0,
    0,  143,  143,    0,    0,  143,  143,  143,  143,  143,
  143,    0,    0,    0,    0,  143,  143,  143,  143,   61,
  143,  143,  143,    0,    0,    0,  143,    0,    0,    0,
  142,   53,   53,    0,    0,   53,   53,   53,   53,   53,
   53,    0,    0,    0,    0,   53,   53,   53,   53,    0,
   53,   53,   53,   49,    0,    0,   49,   49,   49,   49,
   49,   49,   48,    0,    0,    0,   49,   49,   49,   49,
    0,   49,   49,   49,    0,    0,   29,   29,    0,    0,
   29,   29,   29,   29,   29,   29,    0,    0,    0,    0,
   29,   29,   29,   29,    0,   29,   29,   29,  381,  145,
  145,    0,  170,  145,  145,  145,  145,  145,  145,  141,
    0,    0,    0,  145,  145,  145,  145,    0,  145,  145,
  145,    0,    0,    0,   52,   52,    0,    0,   52,   52,
   52,   52,   52,   52,  263,    0,    0,    0,   52,   52,
   52,   52,    0,   52,   52,   52,    0,    0,    0,    0,
    0,   61,    0,  172,   61,   61,   61,   61,   61,   61,
   13,    0,    0,    0,   61,   61,   61,   61,    0,   61,
   61,   61,   91,  207,    0,    0,    0,   40,   91,  212,
    0,    0,   71,   40,   72,   91,  250,    0,    0,    0,
   40,    0,   94,    0,   93,    0,    2,    0,   94,    3,
   93,   91,    4,    5,    6,   94,   40,   93,  290,    7,
   47,    8,    9,    0,   10,   11,   12,   91,  320,    0,
    0,   94,   40,   93,    0,    0,    0,    0,    0,  345,
  109,    0,    0,   69,  170,    0,    4,   94,    6,   93,
    0,  170,    0,    2,    0,   70,   69,    0,    0,    4,
    5,    6,  170,  170,  170,    0,    7,  140,   70,    9,
    0,   10,   11,   12,    0,    0,    0,    0,    2,    0,
    0,   69,  314,  315,    4,    5,    6,    0,    0,    0,
    0,    7,    0,   70,    9,  172,   10,   11,   12,    0,
    0,    0,  172,    1,    2,    0,    0,    3,    0,    0,
    4,    5,    6,  172,  172,  172,    0,    7,    0,    8,
    9,    0,   10,   11,   12,  166,    2,    0,    0,   69,
    0,    0,    4,    5,    6,    0,    0,    0,    0,    7,
    0,   70,    9,    0,   10,   11,   12,  263,    0,    0,
    0,    0,    2,    0,    0,    3,    0,  332,    4,    5,
    6,    0,    0,    0,    0,    7,    0,    8,    9,  290,
   10,   11,   12,    2,    0,    0,   69,    0,  377,    4,
    5,    6,    0,    0,    0,    0,    7,    0,   70,    9,
  345,   10,   11,   12,    0,    0,    0,    0,    0,   86,
   38,    0,    0,    0,    0,   86,   38,    0,   87,   88,
   89,   90,   86,   38,   87,   88,   89,   90,  127,    0,
    0,   87,   88,   89,   90,    0,    0,    0,   86,   38,
    0,    0,    0,    0,    0,    0,    0,   87,   88,   89,
   90,  125,    0,    0,   86,   38,    0,    0,    0,    0,
    0,    0,    0,   87,   88,   89,   90,    0,    0,    2,
    0,    0,    3,  131,    0,    4,    5,    6,    0,    0,
    0,    0,    7,    0,    8,    9,    0,   10,   11,   12,
    0,    2,    0,    0,   69,  129,    0,    4,    5,    6,
    0,    0,    0,    0,    7,    0,   70,    9,    0,   10,
   11,   12,    0,    2,    0,    0,    3,   56,    0,    4,
    5,    6,    0,    0,    0,    0,    7,    0,    8,    9,
    0,   10,   11,   12,    2,    0,    0,   69,    0,   58,
    4,    5,    6,    0,    0,    0,    0,    7,    0,   70,
    9,    0,   10,   11,   12,    0,    0,    0,    0,    0,
  127,  119,    0,  127,   73,   73,  127,  127,  127,    0,
    0,    0,    0,  127,    0,  127,  127,    0,  127,  127,
  127,    0,  131,  125,    0,    0,  125,   68,   68,  125,
  125,  125,    0,    0,    0,    0,  125,    0,  125,  125,
    0,  125,  125,  125,  129,  131,    0,    0,  131,   90,
   90,  131,  131,  131,    0,    0,    0,    0,  131,    0,
  131,  131,    0,  131,  131,  131,  149,  129,    0,    0,
  129,   88,   88,  129,  129,  129,    0,    0,    0,    0,
  129,    0,  129,  129,    0,  129,  129,  129,    1,    2,
  152,    0,    3,    0,    0,    4,    5,    6,    0,    0,
    0,    0,    7,    0,    8,    9,    0,   10,   11,   12,
    1,    2,  158,    0,    3,    0,    0,    4,    5,    6,
    0,    0,    0,    0,    7,    0,    8,    9,    0,   10,
   11,   12,    1,    2,  181,    0,    3,    0,    0,    4,
    5,    6,    0,    0,    0,    0,    7,    0,    8,    9,
    0,   10,   11,   12,  131,  188,    0,  131,    0,  112,
  131,  131,  131,    0,    0,    0,    0,  131,    0,  131,
  131,    0,  131,  131,  131,    0,  129,  219,    0,  129,
    0,  110,  129,  129,  129,    0,    0,    0,    0,  129,
    0,  129,  129,    0,  129,  129,  129,    0,    2,  221,
    0,   69,    0,    0,    4,    5,    6,    0,    0,    0,
    0,    7,    0,   70,    9,    0,   10,   11,   12,    0,
  223,    0,    2,    0,    0,   69,    0,    0,    4,    5,
    6,    0,    0,    0,    0,    7,    0,   70,    9,    0,
   10,   11,   12,  225,    2,    0,    0,   69,    0,    0,
    4,    5,    6,    0,    0,    0,    0,    7,    0,   70,
    9,    0,   10,   11,   12,  233,    2,    0,    0,    3,
    0,    0,    4,    5,    6,    0,    0,    0,    0,    7,
    0,    8,    9,    0,   10,   11,   12,    2,  237,    0,
    3,    0,    0,    4,    5,    6,    0,    0,    0,    0,
    7,    0,    8,    9,    0,   10,   11,   12,    0,    2,
  248,    0,   69,    0,    0,    4,    5,    6,    0,    0,
    0,    0,    7,    0,   70,    9,    0,   10,   11,   12,
    0,    2,  277,    0,   69,    0,    0,    4,    5,    6,
    0,    0,    0,    0,    7,    0,   70,    9,    0,   10,
   11,   12,    2,  281,    0,   69,    0,    0,    4,    5,
    6,    0,    0,    0,    0,    7,    0,   70,    9,    0,
   10,   11,   12,    0,  282,    2,    0,    0,   69,    0,
    0,    4,    5,    6,    0,    0,    0,    0,    7,    0,
   70,    9,    0,   10,   11,   12,  284,    2,    0,    0,
    3,    0,    0,    4,    5,    6,    0,    0,    0,    0,
    7,    0,    8,    9,    0,   10,   11,   12,  289,    0,
    2,    0,    0,    3,    0,    0,    4,    5,    6,    0,
    0,    0,    0,    7,    0,    8,    9,    0,   10,   11,
   12,  312,    2,    0,    0,    3,    0,    0,    4,    5,
    6,    0,    0,    0,    0,    7,    0,    8,    9,    0,
   10,   11,   12,  317,    2,    0,    0,   69,    0,    0,
    4,    5,    6,    0,    0,    0,    0,    7,    0,   70,
    9,    0,   10,   11,   12,    2,  324,    0,   69,    0,
    0,    4,    5,    6,    0,    0,    0,    0,    7,    0,
   70,    9,    0,   10,   11,   12,    2,  341,    0,   69,
    0,    0,    4,    5,    6,    0,    0,    0,    0,    7,
    0,   70,    9,    0,   10,   11,   12,    0,    2,  363,
    0,   69,    0,    0,    4,    5,    6,    0,    0,    0,
    0,    7,    0,   70,    9,    0,   10,   11,   12,    0,
    2,  375,    0,    3,    0,    0,    4,    5,    6,    0,
    0,    0,    0,    7,    0,    8,    9,    0,   10,   11,
   12,    0,  385,    2,    0,    0,   69,    0,    0,    4,
    5,    6,    0,    0,    0,    0,    7,    0,   70,    9,
    0,   10,   11,   12,  389,    2,    0,    0,   69,    0,
    0,    4,    5,    6,    0,    0,    0,    0,    7,    0,
   70,    9,    0,   10,   11,   12,  270,    0,    2,    0,
    0,   69,    0,    0,    4,    5,    6,    0,    0,    0,
    0,    7,    0,   70,    9,    0,   10,   11,   12,    2,
  309,    0,   69,    0,    0,    4,    5,    6,    0,    0,
    0,    0,    7,    0,   70,    9,    0,   10,   11,   12,
    0,    2,  372,    0,    3,    0,    0,    4,    5,    6,
    0,    0,    0,    0,    7,    0,    8,    9,    0,   10,
   11,   12,    0,    2,  388,  397,   69,    0,    0,    4,
    5,    6,    0,    0,    0,  402,    7,    0,   70,    9,
    0,   10,   11,   12,    2,    0,    0,    3,    0,    0,
    4,    5,    6,    0,    0,    0,    0,    7,    0,    8,
    9,    0,   10,   11,   12,    0,    2,    0,    0,   69,
    0,    0,    4,    5,    6,    0,    0,    0,    0,    7,
    0,   70,    9,    0,   10,   11,   12,    0,    2,    0,
    0,   69,    0,    0,    4,    5,    0,    0,    0,    0,
    0,    7,    0,   70,    9,    0,   10,   11,   12,    0,
    0,    0,    2,    0,    0,   69,    0,    0,    4,    5,
    0,    0,    0,    0,    0,    7,    0,   70,    9,    0,
   10,   11,   12,    0,    2,    0,    0,   69,    0,    0,
    4,    5,    0,    0,    0,    0,    0,    7,    0,   70,
    9,    0,   10,   11,   12,    0,  109,  109,    0,   69,
   69,    0,    4,    4,    6,    6,    0,  109,    0,    0,
   69,   70,   70,    4,    0,    6,    0,    2,    0,    0,
    3,    0,   70,    4,    5,    6,    0,    0,    0,    0,
    7,    0,    8,    9,    0,   10,   11,   12,    2,    0,
    0,   69,    0,    0,    4,    5,    0,    0,    0,    0,
    0,    7,    0,   70,    9,    0,   10,   11,   12,
};
}
static short yycheck[];
static { yycheck(); }
static void yycheck() {
yycheck = new short[] {                         44,
    0,  148,   54,  156,   50,   40,   33,   40,    8,  228,
  269,  125,   40,   13,   40,   15,   40,   41,   40,   40,
   40,   68,   60,   61,   44,  238,   46,   78,  352,   84,
   40,   41,  342,   33,   15,   45,  130,   44,  150,  257,
   44,   61,  136,   70,   71,   41,   41,  159,   44,   44,
   77,   78,   59,   91,   54,   59,  274,   57,   44,  111,
   98,   40,  108,  357,  211,   44,   44,  220,  125,  115,
   70,   71,   41,  226,   42,   44,   57,  371,   78,   47,
  390,   59,   41,  407,  297,   44,   41,  306,  257,   44,
   40,  138,   92,  139,   40,  264,   40,  143,   44,   45,
  151,   33,   46,  257,  398,   40,  275,  276,  277,   44,
  222,  111,   40,   41,  166,   40,  263,   61,  118,  338,
   45,   40,   44,  150,  151,   44,   43,   44,   45,  156,
  283,   41,  159,  123,   44,  125,  174,  175,   70,   71,
  186,  196,  197,  257,  403,   41,   78,   43,  148,   45,
  264,  151,  261,  262,  192,  257,   41,   41,  257,   44,
   44,  275,  276,  277,   44,   41,  166,  314,   44,  215,
  170,  171,  123,  275,  276,  277,  231,   43,  258,   45,
  207,   41,  182,   43,   44,   45,   44,   45,  261,  262,
  123,  218,  125,  220,   44,  222,  261,  262,  345,  226,
  257,  256,   44,  260,  274,  352,  263,  207,  265,  141,
   40,  211,  257,  257,   41,  272,  148,  257,  218,  151,
   41,   40,   41,   41,  257,  261,  262,   41,  278,  275,
  285,  286,  257,  257,  234,  235,  271,  257,  238,   44,
  292,  268,  269,  271,  271,  271,    0,  257,  258,  271,
  271,  275,  276,  277,    8,   41,  283,  172,  173,   13,
  407,   15,  257,  263,   44,  303,  177,  178,  268,  269,
  257,  271,  257,   40,   41,  207,  328,  257,   45,  211,
  275,  276,  277,  310,   44,  340,  218,  314,  257,  261,
  262,  318,  292,   60,   48,   62,   44,  297,  257,   44,
   54,   44,  257,   57,  261,  262,  275,  276,  277,   41,
  310,  257,  258,  368,  314,  342,  275,  276,  277,   44,
  275,  276,  277,  350,   41,  352,   44,    0,  328,  329,
  357,  263,  257,  258,   41,    8,  268,  269,   92,  271,
   13,    0,   15,   44,  371,  345,  373,  257,   41,    8,
  350,   41,  352,   44,   13,   44,   15,  111,  404,   44,
   44,   44,  362,  390,  118,  275,  276,  277,  262,   41,
   41,  398,  257,  373,   44,   48,  403,   41,  310,  125,
  407,   54,  314,  262,   57,  262,  318,   44,   44,   48,
  275,  276,  277,   44,  125,   54,   44,  125,   57,  257,
  258,  259,   44,  403,   44,   41,   44,  407,  262,   44,
  342,   44,  166,  345,  262,   44,  170,  171,  350,   92,
  352,   44,   66,   44,   68,  357,   44,   44,  182,    0,
  257,  125,   44,   92,  262,  260,  257,    8,  111,  371,
   84,  373,   13,  257,   15,  118,  125,   44,  275,  276,
  277,   40,  111,   41,  275,  276,  277,  272,  390,  271,
   40,  275,  276,  277,  125,  261,  398,   44,   41,  262,
  125,  403,   44,    0,    0,  407,  123,   48,  123,    0,
  234,  235,  123,   54,  238,   41,   57,  131,   41,  123,
  257,  258,   41,  166,  138,  125,  262,  170,  171,  266,
  267,  268,  269,   41,    0,  260,  262,  166,  272,  182,
  262,  262,  171,   40,   41,   42,   43,   44,   45,  163,
   47,   92,   13,   71,   48,  171,  257,  141,    4,  260,
  131,  138,  263,   60,   61,   62,  290,   97,  292,   -1,
  111,  272,   -1,  297,   40,    0,   -1,  118,   -1,   -1,
   -1,  125,  196,  197,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,  234,  235,  257,   -1,  238,  260,   -1,   -1,  263,
    0,  265,   -1,   -1,  328,  329,  235,   -1,  272,  238,
  125,   -1,   -1,   -1,  228,   40,   41,  231,   43,   44,
   45,   -1,    0,   -1,   -1,  166,  257,   -1,  125,  170,
  171,   -1,  257,  264,   -1,   60,   61,   62,  362,  264,
   40,  182,  256,   -1,  275,  276,  277,  290,   -1,  292,
  275,  276,  277,   -1,  297,   -1,   -1,  257,   -1,  125,
   -1,  290,   40,  292,  264,   -1,   -1,    0,  297,   -1,
   -1,  285,  286,   -1,   -1,  275,  276,  277,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,  328,  329,   43,   -1,   45,
    0,   -1,  306,  234,  235,   -1,   -1,  238,   -1,  328,
  125,   -1,   -1,   -1,   60,   61,   62,   40,   41,   -1,
   43,   44,   45,  257,   -1,   -1,   -1,   -1,   -1,  362,
  264,   -1,   -1,   -1,  338,  125,  340,   60,   61,   62,
   40,  275,  276,  277,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,    0,  257,   -1,   -1,  260,   -1,  125,  263,  290,
  265,  292,   -1,   -1,  368,   -1,  297,  272,   -1,  256,
  257,   -1,   -1,  260,  261,  262,  263,  264,  265,  266,
  267,  268,  269,  270,  271,  272,  273,    0,  275,  276,
  277,   40,   41,   -1,   43,   44,   45,  328,  329,   -1,
  256,  257,  125,   -1,  260,  261,  262,  263,  264,  265,
   -1,   60,   61,   62,  270,  271,  272,  273,   -1,  275,
  276,  277,   -1,   -1,   -1,  125,   -1,   40,   -1,   -1,
   -1,  362,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,  256,  257,   -1,    0,  260,  261,  262,  263,  264,
  265,  266,  267,  268,  269,  270,  271,  272,  273,  125,
  275,  276,  277,   -1,   -1,   -1,  256,  257,   -1,   -1,
  260,  261,  262,  263,  264,  265,  125,    0,   -1,   -1,
  270,  271,  272,  273,   40,  275,  276,  277,  256,  257,
   -1,   -1,  260,  261,  262,  263,  264,  265,   -1,   -1,
   -1,   -1,  270,  271,  272,  273,   -1,  275,  276,  277,
   -1,    0,  125,   -1,   -1,   -1,   -1,   40,   -1,   -1,
  266,  267,  268,  269,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,  256,  257,  123,   -1,  260,  261,  262,
  263,  264,  265,  266,  267,  268,  269,  270,  271,  272,
  273,   40,  275,  276,  277,    0,  256,  257,   -1,   -1,
  260,  261,  262,  263,  264,  265,   -1,   -1,   -1,  125,
  270,  271,  272,  273,   -1,  275,  276,  277,   40,   41,
   -1,   -1,   -1,   45,   -1,    0,   -1,   -1,   -1,   -1,
   -1,  257,   -1,   -1,  260,   40,   -1,  263,   60,  265,
   62,   -1,  125,   -1,   -1,   -1,  272,  256,  257,   -1,
   -1,  260,  261,  262,  263,  264,  265,  266,  267,  268,
  269,  270,  271,  272,  273,   40,  275,  276,  277,   -1,
    0,   -1,   -1,   -1,   -1,   -1,  125,   -1,   -1,   -1,
   -1,   -1,   -1,  256,  257,   -1,   40,  260,  261,  262,
  263,  264,  265,    0,   -1,   -1,   -1,  270,  271,  272,
  273,   -1,  275,  276,  277,   -1,   -1,   -1,   -1,  257,
   40,   -1,  260,  261,  262,  263,  264,  265,    0,   -1,
  125,   -1,  270,   -1,  272,  273,   -1,  275,  276,  277,
   -1,   -1,   -1,   40,   -1,   -1,   -1,   -1,   -1,   -1,
  256,  257,   -1,   -1,  260,  261,  262,  263,  264,  265,
  125,   -1,   -1,   -1,  270,  271,  272,  273,   40,  275,
  276,  277,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,  125,   -1,  256,  257,   -1,   -1,  260,  261,  262,
  263,  264,  265,   -1,   40,   -1,   -1,  270,  271,  272,
  273,   -1,  275,  276,  277,  125,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,  256,  257,   -1,
   -1,  260,  261,  262,  263,  264,  265,   -1,  125,   -1,
   -1,  270,  271,  272,  273,   -1,  275,  276,  277,   40,
   -1,   -1,   -1,   44,   -1,  257,  258,   -1,   -1,   -1,
   -1,   -1,   -1,  125,  266,  267,  268,  269,   -1,   -1,
   -1,  256,  257,   -1,   -1,  260,  261,  262,  263,  264,
  265,   -1,   -1,   -1,   -1,  270,  271,  272,  273,  125,
  275,  276,  277,   -1,   -1,   -1,   40,   -1,   -1,   -1,
   44,  256,  257,   -1,   -1,  260,  261,  262,  263,  264,
  265,   -1,   -1,   -1,   -1,  270,  271,  272,  273,   -1,
  275,  276,  277,  257,   -1,   -1,  260,  261,  262,  263,
  264,  265,  123,   -1,   -1,   -1,  270,  271,  272,  273,
   -1,  275,  276,  277,   -1,   -1,  256,  257,   -1,   -1,
  260,  261,  262,  263,  264,  265,   -1,   -1,   -1,   -1,
  270,  271,  272,  273,   -1,  275,  276,  277,  125,  256,
  257,   -1,  125,  260,  261,  262,  263,  264,  265,  123,
   -1,   -1,   -1,  270,  271,  272,  273,   -1,  275,  276,
  277,   -1,   -1,   -1,  256,  257,   -1,   -1,  260,  261,
  262,  263,  264,  265,  123,   -1,   -1,   -1,  270,  271,
  272,  273,   -1,  275,  276,  277,   -1,   -1,   -1,   -1,
   -1,  257,   -1,  125,  260,  261,  262,  263,  264,  265,
  123,   -1,   -1,   -1,  270,  271,  272,  273,   -1,  275,
  276,  277,   40,   41,   -1,   -1,   -1,   45,   40,   41,
   -1,   -1,  123,   45,  125,   40,   41,   -1,   -1,   -1,
   45,   -1,   60,   -1,   62,   -1,  257,   -1,   60,  260,
   62,   40,  263,  264,  265,   60,   45,   62,  123,  270,
  271,  272,  273,   -1,  275,  276,  277,   40,   41,   -1,
   -1,   60,   45,   62,   -1,   -1,   -1,   -1,   -1,  123,
  257,   -1,   -1,  260,  257,   -1,  263,   60,  265,   62,
   -1,  264,   -1,  257,   -1,  272,  260,   -1,   -1,  263,
  264,  265,  275,  276,  277,   -1,  270,  271,  272,  273,
   -1,  275,  276,  277,   -1,   -1,   -1,   -1,  257,   -1,
   -1,  260,  261,  262,  263,  264,  265,   -1,   -1,   -1,
   -1,  270,   -1,  272,  273,  257,  275,  276,  277,   -1,
   -1,   -1,  264,  256,  257,   -1,   -1,  260,   -1,   -1,
  263,  264,  265,  275,  276,  277,   -1,  270,   -1,  272,
  273,   -1,  275,  276,  277,  123,  257,   -1,   -1,  260,
   -1,   -1,  263,  264,  265,   -1,   -1,   -1,   -1,  270,
   -1,  272,  273,   -1,  275,  276,  277,  123,   -1,   -1,
   -1,   -1,  257,   -1,   -1,  260,   -1,  262,  263,  264,
  265,   -1,   -1,   -1,   -1,  270,   -1,  272,  273,  123,
  275,  276,  277,  257,   -1,   -1,  260,   -1,  262,  263,
  264,  265,   -1,   -1,   -1,   -1,  270,   -1,  272,  273,
  123,  275,  276,  277,   -1,   -1,   -1,   -1,   -1,  257,
  258,   -1,   -1,   -1,   -1,  257,  258,   -1,  266,  267,
  268,  269,  257,  258,  266,  267,  268,  269,  125,   -1,
   -1,  266,  267,  268,  269,   -1,   -1,   -1,  257,  258,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,  266,  267,  268,
  269,  125,   -1,   -1,  257,  258,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,  266,  267,  268,  269,   -1,   -1,  257,
   -1,   -1,  260,  125,   -1,  263,  264,  265,   -1,   -1,
   -1,   -1,  270,   -1,  272,  273,   -1,  275,  276,  277,
   -1,  257,   -1,   -1,  260,  125,   -1,  263,  264,  265,
   -1,   -1,   -1,   -1,  270,   -1,  272,  273,   -1,  275,
  276,  277,   -1,  257,   -1,   -1,  260,  125,   -1,  263,
  264,  265,   -1,   -1,   -1,   -1,  270,   -1,  272,  273,
   -1,  275,  276,  277,  257,   -1,   -1,  260,   -1,  125,
  263,  264,  265,   -1,   -1,   -1,   -1,  270,   -1,  272,
  273,   -1,  275,  276,  277,   -1,   -1,   -1,   -1,   -1,
  257,  125,   -1,  260,  261,  262,  263,  264,  265,   -1,
   -1,   -1,   -1,  270,   -1,  272,  273,   -1,  275,  276,
  277,   -1,  125,  257,   -1,   -1,  260,  261,  262,  263,
  264,  265,   -1,   -1,   -1,   -1,  270,   -1,  272,  273,
   -1,  275,  276,  277,  125,  257,   -1,   -1,  260,  261,
  262,  263,  264,  265,   -1,   -1,   -1,   -1,  270,   -1,
  272,  273,   -1,  275,  276,  277,  125,  257,   -1,   -1,
  260,  261,  262,  263,  264,  265,   -1,   -1,   -1,   -1,
  270,   -1,  272,  273,   -1,  275,  276,  277,  256,  257,
  125,   -1,  260,   -1,   -1,  263,  264,  265,   -1,   -1,
   -1,   -1,  270,   -1,  272,  273,   -1,  275,  276,  277,
  256,  257,  125,   -1,  260,   -1,   -1,  263,  264,  265,
   -1,   -1,   -1,   -1,  270,   -1,  272,  273,   -1,  275,
  276,  277,  256,  257,  125,   -1,  260,   -1,   -1,  263,
  264,  265,   -1,   -1,   -1,   -1,  270,   -1,  272,  273,
   -1,  275,  276,  277,  257,  125,   -1,  260,   -1,  262,
  263,  264,  265,   -1,   -1,   -1,   -1,  270,   -1,  272,
  273,   -1,  275,  276,  277,   -1,  257,  125,   -1,  260,
   -1,  262,  263,  264,  265,   -1,   -1,   -1,   -1,  270,
   -1,  272,  273,   -1,  275,  276,  277,   -1,  257,  125,
   -1,  260,   -1,   -1,  263,  264,  265,   -1,   -1,   -1,
   -1,  270,   -1,  272,  273,   -1,  275,  276,  277,   -1,
  125,   -1,  257,   -1,   -1,  260,   -1,   -1,  263,  264,
  265,   -1,   -1,   -1,   -1,  270,   -1,  272,  273,   -1,
  275,  276,  277,  125,  257,   -1,   -1,  260,   -1,   -1,
  263,  264,  265,   -1,   -1,   -1,   -1,  270,   -1,  272,
  273,   -1,  275,  276,  277,  125,  257,   -1,   -1,  260,
   -1,   -1,  263,  264,  265,   -1,   -1,   -1,   -1,  270,
   -1,  272,  273,   -1,  275,  276,  277,  257,  125,   -1,
  260,   -1,   -1,  263,  264,  265,   -1,   -1,   -1,   -1,
  270,   -1,  272,  273,   -1,  275,  276,  277,   -1,  257,
  125,   -1,  260,   -1,   -1,  263,  264,  265,   -1,   -1,
   -1,   -1,  270,   -1,  272,  273,   -1,  275,  276,  277,
   -1,  257,  125,   -1,  260,   -1,   -1,  263,  264,  265,
   -1,   -1,   -1,   -1,  270,   -1,  272,  273,   -1,  275,
  276,  277,  257,  125,   -1,  260,   -1,   -1,  263,  264,
  265,   -1,   -1,   -1,   -1,  270,   -1,  272,  273,   -1,
  275,  276,  277,   -1,  125,  257,   -1,   -1,  260,   -1,
   -1,  263,  264,  265,   -1,   -1,   -1,   -1,  270,   -1,
  272,  273,   -1,  275,  276,  277,  125,  257,   -1,   -1,
  260,   -1,   -1,  263,  264,  265,   -1,   -1,   -1,   -1,
  270,   -1,  272,  273,   -1,  275,  276,  277,  125,   -1,
  257,   -1,   -1,  260,   -1,   -1,  263,  264,  265,   -1,
   -1,   -1,   -1,  270,   -1,  272,  273,   -1,  275,  276,
  277,  125,  257,   -1,   -1,  260,   -1,   -1,  263,  264,
  265,   -1,   -1,   -1,   -1,  270,   -1,  272,  273,   -1,
  275,  276,  277,  125,  257,   -1,   -1,  260,   -1,   -1,
  263,  264,  265,   -1,   -1,   -1,   -1,  270,   -1,  272,
  273,   -1,  275,  276,  277,  257,  125,   -1,  260,   -1,
   -1,  263,  264,  265,   -1,   -1,   -1,   -1,  270,   -1,
  272,  273,   -1,  275,  276,  277,  257,  125,   -1,  260,
   -1,   -1,  263,  264,  265,   -1,   -1,   -1,   -1,  270,
   -1,  272,  273,   -1,  275,  276,  277,   -1,  257,  125,
   -1,  260,   -1,   -1,  263,  264,  265,   -1,   -1,   -1,
   -1,  270,   -1,  272,  273,   -1,  275,  276,  277,   -1,
  257,  125,   -1,  260,   -1,   -1,  263,  264,  265,   -1,
   -1,   -1,   -1,  270,   -1,  272,  273,   -1,  275,  276,
  277,   -1,  125,  257,   -1,   -1,  260,   -1,   -1,  263,
  264,  265,   -1,   -1,   -1,   -1,  270,   -1,  272,  273,
   -1,  275,  276,  277,  125,  257,   -1,   -1,  260,   -1,
   -1,  263,  264,  265,   -1,   -1,   -1,   -1,  270,   -1,
  272,  273,   -1,  275,  276,  277,  125,   -1,  257,   -1,
   -1,  260,   -1,   -1,  263,  264,  265,   -1,   -1,   -1,
   -1,  270,   -1,  272,  273,   -1,  275,  276,  277,  257,
  125,   -1,  260,   -1,   -1,  263,  264,  265,   -1,   -1,
   -1,   -1,  270,   -1,  272,  273,   -1,  275,  276,  277,
   -1,  257,  125,   -1,  260,   -1,   -1,  263,  264,  265,
   -1,   -1,   -1,   -1,  270,   -1,  272,  273,   -1,  275,
  276,  277,   -1,  257,  125,  125,  260,   -1,   -1,  263,
  264,  265,   -1,   -1,   -1,  125,  270,   -1,  272,  273,
   -1,  275,  276,  277,  257,   -1,   -1,  260,   -1,   -1,
  263,  264,  265,   -1,   -1,   -1,   -1,  270,   -1,  272,
  273,   -1,  275,  276,  277,   -1,  257,   -1,   -1,  260,
   -1,   -1,  263,  264,  265,   -1,   -1,   -1,   -1,  270,
   -1,  272,  273,   -1,  275,  276,  277,   -1,  257,   -1,
   -1,  260,   -1,   -1,  263,  264,   -1,   -1,   -1,   -1,
   -1,  270,   -1,  272,  273,   -1,  275,  276,  277,   -1,
   -1,   -1,  257,   -1,   -1,  260,   -1,   -1,  263,  264,
   -1,   -1,   -1,   -1,   -1,  270,   -1,  272,  273,   -1,
  275,  276,  277,   -1,  257,   -1,   -1,  260,   -1,   -1,
  263,  264,   -1,   -1,   -1,   -1,   -1,  270,   -1,  272,
  273,   -1,  275,  276,  277,   -1,  257,  257,   -1,  260,
  260,   -1,  263,  263,  265,  265,   -1,  257,   -1,   -1,
  260,  272,  272,  263,   -1,  265,   -1,  257,   -1,   -1,
  260,   -1,  272,  263,  264,  265,   -1,   -1,   -1,   -1,
  270,   -1,  272,  273,   -1,  275,  276,  277,  257,   -1,
   -1,  260,   -1,   -1,  263,  264,   -1,   -1,   -1,   -1,
   -1,  270,   -1,  272,  273,   -1,  275,  276,  277,
};
}
final static short YYFINAL=14;
final static short YYMAXTOKEN=278;
final static String yyname[] = {
"end-of-file",null,null,null,null,null,null,null,null,null,null,null,null,null,
null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,
null,null,null,null,null,null,null,null,null,null,"'('","')'","'*'","'+'","','",
"'-'","'.'","'/'",null,null,null,null,null,null,null,null,null,null,null,"';'",
"'<'","'='","'>'",null,null,null,null,null,null,null,null,null,null,null,null,
null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,
null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,
null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,
"'{'",null,"'}'",null,null,null,null,null,null,null,null,null,null,null,null,
null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,
null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,
null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,
null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,
null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,
null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,
null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,
null,null,null,null,null,null,null,"ID","CTE","CADENA","IF","ELSE","ENDIF",
"PRINT","VOID","RETURN","COMP_MAYOR_IGUAL","COMP_MENOR_IGUAL","COMP_IGUAL",
"COMP_DISTINTO","CLASS","WHILE","DO","INTERFACE","IMPLEMENT","INT","ULONG",
"FLOAT","OPERADOR_MENOS",
};
final static String yyrule[] = {
"$accept : programa",
"programa : '{' sentencias '}'",
"programa : sentencias '}'",
"programa : '{' sentencias",
"programa : '{' '}'",
"programa :",
"sentencias : sentencia",
"sentencias : sentencias sentencia",
"sentencia : sentencia_declarativa",
"sentencia : sentencia_ejecutable",
"sentencia : error ','",
"sentencia_ejecutable : sentencia_asignacion",
"sentencia_ejecutable : sentencia_invocacion_funcion",
"sentencia_ejecutable : sentencia_imprimir",
"sentencia_ejecutable : sentencia_seleccion",
"sentencia_ejecutable : sentencia_iterativa_do_while",
"sentencia_ejecutable : sentencia_return",
"sentencias_funcion : sentencia_funcion",
"sentencias_funcion : sentencias_funcion sentencia_funcion",
"sentencia_funcion : sentencia_declarativa",
"sentencia_funcion : sentencia_ejecutable_funcion",
"sentencia_ejecutable_funcion : sentencia_asignacion",
"sentencia_ejecutable_funcion : sentencia_invocacion_funcion",
"sentencia_ejecutable_funcion : sentencia_imprimir",
"sentencia_ejecutable_funcion : sentencia_seleccion_funcion",
"sentencia_ejecutable_funcion : sentencia_iterativa_do_while_funcion",
"sentencia_return : RETURN ','",
"sentencia_return : RETURN",
"sentencia_iterativa_do_while : DO bloque_sentencias_ejecutables_while WHILE '(' condicion ')' ','",
"sentencia_iterativa_do_while : DO bloque_sentencias_ejecutables_while WHILE '(' condicion ')'",
"sentencia_iterativa_do_while : DO WHILE '(' condicion ')' ','",
"sentencia_iterativa_do_while : DO bloque_sentencias_ejecutables_while WHILE '(' ')' ','",
"sentencia_iterativa_do_while : DO bloque_sentencias_ejecutables_while '(' condicion ')' ','",
"sentencia_iterativa_do_while : DO WHILE ','",
"sentencia_iterativa_do_while : DO bloque_sentencias_ejecutables_while WHILE ','",
"sentencia_iterativa_do_while : DO ','",
"sentencia_iterativa_do_while : DO '(' condicion ')' ','",
"sentencia_iterativa_do_while : DO '(' ')' ','",
"sentencia_iterativa_do_while : DO '(' ')'",
"sentencia_iterativa_do_while_funcion : DO bloque_sentencias_ejecutables_funcion_while WHILE '(' condicion ')' ','",
"$$1 :",
"sentencia_iterativa_do_while_funcion : DO bloque_sentencias_ejecutables_funcion_while WHILE '(' condicion ')' $$1 DO WHILE '(' condicion ')' ','",
"sentencia_iterativa_do_while_funcion : DO bloque_sentencias_ejecutables_funcion_while WHILE '(' ')' ','",
"sentencia_iterativa_do_while_funcion : DO bloque_sentencias_ejecutables_funcion_while '(' condicion ')' ','",
"sentencia_iterativa_do_while_funcion : DO WHILE ','",
"sentencia_iterativa_do_while_funcion : DO bloque_sentencias_ejecutables_funcion_while WHILE ','",
"sentencia_iterativa_do_while_funcion : DO ','",
"sentencia_iterativa_do_while_funcion : DO '(' condicion ')' ','",
"sentencia_iterativa_do_while_funcion : DO '(' ')' ','",
"sentencia_iterativa_do_while_funcion : DO '(' ')'",
"sentencia_seleccion : IF '(' condicion ')' bloque_sentencias_ejecutables_then ELSE bloque_sentencias_ejecutables ENDIF ','",
"sentencia_seleccion : IF '(' condicion ')' bloque_sentencias_ejecutables_then ENDIF ','",
"sentencia_seleccion : IF '(' condicion ')' bloque_sentencias_ejecutables_then ELSE bloque_sentencias_ejecutables ENDIF",
"sentencia_seleccion : IF '(' condicion ')' bloque_sentencias_ejecutables_then ENDIF",
"sentencia_seleccion : IF '(' ')' bloque_sentencias_ejecutables_then ELSE bloque_sentencias_ejecutables ENDIF ','",
"sentencia_seleccion : IF '(' ')' bloque_sentencias_ejecutables_then ENDIF ','",
"sentencia_seleccion : IF '(' condicion ')' ELSE bloque_sentencias_ejecutables ENDIF ','",
"sentencia_seleccion : IF '(' condicion ')' bloque_sentencias_ejecutables_then ELSE ENDIF ','",
"sentencia_seleccion : IF '(' condicion ')' ENDIF ','",
"sentencia_seleccion_funcion : IF '(' condicion ')' bloque_sentencias_ejecutables_then_funcion ELSE bloque_sentencias_ejecutables_funcion ENDIF ','",
"sentencia_seleccion_funcion : IF '(' condicion ')' bloque_sentencias_ejecutables_then_funcion ENDIF ','",
"sentencia_seleccion_funcion : IF '(' condicion ')' bloque_sentencias_ejecutables_then_funcion ELSE bloque_sentencias_ejecutables_funcion ENDIF",
"$$2 :",
"sentencia_seleccion_funcion : IF '(' condicion ')' bloque_sentencias_ejecutables_then_funcion ENDIF $$2 IF '(' ')' bloque_sentencias_ejecutables_then_funcion ELSE bloque_sentencias_ejecutables_funcion ENDIF ','",
"sentencia_seleccion_funcion : IF '(' ')' bloque_sentencias_ejecutables_then_funcion ENDIF ','",
"sentencia_seleccion_funcion : IF '(' condicion ')' ELSE bloque_sentencias_ejecutables_funcion ENDIF ','",
"sentencia_seleccion_funcion : IF '(' condicion ')' bloque_sentencias_ejecutables_then_funcion ELSE ENDIF ','",
"sentencia_seleccion_funcion : IF '(' condicion ')' ENDIF ','",
"bloque_sentencias_ejecutables_then : sentencia_ejecutable",
"bloque_sentencias_ejecutables_then : '{' sentencias_ejecutables '}'",
"bloque_sentencias_ejecutables_then : '{' sentencias_ejecutables",
"bloque_sentencias_ejecutables_then : sentencias_ejecutables '}'",
"bloque_sentencias_ejecutables_then : '{' '}'",
"bloque_sentencias_ejecutables_then : sentencia_declarativa",
"bloque_sentencias_ejecutables_while : '{' primer_sentencia '}'",
"bloque_sentencias_ejecutables_while : '{' primer_sentencia sentencias_ejecutables '}'",
"bloque_sentencias_ejecutables_while : '{' primer_sentencia sentencias_ejecutables",
"bloque_sentencias_ejecutables_while : primer_sentencia sentencias_ejecutables '}'",
"bloque_sentencias_ejecutables_while : '{' '}'",
"bloque_sentencias_ejecutables_while : sentencia_declarativa",
"primer_sentencia : sentencia_ejecutable",
"primer_sentencia_funcion : sentencia_ejecutable_funcion",
"bloque_sentencias_ejecutables : sentencia_ejecutable",
"bloque_sentencias_ejecutables : '{' sentencia_ejecutable sentencias_ejecutables '}'",
"bloque_sentencias_ejecutables : '{' sentencia_ejecutable sentencias_ejecutables",
"bloque_sentencias_ejecutables : sentencia_ejecutable sentencias_ejecutables '}'",
"bloque_sentencias_ejecutables : '{' '}'",
"bloque_sentencias_ejecutables : sentencia_declarativa",
"bloque_sentencias_ejecutables_then_funcion : sentencia_ejecutable_funcion",
"bloque_sentencias_ejecutables_then_funcion : sentencia_return",
"bloque_sentencias_ejecutables_then_funcion : sentencia_declarativa",
"bloque_sentencias_ejecutables_then_funcion : '{' sentencias_ejecutables_funcion '}'",
"bloque_sentencias_ejecutables_then_funcion : '{' sentencias_ejecutables_funcion sentencia_return '}'",
"bloque_sentencias_ejecutables_then_funcion : '{' sentencias_ejecutables_funcion sentencia_return sentencias_ejecutables_funcion_inalcanzable '}'",
"bloque_sentencias_ejecutables_then_funcion : sentencias_ejecutables_funcion '}'",
"bloque_sentencias_ejecutables_then_funcion : sentencias_ejecutables_funcion sentencia_return '}'",
"bloque_sentencias_ejecutables_then_funcion : '{' sentencias_ejecutables_funcion",
"bloque_sentencias_ejecutables_then_funcion : '{' sentencias_ejecutables_funcion sentencia_return",
"bloque_sentencias_ejecutables_then_funcion : '{' '}'",
"bloque_sentencias_ejecutables_funcion_while : '{' primer_sentencia_funcion '}'",
"bloque_sentencias_ejecutables_funcion_while : sentencia_return",
"bloque_sentencias_ejecutables_funcion_while : sentencia_declarativa",
"bloque_sentencias_ejecutables_funcion_while : '{' primer_sentencia_funcion sentencias_ejecutables_funcion '}'",
"bloque_sentencias_ejecutables_funcion_while : '{' primer_sentencia_funcion sentencias_ejecutables_funcion sentencia_return '}'",
"bloque_sentencias_ejecutables_funcion_while : '{' primer_sentencia_funcion sentencias_ejecutables_funcion sentencia_return sentencias_ejecutables_funcion_inalcanzable '}'",
"bloque_sentencias_ejecutables_funcion_while : primer_sentencia_funcion sentencias_ejecutables_funcion '}'",
"bloque_sentencias_ejecutables_funcion_while : primer_sentencia_funcion sentencias_ejecutables_funcion sentencia_return '}'",
"bloque_sentencias_ejecutables_funcion_while : '{' primer_sentencia_funcion sentencias_ejecutables_funcion",
"bloque_sentencias_ejecutables_funcion_while : '{' primer_sentencia_funcion sentencias_ejecutables_funcion sentencia_return",
"bloque_sentencias_ejecutables_funcion_while : '{' '}'",
"bloque_sentencias_ejecutables_funcion : sentencia_ejecutable_funcion",
"bloque_sentencias_ejecutables_funcion : sentencia_return",
"bloque_sentencias_ejecutables_funcion : sentencia_declarativa",
"bloque_sentencias_ejecutables_funcion : '{' sentencias_ejecutables_funcion '}'",
"bloque_sentencias_ejecutables_funcion : '{' sentencias_ejecutables_funcion sentencia_return '}'",
"bloque_sentencias_ejecutables_funcion : '{' sentencias_ejecutables_funcion sentencia_return sentencias_ejecutables_funcion_inalcanzable '}'",
"bloque_sentencias_ejecutables_funcion : sentencias_ejecutables_funcion '}'",
"bloque_sentencias_ejecutables_funcion : sentencias_ejecutables_funcion sentencia_return '}'",
"bloque_sentencias_ejecutables_funcion : '{' sentencias_ejecutables_funcion",
"bloque_sentencias_ejecutables_funcion : '{' sentencias_ejecutables_funcion sentencia_return",
"bloque_sentencias_ejecutables_funcion : '{' '}'",
"sentencias_ejecutables_funcion_inalcanzable : sentencia_ejecutable_funcion_inalcanzable",
"sentencias_ejecutables_funcion_inalcanzable : sentencias_ejecutables_funcion_inalcanzable sentencia_ejecutable_funcion_inalcanzable",
"sentencia_ejecutable_funcion_inalcanzable : sentencia_return",
"sentencia_ejecutable_funcion_inalcanzable : sentencia_ejecutable_funcion",
"sentencias_ejecutables : sentencia_ejecutable",
"sentencias_ejecutables : sentencias_ejecutables sentencia_ejecutable",
"sentencias_ejecutables : sentencia_declarativa",
"sentencias_ejecutables : sentencias_ejecutables sentencia_declarativa",
"sentencias_ejecutables_funcion : sentencia_ejecutable_funcion",
"sentencias_ejecutables_funcion : sentencias_ejecutables_funcion sentencia_ejecutable_funcion",
"sentencias_ejecutables_funcion : sentencia_declarativa",
"sentencias_ejecutables_funcion : sentencias_ejecutables_funcion sentencia_declarativa",
"sentencia_imprimir : PRINT CADENA ','",
"sentencia_imprimir : PRINT CADENA",
"sentencia_imprimir : PRINT ','",
"sentencia_imprimir : PRINT ID ','",
"sentencia_imprimir : PRINT ID",
"sentencia_imprimir : PRINT constante ','",
"sentencia_imprimir : PRINT constante",
"sentencia_invocacion_funcion : sentencia_objeto_identificador '(' expresion ')' ','",
"sentencia_invocacion_funcion : sentencia_objeto_identificador '(' ')' ','",
"sentencia_invocacion_funcion : sentencia_objeto_identificador '(' expresion ',' lista_expresiones_invocacion_funcion_exceso ')' ','",
"sentencia_invocacion_funcion : sentencia_objeto_identificador '(' expresion ')'",
"sentencia_invocacion_funcion : sentencia_objeto_identificador '(' ')'",
"sentencia_invocacion_funcion : sentencia_objeto_identificador '(' expresion ',' lista_expresiones_invocacion_funcion_exceso ')'",
"lista_expresiones_invocacion_funcion_exceso : expresion",
"lista_expresiones_invocacion_funcion_exceso : lista_expresiones_invocacion_funcion_exceso ',' expresion",
"sentencia_asignacion : sentencia_objeto_identificador '=' expresion ','",
"sentencia_asignacion : sentencia_objeto_identificador '=' expresion",
"sentencia_asignacion : sentencia_objeto_identificador '=' ','",
"sentencia_objeto_identificador : ID",
"sentencia_objeto_identificador : sentencia_objeto_identificador '.' ID",
"sentencia_declarativa : declaracion_variable",
"sentencia_declarativa : declaracion_funcion",
"sentencia_declarativa : declaracion_clase",
"sentencia_declarativa : declaracion_interfaz",
"declaracion_variable : tipo lista_de_variables ','",
"declaracion_variable : tipo lista_de_variables",
"declaracion_variable : tipo ','",
"declaracion_interfaz_encabezado : INTERFACE ID",
"declaracion_interfaz_encabezado : INTERFACE",
"declaracion_interfaz : declaracion_interfaz_encabezado '{' bloque_encabezado_funcion_declaracion_interfaz '}'",
"declaracion_interfaz : declaracion_interfaz_encabezado '{' '}'",
"declaracion_interfaz : declaracion_interfaz_encabezado '}'",
"bloque_encabezado_funcion_declaracion_interfaz : encabezado_funcion_declaracion_interfaz",
"bloque_encabezado_funcion_declaracion_interfaz : bloque_encabezado_funcion_declaracion_interfaz encabezado_funcion_declaracion_interfaz",
"encabezado_funcion_declaracion_interfaz : encabezado_funcion_interfaz ','",
"encabezado_funcion_declaracion_interfaz : encabezado_funcion_interfaz",
"encabezado_funcion_declaracion_interfaz : tipo lista_de_variables ','",
"encabezado_funcion_declaracion_interfaz : tipo lista_de_variables",
"sentencia_declarativa_clase : tipo lista_de_variables ','",
"sentencia_declarativa_clase : tipo lista_de_variables",
"sentencia_declarativa_clase : declaracion_funcion",
"sentencia_declarativa_clase : declaracion_funcion ','",
"sentencia_declarativa_clase : ID ','",
"declaracion_clase : declaracion_clase_encabezado '{' bloque_sentencias_declarativas_clase '}'",
"declaracion_clase_encabezado : CLASS ID",
"declaracion_clase_encabezado : CLASS ID IMPLEMENT ID",
"declaracion_clase_encabezado : CLASS",
"declaracion_clase_encabezado : CLASS IMPLEMENT ID",
"declaracion_clase_encabezado : CLASS ID IMPLEMENT",
"declaracion_clase_encabezado : CLASS IMPLEMENT",
"bloque_sentencias_declarativas_clase : sentencia_declarativa_clase",
"bloque_sentencias_declarativas_clase : bloque_sentencias_declarativas_clase sentencia_declarativa_clase",
"declaracion_funcion : encabezado_funcion cuerpo_funcion",
"encabezado_funcion : encabezado_funcion_nombre '(' parametro_funcion ')'",
"encabezado_funcion : encabezado_funcion_nombre '(' ')'",
"encabezado_funcion : encabezado_funcion_nombre '(' parametro_funcion ',' lista_parametros_funcion_exceso ')'",
"encabezado_funcion : encabezado_funcion_nombre '(' parametro_funcion lista_parametros_funcion_exceso ')'",
"encabezado_funcion : encabezado_funcion_nombre ')'",
"encabezado_funcion_nombre : VOID ID",
"encabezado_funcion_nombre : VOID",
"encabezado_funcion_interfaz : VOID ID '(' parametro_funcion ')'",
"encabezado_funcion_interfaz : VOID ID '(' ')'",
"encabezado_funcion_interfaz : VOID ID '(' parametro_funcion ',' lista_parametros_funcion_exceso ')'",
"encabezado_funcion_interfaz : VOID ID '(' parametro_funcion lista_parametros_funcion_exceso ')'",
"encabezado_funcion_interfaz : VOID '(' parametro_funcion ')'",
"encabezado_funcion_interfaz : VOID '(' ')'",
"encabezado_funcion_interfaz : VOID ID parametro_funcion ')'",
"encabezado_funcion_interfaz : VOID ID ')'",
"cuerpo_funcion : '{' sentencias_funcion sentencia_return '}'",
"cuerpo_funcion : '{' sentencia_return '}'",
"cuerpo_funcion : '{' sentencias_funcion sentencia_return sentencias_funcion_inalcanzable '}'",
"cuerpo_funcion : '{' sentencia_return sentencias_funcion_inalcanzable '}'",
"cuerpo_funcion : '{' sentencias_funcion '}'",
"cuerpo_funcion : '{' '}'",
"cuerpo_funcion : sentencias_funcion sentencia_return '}'",
"cuerpo_funcion : sentencia_return '}'",
"cuerpo_funcion : sentencias_funcion sentencia_return sentencias_funcion_inalcanzable '}'",
"cuerpo_funcion : sentencia_return sentencias_funcion_inalcanzable '}'",
"cuerpo_funcion : sentencias_funcion '}'",
"cuerpo_funcion : '}'",
"sentencias_funcion_inalcanzable : sentencia_funcion_inalcanzable",
"sentencias_funcion_inalcanzable : sentencias_funcion_inalcanzable sentencia_funcion_inalcanzable",
"sentencia_funcion_inalcanzable : sentencia_declarativa",
"sentencia_funcion_inalcanzable : sentencia_return",
"sentencia_funcion_inalcanzable : sentencia_ejecutable_funcion",
"lista_parametros_funcion_exceso : parametro_funcion",
"lista_parametros_funcion_exceso : lista_parametros_funcion_exceso ',' parametro_funcion",
"lista_parametros_funcion_exceso : lista_parametros_funcion_exceso parametro_funcion",
"parametro_funcion : tipo ID",
"lista_de_variables : ID",
"lista_de_variables : lista_de_variables ';' ID",
"tipo : INT",
"tipo : ULONG",
"tipo : FLOAT",
"tipo : ID",
"condicion : expresion comparador expresion",
"condicion : expresion comparador",
"condicion : comparador expresion",
"condicion : expresion '=' expresion",
"comparador : COMP_MAYOR_IGUAL",
"comparador : COMP_MENOR_IGUAL",
"comparador : COMP_IGUAL",
"comparador : COMP_DISTINTO",
"comparador : '>'",
"comparador : '<'",
"expresion : expresion '+' termino",
"expresion : expresion '-' termino",
"expresion : termino",
"termino : termino '*' factor",
"termino : termino '/' factor",
"termino : factor",
"factor : ID",
"factor : ID OPERADOR_MENOS",
"factor : constante",
"factor : '(' expresion ')'",
"constante : CTE",
"constante : '-' CTE",
};

//#line 1055 "./src/compilador/gramatica.y"

public static GeneracionCodigo genCodigo = null;
public static AnalizadorLexico lexico = null;
public static GeneracionCodigoIntermedio genCodigoIntermedio = GeneracionCodigoIntermedio.getInstance();
public static Logger logger = Logger.getInstance();
public static TablaDeSimbolos TS = TablaDeSimbolos.getInstance();
public static Polaca polaca = Polaca.getInstance();
public static Parser parser = null;
public static int MAX_INT_VALUE = (int) (Math.pow(2, 15) - 1);

/** Chequea, para los INT, que el valor positivo no supere el valor maximo */
public void corregirConstantePositivaEntera(String constante) {
	if (constante.contains("_i")) {
		//se recibio un INT con signo positivo
		boolean exceptionOutOfRange = false;
		int cte = 0;
		String constanteValue = constante.toString().split("_")[0];

		try {
			cte = Integer.parseInt(constanteValue);
		} catch (NumberFormatException e) {
			exceptionOutOfRange = true;
		}

		if (cte > MAX_INT_VALUE || exceptionOutOfRange) {
			logger.logWarning("[Parser] Rango invalido para la constante: " + constante + ", se trunca al valor " + MAX_INT_VALUE + "_i");
			TS.swapLexemas(constante, MAX_INT_VALUE + "_i");
		}
	}
}

public String constanteConSigno(String constante) {
	/** Check de float negativos */
	if (constante.contains(".")) {
		String negConstante = "-"+constante;
		TS.swapLexemas(constante, negConstante);
		return negConstante;
	} else {
		if (constante.contains("_ul")) {
			//se recibio un ULONG con signo negativo
			logger.logWarning("[Parser] No se admiten ULONG con valores negativos: " + "-"+constante + ", se trunca a 0_ul");
			TS.swapLexemas(constante, "0_ul");
			return "0_ul";
		} else {
			// se recibio un INT negativo
			String negConstante = "-"+constante;
			TS.swapLexemas(constante, negConstante);
			return negConstante;
		}
	}
}	

public int yylex() {
	return lexico.yylex(parser);
}

public void yyerror(String error) {
	logger.logError(error);
}

public static void main(String[] args) {
	if (args.length == 0) {
		System.err.println("No se especifico ningun archivo de codigo");
	} else {
		String archivo_a_leer = args[0];
		System.out.println("Se va a leer archivo " + archivo_a_leer);
		
		FileReaderHelper fileHelper = new FileReaderHelper();
		
		boolean fileOpenSuccess = fileHelper.open(archivo_a_leer);
		
		if (fileOpenSuccess) {
			parser = new Parser();
			lexico = new AnalizadorLexico(fileHelper);
			
	    parser.run();
	
			String path = new File(archivo_a_leer).getAbsolutePath();
	        
	    Output out = new Output(path);
	        
	    out.saveFile("codigo-lexico.txt", logger.getLexico());
			out.saveFile("codigo-sintactico.txt", logger.getSintactico());
      out.saveFile("codigo-polaca.txt", polaca.showPolaca());

      GeneracionCodigo gc = new GeneracionCodigo();

      out.saveFile("codigo-assembler.txt", gc.showAssembler());
			out.saveFile("tabla-de-simbolos.txt", TS.print());
		}
	}
}
//#line 1214 "Parser.java"
//###############################################################
// method: yylexdebug : check lexer state
//###############################################################
void yylexdebug(int state,int ch)
{
String s=null;
  if (ch < 0) ch=0;
  if (ch <= YYMAXTOKEN) //check index bounds
     s = yyname[ch];    //now get it
  if (s==null)
    s = "illegal-symbol";
  debug("state "+state+", reading "+ch+" ("+s+")");
}





//The following are now global, to aid in error reporting
int yyn;       //next next thing to do
int yym;       //
int yystate;   //current parsing state from state table
String yys;    //current token string


//###############################################################
// method: yyparse : parse input and execute indicated items
//###############################################################
int yyparse()
{
boolean doaction;
  init_stacks();
  yynerrs = 0;
  yyerrflag = 0;
  yychar = -1;          //impossible char forces a read
  yystate=0;            //initial state
  state_push(yystate);  //save it
  val_push(yylval);     //save empty value
  while (true) //until parsing is done, either correctly, or w/error
    {
    doaction=true;
    if (yydebug) debug("loop"); 
    //#### NEXT ACTION (from reduction table)
    for (yyn=yydefred[yystate];yyn==0;yyn=yydefred[yystate])
      {
      if (yydebug) debug("yyn:"+yyn+"  state:"+yystate+"  yychar:"+yychar);
      if (yychar < 0)      //we want a char?
        {
        yychar = yylex();  //get next token
        if (yydebug) debug(" next yychar:"+yychar);
        //#### ERROR CHECK ####
        if (yychar < 0)    //it it didn't work/error
          {
          yychar = 0;      //change it to default string (no -1!)
          if (yydebug)
            yylexdebug(yystate,yychar);
          }
        }//yychar<0
      yyn = yysindex[yystate];  //get amount to shift by (shift index)
      if ((yyn != 0) && (yyn += yychar) >= 0 &&
          yyn <= YYTABLESIZE && yycheck[yyn] == yychar)
        {
        if (yydebug)
          debug("state "+yystate+", shifting to state "+yytable[yyn]);
        //#### NEXT STATE ####
        yystate = yytable[yyn];//we are in a new state
        state_push(yystate);   //save it
        val_push(yylval);      //push our lval as the input for next rule
        yychar = -1;           //since we have 'eaten' a token, say we need another
        if (yyerrflag > 0)     //have we recovered an error?
           --yyerrflag;        //give ourselves credit
        doaction=false;        //but don't process yet
        break;   //quit the yyn=0 loop
        }

    yyn = yyrindex[yystate];  //reduce
    if ((yyn !=0 ) && (yyn += yychar) >= 0 &&
            yyn <= YYTABLESIZE && yycheck[yyn] == yychar)
      {   //we reduced!
      if (yydebug) debug("reduce");
      yyn = yytable[yyn];
      doaction=true; //get ready to execute
      break;         //drop down to actions
      }
    else //ERROR RECOVERY
      {
      if (yyerrflag==0)
        {
        yyerror("syntax error");
        yynerrs++;
        }
      if (yyerrflag < 3) //low error count?
        {
        yyerrflag = 3;
        while (true)   //do until break
          {
          if (stateptr<0)   //check for under & overflow here
            {
            yyerror("stack underflow. aborting...");  //note lower case 's'
            return 1;
            }
          yyn = yysindex[state_peek(0)];
          if ((yyn != 0) && (yyn += YYERRCODE) >= 0 &&
                    yyn <= YYTABLESIZE && yycheck[yyn] == YYERRCODE)
            {
            if (yydebug)
              debug("state "+state_peek(0)+", error recovery shifting to state "+yytable[yyn]+" ");
            yystate = yytable[yyn];
            state_push(yystate);
            val_push(yylval);
            doaction=false;
            break;
            }
          else
            {
            if (yydebug)
              debug("error recovery discarding state "+state_peek(0)+" ");
            if (stateptr<0)   //check for under & overflow here
              {
              yyerror("Stack underflow. aborting...");  //capital 'S'
              return 1;
              }
            state_pop();
            val_pop();
            }
          }
        }
      else            //discard this token
        {
        if (yychar == 0)
          return 1; //yyabort
        if (yydebug)
          {
          yys = null;
          if (yychar <= YYMAXTOKEN) yys = yyname[yychar];
          if (yys == null) yys = "illegal-symbol";
          debug("state "+yystate+", error recovery discards token "+yychar+" ("+yys+")");
          }
        yychar = -1;  //read another
        }
      }//end error recovery
    }//yyn=0 loop
    if (!doaction)   //any reason not to proceed?
      continue;      //skip action
    yym = yylen[yyn];          //get count of terminals on rhs
    if (yydebug)
      debug("state "+yystate+", reducing "+yym+" by rule "+yyn+" ("+yyrule[yyn]+")");
    if (yym>0)                 //if count of rhs not 'nil'
      yyval = val_peek(yym-1); //get current semantic value
    yyval = dup_yyval(yyval); //duplicate yyval if ParserVal is used as semantic value
    switch(yyn)
      {
//########## USER-SUPPLIED ACTIONS ##########
case 1:
//#line 17 "./src/compilador/gramatica.y"
{ 
		logger.logSuccess("[Parser] Programa correcto detectado");
		polaca.agregarElemento("END"); /* Agrego este elemento para el caso de que un salto vaya al final del programa*/
	}
break;
case 2:
//#line 21 "./src/compilador/gramatica.y"
{ logger.logError("[Parser] Se esperaba simbolo '{' al principio del programa"); }
break;
case 3:
//#line 22 "./src/compilador/gramatica.y"
{ logger.logError("[Parser] Se esperaba simbolo '}' al final del programa"); }
break;
case 4:
//#line 23 "./src/compilador/gramatica.y"
{ logger.logError("[Parser] Programa vacio"); }
break;
case 5:
//#line 24 "./src/compilador/gramatica.y"
{ logger.logError("[Parser] Programa vacio"); }
break;
case 9:
//#line 34 "./src/compilador/gramatica.y"
{ polaca.resetContador(); }
break;
case 10:
//#line 35 "./src/compilador/gramatica.y"
{ logger.logError("[Parser] Error de sintaxis en la sentencia"); }
break;
case 16:
//#line 44 "./src/compilador/gramatica.y"
{ logger.logError("[Parser] Sentencia RETURN fuera de funcion"); }
break;
case 20:
//#line 54 "./src/compilador/gramatica.y"
{polaca.resetContador();}
break;
case 26:
//#line 66 "./src/compilador/gramatica.y"
{ 
		polaca.agregarElemento("RETURN");
		polaca.resetContador();
	}
break;
case 27:
//#line 70 "./src/compilador/gramatica.y"
{ logger.logError("[Parser] Se esperaba un simbolo ',' luego del RETURN"); }
break;
case 28:
//#line 74 "./src/compilador/gramatica.y"
{ 
		logger.logSuccess("[Parser] Sentencia iterativa DO WHILE detectada"); 
		polaca.generarPasoIncompleto("BI");
		polaca.completarPasoIncompleto();
		polaca.completarPasoIncompletoIteracion();
		}
break;
case 29:
//#line 80 "./src/compilador/gramatica.y"
{ logger.logError("[Parser] Se esperaba ',' luego de sentencia DO WHILE"); }
break;
case 30:
//#line 81 "./src/compilador/gramatica.y"
{ logger.logError("[Parser] Se esperaban sentencias ejecutables en sentencia DO WHILE"); }
break;
case 31:
//#line 82 "./src/compilador/gramatica.y"
{ logger.logError("[Parser] Se esperaba condicion en sentencia DO WHILE"); }
break;
case 32:
//#line 83 "./src/compilador/gramatica.y"
{ logger.logError("[Parser] Se esperaba WHILE en sentencia DO WHILE"); }
break;
case 33:
//#line 84 "./src/compilador/gramatica.y"
{ logger.logError("[Parser] Se esperaban sentencias ejecutables en sentencia DO WHILE"); }
break;
case 34:
//#line 85 "./src/compilador/gramatica.y"
{ logger.logError("[Parser] Se esperaba condicion en sentencia DO WHILE"); }
break;
case 35:
//#line 86 "./src/compilador/gramatica.y"
{ logger.logError("[Parser] Se esperaban sentencias ejecutables en sentencia DO WHILE"); }
break;
case 36:
//#line 87 "./src/compilador/gramatica.y"
{ logger.logError("[Parser] Se esperaban sentencias ejecutables en sentencia DO WHILE"); }
break;
case 37:
//#line 88 "./src/compilador/gramatica.y"
{ logger.logError("[Parser] Se esperaban sentencias ejecutables en sentencia DO WHILE"); }
break;
case 38:
//#line 89 "./src/compilador/gramatica.y"
{ logger.logError("[Parser] Se esperaban sentencias ejecutables en sentencia DO WHILE"); }
break;
case 39:
//#line 93 "./src/compilador/gramatica.y"
{ 
		logger.logSuccess("[Parser] Sentencia iterativa DO WHILE detectada");
		polaca.generarPasoIncompleto("BI");
		polaca.completarPasoIncompleto();
		polaca.completarPasoIncompletoIteracion();	
	}
break;
case 40:
//#line 99 "./src/compilador/gramatica.y"
{ logger.logError("[Parser] Se esperaba ',' luego de sentencia DO WHILE"); }
break;
case 41:
//#line 100 "./src/compilador/gramatica.y"
{ logger.logError("[Parser] Se esperaban sentencias ejecutables en sentencia DO WHILE"); }
break;
case 42:
//#line 101 "./src/compilador/gramatica.y"
{ logger.logError("[Parser] Se esperaba condicion en sentencia DO WHILE"); }
break;
case 43:
//#line 102 "./src/compilador/gramatica.y"
{ logger.logError("[Parser] Se esperaba WHILE en sentencia DO WHILE"); }
break;
case 44:
//#line 103 "./src/compilador/gramatica.y"
{ logger.logError("[Parser] Se esperaban sentencias ejecutables en sentencia DO WHILE"); }
break;
case 45:
//#line 104 "./src/compilador/gramatica.y"
{ logger.logError("[Parser] Se esperaba condicion en sentencia DO WHILE"); }
break;
case 46:
//#line 105 "./src/compilador/gramatica.y"
{ logger.logError("[Parser] Se esperaban sentencias ejecutables en sentencia DO WHILE"); }
break;
case 47:
//#line 106 "./src/compilador/gramatica.y"
{ logger.logError("[Parser] Se esperaban sentencias ejecutables en sentencia DO WHILE"); }
break;
case 48:
//#line 107 "./src/compilador/gramatica.y"
{ logger.logError("[Parser] Se esperaban sentencias ejecutables en sentencia DO WHILE"); }
break;
case 49:
//#line 108 "./src/compilador/gramatica.y"
{ logger.logError("[Parser] Se esperaban sentencias ejecutables en sentencia DO WHILE"); }
break;
case 50:
//#line 112 "./src/compilador/gramatica.y"
{ 
		logger.logSuccess("[Parser] Sentencia seleccion IF ELSE detectada"); 
		polaca.completarPasoIncompleto();
	}
break;
case 51:
//#line 116 "./src/compilador/gramatica.y"
{ 
		logger.logSuccess("[Parser] Sentencia seleccion IF sin ELSE detectada"); 
		polaca.completarPasoIncompleto(); /* ESTA BIEN QUE APAREZCA BIFURCACION INCONDICIONAL ACA?*/
	}
break;
case 52:
//#line 120 "./src/compilador/gramatica.y"
{ logger.logError("[Parser] Se esperaba ',' luego de sentencia IF ELSE"); }
break;
case 53:
//#line 121 "./src/compilador/gramatica.y"
{ logger.logError("[Parser] Se esperaba ',' luego de sentencia IF sin ELSE"); }
break;
case 54:
//#line 122 "./src/compilador/gramatica.y"
{ logger.logError("[Parser] Se esperaba condicion en sentencia IF ELSE"); }
break;
case 55:
//#line 123 "./src/compilador/gramatica.y"
{ logger.logError("[Parser] Se esperaba condicion en sentencia IF"); }
break;
case 56:
//#line 124 "./src/compilador/gramatica.y"
{ logger.logError("[Parser] Se esperaban sentencias ejecutables en sentencia IF ELSE"); }
break;
case 57:
//#line 125 "./src/compilador/gramatica.y"
{ logger.logError("[Parser] Se esperaban sentencias ejecutables en sentencia IF ELSE"); }
break;
case 58:
//#line 126 "./src/compilador/gramatica.y"
{ logger.logError("[Parser] Se esperaban sentencias ejecutables en sentencia IF"); }
break;
case 59:
//#line 130 "./src/compilador/gramatica.y"
{ 
		logger.logSuccess("[Parser] Sentencia seleccion IF ELSE detectada"); 
		polaca.completarPasoIncompleto();
	}
break;
case 60:
//#line 134 "./src/compilador/gramatica.y"
{ 
		logger.logSuccess("[Parser] Sentencia seleccion IF sin ELSE detectada");
		polaca.completarPasoIncompleto();
	}
break;
case 61:
//#line 138 "./src/compilador/gramatica.y"
{ logger.logError("[Parser] Se esperaba ',' luego de sentencia IF ELSE"); }
break;
case 62:
//#line 139 "./src/compilador/gramatica.y"
{ logger.logError("[Parser] Se esperaba ',' luego de sentencia IF sin ELSE"); }
break;
case 63:
//#line 140 "./src/compilador/gramatica.y"
{ logger.logError("[Parser] Se esperaba condicion en sentencia IF ELSE"); }
break;
case 64:
//#line 141 "./src/compilador/gramatica.y"
{ logger.logError("[Parser] Se esperaba condicion en sentencia IF"); }
break;
case 65:
//#line 142 "./src/compilador/gramatica.y"
{ logger.logError("[Parser] Se esperaban sentencias ejecutables en sentencia IF ELSE"); }
break;
case 66:
//#line 143 "./src/compilador/gramatica.y"
{ logger.logError("[Parser] Se esperaban sentencias ejecutables en sentencia IF ELSE"); }
break;
case 67:
//#line 144 "./src/compilador/gramatica.y"
{ logger.logError("[Parser] Se esperaban sentencias ejecutables en sentencia IF"); }
break;
case 68:
//#line 148 "./src/compilador/gramatica.y"
{
		/* EN LAS FILMINAS ESTA INVERTIDO ... */
		polaca.generarPasoIncompleto("BI");
		polaca.completarPasoIncompleto();
		polaca.apilar(polaca.polacaSize() - 1);
	}
break;
case 69:
//#line 154 "./src/compilador/gramatica.y"
{
		polaca.generarPasoIncompleto("BI");
		polaca.completarPasoIncompleto();
		polaca.apilar(polaca.polacaSize() - 1);
	}
break;
case 70:
//#line 159 "./src/compilador/gramatica.y"
{ logger.logError("[Parser] Se esperaban un simbolo '}' en el bloque"); }
break;
case 71:
//#line 160 "./src/compilador/gramatica.y"
{ logger.logError("[Parser] Se esperaban un simbolo '{' en el bloque"); }
break;
case 72:
//#line 161 "./src/compilador/gramatica.y"
{ logger.logError("[Parser] Se esperaban sentencias ejecutables dentro del bloque"); }
break;
case 73:
//#line 162 "./src/compilador/gramatica.y"
{ logger.logError("[Parser] No se permiten declaraciones de variables dentro de bloque de sentencias ejecutables"); }
break;
case 76:
//#line 168 "./src/compilador/gramatica.y"
{ logger.logError("[Parser] Se esperaban un simbolo '}' en el bloque"); }
break;
case 77:
//#line 169 "./src/compilador/gramatica.y"
{ logger.logError("[Parser] Se esperaban un simbolo '{' en el bloque"); }
break;
case 78:
//#line 170 "./src/compilador/gramatica.y"
{ logger.logError("[Parser] Se esperaban sentencias ejecutables dentro del bloque"); }
break;
case 79:
//#line 171 "./src/compilador/gramatica.y"
{ logger.logError("[Parser] No se permiten declaraciones de variables dentro de bloque de sentencias ejecutables"); }
break;
case 80:
//#line 175 "./src/compilador/gramatica.y"
{
		if (val_peek(0).sval.equals("DO")){
			polaca.apilar(polaca.getPosicion() + 1);
		}
		else{
			polaca.apilar(polaca.polacaSize() - polaca.getContador() + 1);
		}
		polaca.resetContador();
	}
break;
case 81:
//#line 186 "./src/compilador/gramatica.y"
{
		if (val_peek(0).sval.equals("DO"))
			polaca.apilar(polaca.getPosicion() + 1);
		else
			polaca.apilar(polaca.polacaSize() - polaca.getContador() + 1);
		polaca.resetContador();
	}
break;
case 84:
//#line 197 "./src/compilador/gramatica.y"
{ logger.logError("[Parser] Se esperaban un simbolo '}' en el bloque"); }
break;
case 85:
//#line 198 "./src/compilador/gramatica.y"
{ logger.logError("[Parser] Se esperaban un simbolo '{' en el bloque"); }
break;
case 86:
//#line 199 "./src/compilador/gramatica.y"
{ logger.logError("[Parser] Se esperaban sentencias ejecutables dentro del bloque"); }
break;
case 87:
//#line 200 "./src/compilador/gramatica.y"
{ logger.logError("[Parser] No se permiten declaraciones de variables dentro de bloque de sentencias ejecutables"); }
break;
case 88:
//#line 204 "./src/compilador/gramatica.y"
{
		polaca.generarPasoIncompleto("BI");
		polaca.completarPasoIncompleto();
		polaca.apilar(polaca.polacaSize() - 1);
	}
break;
case 90:
//#line 210 "./src/compilador/gramatica.y"
{ logger.logError("[Parser] No se permiten declaraciones de variables dentro de bloque de sentencias ejecutables"); }
break;
case 91:
//#line 211 "./src/compilador/gramatica.y"
{
		polaca.generarPasoIncompleto("BI");
		polaca.completarPasoIncompleto();
		polaca.apilar(polaca.polacaSize() - 1);
	}
break;
case 92:
//#line 216 "./src/compilador/gramatica.y"
{
		polaca.generarPasoIncompleto("BI");
		polaca.completarPasoIncompleto();
		polaca.apilar(polaca.polacaSize() - 1);
	}
break;
case 93:
//#line 221 "./src/compilador/gramatica.y"
{
		polaca.generarPasoIncompleto("BI");
		polaca.completarPasoIncompleto();
		polaca.apilar(polaca.polacaSize() - 1);
	}
break;
case 94:
//#line 226 "./src/compilador/gramatica.y"
{ logger.logError("[Parser] Se esperaban un simbolo '{' en el bloque"); }
break;
case 95:
//#line 227 "./src/compilador/gramatica.y"
{ logger.logError("[Parser] Se esperaban un simbolo '{' en el bloque"); }
break;
case 96:
//#line 228 "./src/compilador/gramatica.y"
{ logger.logError("[Parser] Se esperaban un simbolo '}' en el bloque"); }
break;
case 97:
//#line 229 "./src/compilador/gramatica.y"
{ logger.logError("[Parser] Se esperaban un simbolo '}' en el bloque"); }
break;
case 98:
//#line 230 "./src/compilador/gramatica.y"
{ logger.logError("[Parser] Se esperaban sentencias ejecutables en bloque de sentencias ejecutables"); }
break;
case 101:
//#line 236 "./src/compilador/gramatica.y"
{ logger.logError("[Parser] No se permiten declaraciones de variables dentro de bloque de sentencias ejecutables"); }
break;
case 105:
//#line 240 "./src/compilador/gramatica.y"
{ logger.logError("[Parser] Se esperaban un simbolo '{' en el bloque"); }
break;
case 106:
//#line 241 "./src/compilador/gramatica.y"
{ logger.logError("[Parser] Se esperaban un simbolo '{' en el bloque"); }
break;
case 107:
//#line 242 "./src/compilador/gramatica.y"
{ logger.logError("[Parser] Se esperaban un simbolo '}' en el bloque"); }
break;
case 108:
//#line 243 "./src/compilador/gramatica.y"
{ logger.logError("[Parser] Se esperaban un simbolo '}' en el bloque"); }
break;
case 109:
//#line 244 "./src/compilador/gramatica.y"
{ logger.logError("[Parser] Se esperaban sentencias ejecutables en bloque de sentencias ejecutables"); }
break;
case 112:
//#line 250 "./src/compilador/gramatica.y"
{ logger.logError("[Parser] No se permiten declaraciones de variables dentro de bloque de sentencias ejecutables"); }
break;
case 116:
//#line 254 "./src/compilador/gramatica.y"
{ logger.logError("[Parser] Se esperaban un simbolo '{' en el bloque"); }
break;
case 117:
//#line 255 "./src/compilador/gramatica.y"
{ logger.logError("[Parser] Se esperaban un simbolo '{' en el bloque"); }
break;
case 118:
//#line 256 "./src/compilador/gramatica.y"
{ logger.logError("[Parser] Se esperaban un simbolo '}' en el bloque"); }
break;
case 119:
//#line 257 "./src/compilador/gramatica.y"
{ logger.logError("[Parser] Se esperaban un simbolo '}' en el bloque"); }
break;
case 120:
//#line 258 "./src/compilador/gramatica.y"
{ logger.logError("[Parser] Se esperaban sentencias ejecutables en bloque de sentencias ejecutables"); }
break;
case 121:
//#line 262 "./src/compilador/gramatica.y"
{ logger.logError("[Parser] Codigo inalcanzable luego del RETURN, se ignorara"); }
break;
case 122:
//#line 263 "./src/compilador/gramatica.y"
{ logger.logError("[Parser] Codigo inalcanzable luego del RETURN, se ignorara"); }
break;
case 127:
//#line 274 "./src/compilador/gramatica.y"
{ logger.logError("[Parser] No se aceptan declaraciones de variables en sentencias ejecutables"); }
break;
case 128:
//#line 275 "./src/compilador/gramatica.y"
{ logger.logError("[Parser] No se aceptan declaraciones de variables en sentencias ejecutables"); }
break;
case 131:
//#line 281 "./src/compilador/gramatica.y"
{ logger.logError("[Parser] No se aceptan declaraciones de variables en sentencias ejecutables"); }
break;
case 132:
//#line 282 "./src/compilador/gramatica.y"
{ logger.logError("[Parser] No se aceptan declaraciones de variables en sentencias ejecutables"); }
break;
case 133:
//#line 286 "./src/compilador/gramatica.y"
{
		logger.logSuccess("[Parser] Sentencia PRINT detectada");
		polaca.agregarElemento(val_peek(1).sval);
		polaca.agregarElemento(val_peek(2).sval);
	}
break;
case 134:
//#line 291 "./src/compilador/gramatica.y"
{ logger.logError("[Parser] Se esperaba un simbolo ',' en Sentencia PRINT"); }
break;
case 135:
//#line 292 "./src/compilador/gramatica.y"
{ logger.logError("[Parser] Se esperaba CADENA en Sentencia PRINT"); }
break;
case 136:
//#line 293 "./src/compilador/gramatica.y"
{ logger.logError("[Parser] Se esperaba una CADENA y se encontro un IDENTIFICADOR en sentencia PRINT"); }
break;
case 137:
//#line 294 "./src/compilador/gramatica.y"
{ logger.logError("[Parser] Se esperaba un simbolo ',' en sentencia PRINT"); }
break;
case 138:
//#line 295 "./src/compilador/gramatica.y"
{ logger.logError("[Parser] Se esperaba una CADENA y se encontro una constante en sentencia PRINT"); }
break;
case 139:
//#line 296 "./src/compilador/gramatica.y"
{ logger.logError("[Parser] Se esperaba un simbolo ',' en sentencia PRINT"); }
break;
case 140:
//#line 301 "./src/compilador/gramatica.y"
{ 

		if (val_peek(4).sval.contains(".")) {
			boolean esCadenaValida = genCodigoIntermedio.esCadenaDeLlamadasValida(val_peek(4).sval);

			if (esCadenaValida && genCodigoIntermedio.verificaUsoCorrectoIdentificadorEnCadenaDeLlamadas(val_peek(4).sval, Constantes.NOMBRE_METODO)) {
				logger.logSuccess("[Codigo Intermedio] La cadena de llamadas " + val_peek(4).sval + " es valida ");

				boolean tieneParam = genCodigoIntermedio.tieneParametroElMetodoLlamado(val_peek(4).sval);

				if (tieneParam) {
					logger.logSuccess("[Codigo Intermedio] Se llamo al metodo " + val_peek(4).sval + " correctamente con un parametro");
					String[] cadena = val_peek(4).sval.split("\\.");
					String salto = "";
					if (cadena.length == 2){
						String ambito = genCodigoIntermedio.existeIdentificadorDeClaseEnAlgunAmbitoContenedor(cadena[0]);
						salto = genCodigoIntermedio.generarAmbito() + ":" + TS.getAtributo(cadena[0] + ambito, Constantes.TYPE) + ":" + cadena[cadena.length - 1];
						String parametro = genCodigoIntermedio.obtenerParametroDelMetodoLlamado(val_peek(4).sval);
						polaca.agregarElemento(parametro + genCodigoIntermedio.generarAmbito() + ":" + TS.getAtributo(cadena[0] + ambito, Constantes.TYPE) + ":" + cadena[cadena.length - 1]);
						TS.removeLexema(cadena[0]);
						TS.removeLexema(cadena[1]);
					}
					else {
						salto = genCodigoIntermedio.generarAmbito() + ":" + cadena[cadena.length - 2] + ":" + cadena[cadena.length - 1];
						String parametro = genCodigoIntermedio.obtenerParametroDelMetodoLlamado(val_peek(4).sval);
						polaca.agregarElemento(parametro + genCodigoIntermedio.generarAmbito() + ":" + cadena[cadena.length - 2] + ":" + cadena[cadena.length - 1]);
					}
					
					polaca.agregarElemento("=");
					polaca.generarPasoIncompleto("CALL");
					polaca.completarPasoIncompletoInvocacion(salto);
				} else {
					logger.logError("[Codigo Intermedio] Se esperaba llamar al metodo " + val_peek(4).sval + " sin parametro");
				}
			} else {
				logger.logError("[Codigo Intermedio] La cadena de llamados " + val_peek(4).sval + " no es valida como llamado a metodo");
			}
			genCodigoIntermedio.removerLexemasCadenaInvalida(val_peek(4).sval);
		} else {
			String ambito = genCodigoIntermedio.existeIdentificadorEnAlgunAmbitoContenedor(val_peek(4).sval);
			if (!ambito.isEmpty()){
				if (!(boolean) TS.getAtributo(val_peek(4).sval + ambito, Constantes.TIENE_PARAMETRO)){
					logger.logError("[Generacion codigo] Cantidad de parametros incorrecta para la funcion " + val_peek(4).sval);
				}
				else {

					String parametro = (String)TS.getAtributo(val_peek(4).sval + ambito, Constantes.PARAMETRO);

					polaca.agregarElemento(parametro + ambito + ":" + val_peek(4).sval);
					polaca.agregarElemento("=");

					polaca.generarPasoIncompleto("CALL");
					polaca.completarPasoIncompletoInvocacion(ambito + ":" + val_peek(4).sval);
				}
			}
		}
	}
break;
case 141:
//#line 358 "./src/compilador/gramatica.y"
{ 
		logger.logSuccess("[Parser] Invocacion de funcion sin expresion detectada");

		if (val_peek(3).sval.contains(".")) {

			boolean esCadenaValida = genCodigoIntermedio.esCadenaDeLlamadasValida(val_peek(3).sval);

			if (esCadenaValida && genCodigoIntermedio.verificaUsoCorrectoIdentificadorEnCadenaDeLlamadas(val_peek(3).sval, Constantes.NOMBRE_METODO)) {

				logger.logSuccess("[Codigo Intermedio] La cadena de llamadas " + val_peek(3).sval + " es valida ");

				boolean tieneParam = genCodigoIntermedio.tieneParametroElMetodoLlamado(val_peek(3).sval);

				if (!tieneParam) {
					logger.logSuccess("[Codigo Intermedio] Se llamo al metodo " + val_peek(3).sval + " correctamente sin parametro");
					String[] cadena = val_peek(3).sval.split("\\.");
					String salto = "";
					if (cadena.length == 2){
						String ambito = genCodigoIntermedio.existeIdentificadorDeClaseEnAlgunAmbitoContenedor(cadena[0]);
						salto = genCodigoIntermedio.generarAmbito() + ":" + TS.getAtributo(cadena[0] + ambito, Constantes.TYPE) + ":" + cadena[cadena.length - 1];
						TS.removeLexema(cadena[0]);
						TS.removeLexema(cadena[1]);
					}
					else
						salto = genCodigoIntermedio.generarAmbito() + ":" + cadena[cadena.length - 2] + ":" + cadena[cadena.length - 1];
					
					polaca.generarPasoIncompleto("CALL");
					polaca.completarPasoIncompletoInvocacion(salto);
				} else {
					logger.logError("[Codigo Intermedio] Se esperaba llamar al metodo " + val_peek(3).sval + " con un parametro");
				}
			} else {
				logger.logError("[Codigo Intermedio] La cadena de llamados " + val_peek(3).sval + " no es valida como llamado a metodo");
			}
			genCodigoIntermedio.removerLexemasCadenaInvalida(val_peek(3).sval);
		} else {
			String ambito = genCodigoIntermedio.existeIdentificadorEnAlgunAmbitoContenedor(val_peek(3).sval);
			if (!ambito.isEmpty()) {
				if (genCodigoIntermedio.verificaUsoCorrectoIdentificador(val_peek(3).sval + ambito, Constantes.NOMBRE_FUNCION)) {
					if ((boolean) TS.getAtributo(val_peek(3).sval + ambito, Constantes.TIENE_PARAMETRO)) {
						logger.logError("[Generacion codigo] Cantidad de parametros incorrecta para la funcion " + val_peek(3).sval);
					}
					else{
						polaca.generarPasoIncompleto("CALL");
						polaca.completarPasoIncompletoInvocacion(ambito + ":" + val_peek(3).sval);
					}
				} else {
					logger.logError("[Codigo intermedio] El identificador " + val_peek(3).sval + " no es una funcion");
				}
			} else {
				logger.logError("[Codigo intermedio] El identificador " + val_peek(3).sval + " no esta declarado");
			}
			TS.removeLexema(val_peek(3).sval);
		}
	}
break;
case 142:
//#line 413 "./src/compilador/gramatica.y"
{ logger.logError("[Parser] Invocacion de funcion con multiples expresiones detectada, se preserva solo la primera expresion"); }
break;
case 143:
//#line 414 "./src/compilador/gramatica.y"
{ logger.logError("[Parser] Se esperaba un simbolo ',' en invocacion de funcion"); }
break;
case 144:
//#line 415 "./src/compilador/gramatica.y"
{ logger.logError("[Parser] Se esperaba un simbolo ',' en invocacion de funcion"); }
break;
case 145:
//#line 416 "./src/compilador/gramatica.y"
{ logger.logError("[Parser] Se esperaba un simbolo ',' en invocacion de funcion"); }
break;
case 148:
//#line 425 "./src/compilador/gramatica.y"
{ 
		logger.logSuccess("[Parser] Asignacion detectada");
		/** Se llama a miembro de clase */ 
		if (val_peek(3).sval.contains(".")) {

			boolean esCadenaValida = genCodigoIntermedio.esCadenaDeLlamadasValida(val_peek(3).sval);

			if (esCadenaValida && genCodigoIntermedio.verificaUsoCorrectoIdentificadorEnCadenaDeLlamadas(val_peek(3).sval, Constantes.USO_ATRIBUTO)) {

				String[] partes = val_peek(3).sval.split("\\."); 
				String ambito = genCodigoIntermedio.existeIdentificadorEnAlgunAmbitoContenedor(partes[0]);

				if (partes.length == 2) {

					String nuevoLexema = partes[1] + ambito + ":" + partes[0];

					TS.putLexema(nuevoLexema, Constantes.IDENTIFICADOR);
					TS.agregarAtributo(nuevoLexema, Constantes.USE, Constantes.USO_ATRIBUTO_VARIABLE);
					String tipoInstancia = (String) TS.getAtributo(partes[0] + ambito, Constantes.TYPE);
					String tipoAtributoInstancia = (String) TS.getAtributo(partes[1] + ambito + ":" + tipoInstancia, Constantes.TYPE);
					TS.agregarAtributo(nuevoLexema, Constantes.TYPE, tipoAtributoInstancia);
					polaca.agregarElemento(nuevoLexema);
					polaca.agregarElemento("=");
					TS.agregarAtributo(partes[0] + ambito, Constantes.COMPROBACION_USO, true);
				} else {
					/** c1.cb.b */
					if (partes.length == 3) {
						String nuevoLexema = partes[2] + ambito + ":" + partes[0] + ":" + partes[1];
						TS.putLexema(nuevoLexema, Constantes.IDENTIFICADOR);
						TS.agregarAtributo(nuevoLexema, Constantes.USE, Constantes.USO_ATRIBUTO_VARIABLE);
						TS.agregarAtributo(nuevoLexema, Constantes.TYPE, (String) TS.getAtributo(partes[2] + ambito + ":" + partes[1], Constantes.TYPE));
						polaca.agregarElemento(nuevoLexema);
						polaca.agregarElemento("=");
					} else {
						/** c1.cb.cc.b */
						String nuevoLexema = partes[3] + ambito + ":" + partes[0] + ":" + partes[1] + ":" + partes[2];
						TS.putLexema(nuevoLexema, Constantes.IDENTIFICADOR);
						TS.agregarAtributo(nuevoLexema, Constantes.USE, Constantes.USO_ATRIBUTO_VARIABLE);
						TS.agregarAtributo(nuevoLexema, Constantes.TYPE, (String) TS.getAtributo(partes[3] + ambito + ":" + partes[2], Constantes.TYPE));
						polaca.agregarElemento(nuevoLexema);
						polaca.agregarElemento("=");
					}
				}
			} else {
				logger.logError("[Codigo Intermedio] La cadena de llamados " + val_peek(3).sval + " no es valida en una asignacion");
			}
			genCodigoIntermedio.removerLexemasCadenaInvalida(val_peek(3).sval);
		} else {
			String ambito = genCodigoIntermedio.existeIdentificadorEnAlgunAmbitoContenedor(val_peek(3).sval);

			if (!ambito.isEmpty()) {
				if (genCodigoIntermedio.verificaUsoCorrectoIdentificador(val_peek(3).sval + ambito, Constantes.USO_VARIABLE) ||
					genCodigoIntermedio.verificaUsoCorrectoIdentificador(val_peek(3).sval + ambito, Constantes.NOMBRE_PARAMETRO) ||
					genCodigoIntermedio.verificaUsoCorrectoIdentificador(val_peek(3).sval + ambito, Constantes.USO_ATRIBUTO)) {
						polaca.agregarElemento(val_peek(3).sval + ambito);
						polaca.agregarElemento(val_peek(2).sval);
						TS.agregarAtributo(val_peek(3).sval + ambito, Constantes.COMPROBACION_USO, true);
				} else {
					polaca.removeElementos();
					logger.logError("[Codigo intermedio] El identificador " + val_peek(3).sval + " no es una variable");
				}
			} else {
				polaca.removeElementos();
				logger.logError("[Codigo intermedio] El identificador " + val_peek(3).sval + " no esta declarado");
			}
			TS.removeLexema(val_peek(3).sval);
		}
	}
break;
case 149:
//#line 493 "./src/compilador/gramatica.y"
{ logger.logError("[Parser] Se esperaba un simbolo ',' en sentencia asignacion"); }
break;
case 150:
//#line 494 "./src/compilador/gramatica.y"
{ logger.logError("[Parser] Se esperaba expresion del lado derecho en sentencia asignacion"); }
break;
case 151:
//#line 498 "./src/compilador/gramatica.y"
{
		yyval.sval = val_peek(0).sval;
	}
break;
case 152:
//#line 501 "./src/compilador/gramatica.y"
{
		yyval.sval = val_peek(2).sval + "." + val_peek(0).sval;
	}
break;
case 157:
//#line 514 "./src/compilador/gramatica.y"
{ 
		logger.logSuccess("[Parser] Declaracion de lista de variables detectado");
		genCodigoIntermedio.agregarTipoAListaDeVariables(val_peek(2).sval);
		genCodigoIntermedio.agregarUsoAListaDeVariables(Constantes.USO_VARIABLE);
		genCodigoIntermedio.agregarAmbitoAListaDeVariables();
		genCodigoIntermedio.removerListaVariablesADeclarar();
	}
break;
case 158:
//#line 521 "./src/compilador/gramatica.y"
{ logger.logError("[Parser] Se esperaba un simbolo ',' en sentencia declaracion de variables"); }
break;
case 159:
//#line 522 "./src/compilador/gramatica.y"
{ logger.logError("[Parser] Se esperaba una lista de variables en sentencia declaracion de variables"); }
break;
case 160:
//#line 526 "./src/compilador/gramatica.y"
{
		if (genCodigoIntermedio.existeIdentificadorEnAlgunAmbitoContenedor(val_peek(0).sval).isEmpty()) {
			TS.agregarAtributo(val_peek(0).sval, Constantes.USE, Constantes.NOMBRE_INTERFAZ);
			TS.iniciarAtributoLista(val_peek(0).sval, Constantes.METODOS);
			TS.swapLexemas(val_peek(0).sval, val_peek(0).sval + genCodigoIntermedio.generarAmbito());
			genCodigoIntermedio.setAmbitoClaseInterfaz(val_peek(0).sval);
		} else {
			logger.logError("[Codigo intermedio] Se intento volver a declarar el identificador " + val_peek(0).sval);
			TS.removeLexema(val_peek(0).sval);
		}
	}
break;
case 161:
//#line 537 "./src/compilador/gramatica.y"
{ logger.logError("[Parser] Se esperaba un identificador en declaracion de INTERFACE"); }
break;
case 162:
//#line 541 "./src/compilador/gramatica.y"
{ 
		logger.logSuccess("[Parser] Declaracion de INTERFACE detectada");
		genCodigoIntermedio.clearAmbitoClaseInterfaz();
	}
break;
case 163:
//#line 545 "./src/compilador/gramatica.y"
{ 
		logger.logError("[Parser] Se esperaban metodos en la declaracion de INTERFACE");
		genCodigoIntermedio.clearAmbitoClaseInterfaz();
	}
break;
case 164:
//#line 549 "./src/compilador/gramatica.y"
{ 
		logger.logError("[Parser] Se esperaba un simbolo '{' en declaracion de INTERFACE"); 
		genCodigoIntermedio.clearAmbitoClaseInterfaz();
	}
break;
case 168:
//#line 562 "./src/compilador/gramatica.y"
{ logger.logError("[Parser] Se esperaba un simbolo ',' en declaracion de metodo en INTERFACE"); }
break;
case 169:
//#line 563 "./src/compilador/gramatica.y"
{ logger.logError("[Parser] No se aceptan sentencias declarativas de atributos en INTERFACE"); }
break;
case 170:
//#line 564 "./src/compilador/gramatica.y"
{ logger.logError("[Parser] No se aceptan sentencias declarativas de atributos en INTERFACE"); }
break;
case 171:
//#line 568 "./src/compilador/gramatica.y"
{ 
		logger.logSuccess("[Parser] Declaracion de lista de variables en CLASS detectado"); 

		/**
		*	Si falla la declaracion de la clase, por ejemplo si se define con IMPLEMENT z
		* y z no existe o no es una interfaz, no se continua con la definicion de la class,
		* por lo que no estara el nombre de clase seteado. No se debe intentar proceder
		* en la definicion del cuerpo.
		*/
		if (!genCodigoIntermedio.getAmbitoClaseInterfaz().isEmpty()) {
			genCodigoIntermedio.agregarTipoAListaDeVariables(val_peek(2).sval);
			genCodigoIntermedio.agregarUsoAListaDeVariables(Constantes.USO_ATRIBUTO);
			genCodigoIntermedio.agregarAmbitoAListaDeAtributos();
			genCodigoIntermedio.agregarListaDeVariablesComoAtributos();
			genCodigoIntermedio.removerListaVariablesADeclarar();
		}
	}
break;
case 172:
//#line 585 "./src/compilador/gramatica.y"
{ logger.logError("[Parser] Se esperaba un simbolo ',' en declaracion de lista de variables en CLASS"); }
break;
case 174:
//#line 587 "./src/compilador/gramatica.y"
{ logger.logError("[Parser] Se encontro un simbolo inesperado ',' en declaracion de funcion en CLASS"); }
break;
case 175:
//#line 588 "./src/compilador/gramatica.y"
{
		/** Una clase no puede heredar de si misma */
		if (val_peek(1).sval.equals(genCodigoIntermedio.getAmbitoClaseInterfaz())) {
			logger.logError("[Codigo Intermedio] La clase " + val_peek(1).sval + " no puede heredar de si misma ");
		} else {
			String ambitoDeClase = genCodigoIntermedio.existeIdentificadorDeClaseEnAlgunAmbitoContenedor(val_peek(1).sval);

			if (!genCodigoIntermedio.existeIdentificadorDeClaseEnAlgunAmbitoContenedor(val_peek(1).sval).isEmpty()) {
				logger.logSuccess("[Codigo Intermedio] El identificador " + val_peek(1).sval + " esta declarado");

				if (genCodigoIntermedio.verificaUsoCorrectoIdentificador(val_peek(1).sval + ambitoDeClase, Constantes.NOMBRE_CLASE)) {
					int nivelesDeHerencia = (int) TS.getAtributo(val_peek(1).sval + ambitoDeClase, Constantes.NIVELES_HERENCIA);

					/** Se permiten hasta 3 niveles de herencia, se hace +1 para ver si con la nueva herencia no se viola la restriccion */
					if (nivelesDeHerencia + 1 >= 3) {
						logger.logError("[Codigo Intermedio] Se superaron los niveles de herencia validos para la clase " + genCodigoIntermedio.getAmbitoClaseInterfaz());
					} else {

						String claseActual = genCodigoIntermedio.getAmbitoClaseInterfaz();
						String ambitoClaseActual = genCodigoIntermedio.existeIdentificadorDeClaseEnAlgunAmbitoContenedor(claseActual);
						String ambitoClaseDefinidaActual = ambitoClaseActual + ":" + claseActual;
						String nuevoLexema = val_peek(1).sval + ambitoClaseDefinidaActual;

						if (genCodigoIntermedio.verificaSobreescrituraDeAtributos(claseActual + ambitoClaseActual, val_peek(1).sval + ambitoDeClase)) {
							TS.swapLexemas(val_peek(1).sval, nuevoLexema);
							TS.agregarAtributo(nuevoLexema, Constantes.TYPE, val_peek(1).sval);
							TS.agregarAtributo(nuevoLexema, Constantes.USE, Constantes.NOMBRE_CLASE);

							int nivelesDeHerenciaMaximo = (int) TS.getAtributo(claseActual + ambitoClaseActual, Constantes.NIVELES_HERENCIA);
							/** 
							*	En el caso de heredar de varias clases, con diferente nivel de herencia, se debe quedar
							* solo con el mayor nivel y evitar sobreescribir un nivel ya existente. 
							*/
							if (nivelesDeHerencia + 1 > nivelesDeHerenciaMaximo) {
								TS.agregarAtributo(claseActual + ambitoClaseActual, Constantes.NIVELES_HERENCIA, nivelesDeHerencia + 1);
							}
						}
					}
				} else {
					logger.logError("[Codigo Intermedio] El identificador " + val_peek(1).sval + " no es una clase heredable");
				}
			} else {
				logger.logError("[Codigo Intermedio] El identificador " + val_peek(1).sval + " no esta declarado");
			}
		}
		TS.removeLexema(val_peek(1).sval);
	}
break;
case 176:
//#line 638 "./src/compilador/gramatica.y"
{ 
		logger.logSuccess("[Parser] Declaracion de clase CLASS detectado");
		
		if (genCodigoIntermedio.implementaAlgunaInterfaz(val_peek(3).sval)) {
			if (genCodigoIntermedio.verificarImplementacionCompletaDeInterfaz(val_peek(3).sval)){
				logger.logSuccess("[Codigo Intermedio] Metodos declarados en interfaz fueron implementados correctamente para la clase " + val_peek(3).sval);
			}
			else{
				logger.logError("[Codigo Intermedio] No fueron implementados correctamente todos los metodos de la interfaz para la clase " + val_peek(3).sval);
				polaca.eliminarPolacaClase(val_peek(3).sval);
			}
		}
		
		genCodigoIntermedio.clearAmbitoClaseInterfaz();
	}
break;
case 177:
//#line 656 "./src/compilador/gramatica.y"
{ 
		/*CHEQUEO QUE CLASE NO HAYA SIDO DECLARADA (DEBERIA CHEQUEAR USO, XQ PUEDE QUE IDENTIF PERTENEZCA A OTRA USO)*/
		if (!TS.has(val_peek(0).sval + genCodigoIntermedio.generarAmbito())) {
			TS.agregarAtributo(val_peek(0).sval, Constantes.USE, Constantes.NOMBRE_CLASE);
			TS.agregarAtributo(val_peek(0).sval, Constantes.IMPLEMENTA, null);
			TS.iniciarAtributoLista(val_peek(0).sval, Constantes.ATRIBUTOS);
			TS.iniciarAtributoLista(val_peek(0).sval, Constantes.METODOS);
			TS.agregarAtributo(val_peek(0).sval, Constantes.NIVELES_HERENCIA, 0);
			TS.swapLexemas(val_peek(0).sval, val_peek(0).sval + genCodigoIntermedio.generarAmbito());
			genCodigoIntermedio.setAmbitoClaseInterfaz(val_peek(0).sval);
			genCodigoIntermedio.apilarAmbito(val_peek(0).sval);
			yyval.sval = val_peek(0).sval;
		} else {
			logger.logError("[Codigo intermedio] Se intento volver a declarar el identificador " + val_peek(0).sval);
		}
	}
break;
case 178:
//#line 672 "./src/compilador/gramatica.y"
{
		/*CHEQUEO QUE CLASE NO HAYA SIDO DECLARADA (DEBERIA CHEQUEAR USO, XQ PUEDE QUE IDENTIF PERTENEZCA A OTRA USO)*/
		if (!TS.has(val_peek(2).sval + genCodigoIntermedio.generarAmbito())) {
		
			String ambitoIdentificadorInterfaz = genCodigoIntermedio.existeIdentificadorEnAlgunAmbitoContenedor(val_peek(0).sval);

			if (!ambitoIdentificadorInterfaz.isEmpty()) {
				logger.logSuccess("[Codigo Intermedio] El identificador " + val_peek(0).sval + " esta declarado");
				if (genCodigoIntermedio.verificaUsoCorrectoIdentificador(val_peek(0).sval + ambitoIdentificadorInterfaz, Constantes.NOMBRE_INTERFAZ)) {
					TS.agregarAtributo(val_peek(2).sval, Constantes.USE, Constantes.NOMBRE_CLASE);
					TS.iniciarAtributoLista(val_peek(2).sval, Constantes.METODOS);
					TS.iniciarAtributoLista(val_peek(2).sval, Constantes.ATRIBUTOS);
					TS.agregarAtributo(val_peek(2).sval, Constantes.NIVELES_HERENCIA, 0);
					TS.agregarAtributo(val_peek(2).sval, Constantes.IMPLEMENTA, val_peek(0).sval);
					TS.swapLexemas(val_peek(2).sval, val_peek(2).sval + genCodigoIntermedio.generarAmbito());
					genCodigoIntermedio.setAmbitoClaseInterfaz(val_peek(2).sval);
					genCodigoIntermedio.apilarAmbito(val_peek(2).sval);
					yyval.sval = val_peek(2).sval;
				} else {
					logger.logError("[Codigo Intermedio] El identificador " + val_peek(0).sval + " no es una interfaz");
				}
			} else {
				logger.logError("[Codigo Intermedio] El identificador " + val_peek(0).sval + " no esta declarado");
			}
		} else {
			logger.logError("[Codigo intermedio] Se intento volver a declarar el identificador " + val_peek(2).sval);
		}
		TS.removeLexema(val_peek(2).sval);
		TS.removeLexema(val_peek(0).sval);
	}
break;
case 179:
//#line 702 "./src/compilador/gramatica.y"
{ logger.logError("[Parser] Se esperaba un identificador en declaracion de clase"); }
break;
case 180:
//#line 703 "./src/compilador/gramatica.y"
{ logger.logError("[Parser] Se esperaba un identificador en declaracion de clase"); }
break;
case 181:
//#line 704 "./src/compilador/gramatica.y"
{ logger.logError("[Parser] Se esperaba un identificador en IMPLEMENT de clase"); }
break;
case 182:
//#line 705 "./src/compilador/gramatica.y"
{ logger.logError("[Parser] Se esperaba un identificador en declaracion de clase"); }
break;
case 185:
//#line 714 "./src/compilador/gramatica.y"
{ 
		logger.logSuccess("[Parser] Declaracion de funcion detectado");
		if (genCodigoIntermedio.isPuedoDesapilar()){
			/* ESTA LINEa ESTABA CON EL IF DE ARRIBA, Y NO ENTRABA NUNCA POR ESO NO SALIA DEL AMBITO, CAMBIA ALGO?*/
			if (genCodigoIntermedio.esDefinicionDeClase()) {
				if (genCodigoIntermedio.esMayorAMaximoNivelAnidamientoFuncionEnMetodo()) {
					logger.logError("[Parser] Se permite hasta un maximo de un nivel de anidamiento en una funcion dentro de un metodo de clase");
				}
			}
			genCodigoIntermedio.desapilarAmbito();
		}
		else 
			genCodigoIntermedio.setPuedoDesapilar();
		if (polaca.deboEliminarFuncion()){
			polaca.eliminarPolacaFuncion(val_peek(1).sval);
		}
	}
break;
case 186:
//#line 734 "./src/compilador/gramatica.y"
{
		if (!TS.has(val_peek(3).sval + genCodigoIntermedio.generarAmbito())) {

			if (genCodigoIntermedio.esDefinicionDeClase()) {

				String claseActual = genCodigoIntermedio.getAmbitoClaseInterfaz();
				String ambitoClaseActual = genCodigoIntermedio.existeIdentificadorDeClaseEnAlgunAmbitoContenedor(claseActual);
				String ambitoClaseDefinidaActual = ambitoClaseActual + ":" + claseActual;
				String nuevoLexema =  val_peek(3).sval + genCodigoIntermedio.generarAmbito();

				polaca.crearPolacaAmbitoNuevo(genCodigoIntermedio.generarAmbito() + ":" +  val_peek(3).sval);

				TS.agregarAtributo(val_peek(3).sval, Constantes.USE, Constantes.NOMBRE_METODO);
				TS.agregarAtributo(val_peek(3).sval, Constantes.TIENE_PARAMETRO, true);
				TS.agregarAtributo(val_peek(3).sval, Constantes.PARAMETRO, val_peek(1).sval);
				genCodigoIntermedio.agregarAtributoMetodos(val_peek(3).sval);
				TS.swapLexemas(val_peek(3).sval, nuevoLexema);
				TS.swapLexemas(val_peek(1).sval, val_peek(1).sval + ambitoClaseDefinidaActual + ":" + val_peek(3).sval);
				
			} else {
				TS.agregarAtributo(val_peek(3).sval, Constantes.USE, Constantes.NOMBRE_FUNCION);
				TS.agregarAtributo(val_peek(3).sval, Constantes.TIENE_PARAMETRO, true);
				TS.agregarAtributo(val_peek(3).sval, Constantes.PARAMETRO, val_peek(1).sval);
				TS.swapLexemas(val_peek(3).sval, val_peek(3).sval + genCodigoIntermedio.generarAmbito());
				TS.swapLexemas(val_peek(1).sval, val_peek(1).sval + genCodigoIntermedio.generarAmbito()+ ":" + val_peek(3).sval);
				polaca.crearPolacaAmbitoNuevo(genCodigoIntermedio.generarAmbito() + ":" + val_peek(3).sval);
			}
			genCodigoIntermedio.apilarAmbito(val_peek(3).sval);
		} else {
			logger.logError("[Codigo intermedio] Se intento volver a declarar el identificador " + val_peek(3).sval);
			genCodigoIntermedio.setPuedoDesapilar();
		}
	}
break;
case 187:
//#line 767 "./src/compilador/gramatica.y"
{
		String ambitoCompleto = genCodigoIntermedio.generarAmbito().toString();

		if (!TS.has(val_peek(2).sval + ambitoCompleto)) {
			if (genCodigoIntermedio.esDefinicionDeClase()) {

				String claseActual = genCodigoIntermedio.getAmbitoClaseInterfaz();
				String nuevoLexema =  val_peek(2).sval + ambitoCompleto;

				polaca.crearPolacaAmbitoNuevo(ambitoCompleto + ":" +  val_peek(2).sval);

				/** @TODO encontrar una mejor forma de detectar si es un metodo o una fn dentro de un metodo */
				String partes[] = ambitoCompleto.split("\\:");
				/** 
				* Si la ultima parte del ambito es el nombre de la clase actual, se asume que se 
				* esta definiendo un metodo. Si es otra cosa, se asume que se esta definiendo una 
				* funcion dentro de un metodo de la clase. 
				*/
				if (partes[partes.length-1].equals(claseActual)) {
					/** es metodo de clase */
					TS.agregarAtributo(val_peek(2).sval, Constantes.USE, Constantes.NOMBRE_METODO);
					genCodigoIntermedio.agregarAtributoMetodos(val_peek(2).sval);
				} else {
					/** es function dentro de metodo de clase */
					TS.agregarAtributo(val_peek(2).sval, Constantes.USE, Constantes.NOMBRE_FUNCION);
				}
				TS.agregarAtributo(val_peek(2).sval, Constantes.TIENE_PARAMETRO, false);
				TS.swapLexemas(val_peek(2).sval, nuevoLexema);
			} else {
				TS.agregarAtributo(val_peek(2).sval, Constantes.USE, Constantes.NOMBRE_FUNCION);
				TS.agregarAtributo(val_peek(2).sval, Constantes.TIENE_PARAMETRO, false);
				TS.swapLexemas(val_peek(2).sval, val_peek(2).sval + ambitoCompleto);
				polaca.crearPolacaAmbitoNuevo(ambitoCompleto + ":" + val_peek(2).sval);
			}
			genCodigoIntermedio.apilarAmbito(val_peek(2).sval);
		} else {
			logger.logError("[Codigo intermedio] Se intento volver a declarar el identificador " + val_peek(2).sval);
			genCodigoIntermedio.setPuedoDesapilar();
		}
	}
break;
case 188:
//#line 807 "./src/compilador/gramatica.y"
{ logger.logError("[Parser] Encabezado de funcion con mas de 1 parametro detectado, se preserva solo el primer parametro"); }
break;
case 189:
//#line 808 "./src/compilador/gramatica.y"
{ logger.logError("[Parser] Encabezado de funcion con mas de 1 parametro detectado, se preserva solo el primer parametro"); }
break;
case 190:
//#line 809 "./src/compilador/gramatica.y"
{ logger.logError("[Parser] Se esperaba un simbolo '(' en el encabezado de la funcion"); }
break;
case 191:
//#line 813 "./src/compilador/gramatica.y"
{
		yyval.sval = val_peek(0).sval;
	}
break;
case 192:
//#line 816 "./src/compilador/gramatica.y"
{
		logger.logError("[Parser] Se esperaba un identificador en el encabezado de la funcion"); 
	}
break;
case 193:
//#line 822 "./src/compilador/gramatica.y"
{ 
		String claseActual = genCodigoIntermedio.getAmbitoClaseInterfaz();
		/** 
		*	Puede que haya fallado la definicion de la interfaz anteriormente, por ejemplo si el 
		* identificador que se intento usar ya estaba definido en el ambito
		*/
		if (!claseActual.isEmpty()) {
			String ambitoClaseActual = genCodigoIntermedio.existeIdentificadorDeClaseEnAlgunAmbitoContenedor(claseActual);
			String ambitoClaseDefinidaActual = ambitoClaseActual + ":" + claseActual;
			String nuevoLexema = val_peek(3).sval + ambitoClaseDefinidaActual;
			TS.agregarAtributo(val_peek(3).sval, Constantes.USE, Constantes.NOMBRE_METODO);
			TS.agregarAtributo(val_peek(3).sval, Constantes.TIENE_PARAMETRO , true);
			TS.swapLexemas(val_peek(3).sval, nuevoLexema);
			genCodigoIntermedio.agregarAtributoMetodos(val_peek(3).sval);
			TS.swapLexemas(val_peek(1).sval, val_peek(1).sval + ambitoClaseDefinidaActual + ":" + val_peek(3).sval);
		} else {
			TS.removeLexema(val_peek(3).sval);
			TS.removeLexema(val_peek(1).sval);
		}
	}
break;
case 194:
//#line 842 "./src/compilador/gramatica.y"
{ 
		String claseActual = genCodigoIntermedio.getAmbitoClaseInterfaz();
		/** 
		*	Puede que haya fallado la definicion de la interfaz anteriormente, por ejemplo si el 
		* identificador que se intento usar ya estaba definido en el ambito
		*/
		if (!claseActual.isEmpty()) {
			String ambitoClaseActual = genCodigoIntermedio.existeIdentificadorDeClaseEnAlgunAmbitoContenedor(claseActual);
			String ambitoClaseDefinidaActual = ambitoClaseActual + ":" + claseActual;
			String nuevoLexema = val_peek(2).sval + ambitoClaseDefinidaActual;

			TS.agregarAtributo(val_peek(2).sval, Constantes.USE, Constantes.NOMBRE_METODO);
			TS.agregarAtributo(val_peek(2).sval, Constantes.TIENE_PARAMETRO , false);
			TS.swapLexemas(val_peek(2).sval, nuevoLexema);
			genCodigoIntermedio.agregarAtributoMetodos(val_peek(2).sval);
		} else {
			TS.removeLexema(val_peek(2).sval);
		}
	}
break;
case 195:
//#line 861 "./src/compilador/gramatica.y"
{ logger.logError("[Parser] Encabezado de funcion con mas de 1 parametro detectado, se preserva solo el primer parametro"); }
break;
case 196:
//#line 862 "./src/compilador/gramatica.y"
{ logger.logError("[Parser] Encabezado de funcion con mas de 1 parametro detectado, se preserva solo el primer parametro"); }
break;
case 197:
//#line 863 "./src/compilador/gramatica.y"
{ logger.logError("[Parser] Se esperaba un identificador en el encabezado de la funcion"); }
break;
case 198:
//#line 864 "./src/compilador/gramatica.y"
{ logger.logError("[Parser] Se esperaba un identificador en el encabezado de la funcion"); }
break;
case 199:
//#line 865 "./src/compilador/gramatica.y"
{ logger.logError("[Parser] Se esperaba un simbolo '(' en el encabezado de la funcion"); }
break;
case 200:
//#line 866 "./src/compilador/gramatica.y"
{ logger.logError("[Parser] Se esperaba un simbolo '(' en el encabezado de la funcion"); }
break;
case 205:
//#line 874 "./src/compilador/gramatica.y"
{ 
		polaca.eliminarFuncion();
		logger.logError("[Parser] Se esperaba una sentencia RETURN al final de la funcion"); }
break;
case 206:
//#line 877 "./src/compilador/gramatica.y"
{ 
		polaca.eliminarFuncion();
		logger.logError("[Parser] Se esperaba una sentencia RETURN al final de la funcion"); }
break;
case 207:
//#line 880 "./src/compilador/gramatica.y"
{ logger.logError("[Parser] Se esperaba un simbolo '{' en el cuerpo de la funcion"); }
break;
case 208:
//#line 881 "./src/compilador/gramatica.y"
{ logger.logError("[Parser] Se esperaba un simbolo '{' en el cuerpo de la funcion"); }
break;
case 209:
//#line 882 "./src/compilador/gramatica.y"
{ logger.logError("[Parser] Se esperaba un simbolo '{' en el cuerpo de la funcion"); }
break;
case 210:
//#line 883 "./src/compilador/gramatica.y"
{ logger.logError("[Parser] Se esperaba un simbolo '{' en el cuerpo de la funcion"); }
break;
case 211:
//#line 884 "./src/compilador/gramatica.y"
{ logger.logError("[Parser] Se esperaba un simbolo '{' en el cuerpo de la funcion"); }
break;
case 212:
//#line 885 "./src/compilador/gramatica.y"
{ logger.logError("[Parser] Se esperaba un simbolo '{' en el cuerpo de la funcion"); }
break;
case 213:
//#line 889 "./src/compilador/gramatica.y"
{ logger.logError("[Parser] Codigo inalcanzable luego del RETURN, se ignorara"); }
break;
case 214:
//#line 890 "./src/compilador/gramatica.y"
{ logger.logError("[Parser] Codigo inalcanzable luego del RETURN, se ignorara"); }
break;
case 221:
//#line 906 "./src/compilador/gramatica.y"
{ 
		yyval.sval = val_peek(0).sval;
		TS.agregarAtributo(val_peek(0).sval, Constantes.USE, Constantes.NOMBRE_PARAMETRO);
		TS.agregarAtributo(val_peek(0).sval, Constantes.TYPE, val_peek(1).sval);
	}
break;
case 222:
//#line 914 "./src/compilador/gramatica.y"
{ 
		if (!genCodigoIntermedio.variableRedeclarada(val_peek(0).sval)) {
			genCodigoIntermedio.agregarVariableADeclarar(val_peek(0).sval);
		} else {
			logger.logError("[Codigo intermedio] Se intento volver a declarar el identificador " + val_peek(0).sval);
		}
	}
break;
case 223:
//#line 921 "./src/compilador/gramatica.y"
{ 
		if (!genCodigoIntermedio.variableRedeclarada(val_peek(0).sval)) {
			genCodigoIntermedio.agregarVariableADeclarar(val_peek(0).sval);
		} else {
			logger.logError("[Codigo intermedio] Se intento volver a declarar el identificador " + val_peek(0).sval);
		}
	}
break;
case 227:
//#line 934 "./src/compilador/gramatica.y"
{

		String ambito = genCodigoIntermedio.existeIdentificadorEnAlgunAmbitoContenedor(val_peek(0).sval);

		if (!ambito.isEmpty()) {
			logger.logSuccess("[Codigo Intermedio] El identificador " + val_peek(0).sval + " esta declarado");

			if (!genCodigoIntermedio.verificaUsoCorrectoIdentificador(val_peek(0).sval + ambito, Constantes.NOMBRE_CLASE)) {
				logger.logError("[Codigo Intermedio] El identificador " + val_peek(0).sval + " no es un nombre de clase");
			}

		} else {
			logger.logError("[Codigo Intermedio] El identificador " + val_peek(0).sval + " no esta declarado");
		}
		TS.removeLexema(val_peek(0).sval);
	}
break;
case 228:
//#line 953 "./src/compilador/gramatica.y"
{
		polaca.agregarElemento(val_peek(1).sval);
		polaca.generarPasoIncompleto("BF");
		polaca.apilar(polaca.polacaSize() - 1);
	}
break;
case 229:
//#line 958 "./src/compilador/gramatica.y"
{ logger.logError("[Parser] Se esperaba una expresion del lado derecho de la comparacion"); }
break;
case 230:
//#line 959 "./src/compilador/gramatica.y"
{ logger.logError("[Parser] Se esperaba una expresion del lado izquierdo de la comparacion"); }
break;
case 231:
//#line 960 "./src/compilador/gramatica.y"
{ logger.logError("[Parser] Se esperaba un comparador valido en la comparacion"); }
break;
case 238:
//#line 973 "./src/compilador/gramatica.y"
{
		polaca.agregarElemento(val_peek(1).sval);}
break;
case 239:
//#line 975 "./src/compilador/gramatica.y"
{
		polaca.agregarElemento(val_peek(1).sval);}
break;
case 241:
//#line 981 "./src/compilador/gramatica.y"
{ polaca.agregarElemento(val_peek(1).sval); }
break;
case 242:
//#line 982 "./src/compilador/gramatica.y"
{ polaca.agregarElemento(val_peek(1).sval); }
break;
case 244:
//#line 987 "./src/compilador/gramatica.y"
{

		String ambito = genCodigoIntermedio.existeIdentificadorEnAlgunAmbitoContenedor(val_peek(0).sval);

		if (!ambito.isEmpty()) {
			logger.logSuccess("[Codigo Intermedio] El identificador " + val_peek(0).sval + " esta declarado");

			if (!genCodigoIntermedio.verificaUsoCorrectoIdentificador(val_peek(0).sval + ambito, Constantes.USO_VARIABLE) &&
				!genCodigoIntermedio.verificaUsoCorrectoIdentificador(val_peek(0).sval + ambito, Constantes.NOMBRE_PARAMETRO)) {
					logger.logError("[Codigo Intermedio] El identificador " + val_peek(0).sval + " no es una variable o parametro");
			} else {
				polaca.agregarElemento(val_peek(0).sval + ambito);
			}
		} else {
			polaca.removeElementos();
			logger.logError("[Codigo Intermedio] El identificador " + val_peek(0).sval + " no esta declarado");
		}
		TS.removeLexema(val_peek(0).sval);
	}
break;
case 245:
//#line 1006 "./src/compilador/gramatica.y"
{

		String ambito = genCodigoIntermedio.existeIdentificadorEnAlgunAmbitoContenedor(val_peek(1).sval);

		if (!ambito.isEmpty()) {
			logger.logSuccess("[Codigo Intermedio] El identificador " + val_peek(1).sval + " esta declarado");

			String identificadorAmbito = val_peek(1).sval + genCodigoIntermedio.generarAmbito();

			if (!genCodigoIntermedio.verificaUsoCorrectoIdentificador(identificadorAmbito, Constantes.USO_VARIABLE) ||
				!genCodigoIntermedio.verificaUsoCorrectoIdentificador(identificadorAmbito, Constantes.USO_ATRIBUTO)
			) {
				logger.logError("[Codigo Intermedio] El identificador " + val_peek(1).sval + " no es una variable");
			} else {
				polaca.agregarElemento(identificadorAmbito);

				String tipo = (String) TS.getAtributo(identificadorAmbito, Constantes.TYPE);
				String valorResta = "";

				switch (tipo) {
            case Constantes.TYPE_INT: { valorResta = "1_i"; break; }
            case Constantes.TYPE_ULONG: { valorResta = "1_ul"; break; }
            case Constantes.TYPE_FLOAT: { valorResta = "1.0"; break; }
            default: { valorResta = ""; break; }
        }

				polaca.agregarElemento(valorResta);
				polaca.agregarElemento("-");
				polaca.agregarElemento(identificadorAmbito);
				polaca.agregarElemento("=");
				polaca.agregarElemento(identificadorAmbito);
			}
		} else {
			logger.logError("[Codigo Intermedio] El identificador " + val_peek(1).sval + " no esta declarado");
		}
		TS.removeLexema(val_peek(1).sval);
	}
break;
case 246:
//#line 1043 "./src/compilador/gramatica.y"
{ polaca.agregarElemento(val_peek(0).sval);}
break;
case 247:
//#line 1044 "./src/compilador/gramatica.y"
{ logger.logError("[Parser] No se admiten expresiones entre parentesis"); }
break;
case 248:
//#line 1048 "./src/compilador/gramatica.y"
{ corregirConstantePositivaEntera(val_peek(0).sval); }
break;
case 249:
//#line 1049 "./src/compilador/gramatica.y"
{ 
		yyval.sval = constanteConSigno(val_peek(0).sval); 
	}
break;
//#line 2701 "Parser.java"
//########## END OF USER-SUPPLIED ACTIONS ##########
    }//switch
    //#### Now let's reduce... ####
    if (yydebug) debug("reduce");
    state_drop(yym);             //we just reduced yylen states
    yystate = state_peek(0);     //get new state
    val_drop(yym);               //corresponding value drop
    yym = yylhs[yyn];            //select next TERMINAL(on lhs)
    if (yystate == 0 && yym == 0)//done? 'rest' state and at first TERMINAL
      {
      if (yydebug) debug("After reduction, shifting from state 0 to state "+YYFINAL+"");
      yystate = YYFINAL;         //explicitly say we're done
      state_push(YYFINAL);       //and save it
      val_push(yyval);           //also save the semantic value of parsing
      if (yychar < 0)            //we want another character?
        {
        yychar = yylex();        //get next character
        if (yychar<0) yychar=0;  //clean, if necessary
        if (yydebug)
          yylexdebug(yystate,yychar);
        }
      if (yychar == 0)          //Good exit (if lex returns 0 ;-)
         break;                 //quit the loop--all DONE
      }//if yystate
    else                        //else not done yet
      {                         //get next state and push, for next yydefred[]
      yyn = yygindex[yym];      //find out where to go
      if ((yyn != 0) && (yyn += yystate) >= 0 &&
            yyn <= YYTABLESIZE && yycheck[yyn] == yystate)
        yystate = yytable[yyn]; //get new state
      else
        yystate = yydgoto[yym]; //else go to new defred
      if (yydebug) debug("after reduction, shifting from state "+state_peek(0)+" to state "+yystate+"");
      state_push(yystate);     //going again, so push state & val...
      val_push(yyval);         //for next action
      }
    }//main loop
  return 0;//yyaccept!!
}
//## end of method parse() ######################################



//## run() --- for Thread #######################################
/**
 * A default run method, used for operating this parser
 * object in the background.  It is intended for extending Thread
 * or implementing Runnable.  Turn off with -Jnorun .
 */
public void run()
{
  yyparse();
}
//## end of method run() ########################################



//## Constructors ###############################################
/**
 * Default constructor.  Turn off with -Jnoconstruct .

 */
public Parser()
{
  //nothing to do
}


/**
 * Create a parser, setting the debug to true or false.
 * @param debugMe true for debugging, false for no debug.
 */
public Parser(boolean debugMe)
{
  yydebug=debugMe;
}
//###############################################################



}
//################### END OF CLASS ##############################
