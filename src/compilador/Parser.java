//### This file created by BYACC 1.8(/Java extension  1.15)
//### Java capabilities added 7 Jan 97, Bob Jamison
//### Updated : 27 Nov 97  -- Bob Jamison, Joe Nieten
//###           01 Jan 98  -- Bob Jamison -- fixed generic semantic constructor
//###           01 Jun 99  -- Bob Jamison -- added Runnable support
//###           06 Aug 00  -- Bob Jamison -- made state variables class-global
//###           03 Jan 01  -- Bob Jamison -- improved flags, tracing
//###           16 May 01  -- Bob Jamison -- added custom stack sizing
//###           04 Mar 02  -- Yuval Oren  -- improved java performance, added options
//###           14 Mar 02  -- Tomas Hurka -- -d support, static initializer workaround
//### Please send bug reports to tom@hukatronic.cz
//### static char yysccsid[] = "@(#)yaccpar	1.8 (Berkeley) 01/20/90";






//#line 2 ".\gramatica.y"
package compilador;
import java.io.File;
//#line 20 "Parser.java"




public class Parser
{

boolean yydebug;        //do I want debug output?
int yynerrs;            //number of errors so far
int yyerrflag;          //was there an error?
int yychar;             //the current working character

//########## MESSAGES ##########
//###############################################################
// method: debug
//###############################################################
void debug(String msg)
{
  if (yydebug)
    System.out.println(msg);
}

//########## STATE STACK ##########
final static int YYSTACKSIZE = 500;  //maximum stack size
int statestk[] = new int[YYSTACKSIZE]; //state stack
int stateptr;
int stateptrmax;                     //highest index of stackptr
int statemax;                        //state when highest index reached
//###############################################################
// methods: state stack push,pop,drop,peek
//###############################################################
final void state_push(int state)
{
  try {
		stateptr++;
		statestk[stateptr]=state;
	 }
	 catch (ArrayIndexOutOfBoundsException e) {
     int oldsize = statestk.length;
     int newsize = oldsize * 2;
     int[] newstack = new int[newsize];
     System.arraycopy(statestk,0,newstack,0,oldsize);
     statestk = newstack;
     statestk[stateptr]=state;
  }
}
final int state_pop()
{
  return statestk[stateptr--];
}
final void state_drop(int cnt)
{
  stateptr -= cnt; 
}
final int state_peek(int relative)
{
  return statestk[stateptr-relative];
}
//###############################################################
// method: init_stacks : allocate and prepare stacks
//###############################################################
final boolean init_stacks()
{
  stateptr = -1;
  val_init();
  return true;
}
//###############################################################
// method: dump_stacks : show n levels of the stacks
//###############################################################
void dump_stacks(int count)
{
int i;
  System.out.println("=index==state====value=     s:"+stateptr+"  v:"+valptr);
  for (i=0;i<count;i++)
    System.out.println(" "+i+"    "+statestk[i]+"      "+valstk[i]);
  System.out.println("======================");
}


//########## SEMANTIC VALUES ##########
//public class ParserVal is defined in ParserVal.java


String   yytext;//user variable to return contextual strings
ParserVal yyval; //used to return semantic vals from action routines
ParserVal yylval;//the 'lval' (result) I got from yylex()
ParserVal valstk[];
int valptr;
//###############################################################
// methods: value stack push,pop,drop,peek.
//###############################################################
void val_init()
{
  valstk=new ParserVal[YYSTACKSIZE];
  yyval=new ParserVal();
  yylval=new ParserVal();
  valptr=-1;
}
void val_push(ParserVal val)
{
  if (valptr>=YYSTACKSIZE)
    return;
  valstk[++valptr]=val;
}
ParserVal val_pop()
{
  if (valptr<0)
    return new ParserVal();
  return valstk[valptr--];
}
void val_drop(int cnt)
{
int ptr;
  ptr=valptr-cnt;
  if (ptr<0)
    return;
  valptr = ptr;
}
ParserVal val_peek(int relative)
{
int ptr;
  ptr=valptr-relative;
  if (ptr<0)
    return new ParserVal();
  return valstk[ptr];
}
final ParserVal dup_yyval(ParserVal val)
{
  ParserVal dup = new ParserVal();
  dup.ival = val.ival;
  dup.dval = val.dval;
  dup.sval = val.sval;
  dup.obj = val.obj;
  return dup;
}
//#### end semantic value section ####
public final static short ID=257;
public final static short CTE=258;
public final static short CADENA=259;
public final static short IF=260;
public final static short THEN=261;
public final static short ELSE=262;
public final static short ENDIF=263;
public final static short OUT=264;
public final static short FUN=265;
public final static short RETURN=266;
public final static short BREAK=267;
public final static short ASIGNACION=268;
public final static short COMP_MAYOR_IGUAL=269;
public final static short COMP_MENOR_IGUAL=270;
public final static short COMP_DISTINTO=271;
public final static short WHEN=272;
public final static short DO=273;
public final static short UNTIL=274;
public final static short CONTINUE=275;
public final static short DOUBLE64=276;
public final static short UINT16=277;
public final static short DEFER=278;
public final static short CONST=279;
public final static short YYERRCODE=256;
final static short yylhs[] = {                           -1,
    0,    0,    0,    0,    0,    0,    1,    2,    2,    3,
    3,    4,    4,    4,    4,    6,    6,    6,    6,   11,
   11,    7,    7,    7,   14,   14,   15,   15,   16,   16,
   16,   16,   16,   16,   16,   16,   16,   16,   22,   22,
    8,    8,   23,   23,   23,   23,   23,   23,   23,   23,
   23,   23,   23,   23,   23,   23,   25,   25,   25,   21,
   21,   21,   21,   21,   21,   21,   21,   21,   21,   21,
   21,   21,   21,   19,   19,   19,   19,   19,   19,   19,
   19,   19,   19,   20,   20,   20,   20,   26,   26,   26,
   26,   26,   26,   26,   26,   26,   26,   26,   26,   26,
   28,   28,   29,   29,   29,   12,   12,   12,   12,   12,
   12,   12,   12,   12,   12,   12,   13,   13,   13,   13,
   13,   32,   32,   32,   35,   35,   34,   34,   36,   34,
    9,    9,    9,   37,   37,   38,   38,   38,   38,   38,
    5,    5,    5,    5,    5,    5,    5,    5,    5,    5,
   42,   42,   42,   30,   30,   30,   30,   30,   31,   31,
   41,   41,   43,   43,   44,   27,   45,   45,   45,   45,
   46,   46,   17,   17,   17,   17,   17,   40,   40,   40,
   40,   40,   47,   47,   39,   39,   39,   39,   39,   39,
   39,   39,   50,   50,   50,   50,   50,   51,   51,   48,
   49,   24,   24,   24,   24,   24,   24,   52,   52,   52,
   52,   52,   52,   33,   33,   33,   53,   53,   53,   54,
   54,   54,   56,   56,   57,   57,   58,   58,   18,   18,
   18,   18,   18,   18,   18,   18,   18,   55,   55,   10,
   10,
};
final static short yylen[] = {                            2,
    4,    3,    3,    3,    3,    0,    1,    1,    2,    1,
    1,    1,    1,    1,    1,    3,    2,    2,    2,    3,
    1,    4,    5,    3,    1,    2,    1,    1,    1,    2,
    1,    2,    1,    2,    1,    2,    1,    2,    1,    2,
    4,    5,    8,   11,   11,   11,   11,   14,   14,    7,
   10,   10,   10,   10,   13,   13,    1,    1,    2,    6,
    6,    6,    9,    9,   13,   11,   11,   13,   13,   13,
   11,   11,   12,    7,    8,    8,    6,    7,    7,    6,
    6,    7,    7,    5,    7,    4,    6,    1,    1,    1,
    4,    4,    3,    2,    3,    3,    3,    3,    2,    2,
    1,    2,    1,    1,    1,    6,    7,    6,    5,    5,
    5,    5,    6,    6,    6,    6,    5,    4,    3,    3,
    4,    1,    3,    5,    1,    3,    2,    1,    0,    2,
    3,    2,    2,    1,    3,    3,    2,    2,    1,    3,
    1,    2,    1,    2,    1,    2,    1,    2,    1,    2,
    1,    1,    1,    2,    4,    1,    3,    3,    2,    1,
    1,    3,    5,    4,    1,    1,    1,    3,    2,    2,
    1,    2,    4,    3,    3,    4,    3,    7,    6,    6,
    5,    4,    1,    2,    6,    8,    5,    7,    5,    5,
    7,    6,    1,    3,    2,    2,    2,    1,    2,    1,
    1,    5,    4,    4,    4,    4,    2,    1,    1,    1,
    1,    1,    1,    3,    3,    1,    3,    3,    1,    1,
    1,    1,    3,    4,    1,    3,    1,    1,    5,    5,
    4,    4,    4,    4,    4,    4,    4,    1,    2,    1,
    1,
};
final static short yydefred[] = {                         0,
    7,    0,    0,    0,    0,    0,    0,    0,    0,  165,
  241,  240,    0,    0,    0,    8,   10,   11,   12,   13,
   14,   15,    0,    0,    0,  141,  145,    0,  143,  147,
  149,  161,    0,    0,    0,    0,    0,    0,    0,  238,
    0,    0,    0,    0,    0,  219,  221,  222,    0,    0,
    0,    0,    0,    0,    0,  142,  146,  144,  148,  150,
    0,  133,    0,    0,    2,    9,    0,   19,    0,   18,
    0,    0,    0,    0,    0,  151,  152,  153,    0,    0,
    0,    5,    0,    3,  174,    0,   20,    0,    0,  239,
  208,  209,  210,  207,  213,  211,  212,    0,    0,    0,
    0,    0,    0,  200,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,  138,    0,    0,  131,    0,
   16,    0,    0,    0,    0,    0,   24,   27,    0,    0,
   25,   28,   29,   31,   33,   35,   37,    0,    0,  162,
  154,    0,  159,  171,    0,    0,  170,  172,    1,  173,
  176,  227,  223,  228,    0,  225,    0,    0,    0,    0,
    0,  195,  198,    0,    0,    0,  197,  199,    0,    0,
    0,  217,  218,  234,  232,  235,    0,  233,    0,  231,
    0,    0,    0,    0,  127,    0,    0,  130,    0,    0,
    0,  182,    0,    0,  136,  140,  135,    0,    0,    0,
    0,    0,   88,  103,   89,    0,    0,  101,  104,  105,
    0,   30,   32,   34,   36,   38,   22,    0,   26,    0,
   41,    0,  166,  158,    0,  168,    0,    0,  224,  203,
    0,  204,    0,  189,    0,    0,  194,    0,  201,  190,
  205,  230,  229,  112,    0,    0,    0,  111,    0,    0,
  110,    0,    0,  184,    0,    0,    0,    0,  119,    0,
    0,   94,    0,    0,  100,    0,    0,  102,    0,   23,
   42,    0,  155,  163,  226,  202,  192,    0,  185,    0,
  106,  116,    0,  108,  115,    0,  114,    0,  179,    0,
    0,    0,    0,    0,    0,  121,    0,    0,    0,   93,
    0,    0,    0,   96,   98,    0,    0,    0,  191,  107,
    0,  124,  178,   59,   39,    0,    0,    0,    0,    0,
    0,  117,    0,    0,    0,    0,    0,    0,   91,   92,
   84,    0,    0,    0,    0,  186,    0,    0,    0,   40,
    0,   60,    0,   62,   61,    0,    0,   57,   58,    0,
   80,    0,    0,    0,    0,   81,    0,    0,    0,    0,
  126,    0,    0,    0,    0,    0,    0,   74,    0,    0,
    0,   82,   83,    0,    0,   85,    0,    0,    0,    0,
    0,    0,    0,    0,    0,   43,   75,   76,    0,    0,
    0,    0,    0,    0,    0,   63,    0,    0,    0,   64,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,   66,
   44,    0,    0,   67,   45,   71,   72,   46,   47,    0,
    0,    0,    0,   73,    0,    0,    0,    0,    0,    0,
    0,    0,   69,   70,   65,    0,   68,    0,    0,    0,
   48,   49,    0,    0,
};
final static short yydgoto[] = {                          3,
    4,   15,   16,   17,   18,   19,   20,   21,   22,   23,
   24,   25,  358,  140,  141,  325,  143,  144,  145,  146,
  147,  326,  359,   43,  305,  216,  149,  217,  218,  219,
  220,  119,   44,  120,  322,  121,   63,   64,   29,   30,
   31,  158,   32,   33,   80,   81,  204,  103,  248,  104,
  105,   99,   45,   46,   47,   48,  165,  166,
};
final static short yysindex[] = {                       -85,
    0, 1660,    0,  923,  -42,  -18,  -35,  -32,  -18,    0,
    0,    0,  745,  -50, 1210,    0,    0,    0,    0,    0,
    0,    0,  -49,   18,  -43,    0,    0,   31,    0,    0,
    0,    0,  662, 1239, 1249,   39, -150,   45,   75,    0,
 -139,   56,  232,   -9,    8,    0,    0,    0,   89,   94,
   17,  -34,  -27,  -86,  -45,    0,    0,    0,    0,    0,
   25,    0,   86,  106,    0,    0,  127,    0,  114,    0,
 1200, -135,   46,  118, -136,    0,    0,    0,    0,  -65,
 1460,    0, 1273,    0,    0,  298,    0,  311,   -6,    0,
    0,    0,    0,    0,    0,    0,    0,   -9,   45,  957,
 1560,    0, -152,    0, 1577,   45,   45,   45,   45,   45,
  144,  153,   16,   47,  162,  -30,  170,  -13,  227,  231,
   22,  237,  258,  187, 1296,    0,   57,   74,    0,   81,
    0,  -18,   14,  -18,  255,  804,    0,    0,  211, 1637,
    0,    0,    0,    0,    0,    0,    0,  217,  302,    0,
    0,  -47,    0,    0, 1477,  -18,    0,    0,    0,    0,
    0,    0,    0,    0,    3,    0,   20,  320,  108,  317,
 -129,    0,    0, 1594, 1017,  325,    0,    0,    8,    8,
  377,    0,    0,    0,    0,    0,  329,    0,  341,    0,
  -84,  322,   35,  -84,    0,  369,  -84,    0,  -84,  374,
 1660,    0, 1660,  314,    0,    0,    0,  175,   33,  380,
  -55, 1494,    0,    0,    0,  167, 1404,    0,    0,    0,
  -18,    0,    0,    0,    0,    0,    0,  331,    0,  344,
    0,  181,    0,    0,  413,    0,  419,   54,    0,    0,
  407,    0,  421,    0, 1017,  423,    0,  222,    0,    0,
    0,    0,    0,    0,  -84,  -84,  -41,    0,  -84,  429,
    0,  -84,  361,    0,  428,  925,  431,  414,    0,  368,
 1685,    0, 1423,  -18,    0,  378,  382,    0,  233,    0,
    0,  255,    0,    0,    0,    0,    0,  246,    0,  452,
    0,    0,  -84,    0,    0,  -84,    0,  455,    0,  840,
 -117,  253,   66,  254,  256,    0,  461, 1319, -101,    0,
  412,  415,  473,    0,    0,  987,  264,  480,    0,    0,
  497,    0,    0,    0,    0,  132,  483,  420,  485,  486,
 -108,    0,  487,  -92,  -18,  488,  425,  426,    0,    0,
    0, -117,  253,  254,  -18,    0,  -84,  286,  435,    0,
  447,    0, -117,    0,    0,  313, -117,    0,    0,  312,
    0,  515,  451,  454,  316,    0,  521,  523,  132,  533,
    0,  478,  104,  111,  588,  588,  544,    0,  545,  546,
   40,    0,    0,  481,  507,    0, -117,  997,  549, 1007,
  551,  508,  509,  510,  511,    0,    0,    0, -117,  128,
  146, 1521, -117,  348,  376,    0, -117,  379,  401,    0,
  402,  411,  427,  430,  588, 1027, 1046,  433,  512,  516,
 1531,  629,  630, 1541,  632,  633,  635,  647,  661,  663,
  572,  598, -117, -117,  666,  470,  471,  472,  619,    0,
    0,  482,  621,    0,    0,    0,    0,    0,    0,  489,
  491, 1596, 1618,    0,  688,  689,  690,  493,  695,  501,
  141,  210,    0,    0,    0,  706,    0,  707, -117, -117,
    0,    0, 1662, 1662,
};
final static short yyrindex[] = {                       775,
    0,    0,    0,    0,  228,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,  352,    0,
    0,    0,    0,    0,  383,    0,    0,    0,    0,    0,
    0,  519,  519,    0,  719,    0,    0,    0,    0,    0,
  750,    0,  779,  830,    0,    0,  859,    0,  887,    0,
    0,    0, 1343, 1365,    0,    0,    0,    0, 1440,    0,
    0,    0,  778,    0,    0,  321,    0,  464,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0, 1511,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,  519,    0,    5,    0,   50,
    0,    0,    0,    0,    0,    0,  806,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,  506,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,  168,    0,    0,    0,    0,  406,  438,
    0,    0,    0,    0,    0,    0,  495,    0,  526,    0,
    0,    0,    0,    0,    0,    0,  519,    0,    0,    0,
    0,    0,  656,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,  513,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0, 1385,    0,  562,    0,    0,    0,
  292,    0,    0,    0,    0,  607,    0,    0,    0,    0,
    0,    0,    0,    0,  659,    0,    0,    0,    0,   62,
    0,    0,    0,    0,  638,    0,    0,  -96,    0,    0,
    0,    0,  522,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,  674,    0,    0,  519,    0,  686,    0,    0,
    0,  548,    0,  550,    0,    0,  -80,    0,    0,    0,
  534,  539, 1083,    0,    0,    0,    0,  718,    0,    0,
   68,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,  519,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0, 1106,    0,    0,    0,    0,    0,    0,    0, 1130,
    0,    0,    0,    0,    0,    0,  239,    0, 1153, 1176,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,  261,    0,    0,  328,    0,    0,  594,  670,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,  724,    0,  726,    0,    0,
    0,    0,    0,    0,
};
final static short yygindex[] = {                         0,
    0,   37,  333,  -70,  866,    0,    0,    0,    0,  178,
   19,    0,  -53,    0, -127,  -71,   79,  184, -115, -113,
 -111, 1474,  -68,   -5, 1081,  502, 1141,  595, -177,   -2,
  115,  -21,   24, -171,  467,    0,  685,    0,  803,  805,
  807,   10,  749,    0,    0,  742,  134,  723,  583, -145,
  730,    4,  354,  353,  -69,    0,    0,  604,
};
final static int YYTABLESIZE=1964;
static short yytable[];
static { yytable();}
static void yytable(){
yytable = new short[]{                        142,
  138,   37,  148,   54,   51,  116,  117,   53,   62,   68,
  192,  234,  229,  122,  357,   38,  293,  139,   38,  164,
  224,   42,  225,  336,  226,  260,   41,  191,  120,  249,
   77,  123,  362,  106,  163,  107,  125,    2,   41,  278,
   35,   69,   79,  239,  118,  128,  238,  108,  128,  109,
   97,   95,   96,  209,  110,   87,  187,  115,   41,   86,
  240,   88,  128,  214,   41,   98,  215,  271,  142,  138,
   83,  230,   77,  267,  186,  257,   70,   41,   77,   71,
   26,  213,   26,   41,  154,  128,  228,  189,   72,   41,
  122,   56,  256,   26,  193,  278,   94,   85,   41,  249,
   41,  167,  123,  152,  151,  188,   67,  122,  125,  175,
  176,   26,   26,   26,   89,   97,   95,   96,   90,  123,
   55,   26,  168,    6,  321,  125,  208,    7,  211,  111,
   73,  181,  245,  246,  112,    9,   10,   10,   74,   55,
  214,   13,  221,  309,  129,  214,    7,   78,  277,  130,
  237,  335,   77,   26,  134,  135,  210,  133,  335,   26,
  136,   26,  399,  276,  133,  120,  120,  335,  164,  356,
   37,    1,  131,  133,  124,  321,  153,  120,   26,   26,
  334,  118,  118,   26,  224,   27,  225,   27,  226,   78,
  241,   11,   12,  118,  303,   78,   57,  304,   27,  142,
  138,  214,  184,   26,  312,  270,   61,   67,  156,  233,
  214,  185,  302,  215,  222,  279,   27,   27,   27,  311,
  190,   49,   36,   50,   52,   36,   27,  194,  213,  118,
  118,  324,  268,   26,   11,   12,  142,  138,   39,   40,
  338,   11,   12,  195,  303,   11,   12,  344,   11,   12,
  162,   40,   26,   26,  350,  337,  348,  351,   27,   91,
   92,   93,  343,  469,   27,  364,   27,  196,  313,   78,
   39,   40,  349,  113,  197,  114,   39,   40,  198,   26,
  363,   26,  126,   27,   27,  166,   21,  324,   27,   39,
   40,  206,  127,  118,  199,   39,   40,  350,  200,  335,
  385,   39,   40,  350,  350,  133,  393,  395,   27,  201,
  162,   40,   39,   40,  205,  384,  404,  356,  408,  223,
  175,  392,  394,   26,   91,   92,   93,  328,  329,  365,
  350,  206,  470,  420,  263,  227,  264,   61,   27,  370,
  106,  231,  107,  350,  404,  408,  432,   66,  419,  350,
  206,  220,  350,  106,  101,  107,  160,   27,   27,  232,
  242,  431,  106,   50,  107,  388,  389,   66,  254,  161,
  243,  258,  390,  391,  118,  244,  261,  212,  222,  255,
  350,  350,  216,  250,   27,   51,   27,  252,   55,  416,
  389,  132,  220,  220,  220,    7,  220,  133,  220,  253,
  335,  350,  350,  134,  135,  214,  133,  417,  391,  136,
  220,  220,  220,  220,  206,   66,  206,  251,  356,  106,
  269,  107,  106,  216,  107,  216,  259,  216,   27,  196,
  196,  262,  291,  292,  294,  266,  295,  215,  265,  297,
  274,  216,  216,  216,  216,  175,  214,  286,  214,  106,
  214,  107,   52,  282,  307,  280,  106,  203,  107,  179,
  180,  182,  183,  177,  214,  214,  214,  214,  281,  335,
  320,  283,  296,  118,  220,  133,  220,  284,  215,  287,
  215,  289,  215,  223,  290,  298,  299,  356,   55,  306,
  308,    6,  100,  316,  237,    7,  215,  215,  215,  215,
   50,   50,  314,    9,   10,  216,  315,  216,  318,   13,
  319,   55,   50,  323,  132,  327,  330,  331,    7,  332,
  133,   73,   51,   51,  118,  236,  134,  135,  214,   74,
  214,  341,  136,  203,   51,  203,  339,  345,  346,  340,
  347,  352,  353,  354,  355,  361,  366,  372,  206,  367,
  368,  206,  206,  206,  206,  206,  206,  206,  206,  373,
  215,  164,  215,  206,  206,  206,  206,  206,  206,  206,
  206,  374,  335,  378,  377,  379,  381,  175,  380,  382,
  175,  383,  175,  175,  175,  175,  175,  175,  177,   52,
   52,  386,  175,  175,  175,  175,  175,  175,  175,  175,
  387,   52,  396,  397,  398,  400,  187,  406,  220,  410,
  422,  220,  220,  220,  220,  220,  220,  220,  220,  237,
  220,  220,  220,  220,  220,  220,  220,  220,  220,  220,
  220,  401,  411,  412,  413,  414,  436,  181,  423,  216,
  437,  425,  216,  216,  216,  216,  216,  216,  216,  216,
  236,  216,  216,  216,  216,  216,  216,  216,  216,  216,
  216,  216,  214,  426,  427,  214,  214,  214,  214,  214,
  214,  214,  214,  428,  214,  214,  214,  214,  214,  214,
  214,  214,  214,  214,  214,  180,  164,  440,  441,  429,
  444,  445,  430,  446,  215,  435,  450,  215,  215,  215,
  215,  215,  215,  215,  215,  447,  215,  215,  215,  215,
  215,  215,  215,  215,  215,  215,  215,  188,   53,  448,
  177,  449,  451,  177,  454,  177,  177,  177,  177,  177,
  177,  187,  455,  456,  457,  177,  177,  177,  177,  177,
  177,  177,  177,  458,  459,  460,  463,  464,  465,  139,
  461,  237,  462,  467,  237,  466,  237,  237,  237,  237,
  237,  237,  181,  468,  471,  472,  237,  237,  237,  237,
  237,  237,  237,  237,    6,  129,  166,    4,  132,  169,
  183,  109,  236,  317,   75,  236,   90,  236,  236,  236,
  236,  236,  236,  139,   54,   99,  113,  236,  236,  236,
  236,  236,  236,  236,  236,  137,  273,   95,  139,   57,
  180,   58,   97,  371,  207,   58,  155,   59,  164,   60,
  150,  164,  171,  164,  164,  164,  164,  288,  164,  134,
  174,    0,    0,  164,  164,  164,  164,  164,  164,  164,
  164,  285,  188,    0,   55,    0,    0,  132,   55,  137,
   56,    7,    0,  133,    0,   53,   53,    0,   21,  134,
  135,    0,    0,  187,  137,  136,  187,   53,  187,  187,
  187,  187,    0,  187,  139,    0,    0,    0,  187,  187,
  187,  187,  187,  187,  187,  187,   17,    0,  134,    0,
    0,    0,    0,    0,  181,    0,    0,  181,   76,  181,
  181,  181,  181,  132,  181,    0,    0,    0,  102,  181,
  181,  181,  181,  181,  181,  181,  181,   21,   55,    0,
    0,    6,    0,    0,    0,    7,    0,    0,   73,    0,
  137,   54,   54,    9,   10,    0,   74,    0,    0,   13,
   76,    0,  180,   54,    0,  180,   76,  180,  180,  180,
  180,    0,  180,    0,  134,    0,    0,  180,  180,  180,
  180,  180,  180,  180,  180,  102,  173,    0,    0,    0,
  178,    0,    0,    0,  188,    0,    0,  188,    0,  188,
  188,  188,  188,   21,  188,   55,   55,   56,   56,  188,
  188,  188,  188,  188,  188,  188,  188,   55,    0,   56,
    0,   55,    0,    0,    6,    0,  139,    0,    7,  139,
    0,   17,    0,  139,  139,  139,    9,   10,    0,    0,
   76,  139,  139,    0,    0,  139,  139,  139,  139,    0,
    0,    0,    0,    0,    0,  132,    0,    0,  132,  178,
  102,    0,  132,  132,  132,   34,    0,  301,    0,    0,
  132,  132,    0,    0,  132,  132,  132,  132,    0,    0,
   55,    0,  137,  221,    0,  137,    0,    7,    0,  137,
  137,  137,    0,    0,    0,  134,  135,  137,  137,  101,
    0,  137,  137,  137,  137,    0,  134,    0,    0,  134,
    0,    0,    0,  134,  134,  134,   55,    0,    0,  132,
    0,  134,  134,    7,    0,  134,  134,  134,  134,  342,
  102,  134,  135,    0,    0,   21,    0,    0,   21,  403,
    0,    0,   21,   21,   21,    0,    0,    0,    0,  407,
   21,   21,    0,    0,   21,   21,   21,   21,    0,  101,
    0,    0,   28,   17,   28,    0,   17,    0,    0,  433,
   17,   17,   17,   28,    0,   28,    0,    0,   17,   17,
    0,    0,   17,   17,   17,   17,    0,    0,  434,    0,
    0,    0,    0,   28,   28,   28,    0,    0,    0,    5,
    0,   55,    6,   28,  132,    0,    7,    8,    7,    0,
  133,    0,    0,    0,    9,   10,  134,  135,   11,   12,
   13,   14,  300,    0,    0,    0,    0,   86,    0,    0,
    0,    0,    0,   55,    0,   28,    6,    0,  169,  170,
    7,   28,    0,   28,    0,    0,    0,    0,    9,   10,
   77,    0,    0,    0,   13,    0,    0,    0,    0,    0,
   28,   28,    0,   55,    0,   28,  132,    0,    0,    0,
    7,    0,  133,   55,   87,    0,  132,    0,  134,  135,
    7,    0,  133,   55,  136,   28,  132,    0,  134,  135,
    7,    0,  133,   55,  300,    0,    6,   78,  134,  135,
    7,    0,    0,   55,  300,    0,  221,    0,    9,   10,
    7,    0,  235,    0,   13,   28,    0,    0,  134,  135,
   79,    0,   55,    0,  136,  221,    0,    0,    0,    7,
    0,    0,    0,    0,   28,   28,    0,  134,  135,    0,
    0,    0,    0,  136,  137,    0,    0,    0,    0,    0,
    0,    0,    0,    0,   65,    0,    0,    0,    0,   86,
    0,   28,   86,   28,   86,   86,   86,   86,   86,   86,
    0,    0,    0,    0,   86,   86,   86,   86,   86,   86,
   86,   86,   77,   82,    0,   77,    0,   77,   77,   77,
   77,   77,   77,   84,    0,    0,    0,   77,   77,   77,
   77,   77,   77,   77,   77,   28,   87,    0,    0,   87,
    0,   87,   87,   87,   87,   87,   87,  159,    0,    0,
    0,   87,   87,   87,   87,   87,   87,   87,   87,   78,
    0,  360,   78,    0,   78,   78,   78,   78,   78,   78,
  202,    0,    0,    0,   78,   78,   78,   78,   78,   78,
   78,   78,   79,    0,    0,   79,    0,   79,   79,   79,
   79,   79,   79,  333,    0,    0,    0,   79,   79,   79,
   79,   79,   79,   79,   79,    0,    5,    0,    0,  132,
    0,    0,    0,    7,    8,  133,    5,  156,  405,    6,
  409,  134,  135,    7,    8,   11,   12,  136,   14,    0,
    0,    9,   10,    0,    0,   11,   12,   13,   14,  160,
    0,    0,    0,    0,    0,    5,    0,    0,    6,    0,
    0,  439,    7,    8,  443,    5,    0,    0,    6,  157,
    9,   10,    7,    8,   11,   12,   13,   14,    0,    0,
    9,   10,    0,    0,   11,   12,   13,   14,  275,    5,
    0,    0,    6,    0,    0,    0,    7,    8,    0,    0,
    0,  405,  409,    0,    9,   10,    0,  310,   11,   12,
   13,   14,    5,  439,  443,    6,    0,    0,    0,    7,
    8,    0,    0,    0,  171,    0,    0,    9,   10,    0,
    0,   11,   12,   13,   14,    5,    0,    0,  221,    0,
    0,    0,    7,    8,  157,    0,    0,    0,    0,    0,
  134,  135,    0,    0,   11,   12,  136,   14,    0,  156,
    0,  236,  156,    0,    0,    0,  156,    0,  156,  156,
    0,    0,    0,    0,  156,  156,  156,  156,  272,    0,
  156,  160,    0,    0,  160,    0,    0,    0,  160,    0,
  160,  160,    0,    0,    0,  198,  160,  160,  160,  160,
    0,  157,  160,    0,  157,  418,    0,    0,  157,    0,
  157,  157,    0,    0,    0,  438,  157,  157,  157,  157,
   55,    0,  157,  132,    0,  442,    0,    7,    0,  133,
   73,    0,    0,    0,    0,  134,  135,    0,   74,   55,
    0,  136,  132,    0,  172,    0,    7,    0,  133,   73,
    0,    0,    0,    0,  134,  135,  171,   74,    0,  171,
  136,  177,    0,  171,    0,    0,  171,    0,    0,    0,
    0,  171,  171,  167,  171,    0,   55,  171,  247,    6,
  438,    0,    0,    7,    0,    0,   73,    0,    0,    0,
    0,    9,   10,   55,   74,    0,    6,   13,    0,    0,
    7,    0,  442,   73,    0,    0,    0,    0,    9,   10,
   55,   74,    0,  221,   13,    0,    0,    7,    0,    0,
   73,    0,    0,    0,    0,  134,  135,  198,   74,    0,
  198,  136,  193,  193,  198,    0,    0,   55,    0,    0,
  132,    0,  198,  198,    7,    0,  133,   55,  198,    0,
  132,    0,  134,  135,    7,    0,  133,   55,  136,    0,
  132,    0,  134,  135,    7,    0,  133,    0,  300,    0,
    0,    0,  134,  135,    0,  369,   55,    0,  300,    6,
    0,    0,    0,    7,    0,    0,  375,    0,    0,    0,
  376,    9,   10,   55,    0,    0,    6,   13,    0,    0,
    7,    0,    0,    0,    0,    0,    0,    0,    9,   10,
   55,    0,   55,    6,   13,  221,    0,    7,    0,    7,
  402,    0,    0,    0,    0,    9,   10,  134,  135,    0,
    0,   13,  415,  136,   55,    0,  421,  221,    0,    0,
  424,    7,    0,    0,    0,    0,    0,    0,    0,  134,
  135,    0,    0,    5,    0,  136,  132,    0,    0,    0,
    7,    8,  133,    0,    0,    0,  452,  453,  134,  135,
    0,    0,   11,   12,  136,   14,    5,    0,   55,    6,
    0,  132,    0,    7,    8,    7,    0,  133,    0,    0,
    0,    9,   10,  134,  135,   11,   12,   13,   14,  300,
    0,    5,  473,  474,  221,    0,    0,    0,    7,    8,
    0,    0,    0,    0,    0,    0,  134,  135,    0,    0,
   11,   12,  136,   14,
};
}
static short yycheck[];
static { yycheck(); }
static void yycheck() {
yycheck = new short[] {                         71,
   71,   44,   71,    9,   40,   40,   41,   40,   59,   59,
   41,   59,  140,   41,  123,   61,   58,   71,   61,   89,
  136,   40,  136,  125,  136,  197,   45,   58,  125,  175,
   33,   53,  125,   43,   41,   45,  123,  123,   45,  217,
    4,   23,   33,   41,  125,   41,   44,   44,   44,   42,
   60,   61,   62,   40,   47,   37,   41,   41,   45,   36,
   41,   38,   58,  135,   45,   42,  135,  123,  140,  140,
   34,  140,   75,   41,   59,   41,   59,   45,   81,  123,
    2,  135,    4,   45,   75,   61,  140,   41,   58,   45,
   41,   13,   58,   15,  116,  273,   41,   59,   45,  245,
   45,   98,   41,   58,   59,   59,  257,   58,   41,  262,
  263,   33,   34,   35,   40,   60,   61,   62,  258,   58,
  257,   43,   99,  260,  296,   58,  132,  264,  134,   41,
  267,  108,  262,  263,   41,  272,  273,  273,  275,  257,
  212,  278,  260,  271,   59,  217,  264,   33,  217,   44,
  156,  260,  155,   75,  272,  273,  133,  266,  260,   81,
  278,   83,  123,  217,  266,  262,  263,  260,  238,  278,
   44,  257,   59,  266,  261,  347,   59,  274,  100,  101,
  308,  262,  263,  105,  300,    2,  300,    4,  300,   75,
  167,  276,  277,  274,  266,   81,   13,  266,   15,  271,
  271,  273,   59,  125,  273,  261,  257,  257,  274,  257,
  282,   59,  266,  282,  136,  221,   33,   34,   35,  273,
   59,  257,  268,  259,  257,  268,   43,   58,  282,   52,
   53,  300,  209,  155,  276,  277,  308,  308,  257,  258,
  309,  276,  277,  257,  316,  276,  277,  316,  276,  277,
  257,  258,  174,  175,  326,  309,  125,  326,   75,  269,
  270,  271,  316,  123,   81,  334,   83,   41,  274,  155,
  257,  258,  326,  257,   44,  259,  257,  258,  257,  201,
  334,  203,  258,  100,  101,   58,   59,  356,  105,  257,
  258,    0,  268,  116,   58,  257,  258,  369,   41,  260,
  369,  257,  258,  375,  376,  266,  375,  376,  125,  123,
  257,  258,  257,  258,  258,  369,  388,  278,  390,  136,
    0,  375,  376,  245,  269,  270,  271,  262,  263,  335,
  402,  258,  123,  402,  201,  125,  203,  257,  155,  345,
   43,  125,   45,  415,  416,  417,  415,   15,  402,  421,
   59,    0,  424,   43,  123,   45,   59,  174,  175,   58,
   41,  415,   43,  125,   45,  262,  263,   35,  191,   59,
  263,  194,  262,  263,  197,   59,  199,  123,  300,   58,
  452,  453,    0,   59,  201,  125,  203,   59,  257,  262,
  263,  260,   41,   42,   43,  264,   45,  266,   47,   59,
  260,  473,  474,  272,  273,    0,  266,  262,  263,  278,
   59,   60,   61,   62,  123,   83,  125,   41,  278,   43,
   41,   45,   43,   41,   45,   43,   58,   45,  245,  262,
  263,   58,  255,  256,  257,  261,  259,    0,  125,  262,
  274,   59,   60,   61,   62,  125,   41,   41,   43,   43,
   45,   45,  125,  273,   41,  125,   43,  125,   45,  106,
  107,  109,  110,    0,   59,   60,   61,   62,  125,  260,
  293,   59,   44,  296,  123,  266,  125,   59,   41,   59,
   43,   59,   45,  300,  263,  125,   59,  278,  257,   59,
  123,  260,  261,  261,    0,  264,   59,   60,   61,   62,
  262,  263,  125,  272,  273,  123,  125,  125,  263,  278,
   59,  257,  274,   59,  260,  263,  263,  262,  264,   59,
  266,  267,  262,  263,  347,    0,  272,  273,  123,  275,
  125,   59,  278,  201,  274,  203,  125,  274,   59,  125,
   44,   59,  123,   59,   59,   59,   59,  262,  257,  125,
  125,  260,  261,  262,  263,  264,  265,  266,  267,  125,
  123,    0,  125,  272,  273,  274,  275,  276,  277,  278,
  279,  125,  260,   59,  263,  125,  261,  257,  125,   59,
  260,   59,  262,  263,  264,  265,  266,  267,  125,  262,
  263,   59,  272,  273,  274,  275,  276,  277,  278,  279,
  123,  274,   59,   59,   59,  125,    0,   59,  257,   59,
  263,  260,  261,  262,  263,  264,  265,  266,  267,  125,
  269,  270,  271,  272,  273,  274,  275,  276,  277,  278,
  279,  125,  125,  125,  125,  125,  125,    0,  263,  257,
  125,  263,  260,  261,  262,  263,  264,  265,  266,  267,
  125,  269,  270,  271,  272,  273,  274,  275,  276,  277,
  278,  279,  257,  263,  263,  260,  261,  262,  263,  264,
  265,  266,  267,  263,  269,  270,  271,  272,  273,  274,
  275,  276,  277,  278,  279,    0,  125,   59,   59,  263,
   59,   59,  263,   59,  257,  263,  125,  260,  261,  262,
  263,  264,  265,  266,  267,   59,  269,  270,  271,  272,
  273,  274,  275,  276,  277,  278,  279,    0,  125,   59,
  257,   59,  125,  260,   59,  262,  263,  264,  265,  266,
  267,  125,  263,  263,  263,  272,  273,  274,  275,  276,
  277,  278,  279,  125,  263,  125,   59,   59,   59,    0,
  262,  257,  262,   59,  260,  263,  262,  263,  264,  265,
  266,  267,  125,  263,   59,   59,  272,  273,  274,  275,
  276,  277,  278,  279,    0,  257,   58,    0,    0,  274,
  125,  123,  257,  282,  123,  260,  274,  262,  263,  264,
  265,  266,  267,   44,  125,  274,  123,  272,  273,  274,
  275,  276,  277,  278,  279,    0,  212,  274,   59,  262,
  125,  262,  274,  347,  130,   13,   75,   13,  257,   13,
   72,  260,  100,  262,  263,  264,  265,  245,  267,    0,
  101,   -1,   -1,  272,  273,  274,  275,  276,  277,  278,
  279,  238,  125,   -1,  257,   -1,   -1,  260,  125,   44,
  125,  264,   -1,  266,   -1,  262,  263,   -1,    0,  272,
  273,   -1,   -1,  257,   59,  278,  260,  274,  262,  263,
  264,  265,   -1,  267,  125,   -1,   -1,   -1,  272,  273,
  274,  275,  276,  277,  278,  279,    0,   -1,   59,   -1,
   -1,   -1,   -1,   -1,  257,   -1,   -1,  260,   33,  262,
  263,  264,  265,  125,  267,   -1,   -1,   -1,   43,  272,
  273,  274,  275,  276,  277,  278,  279,   59,  257,   -1,
   -1,  260,   -1,   -1,   -1,  264,   -1,   -1,  267,   -1,
  125,  262,  263,  272,  273,   -1,  275,   -1,   -1,  278,
   75,   -1,  257,  274,   -1,  260,   81,  262,  263,  264,
  265,   -1,  267,   -1,  125,   -1,   -1,  272,  273,  274,
  275,  276,  277,  278,  279,  100,  101,   -1,   -1,   -1,
  105,   -1,   -1,   -1,  257,   -1,   -1,  260,   -1,  262,
  263,  264,  265,  125,  267,  262,  263,  262,  263,  272,
  273,  274,  275,  276,  277,  278,  279,  274,   -1,  274,
   -1,  257,   -1,   -1,  260,   -1,  257,   -1,  264,  260,
   -1,  125,   -1,  264,  265,  266,  272,  273,   -1,   -1,
  155,  272,  273,   -1,   -1,  276,  277,  278,  279,   -1,
   -1,   -1,   -1,   -1,   -1,  257,   -1,   -1,  260,  174,
  175,   -1,  264,  265,  266,  123,   -1,  123,   -1,   -1,
  272,  273,   -1,   -1,  276,  277,  278,  279,   -1,   -1,
  257,   -1,  257,  260,   -1,  260,   -1,  264,   -1,  264,
  265,  266,   -1,   -1,   -1,  272,  273,  272,  273,  123,
   -1,  276,  277,  278,  279,   -1,  257,   -1,   -1,  260,
   -1,   -1,   -1,  264,  265,  266,  257,   -1,   -1,  260,
   -1,  272,  273,  264,   -1,  276,  277,  278,  279,  123,
  245,  272,  273,   -1,   -1,  257,   -1,   -1,  260,  123,
   -1,   -1,  264,  265,  266,   -1,   -1,   -1,   -1,  123,
  272,  273,   -1,   -1,  276,  277,  278,  279,   -1,  123,
   -1,   -1,    2,  257,    4,   -1,  260,   -1,   -1,  123,
  264,  265,  266,   13,   -1,   15,   -1,   -1,  272,  273,
   -1,   -1,  276,  277,  278,  279,   -1,   -1,  123,   -1,
   -1,   -1,   -1,   33,   34,   35,   -1,   -1,   -1,  257,
   -1,  257,  260,   43,  260,   -1,  264,  265,  264,   -1,
  266,   -1,   -1,   -1,  272,  273,  272,  273,  276,  277,
  278,  279,  278,   -1,   -1,   -1,   -1,  125,   -1,   -1,
   -1,   -1,   -1,  257,   -1,   75,  260,   -1,  262,  263,
  264,   81,   -1,   83,   -1,   -1,   -1,   -1,  272,  273,
  125,   -1,   -1,   -1,  278,   -1,   -1,   -1,   -1,   -1,
  100,  101,   -1,  257,   -1,  105,  260,   -1,   -1,   -1,
  264,   -1,  266,  257,  125,   -1,  260,   -1,  272,  273,
  264,   -1,  266,  257,  278,  125,  260,   -1,  272,  273,
  264,   -1,  266,  257,  278,   -1,  260,  125,  272,  273,
  264,   -1,   -1,  257,  278,   -1,  260,   -1,  272,  273,
  264,   -1,  152,   -1,  278,  155,   -1,   -1,  272,  273,
  125,   -1,  257,   -1,  278,  260,   -1,   -1,   -1,  264,
   -1,   -1,   -1,   -1,  174,  175,   -1,  272,  273,   -1,
   -1,   -1,   -1,  278,  125,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,  125,   -1,   -1,   -1,   -1,  257,
   -1,  201,  260,  203,  262,  263,  264,  265,  266,  267,
   -1,   -1,   -1,   -1,  272,  273,  274,  275,  276,  277,
  278,  279,  257,  125,   -1,  260,   -1,  262,  263,  264,
  265,  266,  267,  125,   -1,   -1,   -1,  272,  273,  274,
  275,  276,  277,  278,  279,  245,  257,   -1,   -1,  260,
   -1,  262,  263,  264,  265,  266,  267,  125,   -1,   -1,
   -1,  272,  273,  274,  275,  276,  277,  278,  279,  257,
   -1,  331,  260,   -1,  262,  263,  264,  265,  266,  267,
  125,   -1,   -1,   -1,  272,  273,  274,  275,  276,  277,
  278,  279,  257,   -1,   -1,  260,   -1,  262,  263,  264,
  265,  266,  267,  125,   -1,   -1,   -1,  272,  273,  274,
  275,  276,  277,  278,  279,   -1,  257,   -1,   -1,  260,
   -1,   -1,   -1,  264,  265,  266,  257,  125,  388,  260,
  390,  272,  273,  264,  265,  276,  277,  278,  279,   -1,
   -1,  272,  273,   -1,   -1,  276,  277,  278,  279,  125,
   -1,   -1,   -1,   -1,   -1,  257,   -1,   -1,  260,   -1,
   -1,  421,  264,  265,  424,  257,   -1,   -1,  260,  125,
  272,  273,  264,  265,  276,  277,  278,  279,   -1,   -1,
  272,  273,   -1,   -1,  276,  277,  278,  279,  125,  257,
   -1,   -1,  260,   -1,   -1,   -1,  264,  265,   -1,   -1,
   -1,  461,  462,   -1,  272,  273,   -1,  125,  276,  277,
  278,  279,  257,  473,  474,  260,   -1,   -1,   -1,  264,
  265,   -1,   -1,   -1,  125,   -1,   -1,  272,  273,   -1,
   -1,  276,  277,  278,  279,  257,   -1,   -1,  260,   -1,
   -1,   -1,  264,  265,  125,   -1,   -1,   -1,   -1,   -1,
  272,  273,   -1,   -1,  276,  277,  278,  279,   -1,  257,
   -1,  125,  260,   -1,   -1,   -1,  264,   -1,  266,  267,
   -1,   -1,   -1,   -1,  272,  273,  274,  275,  125,   -1,
  278,  257,   -1,   -1,  260,   -1,   -1,   -1,  264,   -1,
  266,  267,   -1,   -1,   -1,  125,  272,  273,  274,  275,
   -1,  257,  278,   -1,  260,  125,   -1,   -1,  264,   -1,
  266,  267,   -1,   -1,   -1,  125,  272,  273,  274,  275,
  257,   -1,  278,  260,   -1,  125,   -1,  264,   -1,  266,
  267,   -1,   -1,   -1,   -1,  272,  273,   -1,  275,  257,
   -1,  278,  260,   -1,  125,   -1,  264,   -1,  266,  267,
   -1,   -1,   -1,   -1,  272,  273,  257,  275,   -1,  260,
  278,  125,   -1,  264,   -1,   -1,  267,   -1,   -1,   -1,
   -1,  272,  273,  274,  275,   -1,  257,  278,  125,  260,
  125,   -1,   -1,  264,   -1,   -1,  267,   -1,   -1,   -1,
   -1,  272,  273,  257,  275,   -1,  260,  278,   -1,   -1,
  264,   -1,  125,  267,   -1,   -1,   -1,   -1,  272,  273,
  257,  275,   -1,  260,  278,   -1,   -1,  264,   -1,   -1,
  267,   -1,   -1,   -1,   -1,  272,  273,  257,  275,   -1,
  260,  278,  262,  263,  264,   -1,   -1,  257,   -1,   -1,
  260,   -1,  272,  273,  264,   -1,  266,  257,  278,   -1,
  260,   -1,  272,  273,  264,   -1,  266,  257,  278,   -1,
  260,   -1,  272,  273,  264,   -1,  266,   -1,  278,   -1,
   -1,   -1,  272,  273,   -1,  342,  257,   -1,  278,  260,
   -1,   -1,   -1,  264,   -1,   -1,  353,   -1,   -1,   -1,
  357,  272,  273,  257,   -1,   -1,  260,  278,   -1,   -1,
  264,   -1,   -1,   -1,   -1,   -1,   -1,   -1,  272,  273,
  257,   -1,  257,  260,  278,  260,   -1,  264,   -1,  264,
  387,   -1,   -1,   -1,   -1,  272,  273,  272,  273,   -1,
   -1,  278,  399,  278,  257,   -1,  403,  260,   -1,   -1,
  407,  264,   -1,   -1,   -1,   -1,   -1,   -1,   -1,  272,
  273,   -1,   -1,  257,   -1,  278,  260,   -1,   -1,   -1,
  264,  265,  266,   -1,   -1,   -1,  433,  434,  272,  273,
   -1,   -1,  276,  277,  278,  279,  257,   -1,  257,  260,
   -1,  260,   -1,  264,  265,  264,   -1,  266,   -1,   -1,
   -1,  272,  273,  272,  273,  276,  277,  278,  279,  278,
   -1,  257,  469,  470,  260,   -1,   -1,   -1,  264,  265,
   -1,   -1,   -1,   -1,   -1,   -1,  272,  273,   -1,   -1,
  276,  277,  278,  279,
};
}
final static short YYFINAL=3;
final static short YYMAXTOKEN=279;
final static String yyname[] = {
"end-of-file",null,null,null,null,null,null,null,null,null,null,null,null,null,
null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,
null,null,null,null,null,null,null,null,null,null,"'('","')'","'*'","'+'","','",
"'-'",null,"'/'",null,null,null,null,null,null,null,null,null,null,"':'","';'",
"'<'","'='","'>'",null,null,null,null,null,null,null,null,null,null,null,null,
null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,
null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,
null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,
"'{'",null,"'}'",null,null,null,null,null,null,null,null,null,null,null,null,
null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,
null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,
null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,
null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,
null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,
null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,
null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,
null,null,null,null,null,null,null,"ID","CTE","CADENA","IF","THEN","ELSE",
"ENDIF","OUT","FUN","RETURN","BREAK","ASIGNACION","COMP_MAYOR_IGUAL",
"COMP_MENOR_IGUAL","COMP_DISTINTO","WHEN","DO","UNTIL","CONTINUE","DOUBLE64",
"UINT16","DEFER","CONST",
};
final static String yyrule[] = {
"$accept : programa",
"programa : nombre_programa '{' sentencias '}'",
"programa : '{' sentencias '}'",
"programa : nombre_programa sentencias '}'",
"programa : nombre_programa '{' sentencias",
"programa : nombre_programa '{' '}'",
"programa :",
"nombre_programa : ID",
"sentencias : sentencia",
"sentencias : sentencias sentencia",
"sentencia : sentencia_declarativa",
"sentencia : sentencia_ejecutable",
"sentencia_declarativa : sentencia_declarativa_variables",
"sentencia_declarativa : funcion_con_return",
"sentencia_declarativa : funcion_sin_return",
"sentencia_declarativa : declaracion_constantes",
"sentencia_declarativa_variables : tipo lista_de_variables ';'",
"sentencia_declarativa_variables : tipo lista_de_variables",
"sentencia_declarativa_variables : lista_de_variables ';'",
"sentencia_declarativa_variables : tipo ';'",
"lista_de_variables : ID ',' lista_de_variables",
"lista_de_variables : ID",
"funcion_con_return : encabezado_funcion '{' sentencia_return '}'",
"funcion_con_return : encabezado_funcion '{' sentencias_funcion sentencia_return '}'",
"funcion_con_return : encabezado_funcion '{' '}'",
"sentencias_funcion : sentencia_funcion",
"sentencias_funcion : sentencias_funcion sentencia_funcion",
"sentencia_funcion : sentencia_declarativa",
"sentencia_funcion : sentencia_ejecutable_funcion",
"sentencia_ejecutable_funcion : asignacion",
"sentencia_ejecutable_funcion : DEFER asignacion",
"sentencia_ejecutable_funcion : imprimir",
"sentencia_ejecutable_funcion : DEFER imprimir",
"sentencia_ejecutable_funcion : sentencia_when_con_return",
"sentencia_ejecutable_funcion : DEFER sentencia_when_con_return",
"sentencia_ejecutable_funcion : sentencia_do_con_return",
"sentencia_ejecutable_funcion : DEFER sentencia_do_con_return",
"sentencia_ejecutable_funcion : sentencia_seleccion_simple_con_return",
"sentencia_ejecutable_funcion : DEFER sentencia_seleccion_simple_con_return",
"sentencias_ejecutables_funcion : sentencia_ejecutable_funcion",
"sentencias_ejecutables_funcion : sentencias_ejecutables_funcion sentencia_ejecutable_funcion",
"funcion_sin_return : encabezado_funcion '{' sentencia_seleccion_compuesta_con_return '}'",
"funcion_sin_return : encabezado_funcion '{' sentencias_funcion sentencia_seleccion_compuesta_con_return '}'",
"sentencia_seleccion_compuesta_con_return : IF condicion THEN sentencia_seleccion_compuesta_con_return_simple ELSE sentencia_seleccion_compuesta_con_return_simple ENDIF ';'",
"sentencia_seleccion_compuesta_con_return : IF condicion THEN '{' sentencias_ejecutables_funcion sentencia_return '}' ELSE sentencia_seleccion_compuesta_con_return_simple ENDIF ';'",
"sentencia_seleccion_compuesta_con_return : IF condicion THEN '{' sentencias_ejecutables_funcion sentencia_seleccion_compuesta_con_return '}' ELSE sentencia_seleccion_compuesta_con_return_simple ENDIF ';'",
"sentencia_seleccion_compuesta_con_return : IF condicion THEN sentencia_seleccion_compuesta_con_return_simple ELSE '{' sentencias_ejecutables_funcion sentencia_return '}' ENDIF ';'",
"sentencia_seleccion_compuesta_con_return : IF condicion THEN sentencia_seleccion_compuesta_con_return_simple ELSE '{' sentencias_ejecutables_funcion sentencia_seleccion_compuesta_con_return '}' ENDIF ';'",
"sentencia_seleccion_compuesta_con_return : IF condicion THEN '{' sentencias_ejecutables_funcion sentencia_return '}' ELSE '{' sentencias_ejecutables_funcion sentencia_seleccion_compuesta_con_return_simple '}' ENDIF ';'",
"sentencia_seleccion_compuesta_con_return : IF condicion THEN '{' sentencias_ejecutables_funcion sentencia_seleccion_compuesta_con_return '}' ELSE '{' sentencias_ejecutables_funcion sentencia_seleccion_compuesta_con_return_simple '}' ENDIF ';'",
"sentencia_seleccion_compuesta_con_return : IF condicion THEN sentencia_seleccion_compuesta_con_return_simple ELSE sentencia_seleccion_compuesta_con_return_simple ENDIF",
"sentencia_seleccion_compuesta_con_return : IF condicion THEN '{' sentencias_ejecutables_funcion sentencia_return '}' ELSE sentencia_seleccion_compuesta_con_return_simple ENDIF",
"sentencia_seleccion_compuesta_con_return : IF condicion THEN '{' sentencias_ejecutables_funcion sentencia_seleccion_compuesta_con_return '}' ELSE sentencia_seleccion_compuesta_con_return_simple ENDIF",
"sentencia_seleccion_compuesta_con_return : IF condicion THEN sentencia_seleccion_compuesta_con_return_simple ELSE '{' sentencias_ejecutables_funcion sentencia_return '}' ENDIF",
"sentencia_seleccion_compuesta_con_return : IF condicion THEN sentencia_seleccion_compuesta_con_return_simple ELSE '{' sentencias_ejecutables_funcion sentencia_seleccion_compuesta_con_return '}' ENDIF",
"sentencia_seleccion_compuesta_con_return : IF condicion THEN '{' sentencias_ejecutables_funcion sentencia_return '}' ELSE '{' sentencias_ejecutables_funcion sentencia_seleccion_compuesta_con_return_simple '}' ENDIF",
"sentencia_seleccion_compuesta_con_return : IF condicion THEN '{' sentencias_ejecutables_funcion sentencia_seleccion_compuesta_con_return '}' ELSE '{' sentencias_ejecutables_funcion sentencia_seleccion_compuesta_con_return_simple '}' ENDIF",
"sentencia_seleccion_compuesta_con_return_simple : sentencia_return",
"sentencia_seleccion_compuesta_con_return_simple : sentencia_seleccion_compuesta_con_return",
"sentencia_seleccion_compuesta_con_return_simple : DEFER sentencia_seleccion_compuesta_con_return",
"sentencia_seleccion_simple_con_return : IF condicion THEN sentencia_return ENDIF ';'",
"sentencia_seleccion_simple_con_return : IF condicion THEN sentencia_seleccion_compuesta_con_return ENDIF ';'",
"sentencia_seleccion_simple_con_return : IF condicion THEN sentencia_ejecutable_funcion ENDIF ';'",
"sentencia_seleccion_simple_con_return : IF condicion THEN '{' sentencias_ejecutables_funcion sentencia_return '}' ENDIF ';'",
"sentencia_seleccion_simple_con_return : IF condicion THEN '{' sentencias_ejecutables_funcion sentencia_seleccion_compuesta_con_return '}' ENDIF ';'",
"sentencia_seleccion_simple_con_return : IF condicion THEN '{' sentencias_ejecutables_funcion sentencia_return '}' ELSE '{' sentencias_ejecutables_funcion '}' ENDIF ';'",
"sentencia_seleccion_simple_con_return : IF condicion THEN '{' sentencias_ejecutables_funcion sentencia_return '}' ELSE sentencia_ejecutable_funcion ENDIF ';'",
"sentencia_seleccion_simple_con_return : IF condicion THEN '{' sentencias_ejecutables_funcion sentencia_seleccion_compuesta_con_return '}' ELSE sentencia_ejecutable_funcion ENDIF ';'",
"sentencia_seleccion_simple_con_return : IF condicion THEN '{' sentencias_ejecutables_funcion sentencia_seleccion_compuesta_con_return '}' ELSE '{' sentencias_ejecutables_funcion '}' ENDIF ';'",
"sentencia_seleccion_simple_con_return : IF condicion THEN '{' sentencias_ejecutables_funcion '}' ELSE '{' sentencias_ejecutables_funcion sentencia_return '}' ENDIF ';'",
"sentencia_seleccion_simple_con_return : IF condicion THEN '{' sentencias_ejecutables_funcion '}' ELSE '{' sentencias_ejecutables_funcion sentencia_seleccion_compuesta_con_return '}' ENDIF ';'",
"sentencia_seleccion_simple_con_return : IF condicion THEN sentencia_ejecutable_funcion ELSE '{' sentencias_ejecutables_funcion sentencia_return '}' ENDIF ';'",
"sentencia_seleccion_simple_con_return : IF condicion THEN sentencia_ejecutable_funcion ELSE '{' sentencias_ejecutables_funcion sentencia_seleccion_compuesta_con_return '}' ENDIF ';'",
"sentencia_seleccion_simple_con_return : IF condicion THEN '{' sentencias_ejecutables_funcion '}' ELSE '{' sentencias_ejecutables_funcion '}' ENDIF ';'",
"sentencia_when_con_return : WHEN condicion THEN '{' sentencia_funcion '}' ';'",
"sentencia_when_con_return : WHEN condicion THEN '{' sentencia_funcion sentencia_return '}' ';'",
"sentencia_when_con_return : WHEN condicion THEN '{' sentencia_funcion sentencia_seleccion_compuesta_con_return '}' ';'",
"sentencia_when_con_return : WHEN condicion THEN '{' sentencia_funcion '}'",
"sentencia_when_con_return : WHEN condicion THEN '{' sentencia_funcion sentencia_return '}'",
"sentencia_when_con_return : WHEN condicion THEN '{' sentencia_funcion sentencia_seleccion_compuesta_con_return '}'",
"sentencia_when_con_return : WHEN condicion THEN '{' '}' ';'",
"sentencia_when_con_return : WHEN condicion '{' sentencia_funcion '}' ';'",
"sentencia_when_con_return : WHEN condicion '{' sentencia_funcion sentencia_return '}' ';'",
"sentencia_when_con_return : WHEN condicion '{' sentencia_funcion sentencia_seleccion_compuesta_con_return '}' ';'",
"sentencia_do_con_return : DO bloque_sentencias_ejecutables_do_con_return UNTIL condicion ';'",
"sentencia_do_con_return : etiqueta ':' DO bloque_sentencias_ejecutables_do_con_return UNTIL condicion ';'",
"sentencia_do_con_return : DO bloque_sentencias_ejecutables_do_con_return UNTIL condicion",
"sentencia_do_con_return : etiqueta ':' DO bloque_sentencias_ejecutables_do_con_return UNTIL condicion",
"bloque_sentencias_ejecutables_do_con_return : sentencia_return",
"bloque_sentencias_ejecutables_do_con_return : sentencia_seleccion_compuesta_con_return",
"bloque_sentencias_ejecutables_do_con_return : sentencias_ejecutables_do_funcion",
"bloque_sentencias_ejecutables_do_con_return : '{' sentencias_ejecutables_do_funcion sentencia_return '}'",
"bloque_sentencias_ejecutables_do_con_return : '{' sentencias_ejecutables_do_funcion sentencia_seleccion_compuesta_con_return '}'",
"bloque_sentencias_ejecutables_do_con_return : '{' sentencias_ejecutables_do_funcion '}'",
"bloque_sentencias_ejecutables_do_con_return : '{' '}'",
"bloque_sentencias_ejecutables_do_con_return : '{' sentencias_ejecutables_do_funcion sentencia_return",
"bloque_sentencias_ejecutables_do_con_return : sentencias_ejecutables_do_funcion sentencia_return '}'",
"bloque_sentencias_ejecutables_do_con_return : '{' sentencias_ejecutables_do_funcion sentencia_seleccion_compuesta_con_return",
"bloque_sentencias_ejecutables_do_con_return : sentencias_ejecutables_do_funcion sentencia_seleccion_compuesta_con_return '}'",
"bloque_sentencias_ejecutables_do_con_return : '{' sentencias_ejecutables_do_funcion",
"bloque_sentencias_ejecutables_do_con_return : sentencias_ejecutables_do_funcion '}'",
"sentencias_ejecutables_do_funcion : sentencia_ejecutable_do_funcion",
"sentencias_ejecutables_do_funcion : sentencias_ejecutables_do_funcion sentencia_ejecutable_do_funcion",
"sentencia_ejecutable_do_funcion : sentencia_ejecutable_funcion",
"sentencia_ejecutable_do_funcion : sentencia_break",
"sentencia_ejecutable_do_funcion : sentencia_continue",
"encabezado_funcion : FUN ID '(' ')' ':' tipo",
"encabezado_funcion : FUN ID '(' lista_de_parametros ')' ':' tipo",
"encabezado_funcion : FUN ID '(' lista_de_parametros ')' tipo",
"encabezado_funcion : FUN ID '(' ')' ':'",
"encabezado_funcion : FUN '(' ')' ':' tipo",
"encabezado_funcion : FUN ID ')' ':' tipo",
"encabezado_funcion : FUN ID '(' ':' tipo",
"encabezado_funcion : FUN ID '(' lista_de_parametros ')' ':'",
"encabezado_funcion : FUN '(' lista_de_parametros ')' ':' tipo",
"encabezado_funcion : FUN ID lista_de_parametros ')' ':' tipo",
"encabezado_funcion : FUN ID '(' lista_de_parametros ':' tipo",
"sentencia_return : RETURN '(' expresion ')' ';'",
"sentencia_return : RETURN '(' expresion ')'",
"sentencia_return : RETURN expresion ')'",
"sentencia_return : RETURN '(' expresion",
"sentencia_return : RETURN '(' ')' ';'",
"lista_de_parametros : parametro",
"lista_de_parametros : parametro ',' parametro",
"lista_de_parametros : parametro ',' parametro ',' lista_parametros_exceso",
"lista_parametros_exceso : parametro",
"lista_parametros_exceso : parametro ',' lista_parametros_exceso",
"parametro : tipo ID",
"parametro : tipo",
"$$1 :",
"parametro : $$1 ID",
"declaracion_constantes : CONST lista_declaracion_constantes ';'",
"declaracion_constantes : CONST lista_declaracion_constantes",
"declaracion_constantes : CONST ';'",
"lista_declaracion_constantes : declaracion_constante",
"lista_declaracion_constantes : declaracion_constante ',' lista_declaracion_constantes",
"declaracion_constante : ID ASIGNACION CTE",
"declaracion_constante : ID ASIGNACION",
"declaracion_constante : ID CTE",
"declaracion_constante : ID",
"declaracion_constante : ID '=' CTE",
"sentencia_ejecutable : asignacion",
"sentencia_ejecutable : DEFER asignacion",
"sentencia_ejecutable : seleccion",
"sentencia_ejecutable : DEFER seleccion",
"sentencia_ejecutable : imprimir",
"sentencia_ejecutable : DEFER imprimir",
"sentencia_ejecutable : sentencia_when",
"sentencia_ejecutable : DEFER sentencia_when",
"sentencia_ejecutable : sentencia_do",
"sentencia_ejecutable : DEFER sentencia_do",
"sentencia_ejecutable_do : sentencia_ejecutable",
"sentencia_ejecutable_do : sentencia_break",
"sentencia_ejecutable_do : sentencia_continue",
"sentencia_break : BREAK ';'",
"sentencia_break : BREAK ':' etiqueta ';'",
"sentencia_break : BREAK",
"sentencia_break : BREAK ':' etiqueta",
"sentencia_break : BREAK ':' ';'",
"sentencia_continue : CONTINUE ';'",
"sentencia_continue : CONTINUE",
"sentencia_do : sentencia_do_simple",
"sentencia_do : etiqueta ':' sentencia_do_simple",
"sentencia_do_simple : keyword_do bloque_sentencias_ejecutables_do UNTIL condicion ';'",
"sentencia_do_simple : keyword_do bloque_sentencias_ejecutables_do UNTIL condicion",
"keyword_do : DO",
"etiqueta : ID",
"bloque_sentencias_ejecutables_do : sentencia_ejecutable_do",
"bloque_sentencias_ejecutables_do : '{' sentencias_ejecutables_do '}'",
"bloque_sentencias_ejecutables_do : '{' sentencias_ejecutables_do",
"bloque_sentencias_ejecutables_do : sentencias_ejecutables_do '}'",
"sentencias_ejecutables_do : sentencia_ejecutable_do",
"sentencias_ejecutables_do : sentencias_ejecutables_do sentencia_ejecutable_do",
"asignacion : ID ASIGNACION expresion ';'",
"asignacion : ID ASIGNACION ';'",
"asignacion : ID ASIGNACION expresion",
"asignacion : ID '=' expresion ';'",
"asignacion : ID '=' expresion",
"sentencia_when : WHEN condicion THEN '{' sentencias_when '}' ';'",
"sentencia_when : WHEN condicion '{' sentencias_when '}' ';'",
"sentencia_when : WHEN condicion THEN '{' sentencias_when '}'",
"sentencia_when : WHEN condicion '{' sentencias_when '}'",
"sentencia_when : WHEN condicion '{' '}'",
"sentencias_when : sentencia",
"sentencias_when : sentencia sentencias_when",
"seleccion : IF condicion THEN bloque_sentencias_ejecutables_seleccion_then ENDIF ';'",
"seleccion : IF condicion THEN bloque_sentencias_ejecutables_seleccion_then ELSE bloque_sentencias_ejecutables_seleccion_else ENDIF ';'",
"seleccion : IF condicion THEN bloque_sentencias_ejecutables_seleccion_then ENDIF",
"seleccion : IF condicion THEN bloque_sentencias_ejecutables_seleccion_then ELSE bloque_sentencias_ejecutables_seleccion_else ENDIF",
"seleccion : IF condicion THEN ENDIF ';'",
"seleccion : IF condicion bloque_sentencias_ejecutables_seleccion_then ENDIF ';'",
"seleccion : IF condicion bloque_sentencias_ejecutables_seleccion_then ELSE bloque_sentencias_ejecutables_seleccion_else ENDIF ';'",
"seleccion : IF condicion THEN ELSE ENDIF ';'",
"bloque_sentencias_ejecutables_seleccion : sentencia_ejecutable",
"bloque_sentencias_ejecutables_seleccion : '{' sentencias_ejecutables '}'",
"bloque_sentencias_ejecutables_seleccion : '{' '}'",
"bloque_sentencias_ejecutables_seleccion : '{' sentencias_ejecutables",
"bloque_sentencias_ejecutables_seleccion : sentencias_ejecutables '}'",
"sentencias_ejecutables : sentencia_ejecutable",
"sentencias_ejecutables : sentencias_ejecutables sentencia_ejecutable",
"bloque_sentencias_ejecutables_seleccion_then : bloque_sentencias_ejecutables_seleccion",
"bloque_sentencias_ejecutables_seleccion_else : bloque_sentencias_ejecutables_seleccion",
"condicion : '(' expresion comparador expresion ')'",
"condicion : '(' expresion comparador ')'",
"condicion : '(' comparador expresion ')'",
"condicion : expresion comparador expresion ')'",
"condicion : '(' expresion comparador expresion",
"condicion : '(' ')'",
"comparador : COMP_MAYOR_IGUAL",
"comparador : COMP_MENOR_IGUAL",
"comparador : COMP_DISTINTO",
"comparador : '>'",
"comparador : '<'",
"comparador : '='",
"expresion : expresion '+' termino",
"expresion : expresion '-' termino",
"expresion : termino",
"termino : termino '*' factor",
"termino : termino '/' factor",
"termino : factor",
"factor : ID",
"factor : constante",
"factor : invocacion_funcion",
"invocacion_funcion : ID '(' ')'",
"invocacion_funcion : ID '(' lista_de_parametros_reales ')'",
"lista_de_parametros_reales : parametro_real",
"lista_de_parametros_reales : lista_de_parametros_reales ',' parametro_real",
"parametro_real : ID",
"parametro_real : constante",
"imprimir : OUT '(' CADENA ')' ';'",
"imprimir : OUT '(' ID ')' ';'",
"imprimir : OUT '(' ')' ';'",
"imprimir : OUT CADENA ')' ';'",
"imprimir : OUT '(' CADENA ';'",
"imprimir : OUT ID ')' ';'",
"imprimir : OUT '(' ID ';'",
"imprimir : OUT '(' CADENA ')'",
"imprimir : OUT '(' ID ')'",
"constante : CTE",
"constante : '-' CTE",
"tipo : UINT16",
"tipo : DOUBLE64",
};

//#line 602 ".\gramatica.y"

public static AnalizadorLexico lexico = null;
public static Logger logger = Logger.getInstance();
public static TablaDeSimbolos ts = TablaDeSimbolos.getInstance();
public static Parser parser = null;

public static StringBuilder negConstante = new StringBuilder();

public void constanteConSigno(String constante) {
	if (constante.contains(".")) {

		negConstante.setLength(0);
		negConstante.append("-");
		negConstante.append(constante);
		
		Double parsedDouble = Double.parseDouble(negConstante.toString().replace('D', 'E'));
		
		if (parsedDouble < -2.2250738585072014E-308 && -1.7976931348623157E+308 > parsedDouble) {
			logger.logWarning("[Parser] Rango invalido para la constante: " + negConstante + ", se trunca al rango permitido");
			
			if (-1.7976931348623157E+308 < parsedDouble) {
				negConstante.setLength(0);
				negConstante.append("-1.7976931348623157D+308");
			} else {
				negConstante.setLength(0);
				negConstante.append("-2.2250738585072014D-308");
			}
		}
		
		ts.swapLexemas(constante, negConstante.toString());
	} else {
		//se recibio un uint que fue aceptado por el lexico pero resulta ser negativo
		logger.logWarning("[Parser] No se admiten ui16 con valores negativos: " + "-"+constante + ", se trunca a 0");
		
		ts.swapLexemas(constante, "0");
	}
}	

public int yylex() {
	return lexico.yylex(parser);
}

public void yyerror(String error) {
	logger.logError(error);
}

public static void main(String[] args) {
	if (args.length == 0) {
		System.err.println("No se especifico ningun archivo de codigo");
	} else {
		String archivo_a_leer = args[0];
		System.out.println("Se va a leer archivo " + archivo_a_leer);
		
		FileReaderHelper fileHelper = new FileReaderHelper();
		
		boolean fileOpenSuccess = fileHelper.open(archivo_a_leer);
		
		if (fileOpenSuccess) {
			parser = new Parser();
			lexico = new AnalizadorLexico(fileHelper);
			
	        parser.run();
	
			String path = new File(archivo_a_leer).getAbsolutePath();
	        
	        Output out = new Output(path);
	        
	        String printTs = ts.print();
	        
	        out.saveFile("codigo-lexico.txt", logger.getLexico());
			out.saveFile("codigo-sintetico.txt", logger.getSintactico());
			out.saveFile("tabla-de-simbolos.txt", printTs);
	        
			System.out.println(printTs);

			GeneracionCodigoIntermedio instance = GeneracionCodigoIntermedio.getInstance();

			instance.printTercetos();
		}
	}
}
//#line 1091 "Parser.java"
//###############################################################
// method: yylexdebug : check lexer state
//###############################################################
void yylexdebug(int state,int ch)
{
String s=null;
  if (ch < 0) ch=0;
  if (ch <= YYMAXTOKEN) //check index bounds
     s = yyname[ch];    //now get it
  if (s==null)
    s = "illegal-symbol";
  debug("state "+state+", reading "+ch+" ("+s+")");
}





//The following are now global, to aid in error reporting
int yyn;       //next next thing to do
int yym;       //
int yystate;   //current parsing state from state table
String yys;    //current token string


//###############################################################
// method: yyparse : parse input and execute indicated items
//###############################################################
int yyparse()
{
boolean doaction;
  init_stacks();
  yynerrs = 0;
  yyerrflag = 0;
  yychar = -1;          //impossible char forces a read
  yystate=0;            //initial state
  state_push(yystate);  //save it
  val_push(yylval);     //save empty value
  while (true) //until parsing is done, either correctly, or w/error
    {
    doaction=true;
    if (yydebug) debug("loop"); 
    //#### NEXT ACTION (from reduction table)
    for (yyn=yydefred[yystate];yyn==0;yyn=yydefred[yystate])
      {
      if (yydebug) debug("yyn:"+yyn+"  state:"+yystate+"  yychar:"+yychar);
      if (yychar < 0)      //we want a char?
        {
        yychar = yylex();  //get next token
        if (yydebug) debug(" next yychar:"+yychar);
        //#### ERROR CHECK ####
        if (yychar < 0)    //it it didn't work/error
          {
          yychar = 0;      //change it to default string (no -1!)
          if (yydebug)
            yylexdebug(yystate,yychar);
          }
        }//yychar<0
      yyn = yysindex[yystate];  //get amount to shift by (shift index)
      if ((yyn != 0) && (yyn += yychar) >= 0 &&
          yyn <= YYTABLESIZE && yycheck[yyn] == yychar)
        {
        if (yydebug)
          debug("state "+yystate+", shifting to state "+yytable[yyn]);
        //#### NEXT STATE ####
        yystate = yytable[yyn];//we are in a new state
        state_push(yystate);   //save it
        val_push(yylval);      //push our lval as the input for next rule
        yychar = -1;           //since we have 'eaten' a token, say we need another
        if (yyerrflag > 0)     //have we recovered an error?
           --yyerrflag;        //give ourselves credit
        doaction=false;        //but don't process yet
        break;   //quit the yyn=0 loop
        }

    yyn = yyrindex[yystate];  //reduce
    if ((yyn !=0 ) && (yyn += yychar) >= 0 &&
            yyn <= YYTABLESIZE && yycheck[yyn] == yychar)
      {   //we reduced!
      if (yydebug) debug("reduce");
      yyn = yytable[yyn];
      doaction=true; //get ready to execute
      break;         //drop down to actions
      }
    else //ERROR RECOVERY
      {
      if (yyerrflag==0)
        {
        yyerror("syntax error");
        yynerrs++;
        }
      if (yyerrflag < 3) //low error count?
        {
        yyerrflag = 3;
        while (true)   //do until break
          {
          if (stateptr<0)   //check for under & overflow here
            {
            yyerror("stack underflow. aborting...");  //note lower case 's'
            return 1;
            }
          yyn = yysindex[state_peek(0)];
          if ((yyn != 0) && (yyn += YYERRCODE) >= 0 &&
                    yyn <= YYTABLESIZE && yycheck[yyn] == YYERRCODE)
            {
            if (yydebug)
              debug("state "+state_peek(0)+", error recovery shifting to state "+yytable[yyn]+" ");
            yystate = yytable[yyn];
            state_push(yystate);
            val_push(yylval);
            doaction=false;
            break;
            }
          else
            {
            if (yydebug)
              debug("error recovery discarding state "+state_peek(0)+" ");
            if (stateptr<0)   //check for under & overflow here
              {
              yyerror("Stack underflow. aborting...");  //capital 'S'
              return 1;
              }
            state_pop();
            val_pop();
            }
          }
        }
      else            //discard this token
        {
        if (yychar == 0)
          return 1; //yyabort
        if (yydebug)
          {
          yys = null;
          if (yychar <= YYMAXTOKEN) yys = yyname[yychar];
          if (yys == null) yys = "illegal-symbol";
          debug("state "+yystate+", error recovery discards token "+yychar+" ("+yys+")");
          }
        yychar = -1;  //read another
        }
      }//end error recovery
    }//yyn=0 loop
    if (!doaction)   //any reason not to proceed?
      continue;      //skip action
    yym = yylen[yyn];          //get count of terminals on rhs
    if (yydebug)
      debug("state "+yystate+", reducing "+yym+" by rule "+yyn+" ("+yyrule[yyn]+")");
    if (yym>0)                 //if count of rhs not 'nil'
      yyval = val_peek(yym-1); //get current semantic value
    yyval = dup_yyval(yyval); //duplicate yyval if ParserVal is used as semantic value
    switch(yyn)
      {
//########## USER-SUPPLIED ACTIONS ##########
case 1:
//#line 17 ".\gramatica.y"
{ 
		logger.logSuccess("[Parser] Programa correcto detectado");
		GeneracionCodigoIntermedio instance = GeneracionCodigoIntermedio.getInstance();
		instance.agregarUsoAIdentificador(val_peek(3).sval, "nombre_programa");
	}
break;
case 2:
//#line 22 ".\gramatica.y"
{ logger.logError("[Parser] Se esperaba un identificador nombre del programa"); }
break;
case 3:
//#line 23 ".\gramatica.y"
{ logger.logError("[Parser] Se esperaba un { antes de las sentencias del programa"); }
break;
case 4:
//#line 24 ".\gramatica.y"
{ logger.logError("[Parser] Se esperaba un } al final de las sentencias del programa"); }
break;
case 5:
//#line 25 ".\gramatica.y"
{ logger.logError("[Parser] Se esperaban sentencias del programa"); }
break;
case 6:
//#line 26 ".\gramatica.y"
{ logger.logError("[Parser] Se esperaban sentencias del programa"); }
break;
case 16:
//#line 51 ".\gramatica.y"
{ 
		logger.logSuccess("[Parser] Declaracion de lista de variables detectado"); 
		GeneracionCodigoIntermedio instance = GeneracionCodigoIntermedio.getInstance(); 
		instance.agregarTipoAListaDeVariables(val_peek(2).sval);
	}
break;
case 17:
//#line 56 ".\gramatica.y"
{ logger.logError("[Parser] Se esperaba un ; al final de la lista de variables"); }
break;
case 18:
//#line 57 ".\gramatica.y"
{ logger.logError("[Parser] Se esperaba un tipo para la lista de variables"); }
break;
case 19:
//#line 58 ".\gramatica.y"
{ logger.logError("[Parser] Se esperaba una variable o lista de variables"); }
break;
case 20:
//#line 62 ".\gramatica.y"
{ 
		GeneracionCodigoIntermedio instance = GeneracionCodigoIntermedio.getInstance(); 
		instance.agregarVariableADeclarar(val_peek(2).sval);
	}
break;
case 21:
//#line 66 ".\gramatica.y"
{
		GeneracionCodigoIntermedio instance = GeneracionCodigoIntermedio.getInstance(); 
		instance.agregarVariableADeclarar(val_peek(0).sval);
	}
break;
case 22:
//#line 73 ".\gramatica.y"
{ logger.logSuccess("[Parser] Declaracion de funcion detectado"); }
break;
case 23:
//#line 74 ".\gramatica.y"
{ logger.logSuccess("[Parser] Declaracion de funcion detectado"); }
break;
case 24:
//#line 75 ".\gramatica.y"
{ logger.logError("[Parser] Se esperaban sentencias en la funcion"); }
break;
case 41:
//#line 107 ".\gramatica.y"
{ logger.logSuccess("[Parser] Declaracion de funcion detectado"); }
break;
case 42:
//#line 108 ".\gramatica.y"
{ logger.logSuccess("[Parser] Declaracion de funcion detectado"); }
break;
case 43:
//#line 112 ".\gramatica.y"
{ logger.logSuccess("[Parser] Sentencia seleccion detectada"); }
break;
case 44:
//#line 113 ".\gramatica.y"
{ logger.logSuccess("[Parser] Sentencia seleccion detectada"); }
break;
case 45:
//#line 114 ".\gramatica.y"
{ logger.logSuccess("[Parser] Sentencia seleccion detectada"); }
break;
case 46:
//#line 115 ".\gramatica.y"
{ logger.logSuccess("[Parser] Sentencia seleccion detectada"); }
break;
case 47:
//#line 116 ".\gramatica.y"
{ logger.logSuccess("[Parser] Sentencia seleccion detectada"); }
break;
case 48:
//#line 117 ".\gramatica.y"
{ logger.logSuccess("[Parser] Sentencia seleccion detectada"); }
break;
case 49:
//#line 118 ".\gramatica.y"
{ logger.logSuccess("[Parser] Sentencia seleccion detectada"); }
break;
case 50:
//#line 119 ".\gramatica.y"
{ logger.logError("[Parser] Se esperaba un ; al final de la sentencia de seleccion"); }
break;
case 51:
//#line 120 ".\gramatica.y"
{ logger.logError("[Parser] Se esperaba un ; al final de la sentencia de seleccion"); }
break;
case 52:
//#line 121 ".\gramatica.y"
{ logger.logError("[Parser] Se esperaba un ; al final de la sentencia de seleccion"); }
break;
case 53:
//#line 122 ".\gramatica.y"
{ logger.logError("[Parser] Se esperaba un ; al final de la sentencia de seleccion"); }
break;
case 54:
//#line 123 ".\gramatica.y"
{ logger.logError("[Parser] Se esperaba un ; al final de la sentencia de seleccion"); }
break;
case 55:
//#line 124 ".\gramatica.y"
{ logger.logError("[Parser] Se esperaba un ; al final de la sentencia de seleccion"); }
break;
case 56:
//#line 125 ".\gramatica.y"
{ logger.logError("[Parser] Se esperaba un ; al final de la sentencia de seleccion"); }
break;
case 60:
//#line 135 ".\gramatica.y"
{ logger.logSuccess("[Parser] Sentencia de seleccion detectada"); }
break;
case 61:
//#line 136 ".\gramatica.y"
{ logger.logSuccess("[Parser] Sentencia de seleccion detectada"); }
break;
case 62:
//#line 137 ".\gramatica.y"
{ logger.logSuccess("[Parser] Sentencia de seleccion detectada"); }
break;
case 63:
//#line 138 ".\gramatica.y"
{ logger.logSuccess("[Parser] Sentencia de seleccion detectada"); }
break;
case 64:
//#line 139 ".\gramatica.y"
{ logger.logSuccess("[Parser] Sentencia de seleccion detectada"); }
break;
case 65:
//#line 140 ".\gramatica.y"
{ logger.logSuccess("[Parser] Sentencia de seleccion detectada"); }
break;
case 66:
//#line 141 ".\gramatica.y"
{ logger.logSuccess("[Parser] Sentencia de seleccion detectada"); }
break;
case 67:
//#line 142 ".\gramatica.y"
{ logger.logSuccess("[Parser] Sentencia de seleccion detectada"); }
break;
case 68:
//#line 143 ".\gramatica.y"
{ logger.logSuccess("[Parser] Sentencia de seleccion detectada"); }
break;
case 69:
//#line 144 ".\gramatica.y"
{ logger.logSuccess("[Parser] Sentencia de seleccion detectada"); }
break;
case 70:
//#line 145 ".\gramatica.y"
{ logger.logSuccess("[Parser] Sentencia de seleccion detectada"); }
break;
case 71:
//#line 146 ".\gramatica.y"
{ logger.logSuccess("[Parser] Sentencia de seleccion detectada"); }
break;
case 72:
//#line 147 ".\gramatica.y"
{ logger.logSuccess("[Parser] Sentencia de seleccion detectada"); }
break;
case 73:
//#line 148 ".\gramatica.y"
{ logger.logSuccess("[Parser] Sentencia de seleccion detectada"); }
break;
case 74:
//#line 152 ".\gramatica.y"
{ logger.logSuccess("[Parser] Sentencia when detectada"); }
break;
case 75:
//#line 153 ".\gramatica.y"
{ logger.logSuccess("[Parser] Sentencia when detectada"); }
break;
case 76:
//#line 154 ".\gramatica.y"
{ logger.logSuccess("[Parser] Sentencia when detectada"); }
break;
case 77:
//#line 155 ".\gramatica.y"
{ logger.logError("[Parser] Se esperaba ; al final de la sentencia when"); }
break;
case 78:
//#line 156 ".\gramatica.y"
{ logger.logError("[Parser] Se esperaba ; al final de la sentencia when"); }
break;
case 79:
//#line 157 ".\gramatica.y"
{ logger.logError("[Parser] Se esperaba ; al final de la sentencia when"); }
break;
case 80:
//#line 158 ".\gramatica.y"
{ logger.logError("[Parser] Se esperaban sentencias en la sentencia when"); }
break;
case 81:
//#line 159 ".\gramatica.y"
{ logger.logError("[Parser] Se esperaba la palabra reservada then en la sentencia when"); }
break;
case 82:
//#line 160 ".\gramatica.y"
{ logger.logError("[Parser] Se esperaba la palabra reservada then en la sentencia when"); }
break;
case 83:
//#line 161 ".\gramatica.y"
{ logger.logError("[Parser] Se esperaba la palabra reservada then en la sentencia when"); }
break;
case 84:
//#line 165 ".\gramatica.y"
{ logger.logSuccess("[Parser] Sentencia do until detectada"); }
break;
case 85:
//#line 166 ".\gramatica.y"
{ logger.logSuccess("[Parser] Sentencia do until detectada"); }
break;
case 86:
//#line 167 ".\gramatica.y"
{ logger.logError("[Parser] Se esperaba un ; al final de la sentencia do"); }
break;
case 87:
//#line 168 ".\gramatica.y"
{ logger.logError("[Parser] Se esperaba un ; al final de la sentencia do"); }
break;
case 94:
//#line 178 ".\gramatica.y"
{ logger.logError("[Parser] Se esperaban sentencias en la sentencia do"); }
break;
case 95:
//#line 179 ".\gramatica.y"
{ logger.logError("[Parser] Se esperaba un } al final de la sentencia do"); }
break;
case 96:
//#line 180 ".\gramatica.y"
{ logger.logError("[Parser] Se esperaba un } al final de la sentencia do"); }
break;
case 97:
//#line 181 ".\gramatica.y"
{ logger.logError("[Parser] Se esperaba un } al final de la sentencia do"); }
break;
case 98:
//#line 182 ".\gramatica.y"
{ logger.logError("[Parser] Se esperaba un } al final de la sentencia do"); }
break;
case 99:
//#line 183 ".\gramatica.y"
{ logger.logError("[Parser] Se esperaba un } al final de la sentencia do"); }
break;
case 100:
//#line 184 ".\gramatica.y"
{ logger.logError("[Parser] Se esperaba un } al final de la sentencia do"); }
break;
case 106:
//#line 199 ".\gramatica.y"
{
		GeneracionCodigoIntermedio instance = GeneracionCodigoIntermedio.getInstance();
		instance.agregarUsoAIdentificador(val_peek(4).sval, "nombre_funcion");
	}
break;
case 107:
//#line 203 ".\gramatica.y"
{
		GeneracionCodigoIntermedio instance = GeneracionCodigoIntermedio.getInstance();
		instance.agregarUsoAIdentificador(val_peek(5).sval, "nombre_funcion");
	}
break;
case 108:
//#line 207 ".\gramatica.y"
{ logger.logError("[Parser] Se esperaba un : antes del tipo para la funcion"); }
break;
case 109:
//#line 208 ".\gramatica.y"
{ logger.logError("[Parser] Se esperaba un tipo de return para la funcion"); }
break;
case 110:
//#line 209 ".\gramatica.y"
{ logger.logError("[Parser] Se esperaba un identificador nombre para la funcion"); }
break;
case 111:
//#line 210 ".\gramatica.y"
{ logger.logError("[Parser] Se esperaba un ( luego del nombre de la funcion"); }
break;
case 112:
//#line 211 ".\gramatica.y"
{ logger.logError("[Parser] Se esperaba un ) luego del nombre para la funcion"); }
break;
case 113:
//#line 212 ".\gramatica.y"
{ logger.logError("[Parser] Se esperaba un tipo de return para la funcion"); }
break;
case 114:
//#line 213 ".\gramatica.y"
{ logger.logError("[Parser] Se esperaba un identificador nombre para la funcion"); }
break;
case 115:
//#line 214 ".\gramatica.y"
{ logger.logError("[Parser] Se esperaba un ( luego del nombre de la funcion"); }
break;
case 116:
//#line 215 ".\gramatica.y"
{ logger.logError("[Parser] Se esperaba un ) luego del nombre para la funcion"); }
break;
case 118:
//#line 220 ".\gramatica.y"
{ logger.logError("[Parser] Se esperaba un ; al final de la sentencia return"); }
break;
case 119:
//#line 221 ".\gramatica.y"
{ logger.logError("[Parser] Se esperaba un ( en la sentencia return"); }
break;
case 120:
//#line 222 ".\gramatica.y"
{ logger.logError("[Parser] Se esperaba un ) en la sentencia return"); }
break;
case 121:
//#line 223 ".\gramatica.y"
{ logger.logError("[Parser] Se esperaba una expresion en la sentencia return"); }
break;
case 124:
//#line 229 ".\gramatica.y"
{ logger.logError("[Parser] Hay mas de 2 parametros en la funcion"); }
break;
case 127:
//#line 238 ".\gramatica.y"
{
		GeneracionCodigoIntermedio instance = GeneracionCodigoIntermedio.getInstance();
		instance.agregarTipoAParametro(val_peek(0).sval, val_peek(1).sval);
	}
break;
case 129:
//#line 242 ".\gramatica.y"
{ logger.logError("[Parser] Se esperaba un identificador nombre para el parametro"); }
break;
case 130:
//#line 243 ".\gramatica.y"
{ logger.logError("[Parser] Se esperaba un tipo valido para el parametro"); }
break;
case 131:
//#line 247 ".\gramatica.y"
{ logger.logSuccess("[Parser] Declaracion de constantes detectado"); }
break;
case 132:
//#line 248 ".\gramatica.y"
{ logger.logError("[Parser] Se esperaba ; al final de la declaracion de constantes"); }
break;
case 133:
//#line 249 ".\gramatica.y"
{ logger.logError("[Parser] Se esperaba una lista de declaracion de constantes"); }
break;
case 137:
//#line 259 ".\gramatica.y"
{ logger.logError("[Parser] Se esperaba una constante del lado derecho de la asignacion"); }
break;
case 138:
//#line 260 ".\gramatica.y"
{ logger.logError("[Parser] Se esperaba el simbolo asignacion en la declaracion de constantes"); }
break;
case 139:
//#line 261 ".\gramatica.y"
{ logger.logError("[Parser] Se esperaba una asignacion en la declaracion de constantes"); }
break;
case 154:
//#line 285 ".\gramatica.y"
{ logger.logSuccess("[Parser] Sentencia break detectada"); }
break;
case 155:
//#line 286 ".\gramatica.y"
{ logger.logSuccess("[Parser] Sentencia break con etiqueta detectada"); }
break;
case 156:
//#line 287 ".\gramatica.y"
{ logger.logError("[Parser] Se esperaba un ; luego de la sentencia break"); }
break;
case 157:
//#line 288 ".\gramatica.y"
{ logger.logError("[Parser] Se esperaba un ; luego de la sentencia break"); }
break;
case 158:
//#line 289 ".\gramatica.y"
{ logger.logError("[Parser] Se esperaba una etiqueta en la sentencia break"); }
break;
case 159:
//#line 293 ".\gramatica.y"
{ logger.logSuccess("[Parser] Sentencia continue detectada"); }
break;
case 160:
//#line 294 ".\gramatica.y"
{ logger.logError("[Parser] Se esperaba un ; al final de la sentencia continue"); }
break;
case 163:
//#line 303 ".\gramatica.y"
{ 
		logger.logSuccess("[Parser] Sentencia do until detectada"); 
		GeneracionCodigoIntermedio instance = GeneracionCodigoIntermedio.getInstance();
		Terceto tercetoDo = instance.desapilarTerceto();
		int posPrimerTerceto = instance.desapilarPosicionTerceto();

		tercetoDo.setOperando2("[" + posPrimerTerceto + "]");
	}
break;
case 164:
//#line 311 ".\gramatica.y"
{ logger.logError("[Parser] Se esperaba un ; al final de la sentencia do"); }
break;
case 165:
//#line 315 ".\gramatica.y"
{
		GeneracionCodigoIntermedio instance = GeneracionCodigoIntermedio.getInstance();
		instance.apilarPosicionTerceto(instance.getTamanioListaTercetos());
	}
break;
case 166:
//#line 322 ".\gramatica.y"
{
		GeneracionCodigoIntermedio instance = GeneracionCodigoIntermedio.getInstance();
		instance.agregarUsoAIdentificador(val_peek(0).sval, "nombre_etiqueta");
	}
break;
case 169:
//#line 331 ".\gramatica.y"
{ logger.logError("[Parser] Se esperaba un } al final de la sentencia do"); }
break;
case 170:
//#line 332 ".\gramatica.y"
{ logger.logError("[Parser] Se esperaba un { en la sentencia do"); }
break;
case 173:
//#line 342 ".\gramatica.y"
{ 
		logger.logSuccess("[Parser] Asignacion detectada"); 

		GeneracionCodigoIntermedio instance = GeneracionCodigoIntermedio.getInstance();

		int tercetoPosicion = instance.getTamanioListaTercetos(); 

		Terceto terceto = new Terceto("=:", val_peek(3).sval, val_peek(1).sval);

		terceto.setOperacion("=:");
		terceto.setOperando1(val_peek(3).sval);
		terceto.setOperando2(val_peek(1).sval);

		instance.agregarTerceto(terceto);

		yyval.sval = "[" + tercetoPosicion + "]";

	}
break;
case 174:
//#line 360 ".\gramatica.y"
{logger.logError("[Parser] Se espera una expresion del lado derecho de la asignacion");}
break;
case 175:
//#line 361 ".\gramatica.y"
{ logger.logError("[Parser] Se espera un ; al final de la asignacion"); }
break;
case 176:
//#line 362 ".\gramatica.y"
{ logger.logError("[Parser] Se espera el simbolo =: en lugar de = para la asignacion"); }
break;
case 177:
//#line 363 ".\gramatica.y"
{ logger.logError("[Parser] Se espera el simbolo =: en lugar de = para la asignacion"); }
break;
case 178:
//#line 367 ".\gramatica.y"
{ logger.logSuccess("[Parser] Sentencia when detectada"); }
break;
case 179:
//#line 368 ".\gramatica.y"
{ logger.logError("[Parser] Se esperaba la palabra reservada then en la sentencia when"); }
break;
case 180:
//#line 369 ".\gramatica.y"
{ logger.logError("[Parser] Se esperaba un ; al final de la sentencia when"); }
break;
case 181:
//#line 370 ".\gramatica.y"
{ logger.logError("[Parser] Se esperaba la palabra reservada then en la sentencia when"); }
break;
case 182:
//#line 371 ".\gramatica.y"
{ logger.logError("[Parser] Se esperaban sentencias dentro del when"); }
break;
case 185:
//#line 381 ".\gramatica.y"
{ 
		logger.logSuccess("[Parser] Sentencia if then detectada");

		GeneracionCodigoIntermedio instance = GeneracionCodigoIntermedio.getInstance();

		Terceto bi = instance.desapilarTerceto();
		bi.setOperando1("[" + String.valueOf(instance.getTamanioListaTercetos()) + "]");
	}
break;
case 186:
//#line 389 ".\gramatica.y"
{ 
		logger.logSuccess("[Parser] Sentencia if then else detectada"); 
		GeneracionCodigoIntermedio instance = GeneracionCodigoIntermedio.getInstance();
		Terceto bi = instance.desapilarTerceto();
		bi.setOperando1("[" + String.valueOf(instance.getTamanioListaTercetos()) + "]");
	}
break;
case 187:
//#line 395 ".\gramatica.y"
{ logger.logError("[Parser] Se esperaba un ; al final de la sentencia seleccion"); }
break;
case 188:
//#line 396 ".\gramatica.y"
{ logger.logError("[Parser] Se esperaba un ; al final de la sentencia seleccion"); }
break;
case 189:
//#line 397 ".\gramatica.y"
{ logger.logError("[Parser] Se esperaban sentencias en la sentencia seleccion"); }
break;
case 190:
//#line 398 ".\gramatica.y"
{ logger.logError("[Parser] Se esperaban la palabra reservada then en la sentencia seleccion"); }
break;
case 191:
//#line 399 ".\gramatica.y"
{ logger.logError("[Parser] Se esperaban la palabra reservada then en la sentencia seleccion"); }
break;
case 192:
//#line 400 ".\gramatica.y"
{ logger.logError("[Parser] Se esperaban sentencias en la sentencia seleccion"); }
break;
case 195:
//#line 406 ".\gramatica.y"
{ logger.logError("[Parser] Se esperaban sentencias dentro de la seleccion"); }
break;
case 196:
//#line 407 ".\gramatica.y"
{ logger.logError("[Parser] Se esperaba un } al final de la seleccion"); }
break;
case 197:
//#line 408 ".\gramatica.y"
{ logger.logError("[Parser] Se esperaba un { en la seleccion"); }
break;
case 200:
//#line 417 ".\gramatica.y"
{

		GeneracionCodigoIntermedio instance = GeneracionCodigoIntermedio.getInstance();

		Terceto t = instance.desapilarTerceto();

		t.setOperando2("[" + String.valueOf(instance.getTamanioListaTercetos() + 1) + "]");

		Terceto bi = new Terceto("BI", "-", "-");

		instance.agregarTerceto(bi);
		instance.apilarTerceto(bi);
	}
break;
case 202:
//#line 438 ".\gramatica.y"
{
		GeneracionCodigoIntermedio instance = GeneracionCodigoIntermedio.getInstance();

		/*int tercetoPosicion = instance.getTamanioListaTercetos();*/

		int tercetoPosicion = 0;

		Terceto terceto = new Terceto(val_peek(2).sval, val_peek(3).sval, val_peek(1).sval);

		tercetoPosicion = instance.getTamanioListaTercetos();

		instance.agregarTerceto(terceto);
		
		yyval.sval = "[" + tercetoPosicion + "]";

		terceto = new Terceto("BF", "[" + tercetoPosicion + "]", "-");

		instance.agregarTerceto(terceto);
		instance.apilarTerceto(terceto);

		/*$$.sval = "[" + tercetoPosicion + "]";*/

	}
break;
case 203:
//#line 461 ".\gramatica.y"
{ logger.logError("[Parser] Se esperaba un expresion del lado derecho de la comparacion"); }
break;
case 204:
//#line 462 ".\gramatica.y"
{ logger.logError("[Parser] Se esperaba un expresion del lado izquierdo de la comparacion"); }
break;
case 205:
//#line 463 ".\gramatica.y"
{ logger.logError("[Parser] Se esperaba un ( al comienzo de la comparacion"); }
break;
case 206:
//#line 464 ".\gramatica.y"
{ logger.logError("[Parser] Se esperaba un ) al final de la comparacion"); }
break;
case 207:
//#line 465 ".\gramatica.y"
{ logger.logError("[Parser] Se esperaba una comparacion"); }
break;
case 208:
//#line 469 ".\gramatica.y"
{yyval.sval = ">=";}
break;
case 209:
//#line 470 ".\gramatica.y"
{yyval.sval = "<=";}
break;
case 210:
//#line 471 ".\gramatica.y"
{yyval.sval = "=!";}
break;
case 211:
//#line 472 ".\gramatica.y"
{yyval.sval = ">";}
break;
case 212:
//#line 473 ".\gramatica.y"
{yyval.sval = "<";}
break;
case 213:
//#line 474 ".\gramatica.y"
{yyval.sval = "=";}
break;
case 214:
//#line 478 ".\gramatica.y"
{
		
		GeneracionCodigoIntermedio instance = GeneracionCodigoIntermedio.getInstance();

		int tercetoPosicion = instance.getTamanioListaTercetos(); 

		Terceto terceto = new Terceto("+", val_peek(2).sval, val_peek(0).sval);

		instance.agregarTerceto(terceto);

		yyval.sval = "[" + tercetoPosicion + "]";

	}
break;
case 215:
//#line 491 ".\gramatica.y"
{
		
		GeneracionCodigoIntermedio instance = GeneracionCodigoIntermedio.getInstance();

		int tercetoPosicion = instance.getTamanioListaTercetos(); 

		Terceto terceto = new Terceto("-", val_peek(2).sval, val_peek(0).sval);

		instance.agregarTerceto(terceto);

		yyval.sval = "[" + tercetoPosicion + "]";

	}
break;
case 216:
//#line 504 ".\gramatica.y"
{
		yyval.sval = val_peek(0).sval;
	}
break;
case 217:
//#line 510 ".\gramatica.y"
{
		GeneracionCodigoIntermedio instance = GeneracionCodigoIntermedio.getInstance();

		int tercetoPosicion = instance.getTamanioListaTercetos();

		Terceto terceto = new Terceto("*", val_peek(2).sval, val_peek(0).sval);

		instance.agregarTerceto(terceto);

		yyval.sval = "[" + tercetoPosicion + "]";

	}
break;
case 218:
//#line 522 ".\gramatica.y"
{

		GeneracionCodigoIntermedio instance = GeneracionCodigoIntermedio.getInstance();

		int tercetoPosicion = instance.getTamanioListaTercetos();

		Terceto terceto = new Terceto("/", val_peek(2).sval, val_peek(0).sval);

		instance.agregarTerceto(terceto);

		yyval.sval = "[" + tercetoPosicion + "]";
		
	}
break;
case 219:
//#line 535 ".\gramatica.y"
{
		yyval.sval = val_peek(0).sval;
	}
break;
case 220:
//#line 541 ".\gramatica.y"
{
		yyval.sval = val_peek(0).sval;
	}
break;
case 221:
//#line 544 ".\gramatica.y"
{
		yyval.sval = val_peek(0).sval;
	}
break;
case 229:
//#line 566 ".\gramatica.y"
{ 
		logger.logSuccess("[Parser] Sentencia out detectada"); 
		GeneracionCodigoIntermedio instance = GeneracionCodigoIntermedio.getInstance();

		Terceto out = new Terceto("out", val_peek(2).sval, "-");

		instance.agregarTerceto(out);
	}
break;
case 230:
//#line 574 ".\gramatica.y"
{ 
		logger.logSuccess("[Parser] Sentencia out detectada"); 
		GeneracionCodigoIntermedio instance = GeneracionCodigoIntermedio.getInstance();

		Terceto out = new Terceto("out", val_peek(2).sval, "-");

		instance.agregarTerceto(out);
	}
break;
case 231:
//#line 582 ".\gramatica.y"
{ logger.logError("[Parser] Se esperaba una cadena o identificador en la sentencia out"); }
break;
case 232:
//#line 583 ".\gramatica.y"
{ logger.logError("[Parser] Se esperaba un ( en la sentencia out"); }
break;
case 233:
//#line 584 ".\gramatica.y"
{ logger.logError("[Parser] Se esperaba un ) en la sentencia out"); }
break;
case 234:
//#line 585 ".\gramatica.y"
{ logger.logError("[Parser] Se esperaba un ( en la sentencia out"); }
break;
case 235:
//#line 586 ".\gramatica.y"
{ logger.logError("[Parser] Se esperaba un ) en la sentencia out"); }
break;
case 236:
//#line 587 ".\gramatica.y"
{ logger.logError("[Parser] Se espera un ; al final de la sentencia out"); }
break;
case 237:
//#line 588 ".\gramatica.y"
{ logger.logError("[Parser] Se espera un ; al final de la sentencia out"); }
break;
case 239:
//#line 593 ".\gramatica.y"
{ constanteConSigno(val_peek(0).sval); }
break;
//#line 2032 "Parser.java"
//########## END OF USER-SUPPLIED ACTIONS ##########
    }//switch
    //#### Now let's reduce... ####
    if (yydebug) debug("reduce");
    state_drop(yym);             //we just reduced yylen states
    yystate = state_peek(0);     //get new state
    val_drop(yym);               //corresponding value drop
    yym = yylhs[yyn];            //select next TERMINAL(on lhs)
    if (yystate == 0 && yym == 0)//done? 'rest' state and at first TERMINAL
      {
      if (yydebug) debug("After reduction, shifting from state 0 to state "+YYFINAL+"");
      yystate = YYFINAL;         //explicitly say we're done
      state_push(YYFINAL);       //and save it
      val_push(yyval);           //also save the semantic value of parsing
      if (yychar < 0)            //we want another character?
        {
        yychar = yylex();        //get next character
        if (yychar<0) yychar=0;  //clean, if necessary
        if (yydebug)
          yylexdebug(yystate,yychar);
        }
      if (yychar == 0)          //Good exit (if lex returns 0 ;-)
         break;                 //quit the loop--all DONE
      }//if yystate
    else                        //else not done yet
      {                         //get next state and push, for next yydefred[]
      yyn = yygindex[yym];      //find out where to go
      if ((yyn != 0) && (yyn += yystate) >= 0 &&
            yyn <= YYTABLESIZE && yycheck[yyn] == yystate)
        yystate = yytable[yyn]; //get new state
      else
        yystate = yydgoto[yym]; //else go to new defred
      if (yydebug) debug("after reduction, shifting from state "+state_peek(0)+" to state "+yystate+"");
      state_push(yystate);     //going again, so push state & val...
      val_push(yyval);         //for next action
      }
    }//main loop
  return 0;//yyaccept!!
}
//## end of method parse() ######################################



//## run() --- for Thread #######################################
/**
 * A default run method, used for operating this parser
 * object in the background.  It is intended for extending Thread
 * or implementing Runnable.  Turn off with -Jnorun .
 */
public void run()
{
  yyparse();
}
//## end of method run() ########################################



//## Constructors ###############################################
/**
 * Default constructor.  Turn off with -Jnoconstruct .

 */
public Parser()
{
  //nothing to do
}


/**
 * Create a parser, setting the debug to true or false.
 * @param debugMe true for debugging, false for no debug.
 */
public Parser(boolean debugMe)
{
  yydebug=debugMe;
}
//###############################################################



}
//################### END OF CLASS ##############################
