//### This file created by BYACC 1.8(/Java extension  1.15)
//### Java capabilities added 7 Jan 97, Bob Jamison
//### Updated : 27 Nov 97  -- Bob Jamison, Joe Nieten
//###           01 Jan 98  -- Bob Jamison -- fixed generic semantic constructor
//###           01 Jun 99  -- Bob Jamison -- added Runnable support
//###           06 Aug 00  -- Bob Jamison -- made state variables class-global
//###           03 Jan 01  -- Bob Jamison -- improved flags, tracing
//###           16 May 01  -- Bob Jamison -- added custom stack sizing
//###           04 Mar 02  -- Yuval Oren  -- improved java performance, added options
//###           14 Mar 02  -- Tomas Hurka -- -d support, static initializer workaround
//### Please send bug reports to tom@hukatronic.cz
//### static char yysccsid[] = "@(#)yaccpar	1.8 (Berkeley) 01/20/90";



package compilador;



//#line 2 "./src/compilador/gramatica.y"
import java.io.File;
//#line 19 "Parser.java"




public class Parser
{

boolean yydebug;        //do I want debug output?
int yynerrs;            //number of errors so far
int yyerrflag;          //was there an error?
int yychar;             //the current working character

//########## MESSAGES ##########
//###############################################################
// method: debug
//###############################################################
void debug(String msg)
{
  if (yydebug)
    System.out.println(msg);
}

//########## STATE STACK ##########
final static int YYSTACKSIZE = 500;  //maximum stack size
int statestk[] = new int[YYSTACKSIZE]; //state stack
int stateptr;
int stateptrmax;                     //highest index of stackptr
int statemax;                        //state when highest index reached
//###############################################################
// methods: state stack push,pop,drop,peek
//###############################################################
final void state_push(int state)
{
  try {
		stateptr++;
		statestk[stateptr]=state;
	 }
	 catch (ArrayIndexOutOfBoundsException e) {
     int oldsize = statestk.length;
     int newsize = oldsize * 2;
     int[] newstack = new int[newsize];
     System.arraycopy(statestk,0,newstack,0,oldsize);
     statestk = newstack;
     statestk[stateptr]=state;
  }
}
final int state_pop()
{
  return statestk[stateptr--];
}
final void state_drop(int cnt)
{
  stateptr -= cnt; 
}
final int state_peek(int relative)
{
  return statestk[stateptr-relative];
}
//###############################################################
// method: init_stacks : allocate and prepare stacks
//###############################################################
final boolean init_stacks()
{
  stateptr = -1;
  val_init();
  return true;
}
//###############################################################
// method: dump_stacks : show n levels of the stacks
//###############################################################
void dump_stacks(int count)
{
int i;
  System.out.println("=index==state====value=     s:"+stateptr+"  v:"+valptr);
  for (i=0;i<count;i++)
    System.out.println(" "+i+"    "+statestk[i]+"      "+valstk[i]);
  System.out.println("======================");
}


//########## SEMANTIC VALUES ##########
//public class ParserVal is defined in ParserVal.java


String   yytext;//user variable to return contextual strings
ParserVal yyval; //used to return semantic vals from action routines
ParserVal yylval;//the 'lval' (result) I got from yylex()
ParserVal valstk[];
int valptr;
//###############################################################
// methods: value stack push,pop,drop,peek.
//###############################################################
void val_init()
{
  valstk=new ParserVal[YYSTACKSIZE];
  yyval=new ParserVal();
  yylval=new ParserVal();
  valptr=-1;
}
void val_push(ParserVal val)
{
  if (valptr>=YYSTACKSIZE)
    return;
  valstk[++valptr]=val;
}
ParserVal val_pop()
{
  if (valptr<0)
    return new ParserVal();
  return valstk[valptr--];
}
void val_drop(int cnt)
{
int ptr;
  ptr=valptr-cnt;
  if (ptr<0)
    return;
  valptr = ptr;
}
ParserVal val_peek(int relative)
{
int ptr;
  ptr=valptr-relative;
  if (ptr<0)
    return new ParserVal();
  return valstk[ptr];
}
final ParserVal dup_yyval(ParserVal val)
{
  ParserVal dup = new ParserVal();
  dup.ival = val.ival;
  dup.dval = val.dval;
  dup.sval = val.sval;
  dup.obj = val.obj;
  return dup;
}
//#### end semantic value section ####
public final static short ID=257;
public final static short CTE=258;
public final static short CADENA=259;
public final static short IF=260;
public final static short ELSE=261;
public final static short ENDIF=262;
public final static short PRINT=263;
public final static short VOID=264;
public final static short RETURN=265;
public final static short COMP_MAYOR_IGUAL=266;
public final static short COMP_MENOR_IGUAL=267;
public final static short COMP_IGUAL=268;
public final static short COMP_DISTINTO=269;
public final static short CLASS=270;
public final static short WHILE=271;
public final static short DO=272;
public final static short INTERFACE=273;
public final static short IMPLEMENT=274;
public final static short INT=275;
public final static short ULONG=276;
public final static short FLOAT=277;
public final static short OPERADOR_MENOS=278;
public final static short YYERRCODE=256;
final static short yylhs[] = {                           -1,
    0,    0,    0,    0,    0,    1,    1,    2,    2,    2,
    4,    4,    4,    4,    4,    4,   11,   11,   12,   12,
   13,   13,   13,   13,   13,   10,   10,    9,    9,    9,
    9,    9,    9,    9,    9,    9,    9,    9,   15,   19,
   15,   15,   15,   15,   15,   15,   15,   15,   15,    8,
    8,    8,    8,    8,    8,    8,    8,    8,   14,   14,
   14,   24,   14,   14,   14,   14,   14,   20,   20,   20,
   20,   20,   20,   16,   16,   16,   16,   16,   16,   26,
   27,   21,   21,   21,   21,   21,   21,   22,   22,   22,
   22,   22,   22,   22,   22,   22,   22,   22,   18,   18,
   18,   18,   18,   18,   18,   18,   18,   18,   18,   23,
   23,   23,   23,   23,   23,   23,   23,   23,   23,   23,
   29,   29,   30,   30,   25,   25,   25,   25,   28,   28,
   28,   28,    7,    7,    7,    7,    7,    7,    7,    6,
    6,    6,    6,    6,    6,   34,   34,    5,    5,    5,
   32,   32,    3,    3,    3,    3,   35,   35,   35,   41,
   41,   38,   38,   42,   42,   43,   43,   45,   45,   45,
   45,   45,   37,   46,   46,   46,   46,   46,   46,   47,
   47,   36,   48,   48,   48,   48,   48,   50,   50,   44,
   44,   44,   44,   44,   44,   44,   44,   49,   49,   49,
   49,   49,   49,   49,   49,   49,   49,   49,   49,   53,
   53,   54,   54,   54,   52,   52,   52,   51,   40,   40,
   39,   39,   39,   39,   17,   17,   17,   17,   55,   55,
   55,   55,   55,   55,   33,   33,   33,   56,   56,   56,
   57,   57,   57,   57,   31,   31,
};
final static short yylen[] = {                            2,
    3,    2,    2,    2,    0,    1,    2,    1,    1,    2,
    1,    1,    1,    1,    1,    1,    1,    2,    1,    1,
    1,    1,    1,    1,    1,    2,    1,    7,    6,    6,
    6,    6,    3,    4,    2,    5,    4,    3,    7,    0,
   13,    6,    6,    3,    4,    2,    5,    4,    3,    9,
    7,    8,    6,    8,    6,    8,    8,    6,    9,    7,
    8,    0,   15,    6,    8,    8,    6,    1,    3,    2,
    2,    2,    1,    3,    4,    3,    3,    2,    1,    1,
    1,    1,    4,    3,    3,    2,    1,    1,    1,    1,
    3,    4,    5,    2,    3,    2,    3,    2,    3,    1,
    1,    4,    5,    6,    3,    4,    3,    4,    2,    1,
    1,    1,    3,    4,    5,    2,    3,    2,    3,    2,
    1,    2,    1,    1,    1,    2,    1,    2,    1,    2,
    1,    2,    3,    2,    2,    3,    2,    3,    2,    5,
    4,    7,    4,    3,    6,    1,    3,    4,    3,    3,
    1,    3,    1,    1,    1,    1,    3,    2,    2,    2,
    1,    4,    2,    1,    2,    2,    1,    3,    2,    1,
    2,    2,    4,    2,    4,    1,    3,    3,    2,    1,
    2,    2,    4,    3,    6,    5,    2,    2,    1,    5,
    4,    7,    6,    4,    3,    4,    3,    4,    3,    5,
    4,    3,    2,    3,    2,    4,    3,    2,    1,    1,
    2,    1,    1,    1,    1,    3,    2,    2,    1,    3,
    1,    1,    1,    1,    3,    2,    2,    3,    1,    1,
    1,    1,    1,    1,    3,    3,    1,    3,    3,    1,
    1,    2,    1,    3,    1,    2,
};
final static short yydefred[] = {                         0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,  221,
  222,  223,    0,    0,    0,    6,    8,    9,   11,   12,
   13,   14,   15,   16,    0,  153,  154,  155,  156,    0,
    0,    0,    0,    0,   10,    0,    0,  245,    0,    0,
  135,    0,  188,   26,    0,    0,    0,    0,   35,    0,
   79,   80,    0,    0,  160,    4,    0,    2,    7,    0,
    0,    0,  219,  159,    0,    0,  163,    0,    0,    0,
    0,  209,   19,   21,   22,   23,    0,    0,   17,   20,
   24,   25,  182,    0,  187,    0,  229,  230,  231,  232,
    0,    0,  233,  234,    0,  243,    0,    0,    0,  240,
  136,  133,  246,  138,    0,  177,   33,    0,  151,   78,
    0,    0,    0,    0,    0,  127,  125,    0,    1,    0,
    0,  150,    0,  152,  157,    0,    0,    0,  164,    0,
    0,    0,    0,  180,    0,    0,    0,    0,   46,    0,
  101,  100,   81,    0,    0,  203,    0,    0,  205,  212,
  213,  214,    0,  210,  208,    0,   18,  224,  184,    0,
    0,  242,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,  175,    0,   74,    0,
   37,    0,   34,    0,    0,   77,  128,  126,  141,    0,
    0,  148,  220,    0,    0,  162,  165,  166,  172,  171,
    0,  173,  181,    0,    0,   44,  109,    0,    0,    0,
    0,    0,  131,  129,    0,  199,    0,  202,    0,  207,
  211,  204,    0,  218,    0,  183,  215,    0,  244,   72,
    0,    0,    0,   71,    0,    0,    0,    0,    0,    0,
    0,  238,  239,    0,   75,   36,    0,    0,    0,    0,
    0,  140,    0,  197,    0,  195,    0,  168,    0,    0,
   89,    0,    0,    0,    0,   99,    0,   48,    0,   45,
    0,    0,  105,  132,    0,  130,  201,  198,    0,  206,
    0,    0,  186,  217,   69,    0,   87,    0,    0,   55,
    0,   58,    0,    0,   30,   31,    0,   32,    0,    0,
  191,    0,  196,  194,   98,    0,    0,   94,    0,    0,
    0,    0,  102,    0,   47,    0,    0,    0,  106,  200,
  185,  216,   86,    0,    0,    0,    0,    0,    0,   51,
   28,    0,  142,    0,  190,    0,   91,    0,   64,   95,
    0,    0,  111,    0,    0,    0,   67,    0,    0,  103,
  123,  124,    0,  121,   42,    0,   43,    0,   85,   54,
   56,   57,    0,    0,  193,   92,    0,  120,    0,    0,
  116,    0,    0,    0,   60,    0,  104,  122,   39,    0,
   83,   50,  192,   93,  113,    0,   65,  117,   66,    0,
    0,    0,  114,    0,   59,    0,    0,  115,    0,    0,
    0,    0,    0,    0,    0,   41,    0,   63,
};
final static short yydgoto[] = {                         14,
   15,   16,  150,  188,   74,   75,   76,   22,   23,   24,
   78,   79,  152,   81,   82,   53,   95,  144,  380,  167,
  289,  263,  345,  376,  168,   54,  145,  264,  353,  354,
   96,   25,   97,  251,   26,   27,   28,   29,   30,   65,
   31,  128,  129,  130,  134,   32,  135,   33,   83,   34,
  227,  228,  153,  154,   98,   99,  100,
};
final static short yysindex[] = {                      1122,
   30,    0,    4,  251, -203,   43, -205,  803, -143,    0,
    0,    0, 1477,    0, 1499,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    3,    0,    0,    0,    0,  -38,
    8,   16, 1158,   41,    0,  420,  108,    0,  133, -115,
    0,  156,    0,    0,  -70,  -39,   66,  382,    0, 1262,
    0,    0,  -40,  725,    0,    0, 1521,    0,    0,   55,
  -32,  -12,    0,    0,   40,  -24,    0, -148,  207, 1041,
 1585,    0,    0,    0,    0,    0, 1607, 1632,    0,    0,
    0,    0,    0,  100,    0,  -22,    0,    0,    0,    0,
   21, 1228,    0,    0,  209,    0,  484,   21,   31,    0,
    0,    0,    0,    0,    7,    0,    0, 1144,    0,    0,
 1654,  214,  228,   67, 1144,    0,    0, 1675,    0,  233,
  147,    0,  123,    0,    0,   15,  -36, -108,    0,  238,
  239,  247,   36,    0,  229, 1280,  256,  263,    0, 1286,
    0,    0,    0,  -33, 2231,    0, 1697, 1718,    0,    0,
    0,    0, 1740,    0,    0, 1761,    0,    0,    0,   57,
   45,    0,   97, 1785,    0,    0, -137, 1808,  781,   21,
   21,   21,   21,  139,   21,   21,    0,  274,    0, 1830,
    0,  273,    0, 1293,  278,    0,    0,    0,    0,   21,
  280,    0,    0,   10,  165,    0,    0,    0,    0,    0,
   54,    0,    0, 1323,  287,    0,    0, 2137,  290,  289,
   90, 1144,    0,    0, 1851,    0, 1873,    0, 1894,    0,
    0,    0, 1915,    0, -200,    0,    0,   91,    0,    0,
 1938, 1344,  294,    0, 1344,  297, -101,   31,   31,  139,
  139,    0,    0,  302,    0,    0,  306,  310,  309,  139,
  107,    0,  220,    0,  317,    0,  319,    0, 2160,    0,
    0,    0,   26, 1961, 1100,    0, 1984,    0,  321,    0,
 1309,  320,    0,    0,  246,    0,    0,    0, 2006,    0,
  106, -200,    0,    0,    0,  499,    0,  725,  112,    0,
  116,    0, 1185,  335,    0,    0,  342,    0,   21,  347,
    0,  142,    0,    0,    0, 2027,  349,    0,  271, 1366,
  353,  -89,    0,  721,    0,  357,  361,  359,    0,    0,
    0,    0,    0,  725, 2048,  362,  365,  366,  143,    0,
    0,  139,    0, -200,    0,  157,    0, 2139,    0,    0,
 2181,    0,    0,    0,  154, 2069,    0, 1206,  371,    0,
    0,    0, 2202,    0,    0,  377,    0, 2091,    0,    0,
    0,    0,  381,  171,    0,    0, 2203,    0, 2114,  383,
    0,  305,  392,  175,    0,  178,    0,    0,    0,  172,
    0,    0,    0,    0,    0, 2213,    0,    0,    0,  399,
  410,  181,    0, 2224,    0,  412,  414,    0, 1323, 1144,
  194,  416, 1366,  415,  196,    0,  418,    0,
};
final static short yyrindex[] = {                       467,
    0,  -15,    0,    0,  173,  445,  345,    0,   99,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,  472,    0,  613,    0,
    0,  636,    0,    0,  346,  358,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,  470,    0,    0,    0,
    0,    0,    0,    0,  671,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,  513,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,  538,    0,
    0,    0,    0,    0,  368,    0,    0,    0,    0,    0,
    0,  699,    0,    0,    0,    0,    0,    0,    0,  757,
    0,    0,  862,    0,    0,    0,    0,    0,    0, -107,
   57,  286,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0, 1387, 1408,    0,    0,    0,    0,
    0,    0,  443,  448,    0,    0,    0,    0,    0,  -20,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
  910,    0,    0,    0,    0,    0,    0,    0,    0,    0,
  417,    0,    0,    0,    0,    0,    0,    0,  832,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
  -34,    0,    0,    0,    0,    0,    0,  565,  588,  457,
  458,    0,    0,    0,    0,    0,    0,    0,    0,  153,
    0,    0,    0,    0,    0,    0,    0,    0,    0, 1431,
    0, 1454,    0,    0,    0,    0,  -18,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,  240,    0,    0,
    0,    0,    0,  937,    0,    0,  965,    0,    0,  991,
    0,    0,    0,    0,    0,   44,    0,    0,    0,    0,
    0,    0,    0,  -17,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,  158,    0,    0,    0,    0,    0,   48,    0,    0,
    0, 1542,    0, 1564,    0,    0,    0,    0,  241,    0,
    0,    0,    0,    0,    0,  231,    0,  252,    0,    0,
    0,    0, 1015,    0,    0,    0,    0,    0,  253,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,  254,    0,    0,    0,  884,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,
};
final static short yygindex[] = {                         0,
  504,   23,    1,   11,  163,  244,  372,    0,    0,  -30,
  447,  -63,  125,    0,    0,    0,  -48,    0,    0,  356,
 -199, -244, -313,    0,  -49,  474,  393, -100, -285, -311,
  535,    0,  -28,    0,    0,  -31,    0,    0,  339,  426,
    0,    0,  419,    0,  413,    0,    0,    0,    0,    0,
  -74, -197, -117, -126,  452,   59,  169,
};
final static int YYTABLESIZE=2508;
static short yytable[];
static { yytable();}
static void yytable(){
yytable = new short[]{                        115,
   17,  113,   77,  195,  118,   64,  212,   91,   51,  161,
   18,  122,   40,   17,  157,   17,  196,  167,   52,   76,
  312,  107,  108,   18,  151,   18,  221,  281,  224,  217,
  151,  121,  123,   73,  374,  291,  132,   59,  223,  142,
  147,  378,   60,   36,  215,  151,  151,  156,   62,  253,
  254,   45,  367,   43,  116,  378,  158,   17,   52,  178,
   91,  180,  163,   61,  117,   40,  185,   18,   46,  174,
  141,   73,  175,   35,   10,   11,   12,  176,   73,   59,
   84,   85,  378,  125,  157,  226,   44,  205,  225,  405,
  221,  210,  165,  329,   91,  120,  221,  258,  126,   40,
  394,  279,  166,  132,  336,  108,  184,  267,  131,  107,
  183,  116,  126,   55,  231,    5,  151,  219,  187,  255,
  257,  117,  151,  232,  233,  151,   10,   11,   12,  271,
   66,  283,   67,  270,  282,  248,  364,  229,   68,  170,
  159,  171,  103,  240,  241,  213,  321,  300,   73,  282,
  299,  101,  221,  284,  401,  127,  167,   80,  306,  293,
  294,  250,   19,  272,  116,  170,  192,  171,  187,  165,
   19,  348,  349,  261,  117,   19,  102,   19,  302,  166,
  187,  170,  335,  171,  275,  334,  151,  191,  151,  170,
  190,  171,  151,  146,  143,   80,  146,  365,  147,  104,
  282,  147,   80,  105,  260,  256,  284,  322,  213,  346,
   19,  383,  189,  189,  282,  274,   19,  106,   63,   19,
  194,  161,  317,  161,   86,   38,   70,   70,  238,  239,
  114,  187,  287,  309,  261,  287,  314,  211,  325,  127,
  369,  224,  288,   20,  124,  288,  136,  346,  151,  169,
   76,   20,  107,  108,   19,  162,   20,  181,   20,  213,
  301,  284,  143,  177,  274,  260,  158,  274,  182,  214,
  332,  193,   80,   19,  358,  338,  189,   86,   38,  343,
   19,  198,  199,  351,   10,   11,   12,  307,  116,  284,
  200,   20,   63,  287,   41,   40,  324,   20,  117,  206,
   20,  158,  346,  288,   96,   96,  274,  351,   97,   97,
  342,   86,   38,  224,  244,  372,  246,  343,  249,   10,
   11,   12,  351,  252,  116,  187,   19,  265,  262,  269,
   19,   19,  214,  268,  117,   20,  351,  290,  386,  276,
  292,  213,   19,  242,  243,  295,  274,  158,  342,  296,
  297,  402,  298,  202,   20,  351,  158,  303,  187,  304,
  318,   20,  158,  351,  315,   10,   11,   12,  261,  274,
  319,   21,  343,  326,   10,   11,   12,  327,  330,   21,
   10,   11,   12,  214,   21,  331,   21,  207,  276,  262,
  333,  276,  339,   19,   19,  340,  347,   19,  158,  260,
  355,  356,  357,  342,  363,  360,  133,   20,  361,  362,
  170,   20,   20,  158,  375,  370,   10,   11,   12,   21,
  379,  158,  160,   20,  382,   21,  387,  158,   21,  388,
  276,   10,   11,   12,  344,  389,  390,  391,  352,   10,
   11,   12,  395,  392,   27,   10,   11,   12,   19,  396,
   19,  397,  399,  400,  403,   19,  404,  407,  406,   91,
   92,  408,  352,   21,   40,  214,    5,  176,  174,    3,
  276,  137,  344,  133,   20,   20,  158,  352,   20,   94,
  179,   93,   21,  226,   27,  131,   19,   19,  227,   21,
  178,  352,    5,  276,   10,   11,   12,  228,  225,  160,
   62,   82,   40,   10,   11,   12,  110,   37,   38,   39,
  352,  137,  241,   84,  118,  119,   57,  148,  352,  109,
   19,  111,   69,  262,  237,    4,  170,  344,  171,   20,
  208,   20,  160,  160,   70,   21,   20,  237,   42,   21,
   21,  169,  170,   94,  172,   93,  197,  203,  173,  170,
    0,   21,  241,  241,  241,  241,  241,  241,  201,  241,
  170,  170,  170,  160,  235,    0,  160,   20,   20,   27,
    0,    0,  241,  241,  241,    0,    0,  237,  237,    0,
  237,  237,  237,    0,    0,    0,    0,  236,    0,    0,
    0,  160,    0,    0,    0,    0,  137,  237,  237,  237,
    0,   20,   21,   21,  235,  235,   21,  235,  235,  235,
    0,    0,  134,    0,    0,    0,    0,    0,    0,  160,
  160,    0,    0,  323,  235,  235,  235,  236,  236,    0,
  236,  236,  236,    0,    0,  139,    0,  241,  109,    0,
  160,    3,    0,    0,    4,    0,    6,  236,  236,  236,
    0,    0,  134,    8,    0,    0,    0,   21,    0,   21,
    0,    0,  237,    0,   21,    0,    0,    0,    0,    0,
  158,    0,  160,  169,  160,  139,   86,   38,    0,    0,
  169,    0,    0,    0,    0,   87,   88,   89,   90,  235,
    0,  169,  169,  169,    0,   21,   21,    0,   38,    0,
   27,   27,  160,    0,   27,   27,   27,   27,   27,   27,
  158,    0,  236,    0,   27,   27,   27,   27,    0,   27,
   27,   27,    0,    0,    0,    0,    0,  137,  137,   21,
    0,  137,  137,  137,  137,  137,  137,  134,   38,    0,
    0,  137,  137,  137,  137,    0,  137,  137,  137,   87,
   88,   89,   90,    0,    0,  109,  144,    0,    3,    0,
  139,    4,    0,    6,    0,    0,    0,    0,  241,  241,
    8,    0,  241,  241,  241,  241,  241,  241,  241,  241,
  241,  241,  241,  241,  241,  241,    0,  241,  241,  241,
    0,    0,    0,  237,  237,  158,  144,  237,  237,  237,
  237,  237,  237,  237,  237,  237,  237,  237,  237,  237,
  237,    0,  237,  237,  237,    0,    0,    0,    0,    0,
  235,  235,    0,   38,  235,  235,  235,  235,  235,  235,
  235,  235,  235,  235,  235,  235,  235,  235,    0,  235,
  235,  235,   50,  236,  236,  350,   49,  236,  236,  236,
  236,  236,  236,  236,  236,  236,  236,  236,  236,  236,
  236,  149,  236,  236,  236,    0,    0,    0,  134,  134,
    0,   49,  134,  134,  134,  134,  134,  134,    0,    0,
    0,  144,  134,  134,  134,  134,    0,  134,  134,  134,
    0,  139,  139,    0,    0,  139,  139,  139,  139,  139,
  139,  149,    0,  164,    0,  139,  139,  139,  139,  143,
  139,  139,  139,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,   61,    0,   48,  158,  158,    0,    0,
  158,  158,  158,  158,  158,  158,   53,    0,    0,    0,
  158,  158,  158,  158,    0,  158,  158,  158,    0,  143,
    0,    0,    0,    0,   38,   38,   49,    0,   38,   38,
   38,   38,   38,   38,   29,    0,    0,    0,   38,   38,
   38,   38,    0,   38,   38,   38,   53,  109,    0,    0,
   69,    2,    0,    4,    3,    6,  149,    4,    5,    6,
  145,    0,   70,    0,    7,    0,    8,    9,    0,   10,
   11,   12,    0,    0,   29,    0,    0,    0,   61,    0,
    0,    0,  144,  144,   52,    0,  144,  144,  144,  144,
  144,  144,    0,    0,    0,    0,  144,  144,  144,  144,
  145,  144,  144,  144,  143,    0,    0,    2,    0,    0,
    3,  235,  236,    4,    5,    6,    0,    0,    0,    0,
    7,    0,    8,    9,   52,   10,   11,   12,    0,    2,
    0,   53,    3,    0,    0,    4,    5,    6,    0,    0,
    0,    0,    7,   47,    8,    9,    0,   10,   11,   12,
  140,    0,    0,    0,  139,    0,    0,    0,   49,   29,
    0,   49,   49,   49,   49,   49,   49,    0,    0,    0,
    0,   49,   49,   49,   49,    0,   49,   49,   49,    0,
    0,    0,    0,    0,    0,  145,    0,  149,  149,    0,
    0,  149,  149,  149,  149,  149,  149,    0,    0,    0,
    0,  149,  149,  149,  149,    0,  149,  149,  149,   52,
   61,    0,    0,   61,   61,   61,   61,   61,   61,    0,
    0,    0,    0,   61,   61,   61,   61,    0,   61,   61,
   61,    0,    0,  138,    0,  143,  143,    0,    0,  143,
  143,  143,  143,  143,  143,    0,    0,    0,    0,  143,
  143,  143,  143,   91,  143,  143,  143,    0,   40,    0,
    0,    0,   53,   53,    0,    0,   53,   53,   53,   53,
   53,   53,    0,   94,    0,   93,   53,   53,   53,   53,
    0,   53,   53,   53,    0,    0,    0,    0,    0,    0,
   29,   29,  259,    0,   29,   29,   29,   29,   29,   29,
    0,    0,    0,    0,   29,   29,   29,   29,    0,   29,
   29,   29,    0,    0,   13,    0,  145,  145,    0,    0,
  145,  145,  145,  145,  145,  145,    0,    0,    0,    0,
  145,  145,  145,  145,    0,  145,  145,  145,    0,    0,
   52,   52,    0,    0,   52,   52,   52,   52,   52,   52,
   71,    0,   72,    0,   52,   52,   52,   52,    0,   52,
   52,   52,    0,    0,    0,    0,    0,    2,    0,    0,
   69,   91,  112,    4,    5,    6,   40,  286,    0,    0,
    7,  137,   70,    9,    0,   10,   11,   12,    0,   91,
  204,   94,    0,   93,   40,   91,  209,    0,  341,    0,
   40,    0,   91,  247,    0,    0,    0,   40,    0,   94,
    0,   93,    0,    0,    0,   94,    0,   93,   91,  316,
  164,    0,   94,   40,   93,    0,    2,    0,    0,   69,
  310,  311,    4,    5,    6,    0,    0,    0,   94,    7,
   93,   70,    9,    0,   10,   11,   12,    1,    2,    0,
    0,    3,    0,    0,    4,    5,    6,    0,    0,    0,
    0,    7,    0,    8,    9,    0,   10,   11,   12,    0,
   86,   38,    0,    0,    0,    0,    0,    0,    0,   87,
   88,   89,   90,    0,    2,    0,    0,   69,    0,    0,
    4,    5,    6,    0,    0,    0,    0,    7,    0,   70,
    9,    0,   10,   11,   12,    0,    0,    0,    0,    0,
    0,    2,    0,    0,    3,  259,  328,    4,    5,    6,
    0,    0,    0,    0,    7,    0,    8,    9,    0,   10,
   11,   12,    2,    0,    0,   69,  286,  373,    4,    5,
    6,    0,    0,    0,    0,    7,    0,   70,    9,    0,
   10,   11,   12,    0,    2,    0,    0,    3,  341,    0,
    4,    5,    6,    0,    0,    0,    0,    7,    0,    8,
    9,    0,   10,   11,   12,    0,    0,    0,    0,    0,
    0,  127,    0,    0,    0,    0,    0,    0,   86,   38,
    0,    0,    0,    0,    0,    0,    0,   87,   88,   89,
   90,    0,  125,    0,    0,    0,   86,   38,    0,    0,
    0,    0,   86,   38,    0,   87,   88,   89,   90,   86,
   38,   87,   88,   89,   90,  131,    0,    0,   87,   88,
   89,   90,    0,    0,    0,   86,   38,    0,    0,    0,
    0,    0,    0,    0,   87,   88,   89,   90,  129,    2,
    0,    0,   69,    0,    0,    4,    5,    6,    0,    0,
    0,    0,    7,    0,   70,    9,    0,   10,   11,   12,
    2,   56,    0,    3,    0,    0,    4,    5,    6,    0,
    0,    0,    0,    7,    0,    8,    9,    0,   10,   11,
   12,    0,    2,   58,    0,   69,    0,    0,    4,    5,
    6,    0,    0,    0,    0,    7,    0,   70,    9,    0,
   10,   11,   12,  127,    0,  119,  127,   73,   73,  127,
  127,  127,    0,    0,    0,    0,  127,    0,  127,  127,
    0,  127,  127,  127,  125,    0,  131,  125,   68,   68,
  125,  125,  125,    0,    0,    0,    0,  125,    0,  125,
  125,    0,  125,  125,  125,    0,    0,  131,  129,    0,
  131,   90,   90,  131,  131,  131,    0,    0,    0,    0,
  131,    0,  131,  131,    0,  131,  131,  131,    0,  146,
  129,    0,    0,  129,   88,   88,  129,  129,  129,    0,
    0,    0,    0,  129,    0,  129,  129,    0,  129,  129,
  129,  149,    1,    2,    0,    0,    3,    0,    0,    4,
    5,    6,    0,    0,    0,    0,    7,    0,    8,    9,
    0,   10,   11,   12,    1,    2,  155,    0,    3,    0,
    0,    4,    5,    6,    0,    0,    0,    0,    7,    0,
    8,    9,    0,   10,   11,   12,    1,    2,  179,    0,
    3,    0,    0,    4,    5,    6,    0,    0,    0,    0,
    7,    0,    8,    9,    0,   10,   11,   12,  131,  186,
    0,  131,    0,  112,  131,  131,  131,    0,    0,    0,
    0,  131,    0,  131,  131,    0,  131,  131,  131,    0,
  129,  216,    0,  129,    0,  110,  129,  129,  129,    0,
    0,    0,    0,  129,    0,  129,  129,    0,  129,  129,
  129,    2,  218,    0,   69,    0,    0,    4,    5,    6,
    0,    0,    0,    0,    7,    0,   70,    9,    0,   10,
   11,   12,    0,    2,  220,    0,   69,    0,    0,    4,
    5,    6,    0,    0,    0,    0,    7,    0,   70,    9,
    0,   10,   11,   12,    0,  222,    0,    0,    2,    0,
    0,   69,    0,    0,    4,    5,    6,    0,    0,    0,
    0,    7,    0,   70,    9,    0,   10,   11,   12,  230,
    2,    0,    0,    3,    0,    0,    4,    5,    6,    0,
    0,    0,    0,    7,    0,    8,    9,    0,   10,   11,
   12,    2,  234,    0,    3,    0,    0,    4,    5,    6,
    0,    0,    0,    0,    7,    0,    8,    9,    0,   10,
   11,   12,    0,    2,  245,    0,   69,    0,    0,    4,
    5,    6,    0,    0,    0,    0,    7,    0,   70,    9,
    0,   10,   11,   12,    2,  273,    0,   69,    0,    0,
    4,    5,    6,    0,    0,    0,    0,    7,    0,   70,
    9,    0,   10,   11,   12,    0,    2,  277,    0,   69,
    0,    0,    4,    5,    6,    0,    0,    0,    0,    7,
    0,   70,    9,    0,   10,   11,   12,    2,  278,    0,
   69,    0,    0,    4,    5,    6,    0,    0,    0,    0,
    7,    0,   70,    9,    0,   10,   11,   12,    0,  280,
    0,    2,    0,    0,    3,    0,    0,    4,    5,    6,
    0,    0,    0,    0,    7,    0,    8,    9,    0,   10,
   11,   12,  285,    0,    2,    0,    0,    3,    0,    0,
    4,    5,    6,    0,    0,    0,    0,    7,    0,    8,
    9,    0,   10,   11,   12,  308,    2,    0,    0,    3,
    0,    0,    4,    5,    6,    0,    0,    0,    0,    7,
    0,    8,    9,    0,   10,   11,   12,    2,  313,    0,
   69,    0,    0,    4,    5,    6,    0,    0,    0,    0,
    7,    0,   70,    9,    0,   10,   11,   12,    0,    2,
  320,    0,   69,    0,    0,    4,    5,    6,    0,    0,
    0,    0,    7,    0,   70,    9,    0,   10,   11,   12,
    2,  337,    0,   69,    0,    0,    4,    5,    6,    0,
    0,    0,    0,    7,    0,   70,    9,    0,   10,   11,
   12,    2,  359,    0,   69,    0,    0,    4,    5,    6,
    0,    0,    0,    0,    7,    0,   70,    9,    0,   10,
   11,   12,    0,  371,    2,    0,    0,    3,    0,    0,
    4,    5,    6,    0,    0,    0,    0,    7,    0,    8,
    9,    0,   10,   11,   12,  381,    0,    2,    0,    0,
   69,    0,    0,    4,    5,    6,    0,    0,    0,    0,
    7,    0,   70,    9,    0,   10,   11,   12,  385,    0,
    2,    0,    0,   69,    0,    0,    4,    5,    6,    0,
    0,    0,    0,    7,    0,   70,    9,    0,   10,   11,
   12,  266,    2,  366,    0,   69,    0,    0,    4,    5,
    6,    0,    0,    0,    0,    7,    0,   70,    9,    0,
   10,   11,   12,    2,  305,    0,   69,    0,    0,    4,
    5,    6,    0,    0,    0,    0,    7,    0,   70,    9,
    0,   10,   11,   12,    2,  368,    0,    3,    0,    0,
    4,    5,    6,    0,    0,    0,    0,    7,    0,    8,
    9,    0,   10,   11,   12,    2,  377,  384,   69,    0,
    0,    4,    5,    6,    0,    0,    0,  393,    7,    0,
   70,    9,    0,   10,   11,   12,    0,    2,  398,    0,
    3,    0,    0,    4,    5,    6,    0,    0,    0,    0,
    7,    0,    8,    9,    0,   10,   11,   12,    0,    0,
    2,    0,    0,   69,    0,    0,    4,    5,    6,    0,
    0,    0,    0,    7,    0,   70,    9,    0,   10,   11,
   12,    0,    0,    2,    0,  109,   69,    0,   69,    4,
    5,    4,    0,    6,    0,    0,    7,    0,   70,    9,
   70,   10,   11,   12,    0,    0,    2,    0,    0,   69,
    0,    0,    4,    5,    0,    0,    0,    0,    0,    7,
    0,   70,    9,    0,   10,   11,   12,    2,    0,    0,
   69,    0,    0,    4,    5,    0,    0,    0,    0,    0,
    7,    0,   70,    9,    0,   10,   11,   12,  109,  109,
    0,   69,   69,    0,    4,    4,    6,    6,    0,  109,
    0,    0,   69,   70,   70,    4,    0,    6,    0,    0,
  109,    0,    0,   69,   70,    0,    4,    2,    6,    0,
   69,    0,    0,    4,    5,   70,    0,    0,    0,    0,
    7,    0,   70,    9,    0,   10,   11,   12,
};
}
static short yycheck[];
static { yycheck(); }
static void yycheck() {
yycheck = new short[] {                         40,
    0,   50,   33,   40,   54,   44,   40,   40,    8,   84,
    0,   44,   45,   13,   78,   15,  125,  125,    8,   40,
  265,   40,   40,   13,   40,   15,  153,  225,   44,  147,
   46,   60,   61,   33,  348,  235,   68,   15,  156,   70,
   71,  353,   40,   40,  145,   61,   77,   78,   46,   40,
   41,  257,  338,  257,   54,  367,  257,   57,   48,  108,
   40,  111,   91,   61,   54,   45,  115,   57,  274,   98,
   70,   71,   42,   44,  275,  276,  277,   47,   78,   57,
   40,   41,  394,   44,  148,   41,   44,  136,   44,  403,
  217,  140,   92,  293,   40,   41,  223,   44,   59,   45,
  386,  219,   92,  135,  302,   40,   40,  208,  257,   44,
   44,  111,   59,  257,  164,  264,  147,  148,  118,  194,
  195,  111,  153,  261,  262,  156,  275,  276,  277,   40,
  123,   41,  125,   44,   44,  184,  334,   41,  123,   43,
   41,   45,  258,  172,  173,  145,   41,   41,  148,   44,
   44,   44,  279,  228,  399,  264,  264,   33,  259,  261,
  262,  190,    0,  212,  164,   43,   44,   45,  168,  169,
    8,  261,  262,  204,  164,   13,   44,   15,  253,  169,
  180,   43,   41,   45,  215,   44,  217,   41,  219,   43,
   44,   45,  223,   41,   70,   71,   44,   41,   41,   44,
   44,   44,   78,  274,  204,   41,  281,  282,  208,  310,
   48,   41,   40,   41,   44,  215,   54,  257,  257,   57,
  257,  123,  271,  125,  257,  258,  261,  262,  170,  171,
  271,  231,  232,  264,  265,  235,  267,  271,  288,  264,
  341,  257,  232,    0,  257,  235,   40,  348,  279,   41,
  271,    8,  271,  271,   92,  278,   13,   44,   15,  259,
   41,  336,  138,  257,  264,  265,  257,  267,   41,  145,
  299,  257,  148,  111,  324,  306,   44,  257,  258,  310,
  118,   44,   44,  314,  275,  276,  277,  262,  288,  364,
   44,   48,  257,  293,   44,   45,  286,   54,  288,   44,
   57,  257,  403,  293,  261,  262,  306,  338,  261,  262,
  310,  257,  258,  257,   41,  346,   44,  348,   41,  275,
  276,  277,  353,   44,  324,  325,  164,   41,  204,   41,
  168,  169,  208,   44,  324,   92,  367,   44,  369,  215,
   44,  341,  180,  175,  176,   44,  346,  257,  348,   44,
   41,  400,   44,  125,  111,  386,  257,   41,  358,   41,
   41,  118,  257,  394,   44,  275,  276,  277,  399,  369,
  125,    0,  403,  262,  275,  276,  277,  262,   44,    8,
  275,  276,  277,  259,   13,   44,   15,  125,  264,  265,
   44,  267,   44,  231,  232,  125,   44,  235,  257,  399,
   44,   41,   44,  403,  262,   44,   68,  164,   44,   44,
  125,  168,  169,  257,   44,  262,  275,  276,  277,   48,
   44,  257,   84,  180,   44,   54,   44,  257,   57,  125,
  306,  275,  276,  277,  310,   44,  262,  260,  314,  275,
  276,  277,   44,  272,    0,  275,  276,  277,  286,   40,
  288,  271,   41,   40,  261,  293,   41,  262,   44,   40,
   41,   44,  338,   92,   45,  341,    0,  123,  123,    0,
  346,    0,  348,  135,  231,  232,  257,  353,  235,   60,
  123,   62,  111,   41,   40,  257,  324,  325,   41,  118,
  123,  367,  264,  369,  275,  276,  277,   41,   41,  161,
  260,  262,  272,  275,  276,  277,  125,  257,  258,  259,
  386,   40,    0,  262,  262,  262,   13,   71,  394,  257,
  358,   48,  260,  399,  169,  263,   43,  403,   45,  286,
  138,  288,  194,  195,  272,  164,  293,    0,    4,  168,
  169,  125,  257,   60,   61,   62,  128,  135,   97,  264,
   -1,  180,   40,   41,   42,   43,   44,   45,  133,   47,
  275,  276,  277,  225,    0,   -1,  228,  324,  325,  125,
   -1,   -1,   60,   61,   62,   -1,   -1,   40,   41,   -1,
   43,   44,   45,   -1,   -1,   -1,   -1,    0,   -1,   -1,
   -1,  253,   -1,   -1,   -1,   -1,  125,   60,   61,   62,
   -1,  358,  231,  232,   40,   41,  235,   43,   44,   45,
   -1,   -1,    0,   -1,   -1,   -1,   -1,   -1,   -1,  281,
  282,   -1,   -1,  125,   60,   61,   62,   40,   41,   -1,
   43,   44,   45,   -1,   -1,    0,   -1,  125,  257,   -1,
  302,  260,   -1,   -1,  263,   -1,  265,   60,   61,   62,
   -1,   -1,   40,  272,   -1,   -1,   -1,  286,   -1,  288,
   -1,   -1,  125,   -1,  293,   -1,   -1,   -1,   -1,   -1,
    0,   -1,  334,  257,  336,   40,  257,  258,   -1,   -1,
  264,   -1,   -1,   -1,   -1,  266,  267,  268,  269,  125,
   -1,  275,  276,  277,   -1,  324,  325,   -1,    0,   -1,
  256,  257,  364,   -1,  260,  261,  262,  263,  264,  265,
   40,   -1,  125,   -1,  270,  271,  272,  273,   -1,  275,
  276,  277,   -1,   -1,   -1,   -1,   -1,  256,  257,  358,
   -1,  260,  261,  262,  263,  264,  265,  125,   40,   -1,
   -1,  270,  271,  272,  273,   -1,  275,  276,  277,  266,
  267,  268,  269,   -1,   -1,  257,    0,   -1,  260,   -1,
  125,  263,   -1,  265,   -1,   -1,   -1,   -1,  256,  257,
  272,   -1,  260,  261,  262,  263,  264,  265,  266,  267,
  268,  269,  270,  271,  272,  273,   -1,  275,  276,  277,
   -1,   -1,   -1,  256,  257,  125,   40,  260,  261,  262,
  263,  264,  265,  266,  267,  268,  269,  270,  271,  272,
  273,   -1,  275,  276,  277,   -1,   -1,   -1,   -1,   -1,
  256,  257,   -1,  125,  260,  261,  262,  263,  264,  265,
  266,  267,  268,  269,  270,  271,  272,  273,   -1,  275,
  276,  277,   40,  256,  257,  125,   44,  260,  261,  262,
  263,  264,  265,  266,  267,  268,  269,  270,  271,  272,
  273,    0,  275,  276,  277,   -1,   -1,   -1,  256,  257,
   -1,   40,  260,  261,  262,  263,  264,  265,   -1,   -1,
   -1,  125,  270,  271,  272,  273,   -1,  275,  276,  277,
   -1,  256,  257,   -1,   -1,  260,  261,  262,  263,  264,
  265,   40,   -1,  123,   -1,  270,  271,  272,  273,    0,
  275,  276,  277,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   40,   -1,  123,  256,  257,   -1,   -1,
  260,  261,  262,  263,  264,  265,    0,   -1,   -1,   -1,
  270,  271,  272,  273,   -1,  275,  276,  277,   -1,   40,
   -1,   -1,   -1,   -1,  256,  257,  125,   -1,  260,  261,
  262,  263,  264,  265,    0,   -1,   -1,   -1,  270,  271,
  272,  273,   -1,  275,  276,  277,   40,  257,   -1,   -1,
  260,  257,   -1,  263,  260,  265,  125,  263,  264,  265,
    0,   -1,  272,   -1,  270,   -1,  272,  273,   -1,  275,
  276,  277,   -1,   -1,   40,   -1,   -1,   -1,  125,   -1,
   -1,   -1,  256,  257,    0,   -1,  260,  261,  262,  263,
  264,  265,   -1,   -1,   -1,   -1,  270,  271,  272,  273,
   40,  275,  276,  277,  125,   -1,   -1,  257,   -1,   -1,
  260,  261,  262,  263,  264,  265,   -1,   -1,   -1,   -1,
  270,   -1,  272,  273,   40,  275,  276,  277,   -1,  257,
   -1,  125,  260,   -1,   -1,  263,  264,  265,   -1,   -1,
   -1,   -1,  270,  271,  272,  273,   -1,  275,  276,  277,
   40,   -1,   -1,   -1,   44,   -1,   -1,   -1,  257,  125,
   -1,  260,  261,  262,  263,  264,  265,   -1,   -1,   -1,
   -1,  270,  271,  272,  273,   -1,  275,  276,  277,   -1,
   -1,   -1,   -1,   -1,   -1,  125,   -1,  256,  257,   -1,
   -1,  260,  261,  262,  263,  264,  265,   -1,   -1,   -1,
   -1,  270,  271,  272,  273,   -1,  275,  276,  277,  125,
  257,   -1,   -1,  260,  261,  262,  263,  264,  265,   -1,
   -1,   -1,   -1,  270,  271,  272,  273,   -1,  275,  276,
  277,   -1,   -1,  123,   -1,  256,  257,   -1,   -1,  260,
  261,  262,  263,  264,  265,   -1,   -1,   -1,   -1,  270,
  271,  272,  273,   40,  275,  276,  277,   -1,   45,   -1,
   -1,   -1,  256,  257,   -1,   -1,  260,  261,  262,  263,
  264,  265,   -1,   60,   -1,   62,  270,  271,  272,  273,
   -1,  275,  276,  277,   -1,   -1,   -1,   -1,   -1,   -1,
  256,  257,  123,   -1,  260,  261,  262,  263,  264,  265,
   -1,   -1,   -1,   -1,  270,  271,  272,  273,   -1,  275,
  276,  277,   -1,   -1,  123,   -1,  256,  257,   -1,   -1,
  260,  261,  262,  263,  264,  265,   -1,   -1,   -1,   -1,
  270,  271,  272,  273,   -1,  275,  276,  277,   -1,   -1,
  256,  257,   -1,   -1,  260,  261,  262,  263,  264,  265,
  123,   -1,  125,   -1,  270,  271,  272,  273,   -1,  275,
  276,  277,   -1,   -1,   -1,   -1,   -1,  257,   -1,   -1,
  260,   40,   41,  263,  264,  265,   45,  123,   -1,   -1,
  270,  271,  272,  273,   -1,  275,  276,  277,   -1,   40,
   41,   60,   -1,   62,   45,   40,   41,   -1,  123,   -1,
   45,   -1,   40,   41,   -1,   -1,   -1,   45,   -1,   60,
   -1,   62,   -1,   -1,   -1,   60,   -1,   62,   40,   41,
  123,   -1,   60,   45,   62,   -1,  257,   -1,   -1,  260,
  261,  262,  263,  264,  265,   -1,   -1,   -1,   60,  270,
   62,  272,  273,   -1,  275,  276,  277,  256,  257,   -1,
   -1,  260,   -1,   -1,  263,  264,  265,   -1,   -1,   -1,
   -1,  270,   -1,  272,  273,   -1,  275,  276,  277,   -1,
  257,  258,   -1,   -1,   -1,   -1,   -1,   -1,   -1,  266,
  267,  268,  269,   -1,  257,   -1,   -1,  260,   -1,   -1,
  263,  264,  265,   -1,   -1,   -1,   -1,  270,   -1,  272,
  273,   -1,  275,  276,  277,   -1,   -1,   -1,   -1,   -1,
   -1,  257,   -1,   -1,  260,  123,  262,  263,  264,  265,
   -1,   -1,   -1,   -1,  270,   -1,  272,  273,   -1,  275,
  276,  277,  257,   -1,   -1,  260,  123,  262,  263,  264,
  265,   -1,   -1,   -1,   -1,  270,   -1,  272,  273,   -1,
  275,  276,  277,   -1,  257,   -1,   -1,  260,  123,   -1,
  263,  264,  265,   -1,   -1,   -1,   -1,  270,   -1,  272,
  273,   -1,  275,  276,  277,   -1,   -1,   -1,   -1,   -1,
   -1,  125,   -1,   -1,   -1,   -1,   -1,   -1,  257,  258,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,  266,  267,  268,
  269,   -1,  125,   -1,   -1,   -1,  257,  258,   -1,   -1,
   -1,   -1,  257,  258,   -1,  266,  267,  268,  269,  257,
  258,  266,  267,  268,  269,  125,   -1,   -1,  266,  267,
  268,  269,   -1,   -1,   -1,  257,  258,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,  266,  267,  268,  269,  125,  257,
   -1,   -1,  260,   -1,   -1,  263,  264,  265,   -1,   -1,
   -1,   -1,  270,   -1,  272,  273,   -1,  275,  276,  277,
  257,  125,   -1,  260,   -1,   -1,  263,  264,  265,   -1,
   -1,   -1,   -1,  270,   -1,  272,  273,   -1,  275,  276,
  277,   -1,  257,  125,   -1,  260,   -1,   -1,  263,  264,
  265,   -1,   -1,   -1,   -1,  270,   -1,  272,  273,   -1,
  275,  276,  277,  257,   -1,  125,  260,  261,  262,  263,
  264,  265,   -1,   -1,   -1,   -1,  270,   -1,  272,  273,
   -1,  275,  276,  277,  257,   -1,  125,  260,  261,  262,
  263,  264,  265,   -1,   -1,   -1,   -1,  270,   -1,  272,
  273,   -1,  275,  276,  277,   -1,   -1,  257,  125,   -1,
  260,  261,  262,  263,  264,  265,   -1,   -1,   -1,   -1,
  270,   -1,  272,  273,   -1,  275,  276,  277,   -1,  125,
  257,   -1,   -1,  260,  261,  262,  263,  264,  265,   -1,
   -1,   -1,   -1,  270,   -1,  272,  273,   -1,  275,  276,
  277,  125,  256,  257,   -1,   -1,  260,   -1,   -1,  263,
  264,  265,   -1,   -1,   -1,   -1,  270,   -1,  272,  273,
   -1,  275,  276,  277,  256,  257,  125,   -1,  260,   -1,
   -1,  263,  264,  265,   -1,   -1,   -1,   -1,  270,   -1,
  272,  273,   -1,  275,  276,  277,  256,  257,  125,   -1,
  260,   -1,   -1,  263,  264,  265,   -1,   -1,   -1,   -1,
  270,   -1,  272,  273,   -1,  275,  276,  277,  257,  125,
   -1,  260,   -1,  262,  263,  264,  265,   -1,   -1,   -1,
   -1,  270,   -1,  272,  273,   -1,  275,  276,  277,   -1,
  257,  125,   -1,  260,   -1,  262,  263,  264,  265,   -1,
   -1,   -1,   -1,  270,   -1,  272,  273,   -1,  275,  276,
  277,  257,  125,   -1,  260,   -1,   -1,  263,  264,  265,
   -1,   -1,   -1,   -1,  270,   -1,  272,  273,   -1,  275,
  276,  277,   -1,  257,  125,   -1,  260,   -1,   -1,  263,
  264,  265,   -1,   -1,   -1,   -1,  270,   -1,  272,  273,
   -1,  275,  276,  277,   -1,  125,   -1,   -1,  257,   -1,
   -1,  260,   -1,   -1,  263,  264,  265,   -1,   -1,   -1,
   -1,  270,   -1,  272,  273,   -1,  275,  276,  277,  125,
  257,   -1,   -1,  260,   -1,   -1,  263,  264,  265,   -1,
   -1,   -1,   -1,  270,   -1,  272,  273,   -1,  275,  276,
  277,  257,  125,   -1,  260,   -1,   -1,  263,  264,  265,
   -1,   -1,   -1,   -1,  270,   -1,  272,  273,   -1,  275,
  276,  277,   -1,  257,  125,   -1,  260,   -1,   -1,  263,
  264,  265,   -1,   -1,   -1,   -1,  270,   -1,  272,  273,
   -1,  275,  276,  277,  257,  125,   -1,  260,   -1,   -1,
  263,  264,  265,   -1,   -1,   -1,   -1,  270,   -1,  272,
  273,   -1,  275,  276,  277,   -1,  257,  125,   -1,  260,
   -1,   -1,  263,  264,  265,   -1,   -1,   -1,   -1,  270,
   -1,  272,  273,   -1,  275,  276,  277,  257,  125,   -1,
  260,   -1,   -1,  263,  264,  265,   -1,   -1,   -1,   -1,
  270,   -1,  272,  273,   -1,  275,  276,  277,   -1,  125,
   -1,  257,   -1,   -1,  260,   -1,   -1,  263,  264,  265,
   -1,   -1,   -1,   -1,  270,   -1,  272,  273,   -1,  275,
  276,  277,  125,   -1,  257,   -1,   -1,  260,   -1,   -1,
  263,  264,  265,   -1,   -1,   -1,   -1,  270,   -1,  272,
  273,   -1,  275,  276,  277,  125,  257,   -1,   -1,  260,
   -1,   -1,  263,  264,  265,   -1,   -1,   -1,   -1,  270,
   -1,  272,  273,   -1,  275,  276,  277,  257,  125,   -1,
  260,   -1,   -1,  263,  264,  265,   -1,   -1,   -1,   -1,
  270,   -1,  272,  273,   -1,  275,  276,  277,   -1,  257,
  125,   -1,  260,   -1,   -1,  263,  264,  265,   -1,   -1,
   -1,   -1,  270,   -1,  272,  273,   -1,  275,  276,  277,
  257,  125,   -1,  260,   -1,   -1,  263,  264,  265,   -1,
   -1,   -1,   -1,  270,   -1,  272,  273,   -1,  275,  276,
  277,  257,  125,   -1,  260,   -1,   -1,  263,  264,  265,
   -1,   -1,   -1,   -1,  270,   -1,  272,  273,   -1,  275,
  276,  277,   -1,  125,  257,   -1,   -1,  260,   -1,   -1,
  263,  264,  265,   -1,   -1,   -1,   -1,  270,   -1,  272,
  273,   -1,  275,  276,  277,  125,   -1,  257,   -1,   -1,
  260,   -1,   -1,  263,  264,  265,   -1,   -1,   -1,   -1,
  270,   -1,  272,  273,   -1,  275,  276,  277,  125,   -1,
  257,   -1,   -1,  260,   -1,   -1,  263,  264,  265,   -1,
   -1,   -1,   -1,  270,   -1,  272,  273,   -1,  275,  276,
  277,  125,  257,  125,   -1,  260,   -1,   -1,  263,  264,
  265,   -1,   -1,   -1,   -1,  270,   -1,  272,  273,   -1,
  275,  276,  277,  257,  125,   -1,  260,   -1,   -1,  263,
  264,  265,   -1,   -1,   -1,   -1,  270,   -1,  272,  273,
   -1,  275,  276,  277,  257,  125,   -1,  260,   -1,   -1,
  263,  264,  265,   -1,   -1,   -1,   -1,  270,   -1,  272,
  273,   -1,  275,  276,  277,  257,  125,  125,  260,   -1,
   -1,  263,  264,  265,   -1,   -1,   -1,  125,  270,   -1,
  272,  273,   -1,  275,  276,  277,   -1,  257,  125,   -1,
  260,   -1,   -1,  263,  264,  265,   -1,   -1,   -1,   -1,
  270,   -1,  272,  273,   -1,  275,  276,  277,   -1,   -1,
  257,   -1,   -1,  260,   -1,   -1,  263,  264,  265,   -1,
   -1,   -1,   -1,  270,   -1,  272,  273,   -1,  275,  276,
  277,   -1,   -1,  257,   -1,  257,  260,   -1,  260,  263,
  264,  263,   -1,  265,   -1,   -1,  270,   -1,  272,  273,
  272,  275,  276,  277,   -1,   -1,  257,   -1,   -1,  260,
   -1,   -1,  263,  264,   -1,   -1,   -1,   -1,   -1,  270,
   -1,  272,  273,   -1,  275,  276,  277,  257,   -1,   -1,
  260,   -1,   -1,  263,  264,   -1,   -1,   -1,   -1,   -1,
  270,   -1,  272,  273,   -1,  275,  276,  277,  257,  257,
   -1,  260,  260,   -1,  263,  263,  265,  265,   -1,  257,
   -1,   -1,  260,  272,  272,  263,   -1,  265,   -1,   -1,
  257,   -1,   -1,  260,  272,   -1,  263,  257,  265,   -1,
  260,   -1,   -1,  263,  264,  272,   -1,   -1,   -1,   -1,
  270,   -1,  272,  273,   -1,  275,  276,  277,
};
}
final static short YYFINAL=14;
final static short YYMAXTOKEN=278;
final static String yyname[] = {
"end-of-file",null,null,null,null,null,null,null,null,null,null,null,null,null,
null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,
null,null,null,null,null,null,null,null,null,null,"'('","')'","'*'","'+'","','",
"'-'","'.'","'/'",null,null,null,null,null,null,null,null,null,null,null,"';'",
"'<'","'='","'>'",null,null,null,null,null,null,null,null,null,null,null,null,
null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,
null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,
null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,
"'{'",null,"'}'",null,null,null,null,null,null,null,null,null,null,null,null,
null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,
null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,
null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,
null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,
null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,
null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,
null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,
null,null,null,null,null,null,null,"ID","CTE","CADENA","IF","ELSE","ENDIF",
"PRINT","VOID","RETURN","COMP_MAYOR_IGUAL","COMP_MENOR_IGUAL","COMP_IGUAL",
"COMP_DISTINTO","CLASS","WHILE","DO","INTERFACE","IMPLEMENT","INT","ULONG",
"FLOAT","OPERADOR_MENOS",
};
final static String yyrule[] = {
"$accept : programa",
"programa : '{' sentencias '}'",
"programa : sentencias '}'",
"programa : '{' sentencias",
"programa : '{' '}'",
"programa :",
"sentencias : sentencia",
"sentencias : sentencias sentencia",
"sentencia : sentencia_declarativa",
"sentencia : sentencia_ejecutable",
"sentencia : error ','",
"sentencia_ejecutable : sentencia_asignacion",
"sentencia_ejecutable : sentencia_invocacion_funcion",
"sentencia_ejecutable : sentencia_imprimir",
"sentencia_ejecutable : sentencia_seleccion",
"sentencia_ejecutable : sentencia_iterativa_do_while",
"sentencia_ejecutable : sentencia_return",
"sentencias_funcion : sentencia_funcion",
"sentencias_funcion : sentencias_funcion sentencia_funcion",
"sentencia_funcion : sentencia_declarativa",
"sentencia_funcion : sentencia_ejecutable_funcion",
"sentencia_ejecutable_funcion : sentencia_asignacion",
"sentencia_ejecutable_funcion : sentencia_invocacion_funcion",
"sentencia_ejecutable_funcion : sentencia_imprimir",
"sentencia_ejecutable_funcion : sentencia_seleccion_funcion",
"sentencia_ejecutable_funcion : sentencia_iterativa_do_while_funcion",
"sentencia_return : RETURN ','",
"sentencia_return : RETURN",
"sentencia_iterativa_do_while : DO bloque_sentencias_ejecutables_while WHILE '(' condicion ')' ','",
"sentencia_iterativa_do_while : DO bloque_sentencias_ejecutables_while WHILE '(' condicion ')'",
"sentencia_iterativa_do_while : DO WHILE '(' condicion ')' ','",
"sentencia_iterativa_do_while : DO bloque_sentencias_ejecutables_while WHILE '(' ')' ','",
"sentencia_iterativa_do_while : DO bloque_sentencias_ejecutables_while '(' condicion ')' ','",
"sentencia_iterativa_do_while : DO WHILE ','",
"sentencia_iterativa_do_while : DO bloque_sentencias_ejecutables_while WHILE ','",
"sentencia_iterativa_do_while : DO ','",
"sentencia_iterativa_do_while : DO '(' condicion ')' ','",
"sentencia_iterativa_do_while : DO '(' ')' ','",
"sentencia_iterativa_do_while : DO '(' ')'",
"sentencia_iterativa_do_while_funcion : DO bloque_sentencias_ejecutables_funcion_while WHILE '(' condicion ')' ','",
"$$1 :",
"sentencia_iterativa_do_while_funcion : DO bloque_sentencias_ejecutables_funcion_while WHILE '(' condicion ')' $$1 DO WHILE '(' condicion ')' ','",
"sentencia_iterativa_do_while_funcion : DO bloque_sentencias_ejecutables_funcion_while WHILE '(' ')' ','",
"sentencia_iterativa_do_while_funcion : DO bloque_sentencias_ejecutables_funcion_while '(' condicion ')' ','",
"sentencia_iterativa_do_while_funcion : DO WHILE ','",
"sentencia_iterativa_do_while_funcion : DO bloque_sentencias_ejecutables_funcion_while WHILE ','",
"sentencia_iterativa_do_while_funcion : DO ','",
"sentencia_iterativa_do_while_funcion : DO '(' condicion ')' ','",
"sentencia_iterativa_do_while_funcion : DO '(' ')' ','",
"sentencia_iterativa_do_while_funcion : DO '(' ')'",
"sentencia_seleccion : IF '(' condicion ')' bloque_sentencias_ejecutables_then ELSE bloque_sentencias_ejecutables ENDIF ','",
"sentencia_seleccion : IF '(' condicion ')' bloque_sentencias_ejecutables_then ENDIF ','",
"sentencia_seleccion : IF '(' condicion ')' bloque_sentencias_ejecutables_then ELSE bloque_sentencias_ejecutables ENDIF",
"sentencia_seleccion : IF '(' condicion ')' bloque_sentencias_ejecutables_then ENDIF",
"sentencia_seleccion : IF '(' ')' bloque_sentencias_ejecutables_then ELSE bloque_sentencias_ejecutables ENDIF ','",
"sentencia_seleccion : IF '(' ')' bloque_sentencias_ejecutables_then ENDIF ','",
"sentencia_seleccion : IF '(' condicion ')' ELSE bloque_sentencias_ejecutables ENDIF ','",
"sentencia_seleccion : IF '(' condicion ')' bloque_sentencias_ejecutables_then ELSE ENDIF ','",
"sentencia_seleccion : IF '(' condicion ')' ENDIF ','",
"sentencia_seleccion_funcion : IF '(' condicion ')' bloque_sentencias_ejecutables_then_funcion ELSE bloque_sentencias_ejecutables_funcion ENDIF ','",
"sentencia_seleccion_funcion : IF '(' condicion ')' bloque_sentencias_ejecutables_then_funcion ENDIF ','",
"sentencia_seleccion_funcion : IF '(' condicion ')' bloque_sentencias_ejecutables_then_funcion ELSE bloque_sentencias_ejecutables_funcion ENDIF",
"$$2 :",
"sentencia_seleccion_funcion : IF '(' condicion ')' bloque_sentencias_ejecutables_then_funcion ENDIF $$2 IF '(' ')' bloque_sentencias_ejecutables_then_funcion ELSE bloque_sentencias_ejecutables_funcion ENDIF ','",
"sentencia_seleccion_funcion : IF '(' ')' bloque_sentencias_ejecutables_then_funcion ENDIF ','",
"sentencia_seleccion_funcion : IF '(' condicion ')' ELSE bloque_sentencias_ejecutables_funcion ENDIF ','",
"sentencia_seleccion_funcion : IF '(' condicion ')' bloque_sentencias_ejecutables_then_funcion ELSE ENDIF ','",
"sentencia_seleccion_funcion : IF '(' condicion ')' ENDIF ','",
"bloque_sentencias_ejecutables_then : sentencia_ejecutable",
"bloque_sentencias_ejecutables_then : '{' sentencias_ejecutables '}'",
"bloque_sentencias_ejecutables_then : '{' sentencias_ejecutables",
"bloque_sentencias_ejecutables_then : sentencias_ejecutables '}'",
"bloque_sentencias_ejecutables_then : '{' '}'",
"bloque_sentencias_ejecutables_then : sentencia_declarativa",
"bloque_sentencias_ejecutables_while : '{' primer_sentencia '}'",
"bloque_sentencias_ejecutables_while : '{' primer_sentencia sentencias_ejecutables '}'",
"bloque_sentencias_ejecutables_while : '{' primer_sentencia sentencias_ejecutables",
"bloque_sentencias_ejecutables_while : primer_sentencia sentencias_ejecutables '}'",
"bloque_sentencias_ejecutables_while : '{' '}'",
"bloque_sentencias_ejecutables_while : sentencia_declarativa",
"primer_sentencia : sentencia_ejecutable",
"primer_sentencia_funcion : sentencia_ejecutable_funcion",
"bloque_sentencias_ejecutables : sentencia_ejecutable",
"bloque_sentencias_ejecutables : '{' sentencia_ejecutable sentencias_ejecutables '}'",
"bloque_sentencias_ejecutables : '{' sentencia_ejecutable sentencias_ejecutables",
"bloque_sentencias_ejecutables : sentencia_ejecutable sentencias_ejecutables '}'",
"bloque_sentencias_ejecutables : '{' '}'",
"bloque_sentencias_ejecutables : sentencia_declarativa",
"bloque_sentencias_ejecutables_then_funcion : sentencia_ejecutable_funcion",
"bloque_sentencias_ejecutables_then_funcion : sentencia_return",
"bloque_sentencias_ejecutables_then_funcion : sentencia_declarativa",
"bloque_sentencias_ejecutables_then_funcion : '{' sentencias_ejecutables_funcion '}'",
"bloque_sentencias_ejecutables_then_funcion : '{' sentencias_ejecutables_funcion sentencia_return '}'",
"bloque_sentencias_ejecutables_then_funcion : '{' sentencias_ejecutables_funcion sentencia_return sentencias_ejecutables_funcion_inalcanzable '}'",
"bloque_sentencias_ejecutables_then_funcion : sentencias_ejecutables_funcion '}'",
"bloque_sentencias_ejecutables_then_funcion : sentencias_ejecutables_funcion sentencia_return '}'",
"bloque_sentencias_ejecutables_then_funcion : '{' sentencias_ejecutables_funcion",
"bloque_sentencias_ejecutables_then_funcion : '{' sentencias_ejecutables_funcion sentencia_return",
"bloque_sentencias_ejecutables_then_funcion : '{' '}'",
"bloque_sentencias_ejecutables_funcion_while : '{' primer_sentencia_funcion '}'",
"bloque_sentencias_ejecutables_funcion_while : sentencia_return",
"bloque_sentencias_ejecutables_funcion_while : sentencia_declarativa",
"bloque_sentencias_ejecutables_funcion_while : '{' primer_sentencia_funcion sentencias_ejecutables_funcion '}'",
"bloque_sentencias_ejecutables_funcion_while : '{' primer_sentencia_funcion sentencias_ejecutables_funcion sentencia_return '}'",
"bloque_sentencias_ejecutables_funcion_while : '{' primer_sentencia_funcion sentencias_ejecutables_funcion sentencia_return sentencias_ejecutables_funcion_inalcanzable '}'",
"bloque_sentencias_ejecutables_funcion_while : primer_sentencia_funcion sentencias_ejecutables_funcion '}'",
"bloque_sentencias_ejecutables_funcion_while : primer_sentencia_funcion sentencias_ejecutables_funcion sentencia_return '}'",
"bloque_sentencias_ejecutables_funcion_while : '{' primer_sentencia_funcion sentencias_ejecutables_funcion",
"bloque_sentencias_ejecutables_funcion_while : '{' primer_sentencia_funcion sentencias_ejecutables_funcion sentencia_return",
"bloque_sentencias_ejecutables_funcion_while : '{' '}'",
"bloque_sentencias_ejecutables_funcion : sentencia_ejecutable_funcion",
"bloque_sentencias_ejecutables_funcion : sentencia_return",
"bloque_sentencias_ejecutables_funcion : sentencia_declarativa",
"bloque_sentencias_ejecutables_funcion : '{' sentencias_ejecutables_funcion '}'",
"bloque_sentencias_ejecutables_funcion : '{' sentencias_ejecutables_funcion sentencia_return '}'",
"bloque_sentencias_ejecutables_funcion : '{' sentencias_ejecutables_funcion sentencia_return sentencias_ejecutables_funcion_inalcanzable '}'",
"bloque_sentencias_ejecutables_funcion : sentencias_ejecutables_funcion '}'",
"bloque_sentencias_ejecutables_funcion : sentencias_ejecutables_funcion sentencia_return '}'",
"bloque_sentencias_ejecutables_funcion : '{' sentencias_ejecutables_funcion",
"bloque_sentencias_ejecutables_funcion : '{' sentencias_ejecutables_funcion sentencia_return",
"bloque_sentencias_ejecutables_funcion : '{' '}'",
"sentencias_ejecutables_funcion_inalcanzable : sentencia_ejecutable_funcion_inalcanzable",
"sentencias_ejecutables_funcion_inalcanzable : sentencias_ejecutables_funcion_inalcanzable sentencia_ejecutable_funcion_inalcanzable",
"sentencia_ejecutable_funcion_inalcanzable : sentencia_return",
"sentencia_ejecutable_funcion_inalcanzable : sentencia_ejecutable_funcion",
"sentencias_ejecutables : sentencia_ejecutable",
"sentencias_ejecutables : sentencias_ejecutables sentencia_ejecutable",
"sentencias_ejecutables : sentencia_declarativa",
"sentencias_ejecutables : sentencias_ejecutables sentencia_declarativa",
"sentencias_ejecutables_funcion : sentencia_ejecutable_funcion",
"sentencias_ejecutables_funcion : sentencias_ejecutables_funcion sentencia_ejecutable_funcion",
"sentencias_ejecutables_funcion : sentencia_declarativa",
"sentencias_ejecutables_funcion : sentencias_ejecutables_funcion sentencia_declarativa",
"sentencia_imprimir : PRINT CADENA ','",
"sentencia_imprimir : PRINT CADENA",
"sentencia_imprimir : PRINT ','",
"sentencia_imprimir : PRINT ID ','",
"sentencia_imprimir : PRINT ID",
"sentencia_imprimir : PRINT constante ','",
"sentencia_imprimir : PRINT constante",
"sentencia_invocacion_funcion : sentencia_objeto_identificador '(' expresion ')' ','",
"sentencia_invocacion_funcion : sentencia_objeto_identificador '(' ')' ','",
"sentencia_invocacion_funcion : sentencia_objeto_identificador '(' expresion ',' lista_expresiones_invocacion_funcion_exceso ')' ','",
"sentencia_invocacion_funcion : sentencia_objeto_identificador '(' expresion ')'",
"sentencia_invocacion_funcion : sentencia_objeto_identificador '(' ')'",
"sentencia_invocacion_funcion : sentencia_objeto_identificador '(' expresion ',' lista_expresiones_invocacion_funcion_exceso ')'",
"lista_expresiones_invocacion_funcion_exceso : expresion",
"lista_expresiones_invocacion_funcion_exceso : lista_expresiones_invocacion_funcion_exceso ',' expresion",
"sentencia_asignacion : sentencia_objeto_identificador '=' expresion ','",
"sentencia_asignacion : sentencia_objeto_identificador '=' expresion",
"sentencia_asignacion : sentencia_objeto_identificador '=' ','",
"sentencia_objeto_identificador : ID",
"sentencia_objeto_identificador : sentencia_objeto_identificador '.' ID",
"sentencia_declarativa : declaracion_variable",
"sentencia_declarativa : declaracion_funcion",
"sentencia_declarativa : declaracion_clase",
"sentencia_declarativa : declaracion_interfaz",
"declaracion_variable : tipo lista_de_variables ','",
"declaracion_variable : tipo lista_de_variables",
"declaracion_variable : tipo ','",
"declaracion_interfaz_encabezado : INTERFACE ID",
"declaracion_interfaz_encabezado : INTERFACE",
"declaracion_interfaz : declaracion_interfaz_encabezado '{' bloque_encabezado_funcion_declaracion_interfaz '}'",
"declaracion_interfaz : declaracion_interfaz_encabezado '}'",
"bloque_encabezado_funcion_declaracion_interfaz : encabezado_funcion_declaracion_interfaz",
"bloque_encabezado_funcion_declaracion_interfaz : bloque_encabezado_funcion_declaracion_interfaz encabezado_funcion_declaracion_interfaz",
"encabezado_funcion_declaracion_interfaz : encabezado_funcion_interfaz ','",
"encabezado_funcion_declaracion_interfaz : encabezado_funcion_interfaz",
"sentencia_declarativa_clase : tipo lista_de_variables ','",
"sentencia_declarativa_clase : tipo lista_de_variables",
"sentencia_declarativa_clase : declaracion_funcion",
"sentencia_declarativa_clase : declaracion_funcion ','",
"sentencia_declarativa_clase : ID ','",
"declaracion_clase : declaracion_clase_encabezado '{' bloque_sentencias_declarativas_clase '}'",
"declaracion_clase_encabezado : CLASS ID",
"declaracion_clase_encabezado : CLASS ID IMPLEMENT ID",
"declaracion_clase_encabezado : CLASS",
"declaracion_clase_encabezado : CLASS IMPLEMENT ID",
"declaracion_clase_encabezado : CLASS ID IMPLEMENT",
"declaracion_clase_encabezado : CLASS IMPLEMENT",
"bloque_sentencias_declarativas_clase : sentencia_declarativa_clase",
"bloque_sentencias_declarativas_clase : bloque_sentencias_declarativas_clase sentencia_declarativa_clase",
"declaracion_funcion : encabezado_funcion cuerpo_funcion",
"encabezado_funcion : encabezado_funcion_nombre '(' parametro_funcion ')'",
"encabezado_funcion : encabezado_funcion_nombre '(' ')'",
"encabezado_funcion : encabezado_funcion_nombre '(' parametro_funcion ',' lista_parametros_funcion_exceso ')'",
"encabezado_funcion : encabezado_funcion_nombre '(' parametro_funcion lista_parametros_funcion_exceso ')'",
"encabezado_funcion : encabezado_funcion_nombre ')'",
"encabezado_funcion_nombre : VOID ID",
"encabezado_funcion_nombre : VOID",
"encabezado_funcion_interfaz : VOID ID '(' parametro_funcion ')'",
"encabezado_funcion_interfaz : VOID ID '(' ')'",
"encabezado_funcion_interfaz : VOID ID '(' parametro_funcion ',' lista_parametros_funcion_exceso ')'",
"encabezado_funcion_interfaz : VOID ID '(' parametro_funcion lista_parametros_funcion_exceso ')'",
"encabezado_funcion_interfaz : VOID '(' parametro_funcion ')'",
"encabezado_funcion_interfaz : VOID '(' ')'",
"encabezado_funcion_interfaz : VOID ID parametro_funcion ')'",
"encabezado_funcion_interfaz : VOID ID ')'",
"cuerpo_funcion : '{' sentencias_funcion sentencia_return '}'",
"cuerpo_funcion : '{' sentencia_return '}'",
"cuerpo_funcion : '{' sentencias_funcion sentencia_return sentencias_funcion_inalcanzable '}'",
"cuerpo_funcion : '{' sentencia_return sentencias_funcion_inalcanzable '}'",
"cuerpo_funcion : '{' sentencias_funcion '}'",
"cuerpo_funcion : '{' '}'",
"cuerpo_funcion : sentencias_funcion sentencia_return '}'",
"cuerpo_funcion : sentencia_return '}'",
"cuerpo_funcion : sentencias_funcion sentencia_return sentencias_funcion_inalcanzable '}'",
"cuerpo_funcion : sentencia_return sentencias_funcion_inalcanzable '}'",
"cuerpo_funcion : sentencias_funcion '}'",
"cuerpo_funcion : '}'",
"sentencias_funcion_inalcanzable : sentencia_funcion_inalcanzable",
"sentencias_funcion_inalcanzable : sentencias_funcion_inalcanzable sentencia_funcion_inalcanzable",
"sentencia_funcion_inalcanzable : sentencia_declarativa",
"sentencia_funcion_inalcanzable : sentencia_return",
"sentencia_funcion_inalcanzable : sentencia_ejecutable_funcion",
"lista_parametros_funcion_exceso : parametro_funcion",
"lista_parametros_funcion_exceso : lista_parametros_funcion_exceso ',' parametro_funcion",
"lista_parametros_funcion_exceso : lista_parametros_funcion_exceso parametro_funcion",
"parametro_funcion : tipo ID",
"lista_de_variables : ID",
"lista_de_variables : lista_de_variables ';' ID",
"tipo : INT",
"tipo : ULONG",
"tipo : FLOAT",
"tipo : ID",
"condicion : expresion comparador expresion",
"condicion : expresion comparador",
"condicion : comparador expresion",
"condicion : expresion '=' expresion",
"comparador : COMP_MAYOR_IGUAL",
"comparador : COMP_MENOR_IGUAL",
"comparador : COMP_IGUAL",
"comparador : COMP_DISTINTO",
"comparador : '>'",
"comparador : '<'",
"expresion : expresion '+' termino",
"expresion : expresion '-' termino",
"expresion : termino",
"termino : termino '*' factor",
"termino : termino '/' factor",
"termino : factor",
"factor : ID",
"factor : ID OPERADOR_MENOS",
"factor : constante",
"factor : '(' expresion ')'",
"constante : CTE",
"constante : '-' CTE",
};

//#line 886 "./src/compilador/gramatica.y"

public static GeneracionCodigo genCodigo = null;
public static AnalizadorLexico lexico = null;
public static GeneracionCodigoIntermedio genCodigoIntermedio = GeneracionCodigoIntermedio.getInstance();
public static Logger logger = Logger.getInstance();
public static TablaDeSimbolos TS = TablaDeSimbolos.getInstance();
public static Polaca polaca = Polaca.getInstance();
public static Parser parser = null;
public static int MAX_INT_VALUE = (int) (Math.pow(2, 15) - 1);

/** Chequea, para los INT, que el valor positivo no supere el valor maximo */
public void corregirConstantePositivaEntera(String constante) {
	if (constante.contains("_i")) {
		//se recibio un INT con signo positivo
		boolean exceptionOutOfRange = false;
		int cte = 0;
		String constanteValue = constante.toString().split("_")[0];

		try {
			cte = Integer.parseInt(constanteValue);
		} catch (NumberFormatException e) {
			exceptionOutOfRange = true;
		}

		if (cte > MAX_INT_VALUE || exceptionOutOfRange) {
			logger.logWarning("[Parser] Rango invalido para la constante: " + constante + ", se trunca al valor " + MAX_INT_VALUE + "_i");
			TS.swapLexemas(constante, MAX_INT_VALUE + "_i");
		}
	}
}

public void constanteConSigno(String constante) {
	/** Check de float negativos */
	if (constante.contains(".")) {
		String negConstante = "-"+constante;
		TS.swapLexemas(constante, negConstante);
	} else {
		if (constante.contains("_ul")) {
			//se recibio un ULONG con signo negativo
			logger.logWarning("[Parser] No se admiten ULONG con valores negativos: " + "-"+constante + ", se trunca a 0_ul");
			TS.swapLexemas(constante, "0_ul");
		} else {
			// se recibio un INT negativo
			String negConstante = "-"+constante;
			TS.swapLexemas(constante, negConstante);
		}
	}
}	

public int yylex() {
	return lexico.yylex(parser);
}

public void yyerror(String error) {
	logger.logError(error);
}

public static void main(String[] args) {
	if (args.length == 0) {
		System.err.println("No se especifico ningun archivo de codigo");
	} else {
		String archivo_a_leer = args[0];
		System.out.println("Se va a leer archivo " + archivo_a_leer);
		
		FileReaderHelper fileHelper = new FileReaderHelper();
		
		boolean fileOpenSuccess = fileHelper.open(archivo_a_leer);
		
		if (fileOpenSuccess) {
			parser = new Parser();
			lexico = new AnalizadorLexico(fileHelper);
			
	    parser.run();
	
			String path = new File(archivo_a_leer).getAbsolutePath();
	        
	    Output out = new Output(path);
	        
	    out.saveFile("codigo-lexico.txt", logger.getLexico());
			out.saveFile("codigo-sintactico.txt", logger.getSintactico());
			out.saveFile("tabla-de-simbolos.txt", TS.print());

			polaca.showPolaca();

			//GeneracionCodigo.getInstance().generar();
		}
	}
}
//#line 1188 "Parser.java"
//###############################################################
// method: yylexdebug : check lexer state
//###############################################################
void yylexdebug(int state,int ch)
{
String s=null;
  if (ch < 0) ch=0;
  if (ch <= YYMAXTOKEN) //check index bounds
     s = yyname[ch];    //now get it
  if (s==null)
    s = "illegal-symbol";
  debug("state "+state+", reading "+ch+" ("+s+")");
}





//The following are now global, to aid in error reporting
int yyn;       //next next thing to do
int yym;       //
int yystate;   //current parsing state from state table
String yys;    //current token string


//###############################################################
// method: yyparse : parse input and execute indicated items
//###############################################################
int yyparse()
{
boolean doaction;
  init_stacks();
  yynerrs = 0;
  yyerrflag = 0;
  yychar = -1;          //impossible char forces a read
  yystate=0;            //initial state
  state_push(yystate);  //save it
  val_push(yylval);     //save empty value
  while (true) //until parsing is done, either correctly, or w/error
    {
    doaction=true;
    if (yydebug) debug("loop"); 
    //#### NEXT ACTION (from reduction table)
    for (yyn=yydefred[yystate];yyn==0;yyn=yydefred[yystate])
      {
      if (yydebug) debug("yyn:"+yyn+"  state:"+yystate+"  yychar:"+yychar);
      if (yychar < 0)      //we want a char?
        {
        yychar = yylex();  //get next token
        if (yydebug) debug(" next yychar:"+yychar);
        //#### ERROR CHECK ####
        if (yychar < 0)    //it it didn't work/error
          {
          yychar = 0;      //change it to default string (no -1!)
          if (yydebug)
            yylexdebug(yystate,yychar);
          }
        }//yychar<0
      yyn = yysindex[yystate];  //get amount to shift by (shift index)
      if ((yyn != 0) && (yyn += yychar) >= 0 &&
          yyn <= YYTABLESIZE && yycheck[yyn] == yychar)
        {
        if (yydebug)
          debug("state "+yystate+", shifting to state "+yytable[yyn]);
        //#### NEXT STATE ####
        yystate = yytable[yyn];//we are in a new state
        state_push(yystate);   //save it
        val_push(yylval);      //push our lval as the input for next rule
        yychar = -1;           //since we have 'eaten' a token, say we need another
        if (yyerrflag > 0)     //have we recovered an error?
           --yyerrflag;        //give ourselves credit
        doaction=false;        //but don't process yet
        break;   //quit the yyn=0 loop
        }

    yyn = yyrindex[yystate];  //reduce
    if ((yyn !=0 ) && (yyn += yychar) >= 0 &&
            yyn <= YYTABLESIZE && yycheck[yyn] == yychar)
      {   //we reduced!
      if (yydebug) debug("reduce");
      yyn = yytable[yyn];
      doaction=true; //get ready to execute
      break;         //drop down to actions
      }
    else //ERROR RECOVERY
      {
      if (yyerrflag==0)
        {
        yyerror("syntax error");
        yynerrs++;
        }
      if (yyerrflag < 3) //low error count?
        {
        yyerrflag = 3;
        while (true)   //do until break
          {
          if (stateptr<0)   //check for under & overflow here
            {
            yyerror("stack underflow. aborting...");  //note lower case 's'
            return 1;
            }
          yyn = yysindex[state_peek(0)];
          if ((yyn != 0) && (yyn += YYERRCODE) >= 0 &&
                    yyn <= YYTABLESIZE && yycheck[yyn] == YYERRCODE)
            {
            if (yydebug)
              debug("state "+state_peek(0)+", error recovery shifting to state "+yytable[yyn]+" ");
            yystate = yytable[yyn];
            state_push(yystate);
            val_push(yylval);
            doaction=false;
            break;
            }
          else
            {
            if (yydebug)
              debug("error recovery discarding state "+state_peek(0)+" ");
            if (stateptr<0)   //check for under & overflow here
              {
              yyerror("Stack underflow. aborting...");  //capital 'S'
              return 1;
              }
            state_pop();
            val_pop();
            }
          }
        }
      else            //discard this token
        {
        if (yychar == 0)
          return 1; //yyabort
        if (yydebug)
          {
          yys = null;
          if (yychar <= YYMAXTOKEN) yys = yyname[yychar];
          if (yys == null) yys = "illegal-symbol";
          debug("state "+yystate+", error recovery discards token "+yychar+" ("+yys+")");
          }
        yychar = -1;  //read another
        }
      }//end error recovery
    }//yyn=0 loop
    if (!doaction)   //any reason not to proceed?
      continue;      //skip action
    yym = yylen[yyn];          //get count of terminals on rhs
    if (yydebug)
      debug("state "+yystate+", reducing "+yym+" by rule "+yyn+" ("+yyrule[yyn]+")");
    if (yym>0)                 //if count of rhs not 'nil'
      yyval = val_peek(yym-1); //get current semantic value
    yyval = dup_yyval(yyval); //duplicate yyval if ParserVal is used as semantic value
    switch(yyn)
      {
//########## USER-SUPPLIED ACTIONS ##########
case 1:
//#line 17 "./src/compilador/gramatica.y"
{ logger.logSuccess("[Parser] Programa correcto detectado"); }
break;
case 2:
//#line 18 "./src/compilador/gramatica.y"
{ logger.logError("[Parser] Se esperaba simbolo '{' al principio del programa"); }
break;
case 3:
//#line 19 "./src/compilador/gramatica.y"
{ logger.logError("[Parser] Se esperaba simbolo '}' al final del programa"); }
break;
case 4:
//#line 20 "./src/compilador/gramatica.y"
{ logger.logError("[Parser] Programa vacio"); }
break;
case 5:
//#line 21 "./src/compilador/gramatica.y"
{ logger.logError("[Parser] Programa vacio"); }
break;
case 9:
//#line 31 "./src/compilador/gramatica.y"
{ polaca.resetContador(); }
break;
case 10:
//#line 32 "./src/compilador/gramatica.y"
{ logger.logError("[Parser] Error de sintaxis en la sentencia"); }
break;
case 16:
//#line 41 "./src/compilador/gramatica.y"
{ logger.logError("[Parser] Sentencia RETURN fuera de funcion"); }
break;
case 20:
//#line 51 "./src/compilador/gramatica.y"
{polaca.resetContador();}
break;
case 27:
//#line 64 "./src/compilador/gramatica.y"
{ logger.logError("[Parser] Se esperaba un simbolo ',' luego del RETURN"); }
break;
case 28:
//#line 68 "./src/compilador/gramatica.y"
{ 
		logger.logSuccess("[Parser] Sentencia iterativa DO WHILE detectada"); 
		polaca.generarPasoIncompleto("BI");
		polaca.completarPasoIncompleto();
		polaca.completarPasoIncompletoIteracion();
		}
break;
case 29:
//#line 74 "./src/compilador/gramatica.y"
{ logger.logError("[Parser] Se esperaba ',' luego de sentencia DO WHILE"); }
break;
case 30:
//#line 75 "./src/compilador/gramatica.y"
{ logger.logError("[Parser] Se esperaban sentencias ejecutables en sentencia DO WHILE"); }
break;
case 31:
//#line 76 "./src/compilador/gramatica.y"
{ logger.logError("[Parser] Se esperaba condicion en sentencia DO WHILE"); }
break;
case 32:
//#line 77 "./src/compilador/gramatica.y"
{ logger.logError("[Parser] Se esperaba WHILE en sentencia DO WHILE"); }
break;
case 33:
//#line 78 "./src/compilador/gramatica.y"
{ logger.logError("[Parser] Se esperaban sentencias ejecutables en sentencia DO WHILE"); }
break;
case 34:
//#line 79 "./src/compilador/gramatica.y"
{ logger.logError("[Parser] Se esperaba condicion en sentencia DO WHILE"); }
break;
case 35:
//#line 80 "./src/compilador/gramatica.y"
{ logger.logError("[Parser] Se esperaban sentencias ejecutables en sentencia DO WHILE"); }
break;
case 36:
//#line 81 "./src/compilador/gramatica.y"
{ logger.logError("[Parser] Se esperaban sentencias ejecutables en sentencia DO WHILE"); }
break;
case 37:
//#line 82 "./src/compilador/gramatica.y"
{ logger.logError("[Parser] Se esperaban sentencias ejecutables en sentencia DO WHILE"); }
break;
case 38:
//#line 83 "./src/compilador/gramatica.y"
{ logger.logError("[Parser] Se esperaban sentencias ejecutables en sentencia DO WHILE"); }
break;
case 39:
//#line 87 "./src/compilador/gramatica.y"
{ 
		logger.logSuccess("[Parser] Sentencia iterativa DO WHILE detectada");
		polaca.generarPasoIncompleto("BI");
		polaca.completarPasoIncompleto();
		polaca.completarPasoIncompletoIteracion();	
	}
break;
case 40:
//#line 93 "./src/compilador/gramatica.y"
{ logger.logError("[Parser] Se esperaba ',' luego de sentencia DO WHILE"); }
break;
case 41:
//#line 94 "./src/compilador/gramatica.y"
{ logger.logError("[Parser] Se esperaban sentencias ejecutables en sentencia DO WHILE"); }
break;
case 42:
//#line 95 "./src/compilador/gramatica.y"
{ logger.logError("[Parser] Se esperaba condicion en sentencia DO WHILE"); }
break;
case 43:
//#line 96 "./src/compilador/gramatica.y"
{ logger.logError("[Parser] Se esperaba WHILE en sentencia DO WHILE"); }
break;
case 44:
//#line 97 "./src/compilador/gramatica.y"
{ logger.logError("[Parser] Se esperaban sentencias ejecutables en sentencia DO WHILE"); }
break;
case 45:
//#line 98 "./src/compilador/gramatica.y"
{ logger.logError("[Parser] Se esperaba condicion en sentencia DO WHILE"); }
break;
case 46:
//#line 99 "./src/compilador/gramatica.y"
{ logger.logError("[Parser] Se esperaban sentencias ejecutables en sentencia DO WHILE"); }
break;
case 47:
//#line 100 "./src/compilador/gramatica.y"
{ logger.logError("[Parser] Se esperaban sentencias ejecutables en sentencia DO WHILE"); }
break;
case 48:
//#line 101 "./src/compilador/gramatica.y"
{ logger.logError("[Parser] Se esperaban sentencias ejecutables en sentencia DO WHILE"); }
break;
case 49:
//#line 102 "./src/compilador/gramatica.y"
{ logger.logError("[Parser] Se esperaban sentencias ejecutables en sentencia DO WHILE"); }
break;
case 50:
//#line 106 "./src/compilador/gramatica.y"
{ 
		logger.logSuccess("[Parser] Sentencia seleccion IF ELSE detectada"); 
		polaca.completarPasoIncompleto();
	}
break;
case 51:
//#line 110 "./src/compilador/gramatica.y"
{ 
		logger.logSuccess("[Parser] Sentencia seleccion IF sin ELSE detectada"); 
		polaca.completarPasoIncompleto(); /* ESTA BIEN QUE APAREZCA BIFURCACION INCONDICIONAL ACA?*/
	}
break;
case 52:
//#line 114 "./src/compilador/gramatica.y"
{ logger.logError("[Parser] Se esperaba ',' luego de sentencia IF ELSE"); }
break;
case 53:
//#line 115 "./src/compilador/gramatica.y"
{ logger.logError("[Parser] Se esperaba ',' luego de sentencia IF sin ELSE"); }
break;
case 54:
//#line 116 "./src/compilador/gramatica.y"
{ logger.logError("[Parser] Se esperaba condicion en sentencia IF ELSE"); }
break;
case 55:
//#line 117 "./src/compilador/gramatica.y"
{ logger.logError("[Parser] Se esperaba condicion en sentencia IF"); }
break;
case 56:
//#line 118 "./src/compilador/gramatica.y"
{ logger.logError("[Parser] Se esperaban sentencias ejecutables en sentencia IF ELSE"); }
break;
case 57:
//#line 119 "./src/compilador/gramatica.y"
{ logger.logError("[Parser] Se esperaban sentencias ejecutables en sentencia IF ELSE"); }
break;
case 58:
//#line 120 "./src/compilador/gramatica.y"
{ logger.logError("[Parser] Se esperaban sentencias ejecutables en sentencia IF"); }
break;
case 59:
//#line 124 "./src/compilador/gramatica.y"
{ 
		logger.logSuccess("[Parser] Sentencia seleccion IF ELSE detectada"); 
		polaca.completarPasoIncompleto();
	}
break;
case 60:
//#line 128 "./src/compilador/gramatica.y"
{ 
		logger.logSuccess("[Parser] Sentencia seleccion IF sin ELSE detectada");
		polaca.completarPasoIncompleto();
	}
break;
case 61:
//#line 132 "./src/compilador/gramatica.y"
{ logger.logError("[Parser] Se esperaba ',' luego de sentencia IF ELSE"); }
break;
case 62:
//#line 133 "./src/compilador/gramatica.y"
{ logger.logError("[Parser] Se esperaba ',' luego de sentencia IF sin ELSE"); }
break;
case 63:
//#line 134 "./src/compilador/gramatica.y"
{ logger.logError("[Parser] Se esperaba condicion en sentencia IF ELSE"); }
break;
case 64:
//#line 135 "./src/compilador/gramatica.y"
{ logger.logError("[Parser] Se esperaba condicion en sentencia IF"); }
break;
case 65:
//#line 136 "./src/compilador/gramatica.y"
{ logger.logError("[Parser] Se esperaban sentencias ejecutables en sentencia IF ELSE"); }
break;
case 66:
//#line 137 "./src/compilador/gramatica.y"
{ logger.logError("[Parser] Se esperaban sentencias ejecutables en sentencia IF ELSE"); }
break;
case 67:
//#line 138 "./src/compilador/gramatica.y"
{ logger.logError("[Parser] Se esperaban sentencias ejecutables en sentencia IF"); }
break;
case 68:
//#line 142 "./src/compilador/gramatica.y"
{
		/* EN LAS FILMINAS ESTA INVERTIDO ... */
		polaca.generarPasoIncompleto("BI");
		polaca.completarPasoIncompleto();
		polaca.apilar(polaca.polacaSize() - 1);
	}
break;
case 69:
//#line 148 "./src/compilador/gramatica.y"
{
		polaca.generarPasoIncompleto("BI");
		polaca.completarPasoIncompleto();
		polaca.apilar(polaca.polacaSize() - 1);
	}
break;
case 70:
//#line 153 "./src/compilador/gramatica.y"
{ logger.logError("[Parser] Se esperaban un simbolo '}' en el bloque"); }
break;
case 71:
//#line 154 "./src/compilador/gramatica.y"
{ logger.logError("[Parser] Se esperaban un simbolo '{' en el bloque"); }
break;
case 72:
//#line 155 "./src/compilador/gramatica.y"
{ logger.logError("[Parser] Se esperaban sentencias ejecutables dentro del bloque"); }
break;
case 73:
//#line 156 "./src/compilador/gramatica.y"
{ logger.logError("[Parser] No se permiten declaraciones de variables dentro de bloque de sentencias ejecutables"); }
break;
case 76:
//#line 162 "./src/compilador/gramatica.y"
{ logger.logError("[Parser] Se esperaban un simbolo '}' en el bloque"); }
break;
case 77:
//#line 163 "./src/compilador/gramatica.y"
{ logger.logError("[Parser] Se esperaban un simbolo '{' en el bloque"); }
break;
case 78:
//#line 164 "./src/compilador/gramatica.y"
{ logger.logError("[Parser] Se esperaban sentencias ejecutables dentro del bloque"); }
break;
case 79:
//#line 165 "./src/compilador/gramatica.y"
{ logger.logError("[Parser] No se permiten declaraciones de variables dentro de bloque de sentencias ejecutables"); }
break;
case 80:
//#line 169 "./src/compilador/gramatica.y"
{
		if (val_peek(0).sval.equals("DO")){
			polaca.apilar(polaca.getPosicion() + 1);
		}
		else{
			polaca.apilar(polaca.polacaSize() - polaca.getContador() + 1);
		}
		polaca.resetContador();
	}
break;
case 81:
//#line 180 "./src/compilador/gramatica.y"
{
		if (val_peek(0).sval.equals("DO"))
			polaca.apilar(polaca.getPosicion() + 1);
		else
			polaca.apilar(polaca.polacaSize() - polaca.getContador() + 1);
		polaca.resetContador();
	}
break;
case 84:
//#line 191 "./src/compilador/gramatica.y"
{ logger.logError("[Parser] Se esperaban un simbolo '}' en el bloque"); }
break;
case 85:
//#line 192 "./src/compilador/gramatica.y"
{ logger.logError("[Parser] Se esperaban un simbolo '{' en el bloque"); }
break;
case 86:
//#line 193 "./src/compilador/gramatica.y"
{ logger.logError("[Parser] Se esperaban sentencias ejecutables dentro del bloque"); }
break;
case 87:
//#line 194 "./src/compilador/gramatica.y"
{ logger.logError("[Parser] No se permiten declaraciones de variables dentro de bloque de sentencias ejecutables"); }
break;
case 88:
//#line 198 "./src/compilador/gramatica.y"
{
		polaca.generarPasoIncompleto("BI");
		polaca.completarPasoIncompleto();
		polaca.apilar(polaca.polacaSize() - 1);
	}
break;
case 90:
//#line 204 "./src/compilador/gramatica.y"
{ logger.logError("[Parser] No se permiten declaraciones de variables dentro de bloque de sentencias ejecutables"); }
break;
case 91:
//#line 205 "./src/compilador/gramatica.y"
{
		polaca.generarPasoIncompleto("BI");
		polaca.completarPasoIncompleto();
		polaca.apilar(polaca.polacaSize() - 1);
	}
break;
case 92:
//#line 210 "./src/compilador/gramatica.y"
{
		polaca.generarPasoIncompleto("BI");
		polaca.completarPasoIncompleto();
		polaca.apilar(polaca.polacaSize() - 1);
	}
break;
case 93:
//#line 215 "./src/compilador/gramatica.y"
{
		polaca.generarPasoIncompleto("BI");
		polaca.completarPasoIncompleto();
		polaca.apilar(polaca.polacaSize() - 1);
	}
break;
case 94:
//#line 220 "./src/compilador/gramatica.y"
{ logger.logError("[Parser] Se esperaban un simbolo '{' en el bloque"); }
break;
case 95:
//#line 221 "./src/compilador/gramatica.y"
{ logger.logError("[Parser] Se esperaban un simbolo '{' en el bloque"); }
break;
case 96:
//#line 222 "./src/compilador/gramatica.y"
{ logger.logError("[Parser] Se esperaban un simbolo '}' en el bloque"); }
break;
case 97:
//#line 223 "./src/compilador/gramatica.y"
{ logger.logError("[Parser] Se esperaban un simbolo '}' en el bloque"); }
break;
case 98:
//#line 224 "./src/compilador/gramatica.y"
{ logger.logError("[Parser] Se esperaban sentencias ejecutables en bloque de sentencias ejecutables"); }
break;
case 101:
//#line 230 "./src/compilador/gramatica.y"
{ logger.logError("[Parser] No se permiten declaraciones de variables dentro de bloque de sentencias ejecutables"); }
break;
case 105:
//#line 234 "./src/compilador/gramatica.y"
{ logger.logError("[Parser] Se esperaban un simbolo '{' en el bloque"); }
break;
case 106:
//#line 235 "./src/compilador/gramatica.y"
{ logger.logError("[Parser] Se esperaban un simbolo '{' en el bloque"); }
break;
case 107:
//#line 236 "./src/compilador/gramatica.y"
{ logger.logError("[Parser] Se esperaban un simbolo '}' en el bloque"); }
break;
case 108:
//#line 237 "./src/compilador/gramatica.y"
{ logger.logError("[Parser] Se esperaban un simbolo '}' en el bloque"); }
break;
case 109:
//#line 238 "./src/compilador/gramatica.y"
{ logger.logError("[Parser] Se esperaban sentencias ejecutables en bloque de sentencias ejecutables"); }
break;
case 112:
//#line 244 "./src/compilador/gramatica.y"
{ logger.logError("[Parser] No se permiten declaraciones de variables dentro de bloque de sentencias ejecutables"); }
break;
case 116:
//#line 248 "./src/compilador/gramatica.y"
{ logger.logError("[Parser] Se esperaban un simbolo '{' en el bloque"); }
break;
case 117:
//#line 249 "./src/compilador/gramatica.y"
{ logger.logError("[Parser] Se esperaban un simbolo '{' en el bloque"); }
break;
case 118:
//#line 250 "./src/compilador/gramatica.y"
{ logger.logError("[Parser] Se esperaban un simbolo '}' en el bloque"); }
break;
case 119:
//#line 251 "./src/compilador/gramatica.y"
{ logger.logError("[Parser] Se esperaban un simbolo '}' en el bloque"); }
break;
case 120:
//#line 252 "./src/compilador/gramatica.y"
{ logger.logError("[Parser] Se esperaban sentencias ejecutables en bloque de sentencias ejecutables"); }
break;
case 121:
//#line 256 "./src/compilador/gramatica.y"
{ logger.logError("[Parser] Codigo inalcanzable luego del RETURN, se ignorara"); }
break;
case 122:
//#line 257 "./src/compilador/gramatica.y"
{ logger.logError("[Parser] Codigo inalcanzable luego del RETURN, se ignorara"); }
break;
case 127:
//#line 268 "./src/compilador/gramatica.y"
{ logger.logError("[Parser] No se aceptan declaraciones de variables en sentencias ejecutables"); }
break;
case 128:
//#line 269 "./src/compilador/gramatica.y"
{ logger.logError("[Parser] No se aceptan declaraciones de variables en sentencias ejecutables"); }
break;
case 131:
//#line 275 "./src/compilador/gramatica.y"
{ logger.logError("[Parser] No se aceptan declaraciones de variables en sentencias ejecutables"); }
break;
case 132:
//#line 276 "./src/compilador/gramatica.y"
{ logger.logError("[Parser] No se aceptan declaraciones de variables en sentencias ejecutables"); }
break;
case 133:
//#line 280 "./src/compilador/gramatica.y"
{
		logger.logSuccess("[Parser] Sentencia PRINT detectada");
		val_peek(1).sval = val_peek(1).sval.replace("% ", "").replace("%", "");
		polaca.agregarElemento(val_peek(1).sval);
		polaca.agregarElemento(val_peek(2).sval);
	}
break;
case 134:
//#line 286 "./src/compilador/gramatica.y"
{ logger.logError("[Parser] Se esperaba un simbolo ',' en Sentencia PRINT"); }
break;
case 135:
//#line 287 "./src/compilador/gramatica.y"
{ logger.logError("[Parser] Se esperaba CADENA en Sentencia PRINT"); }
break;
case 136:
//#line 288 "./src/compilador/gramatica.y"
{ logger.logError("[Parser] Se esperaba una CADENA y se encontro un IDENTIFICADOR en sentencia PRINT"); }
break;
case 137:
//#line 289 "./src/compilador/gramatica.y"
{ logger.logError("[Parser] Se esperaba un simbolo ',' en sentencia PRINT"); }
break;
case 138:
//#line 290 "./src/compilador/gramatica.y"
{ logger.logError("[Parser] Se esperaba una CADENA y se encontro una constante en sentencia PRINT"); }
break;
case 139:
//#line 291 "./src/compilador/gramatica.y"
{ logger.logError("[Parser] Se esperaba un simbolo ',' en sentencia PRINT"); }
break;
case 140:
//#line 296 "./src/compilador/gramatica.y"
{ 

		if (val_peek(4).sval.contains(".")) {
			boolean esCadenaValida = genCodigoIntermedio.esCadenaDeLlamadasValida(val_peek(4).sval);

			if (esCadenaValida) {
				logger.logSuccess("[Codigo Intermedio] La cadena de llamadas " + val_peek(4).sval + " es valida ");

				boolean tieneParam = genCodigoIntermedio.tieneParametroElMetodoLlamado(val_peek(4).sval);

				if (tieneParam) {
					logger.logSuccess("[Codigo Intermedio] Se llamo al metodo " + val_peek(4).sval + " correctamente con un parametro");
					String[] cadena = val_peek(4).sval.split("\\.");
					String salto = "";
					if (cadena.length == 2){
						String ambito = genCodigoIntermedio.existeIdentificadorDeClaseEnAlgunAmbitoContenedor(cadena[0]);
						salto = genCodigoIntermedio.generarAmbito() + ":" + TS.getAtributo(cadena[0] + ambito, Constantes.TYPE) + ":" + cadena[cadena.length - 1];
					}
					else
						salto = genCodigoIntermedio.generarAmbito() + ":" + cadena[cadena.length - 2] + ":" + cadena[cadena.length - 1];
					polaca.generarPasoIncompleto("BI");
					polaca.completarPasoIncompletoInvocacion(salto + ":TAG", false);
				} else {
					logger.logError("[Codigo Intermedio] Se esperaba llamar al metodo " + val_peek(4).sval + " sin parametro");
				}
			} else {
				logger.logError("[Codigo Intermedio] La cadena de llamadas " + val_peek(4).sval + " no es valida ");
			}
		} else {
			String ambito = genCodigoIntermedio.existeIdentificadorEnAlgunAmbitoContenedor(val_peek(4).sval);
			if (!ambito.isEmpty()){
				if (!(boolean) TS.getAtributo(val_peek(4).sval + ambito, Constantes.TIENE_PARAMETRO)){
					logger.logError("[Generacion codigo] Cantidad de parametros incorrecta para la funcion " + val_peek(4).sval);
				}
				else {
					polaca.generarPasoIncompleto("BI");
					polaca.completarPasoIncompletoInvocacion(ambito + ":" + val_peek(4).sval + ":TAG", true);
				}
			}
		}
	}
break;
case 141:
//#line 337 "./src/compilador/gramatica.y"
{ 
		logger.logSuccess("[Parser] Invocacion de funcion sin expresion detectada");

		if (val_peek(3).sval.contains(".")) {

			boolean esCadenaValida = genCodigoIntermedio.esCadenaDeLlamadasValida(val_peek(3).sval);

			if (esCadenaValida) {

				logger.logSuccess("[Codigo Intermedio] La cadena de llamadas " + val_peek(3).sval + " es valida ");

				boolean tieneParam = genCodigoIntermedio.tieneParametroElMetodoLlamado(val_peek(3).sval);

				if (!tieneParam) {
					logger.logSuccess("[Codigo Intermedio] Se llamo al metodo " + val_peek(3).sval + " correctamente sin parametro");
					String[] cadena = val_peek(3).sval.split("\\.");
					String salto = "";
					if (cadena.length == 2){
						String ambito = genCodigoIntermedio.existeIdentificadorDeClaseEnAlgunAmbitoContenedor(cadena[0]);
						salto = genCodigoIntermedio.generarAmbito() + ":" + TS.getAtributo(cadena[0] + ambito, Constantes.TYPE) + ":" + cadena[cadena.length - 1];
					}
					else
						salto = genCodigoIntermedio.generarAmbito() + ":" + cadena[cadena.length - 2] + ":" + cadena[cadena.length - 1];
					
					polaca.generarPasoIncompleto("BI");
					polaca.completarPasoIncompletoInvocacion(salto + ":TAG", false);
				} else {
					logger.logError("[Codigo Intermedio] Se esperaba llamar al metodo " + val_peek(3).sval + " con un parametro");
				}
			} else {
				logger.logError("[Codigo Intermedio] La cadena de llamadas " + val_peek(3).sval + " no es valida ");
			}
		} else {
			String ambito = genCodigoIntermedio.existeIdentificadorEnAlgunAmbitoContenedor(val_peek(3).sval);
			if (!ambito.isEmpty()) {
				if (TS.getAtributo(val_peek(3).sval + ambito, Constantes.USE) == Constantes.NOMBRE_FUNCION) {
					if ((boolean) TS.getAtributo(val_peek(3).sval + ambito, Constantes.TIENE_PARAMETRO)) {
						logger.logError("[Generacion codigo] Cantidad de parametros incorrecta para la funcion " + val_peek(3).sval);
					}
					else{
						polaca.generarPasoIncompleto("BI");
						polaca.completarPasoIncompletoInvocacion(ambito + ":" + val_peek(3).sval + ":TAG", false);
					}
				} else {
					logger.logError("[Codigo intermedio] El identificador " + val_peek(3).sval + " no es una funcion");
				}
			} else {
				logger.logError("[Codigo intermedio] El identificador " + val_peek(3).sval + " no esta declarado");
			}
		}
	}
break;
case 142:
//#line 388 "./src/compilador/gramatica.y"
{ logger.logError("[Parser] Invocacion de funcion con multiples expresiones detectada, se preserva solo la primera expresion"); }
break;
case 143:
//#line 389 "./src/compilador/gramatica.y"
{ logger.logError("[Parser] Se esperaba un simbolo ',' en invocacion de funcion"); }
break;
case 144:
//#line 390 "./src/compilador/gramatica.y"
{ logger.logError("[Parser] Se esperaba un simbolo ',' en invocacion de funcion"); }
break;
case 145:
//#line 391 "./src/compilador/gramatica.y"
{ logger.logError("[Parser] Se esperaba un simbolo ',' en invocacion de funcion"); }
break;
case 148:
//#line 400 "./src/compilador/gramatica.y"
{ 
		logger.logSuccess("[Parser] Asignacion detectada");
		/** Se llama a miembro de clase */ 
		if (val_peek(3).sval.contains(".")) {

			boolean esCadenaValida = genCodigoIntermedio.esCadenaDeLlamadasValida(val_peek(3).sval);

			if (esCadenaValida) {

				String[] partes = val_peek(3).sval.split("\\."); 
				String ambito = genCodigoIntermedio.existeIdentificadorEnAlgunAmbitoContenedor(partes[0]);

				polaca.agregarElemento(val_peek(3).sval);
				polaca.agregarElemento(val_peek(2).sval);
				TS.agregarAtributo(partes[0] + ambito, Constantes.COMPROBACION_USO, true);
			}
		} else {
			String ambito = genCodigoIntermedio.existeIdentificadorEnAlgunAmbitoContenedor(val_peek(3).sval);

			/** @TODO "expresion" parece apilar cosas en la polaca, pero recien aca sabemos si la asignacion
				es sintacticamente correcta, capaz se pueda procesar aca la expresion o desapilar */
			if (!ambito.isEmpty()) {
				polaca.agregarElemento(val_peek(3).sval + ambito);
				polaca.agregarElemento(val_peek(2).sval);
				TS.agregarAtributo(val_peek(3).sval + ambito, Constantes.COMPROBACION_USO, true);
			} else {
				/* Si la variable no fue declarada, descarto los elementos apilados en la polaca*/
				polaca.removeElementos();
				logger.logError("[Codigo intermedio] El identificador " + val_peek(3).sval + " no esta declarado");
			}
		}
	}
break;
case 149:
//#line 432 "./src/compilador/gramatica.y"
{ logger.logError("[Parser] Se esperaba un simbolo ',' en sentencia asignacion"); }
break;
case 150:
//#line 433 "./src/compilador/gramatica.y"
{ logger.logError("[Parser] Se esperaba expresion del lado derecho en sentencia asignacion"); }
break;
case 151:
//#line 437 "./src/compilador/gramatica.y"
{
		yyval.sval = val_peek(0).sval;
	}
break;
case 152:
//#line 440 "./src/compilador/gramatica.y"
{
		yyval.sval = val_peek(2).sval + "." + val_peek(0).sval;
	}
break;
case 157:
//#line 453 "./src/compilador/gramatica.y"
{ 
		logger.logSuccess("[Parser] Declaracion de lista de variables detectado");
		genCodigoIntermedio.agregarTipoAListaDeVariables(val_peek(2).sval);
		genCodigoIntermedio.agregarUsoAListaDeVariables(Constantes.USO_VARIABLE);
		genCodigoIntermedio.agregarAmbitoAListaDeVariables();
		genCodigoIntermedio.removerListaVariablesADeclarar();
	}
break;
case 158:
//#line 460 "./src/compilador/gramatica.y"
{ logger.logError("[Parser] Se esperaba un simbolo ',' en sentencia declaracion de variables"); }
break;
case 159:
//#line 461 "./src/compilador/gramatica.y"
{ logger.logError("[Parser] Se esperaba una lista de variables en sentencia declaracion de variables"); }
break;
case 160:
//#line 465 "./src/compilador/gramatica.y"
{
		TS.agregarAtributo(val_peek(0).sval, Constantes.USE, Constantes.NOMBRE_INTERFAZ);
		TS.agregarAtributo(val_peek(0).sval, Constantes.METODOS, null);
		/*Agrego Ambito a identificador*/
		TS.swapLexemas(val_peek(0).sval, val_peek(0).sval + genCodigoIntermedio.generarAmbito());
		genCodigoIntermedio.setAmbitoClaseInterfaz(val_peek(0).sval);
	}
break;
case 161:
//#line 472 "./src/compilador/gramatica.y"
{ logger.logError("[Parser] Se esperaba un identificador en declaracion de INTERFACE"); }
break;
case 162:
//#line 476 "./src/compilador/gramatica.y"
{ 
		logger.logSuccess("[Parser] Declaracion de INTERFACE detectada");
		genCodigoIntermedio.clearAmbitoClaseInterfaz();
	}
break;
case 163:
//#line 480 "./src/compilador/gramatica.y"
{ logger.logError("[Parser] Se esperaba un simbolo '{' en declaracion de INTERFACE"); }
break;
case 167:
//#line 490 "./src/compilador/gramatica.y"
{ logger.logError("[Parser] Se esperaba un simbolo ',' en declaracion de metodo en CLASS"); }
break;
case 168:
//#line 494 "./src/compilador/gramatica.y"
{ 
		logger.logSuccess("[Parser] Declaracion de lista de variables en CLASS detectado"); 
		genCodigoIntermedio.agregarTipoAListaDeVariables(val_peek(2).sval);
		genCodigoIntermedio.agregarUsoAListaDeVariables(Constantes.USO_ATRIBUTO);
		genCodigoIntermedio.agregarAmbitoAListaDeAtributos();
		genCodigoIntermedio.agregarListaDeVariablesComoAtributos();
		genCodigoIntermedio.removerListaVariablesADeclarar();
	}
break;
case 169:
//#line 502 "./src/compilador/gramatica.y"
{ logger.logError("[Parser] Se esperaba un simbolo ',' en declaracion de lista de variables en CLASS"); }
break;
case 171:
//#line 504 "./src/compilador/gramatica.y"
{ logger.logError("[Parser] Se encontro un simbolo inesperado ',' en declaracion de funcion en CLASS"); }
break;
case 172:
//#line 505 "./src/compilador/gramatica.y"
{

		String ambitoDeClase = genCodigoIntermedio.existeIdentificadorDeClaseEnAlgunAmbitoContenedor(val_peek(1).sval);

		if (!genCodigoIntermedio.existeIdentificadorDeClaseEnAlgunAmbitoContenedor(val_peek(1).sval).isEmpty()) {
			logger.logSuccess("[Codigo Intermedio] El identificador " + val_peek(1).sval + " esta declarado");

			int nivelesDeHerencia = (int) TS.getInstance().getAtributo(val_peek(1).sval + ambitoDeClase, Constantes.NIVELES_HERENCIA);

			/** Se permiten hasta 3 niveles de herencia, se hace +1 para ver si con la nueva herencia no se viola la restriccion */
			if (nivelesDeHerencia + 1 >= 3) {
				logger.logError("[Codigo Intermedio] Se superaron los niveles de herencia validos para la clase " + genCodigoIntermedio.getAmbitoClaseInterfaz());
			} else {

				String claseActual = genCodigoIntermedio.getAmbitoClaseInterfaz();
				String ambitoClaseActual = genCodigoIntermedio.existeIdentificadorDeClaseEnAlgunAmbitoContenedor(claseActual);
				String ambitoClaseDefinidaActual = ambitoClaseActual + ":" + claseActual;
				String nuevoLexema = val_peek(1).sval + ambitoClaseDefinidaActual;

				if (genCodigoIntermedio.verificaSobreescrituraDeAtributos(claseActual + ambitoClaseActual, val_peek(1).sval + ambitoDeClase)) {
					TS.getInstance().swapLexemas(val_peek(1).sval, nuevoLexema);
					TS.getInstance().agregarAtributo(nuevoLexema, Constantes.TYPE, val_peek(1).sval);
					TS.getInstance().agregarAtributo(nuevoLexema, Constantes.USE, "nombre_clase");

					int nivelesDeHerenciaMaximo = (int) TS.getInstance().getAtributo(claseActual + ambitoClaseActual, Constantes.NIVELES_HERENCIA);
					/** 
					*	En el caso de heredar de varias clases, con diferente nivel de herencia, se debe quedar
					* solo con el mayor nivel y evitar sobreescribir un nivel ya existente. 
					*/
					if (nivelesDeHerencia + 1 > nivelesDeHerenciaMaximo) {
						TS.getInstance().agregarAtributo(claseActual + ambitoClaseActual, Constantes.NIVELES_HERENCIA, nivelesDeHerencia + 1);
					}
				}
			}
		} else {
			logger.logError("[Codigo Intermedio] El identificador " + val_peek(1).sval + " no esta declarado");
		}
	}
break;
case 173:
//#line 546 "./src/compilador/gramatica.y"
{ 
		logger.logSuccess("[Parser] Declaracion de clase CLASS detectado");
		
		if (genCodigoIntermedio.implementaAlgunaInterfaz(val_peek(3).sval)) {
			if (genCodigoIntermedio.verificarImplementacionCompletaDeInterfaz(val_peek(3).sval)){
				logger.logSuccess("[Codigo Intermedio] Metodos declarados en interfaz fueron implementados correctamente para la clase " + val_peek(3).sval);
			}
			else{
				logger.logError("[Codigo Intermedio] No fueron implementados correctamente todos los metodos de la interfaz para la clase " + val_peek(3).sval);
			}
		}
		
		genCodigoIntermedio.clearAmbitoClaseInterfaz();
	}
break;
case 174:
//#line 563 "./src/compilador/gramatica.y"
{ 
		/*CHEQUEO QUE CLASE NO HAYA SIDO DECLARADA (DEBERIA CHEQUEAR USO, XQ PUEDE QUE IDENTIF PERTENEZCA A OTRA USO)*/
		if (!TS.has(val_peek(0).sval + genCodigoIntermedio.generarAmbito())) {
			TS.agregarAtributo(val_peek(0).sval, Constantes.USE, "nombre_clase");
			TS.agregarAtributo(val_peek(0).sval, Constantes.IMPLEMENTA, null);
			TS.agregarAtributo(val_peek(0).sval, Constantes.ATRIBUTOS, null);
			TS.agregarAtributo(val_peek(0).sval, Constantes.NIVELES_HERENCIA, 0);
			TS.swapLexemas(val_peek(0).sval, val_peek(0).sval + genCodigoIntermedio.generarAmbito());
			genCodigoIntermedio.setAmbitoClaseInterfaz(val_peek(0).sval);
			genCodigoIntermedio.apilarAmbito(val_peek(0).sval);
			yyval.sval = val_peek(0).sval;
		} else {
			logger.logError("[Codigo intermedio] Se intento volver a declarar el identificador " + val_peek(0).sval);
		}
	}
break;
case 175:
//#line 578 "./src/compilador/gramatica.y"
{
		/*CHEQUEO QUE CLASE NO HAYA SIDO DECLARADA (DEBERIA CHEQUEAR USO, XQ PUEDE QUE IDENTIF PERTENEZCA A OTRA USO)*/
		if (!TS.has(val_peek(2).sval + genCodigoIntermedio.generarAmbito())) {
			if (!genCodigoIntermedio.existeIdentificadorEnAlgunAmbitoContenedor(val_peek(0).sval).isEmpty()) {
				logger.logSuccess("[Codigo Intermedio] El identificador " + val_peek(0).sval + " esta declarado");
				TS.agregarAtributo(val_peek(2).sval, Constantes.USE, "nombre_clase");
				TS.agregarAtributo(val_peek(2).sval, Constantes.METODOS, null);
				TS.agregarAtributo(val_peek(2).sval, Constantes.NIVELES_HERENCIA, 0);
				/* REGISTRO EN LA TABLA DE SIMBOLOS, CUAL ES LA INTERFAZ QUE ESTA IMPLEMENTANDO*/
				TS.agregarAtributo(val_peek(2).sval, Constantes.IMPLEMENTA, val_peek(0).sval);
				/*Agrego Ambito a identificador*/
				TS.swapLexemas(val_peek(2).sval, val_peek(2).sval + genCodigoIntermedio.generarAmbito());
				genCodigoIntermedio.setAmbitoClaseInterfaz(val_peek(2).sval);
				genCodigoIntermedio.apilarAmbito(val_peek(2).sval);
				yyval.sval = val_peek(2).sval;
			} else {
				logger.logError("[Codigo Intermedio] El identificador " + val_peek(0).sval + " no esta declarado");
			}
		} else {
			logger.logError("[Codigo intermedio] Se intento volver a declarar el identificador " + val_peek(2).sval);
		}
	}
break;
case 176:
//#line 600 "./src/compilador/gramatica.y"
{ logger.logError("[Parser] Se esperaba un identificador en declaracion de clase"); }
break;
case 177:
//#line 601 "./src/compilador/gramatica.y"
{ logger.logError("[Parser] Se esperaba un identificador en declaracion de clase"); }
break;
case 178:
//#line 602 "./src/compilador/gramatica.y"
{ logger.logError("[Parser] Se esperaba un identificador en IMPLEMENT de clase"); }
break;
case 179:
//#line 603 "./src/compilador/gramatica.y"
{ logger.logError("[Parser] Se esperaba un identificador en declaracion de clase"); }
break;
case 182:
//#line 612 "./src/compilador/gramatica.y"
{ 
		logger.logSuccess("[Parser] Declaracion de funcion detectado");
		if (genCodigoIntermedio.isPuedoDesapilar()){
			/* ESTA LINEa ESTABA CON EL IF DE ARRIBA, Y NO ENTRABA NUNCA POR ESO NO SALIA DEL AMBITO, CAMBIA ALGO?*/
			if (genCodigoIntermedio.esDefinicionDeClase()) {
				if (genCodigoIntermedio.esMayorAMaximoNivelAnidamientoFuncionEnMetodo()) {
					logger.logError("[Parser] Se permite hasta un maximo de un nivel de anidamiento en una funcion dentro de un metodo de clase");
				}
			}
			genCodigoIntermedio.desapilarAmbito();
		}
		else 
			genCodigoIntermedio.setPuedoDesapilar();
	}
break;
case 183:
//#line 629 "./src/compilador/gramatica.y"
{
		/* CHEQUEO QUE LA FUNCION NO ESTE DECLARADA*/
		if (!TS.has(val_peek(3).sval + genCodigoIntermedio.generarAmbito())) {

			if (genCodigoIntermedio.esDefinicionDeClase()) {

				String claseActual = genCodigoIntermedio.getAmbitoClaseInterfaz();
				String ambitoClaseActual = genCodigoIntermedio.existeIdentificadorDeClaseEnAlgunAmbitoContenedor(claseActual);
				String ambitoClaseDefinidaActual = ambitoClaseActual + ":" + claseActual;
				String nuevoLexema = val_peek(3).sval + ambitoClaseDefinidaActual;

				TS.agregarAtributo(val_peek(3).sval, Constantes.USE, "nombre_metodo");
				TS.agregarAtributo(val_peek(3).sval, Constantes.TIENE_PARAMETRO, true);
				genCodigoIntermedio.agregarAtributoMetodos(val_peek(3).sval);
				/* Agrego Ambito a metodo*/
				TS.swapLexemas(val_peek(3).sval, nuevoLexema);
				/*Agrego Ambito a identificador*/
				TS.swapLexemas(val_peek(1).sval, val_peek(1).sval + ambitoClaseDefinidaActual + ":" + val_peek(3).sval);
				polaca.crearPolacaAmbitoNuevo(ambitoClaseDefinidaActual + ":" +  val_peek(3).sval);
				
			} else {
				TS.agregarAtributo(val_peek(3).sval, Constantes.USE, Constantes.NOMBRE_FUNCION);
				TS.agregarAtributo(val_peek(3).sval, Constantes.TIENE_PARAMETRO, true);
				/*Agrego Ambito a identificador*/
				TS.swapLexemas(val_peek(3).sval, val_peek(3).sval + genCodigoIntermedio.generarAmbito());
				
				/*Agrego Ambito a identificador*/
				TS.swapLexemas(val_peek(1).sval, val_peek(1).sval + genCodigoIntermedio.generarAmbito());
				polaca.crearPolacaAmbitoNuevo(genCodigoIntermedio.generarAmbito() + ":" + val_peek(3).sval);
			}
			genCodigoIntermedio.apilarAmbito(val_peek(3).sval);
		} else {
			logger.logError("[Codigo intermedio] Se intento volver a declarar el identificador " + val_peek(3).sval);
			genCodigoIntermedio.setPuedoDesapilar();
		}
	}
break;
case 184:
//#line 665 "./src/compilador/gramatica.y"
{
		/* CHEQUEO QUE LA FUNCION NO ESTE DECLARADA*/
		if (!TS.has(val_peek(2).sval + genCodigoIntermedio.generarAmbito())) {
			if (genCodigoIntermedio.esDefinicionDeClase()) {

				String claseActual = genCodigoIntermedio.getAmbitoClaseInterfaz();
				String ambitoClaseActual = genCodigoIntermedio.existeIdentificadorDeClaseEnAlgunAmbitoContenedor(claseActual);
				String ambitoClaseDefinidaActual = ambitoClaseActual + ":" + claseActual;
				String nuevoLexema = val_peek(2).sval + ambitoClaseDefinidaActual;

				polaca.crearPolacaAmbitoNuevo(ambitoClaseDefinidaActual + ":" +  val_peek(2).sval);
			

				TS.agregarAtributo(val_peek(2).sval, Constantes.USE, "nombre_metodo");
				TS.agregarAtributo(val_peek(2).sval, Constantes.TIENE_PARAMETRO, false);
				genCodigoIntermedio.agregarAtributoMetodos(val_peek(2).sval);
				/*Agrego Ambito a identificador*/
				TS.swapLexemas(val_peek(2).sval, nuevoLexema);
			} else {
				TS.agregarAtributo(val_peek(2).sval, Constantes.USE, Constantes.NOMBRE_FUNCION);
				TS.agregarAtributo(val_peek(2).sval, Constantes.TIENE_PARAMETRO, false);
				/*Agrego Ambito a identificador*/
				TS.swapLexemas(val_peek(2).sval, val_peek(2).sval + genCodigoIntermedio.generarAmbito());
				polaca.crearPolacaAmbitoNuevo(genCodigoIntermedio.generarAmbito() + ":" + val_peek(2).sval);
			}
			genCodigoIntermedio.apilarAmbito(val_peek(2).sval);
		} else {
			logger.logError("[Codigo intermedio] Se intento volver a declarar el identificador " + val_peek(2).sval);
			genCodigoIntermedio.setPuedoDesapilar();
		}
	}
break;
case 185:
//#line 696 "./src/compilador/gramatica.y"
{ logger.logError("[Parser] Encabezado de funcion con mas de 1 parametro detectado, se preserva solo el primer parametro"); }
break;
case 186:
//#line 697 "./src/compilador/gramatica.y"
{ logger.logError("[Parser] Encabezado de funcion con mas de 1 parametro detectado, se preserva solo el primer parametro"); }
break;
case 187:
//#line 698 "./src/compilador/gramatica.y"
{ logger.logError("[Parser] Se esperaba un simbolo '(' en el encabezado de la funcion"); }
break;
case 188:
//#line 702 "./src/compilador/gramatica.y"
{
		yyval.sval = val_peek(0).sval;
	}
break;
case 189:
//#line 705 "./src/compilador/gramatica.y"
{
		logger.logError("[Parser] Se esperaba un identificador en el encabezado de la funcion"); 
	}
break;
case 190:
//#line 711 "./src/compilador/gramatica.y"
{ 

		String claseActual = genCodigoIntermedio.getAmbitoClaseInterfaz();
		String ambitoClaseActual = genCodigoIntermedio.existeIdentificadorDeClaseEnAlgunAmbitoContenedor(claseActual);
		String ambitoClaseDefinidaActual = ambitoClaseActual + ":" + claseActual;
		String nuevoLexema = val_peek(3).sval + ambitoClaseDefinidaActual;

		TS.agregarAtributo(val_peek(3).sval, Constantes.USE, "nombre_metodo");
		TS.agregarAtributo(val_peek(3).sval, Constantes.TIENE_PARAMETRO , true);
		TS.swapLexemas(val_peek(3).sval, nuevoLexema);
		genCodigoIntermedio.agregarAtributoMetodos(val_peek(3).sval);
		TS.swapLexemas(val_peek(1).sval, val_peek(1).sval + ambitoClaseDefinidaActual + ":" + val_peek(3).sval);
	}
break;
case 191:
//#line 724 "./src/compilador/gramatica.y"
{ 
		String claseActual = genCodigoIntermedio.getAmbitoClaseInterfaz();
		String ambitoClaseActual = genCodigoIntermedio.existeIdentificadorDeClaseEnAlgunAmbitoContenedor(claseActual);
		String ambitoClaseDefinidaActual = ambitoClaseActual + ":" + claseActual;
		String nuevoLexema = val_peek(2).sval + ambitoClaseDefinidaActual;

		TS.agregarAtributo(val_peek(2).sval, Constantes.USE, "nombre_metodo");
		TS.agregarAtributo(val_peek(2).sval, Constantes.TIENE_PARAMETRO , false);
		TS.swapLexemas(val_peek(2).sval, nuevoLexema);
		genCodigoIntermedio.agregarAtributoMetodos(val_peek(2).sval);
	}
break;
case 192:
//#line 735 "./src/compilador/gramatica.y"
{ logger.logError("[Parser] Encabezado de funcion con mas de 1 parametro detectado, se preserva solo el primer parametro"); }
break;
case 193:
//#line 736 "./src/compilador/gramatica.y"
{ logger.logError("[Parser] Encabezado de funcion con mas de 1 parametro detectado, se preserva solo el primer parametro"); }
break;
case 194:
//#line 737 "./src/compilador/gramatica.y"
{ logger.logError("[Parser] Se esperaba un identificador en el encabezado de la funcion"); }
break;
case 195:
//#line 738 "./src/compilador/gramatica.y"
{ logger.logError("[Parser] Se esperaba un identificador en el encabezado de la funcion"); }
break;
case 196:
//#line 739 "./src/compilador/gramatica.y"
{ logger.logError("[Parser] Se esperaba un simbolo '(' en el encabezado de la funcion"); }
break;
case 197:
//#line 740 "./src/compilador/gramatica.y"
{ logger.logError("[Parser] Se esperaba un simbolo '(' en el encabezado de la funcion"); }
break;
case 202:
//#line 748 "./src/compilador/gramatica.y"
{ logger.logError("[Parser] Se esperaba una sentencia RETURN al final de la funcion"); }
break;
case 203:
//#line 749 "./src/compilador/gramatica.y"
{ logger.logError("[Parser] Se esperaba una sentencia RETURN al final de la funcion"); }
break;
case 204:
//#line 750 "./src/compilador/gramatica.y"
{ logger.logError("[Parser] Se esperaba un simbolo '{' en el cuerpo de la funcion"); }
break;
case 205:
//#line 751 "./src/compilador/gramatica.y"
{ logger.logError("[Parser] Se esperaba un simbolo '{' en el cuerpo de la funcion"); }
break;
case 206:
//#line 752 "./src/compilador/gramatica.y"
{ logger.logError("[Parser] Se esperaba un simbolo '{' en el cuerpo de la funcion"); }
break;
case 207:
//#line 753 "./src/compilador/gramatica.y"
{ logger.logError("[Parser] Se esperaba un simbolo '{' en el cuerpo de la funcion"); }
break;
case 208:
//#line 754 "./src/compilador/gramatica.y"
{ logger.logError("[Parser] Se esperaba un simbolo '{' en el cuerpo de la funcion"); }
break;
case 209:
//#line 755 "./src/compilador/gramatica.y"
{ logger.logError("[Parser] Se esperaba un simbolo '{' en el cuerpo de la funcion"); }
break;
case 210:
//#line 759 "./src/compilador/gramatica.y"
{ logger.logError("[Parser] Codigo inalcanzable luego del RETURN, se ignorara"); }
break;
case 211:
//#line 760 "./src/compilador/gramatica.y"
{ logger.logError("[Parser] Codigo inalcanzable luego del RETURN, se ignorara"); }
break;
case 218:
//#line 776 "./src/compilador/gramatica.y"
{ 
		yyval.sval = val_peek(0).sval;
		TS.agregarAtributo(val_peek(0).sval, Constantes.USE, "nombre_parametro");
		/* Agrego tipo a parametro de funcion*/
		TS.agregarAtributo(val_peek(0).sval, Constantes.TYPE, val_peek(1).sval);
	}
break;
case 219:
//#line 785 "./src/compilador/gramatica.y"
{ 
		if (!genCodigoIntermedio.variableRedeclarada(val_peek(0).sval)) {
			genCodigoIntermedio.agregarVariableADeclarar(val_peek(0).sval);
		} else {
			logger.logError("[Codigo intermedio] Se intento volver a declarar el identificador " + val_peek(0).sval);
		}
	}
break;
case 220:
//#line 792 "./src/compilador/gramatica.y"
{ 
		if (!genCodigoIntermedio.variableRedeclarada(val_peek(0).sval)) {
			genCodigoIntermedio.agregarVariableADeclarar(val_peek(0).sval);
		} else {
			logger.logError("[Codigo intermedio] Se intento volver a declarar el identificador " + val_peek(0).sval);
		}
	}
break;
case 224:
//#line 805 "./src/compilador/gramatica.y"
{
		if (!genCodigoIntermedio.existeIdentificadorEnAlgunAmbitoContenedor(val_peek(0).sval).isEmpty()) {
			logger.logSuccess("[Codigo Intermedio] El identificador " + val_peek(0).sval + " esta declarado");
		} else {
			logger.logError("[Codigo Intermedio] El identificador " + val_peek(0).sval + " no esta declarado");
		}
	}
break;
case 225:
//#line 815 "./src/compilador/gramatica.y"
{
		polaca.agregarElemento(val_peek(1).sval);
		polaca.generarPasoIncompleto("BF");
		polaca.apilar(polaca.polacaSize() - 1);
	}
break;
case 226:
//#line 820 "./src/compilador/gramatica.y"
{ logger.logError("[Parser] Se esperaba una expresion del lado derecho de la comparacion"); }
break;
case 227:
//#line 821 "./src/compilador/gramatica.y"
{ logger.logError("[Parser] Se esperaba una expresion del lado izquierdo de la comparacion"); }
break;
case 228:
//#line 822 "./src/compilador/gramatica.y"
{ logger.logError("[Parser] Se esperaba un comparador valido en la comparacion"); }
break;
case 235:
//#line 835 "./src/compilador/gramatica.y"
{
		polaca.agregarElemento(val_peek(1).sval);}
break;
case 236:
//#line 837 "./src/compilador/gramatica.y"
{
		polaca.agregarElemento(val_peek(1).sval);}
break;
case 238:
//#line 843 "./src/compilador/gramatica.y"
{ polaca.agregarElemento(val_peek(1).sval); }
break;
case 239:
//#line 844 "./src/compilador/gramatica.y"
{ polaca.agregarElemento(val_peek(1).sval); }
break;
case 241:
//#line 849 "./src/compilador/gramatica.y"
{

		String ambito = genCodigoIntermedio.existeIdentificadorEnAlgunAmbitoContenedor(val_peek(0).sval);

		if (!ambito.isEmpty()) {
			logger.logSuccess("[Codigo Intermedio] El identificador " + val_peek(0).sval + " esta declarado");
			TS.removeLexema(val_peek(0).sval);
			polaca.agregarElemento(val_peek(0).sval + ambito);
		} else {
			polaca.removeElementos();
			logger.logError("[Codigo Intermedio] El identificador " + val_peek(0).sval + " no esta declarado");
		}
	}
break;
case 242:
//#line 862 "./src/compilador/gramatica.y"
{

		String ambito = genCodigoIntermedio.existeIdentificadorEnAlgunAmbitoContenedor(val_peek(1).sval);

		if (!ambito.isEmpty()) {
			logger.logSuccess("[Codigo Intermedio] El identificador " + val_peek(1).sval + " esta declarado");
			polaca.agregarElemento(val_peek(1).sval + ambito);
			polaca.agregarElemento("1");
			polaca.agregarElemento("-");

		} else {
			logger.logError("[Codigo Intermedio] El identificador " + val_peek(1).sval + " no esta declarado");
		}
	}
break;
case 243:
//#line 876 "./src/compilador/gramatica.y"
{ polaca.agregarElemento(val_peek(0).sval);}
break;
case 244:
//#line 877 "./src/compilador/gramatica.y"
{ logger.logError("[Parser] No se admiten expresiones entre parentesis"); }
break;
case 245:
//#line 881 "./src/compilador/gramatica.y"
{ corregirConstantePositivaEntera(val_peek(0).sval); }
break;
case 246:
//#line 882 "./src/compilador/gramatica.y"
{ constanteConSigno(val_peek(0).sval); }
break;
//#line 2493 "Parser.java"
//########## END OF USER-SUPPLIED ACTIONS ##########
    }//switch
    //#### Now let's reduce... ####
    if (yydebug) debug("reduce");
    state_drop(yym);             //we just reduced yylen states
    yystate = state_peek(0);     //get new state
    val_drop(yym);               //corresponding value drop
    yym = yylhs[yyn];            //select next TERMINAL(on lhs)
    if (yystate == 0 && yym == 0)//done? 'rest' state and at first TERMINAL
      {
      if (yydebug) debug("After reduction, shifting from state 0 to state "+YYFINAL+"");
      yystate = YYFINAL;         //explicitly say we're done
      state_push(YYFINAL);       //and save it
      val_push(yyval);           //also save the semantic value of parsing
      if (yychar < 0)            //we want another character?
        {
        yychar = yylex();        //get next character
        if (yychar<0) yychar=0;  //clean, if necessary
        if (yydebug)
          yylexdebug(yystate,yychar);
        }
      if (yychar == 0)          //Good exit (if lex returns 0 ;-)
         break;                 //quit the loop--all DONE
      }//if yystate
    else                        //else not done yet
      {                         //get next state and push, for next yydefred[]
      yyn = yygindex[yym];      //find out where to go
      if ((yyn != 0) && (yyn += yystate) >= 0 &&
            yyn <= YYTABLESIZE && yycheck[yyn] == yystate)
        yystate = yytable[yyn]; //get new state
      else
        yystate = yydgoto[yym]; //else go to new defred
      if (yydebug) debug("after reduction, shifting from state "+state_peek(0)+" to state "+yystate+"");
      state_push(yystate);     //going again, so push state & val...
      val_push(yyval);         //for next action
      }
    }//main loop
  return 0;//yyaccept!!
}
//## end of method parse() ######################################



//## run() --- for Thread #######################################
/**
 * A default run method, used for operating this parser
 * object in the background.  It is intended for extending Thread
 * or implementing Runnable.  Turn off with -Jnorun .
 */
public void run()
{
  yyparse();
}
//## end of method run() ########################################



//## Constructors ###############################################
/**
 * Default constructor.  Turn off with -Jnoconstruct .

 */
public Parser()
{
  //nothing to do
}


/**
 * Create a parser, setting the debug to true or false.
 * @param debugMe true for debugging, false for no debug.
 */
public Parser(boolean debugMe)
{
  yydebug=debugMe;
}
//###############################################################



}
//################### END OF CLASS ##############################
