//### This file created by BYACC 1.8(/Java extension  1.15)
//### Java capabilities added 7 Jan 97, Bob Jamison
//### Updated : 27 Nov 97  -- Bob Jamison, Joe Nieten
//###           01 Jan 98  -- Bob Jamison -- fixed generic semantic constructor
//###           01 Jun 99  -- Bob Jamison -- added Runnable support
//###           06 Aug 00  -- Bob Jamison -- made state variables class-global
//###           03 Jan 01  -- Bob Jamison -- improved flags, tracing
//###           16 May 01  -- Bob Jamison -- added custom stack sizing
//###           04 Mar 02  -- Yuval Oren  -- improved java performance, added options
//###           14 Mar 02  -- Tomas Hurka -- -d support, static initializer workaround
//### Please send bug reports to tom@hukatronic.cz
//### static char yysccsid[] = "@(#)yaccpar	1.8 (Berkeley) 01/20/90";






//#line 2 ".\gramatica.y"
package compilador;
import java.io.File;
//#line 20 "Parser.java"




public class Parser
{

boolean yydebug;        //do I want debug output?
int yynerrs;            //number of errors so far
int yyerrflag;          //was there an error?
int yychar;             //the current working character

//########## MESSAGES ##########
//###############################################################
// method: debug
//###############################################################
void debug(String msg)
{
  if (yydebug)
    System.out.println(msg);
}

//########## STATE STACK ##########
final static int YYSTACKSIZE = 500;  //maximum stack size
int statestk[] = new int[YYSTACKSIZE]; //state stack
int stateptr;
int stateptrmax;                     //highest index of stackptr
int statemax;                        //state when highest index reached
//###############################################################
// methods: state stack push,pop,drop,peek
//###############################################################
final void state_push(int state)
{
  try {
		stateptr++;
		statestk[stateptr]=state;
	 }
	 catch (ArrayIndexOutOfBoundsException e) {
     int oldsize = statestk.length;
     int newsize = oldsize * 2;
     int[] newstack = new int[newsize];
     System.arraycopy(statestk,0,newstack,0,oldsize);
     statestk = newstack;
     statestk[stateptr]=state;
  }
}
final int state_pop()
{
  return statestk[stateptr--];
}
final void state_drop(int cnt)
{
  stateptr -= cnt; 
}
final int state_peek(int relative)
{
  return statestk[stateptr-relative];
}
//###############################################################
// method: init_stacks : allocate and prepare stacks
//###############################################################
final boolean init_stacks()
{
  stateptr = -1;
  val_init();
  return true;
}
//###############################################################
// method: dump_stacks : show n levels of the stacks
//###############################################################
void dump_stacks(int count)
{
int i;
  System.out.println("=index==state====value=     s:"+stateptr+"  v:"+valptr);
  for (i=0;i<count;i++)
    System.out.println(" "+i+"    "+statestk[i]+"      "+valstk[i]);
  System.out.println("======================");
}


//########## SEMANTIC VALUES ##########
//public class ParserVal is defined in ParserVal.java


String   yytext;//user variable to return contextual strings
ParserVal yyval; //used to return semantic vals from action routines
ParserVal yylval;//the 'lval' (result) I got from yylex()
ParserVal valstk[];
int valptr;
//###############################################################
// methods: value stack push,pop,drop,peek.
//###############################################################
void val_init()
{
  valstk=new ParserVal[YYSTACKSIZE];
  yyval=new ParserVal();
  yylval=new ParserVal();
  valptr=-1;
}
void val_push(ParserVal val)
{
  if (valptr>=YYSTACKSIZE)
    return;
  valstk[++valptr]=val;
}
ParserVal val_pop()
{
  if (valptr<0)
    return new ParserVal();
  return valstk[valptr--];
}
void val_drop(int cnt)
{
int ptr;
  ptr=valptr-cnt;
  if (ptr<0)
    return;
  valptr = ptr;
}
ParserVal val_peek(int relative)
{
int ptr;
  ptr=valptr-relative;
  if (ptr<0)
    return new ParserVal();
  return valstk[ptr];
}
final ParserVal dup_yyval(ParserVal val)
{
  ParserVal dup = new ParserVal();
  dup.ival = val.ival;
  dup.dval = val.dval;
  dup.sval = val.sval;
  dup.obj = val.obj;
  return dup;
}
//#### end semantic value section ####
public final static short ID=257;
public final static short CTE=258;
public final static short CADENA=259;
public final static short IF=260;
public final static short THEN=261;
public final static short ELSE=262;
public final static short ENDIF=263;
public final static short OUT=264;
public final static short FUN=265;
public final static short RETURN=266;
public final static short BREAK=267;
public final static short ASIGNACION=268;
public final static short COMP_MAYOR_IGUAL=269;
public final static short COMP_MENOR_IGUAL=270;
public final static short COMP_DISTINTO=271;
public final static short WHEN=272;
public final static short DO=273;
public final static short UNTIL=274;
public final static short CONTINUE=275;
public final static short DOUBLE64=276;
public final static short UINT16=277;
public final static short DEFER=278;
public final static short CONST=279;
public final static short YYERRCODE=256;
final static short yylhs[] = {                           -1,
    0,    0,    0,    0,    0,    1,    2,    2,    3,    3,
    4,    4,    4,    4,    6,    6,    6,    6,   11,   11,
    7,    7,    7,   14,   14,   15,   15,   16,   16,   16,
   16,   16,   16,   16,   16,   16,   16,   22,   22,    8,
    8,   23,   23,   23,   23,   23,   23,   23,   25,   25,
   25,   21,   21,   21,   21,   21,   21,   21,   21,   21,
   21,   21,   21,   21,   21,   19,   19,   19,   19,   19,
   19,   19,   19,   19,   19,   19,   19,   19,   20,   20,
   26,   26,   26,   26,   26,   26,   26,   26,   26,   26,
   26,   26,   26,   28,   28,   29,   29,   29,   12,   12,
   12,   12,   12,   12,   12,   12,   12,   12,   13,   13,
   13,   13,   13,   32,   32,   32,   35,   35,   34,   34,
   36,   34,    9,    9,    9,   37,   37,   38,   38,   38,
   38,    5,    5,    5,    5,    5,    5,    5,    5,    5,
    5,   42,   42,   42,   30,   30,   30,   30,   30,   31,
   31,   41,   41,   43,   43,   43,   43,   43,   27,   44,
   44,   44,   44,   45,   45,   17,   17,   17,   40,   40,
   47,   40,   40,   40,   46,   46,   39,   39,   39,   39,
   39,   39,   39,   39,   39,   39,   39,   39,   48,   48,
   48,   48,   48,   49,   49,   24,   24,   24,   50,   50,
   50,   50,   50,   50,   33,   33,   33,   51,   51,   51,
   52,   52,   52,   54,   54,   55,   55,   56,   56,   18,
   18,   18,   18,   18,   18,   18,   18,   18,   53,   53,
   10,   10,
};
final static short yylen[] = {                            2,
    4,    3,    3,    3,    3,    1,    1,    2,    1,    1,
    1,    1,    1,    1,    3,    2,    2,    2,    3,    1,
    4,    5,    3,    1,    2,    1,    1,    1,    2,    1,
    2,    1,    2,    1,    2,    1,    2,    1,    2,    4,
    5,   10,   13,   13,   13,   13,   16,   16,    1,    1,
    2,    8,    8,    8,   11,   11,   15,   13,   13,   15,
   15,   15,   13,   13,   14,    9,   10,   10,    8,    9,
    9,    8,    8,    9,    9,    8,    9,    9,    7,    9,
    1,    1,    1,    4,    4,    3,    2,    3,    3,    3,
    3,    2,    2,    1,    2,    1,    1,    1,    6,    7,
    5,    5,    5,    5,    6,    6,    6,    6,    5,    4,
    3,    3,    4,    1,    3,    5,    1,    3,    2,    1,
    0,    2,    3,    2,    2,    1,    3,    3,    2,    2,
    1,    1,    2,    1,    2,    1,    2,    1,    2,    1,
    2,    1,    1,    1,    2,    4,    1,    3,    3,    2,
    1,    1,    3,    7,    6,    6,    6,    6,    1,    1,
    3,    2,    2,    1,    2,    4,    3,    3,    9,    8,
    0,   17,    7,    6,    1,    2,    8,   10,    7,    9,
    7,    7,    7,    7,    7,    9,    9,    8,    1,    3,
    2,    2,    2,    1,    2,    3,    2,    2,    1,    1,
    1,    1,    1,    1,    3,    3,    1,    3,    3,    1,
    1,    1,    1,    3,    4,    1,    3,    1,    1,    5,
    5,    4,    4,    4,    4,    4,    4,    4,    1,    2,
    1,    1,
};
final static short yydefred[] = {                         0,
    6,    0,    0,    0,    0,    0,    0,    0,    0,    0,
  232,  231,    0,    0,    0,    7,    9,   10,   11,   12,
   13,   14,    0,    0,    0,  132,  136,    0,  134,  138,
  140,  152,    0,    0,    0,    0,    0,  229,  199,  200,
  201,    0,    0,  202,  203,  204,    0,    0,    0,    0,
  210,  212,  213,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,  142,  143,  144,    0,    0,    0,  133,
  137,  135,  139,  141,    0,  125,    0,    0,    2,    8,
    0,   18,    0,   17,    0,    0,    5,    0,    3,  167,
    0,   19,    0,  230,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,  145,    0,
  150,  164,    0,    0,  163,  165,  130,    0,  123,    0,
   15,    0,    0,    0,    0,    0,   23,   26,    0,    0,
   24,   27,   28,   30,   32,   34,   36,    0,    0,  153,
    1,  166,  218,  214,  219,    0,  216,    0,    0,    0,
    0,    0,    0,    0,  208,  209,  225,  223,  226,    0,
  224,    0,  222,    0,    0,    0,    0,  119,    0,    0,
  122,    0,    0,    0,    0,  159,  149,    0,  161,    0,
    0,  128,  127,    0,    0,    0,    0,    0,   81,   96,
   82,    0,    0,   94,   97,   98,    0,   29,   31,   33,
   35,   37,   21,    0,   25,    0,   40,    0,    0,  215,
    0,    0,    0,    0,    0,    0,    0,    0,  221,  220,
    0,  104,    0,    0,  103,    0,    0,  102,    0,    0,
    0,    0,  146,    0,    0,    0,    0,    0,    0,  111,
    0,    0,   87,    0,    0,   93,    0,    0,   95,    0,
   22,   41,    0,  217,  191,  194,    0,    0,    0,  193,
  195,    0,    0,    0,    0,    0,    0,    0,   99,    0,
  108,  107,    0,  106,    0,    0,    0,  174,    0,  156,
  158,    0,  157,    0,  113,    0,    0,    0,   86,    0,
    0,    0,   89,   91,    0,    0,  190,    0,  183,  181,
    0,  184,    0,    0,    0,  185,  182,  100,    0,  116,
  176,    0,    0,    0,  154,    0,  109,    0,    0,    0,
   84,   85,    0,    0,    0,    0,  188,    0,  177,    0,
    0,  171,    0,  170,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,  186,    0,  187,  118,
    0,  169,   51,   38,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,   79,
    0,    0,    0,    0,  178,    0,    0,    0,   39,    0,
   52,    0,   54,   53,    0,    0,   49,   50,    0,    0,
   73,    0,    0,   72,    0,    0,    0,   76,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
   74,   75,   66,    0,    0,   77,   78,    0,    0,   80,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
   42,    0,   67,   68,    0,    0,    0,    0,    0,    0,
    0,   55,    0,    0,    0,   56,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,   58,   43,    0,    0,
   59,   44,   63,   64,   45,   46,    0,    0,    0,    0,
   65,    0,    0,    0,    0,    0,    0,    0,    0,  172,
   61,   62,   57,    0,   60,    0,    0,    0,   47,   48,
    0,    0,    0,    0,    0,    0,
};
final static short yydgoto[] = {                          3,
    4,   15,  285,   17,   18,   19,   20,   21,   22,   23,
   24,   25,  397,  140,  141,  364,  143,  144,  145,  146,
  147,  365,  398,   47,  350,  202,  149,  203,  204,  205,
  206,  112,   48,  113,  320,  114,   77,   78,   29,   30,
   31,  126,   32,   68,   69,  286,  361,  223,  224,   49,
   50,   51,   52,   53,  156,  157,
};
final static short yysindex[] = {                       -44,
    0, 1518,    0,  706,  -41,  154,  -26,   -6,   52,  729,
    0,    0,  157,    3, 1068,    0,    0,    0,    0,    0,
    0,    0,    4,  -10,    5,    0,    0,   59,    0,    0,
    0,    0, 1091, 1114,   23, -180,  101,    0,    0,    0,
    0, -127,  123,    0,    0,    0,  114,   58,   87,   66,
    0,    0,    0,  132,  136,  -14,  -18,  -13,  841, -123,
  113,  138,  583,    0,    0,    0,    0, -109, 1307,    0,
    0,    0,    0,    0, -213,    0,  141,  160,    0,    0,
  174,    0,  161,    0, 1058,   -1,    0, 1124,    0,    0,
  243,    0,   64,    0,   18,  -31,   29,   87,   87,   87,
   84,   87,   87,  173,  241,   37,   48,  253,  -40,  256,
   62,  283,  288,   80,  282,  301,   92,  317,    0,   16,
    0,    0, 1324,  273,    0,    0,    0,  112,    0,  105,
    0,  332,   19,  334,  351,  623,    0,    0,  254, 1495,
    0,    0,    0,    0,    0,    0,    0,  265,  337,    0,
    0,    0,    0,    0,    0,    9,    0,  945,  945,  349,
  945,   66,   66,   84,    0,    0,    0,    0,    0,  344,
    0,  346,    0,  352,   54,   42,   54,    0,  355,   54,
    0,   54,  364,  284,  -53,    0,    0,  372,    0,  859,
  386,    0,    0,  897,   81,  109,  864, 1346,    0,    0,
    0,  164, 1247,    0,    0,    0,  404,    0,    0,    0,
    0,    0,    0,  322,    0,  327,    0,  185,   91,    0,
 1443,    0,   88, 1445,  197,  748,   93,  199,    0,    0,
   54,    0,  406,   54,    0,   54,  423,    0,   54, 1518,
  358, 1147,    0,  419,   71,  421,  448,  433,  262,    0,
  245,  467,    0, 1269,  470,    0,  387,  388,    0,  897,
    0,    0,  351,    0,    0,    0, 1462,  945,  456,    0,
    0,  459,  257,  460,  102,  945,  462,  463,    0,   54,
    0,    0,   54,    0, 1518,  410, 1518,    0,  413,    0,
    0,  486,    0,  268,    0,  487,  424,  -51,    0,  431,
  436,  897,    0,    0,  507,  290,    0,  295,    0,    0,
  503,    0,  945,  506,  304,    0,    0,    0,  522,    0,
    0,  512,  454,  529,    0,  880,    0, 1541,  478, 1541,
    0,    0,  548,  341,  564,  546,    0,  373,    0,  553,
   54,    0,  561,    0,  793, 1200,  374,  104,  375,  345,
   50, 1157,   86,  590,  899,  897,    0,  591,    0,    0,
  380,    0,    0,    0, 1378,  601,  536,  602,  613,  303,
  634,  616,  552,  557,  625,  142,  627,  562,  572,    0,
 1200,  374,  375,  657,    0,  659,  439,  577,    0,  586,
    0, 1200,    0,    0,  464, 1200,    0,    0,  471,  897,
    0,  687,  688,    0,  690,  647,  648,    0,  691,  736,
 1378,  739,  897,  682,  115,  121, 1543, 1543,  747,  767,
    0,    0,    0,  760,  769,    0,    0,  717,  720,    0,
  790, 1200,  918,  787,  928,  789,  724,  734,  743,  744,
    0,  592,    0,    0,  124,  135,  593, 1398, 1200,  607,
  618,    0, 1200,  622,  628,    0,  629,  630,  631,  635,
  312,  947,  969,  765,  636,  772,  781, 1409,  831,  849,
 1426,  851,  852,  853,  854,  855,  856, 1200, 1200, 1200,
 1518,  857,  654,  655,  660,  797,    0,    0,  664,  804,
    0,    0,    0,    0,    0,    0, 1543, 1473, 1484,  805,
    0,  874,  875,  879,  676,  881,  678,  820,  821,    0,
    0,    0,    0,  892,    0,  893,  692,  702,    0,    0,
  721,  728, 1200, 1200, 1565, 1565,
};
final static short yyrindex[] = {                         0,
    0,    0,    0,    0,  378,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,  443,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,  466,
    0,    0,    0,    0,    0,    0,  708,  708,    0,  909,
 1180, 1202,    0,    0,    0,    0, 1288,    0,    0,    0,
    0,    0,    0,    0,  759,    0,  671,  807,    0,    0,
  830,    0,  696,    0,    0,    0,    0,  976,    0,    0,
  320,    0,    0,    0,    0,    0,    0,    0,    0,  -22,
    7,    0,    0,    0,    0,    0,    0,    0,  708,    0,
   44,    0,   46,    0,    0,    0,    0,    0,    0,    0,
    0,    0,  703,    0,    0,    0,    0,  782,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,  491,  514,   10,    0,    0,    0,    0,    0,  368,
    0,  391,    0,    0,    0,    0,    0,    0,    0,  708,
    0,    0,    0,    0,    0,    0,    0, 1224,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,  716,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0, 1368,    0,    0,    0,    0,    0,    0,    0,    0,
  868,    0,    0,    0,    0,    0,   57,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,  -84,    0,
    0,    0,    0,  718,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,  178,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,  872,
    0,    0,  708,    0,  873,    0,    0,    0,    0,    0,
    0,  416,    0,    0,    0,  -82,    0,    0,    0,  723,
  726,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,  537,    0,    0,    0,    0,   82,    0,
    0,    0,    0,  560,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
  708,    0,    0,    0,    0,    0,  751,    0,  752,    0,
    0,    0,    0,    0,    0,    0,    0,  600,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,  988,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0, 1011, 1035,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,
};
final static short yygindex[] = {                         0,
    0,   40,  461,  -46,   28,    0,    0,    0,    0,  -33,
   24,    0,  122,    0, -135,  -29,   -2,    2, -116, -110,
  -90, 1332,  106,   15,  -72,  746,  133,  817, -174,   30,
   47,  -25,  -19, -159,  639,    0,  887,    0, 1005, 1014,
 1015,   32,  943,    0,  967, -233,    0, 1053,  812,  986,
  357,  397,  -86,    0,    0,  824,
};
final static int YYTABLESIZE=1856;
static short yytable[];
static { yytable();}
static void yytable(){
yytable = new short[]{                         26,
  174,   26,   36,   27,  215,   27,  155,   26,  289,  160,
   70,   27,   26,   56,   71,   91,   27,  175,  197,  210,
  237,  109,  110,  111,  111,  211,  108,  115,  259,  101,
   26,   26,  116,   58,   27,   27,  197,   64,  138,   65,
  112,   67,  110,   34,  127,  212,   83,  198,   84,  220,
  196,  321,  219,  323,  128,  142,   66,   96,  195,   92,
   26,   76,   82,   42,   27,  198,   26,   42,  196,  242,
   27,  330,   88,  118,  187,  111,   81,  170,    2,  259,
  164,   90,  233,  176,  120,   26,  114,  120,  172,   27,
   64,   59,   65,  138,  122,  169,   64,  115,   65,  234,
   98,  120,   99,  114,  154,  200,  171,  102,   42,   66,
  142,  292,  103,  196,  115,   66,   86,   45,   46,   44,
   26,  248,  117,  319,   27,   42,   98,   85,   99,  291,
   94,   42,  155,  208,   28,   42,   28,  209,  191,  117,
   93,  232,   28,  235,   35,   28,  111,   28,  238,  250,
   64,   98,   65,   99,   97,   26,   26,   26,   26,   27,
   27,   27,   27,   95,  124,   28,   28,   42,  200,   66,
  120,  119,  104,  200,  372,  249,  105,  112,  112,  110,
  110,  319,   45,   46,   44,  222,  222,  222,  222,  112,
  148,  110,  351,   43,  353,   28,  121,  279,   42,  129,
  281,   28,  282,  130,  245,  284,  139,  241,  247,  329,
  377,  252,    1,   45,   46,   44,  376,   36,   26,  131,
   28,   26,   27,   26,  200,   27,   35,   27,  210,  159,
   54,  167,   55,  200,  211,   11,   12,   26,  197,   26,
  201,   27,  106,   27,  107,  216,  318,  500,  266,  111,
   57,  271,  188,  222,  212,   28,  199,   11,   12,   75,
   81,  214,   11,   12,   26,   26,  405,  198,   27,   27,
  196,   10,  186,   26,  305,   37,   38,   27,  158,   37,
   38,  138,   26,  138,   26,   98,   27,   99,   27,  161,
   28,   28,   28,   28,  271,  222,  348,  399,  142,  168,
  142,  152,  296,  222,   98,  138,   99,  111,  258,  371,
   26,  173,  190,  177,   27,  133,  333,   42,  178,  168,
  153,   38,  142,  179,  257,  348,   39,   40,   41,   11,
   12,  180,   45,   46,   44,  389,  181,   37,   38,  182,
  222,  183,  208,   37,   38,  371,  209,  153,   38,  268,
  269,  133,  184,   28,  276,  277,   28,  185,   28,  301,
  451,   75,  455,  313,  314,  367,  368,  228,  201,  192,
  384,  194,   28,  197,   28,  300,  433,  434,  213,   37,
   38,  389,  435,  436,  199,  462,  434,  389,  389,  217,
  227,   39,   40,   41,  218,  486,  463,  436,  490,   28,
   28,  371,  229,  450,  230,  454,  240,  133,   28,  231,
   37,   38,  236,   60,  420,  155,    6,   28,  389,   28,
    7,  239,   39,   40,   41,  396,  246,  431,    9,   10,
  243,  349,  450,  454,  478,  159,   20,  255,  389,  192,
  192,  389,  211,  260,  168,   28,  261,  347,  451,  455,
  363,  262,  486,  490,  162,  163,  374,  263,  379,  272,
  383,  278,   16,  280,   16,  207,  283,  389,  389,  389,
  390,  221,  373,  198,  378,   80,  382,  290,   26,  293,
  287,  407,   27,  211,  211,  211,  388,  211,  294,  211,
  205,  295,  228,   16,   80,  389,  389,  406,  165,  166,
  363,  211,  211,  211,  211,  297,  207,  298,  207,  302,
  207,  303,  304,  206,  309,  227,  429,  310,  312,  311,
  316,  317,  438,  440,  207,  207,  207,  207,  326,   37,
   38,  205,  428,  205,  322,  205,  179,  324,  437,  439,
  155,   39,   40,   41,  325,  327,  328,  334,   80,  205,
  205,  205,  205,  467,  206,  331,  206,  336,  206,  173,
  332,  337,  371,  335,  339,  341,  340,  211,  133,  466,
  342,  371,  206,  206,  206,  206,  168,  133,  343,  168,
  395,  168,  168,  168,  168,  168,  168,  344,  354,  395,
  207,  168,  168,  168,  168,  168,  168,  168,  168,  180,
  352,  355,  509,  356,  357,   60,  370,   60,    6,  226,
  132,  359,    7,   28,    7,  205,  133,   61,  508,  362,
    9,   10,  134,  135,  228,   62,   13,  228,  136,  228,
  228,  228,  228,  228,  228,  358,  366,  369,  206,  228,
  228,  228,  228,  228,  228,  228,  228,  227,  380,  385,
  227,  386,  227,  227,  227,  227,  227,  227,  392,  391,
  393,  179,  227,  227,  227,  227,  227,  227,  227,  227,
  124,  394,  155,  400,  401,  155,  402,  155,  155,  155,
  155,  403,  155,  404,  173,  408,  409,  155,  155,  155,
  155,  155,  155,  155,  155,   16,  410,  412,  413,  211,
  414,  415,  211,  211,  211,  211,  211,  211,  211,  211,
  416,  211,  211,  211,  211,  211,  211,  211,  211,  211,
  211,  211,  207,  371,  180,  207,  207,  207,  207,  207,
  207,  207,  207,  419,  207,  207,  207,  207,  207,  207,
  207,  207,  207,  207,  207,  421,  422,  205,  423,  426,
  205,  205,  205,  205,  205,  205,  205,  205,  131,  205,
  205,  205,  205,  205,  205,  205,  205,  205,  205,  205,
  206,  424,  425,  206,  206,  206,  206,  206,  206,  206,
  206,  129,  206,  206,  206,  206,  206,  206,  206,  206,
  206,  206,  206,  179,  427,  124,  179,  430,  179,  179,
  179,  179,  131,  179,  432,  441,  126,  442,  179,  179,
  179,  179,  179,  179,  179,  179,  173,  131,  443,  173,
   16,  173,  173,  173,  173,  129,  173,  444,   33,   20,
  447,  173,  173,  173,  173,  173,  173,  173,  173,   60,
  129,  445,    6,  523,  446,  452,    7,  456,  457,   61,
  524,   63,  461,  464,    9,   10,  180,   62,  458,  180,
   13,  180,  180,  180,  180,  126,  180,  459,  460,  469,
  221,  180,  180,  180,  180,  180,  180,  180,  180,   60,
  470,  117,  207,  131,  472,   42,    7,  481,   20,  487,
  473,  474,  475,  476,  134,  135,  483,  477,  482,  244,
   45,   46,   44,   42,  251,  484,  129,  488,   42,  491,
  492,  493,  494,  495,  496,  501,  502,  503,   45,   46,
   44,  505,  504,   45,   46,   44,  506,  124,  507,  510,
  124,  126,  511,  512,  124,  124,  124,  513,  514,  515,
  516,   42,  124,  124,  517,  518,  124,  124,  124,  124,
  519,  520,   16,  521,   20,   16,   45,   46,   44,   16,
   16,   16,    5,  522,  121,    6,  159,   16,   16,    7,
    8,   16,   16,   16,   16,    4,  162,    9,   10,  360,
  371,   11,   12,   13,   14,   60,  133,  371,    6,   83,
  101,   92,    7,  133,  105,   61,   88,  175,  395,   90,
    9,   10,  346,   62,   60,  395,   13,    6,  306,  273,
  274,    7,   49,   50,  254,  131,  193,   72,  131,    9,
   10,  381,  131,  131,  131,   13,   73,   74,  150,  123,
  131,  131,  267,  100,  131,  131,  131,  131,  129,    0,
  449,  129,  264,    0,    0,  129,  129,  129,    0,   60,
  453,    0,  132,  129,  129,    0,    7,  129,  129,  129,
  129,    0,    0,  126,  134,  135,  126,  221,    0,  479,
  126,  126,  126,    0,    0,    0,    0,    0,  126,  126,
    0,    0,  126,  126,  126,  126,   20,    0,    0,   20,
    0,  480,    0,   20,   20,   20,    0,   37,   38,    0,
    0,   20,   20,    0,    0,   20,   20,   20,   20,   39,
   40,   41,   69,    0,    0,   37,   38,    0,    0,    0,
   37,   38,    0,    0,    0,    0,    0,   39,   40,   41,
    0,    0,   39,   40,   41,   70,   60,    0,    0,  132,
    0,    0,    0,    7,    0,  133,    0,    0,    0,    0,
    0,  134,  135,   37,   38,   60,    0,  345,  132,   71,
    0,    0,    7,    0,  133,   39,   40,   41,    0,    0,
  134,  135,    0,    0,   60,    0,  136,  132,    0,    0,
    0,    7,  137,  133,   60,    0,    0,  132,    0,  134,
  135,    7,   79,  133,    0,  345,    0,    0,    0,  134,
  135,   60,    0,   60,    6,  345,  207,    0,    7,    0,
    7,  225,  227,  228,    0,   87,    9,   10,  134,  135,
    0,    0,   13,    0,  136,   60,    0,    0,  207,    0,
    0,    0,    7,    0,    0,    0,    0,    0,   89,    0,
  134,  135,    0,    0,   69,    0,  136,   69,  151,   69,
   69,   69,   69,   69,   69,    0,    0,    0,    0,   69,
   69,   69,   69,   69,   69,   69,   69,   70,    0,    0,
   70,  288,   70,   70,   70,   70,   70,   70,  275,    0,
    0,  375,   70,   70,   70,   70,   70,   70,   70,   70,
    0,   71,    0,    0,   71,    0,   71,   71,   71,   71,
   71,   71,    0,    0,  147,    0,   71,   71,   71,   71,
   71,   71,   71,   71,    5,    0,    0,  132,    0,    0,
  308,    7,    8,  133,    5,    0,  151,    6,  315,  134,
  135,    7,    8,   11,   12,  136,   14,    0,    0,    9,
   10,    0,    0,   11,   12,   13,   14,    5,  148,    0,
    6,    0,    0,    0,    7,    8,    0,    0,    0,    0,
    0,    0,    9,   10,    0,  338,   11,   12,   13,   14,
    5,  256,    0,    6,    0,    0,    0,    7,    8,    0,
    5,    0,    0,    6,    0,    9,   10,    7,    8,   11,
   12,   13,   14,  299,    0,    9,   10,    0,    0,   11,
   12,   13,   14,    5,    0,    0,    6,    0,    0,    0,
    7,    8,  164,    5,    0,    0,  207,    0,    9,   10,
    7,    8,   11,   12,   13,   14,    0,    0,  134,  135,
    0,  125,   11,   12,  136,   14,  147,    0,    0,  147,
    0,    0,    0,  147,    0,  147,  147,    0,  189,    0,
    0,  147,  147,  147,  147,    0,   60,  147,  151,  207,
    0,  151,    0,    7,    0,  151,    0,  151,  151,    0,
  253,  134,  135,  151,  151,  151,  151,  136,    0,  151,
  148,    0,    0,  148,    0,    0,    0,  148,    0,  148,
  148,    0,  194,    0,    0,  148,  148,  148,  148,    0,
    0,  148,  387,   60,    0,    0,  132,    0,    0,    0,
    7,    0,  133,   61,    0,    0,    0,    0,  134,  135,
    0,   62,  465,    0,  136,   60,    0,    0,  132,    0,
    0,    0,    7,  485,  133,   61,    0,    0,    0,    0,
  134,  135,    0,   62,  164,    0,  136,  164,    0,    0,
  489,  164,    0,    0,  164,    0,    0,    0,    0,  164,
  164,  160,  164,   60,    0,  164,    6,  265,    0,  270,
    7,    0,    0,   61,    0,    0,    0,    0,    9,   10,
   60,   62,    0,    6,   13,    0,  307,    7,    0,    0,
   61,    0,    0,    0,    0,    9,   10,  485,   62,    0,
    0,   13,   60,    0,    0,  207,    0,    0,  489,    7,
    0,    0,   61,    0,    0,    0,    0,  134,  135,    0,
   62,    0,    0,  136,  194,    0,    0,  194,    0,  189,
  189,  194,    0,    0,   60,    0,    0,  132,    0,  194,
  194,    7,    0,  133,    0,  194,    0,    0,    0,  134,
  135,    0,    0,    0,   60,  136,    0,  132,    0,    0,
    0,    7,    0,  133,    0,   60,    0,    0,  132,  134,
  135,    0,    7,    0,  133,  136,    0,    0,    0,    0,
  134,  135,   60,    0,    0,  132,  345,    0,    0,    7,
    0,  133,    0,    0,    0,    0,    0,  134,  135,   60,
    0,   60,    6,  345,    6,    0,    7,    0,    7,    0,
    0,    0,  411,    0,    9,   10,    9,   10,   60,    0,
   13,    6,   13,  417,    0,    7,    0,  418,    0,   60,
    0,    0,  207,    9,   10,    0,    7,    0,    0,   13,
   60,    0,    0,  207,  134,  135,    0,    7,    0,    0,
  136,    5,    0,    0,  132,  134,  135,    0,    7,    8,
  133,  136,    0,  448,    0,    0,  134,  135,    0,    0,
   11,   12,  136,   14,    5,    0,    0,    6,    0,    0,
  468,    7,    8,    0,  471,    0,    0,    0,    0,    9,
   10,    0,    0,   11,   12,   13,   14,    5,    0,   60,
  207,    0,  132,    0,    7,    8,    7,    0,  133,  497,
  498,  499,  134,  135,  134,  135,   11,   12,  136,   14,
  136,   60,    0,    0,  132,    0,    0,    0,    7,    0,
  133,    0,    0,    0,    0,    0,  134,  135,    0,    0,
    0,    0,  345,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,  525,  526,
};
}
static short yycheck[];
static { yycheck(); }
static void yycheck() {
yycheck = new short[] {                          2,
   41,    4,   44,    2,  140,    4,   93,   10,  242,   41,
   13,   10,   15,   40,   13,   35,   15,   58,   41,  136,
  180,   40,   41,   57,   58,  136,   41,   41,  203,   49,
   33,   34,   58,   40,   33,   34,   59,   10,   85,   10,
  125,   10,  125,    4,  258,  136,   23,   41,   59,   41,
   41,  285,   44,  287,  268,   85,   10,   43,   40,   36,
   63,   59,   59,   45,   63,   59,   69,   45,   59,  123,
   69,  123,   33,   59,   59,  109,  257,   41,  123,  254,
  100,   59,   41,  109,   41,   88,   41,   44,   41,   88,
   63,   40,   63,  140,   63,   59,   69,   41,   69,   58,
   43,   58,   45,   58,   41,  135,   59,   42,   45,   63,
  140,   41,   47,  133,   58,   69,   58,   60,   61,   62,
  123,   41,   41,  283,  123,   45,   43,  123,   45,   59,
  258,   45,  219,  136,    2,   45,    4,  136,  124,   58,
   40,  175,   10,  177,  268,   13,  180,   15,  182,   41,
  123,   43,  123,   45,   41,  158,  159,  160,  161,  158,
  159,  160,  161,   41,  274,   33,   34,   45,  198,  123,
   58,   59,   41,  203,  125,  195,   41,  262,  263,  262,
  263,  341,   60,   61,   62,  158,  159,  160,  161,  274,
   85,  274,  328,   40,  330,   63,   59,  231,   45,   59,
  234,   69,  236,   44,  190,  239,   85,  261,  194,  261,
  125,  197,  257,   60,   61,   62,  352,   44,  221,   59,
   88,  224,  221,  226,  254,  224,  268,  226,  345,  261,
  257,   59,  259,  263,  345,  276,  277,  240,  261,  242,
  135,  240,  257,  242,  259,  140,  280,  481,  221,  283,
  257,  224,  120,  226,  345,  123,  135,  276,  277,  257,
  257,  140,  276,  277,  267,  268,  125,  261,  267,  268,
  261,  273,  257,  276,  260,  257,  258,  276,  261,  257,
  258,  328,  285,  330,  287,   43,  285,   45,  287,  261,
  158,  159,  160,  161,  267,  268,  326,  370,  328,   59,
  330,   59,   41,  276,   43,  352,   45,  341,  203,  260,
  313,   59,   40,   58,  313,  266,  302,   45,  257,    0,
  257,  258,  352,   41,  203,  355,  269,  270,  271,  276,
  277,   44,   60,   61,   62,  365,  257,  257,  258,   58,
  313,   41,  345,  257,  258,  260,  345,  257,  258,  262,
  263,  266,  261,  221,  262,  263,  224,   41,  226,  254,
  433,  257,  435,  262,  263,  262,  263,    0,  263,  258,
  356,   40,  240,   40,  242,  254,  262,  263,  125,  257,
  258,  411,  262,  263,  263,  262,  263,  417,  418,  125,
    0,  269,  270,  271,   58,  468,  262,  263,  471,  267,
  268,  260,   59,  433,   59,  435,  123,  266,  276,   58,
  257,  258,   58,  257,  400,    0,  260,  285,  448,  287,
  264,   58,  269,  270,  271,  123,   41,  413,  272,  273,
   59,  326,  462,  463,  123,   58,   59,  274,  468,  262,
  263,  471,    0,   40,  125,  313,  125,  326,  521,  522,
  345,  125,  525,  526,   98,   99,  351,  273,  353,  263,
  355,  263,    2,   58,    4,    0,   44,  497,  498,  499,
  365,  123,  351,  123,  353,   15,  355,   59,  481,   59,
  123,  376,  481,   41,   42,   43,  365,   45,   41,   47,
    0,   59,  125,   33,   34,  525,  526,  376,  102,  103,
  395,   59,   60,   61,   62,  261,   41,   41,   43,   40,
   45,  125,  125,    0,   59,  125,  411,   59,   59,  263,
   59,   59,  417,  418,   59,   60,   61,   62,  261,  257,
  258,   41,  411,   43,  125,   45,    0,  125,  417,  418,
  125,  269,  270,  271,   59,   59,  123,   41,   88,   59,
   60,   61,   62,  448,   41,  125,   43,  263,   45,    0,
  125,   59,  260,  274,   59,   44,  263,  125,  266,  448,
   59,  260,   59,   60,   61,   62,  257,  266,  125,  260,
  278,  262,  263,  264,  265,  266,  267,   59,   41,  278,
  125,  272,  273,  274,  275,  276,  277,  278,  279,    0,
  123,  261,  497,   40,   59,  257,  262,  257,  260,  261,
  260,   59,  264,  481,  264,  125,  266,  267,  497,   59,
  272,  273,  272,  273,  257,  275,  278,  260,  278,  262,
  263,  264,  265,  266,  267,  263,  263,  263,  125,  272,
  273,  274,  275,  276,  277,  278,  279,  257,   59,   59,
  260,  272,  262,  263,  264,  265,  266,  267,  123,   59,
   59,  125,  272,  273,  274,  275,  276,  277,  278,  279,
    0,   59,  257,   40,   59,  260,  125,  262,  263,  264,
  265,  125,  267,   59,  125,   59,  125,  272,  273,  274,
  275,  276,  277,  278,  279,    0,  125,   41,   40,  257,
  262,  125,  260,  261,  262,  263,  264,  265,  266,  267,
  125,  269,  270,  271,  272,  273,  274,  275,  276,  277,
  278,  279,  257,  260,  125,  260,  261,  262,  263,  264,
  265,  266,  267,  263,  269,  270,  271,  272,  273,  274,
  275,  276,  277,  278,  279,   59,   59,  257,   59,   59,
  260,  261,  262,  263,  264,  265,  266,  267,    0,  269,
  270,  271,  272,  273,  274,  275,  276,  277,  278,  279,
  257,  125,  125,  260,  261,  262,  263,  264,  265,  266,
  267,    0,  269,  270,  271,  272,  273,  274,  275,  276,
  277,  278,  279,  257,   59,  125,  260,   59,  262,  263,
  264,  265,   44,  267,  123,   59,    0,   41,  272,  273,
  274,  275,  276,  277,  278,  279,  257,   59,   59,  260,
  125,  262,  263,  264,  265,   44,  267,   59,  123,    0,
   41,  272,  273,  274,  275,  276,  277,  278,  279,  257,
   59,  125,  260,  123,  125,   59,  264,   59,  125,  267,
  123,  123,  261,  261,  272,  273,  257,  275,  125,  260,
  278,  262,  263,  264,  265,   59,  267,  125,  125,  263,
  123,  272,  273,  274,  275,  276,  277,  278,  279,  257,
  263,   41,  260,  125,  263,   45,  264,  123,   59,   59,
  263,  263,  263,  263,  272,  273,  125,  263,  263,   41,
   60,   61,   62,   45,   41,  125,  125,   59,   45,   59,
   59,   59,   59,   59,   59,   59,  263,  263,   60,   61,
   62,  125,  263,   60,   61,   62,  263,  257,  125,  125,
  260,  125,   59,   59,  264,  265,  266,   59,  263,   59,
  263,   45,  272,  273,  125,  125,  276,  277,  278,  279,
   59,   59,  257,  262,  125,  260,   60,   61,   62,  264,
  265,  266,  257,  262,  257,  260,   58,  272,  273,  264,
  265,  276,  277,  278,  279,    0,  274,  272,  273,  341,
  260,  276,  277,  278,  279,  257,  266,  260,  260,  274,
  123,  274,  264,  266,  123,  267,  274,  125,  278,  274,
  272,  273,  123,  275,  257,  278,  278,  260,  263,  262,
  263,  264,  262,  262,  198,  257,  130,   13,  260,  272,
  273,  123,  264,  265,  266,  278,   13,   13,   86,   63,
  272,  273,  221,   48,  276,  277,  278,  279,  257,   -1,
  123,  260,  219,   -1,   -1,  264,  265,  266,   -1,  257,
  123,   -1,  260,  272,  273,   -1,  264,  276,  277,  278,
  279,   -1,   -1,  257,  272,  273,  260,  123,   -1,  123,
  264,  265,  266,   -1,   -1,   -1,   -1,   -1,  272,  273,
   -1,   -1,  276,  277,  278,  279,  257,   -1,   -1,  260,
   -1,  123,   -1,  264,  265,  266,   -1,  257,  258,   -1,
   -1,  272,  273,   -1,   -1,  276,  277,  278,  279,  269,
  270,  271,  125,   -1,   -1,  257,  258,   -1,   -1,   -1,
  257,  258,   -1,   -1,   -1,   -1,   -1,  269,  270,  271,
   -1,   -1,  269,  270,  271,  125,  257,   -1,   -1,  260,
   -1,   -1,   -1,  264,   -1,  266,   -1,   -1,   -1,   -1,
   -1,  272,  273,  257,  258,  257,   -1,  278,  260,  125,
   -1,   -1,  264,   -1,  266,  269,  270,  271,   -1,   -1,
  272,  273,   -1,   -1,  257,   -1,  278,  260,   -1,   -1,
   -1,  264,  125,  266,  257,   -1,   -1,  260,   -1,  272,
  273,  264,  125,  266,   -1,  278,   -1,   -1,   -1,  272,
  273,  257,   -1,  257,  260,  278,  260,   -1,  264,   -1,
  264,  159,  160,  161,   -1,  125,  272,  273,  272,  273,
   -1,   -1,  278,   -1,  278,  257,   -1,   -1,  260,   -1,
   -1,   -1,  264,   -1,   -1,   -1,   -1,   -1,  125,   -1,
  272,  273,   -1,   -1,  257,   -1,  278,  260,  125,  262,
  263,  264,  265,  266,  267,   -1,   -1,   -1,   -1,  272,
  273,  274,  275,  276,  277,  278,  279,  257,   -1,   -1,
  260,  125,  262,  263,  264,  265,  266,  267,  226,   -1,
   -1,  125,  272,  273,  274,  275,  276,  277,  278,  279,
   -1,  257,   -1,   -1,  260,   -1,  262,  263,  264,  265,
  266,  267,   -1,   -1,  125,   -1,  272,  273,  274,  275,
  276,  277,  278,  279,  257,   -1,   -1,  260,   -1,   -1,
  268,  264,  265,  266,  257,   -1,  125,  260,  276,  272,
  273,  264,  265,  276,  277,  278,  279,   -1,   -1,  272,
  273,   -1,   -1,  276,  277,  278,  279,  257,  125,   -1,
  260,   -1,   -1,   -1,  264,  265,   -1,   -1,   -1,   -1,
   -1,   -1,  272,  273,   -1,  313,  276,  277,  278,  279,
  257,  125,   -1,  260,   -1,   -1,   -1,  264,  265,   -1,
  257,   -1,   -1,  260,   -1,  272,  273,  264,  265,  276,
  277,  278,  279,  125,   -1,  272,  273,   -1,   -1,  276,
  277,  278,  279,  257,   -1,   -1,  260,   -1,   -1,   -1,
  264,  265,  125,  257,   -1,   -1,  260,   -1,  272,  273,
  264,  265,  276,  277,  278,  279,   -1,   -1,  272,  273,
   -1,  125,  276,  277,  278,  279,  257,   -1,   -1,  260,
   -1,   -1,   -1,  264,   -1,  266,  267,   -1,  125,   -1,
   -1,  272,  273,  274,  275,   -1,  257,  278,  257,  260,
   -1,  260,   -1,  264,   -1,  264,   -1,  266,  267,   -1,
  125,  272,  273,  272,  273,  274,  275,  278,   -1,  278,
  257,   -1,   -1,  260,   -1,   -1,   -1,  264,   -1,  266,
  267,   -1,  125,   -1,   -1,  272,  273,  274,  275,   -1,
   -1,  278,  125,  257,   -1,   -1,  260,   -1,   -1,   -1,
  264,   -1,  266,  267,   -1,   -1,   -1,   -1,  272,  273,
   -1,  275,  125,   -1,  278,  257,   -1,   -1,  260,   -1,
   -1,   -1,  264,  125,  266,  267,   -1,   -1,   -1,   -1,
  272,  273,   -1,  275,  257,   -1,  278,  260,   -1,   -1,
  125,  264,   -1,   -1,  267,   -1,   -1,   -1,   -1,  272,
  273,  274,  275,  257,   -1,  278,  260,  125,   -1,  125,
  264,   -1,   -1,  267,   -1,   -1,   -1,   -1,  272,  273,
  257,  275,   -1,  260,  278,   -1,  125,  264,   -1,   -1,
  267,   -1,   -1,   -1,   -1,  272,  273,  125,  275,   -1,
   -1,  278,  257,   -1,   -1,  260,   -1,   -1,  125,  264,
   -1,   -1,  267,   -1,   -1,   -1,   -1,  272,  273,   -1,
  275,   -1,   -1,  278,  257,   -1,   -1,  260,   -1,  262,
  263,  264,   -1,   -1,  257,   -1,   -1,  260,   -1,  272,
  273,  264,   -1,  266,   -1,  278,   -1,   -1,   -1,  272,
  273,   -1,   -1,   -1,  257,  278,   -1,  260,   -1,   -1,
   -1,  264,   -1,  266,   -1,  257,   -1,   -1,  260,  272,
  273,   -1,  264,   -1,  266,  278,   -1,   -1,   -1,   -1,
  272,  273,  257,   -1,   -1,  260,  278,   -1,   -1,  264,
   -1,  266,   -1,   -1,   -1,   -1,   -1,  272,  273,  257,
   -1,  257,  260,  278,  260,   -1,  264,   -1,  264,   -1,
   -1,   -1,  381,   -1,  272,  273,  272,  273,  257,   -1,
  278,  260,  278,  392,   -1,  264,   -1,  396,   -1,  257,
   -1,   -1,  260,  272,  273,   -1,  264,   -1,   -1,  278,
  257,   -1,   -1,  260,  272,  273,   -1,  264,   -1,   -1,
  278,  257,   -1,   -1,  260,  272,  273,   -1,  264,  265,
  266,  278,   -1,  432,   -1,   -1,  272,  273,   -1,   -1,
  276,  277,  278,  279,  257,   -1,   -1,  260,   -1,   -1,
  449,  264,  265,   -1,  453,   -1,   -1,   -1,   -1,  272,
  273,   -1,   -1,  276,  277,  278,  279,  257,   -1,  257,
  260,   -1,  260,   -1,  264,  265,  264,   -1,  266,  478,
  479,  480,  272,  273,  272,  273,  276,  277,  278,  279,
  278,  257,   -1,   -1,  260,   -1,   -1,   -1,  264,   -1,
  266,   -1,   -1,   -1,   -1,   -1,  272,  273,   -1,   -1,
   -1,   -1,  278,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,  523,  524,
};
}
final static short YYFINAL=3;
final static short YYMAXTOKEN=279;
final static String yyname[] = {
"end-of-file",null,null,null,null,null,null,null,null,null,null,null,null,null,
null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,
null,null,null,null,null,null,null,null,null,null,"'('","')'","'*'","'+'","','",
"'-'",null,"'/'",null,null,null,null,null,null,null,null,null,null,"':'","';'",
"'<'","'='","'>'",null,null,null,null,null,null,null,null,null,null,null,null,
null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,
null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,
null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,
"'{'",null,"'}'",null,null,null,null,null,null,null,null,null,null,null,null,
null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,
null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,
null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,
null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,
null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,
null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,
null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,
null,null,null,null,null,null,null,"ID","CTE","CADENA","IF","THEN","ELSE",
"ENDIF","OUT","FUN","RETURN","BREAK","ASIGNACION","COMP_MAYOR_IGUAL",
"COMP_MENOR_IGUAL","COMP_DISTINTO","WHEN","DO","UNTIL","CONTINUE","DOUBLE64",
"UINT16","DEFER","CONST",
};
final static String yyrule[] = {
"$accept : programa",
"programa : nombre_programa '{' sentencias '}'",
"programa : '{' sentencias '}'",
"programa : nombre_programa sentencias '}'",
"programa : nombre_programa '{' sentencias",
"programa : nombre_programa '{' '}'",
"nombre_programa : ID",
"sentencias : sentencia",
"sentencias : sentencias sentencia",
"sentencia : sentencia_declarativa",
"sentencia : sentencia_ejecutable",
"sentencia_declarativa : sentencia_declarativa_variables",
"sentencia_declarativa : funcion_con_return",
"sentencia_declarativa : funcion_sin_return",
"sentencia_declarativa : declaracion_constantes",
"sentencia_declarativa_variables : tipo lista_de_variables ';'",
"sentencia_declarativa_variables : tipo lista_de_variables",
"sentencia_declarativa_variables : lista_de_variables ';'",
"sentencia_declarativa_variables : tipo ';'",
"lista_de_variables : ID ',' lista_de_variables",
"lista_de_variables : ID",
"funcion_con_return : encabezado_funcion '{' sentencia_return '}'",
"funcion_con_return : encabezado_funcion '{' sentencias_funcion sentencia_return '}'",
"funcion_con_return : encabezado_funcion '{' '}'",
"sentencias_funcion : sentencia_funcion",
"sentencias_funcion : sentencias_funcion sentencia_funcion",
"sentencia_funcion : sentencia_declarativa",
"sentencia_funcion : sentencia_ejecutable_funcion",
"sentencia_ejecutable_funcion : asignacion",
"sentencia_ejecutable_funcion : DEFER asignacion",
"sentencia_ejecutable_funcion : imprimir",
"sentencia_ejecutable_funcion : DEFER imprimir",
"sentencia_ejecutable_funcion : sentencia_when_con_return",
"sentencia_ejecutable_funcion : DEFER sentencia_when_con_return",
"sentencia_ejecutable_funcion : sentencia_do_con_return",
"sentencia_ejecutable_funcion : DEFER sentencia_do_con_return",
"sentencia_ejecutable_funcion : sentencia_seleccion_simple_con_return",
"sentencia_ejecutable_funcion : DEFER sentencia_seleccion_simple_con_return",
"sentencias_ejecutables_funcion : sentencia_ejecutable_funcion",
"sentencias_ejecutables_funcion : sentencias_ejecutables_funcion sentencia_ejecutable_funcion",
"funcion_sin_return : encabezado_funcion '{' sentencia_seleccion_compuesta_con_return '}'",
"funcion_sin_return : encabezado_funcion '{' sentencias_funcion sentencia_seleccion_compuesta_con_return '}'",
"sentencia_seleccion_compuesta_con_return : IF '(' condicion ')' THEN sentencia_seleccion_compuesta_con_return_simple ELSE sentencia_seleccion_compuesta_con_return_simple ENDIF ';'",
"sentencia_seleccion_compuesta_con_return : IF '(' condicion ')' THEN '{' sentencias_ejecutables_funcion sentencia_return '}' ELSE sentencia_seleccion_compuesta_con_return_simple ENDIF ';'",
"sentencia_seleccion_compuesta_con_return : IF '(' condicion ')' THEN '{' sentencias_ejecutables_funcion sentencia_seleccion_compuesta_con_return '}' ELSE sentencia_seleccion_compuesta_con_return_simple ENDIF ';'",
"sentencia_seleccion_compuesta_con_return : IF '(' condicion ')' THEN sentencia_seleccion_compuesta_con_return_simple ELSE '{' sentencias_ejecutables_funcion sentencia_return '}' ENDIF ';'",
"sentencia_seleccion_compuesta_con_return : IF '(' condicion ')' THEN sentencia_seleccion_compuesta_con_return_simple ELSE '{' sentencias_ejecutables_funcion sentencia_seleccion_compuesta_con_return '}' ENDIF ';'",
"sentencia_seleccion_compuesta_con_return : IF '(' condicion ')' THEN '{' sentencias_ejecutables_funcion sentencia_return '}' ELSE '{' sentencias_ejecutables_funcion sentencia_seleccion_compuesta_con_return_simple '}' ENDIF ';'",
"sentencia_seleccion_compuesta_con_return : IF '(' condicion ')' THEN '{' sentencias_ejecutables_funcion sentencia_seleccion_compuesta_con_return '}' ELSE '{' sentencias_ejecutables_funcion sentencia_seleccion_compuesta_con_return_simple '}' ENDIF ';'",
"sentencia_seleccion_compuesta_con_return_simple : sentencia_return",
"sentencia_seleccion_compuesta_con_return_simple : sentencia_seleccion_compuesta_con_return",
"sentencia_seleccion_compuesta_con_return_simple : DEFER sentencia_seleccion_compuesta_con_return",
"sentencia_seleccion_simple_con_return : IF '(' condicion ')' THEN sentencia_return ENDIF ';'",
"sentencia_seleccion_simple_con_return : IF '(' condicion ')' THEN sentencia_seleccion_compuesta_con_return ENDIF ';'",
"sentencia_seleccion_simple_con_return : IF '(' condicion ')' THEN sentencia_ejecutable_funcion ENDIF ';'",
"sentencia_seleccion_simple_con_return : IF '(' condicion ')' THEN '{' sentencias_ejecutables_funcion sentencia_return '}' ENDIF ';'",
"sentencia_seleccion_simple_con_return : IF '(' condicion ')' THEN '{' sentencias_ejecutables_funcion sentencia_seleccion_compuesta_con_return '}' ENDIF ';'",
"sentencia_seleccion_simple_con_return : IF '(' condicion ')' THEN '{' sentencias_ejecutables_funcion sentencia_return '}' ELSE '{' sentencias_ejecutables_funcion '}' ENDIF ';'",
"sentencia_seleccion_simple_con_return : IF '(' condicion ')' THEN '{' sentencias_ejecutables_funcion sentencia_return '}' ELSE sentencia_ejecutable_funcion ENDIF ';'",
"sentencia_seleccion_simple_con_return : IF '(' condicion ')' THEN '{' sentencias_ejecutables_funcion sentencia_seleccion_compuesta_con_return '}' ELSE sentencia_ejecutable_funcion ENDIF ';'",
"sentencia_seleccion_simple_con_return : IF '(' condicion ')' THEN '{' sentencias_ejecutables_funcion sentencia_seleccion_compuesta_con_return '}' ELSE '{' sentencias_ejecutables_funcion '}' ENDIF ';'",
"sentencia_seleccion_simple_con_return : IF '(' condicion ')' THEN '{' sentencias_ejecutables_funcion '}' ELSE '{' sentencias_ejecutables_funcion sentencia_return '}' ENDIF ';'",
"sentencia_seleccion_simple_con_return : IF '(' condicion ')' THEN '{' sentencias_ejecutables_funcion '}' ELSE '{' sentencias_ejecutables_funcion sentencia_seleccion_compuesta_con_return '}' ENDIF ';'",
"sentencia_seleccion_simple_con_return : IF '(' condicion ')' THEN sentencia_ejecutable_funcion ELSE '{' sentencias_ejecutables_funcion sentencia_return '}' ENDIF ';'",
"sentencia_seleccion_simple_con_return : IF '(' condicion ')' THEN sentencia_ejecutable_funcion ELSE '{' sentencias_ejecutables_funcion sentencia_seleccion_compuesta_con_return '}' ENDIF ';'",
"sentencia_seleccion_simple_con_return : IF '(' condicion ')' THEN '{' sentencias_ejecutables_funcion '}' ELSE '{' sentencias_ejecutables_funcion '}' ENDIF ';'",
"sentencia_when_con_return : WHEN '(' condicion ')' THEN '{' sentencia_funcion '}' ';'",
"sentencia_when_con_return : WHEN '(' condicion ')' THEN '{' sentencia_funcion sentencia_return '}' ';'",
"sentencia_when_con_return : WHEN '(' condicion ')' THEN '{' sentencia_funcion sentencia_seleccion_compuesta_con_return '}' ';'",
"sentencia_when_con_return : WHEN '(' condicion ')' THEN '{' sentencia_funcion '}'",
"sentencia_when_con_return : WHEN '(' condicion ')' THEN '{' sentencia_funcion sentencia_return '}'",
"sentencia_when_con_return : WHEN '(' condicion ')' THEN '{' sentencia_funcion sentencia_seleccion_compuesta_con_return '}'",
"sentencia_when_con_return : WHEN '(' condicion ')' THEN '{' '}' ';'",
"sentencia_when_con_return : WHEN '(' ')' THEN '{' sentencia_funcion '}' ';'",
"sentencia_when_con_return : WHEN '(' ')' THEN '{' sentencia_funcion sentencia_return '}' ';'",
"sentencia_when_con_return : WHEN '(' ')' THEN '{' sentencia_funcion sentencia_seleccion_compuesta_con_return '}' ';'",
"sentencia_when_con_return : WHEN '(' condicion ')' '{' sentencia_funcion '}' ';'",
"sentencia_when_con_return : WHEN '(' condicion ')' '{' sentencia_funcion sentencia_return '}' ';'",
"sentencia_when_con_return : WHEN '(' condicion ')' '{' sentencia_funcion sentencia_seleccion_compuesta_con_return '}' ';'",
"sentencia_do_con_return : DO bloque_sentencias_ejecutables_do_con_return UNTIL '(' condicion ')' ';'",
"sentencia_do_con_return : etiqueta ':' DO bloque_sentencias_ejecutables_do_con_return UNTIL '(' condicion ')' ';'",
"bloque_sentencias_ejecutables_do_con_return : sentencia_return",
"bloque_sentencias_ejecutables_do_con_return : sentencia_seleccion_compuesta_con_return",
"bloque_sentencias_ejecutables_do_con_return : sentencias_ejecutables_do_funcion",
"bloque_sentencias_ejecutables_do_con_return : '{' sentencias_ejecutables_do_funcion sentencia_return '}'",
"bloque_sentencias_ejecutables_do_con_return : '{' sentencias_ejecutables_do_funcion sentencia_seleccion_compuesta_con_return '}'",
"bloque_sentencias_ejecutables_do_con_return : '{' sentencias_ejecutables_do_funcion '}'",
"bloque_sentencias_ejecutables_do_con_return : '{' '}'",
"bloque_sentencias_ejecutables_do_con_return : '{' sentencias_ejecutables_do_funcion sentencia_return",
"bloque_sentencias_ejecutables_do_con_return : sentencias_ejecutables_do_funcion sentencia_return '}'",
"bloque_sentencias_ejecutables_do_con_return : '{' sentencias_ejecutables_do_funcion sentencia_seleccion_compuesta_con_return",
"bloque_sentencias_ejecutables_do_con_return : sentencias_ejecutables_do_funcion sentencia_seleccion_compuesta_con_return '}'",
"bloque_sentencias_ejecutables_do_con_return : '{' sentencias_ejecutables_do_funcion",
"bloque_sentencias_ejecutables_do_con_return : sentencias_ejecutables_do_funcion '}'",
"sentencias_ejecutables_do_funcion : sentencia_ejecutable_do_funcion",
"sentencias_ejecutables_do_funcion : sentencias_ejecutables_do_funcion sentencia_ejecutable_do_funcion",
"sentencia_ejecutable_do_funcion : sentencia_ejecutable_funcion",
"sentencia_ejecutable_do_funcion : sentencia_break",
"sentencia_ejecutable_do_funcion : sentencia_continue",
"encabezado_funcion : FUN ID '(' ')' ':' tipo",
"encabezado_funcion : FUN ID '(' lista_de_parametros ')' ':' tipo",
"encabezado_funcion : FUN ID '(' ')' ':'",
"encabezado_funcion : FUN '(' ')' ':' tipo",
"encabezado_funcion : FUN ID ')' ':' tipo",
"encabezado_funcion : FUN ID '(' ':' tipo",
"encabezado_funcion : FUN ID '(' lista_de_parametros ')' ':'",
"encabezado_funcion : FUN '(' lista_de_parametros ')' ':' tipo",
"encabezado_funcion : FUN ID lista_de_parametros ')' ':' tipo",
"encabezado_funcion : FUN ID '(' lista_de_parametros ':' tipo",
"sentencia_return : RETURN '(' expresion ')' ';'",
"sentencia_return : RETURN '(' expresion ')'",
"sentencia_return : RETURN expresion ')'",
"sentencia_return : RETURN '(' expresion",
"sentencia_return : RETURN '(' ')' ';'",
"lista_de_parametros : parametro",
"lista_de_parametros : parametro ',' parametro",
"lista_de_parametros : parametro ',' parametro ',' lista_parametros_exceso",
"lista_parametros_exceso : parametro",
"lista_parametros_exceso : parametro ',' lista_parametros_exceso",
"parametro : tipo ID",
"parametro : tipo",
"$$1 :",
"parametro : $$1 ID",
"declaracion_constantes : CONST lista_declaracion_constantes ';'",
"declaracion_constantes : CONST lista_declaracion_constantes",
"declaracion_constantes : CONST ';'",
"lista_declaracion_constantes : declaracion_constante",
"lista_declaracion_constantes : declaracion_constante ',' lista_declaracion_constantes",
"declaracion_constante : ID ASIGNACION CTE",
"declaracion_constante : ID ASIGNACION",
"declaracion_constante : ID CTE",
"declaracion_constante : ID",
"sentencia_ejecutable : asignacion",
"sentencia_ejecutable : DEFER asignacion",
"sentencia_ejecutable : seleccion",
"sentencia_ejecutable : DEFER seleccion",
"sentencia_ejecutable : imprimir",
"sentencia_ejecutable : DEFER imprimir",
"sentencia_ejecutable : sentencia_when",
"sentencia_ejecutable : DEFER sentencia_when",
"sentencia_ejecutable : sentencia_do",
"sentencia_ejecutable : DEFER sentencia_do",
"sentencia_ejecutable_do : sentencia_ejecutable",
"sentencia_ejecutable_do : sentencia_break",
"sentencia_ejecutable_do : sentencia_continue",
"sentencia_break : BREAK ';'",
"sentencia_break : BREAK ':' etiqueta ';'",
"sentencia_break : BREAK",
"sentencia_break : BREAK ':' etiqueta",
"sentencia_break : BREAK ':' ';'",
"sentencia_continue : CONTINUE ';'",
"sentencia_continue : CONTINUE",
"sentencia_do : sentencia_do_simple",
"sentencia_do : etiqueta ':' sentencia_do_simple",
"sentencia_do_simple : DO bloque_sentencias_ejecutables_do UNTIL '(' condicion ')' ';'",
"sentencia_do_simple : DO bloque_sentencias_ejecutables_do UNTIL '(' condicion ')'",
"sentencia_do_simple : DO bloque_sentencias_ejecutables_do UNTIL '(' ')' ';'",
"sentencia_do_simple : DO bloque_sentencias_ejecutables_do UNTIL condicion ')' ';'",
"sentencia_do_simple : DO bloque_sentencias_ejecutables_do UNTIL '(' condicion ';'",
"etiqueta : ID",
"bloque_sentencias_ejecutables_do : sentencia_ejecutable_do",
"bloque_sentencias_ejecutables_do : '{' sentencias_ejecutables_do '}'",
"bloque_sentencias_ejecutables_do : '{' sentencias_ejecutables_do",
"bloque_sentencias_ejecutables_do : sentencias_ejecutables_do '}'",
"sentencias_ejecutables_do : sentencia_ejecutable_do",
"sentencias_ejecutables_do : sentencias_ejecutables_do sentencia_ejecutable_do",
"asignacion : ID ASIGNACION expresion ';'",
"asignacion : ID ASIGNACION ';'",
"asignacion : ID ASIGNACION expresion",
"sentencia_when : WHEN '(' condicion ')' THEN '{' sentencias_when '}' ';'",
"sentencia_when : WHEN '(' condicion ')' '{' sentencias_when '}' ';'",
"$$2 :",
"sentencia_when : WHEN '(' ')' THEN '{' sentencias_when '}' ';' $$2 WHEN '(' condicion ')' THEN '{' sentencias_when '}'",
"sentencia_when : WHEN '(' condicion ')' '{' sentencias_when '}'",
"sentencia_when : WHEN '(' condicion ')' '{' '}'",
"sentencias_when : sentencia",
"sentencias_when : sentencia sentencias_when",
"seleccion : IF '(' condicion ')' THEN bloque_sentencias_ejecutables_seleccion ENDIF ';'",
"seleccion : IF '(' condicion ')' THEN bloque_sentencias_ejecutables_seleccion ELSE bloque_sentencias_ejecutables_seleccion ENDIF ';'",
"seleccion : IF '(' condicion ')' THEN bloque_sentencias_ejecutables_seleccion ENDIF",
"seleccion : IF '(' condicion ')' THEN bloque_sentencias_ejecutables_seleccion ELSE bloque_sentencias_ejecutables_seleccion ENDIF",
"seleccion : IF '(' condicion THEN bloque_sentencias_ejecutables_seleccion ENDIF ';'",
"seleccion : IF condicion ')' THEN bloque_sentencias_ejecutables_seleccion ENDIF ';'",
"seleccion : IF '(' ')' THEN bloque_sentencias_ejecutables_seleccion ENDIF ';'",
"seleccion : IF '(' condicion ')' THEN ENDIF ';'",
"seleccion : IF '(' condicion ')' bloque_sentencias_ejecutables_seleccion ENDIF ';'",
"seleccion : IF '(' ')' THEN bloque_sentencias_ejecutables_seleccion ELSE bloque_sentencias_ejecutables_seleccion ENDIF ';'",
"seleccion : IF '(' condicion ')' bloque_sentencias_ejecutables_seleccion ELSE bloque_sentencias_ejecutables_seleccion ENDIF ';'",
"seleccion : IF '(' condicion ')' THEN ELSE ENDIF ';'",
"bloque_sentencias_ejecutables_seleccion : sentencia_ejecutable",
"bloque_sentencias_ejecutables_seleccion : '{' sentencias_ejecutables '}'",
"bloque_sentencias_ejecutables_seleccion : '{' '}'",
"bloque_sentencias_ejecutables_seleccion : '{' sentencias_ejecutables",
"bloque_sentencias_ejecutables_seleccion : sentencias_ejecutables '}'",
"sentencias_ejecutables : sentencia_ejecutable",
"sentencias_ejecutables : sentencias_ejecutables sentencia_ejecutable",
"condicion : expresion comparador expresion",
"condicion : expresion comparador",
"condicion : comparador expresion",
"comparador : COMP_MAYOR_IGUAL",
"comparador : COMP_MENOR_IGUAL",
"comparador : COMP_DISTINTO",
"comparador : '>'",
"comparador : '<'",
"comparador : '='",
"expresion : expresion '+' termino",
"expresion : expresion '-' termino",
"expresion : termino",
"termino : termino '*' factor",
"termino : termino '/' factor",
"termino : factor",
"factor : ID",
"factor : constante",
"factor : invocacion_funcion",
"invocacion_funcion : ID '(' ')'",
"invocacion_funcion : ID '(' lista_de_parametros_reales ')'",
"lista_de_parametros_reales : parametro_real",
"lista_de_parametros_reales : lista_de_parametros_reales ',' parametro_real",
"parametro_real : ID",
"parametro_real : constante",
"imprimir : OUT '(' CADENA ')' ';'",
"imprimir : OUT '(' ID ')' ';'",
"imprimir : OUT '(' ')' ';'",
"imprimir : OUT CADENA ')' ';'",
"imprimir : OUT '(' CADENA ';'",
"imprimir : OUT ID ')' ';'",
"imprimir : OUT '(' ID ';'",
"imprimir : OUT '(' CADENA ')'",
"imprimir : OUT '(' ID ')'",
"constante : CTE",
"constante : '-' CTE",
"tipo : UINT16",
"tipo : DOUBLE64",
};

//#line 413 ".\gramatica.y"

public static AnalizadorLexico lexico = null;
public static Logger logger = null;
public static TablaDeSimbolos ts = null;

public void constanteConSigno(String constante) {
	if (constante.contains(".")) {
		
		String negConstante = "-"+constante;
		
		Double parsedDouble = Double.parseDouble(negConstante.replace('D', 'E'));
		
		if (parsedDouble < -2.2250738585072014E-308 && -1.7976931348623157E+308 > parsedDouble) {
			logger.logWarning("[Parser] Rango invalido para la constante: " + negConstante + ", se trunca al rango permitido");
			
			if (-1.7976931348623157E+308 < parsedDouble) {
				negConstante = new String("-1.7976931348623157D+308");
			} else {
				negConstante =  new String("-2.2250738585072014D-308");
			}
		}
		
		ts.swapLexemas(constante, negConstante);
	} else {
		//se recibio un uint que fue aceptado por el lexico pero resulta ser negativo
		logger.logWarning("[Parser] No se admiten ui16 con valores negativos: " + "-"+constante + ", se trunca a 0");
		
		ts.swapLexemas(constante, "0");
	}
}	

public int yylex() {
	return lexico.yylex(yylval);
}

public void yyerror(String error) {
	logger.logError(error);
}

public static void main(String[] args) {
	if (args.length == 0) {
		System.err.println("No se especifico ningun archivo de codigo");
	} else {
		String archivo_a_leer = args[0];
		System.out.println("Se va a leer archivo " + archivo_a_leer);
		
		FileReaderHelper fileHelper = new FileReaderHelper();
		
		fileHelper.open(archivo_a_leer);
		
		Parser parser = new Parser();
		logger = new Logger();
		ts = new TablaDeSimbolos();
		lexico = new AnalizadorLexico(fileHelper, ts, logger);
		
        parser.run();

		String path = new File(archivo_a_leer).getAbsolutePath().replaceAll(args[0],"");
        
        Output out = new Output(path);
        
        String printTs = ts.print();
        
        
        out.saveFile("codigo-lexico.txt", logger.getLexico());
		out.saveFile("codigo-sintetico.txt", logger.getSintactico());
		out.saveFile("tabla-de-simbolos.txt", printTs);
        
		System.out.println(printTs);
	}
}
//#line 1063 "Parser.java"
//###############################################################
// method: yylexdebug : check lexer state
//###############################################################
void yylexdebug(int state,int ch)
{
String s=null;
  if (ch < 0) ch=0;
  if (ch <= YYMAXTOKEN) //check index bounds
     s = yyname[ch];    //now get it
  if (s==null)
    s = "illegal-symbol";
  debug("state "+state+", reading "+ch+" ("+s+")");
}





//The following are now global, to aid in error reporting
int yyn;       //next next thing to do
int yym;       //
int yystate;   //current parsing state from state table
String yys;    //current token string


//###############################################################
// method: yyparse : parse input and execute indicated items
//###############################################################
int yyparse()
{
boolean doaction;
  init_stacks();
  yynerrs = 0;
  yyerrflag = 0;
  yychar = -1;          //impossible char forces a read
  yystate=0;            //initial state
  state_push(yystate);  //save it
  val_push(yylval);     //save empty value
  while (true) //until parsing is done, either correctly, or w/error
    {
    doaction=true;
    if (yydebug) debug("loop"); 
    //#### NEXT ACTION (from reduction table)
    for (yyn=yydefred[yystate];yyn==0;yyn=yydefred[yystate])
      {
      if (yydebug) debug("yyn:"+yyn+"  state:"+yystate+"  yychar:"+yychar);
      if (yychar < 0)      //we want a char?
        {
        yychar = yylex();  //get next token
        if (yydebug) debug(" next yychar:"+yychar);
        //#### ERROR CHECK ####
        if (yychar < 0)    //it it didn't work/error
          {
          yychar = 0;      //change it to default string (no -1!)
          if (yydebug)
            yylexdebug(yystate,yychar);
          }
        }//yychar<0
      yyn = yysindex[yystate];  //get amount to shift by (shift index)
      if ((yyn != 0) && (yyn += yychar) >= 0 &&
          yyn <= YYTABLESIZE && yycheck[yyn] == yychar)
        {
        if (yydebug)
          debug("state "+yystate+", shifting to state "+yytable[yyn]);
        //#### NEXT STATE ####
        yystate = yytable[yyn];//we are in a new state
        state_push(yystate);   //save it
        val_push(yylval);      //push our lval as the input for next rule
        yychar = -1;           //since we have 'eaten' a token, say we need another
        if (yyerrflag > 0)     //have we recovered an error?
           --yyerrflag;        //give ourselves credit
        doaction=false;        //but don't process yet
        break;   //quit the yyn=0 loop
        }

    yyn = yyrindex[yystate];  //reduce
    if ((yyn !=0 ) && (yyn += yychar) >= 0 &&
            yyn <= YYTABLESIZE && yycheck[yyn] == yychar)
      {   //we reduced!
      if (yydebug) debug("reduce");
      yyn = yytable[yyn];
      doaction=true; //get ready to execute
      break;         //drop down to actions
      }
    else //ERROR RECOVERY
      {
      if (yyerrflag==0)
        {
        yyerror("syntax error");
        yynerrs++;
        }
      if (yyerrflag < 3) //low error count?
        {
        yyerrflag = 3;
        while (true)   //do until break
          {
          if (stateptr<0)   //check for under & overflow here
            {
            yyerror("stack underflow. aborting...");  //note lower case 's'
            return 1;
            }
          yyn = yysindex[state_peek(0)];
          if ((yyn != 0) && (yyn += YYERRCODE) >= 0 &&
                    yyn <= YYTABLESIZE && yycheck[yyn] == YYERRCODE)
            {
            if (yydebug)
              debug("state "+state_peek(0)+", error recovery shifting to state "+yytable[yyn]+" ");
            yystate = yytable[yyn];
            state_push(yystate);
            val_push(yylval);
            doaction=false;
            break;
            }
          else
            {
            if (yydebug)
              debug("error recovery discarding state "+state_peek(0)+" ");
            if (stateptr<0)   //check for under & overflow here
              {
              yyerror("Stack underflow. aborting...");  //capital 'S'
              return 1;
              }
            state_pop();
            val_pop();
            }
          }
        }
      else            //discard this token
        {
        if (yychar == 0)
          return 1; //yyabort
        if (yydebug)
          {
          yys = null;
          if (yychar <= YYMAXTOKEN) yys = yyname[yychar];
          if (yys == null) yys = "illegal-symbol";
          debug("state "+yystate+", error recovery discards token "+yychar+" ("+yys+")");
          }
        yychar = -1;  //read another
        }
      }//end error recovery
    }//yyn=0 loop
    if (!doaction)   //any reason not to proceed?
      continue;      //skip action
    yym = yylen[yyn];          //get count of terminals on rhs
    if (yydebug)
      debug("state "+yystate+", reducing "+yym+" by rule "+yyn+" ("+yyrule[yyn]+")");
    if (yym>0)                 //if count of rhs not 'nil'
      yyval = val_peek(yym-1); //get current semantic value
    yyval = dup_yyval(yyval); //duplicate yyval if ParserVal is used as semantic value
    switch(yyn)
      {
//########## USER-SUPPLIED ACTIONS ##########
case 1:
//#line 17 ".\gramatica.y"
{ logger.logSuccess("[Parser] Programa correcto detectado"); }
break;
case 2:
//#line 18 ".\gramatica.y"
{ logger.logError("[Parser] Se esperaba un identificador nombre del programa"); }
break;
case 3:
//#line 19 ".\gramatica.y"
{ logger.logError("[Parser] Se esperaba un { antes de las sentencias del programa"); }
break;
case 4:
//#line 20 ".\gramatica.y"
{ logger.logError("[Parser] Se esperaba un } al final de las sentencias del programa"); }
break;
case 5:
//#line 21 ".\gramatica.y"
{ logger.logError("[Parser] Se esperaban sentencias del programa"); }
break;
case 15:
//#line 46 ".\gramatica.y"
{ logger.logSuccess("[Parser] Declaracion de lista de variables detectado"); }
break;
case 16:
//#line 47 ".\gramatica.y"
{ logger.logError("[Parser] Se esperaba un ; al final de la lista de variables"); }
break;
case 17:
//#line 48 ".\gramatica.y"
{ logger.logError("[Parser] Se esperaba un tipo para la lista de variables"); }
break;
case 18:
//#line 49 ".\gramatica.y"
{ logger.logError("[Parser] Se esperaba una variable o lista de variables"); }
break;
case 21:
//#line 58 ".\gramatica.y"
{ logger.logSuccess("[Parser] Declaracion de funcion detectado"); }
break;
case 22:
//#line 59 ".\gramatica.y"
{ logger.logSuccess("[Parser] Declaracion de funcion detectado"); }
break;
case 23:
//#line 60 ".\gramatica.y"
{ logger.logError("[Parser] Se esperaban sentencias en la funcion"); }
break;
case 40:
//#line 92 ".\gramatica.y"
{ logger.logSuccess("[Parser] Declaracion de funcion detectado"); }
break;
case 41:
//#line 93 ".\gramatica.y"
{ logger.logSuccess("[Parser] Declaracion de funcion detectado"); }
break;
case 52:
//#line 113 ".\gramatica.y"
{ logger.logSuccess("[Parser] Sentencia de seleccion detectada"); }
break;
case 53:
//#line 114 ".\gramatica.y"
{ logger.logSuccess("[Parser] Sentencia de seleccion detectada"); }
break;
case 54:
//#line 115 ".\gramatica.y"
{ logger.logSuccess("[Parser] Sentencia de seleccion detectada"); }
break;
case 55:
//#line 116 ".\gramatica.y"
{ logger.logSuccess("[Parser] Sentencia de seleccion detectada"); }
break;
case 56:
//#line 117 ".\gramatica.y"
{ logger.logSuccess("[Parser] Sentencia de seleccion detectada"); }
break;
case 57:
//#line 118 ".\gramatica.y"
{ logger.logSuccess("[Parser] Sentencia de seleccion detectada"); }
break;
case 58:
//#line 119 ".\gramatica.y"
{ logger.logSuccess("[Parser] Sentencia de seleccion detectada"); }
break;
case 59:
//#line 120 ".\gramatica.y"
{ logger.logSuccess("[Parser] Sentencia de seleccion detectada"); }
break;
case 60:
//#line 121 ".\gramatica.y"
{ logger.logSuccess("[Parser] Sentencia de seleccion detectada"); }
break;
case 61:
//#line 122 ".\gramatica.y"
{ logger.logSuccess("[Parser] Sentencia de seleccion detectada"); }
break;
case 62:
//#line 123 ".\gramatica.y"
{ logger.logSuccess("[Parser] Sentencia de seleccion detectada"); }
break;
case 63:
//#line 124 ".\gramatica.y"
{ logger.logSuccess("[Parser] Sentencia de seleccion detectada"); }
break;
case 64:
//#line 125 ".\gramatica.y"
{ logger.logSuccess("[Parser] Sentencia de seleccion detectada"); }
break;
case 65:
//#line 126 ".\gramatica.y"
{ logger.logSuccess("[Parser] Sentencia de seleccion detectada"); }
break;
case 66:
//#line 130 ".\gramatica.y"
{ logger.logSuccess("[Parser] Sentencia when detectada"); }
break;
case 67:
//#line 131 ".\gramatica.y"
{ logger.logSuccess("[Parser] Sentencia when detectada"); }
break;
case 68:
//#line 132 ".\gramatica.y"
{ logger.logSuccess("[Parser] Sentencia when detectada"); }
break;
case 69:
//#line 133 ".\gramatica.y"
{ logger.logError("[Parser] Se esperaba ; al final de la sentencia when"); }
break;
case 70:
//#line 134 ".\gramatica.y"
{ logger.logError("[Parser] Se esperaba ; al final de la sentencia when"); }
break;
case 71:
//#line 135 ".\gramatica.y"
{ logger.logError("[Parser] Se esperaba ; al final de la sentencia when"); }
break;
case 72:
//#line 136 ".\gramatica.y"
{ logger.logError("[Parser] Se esperaban sentencias en la sentencia when"); }
break;
case 73:
//#line 137 ".\gramatica.y"
{ logger.logError("[Parser] Se esperaba una condicion en la sentencia when"); }
break;
case 74:
//#line 138 ".\gramatica.y"
{ logger.logError("[Parser] Se esperaba una condicion en la sentencia when"); }
break;
case 75:
//#line 139 ".\gramatica.y"
{ logger.logError("[Parser] Se esperaba una condicion en la sentencia when"); }
break;
case 76:
//#line 140 ".\gramatica.y"
{ logger.logError("[Parser] Se esperaba la palabra reservada then en la sentencia when"); }
break;
case 77:
//#line 141 ".\gramatica.y"
{ logger.logError("[Parser] Se esperaba la palabra reservada then en la sentencia when"); }
break;
case 78:
//#line 142 ".\gramatica.y"
{ logger.logError("[Parser] Se esperaba la palabra reservada then en la sentencia when"); }
break;
case 79:
//#line 146 ".\gramatica.y"
{ logger.logSuccess("[Parser] Sentencia do until detectada"); }
break;
case 80:
//#line 147 ".\gramatica.y"
{ logger.logSuccess("[Parser] Sentencia do until detectada"); }
break;
case 87:
//#line 157 ".\gramatica.y"
{ logger.logError("[Parser] Se esperaban sentencias en la sentencia do"); }
break;
case 88:
//#line 158 ".\gramatica.y"
{ logger.logError("[Parser] Se esperaba un } al final de la sentencia do"); }
break;
case 89:
//#line 159 ".\gramatica.y"
{ logger.logError("[Parser] Se esperaba un } al final de la sentencia do"); }
break;
case 90:
//#line 160 ".\gramatica.y"
{ logger.logError("[Parser] Se esperaba un } al final de la sentencia do"); }
break;
case 91:
//#line 161 ".\gramatica.y"
{ logger.logError("[Parser] Se esperaba un } al final de la sentencia do"); }
break;
case 92:
//#line 162 ".\gramatica.y"
{ logger.logError("[Parser] Se esperaba un } al final de la sentencia do"); }
break;
case 93:
//#line 163 ".\gramatica.y"
{ logger.logError("[Parser] Se esperaba un } al final de la sentencia do"); }
break;
case 101:
//#line 180 ".\gramatica.y"
{ logger.logError("[Parser] Se esperaba un tipo de return para la funcion"); }
break;
case 102:
//#line 181 ".\gramatica.y"
{ logger.logError("[Parser] Se esperaba un identificador nombre para la funcion"); }
break;
case 103:
//#line 182 ".\gramatica.y"
{ logger.logError("[Parser] Se esperaba un ( luego del nombre de la funcion"); }
break;
case 104:
//#line 183 ".\gramatica.y"
{ logger.logError("[Parser] Se esperaba un ) luego del nombre para la funcion"); }
break;
case 105:
//#line 184 ".\gramatica.y"
{ logger.logError("[Parser] Se esperaba un tipo de return para la funcion"); }
break;
case 106:
//#line 185 ".\gramatica.y"
{ logger.logError("[Parser] Se esperaba un identificador nombre para la funcion"); }
break;
case 107:
//#line 186 ".\gramatica.y"
{ logger.logError("[Parser] Se esperaba un ( luego del nombre de la funcion"); }
break;
case 108:
//#line 187 ".\gramatica.y"
{ logger.logError("[Parser] Se esperaba un ) luego del nombre para la funcion"); }
break;
case 110:
//#line 192 ".\gramatica.y"
{ logger.logError("[Parser] Se esperaba un ; al final de la sentencia return"); }
break;
case 111:
//#line 193 ".\gramatica.y"
{ logger.logError("[Parser] Se esperaba un ( en la sentencia return"); }
break;
case 112:
//#line 194 ".\gramatica.y"
{ logger.logError("[Parser] Se esperaba un ) en la sentencia return"); }
break;
case 113:
//#line 195 ".\gramatica.y"
{ logger.logError("[Parser] Se esperaba una expresion en la sentencia return"); }
break;
case 116:
//#line 201 ".\gramatica.y"
{ logger.logError("[Parser] Hay mas de 2 parametros en la funcion"); }
break;
case 121:
//#line 211 ".\gramatica.y"
{ logger.logError("[Parser] Se esperaba un identificador nombre para el parametro"); }
break;
case 122:
//#line 212 ".\gramatica.y"
{ logger.logError("[Parser] Se esperaba un tipo valido para el parametro"); }
break;
case 123:
//#line 216 ".\gramatica.y"
{ logger.logSuccess("[Parser] Declaracion de constantes detectado"); }
break;
case 124:
//#line 217 ".\gramatica.y"
{ logger.logError("[Parser] Se esperaba ; al final de la declaracion de constantes"); }
break;
case 125:
//#line 218 ".\gramatica.y"
{ logger.logError("[Parser] Se esperaba una lista de declaracion de constantes"); }
break;
case 129:
//#line 228 ".\gramatica.y"
{ logger.logError("[Parser] Se esperaba una constante del lado derecho de la asignacion"); }
break;
case 130:
//#line 229 ".\gramatica.y"
{ logger.logError("[Parser] Se esperaba el simbolo asignacion en la declaracion de constantes"); }
break;
case 131:
//#line 230 ".\gramatica.y"
{ logger.logError("[Parser] Se esperaba una asignacion en la declaracion de constantes"); }
break;
case 145:
//#line 253 ".\gramatica.y"
{ logger.logSuccess("[Parser] Sentencia break detectada"); }
break;
case 146:
//#line 254 ".\gramatica.y"
{ logger.logSuccess("[Parser] Sentencia break con etiqueta detectada"); }
break;
case 147:
//#line 255 ".\gramatica.y"
{ logger.logError("[Parser] Se esperaba un ; luego de la sentencia break"); }
break;
case 148:
//#line 256 ".\gramatica.y"
{ logger.logError("[Parser] Se esperaba un ; luego de la sentencia break"); }
break;
case 149:
//#line 257 ".\gramatica.y"
{ logger.logError("[Parser] Se esperaba una etiqueta en la sentencia break"); }
break;
case 150:
//#line 261 ".\gramatica.y"
{ logger.logSuccess("[Parser] Sentencia continue detectada"); }
break;
case 151:
//#line 262 ".\gramatica.y"
{ logger.logError("[Parser] Se esperaba un ; al final de la sentencia continue"); }
break;
case 154:
//#line 271 ".\gramatica.y"
{ logger.logSuccess("[Parser] Sentencia do until detectada"); }
break;
case 155:
//#line 272 ".\gramatica.y"
{ logger.logError("[Parser] Se esperaba un ; al final de la sentencia do"); }
break;
case 156:
//#line 273 ".\gramatica.y"
{ logger.logError("[Parser] Se esperaba una condicion para la sentencia do"); }
break;
case 157:
//#line 274 ".\gramatica.y"
{ logger.logSuccess("[Parser] Se esperaba un ( en la condicion para la sentencia do"); }
break;
case 158:
//#line 275 ".\gramatica.y"
{ logger.logSuccess("[Parser] Se esperaba un ) en la condicion para la sentencia do"); }
break;
case 162:
//#line 285 ".\gramatica.y"
{ logger.logError("[Parser] Se esperaba un } al final de la sentencia do"); }
break;
case 163:
//#line 286 ".\gramatica.y"
{ logger.logError("[Parser] Se esperaba un { en la sentencia do"); }
break;
case 166:
//#line 295 ".\gramatica.y"
{ logger.logSuccess("[Parser] Asignacion detectada"); }
break;
case 167:
//#line 296 ".\gramatica.y"
{logger.logError("[Parser] Se espera una expresion del lado derecho de la asignacion");}
break;
case 168:
//#line 297 ".\gramatica.y"
{ logger.logError("[Parser] Se espera un ; al final de la asignacion"); }
break;
case 169:
//#line 301 ".\gramatica.y"
{ logger.logSuccess("[Parser] Sentencia when detectada"); }
break;
case 170:
//#line 302 ".\gramatica.y"
{ logger.logError("[Parser] Se esperaba la palabra reservada then en la sentencia when"); }
break;
case 171:
//#line 303 ".\gramatica.y"
{ logger.logError("[Parser] Se esperaba una condicion en la sentencia when"); }
break;
case 172:
//#line 304 ".\gramatica.y"
{ logger.logError("[Parser] Se esperaba un ; al final de la sentencia when"); }
break;
case 173:
//#line 305 ".\gramatica.y"
{ logger.logError("[Parser] Se esperaba la palabra reservada then en la sentencia when"); }
break;
case 174:
//#line 306 ".\gramatica.y"
{ logger.logError("[Parser] Se esperaban sentencias dentro del when"); }
break;
case 177:
//#line 315 ".\gramatica.y"
{ logger.logSuccess("[Parser] Sentencia if then detectada"); }
break;
case 178:
//#line 316 ".\gramatica.y"
{ logger.logSuccess("[Parser] Sentencia if then else detectada"); }
break;
case 179:
//#line 317 ".\gramatica.y"
{ logger.logError("[Parser] Se esperaba un ; al final de la sentencia seleccion"); }
break;
case 180:
//#line 318 ".\gramatica.y"
{ logger.logError("[Parser] Se esperaba un ; al final de la sentencia seleccion"); }
break;
case 181:
//#line 319 ".\gramatica.y"
{ logger.logError("[Parser] Se esperaba un ) en la condicion de la sentencia seleccion"); }
break;
case 182:
//#line 320 ".\gramatica.y"
{ logger.logError("[Parser] Se esperaba un ( en la condicion de la sentencia seleccion"); }
break;
case 183:
//#line 321 ".\gramatica.y"
{ logger.logError("[Parser] Se esperaba una condicion en la sentencia seleccion"); }
break;
case 184:
//#line 322 ".\gramatica.y"
{ logger.logError("[Parser] Se esperaban sentencias en la sentencia seleccion"); }
break;
case 185:
//#line 323 ".\gramatica.y"
{ logger.logError("[Parser] Se esperaban la palabra reservada then en la sentencia seleccion"); }
break;
case 186:
//#line 324 ".\gramatica.y"
{ logger.logError("[Parser] Se esperaban una condicion en la sentencia seleccion"); }
break;
case 187:
//#line 325 ".\gramatica.y"
{ logger.logError("[Parser] Se esperaban la palabra reservada then en la sentencia seleccion"); }
break;
case 188:
//#line 326 ".\gramatica.y"
{ logger.logError("[Parser] Se esperaban sentencias en la sentencia seleccion"); }
break;
case 191:
//#line 332 ".\gramatica.y"
{ logger.logError("[Parser] Se esperaban sentencias dentro de la seleccion"); }
break;
case 192:
//#line 333 ".\gramatica.y"
{ logger.logError("[Parser] Se esperaba un } al final de la seleccion"); }
break;
case 193:
//#line 334 ".\gramatica.y"
{ logger.logError("[Parser] Se esperaba un { en la seleccion"); }
break;
case 197:
//#line 344 ".\gramatica.y"
{ logger.logError("[Parser] Se esperaba un expresion del lado derecho de la comparacion"); }
break;
case 198:
//#line 345 ".\gramatica.y"
{ logger.logError("[Parser] Se esperaba un expresion del lado izquierdo de la comparacion"); }
break;
case 220:
//#line 391 ".\gramatica.y"
{ logger.logSuccess("[Parser] Sentencia out detectada"); }
break;
case 221:
//#line 392 ".\gramatica.y"
{ logger.logSuccess("[Parser] Sentencia out detectada"); }
break;
case 222:
//#line 393 ".\gramatica.y"
{ logger.logError("[Parser] Se esperaba una cadena o identificador en la sentencia out"); }
break;
case 223:
//#line 394 ".\gramatica.y"
{ logger.logError("[Parser] Se esperaba un ( en la sentencia out"); }
break;
case 224:
//#line 395 ".\gramatica.y"
{ logger.logError("[Parser] Se esperaba un ) en la sentencia out"); }
break;
case 225:
//#line 396 ".\gramatica.y"
{ logger.logError("[Parser] Se esperaba un ( en la sentencia out"); }
break;
case 226:
//#line 397 ".\gramatica.y"
{ logger.logError("[Parser] Se esperaba un ) en la sentencia out"); }
break;
case 227:
//#line 398 ".\gramatica.y"
{ logger.logError("[Parser] Se espera un ; al final de la sentencia out"); }
break;
case 228:
//#line 399 ".\gramatica.y"
{ logger.logError("[Parser] Se espera un ; al final de la sentencia out"); }
break;
case 230:
//#line 404 ".\gramatica.y"
{ constanteConSigno(val_peek(0).sval); }
break;
//#line 1696 "Parser.java"
//########## END OF USER-SUPPLIED ACTIONS ##########
    }//switch
    //#### Now let's reduce... ####
    if (yydebug) debug("reduce");
    state_drop(yym);             //we just reduced yylen states
    yystate = state_peek(0);     //get new state
    val_drop(yym);               //corresponding value drop
    yym = yylhs[yyn];            //select next TERMINAL(on lhs)
    if (yystate == 0 && yym == 0)//done? 'rest' state and at first TERMINAL
      {
      if (yydebug) debug("After reduction, shifting from state 0 to state "+YYFINAL+"");
      yystate = YYFINAL;         //explicitly say we're done
      state_push(YYFINAL);       //and save it
      val_push(yyval);           //also save the semantic value of parsing
      if (yychar < 0)            //we want another character?
        {
        yychar = yylex();        //get next character
        if (yychar<0) yychar=0;  //clean, if necessary
        if (yydebug)
          yylexdebug(yystate,yychar);
        }
      if (yychar == 0)          //Good exit (if lex returns 0 ;-)
         break;                 //quit the loop--all DONE
      }//if yystate
    else                        //else not done yet
      {                         //get next state and push, for next yydefred[]
      yyn = yygindex[yym];      //find out where to go
      if ((yyn != 0) && (yyn += yystate) >= 0 &&
            yyn <= YYTABLESIZE && yycheck[yyn] == yystate)
        yystate = yytable[yyn]; //get new state
      else
        yystate = yydgoto[yym]; //else go to new defred
      if (yydebug) debug("after reduction, shifting from state "+state_peek(0)+" to state "+yystate+"");
      state_push(yystate);     //going again, so push state & val...
      val_push(yyval);         //for next action
      }
    }//main loop
  return 0;//yyaccept!!
}
//## end of method parse() ######################################



//## run() --- for Thread #######################################
/**
 * A default run method, used for operating this parser
 * object in the background.  It is intended for extending Thread
 * or implementing Runnable.  Turn off with -Jnorun .
 */
public void run()
{
  yyparse();
}
//## end of method run() ########################################



//## Constructors ###############################################
/**
 * Default constructor.  Turn off with -Jnoconstruct .

 */
public Parser()
{
  //nothing to do
}


/**
 * Create a parser, setting the debug to true or false.
 * @param debugMe true for debugging, false for no debug.
 */
public Parser(boolean debugMe)
{
  yydebug=debugMe;
}
//###############################################################



}
//################### END OF CLASS ##############################
