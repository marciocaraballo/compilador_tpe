//### This file created by BYACC 1.8(/Java extension  1.15)
//### Java capabilities added 7 Jan 97, Bob Jamison
//### Updated : 27 Nov 97  -- Bob Jamison, Joe Nieten
//###           01 Jan 98  -- Bob Jamison -- fixed generic semantic constructor
//###           01 Jun 99  -- Bob Jamison -- added Runnable support
//###           06 Aug 00  -- Bob Jamison -- made state variables class-global
//###           03 Jan 01  -- Bob Jamison -- improved flags, tracing
//###           16 May 01  -- Bob Jamison -- added custom stack sizing
//###           04 Mar 02  -- Yuval Oren  -- improved java performance, added options
//###           14 Mar 02  -- Tomas Hurka -- -d support, static initializer workaround
//### Please send bug reports to tom@hukatronic.cz
//### static char yysccsid[] = "@(#)yaccpar	1.8 (Berkeley) 01/20/90";






//#line 2 ".\gramatica.y"
package compilador;
import java.io.File;
//#line 20 "Parser.java"




public class Parser
{

boolean yydebug;        //do I want debug output?
int yynerrs;            //number of errors so far
int yyerrflag;          //was there an error?
int yychar;             //the current working character

//########## MESSAGES ##########
//###############################################################
// method: debug
//###############################################################
void debug(String msg)
{
  if (yydebug)
    System.out.println(msg);
}

//########## STATE STACK ##########
final static int YYSTACKSIZE = 500;  //maximum stack size
int statestk[] = new int[YYSTACKSIZE]; //state stack
int stateptr;
int stateptrmax;                     //highest index of stackptr
int statemax;                        //state when highest index reached
//###############################################################
// methods: state stack push,pop,drop,peek
//###############################################################
final void state_push(int state)
{
  try {
		stateptr++;
		statestk[stateptr]=state;
	 }
	 catch (ArrayIndexOutOfBoundsException e) {
     int oldsize = statestk.length;
     int newsize = oldsize * 2;
     int[] newstack = new int[newsize];
     System.arraycopy(statestk,0,newstack,0,oldsize);
     statestk = newstack;
     statestk[stateptr]=state;
  }
}
final int state_pop()
{
  return statestk[stateptr--];
}
final void state_drop(int cnt)
{
  stateptr -= cnt; 
}
final int state_peek(int relative)
{
  return statestk[stateptr-relative];
}
//###############################################################
// method: init_stacks : allocate and prepare stacks
//###############################################################
final boolean init_stacks()
{
  stateptr = -1;
  val_init();
  return true;
}
//###############################################################
// method: dump_stacks : show n levels of the stacks
//###############################################################
void dump_stacks(int count)
{
int i;
  System.out.println("=index==state====value=     s:"+stateptr+"  v:"+valptr);
  for (i=0;i<count;i++)
    System.out.println(" "+i+"    "+statestk[i]+"      "+valstk[i]);
  System.out.println("======================");
}


//########## SEMANTIC VALUES ##########
//public class ParserVal is defined in ParserVal.java


String   yytext;//user variable to return contextual strings
ParserVal yyval; //used to return semantic vals from action routines
ParserVal yylval;//the 'lval' (result) I got from yylex()
ParserVal valstk[];
int valptr;
//###############################################################
// methods: value stack push,pop,drop,peek.
//###############################################################
void val_init()
{
  valstk=new ParserVal[YYSTACKSIZE];
  yyval=new ParserVal();
  yylval=new ParserVal();
  valptr=-1;
}
void val_push(ParserVal val)
{
  if (valptr>=YYSTACKSIZE)
    return;
  valstk[++valptr]=val;
}
ParserVal val_pop()
{
  if (valptr<0)
    return new ParserVal();
  return valstk[valptr--];
}
void val_drop(int cnt)
{
int ptr;
  ptr=valptr-cnt;
  if (ptr<0)
    return;
  valptr = ptr;
}
ParserVal val_peek(int relative)
{
int ptr;
  ptr=valptr-relative;
  if (ptr<0)
    return new ParserVal();
  return valstk[ptr];
}
final ParserVal dup_yyval(ParserVal val)
{
  ParserVal dup = new ParserVal();
  dup.ival = val.ival;
  dup.dval = val.dval;
  dup.sval = val.sval;
  dup.obj = val.obj;
  return dup;
}
//#### end semantic value section ####
public final static short ID=257;
public final static short CTE=258;
public final static short CADENA=259;
public final static short IF=260;
public final static short THEN=261;
public final static short ELSE=262;
public final static short ENDIF=263;
public final static short OUT=264;
public final static short FUN=265;
public final static short RETURN=266;
public final static short BREAK=267;
public final static short ASIGNACION=268;
public final static short COMP_MAYOR_IGUAL=269;
public final static short COMP_MENOR_IGUAL=270;
public final static short COMP_DISTINTO=271;
public final static short WHEN=272;
public final static short DO=273;
public final static short UNTIL=274;
public final static short CONTINUE=275;
public final static short DOUBLE64=276;
public final static short UINT16=277;
public final static short DEFER=278;
public final static short CONST=279;
public final static short YYERRCODE=256;
final static short yylhs[] = {                           -1,
    0,    0,    0,    0,    0,    1,    2,    2,    3,    3,
    4,    4,    4,    4,    6,    6,    6,    6,   11,   11,
    7,    7,    7,   14,   14,   15,   15,   16,   16,   16,
   16,   16,   16,   16,   16,   16,   16,   22,   22,    8,
    8,   23,   23,   23,   23,   25,   25,   25,   21,   21,
   21,   21,   21,   21,   21,   21,   21,   21,   21,   21,
   21,   21,   19,   19,   19,   20,   20,   26,   26,   26,
   26,   26,   26,   28,   28,   29,   29,   29,   12,   12,
   12,   12,   12,   12,   12,   12,   12,   12,   13,   13,
   13,   13,   13,   32,   32,   32,   35,   35,   34,   34,
   36,   34,    9,    9,    9,   37,   37,   38,   38,   38,
   38,    5,    5,    5,    5,    5,    5,    5,    5,    5,
    5,   42,   42,   42,   30,   30,   30,   30,   30,   31,
   31,   41,   41,   43,   43,   43,   43,   43,   27,   44,
   44,   45,   45,   17,   17,   17,   40,   40,   47,   40,
   40,   40,   46,   46,   39,   39,   48,   48,   49,   49,
   24,   24,   24,   50,   50,   50,   50,   50,   50,   33,
   33,   33,   51,   51,   51,   52,   52,   52,   54,   54,
   55,   55,   56,   56,   18,   18,   18,   18,   18,   18,
   18,   18,   18,   53,   53,   10,   10,
};
final static short yylen[] = {                            2,
    4,    3,    3,    3,    3,    1,    1,    2,    1,    1,
    1,    1,    1,    1,    3,    2,    2,    2,    3,    1,
    4,    5,    3,    1,    2,    1,    1,    1,    2,    1,
    2,    1,    2,    1,    2,    1,    2,    1,    2,    4,
    5,   10,   13,   13,   16,    1,    1,    2,    8,    8,
    8,   11,   11,   15,   13,   13,   15,   15,   15,   13,
   13,   14,    9,   10,   10,    7,    9,    1,    1,    1,
    4,    4,    3,    1,    2,    1,    1,    1,    6,    7,
    5,    5,    5,    5,    6,    6,    6,    6,    5,    4,
    3,    3,    4,    1,    3,    5,    1,    3,    2,    1,
    0,    2,    3,    2,    2,    1,    3,    3,    2,    2,
    1,    1,    2,    1,    2,    1,    2,    1,    2,    1,
    2,    1,    1,    1,    2,    4,    1,    3,    3,    2,
    1,    1,    3,    7,    6,    6,    6,    6,    1,    1,
    3,    1,    2,    4,    3,    3,    9,    8,    0,   17,
    7,    6,    1,    2,    8,   10,    1,    3,    1,    2,
    3,    2,    2,    1,    1,    1,    1,    1,    1,    3,
    3,    1,    3,    3,    1,    1,    1,    1,    3,    4,
    1,    3,    1,    1,    5,    5,    4,    4,    4,    4,
    4,    4,    4,    1,    2,    1,    1,
};
final static short yydefred[] = {                         0,
    6,    0,    0,    0,    0,    0,    0,    0,    0,    0,
  197,  196,    0,    0,    0,    7,    9,   10,   11,   12,
   13,   14,    0,    0,    0,  112,  116,    0,  114,  118,
  120,  132,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,  122,  123,  124,
  140,    0,  113,  117,  115,  119,  121,    0,  105,    0,
    0,    2,    8,    0,   18,    0,   17,    0,    0,    5,
    0,    3,    0,  194,    0,  145,    0,    0,  175,  177,
  178,   19,  164,  165,  166,  167,  168,  169,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,  125,    0,  130,  142,
    0,    0,  110,    0,  103,    0,   15,    0,    0,    0,
    0,    0,   23,   26,    0,    0,   24,   27,   28,   30,
   32,   34,   36,    0,    0,  133,    1,    0,  195,    0,
    0,  144,    0,    0,    0,    0,    0,  190,  188,  191,
    0,  189,    0,  187,    0,    0,    0,    0,   99,    0,
    0,  102,    0,    0,    0,    0,  139,  129,    0,  141,
  143,    0,    0,  108,  107,    0,    0,    0,    0,    0,
   68,   76,   69,    0,    0,   74,   77,   78,    0,   29,
   31,   33,   35,   37,   21,    0,   25,    0,   40,    0,
  183,  179,  184,    0,  181,    0,    0,  173,  174,    0,
    0,  186,  185,    0,   84,    0,    0,   83,    0,    0,
   82,    0,    0,    0,    0,  126,    0,    0,    0,    0,
    0,    0,   91,    0,    0,    0,   75,    0,   22,   41,
    0,    0,  180,    0,  157,    0,   79,    0,   88,   87,
    0,   86,    0,    0,    0,  152,    0,  136,  138,    0,
  137,    0,   93,    0,    0,   73,    0,    0,    0,    0,
    0,  182,  159,    0,    0,    0,   80,    0,   96,  154,
    0,    0,    0,  134,    0,   89,    0,   71,   72,    0,
    0,    0,  158,  160,    0,  155,    0,  149,    0,  148,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,   98,    0,  147,   48,   38,    0,    0,    0,    0,
    0,    0,    0,   66,    0,    0,    0,    0,  156,    0,
    0,    0,   39,    0,   49,    0,   51,   50,    0,    0,
    0,   46,   47,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,   63,    0,    0,
    0,   67,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,   42,   64,   65,    0,    0,    0,    0,    0,
    0,   52,    0,    0,   53,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
   55,   43,    0,   56,   60,   61,    0,   44,    0,    0,
   62,    0,    0,    0,    0,    0,    0,  150,   58,   59,
   54,    0,   57,    0,   45,    0,    0,    0,    0,
};
final static short yydgoto[] = {                          3,
    4,   15,  253,   17,   18,   19,   20,   21,   22,   23,
   24,   25,  342,  126,  127,  316,  129,  130,  131,  132,
  133,  317,  343,   89,  306,  184,  135,  185,  186,  187,
  188,  100,   90,  101,  279,  102,   60,   61,   29,   30,
   31,   51,   32,   52,  111,  254,  313,  246,  274,   91,
   78,   79,   80,   81,  204,  205,
};
final static short yysindex[] = {                       -80,
    0,  488,    0,  553,  -34,   16,  -37,  -21,   66,  576,
    0,    0,   77,  -50,  813,    0,    0,    0,    0,    0,
    0,    0,  -39,    6,  -13,    0,    0,   89,    0,    0,
    0,    0,  836,  860,   33,  -86,  505,  113,  144,   23,
   17,  -27,  689,  -78,   13,  106, 1114,    0,    0,    0,
    0,  -76,    0,    0,    0,    0,    0, -157,    0,  133,
  156,    0,    0,  165,    0,  137,    0,  784,  -62,    0,
  870,    0,  186,    0,  -28,    0,  124,   65,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,  202,  118,
   69,  189,  193,   25,   40,  200,   19,  187,   24,  223,
  224,   26,  229,  256,   43,  259,    0,  -26,    0,    0,
  997,   97,    0,   50,    0,   54,    0,  282,  -17,  299,
  175,  447,    0,    0,  199, 1068,    0,    0,    0,    0,
    0,    0,    0,  217,  294,    0,    0,   48,    0,   69,
   69,    0,   69,   69,  102,   69,  117,    0,    0,    0,
  300,    0,  306,    0,  313, -103,   29, -103,    0,  320,
 -103,    0, -103,  324,  250,  -97,    0,    0,  326,    0,
    0,  695,  354,    0,    0,  505,   55,  127,  505, 1131,
    0,    0,    0,  139, 1131,    0,    0,    0,  376,    0,
    0,    0,    0,    0,    0,  276,    0,  301,    0,  151,
    0,    0,    0,  100,    0,   65,   65,    0,    0,  764,
  117,    0,    0, -103,    0,  370, -103,    0, -103,  387,
    0, -103,  488,  310,  893,    0,  375,   45,  377,  396,
  379,  148,    0,  410,  978,  412,    0,  505,    0,    0,
  175,   71,    0, 1168,    0,  -48,    0, -103,    0,    0,
 -103,    0,  488,  329,  488,    0,  330,    0,    0,  397,
    0,  196,    0,  400,  212,    0,  335,  336,  505,  425,
  201,    0,    0, 1026,  764,  415,    0,  443,    0,    0,
  430,  371,  438,    0,  711,    0,  388,    0,    0,  457,
  238,  470,    0,    0,  249,    0, -103,    0,  454,    0,
  604, 1178,  251,  -46,  252,  254, 1091,  458,  733,  505,
  460,    0,  257,    0,    0,    0,  838,  463,  407,  472,
  473,  -79,  -84,    0, 1178,  251,  252,  504,    0,  512,
  291,  429,    0,  439,    0, 1178,    0,    0,  515,  308,
 1178,    0,    0,  307,  510,  446,  448,  838,  517,  505,
  474,   73,   83, 1148,  505, 1158,  524,    0,  537,  540,
  494,    0,  579, 1178,  744,  563,  774,  583,  518,  527,
  625,  542,    0,    0,    0,  107,  408,  895, 1178,  409,
  420,    0, 1178,  422,    0,  423,  424,  414,  434,  794,
  547,  435,  546,  575, 1016,  619,  642, 1049,  643,  644,
  646,  152,  651, 1178,  488,  653,  453,  455,  461,  592,
    0,    0,  466,    0,    0,    0, 1178,    0, 1051,  607,
    0,  674,  676,  678,  478,  683, 1158,    0,    0,    0,
    0,  684,    0,  621,    0,  482,  198, 1178, 1158,
};
final static short yyrindex[] = {                         0,
    0,    0,    0,    0,  332,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
  490,  490,    0,  700,  918,  940,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,  629,    0,  520,
  449,    0,    0,  606,    0,  543,    0,    0,    0,    0,
  759,    0,  315,    0,    0,    0,  205,  338,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,  490,    0,   74,    0,
   93,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,  664,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,   62,   86,    0,    0,    0,
  228,    0,  261,    0,    0,    0,    0,    0,    0,    0,
  490,    0,    0,    0,    0,    0,    0,    0,  959,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,  495,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,  361,  384,    0,    0,    0,
   87,    0,    0,  645,    0,    0,    0,    0,    0,   94,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,   70,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,  647,    0,    0,
  490,    0,  648,    0,    0,    0,    0,    0,    0,  284,
    0,    0,    0,  131,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,   98,    0,    0,
    0,    0,  417,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,  490,    0,    0,    0,
    0,    0,  509,    0,  516,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,
};
final static short yygindex[] = {                         0,
    0,   64,  115,  -63,   -9,    0,    0,    0,    0,  697,
   39,    0,  -31,    0, -101,  -47,   -2,    2,  -88,  -82,
  -72,  956,  -38,  -36, -271,  531,   14,  599, -130,   12,
   44,   11,    7, -122,  484,    0,  666,    0,  770,  775,
  777,   20,  718,    0,    0, -173,    0,  526,    0,  701,
  270,  271,  -92,    0,    0,  560,
};
final static int YYTABLESIZE=1456;
static short yytable[];
static { yytable();}
static void yytable(){
yytable = new short[]{                         26,
   48,   26,   40,   27,  124,   27,  106,   26,   59,   36,
   53,   27,   26,  103,   54,   28,   27,   28,   42,   65,
  128,   49,  177,   28,  197,  225,   28,   75,   28,  134,
   26,   26,  168,  192,   27,   27,  125,   48,  220,  193,
  345,   77,    2,  341,   26,  203,   28,   28,   27,  194,
  344,  257,  104,   50,  237,   37,   97,   98,   49,  155,
   28,   66,  124,   96,   67,  151,  110,   34,   26,  216,
  108,  107,   27,  182,   82,  173,  156,   75,  128,  280,
  153,  282,  183,  150,   28,  260,  217,  198,  202,  181,
   50,   76,   75,  381,  196,  231,   71,  147,  152,   75,
  113,   48,  162,  259,  237,   43,  143,  157,   26,   68,
  114,  144,   27,   75,  100,   75,   16,  100,   16,  190,
  162,  169,   49,  191,   28,  178,  163,  161,  278,   63,
  171,  100,  182,   94,   95,  228,  172,  182,   97,  230,
  243,   75,  234,  242,  163,  161,   69,   16,   63,  203,
   94,   95,  211,   92,   50,   97,   87,   88,   86,  140,
  140,  141,  141,  224,  109,  381,  140,  233,  141,  140,
   64,  141,   11,   12,  278,  339,    1,   87,   88,   86,
  339,  119,  142,  232,   93,   63,  119,  182,  264,   35,
  140,  115,  141,  182,   92,  117,  268,  112,  340,  116,
  245,  270,  183,  267,  146,  323,   58,   26,   36,  181,
   10,   27,  192,  275,  276,  319,  320,   64,  193,   38,
   26,   39,   26,   28,   27,  138,   27,  193,  194,  139,
  167,  420,  290,   35,  273,   41,   28,  304,   28,   73,
   74,   26,  145,  124,  158,   27,  305,  148,   11,   12,
   26,  149,   26,  303,   27,   90,   27,   28,  154,  128,
  192,  304,  315,  160,  294,  245,   28,  161,   28,  333,
  327,   26,   26,  328,  417,   27,   27,  326,  334,   94,
  159,   95,  162,  135,  347,  332,  163,   28,   28,   73,
   74,  346,   11,   12,   11,   12,  164,  180,  190,  166,
  333,  315,  191,  165,  201,   74,  333,  174,  333,  334,
   58,   73,   74,  363,  176,  370,  361,  380,  371,  384,
  438,  176,  369,  195,  372,   73,   74,  201,   74,  146,
  333,   92,   92,   44,  365,  366,    6,  172,  179,  394,
    7,  199,  380,   92,  367,  368,  393,  333,    9,   10,
  333,  200,  193,   73,   74,  176,  176,  176,  212,  176,
  170,  176,  210,  410,  213,   83,   84,   85,  390,  366,
  214,  333,  223,  176,  176,  176,  176,  219,  172,  333,
  172,  222,  172,  171,  226,  192,   83,   84,   85,  139,
   20,  333,   90,   90,  229,  434,  172,  172,  172,  172,
  239,  170,   26,  170,   90,  170,   27,  410,  135,  206,
  207,  339,  236,  208,  209,  238,  151,  119,   28,  170,
  170,  170,  170,  241,  171,  240,  171,  248,  171,  340,
  251,   44,  255,  258,  118,  261,  262,  263,    7,  176,
  119,   45,  171,  171,  171,  171,  120,  121,  106,   46,
  265,  269,  122,  281,  283,  284,  285,  339,  286,  288,
  289,  146,  172,  119,  146,  291,  146,  146,  146,  146,
  146,  146,  287,  296,  292,  340,  146,  146,  146,  146,
  146,  146,  146,  146,  193,  170,  297,  193,  298,  193,
  193,  193,  193,  193,  193,  299,  300,  308,  309,  193,
  193,  193,  193,  193,  193,  193,  193,  106,  171,  310,
  307,  311,  314,  318,  321,  322,  324,  192,  329,  104,
  192,  335,  192,  192,  192,  192,  192,  192,  330,  336,
  337,  338,  192,  192,  192,  192,  192,  192,  192,  192,
  135,  151,   16,  135,  349,  135,  135,  135,  135,   75,
  135,  350,  351,  352,  355,  135,  135,  135,  135,  135,
  135,  135,  135,  353,   87,   88,   86,  339,  358,  357,
  359,  176,  360,  106,  176,  362,  176,  176,  176,  176,
  176,  176,  373,  176,  176,  176,  176,  176,  176,  176,
  176,  176,  176,  176,  172,  374,  364,  172,  375,  172,
  172,  172,  172,  172,  172,   20,  172,  172,  172,  172,
  172,  172,  172,  172,  172,  172,  172,  170,  376,  377,
  170,  382,  170,  170,  170,  170,  170,  170,  111,  170,
  170,  170,  170,  170,  170,  170,  170,  170,  170,  170,
  171,  385,  386,  171,  104,  171,  171,  171,  171,  171,
  171,  387,  171,  171,  171,  171,  171,  171,  171,  171,
  171,  171,  171,  109,   20,  388,  389,   16,  391,  405,
  407,  396,  111,  151,  402,   33,  151,  411,  151,  151,
  151,  151,  397,  151,  399,  400,  401,  111,  151,  151,
  151,  151,  151,  151,  151,  151,  403,  406,   47,  408,
  412,  414,  415,   44,  416,  106,  189,  109,  106,  418,
    7,  421,  106,  106,  106,  422,  425,  423,  120,  121,
  106,  106,  109,  424,  106,  106,  106,  106,  426,  105,
   20,  428,  429,   75,  430,  227,  431,   99,   99,   75,
  432,  433,  435,  437,    5,  436,  101,    6,   87,   88,
   86,    7,    8,  111,   87,   88,   86,  139,    4,    9,
   10,   73,   74,   11,   12,   13,   14,   81,   70,   85,
   46,  271,  153,   83,   84,   85,  104,   47,  235,  104,
  312,  175,   55,  104,  104,  104,  136,   56,  109,   57,
  146,  104,  104,   99,    0,  104,  104,  104,  104,   16,
  295,  272,   16,    0,    0,    0,   16,   16,   16,    5,
    0,    0,    6,    0,   16,   16,    7,    8,   16,   16,
   16,   16,    0,    0,    9,   10,    0,    0,   11,   12,
   13,   14,   44,  302,    0,    6,    0,    0,    0,    7,
    0,    0,   45,    0,    0,    0,    0,    9,   10,    0,
   46,    0,  215,   13,  218,  325,    0,   99,    0,  221,
   44,    0,   20,  118,    0,   20,  379,    7,    0,   20,
   20,   20,    0,    0,    0,  120,  121,   20,   20,    0,
    0,   20,   20,   20,   20,  111,  244,    0,  111,    0,
    0,    0,  111,  111,  111,    0,  383,    0,    0,    0,
  111,  111,    0,    0,  111,  111,  111,  111,  123,    0,
  247,    0,    0,  249,    0,  250,  404,    0,  252,    0,
  109,    0,    0,  109,    0,    0,    0,  109,  109,  109,
    0,    0,    0,    0,    0,  109,  109,   62,    0,  109,
  109,  109,  109,    0,  277,   73,   74,   99,    0,    0,
    0,   73,   74,    0,    0,    0,    0,   83,   84,   85,
   70,    0,  331,   83,   84,   85,    0,   44,    0,    0,
  118,    0,    0,    0,    7,    0,  119,    0,    0,    0,
    0,    0,  120,  121,   72,    0,    0,    0,  301,   44,
    0,    0,  118,   99,  137,    0,    7,    0,  119,    0,
   44,    0,    0,  118,  120,  121,    0,    7,    0,  119,
  122,    0,    0,    0,    0,  120,  121,  256,    0,  392,
   44,  301,    0,    6,    0,    0,    0,    7,    0,    0,
   44,    0,    0,  189,    0,    9,   10,    7,    0,    0,
    5,   13,  127,  118,    0,  120,  121,    7,    8,  119,
   44,  122,    0,  189,    0,  120,  121,    7,    0,   11,
   12,  122,   14,    0,  131,  120,  121,    0,    0,    5,
    0,  122,    6,    0,    0,    0,    7,    8,    0,    0,
    0,    0,    0,  128,    9,   10,    0,    0,   11,   12,
   13,   14,    5,    0,   44,    6,    0,  118,    0,    7,
    8,    7,  266,  119,    0,    0,    0,    9,   10,  120,
  121,   11,   12,   13,   14,  122,    5,    0,    0,    6,
    0,  170,    0,    7,    8,    0,    5,    0,    0,    6,
    0,    9,   10,    7,    8,   11,   12,   13,   14,    0,
  409,    9,   10,    0,    0,   11,   12,   13,   14,    5,
  293,   44,    6,    0,  118,    0,    7,    8,    7,    0,
  119,    0,    0,    0,    9,   10,  120,  121,   11,   12,
   13,   14,  122,  413,  127,  409,    0,  127,    0,    0,
    0,  127,    0,  127,  127,    0,    0,    0,    0,  127,
  127,  127,  127,    0,    0,  127,  131,    0,    0,  131,
    0,    0,    0,  131,    0,  131,  131,    0,    0,    0,
    0,  131,  131,  131,  131,  128,    0,  131,  128,    0,
    0,    0,  128,    0,  128,  128,    0,    0,    0,    0,
  128,  128,  128,  128,   44,    0,  128,  118,    0,    0,
    0,    7,    0,  119,   45,    0,    0,    0,    0,  120,
  121,    0,   46,   44,    0,  122,    6,    0,    0,    0,
    7,    0,    0,   45,    0,    0,    0,    0,    9,   10,
    0,   46,   44,    0,   13,  189,    0,    0,    0,    7,
  348,  119,   44,    0,    0,    6,    0,  120,  121,    7,
    0,  354,    0,  122,    0,    0,  356,    9,   10,    0,
    0,    0,    0,   13,    0,   44,    0,   44,  189,    0,
  189,    0,    7,    0,    7,    0,    0,    0,    0,  378,
  120,  121,  120,  121,    5,    0,  122,  118,  122,    0,
    0,    7,    8,  119,  395,    0,    0,    0,  398,  120,
  121,    0,    0,   11,   12,  122,   14,    5,    0,    0,
  189,    0,    0,    0,    7,    8,    0,    0,    0,  419,
    0,    0,  120,  121,    0,    0,   11,   12,  122,   14,
   44,    0,  427,    6,    0,    0,    0,    7,    0,    0,
   45,    0,    0,    0,    0,    9,   10,   44,   46,    0,
  189,   13,    0,  439,    7,    0,    0,   45,    0,    0,
    0,    0,  120,  121,   44,   46,    0,  118,  122,    0,
    0,    7,    0,  119,   44,    0,    0,  189,    0,  120,
  121,    7,    0,  119,   44,  122,    0,    6,    0,  120,
  121,    7,    0,    0,   44,  122,    0,  189,    0,    9,
   10,    7,    0,    0,    0,   13,    0,    0,    0,  120,
  121,    0,    0,    0,    0,  122,
};
}
static short yycheck[];
static { yycheck(); }
static void yycheck() {
yycheck = new short[] {                          2,
   10,    4,   40,    2,   68,    4,   43,   10,   59,   44,
   13,   10,   15,   41,   13,    2,   15,    4,   40,   59,
   68,   10,   40,   10,  126,  123,   13,   45,   15,   68,
   33,   34,   59,  122,   33,   34,   68,   47,  161,  122,
  125,   35,  123,  123,   47,  138,   33,   34,   47,  122,
  322,  225,   42,   10,  185,   40,   40,   41,   47,   41,
   47,   23,  126,   41,   59,   41,   47,    4,   71,   41,
   58,   59,   71,  121,   36,  112,   58,   45,  126,  253,
   41,  255,  121,   59,   71,   41,   58,  126,   41,  121,
   47,   59,   45,  365,  126,   41,   33,   91,   59,   45,
  258,  111,   41,   59,  235,   40,   42,   97,  111,  123,
  268,   47,  111,   45,   41,   45,    2,   44,    4,  122,
   59,  108,  111,  122,  111,  119,   41,   41,  251,   15,
  111,   58,  180,   41,   41,  172,   40,  185,   41,  176,
   41,   45,  179,   44,   59,   59,   58,   33,   34,  242,
   58,   58,  146,   41,  111,   58,   60,   61,   62,   43,
   43,   45,   45,  261,   59,  437,   43,   41,   45,   43,
  257,   45,  276,  277,  297,  260,  257,   60,   61,   62,
  260,  266,   59,  177,   41,   71,  266,  235,   41,  268,
   43,   59,   45,  241,  125,   59,  235,  274,  278,   44,
  210,  238,  241,  235,    0,  307,  257,  210,   44,  241,
  273,  210,  301,  262,  263,  262,  263,  257,  301,  257,
  223,  259,  225,  210,  223,   40,  225,    0,  301,  258,
  257,  405,  269,  268,  244,  257,  223,  285,  225,  257,
  258,  244,   41,  307,   58,  244,  285,   59,  276,  277,
  253,   59,  255,  285,  253,  125,  255,  244,   59,  307,
    0,  309,  301,   41,  274,  275,  253,   44,  255,  317,
  309,  274,  275,  310,  123,  274,  275,  309,  317,  257,
  257,  259,  257,    0,  323,  317,   58,  274,  275,  257,
  258,  323,  276,  277,  276,  277,   41,  123,  301,   41,
  348,  340,  301,  261,  257,  258,  354,  258,  356,  348,
  257,  257,  258,  350,    0,  354,  348,  365,  355,  367,
  123,   40,  354,  125,  356,  257,  258,  257,  258,  125,
  378,  262,  263,  257,  262,  263,  260,    0,   40,  378,
  264,  125,  390,  274,  262,  263,  378,  395,  272,  273,
  398,   58,  125,  257,  258,   41,   42,   43,   59,   45,
    0,   47,  261,  395,   59,  269,  270,  271,  262,  263,
   58,  419,  123,   59,   60,   61,   62,   58,   41,  427,
   43,   58,   45,    0,   59,  125,  269,  270,  271,   58,
   59,  439,  262,  263,   41,  427,   59,   60,   61,   62,
  125,   41,  405,   43,  274,   45,  405,  439,  125,  140,
  141,  260,  274,  143,  144,   40,    0,  266,  405,   59,
   60,   61,   62,  273,   41,  125,   43,   58,   45,  278,
   44,  257,  123,   59,  260,   59,   41,   59,  264,  125,
  266,  267,   59,   60,   61,   62,  272,  273,    0,  275,
   41,   40,  278,  125,  125,   59,  261,  260,   59,  125,
  125,  257,  125,  266,  260,   41,  262,  263,  264,  265,
  266,  267,  261,   59,  274,  278,  272,  273,  274,  275,
  276,  277,  278,  279,  257,  125,   44,  260,   59,  262,
  263,  264,  265,  266,  267,  125,   59,   41,  261,  272,
  273,  274,  275,  276,  277,  278,  279,   59,  125,   40,
  123,  263,   59,  263,  263,  262,   59,  257,   59,    0,
  260,   59,  262,  263,  264,  265,  266,  267,  272,  123,
   59,   59,  272,  273,  274,  275,  276,  277,  278,  279,
  257,  125,    0,  260,   41,  262,  263,  264,  265,   45,
  267,   40,  262,  125,   40,  272,  273,  274,  275,  276,
  277,  278,  279,  125,   60,   61,   62,  260,   59,  263,
  125,  257,  125,  125,  260,   59,  262,  263,  264,  265,
  266,  267,   59,  269,  270,  271,  272,  273,  274,  275,
  276,  277,  278,  279,  257,   59,  123,  260,   59,  262,
  263,  264,  265,  266,  267,    0,  269,  270,  271,  272,
  273,  274,  275,  276,  277,  278,  279,  257,  125,   41,
  260,   59,  262,  263,  264,  265,  266,  267,    0,  269,
  270,  271,  272,  273,  274,  275,  276,  277,  278,  279,
  257,   59,  125,  260,  125,  262,  263,  264,  265,  266,
  267,  125,  269,  270,  271,  272,  273,  274,  275,  276,
  277,  278,  279,    0,   59,   41,  125,  125,  261,  123,
  125,  263,   44,  257,  261,  123,  260,   59,  262,  263,
  264,  265,  263,  267,  263,  263,  263,   59,  272,  273,
  274,  275,  276,  277,  278,  279,  263,  263,  123,  125,
   59,   59,   59,  257,   59,  257,  260,   44,  260,   59,
  264,   59,  264,  265,  266,  263,  125,  263,  272,  273,
  272,  273,   59,  263,  276,  277,  278,  279,  263,   41,
  125,  125,   59,   45,   59,   41,   59,   41,   42,   45,
  263,   59,   59,  262,  257,  125,  257,  260,   60,   61,
   62,  264,  265,  125,   60,   61,   62,   58,    0,  272,
  273,  257,  258,  276,  277,  278,  279,  123,  274,  123,
  262,  241,  125,  269,  270,  271,  257,  262,  180,  260,
  297,  116,   13,  264,  265,  266,   69,   13,  125,   13,
   90,  272,  273,   97,   -1,  276,  277,  278,  279,  257,
  275,  242,  260,   -1,   -1,   -1,  264,  265,  266,  257,
   -1,   -1,  260,   -1,  272,  273,  264,  265,  276,  277,
  278,  279,   -1,   -1,  272,  273,   -1,   -1,  276,  277,
  278,  279,  257,  123,   -1,  260,   -1,   -1,   -1,  264,
   -1,   -1,  267,   -1,   -1,   -1,   -1,  272,  273,   -1,
  275,   -1,  156,  278,  158,  123,   -1,  161,   -1,  163,
  257,   -1,  257,  260,   -1,  260,  123,  264,   -1,  264,
  265,  266,   -1,   -1,   -1,  272,  273,  272,  273,   -1,
   -1,  276,  277,  278,  279,  257,  123,   -1,  260,   -1,
   -1,   -1,  264,  265,  266,   -1,  123,   -1,   -1,   -1,
  272,  273,   -1,   -1,  276,  277,  278,  279,  125,   -1,
  214,   -1,   -1,  217,   -1,  219,  123,   -1,  222,   -1,
  257,   -1,   -1,  260,   -1,   -1,   -1,  264,  265,  266,
   -1,   -1,   -1,   -1,   -1,  272,  273,  125,   -1,  276,
  277,  278,  279,   -1,  248,  257,  258,  251,   -1,   -1,
   -1,  257,  258,   -1,   -1,   -1,   -1,  269,  270,  271,
  125,   -1,  125,  269,  270,  271,   -1,  257,   -1,   -1,
  260,   -1,   -1,   -1,  264,   -1,  266,   -1,   -1,   -1,
   -1,   -1,  272,  273,  125,   -1,   -1,   -1,  278,  257,
   -1,   -1,  260,  297,  125,   -1,  264,   -1,  266,   -1,
  257,   -1,   -1,  260,  272,  273,   -1,  264,   -1,  266,
  278,   -1,   -1,   -1,   -1,  272,  273,  125,   -1,  125,
  257,  278,   -1,  260,   -1,   -1,   -1,  264,   -1,   -1,
  257,   -1,   -1,  260,   -1,  272,  273,  264,   -1,   -1,
  257,  278,  125,  260,   -1,  272,  273,  264,  265,  266,
  257,  278,   -1,  260,   -1,  272,  273,  264,   -1,  276,
  277,  278,  279,   -1,  125,  272,  273,   -1,   -1,  257,
   -1,  278,  260,   -1,   -1,   -1,  264,  265,   -1,   -1,
   -1,   -1,   -1,  125,  272,  273,   -1,   -1,  276,  277,
  278,  279,  257,   -1,  257,  260,   -1,  260,   -1,  264,
  265,  264,  125,  266,   -1,   -1,   -1,  272,  273,  272,
  273,  276,  277,  278,  279,  278,  257,   -1,   -1,  260,
   -1,  125,   -1,  264,  265,   -1,  257,   -1,   -1,  260,
   -1,  272,  273,  264,  265,  276,  277,  278,  279,   -1,
  125,  272,  273,   -1,   -1,  276,  277,  278,  279,  257,
  125,  257,  260,   -1,  260,   -1,  264,  265,  264,   -1,
  266,   -1,   -1,   -1,  272,  273,  272,  273,  276,  277,
  278,  279,  278,  125,  257,  125,   -1,  260,   -1,   -1,
   -1,  264,   -1,  266,  267,   -1,   -1,   -1,   -1,  272,
  273,  274,  275,   -1,   -1,  278,  257,   -1,   -1,  260,
   -1,   -1,   -1,  264,   -1,  266,  267,   -1,   -1,   -1,
   -1,  272,  273,  274,  275,  257,   -1,  278,  260,   -1,
   -1,   -1,  264,   -1,  266,  267,   -1,   -1,   -1,   -1,
  272,  273,  274,  275,  257,   -1,  278,  260,   -1,   -1,
   -1,  264,   -1,  266,  267,   -1,   -1,   -1,   -1,  272,
  273,   -1,  275,  257,   -1,  278,  260,   -1,   -1,   -1,
  264,   -1,   -1,  267,   -1,   -1,   -1,   -1,  272,  273,
   -1,  275,  257,   -1,  278,  260,   -1,   -1,   -1,  264,
  325,  266,  257,   -1,   -1,  260,   -1,  272,  273,  264,
   -1,  336,   -1,  278,   -1,   -1,  341,  272,  273,   -1,
   -1,   -1,   -1,  278,   -1,  257,   -1,  257,  260,   -1,
  260,   -1,  264,   -1,  264,   -1,   -1,   -1,   -1,  364,
  272,  273,  272,  273,  257,   -1,  278,  260,  278,   -1,
   -1,  264,  265,  266,  379,   -1,   -1,   -1,  383,  272,
  273,   -1,   -1,  276,  277,  278,  279,  257,   -1,   -1,
  260,   -1,   -1,   -1,  264,  265,   -1,   -1,   -1,  404,
   -1,   -1,  272,  273,   -1,   -1,  276,  277,  278,  279,
  257,   -1,  417,  260,   -1,   -1,   -1,  264,   -1,   -1,
  267,   -1,   -1,   -1,   -1,  272,  273,  257,  275,   -1,
  260,  278,   -1,  438,  264,   -1,   -1,  267,   -1,   -1,
   -1,   -1,  272,  273,  257,  275,   -1,  260,  278,   -1,
   -1,  264,   -1,  266,  257,   -1,   -1,  260,   -1,  272,
  273,  264,   -1,  266,  257,  278,   -1,  260,   -1,  272,
  273,  264,   -1,   -1,  257,  278,   -1,  260,   -1,  272,
  273,  264,   -1,   -1,   -1,  278,   -1,   -1,   -1,  272,
  273,   -1,   -1,   -1,   -1,  278,
};
}
final static short YYFINAL=3;
final static short YYMAXTOKEN=279;
final static String yyname[] = {
"end-of-file",null,null,null,null,null,null,null,null,null,null,null,null,null,
null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,
null,null,null,null,null,null,null,null,null,null,"'('","')'","'*'","'+'","','",
"'-'",null,"'/'",null,null,null,null,null,null,null,null,null,null,"':'","';'",
"'<'","'='","'>'",null,null,null,null,null,null,null,null,null,null,null,null,
null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,
null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,
null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,
"'{'",null,"'}'",null,null,null,null,null,null,null,null,null,null,null,null,
null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,
null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,
null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,
null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,
null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,
null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,
null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,
null,null,null,null,null,null,null,"ID","CTE","CADENA","IF","THEN","ELSE",
"ENDIF","OUT","FUN","RETURN","BREAK","ASIGNACION","COMP_MAYOR_IGUAL",
"COMP_MENOR_IGUAL","COMP_DISTINTO","WHEN","DO","UNTIL","CONTINUE","DOUBLE64",
"UINT16","DEFER","CONST",
};
final static String yyrule[] = {
"$accept : programa",
"programa : nombre_programa '{' sentencias '}'",
"programa : '{' sentencias '}'",
"programa : nombre_programa sentencias '}'",
"programa : nombre_programa '{' sentencias",
"programa : nombre_programa '{' '}'",
"nombre_programa : ID",
"sentencias : sentencia",
"sentencias : sentencias sentencia",
"sentencia : sentencia_declarativa",
"sentencia : sentencia_ejecutable",
"sentencia_declarativa : sentencia_declarativa_variables",
"sentencia_declarativa : funcion_con_return",
"sentencia_declarativa : funcion_sin_return",
"sentencia_declarativa : declaracion_constantes",
"sentencia_declarativa_variables : tipo lista_de_variables ';'",
"sentencia_declarativa_variables : tipo lista_de_variables",
"sentencia_declarativa_variables : lista_de_variables ';'",
"sentencia_declarativa_variables : tipo ';'",
"lista_de_variables : ID ',' lista_de_variables",
"lista_de_variables : ID",
"funcion_con_return : encabezado_funcion '{' sentencia_return '}'",
"funcion_con_return : encabezado_funcion '{' sentencias_funcion sentencia_return '}'",
"funcion_con_return : encabezado_funcion '{' '}'",
"sentencias_funcion : sentencia_funcion",
"sentencias_funcion : sentencias_funcion sentencia_funcion",
"sentencia_funcion : sentencia_declarativa",
"sentencia_funcion : sentencia_ejecutable_funcion",
"sentencia_ejecutable_funcion : asignacion",
"sentencia_ejecutable_funcion : DEFER asignacion",
"sentencia_ejecutable_funcion : imprimir",
"sentencia_ejecutable_funcion : DEFER imprimir",
"sentencia_ejecutable_funcion : sentencia_when_con_return",
"sentencia_ejecutable_funcion : DEFER sentencia_when_con_return",
"sentencia_ejecutable_funcion : sentencia_do_con_return",
"sentencia_ejecutable_funcion : DEFER sentencia_do_con_return",
"sentencia_ejecutable_funcion : sentencia_seleccion_simple_con_return",
"sentencia_ejecutable_funcion : DEFER sentencia_seleccion_simple_con_return",
"sentencias_ejecutables_funcion : sentencia_ejecutable_funcion",
"sentencias_ejecutables_funcion : sentencias_ejecutables_funcion sentencia_ejecutable_funcion",
"funcion_sin_return : encabezado_funcion '{' sentencia_seleccion_compuesta_con_return '}'",
"funcion_sin_return : encabezado_funcion '{' sentencias_funcion sentencia_seleccion_compuesta_con_return '}'",
"sentencia_seleccion_compuesta_con_return : IF '(' condicion ')' THEN sentencia_seleccion_compuesta_con_return_simple ELSE sentencia_seleccion_compuesta_con_return_simple ENDIF ';'",
"sentencia_seleccion_compuesta_con_return : IF '(' condicion ')' THEN '{' sentencias_ejecutables_funcion sentencia_return '}' ELSE sentencia_seleccion_compuesta_con_return_simple ENDIF ';'",
"sentencia_seleccion_compuesta_con_return : IF '(' condicion ')' THEN sentencia_seleccion_compuesta_con_return_simple ELSE '{' sentencias_ejecutables_funcion sentencia_return '}' ENDIF ';'",
"sentencia_seleccion_compuesta_con_return : IF '(' condicion ')' THEN '{' sentencias_ejecutables_funcion sentencia_return '}' ELSE '{' sentencias_ejecutables_funcion sentencia_return '}' ENDIF ';'",
"sentencia_seleccion_compuesta_con_return_simple : sentencia_return",
"sentencia_seleccion_compuesta_con_return_simple : sentencia_seleccion_compuesta_con_return",
"sentencia_seleccion_compuesta_con_return_simple : DEFER sentencia_seleccion_compuesta_con_return",
"sentencia_seleccion_simple_con_return : IF '(' condicion ')' THEN sentencia_return ENDIF ';'",
"sentencia_seleccion_simple_con_return : IF '(' condicion ')' THEN sentencia_seleccion_compuesta_con_return ENDIF ';'",
"sentencia_seleccion_simple_con_return : IF '(' condicion ')' THEN sentencia_ejecutable_funcion ENDIF ';'",
"sentencia_seleccion_simple_con_return : IF '(' condicion ')' THEN '{' sentencias_ejecutables_funcion sentencia_return '}' ENDIF ';'",
"sentencia_seleccion_simple_con_return : IF '(' condicion ')' THEN '{' sentencias_ejecutables_funcion sentencia_seleccion_compuesta_con_return '}' ENDIF ';'",
"sentencia_seleccion_simple_con_return : IF '(' condicion ')' THEN '{' sentencias_ejecutables_funcion sentencia_return '}' ELSE '{' sentencias_ejecutables_funcion '}' ENDIF ';'",
"sentencia_seleccion_simple_con_return : IF '(' condicion ')' THEN '{' sentencias_ejecutables_funcion sentencia_return '}' ELSE sentencia_ejecutable_funcion ENDIF ';'",
"sentencia_seleccion_simple_con_return : IF '(' condicion ')' THEN '{' sentencias_ejecutables_funcion sentencia_seleccion_compuesta_con_return '}' ELSE sentencia_ejecutable_funcion ENDIF ';'",
"sentencia_seleccion_simple_con_return : IF '(' condicion ')' THEN '{' sentencias_ejecutables_funcion sentencia_seleccion_compuesta_con_return '}' ELSE '{' sentencias_ejecutables_funcion '}' ENDIF ';'",
"sentencia_seleccion_simple_con_return : IF '(' condicion ')' THEN '{' sentencias_ejecutables_funcion '}' ELSE '{' sentencias_ejecutables_funcion sentencia_return '}' ENDIF ';'",
"sentencia_seleccion_simple_con_return : IF '(' condicion ')' THEN '{' sentencias_ejecutables_funcion '}' ELSE '{' sentencias_ejecutables_funcion sentencia_seleccion_compuesta_con_return '}' ENDIF ';'",
"sentencia_seleccion_simple_con_return : IF '(' condicion ')' THEN sentencia_ejecutable_funcion ELSE '{' sentencias_ejecutables_funcion sentencia_return '}' ENDIF ';'",
"sentencia_seleccion_simple_con_return : IF '(' condicion ')' THEN sentencia_ejecutable_funcion ELSE '{' sentencias_ejecutables_funcion sentencia_seleccion_compuesta_con_return '}' ENDIF ';'",
"sentencia_seleccion_simple_con_return : IF '(' condicion ')' THEN '{' sentencias_ejecutables_funcion '}' ELSE '{' sentencias_ejecutables_funcion '}' ENDIF ';'",
"sentencia_when_con_return : WHEN '(' condicion ')' THEN '{' sentencia_funcion '}' ';'",
"sentencia_when_con_return : WHEN '(' condicion ')' THEN '{' sentencia_funcion sentencia_return '}' ';'",
"sentencia_when_con_return : WHEN '(' condicion ')' THEN '{' sentencia_funcion sentencia_seleccion_compuesta_con_return '}' ';'",
"sentencia_do_con_return : DO bloque_sentencias_ejecutables_do_con_return UNTIL '(' condicion ')' ';'",
"sentencia_do_con_return : etiqueta ':' DO bloque_sentencias_ejecutables_do_con_return UNTIL '(' condicion ')' ';'",
"bloque_sentencias_ejecutables_do_con_return : sentencia_return",
"bloque_sentencias_ejecutables_do_con_return : sentencia_seleccion_compuesta_con_return",
"bloque_sentencias_ejecutables_do_con_return : sentencias_ejecutables_do_funcion",
"bloque_sentencias_ejecutables_do_con_return : '{' sentencias_ejecutables_do_funcion sentencia_return '}'",
"bloque_sentencias_ejecutables_do_con_return : '{' sentencias_ejecutables_do_funcion sentencia_seleccion_compuesta_con_return '}'",
"bloque_sentencias_ejecutables_do_con_return : '{' sentencias_ejecutables_do_funcion '}'",
"sentencias_ejecutables_do_funcion : sentencia_ejecutable_do_funcion",
"sentencias_ejecutables_do_funcion : sentencias_ejecutables_do_funcion sentencia_ejecutable_do_funcion",
"sentencia_ejecutable_do_funcion : sentencia_ejecutable_funcion",
"sentencia_ejecutable_do_funcion : sentencia_break",
"sentencia_ejecutable_do_funcion : sentencia_continue",
"encabezado_funcion : FUN ID '(' ')' ':' tipo",
"encabezado_funcion : FUN ID '(' lista_de_parametros ')' ':' tipo",
"encabezado_funcion : FUN ID '(' ')' ':'",
"encabezado_funcion : FUN '(' ')' ':' tipo",
"encabezado_funcion : FUN ID ')' ':' tipo",
"encabezado_funcion : FUN ID '(' ':' tipo",
"encabezado_funcion : FUN ID '(' lista_de_parametros ')' ':'",
"encabezado_funcion : FUN '(' lista_de_parametros ')' ':' tipo",
"encabezado_funcion : FUN ID lista_de_parametros ')' ':' tipo",
"encabezado_funcion : FUN ID '(' lista_de_parametros ':' tipo",
"sentencia_return : RETURN '(' expresion ')' ';'",
"sentencia_return : RETURN '(' expresion ')'",
"sentencia_return : RETURN expresion ')'",
"sentencia_return : RETURN '(' expresion",
"sentencia_return : RETURN '(' ')' ';'",
"lista_de_parametros : parametro",
"lista_de_parametros : parametro ',' parametro",
"lista_de_parametros : parametro ',' parametro ',' lista_parametros_exceso",
"lista_parametros_exceso : parametro",
"lista_parametros_exceso : parametro ',' lista_parametros_exceso",
"parametro : tipo ID",
"parametro : tipo",
"$$1 :",
"parametro : $$1 ID",
"declaracion_constantes : CONST lista_declaracion_constantes ';'",
"declaracion_constantes : CONST lista_declaracion_constantes",
"declaracion_constantes : CONST ';'",
"lista_declaracion_constantes : declaracion_constante",
"lista_declaracion_constantes : declaracion_constante ',' lista_declaracion_constantes",
"declaracion_constante : ID ASIGNACION CTE",
"declaracion_constante : ID ASIGNACION",
"declaracion_constante : ID CTE",
"declaracion_constante : ID",
"sentencia_ejecutable : asignacion",
"sentencia_ejecutable : DEFER asignacion",
"sentencia_ejecutable : seleccion",
"sentencia_ejecutable : DEFER seleccion",
"sentencia_ejecutable : imprimir",
"sentencia_ejecutable : DEFER imprimir",
"sentencia_ejecutable : sentencia_when",
"sentencia_ejecutable : DEFER sentencia_when",
"sentencia_ejecutable : sentencia_do",
"sentencia_ejecutable : DEFER sentencia_do",
"sentencia_ejecutable_do : sentencia_ejecutable",
"sentencia_ejecutable_do : sentencia_break",
"sentencia_ejecutable_do : sentencia_continue",
"sentencia_break : BREAK ';'",
"sentencia_break : BREAK ':' etiqueta ';'",
"sentencia_break : BREAK",
"sentencia_break : BREAK ':' etiqueta",
"sentencia_break : BREAK ':' ';'",
"sentencia_continue : CONTINUE ';'",
"sentencia_continue : CONTINUE",
"sentencia_do : sentencia_do_simple",
"sentencia_do : etiqueta ':' sentencia_do_simple",
"sentencia_do_simple : DO bloque_sentencias_ejecutables_do UNTIL '(' condicion ')' ';'",
"sentencia_do_simple : DO bloque_sentencias_ejecutables_do UNTIL '(' condicion ')'",
"sentencia_do_simple : DO bloque_sentencias_ejecutables_do UNTIL '(' ')' ';'",
"sentencia_do_simple : DO bloque_sentencias_ejecutables_do UNTIL condicion ')' ';'",
"sentencia_do_simple : DO bloque_sentencias_ejecutables_do UNTIL '(' condicion ';'",
"etiqueta : ID",
"bloque_sentencias_ejecutables_do : sentencia_ejecutable_do",
"bloque_sentencias_ejecutables_do : '{' sentencias_ejecutables_do '}'",
"sentencias_ejecutables_do : sentencia_ejecutable_do",
"sentencias_ejecutables_do : sentencias_ejecutables_do sentencia_ejecutable_do",
"asignacion : ID ASIGNACION expresion ';'",
"asignacion : ID ASIGNACION ';'",
"asignacion : ID ASIGNACION expresion",
"sentencia_when : WHEN '(' condicion ')' THEN '{' sentencias_when '}' ';'",
"sentencia_when : WHEN '(' condicion ')' '{' sentencias_when '}' ';'",
"$$2 :",
"sentencia_when : WHEN '(' ')' THEN '{' sentencias_when '}' ';' $$2 WHEN '(' condicion ')' THEN '{' sentencias_when '}'",
"sentencia_when : WHEN '(' condicion ')' '{' sentencias_when '}'",
"sentencia_when : WHEN '(' condicion ')' '{' '}'",
"sentencias_when : sentencia",
"sentencias_when : sentencia sentencias_when",
"seleccion : IF '(' condicion ')' THEN bloque_sentencias_ejecutables_seleccion ENDIF ';'",
"seleccion : IF '(' condicion ')' THEN bloque_sentencias_ejecutables_seleccion ELSE bloque_sentencias_ejecutables_seleccion ENDIF ';'",
"bloque_sentencias_ejecutables_seleccion : sentencia_ejecutable",
"bloque_sentencias_ejecutables_seleccion : '{' sentencias_ejecutables '}'",
"sentencias_ejecutables : sentencia_ejecutable",
"sentencias_ejecutables : sentencias_ejecutables sentencia_ejecutable",
"condicion : expresion comparador expresion",
"condicion : expresion comparador",
"condicion : comparador expresion",
"comparador : COMP_MAYOR_IGUAL",
"comparador : COMP_MENOR_IGUAL",
"comparador : COMP_DISTINTO",
"comparador : '>'",
"comparador : '<'",
"comparador : '='",
"expresion : expresion '+' termino",
"expresion : expresion '-' termino",
"expresion : termino",
"termino : termino '*' factor",
"termino : termino '/' factor",
"termino : factor",
"factor : ID",
"factor : constante",
"factor : invocacion_funcion",
"invocacion_funcion : ID '(' ')'",
"invocacion_funcion : ID '(' lista_de_parametros_reales ')'",
"lista_de_parametros_reales : parametro_real",
"lista_de_parametros_reales : lista_de_parametros_reales ',' parametro_real",
"parametro_real : ID",
"parametro_real : constante",
"imprimir : OUT '(' CADENA ')' ';'",
"imprimir : OUT '(' ID ')' ';'",
"imprimir : OUT '(' ')' ';'",
"imprimir : OUT CADENA ')' ';'",
"imprimir : OUT '(' CADENA ';'",
"imprimir : OUT ID ')' ';'",
"imprimir : OUT '(' ID ';'",
"imprimir : OUT '(' CADENA ')'",
"imprimir : OUT '(' ID ')'",
"constante : CTE",
"constante : '-' CTE",
"tipo : UINT16",
"tipo : DOUBLE64",
};

//#line 378 ".\gramatica.y"

public static AnalizadorLexico lexico = null;
public static Logger logger = null;
public static TablaDeSimbolos ts = null;

public void constanteConSigno(String constante) {
	if (constante.contains(".")) {
		
		String negConstante = "-"+constante;
		
		Double parsedDouble = Double.parseDouble(negConstante.replace('D', 'E'));
		
		if (parsedDouble < -2.2250738585072014E-308 && -1.7976931348623157E+308 > parsedDouble) {
			logger.logWarning("[Parser] Rango invalido para la constante: " + negConstante + ", se trunca al rango permitido");
			
			if (-1.7976931348623157E+308 < parsedDouble) {
				negConstante = new String("-1.7976931348623157D+308");
			} else {
				negConstante =  new String("-2.2250738585072014D-308");
			}
		}
		
		ts.swapLexemas(constante, negConstante);
	} else {
		//se recibio un uint que fue aceptado por el lexico pero resulta ser negativo
		logger.logWarning("[Parser] No se admiten ui16 con valores negativos: " + "-"+constante + ", se trunca a 0");
		
		ts.swapLexemas(constante, "0");
	}
}	

public int yylex() {
	return lexico.yylex(yylval);
}

public void yyerror(String error) {
	logger.logError(error);
}

public static void main(String[] args) {
	if (args.length == 0) {
		System.err.println("No se especifico ningun archivo de codigo");
	} else {
		String archivo_a_leer = args[0];
		System.out.println("Se va a leer archivo " + archivo_a_leer);
		
		FileReaderHelper fileHelper = new FileReaderHelper();
		
		fileHelper.open(archivo_a_leer);
		
		Parser parser = new Parser();
		logger = new Logger();
		ts = new TablaDeSimbolos();
		lexico = new AnalizadorLexico(fileHelper, ts, logger);
		
        parser.run();

		String path = new File(archivo_a_leer).getAbsolutePath().replaceAll(args[0],"");
        
        Output out = new Output(path);
        
        String printTs = ts.print();
        
        
        out.saveFile("codigo-lexico.txt", logger.getLexico());
		out.saveFile("codigo-sintetico.txt", logger.getSintactico());
		out.saveFile("tabla-de-simbolos.txt", printTs);
        
		System.out.println(printTs);
	}
}
//#line 913 "Parser.java"
//###############################################################
// method: yylexdebug : check lexer state
//###############################################################
void yylexdebug(int state,int ch)
{
String s=null;
  if (ch < 0) ch=0;
  if (ch <= YYMAXTOKEN) //check index bounds
     s = yyname[ch];    //now get it
  if (s==null)
    s = "illegal-symbol";
  debug("state "+state+", reading "+ch+" ("+s+")");
}





//The following are now global, to aid in error reporting
int yyn;       //next next thing to do
int yym;       //
int yystate;   //current parsing state from state table
String yys;    //current token string


//###############################################################
// method: yyparse : parse input and execute indicated items
//###############################################################
int yyparse()
{
boolean doaction;
  init_stacks();
  yynerrs = 0;
  yyerrflag = 0;
  yychar = -1;          //impossible char forces a read
  yystate=0;            //initial state
  state_push(yystate);  //save it
  val_push(yylval);     //save empty value
  while (true) //until parsing is done, either correctly, or w/error
    {
    doaction=true;
    if (yydebug) debug("loop"); 
    //#### NEXT ACTION (from reduction table)
    for (yyn=yydefred[yystate];yyn==0;yyn=yydefred[yystate])
      {
      if (yydebug) debug("yyn:"+yyn+"  state:"+yystate+"  yychar:"+yychar);
      if (yychar < 0)      //we want a char?
        {
        yychar = yylex();  //get next token
        if (yydebug) debug(" next yychar:"+yychar);
        //#### ERROR CHECK ####
        if (yychar < 0)    //it it didn't work/error
          {
          yychar = 0;      //change it to default string (no -1!)
          if (yydebug)
            yylexdebug(yystate,yychar);
          }
        }//yychar<0
      yyn = yysindex[yystate];  //get amount to shift by (shift index)
      if ((yyn != 0) && (yyn += yychar) >= 0 &&
          yyn <= YYTABLESIZE && yycheck[yyn] == yychar)
        {
        if (yydebug)
          debug("state "+yystate+", shifting to state "+yytable[yyn]);
        //#### NEXT STATE ####
        yystate = yytable[yyn];//we are in a new state
        state_push(yystate);   //save it
        val_push(yylval);      //push our lval as the input for next rule
        yychar = -1;           //since we have 'eaten' a token, say we need another
        if (yyerrflag > 0)     //have we recovered an error?
           --yyerrflag;        //give ourselves credit
        doaction=false;        //but don't process yet
        break;   //quit the yyn=0 loop
        }

    yyn = yyrindex[yystate];  //reduce
    if ((yyn !=0 ) && (yyn += yychar) >= 0 &&
            yyn <= YYTABLESIZE && yycheck[yyn] == yychar)
      {   //we reduced!
      if (yydebug) debug("reduce");
      yyn = yytable[yyn];
      doaction=true; //get ready to execute
      break;         //drop down to actions
      }
    else //ERROR RECOVERY
      {
      if (yyerrflag==0)
        {
        yyerror("syntax error");
        yynerrs++;
        }
      if (yyerrflag < 3) //low error count?
        {
        yyerrflag = 3;
        while (true)   //do until break
          {
          if (stateptr<0)   //check for under & overflow here
            {
            yyerror("stack underflow. aborting...");  //note lower case 's'
            return 1;
            }
          yyn = yysindex[state_peek(0)];
          if ((yyn != 0) && (yyn += YYERRCODE) >= 0 &&
                    yyn <= YYTABLESIZE && yycheck[yyn] == YYERRCODE)
            {
            if (yydebug)
              debug("state "+state_peek(0)+", error recovery shifting to state "+yytable[yyn]+" ");
            yystate = yytable[yyn];
            state_push(yystate);
            val_push(yylval);
            doaction=false;
            break;
            }
          else
            {
            if (yydebug)
              debug("error recovery discarding state "+state_peek(0)+" ");
            if (stateptr<0)   //check for under & overflow here
              {
              yyerror("Stack underflow. aborting...");  //capital 'S'
              return 1;
              }
            state_pop();
            val_pop();
            }
          }
        }
      else            //discard this token
        {
        if (yychar == 0)
          return 1; //yyabort
        if (yydebug)
          {
          yys = null;
          if (yychar <= YYMAXTOKEN) yys = yyname[yychar];
          if (yys == null) yys = "illegal-symbol";
          debug("state "+yystate+", error recovery discards token "+yychar+" ("+yys+")");
          }
        yychar = -1;  //read another
        }
      }//end error recovery
    }//yyn=0 loop
    if (!doaction)   //any reason not to proceed?
      continue;      //skip action
    yym = yylen[yyn];          //get count of terminals on rhs
    if (yydebug)
      debug("state "+yystate+", reducing "+yym+" by rule "+yyn+" ("+yyrule[yyn]+")");
    if (yym>0)                 //if count of rhs not 'nil'
      yyval = val_peek(yym-1); //get current semantic value
    yyval = dup_yyval(yyval); //duplicate yyval if ParserVal is used as semantic value
    switch(yyn)
      {
//########## USER-SUPPLIED ACTIONS ##########
case 1:
//#line 17 ".\gramatica.y"
{ logger.logSuccess("[Parser] Programa correcto detectado"); }
break;
case 2:
//#line 18 ".\gramatica.y"
{ logger.logError("[Parser] Se esperaba un identificador nombre del programa"); }
break;
case 3:
//#line 19 ".\gramatica.y"
{ logger.logError("[Parser] Se esperaba un { antes de las sentencias del programa"); }
break;
case 4:
//#line 20 ".\gramatica.y"
{ logger.logError("[Parser] Se esperaba un } al final de las sentencias del programa"); }
break;
case 5:
//#line 21 ".\gramatica.y"
{ logger.logError("[Parser] Se esperaban sentencias del programa"); }
break;
case 15:
//#line 46 ".\gramatica.y"
{ logger.logSuccess("[Parser] Declaracion de lista de variables detectado"); }
break;
case 16:
//#line 47 ".\gramatica.y"
{ logger.logError("[Parser] Se esperaba un ; al final de la lista de variables"); }
break;
case 17:
//#line 48 ".\gramatica.y"
{ logger.logError("[Parser] Se esperaba un tipo para la lista de variables"); }
break;
case 18:
//#line 49 ".\gramatica.y"
{ logger.logError("[Parser] Se esperaba una variable o lista de variables"); }
break;
case 21:
//#line 58 ".\gramatica.y"
{ logger.logSuccess("[Parser] Declaracion de funcion detectado"); }
break;
case 22:
//#line 59 ".\gramatica.y"
{ logger.logSuccess("[Parser] Declaracion de funcion detectado"); }
break;
case 23:
//#line 60 ".\gramatica.y"
{ logger.logError("[Parser] Se esperaban sentencias en la funcion"); }
break;
case 40:
//#line 92 ".\gramatica.y"
{ logger.logSuccess("[Parser] Declaracion de funcion detectado"); }
break;
case 41:
//#line 93 ".\gramatica.y"
{ logger.logSuccess("[Parser] Declaracion de funcion detectado"); }
break;
case 63:
//#line 127 ".\gramatica.y"
{ logger.logSuccess("[Parser] Sentencia when detectada"); }
break;
case 64:
//#line 128 ".\gramatica.y"
{ logger.logSuccess("[Parser] Sentencia when detectada"); }
break;
case 65:
//#line 129 ".\gramatica.y"
{ logger.logSuccess("[Parser] Sentencia when detectada"); }
break;
case 66:
//#line 133 ".\gramatica.y"
{ logger.logSuccess("[Parser] Sentencia do until detectada"); }
break;
case 67:
//#line 134 ".\gramatica.y"
{ logger.logSuccess("[Parser] Sentencia do until detectada"); }
break;
case 81:
//#line 160 ".\gramatica.y"
{ logger.logError("[Parser] Se esperaba un tipo de return para la funcion"); }
break;
case 82:
//#line 161 ".\gramatica.y"
{ logger.logError("[Parser] Se esperaba un identificador nombre para la funcion"); }
break;
case 83:
//#line 162 ".\gramatica.y"
{ logger.logError("[Parser] Se esperaba un ( luego del nombre de la funcion"); }
break;
case 84:
//#line 163 ".\gramatica.y"
{ logger.logError("[Parser] Se esperaba un ) luego del nombre para la funcion"); }
break;
case 85:
//#line 164 ".\gramatica.y"
{ logger.logError("[Parser] Se esperaba un tipo de return para la funcion"); }
break;
case 86:
//#line 165 ".\gramatica.y"
{ logger.logError("[Parser] Se esperaba un identificador nombre para la funcion"); }
break;
case 87:
//#line 166 ".\gramatica.y"
{ logger.logError("[Parser] Se esperaba un ( luego del nombre de la funcion"); }
break;
case 88:
//#line 167 ".\gramatica.y"
{ logger.logError("[Parser] Se esperaba un ) luego del nombre para la funcion"); }
break;
case 90:
//#line 172 ".\gramatica.y"
{ logger.logError("[Parser] Se esperaba un ; al final de la sentencia return"); }
break;
case 91:
//#line 173 ".\gramatica.y"
{ logger.logError("[Parser] Se esperaba un ( en la sentencia return"); }
break;
case 92:
//#line 174 ".\gramatica.y"
{ logger.logError("[Parser] Se esperaba un ) en la sentencia return"); }
break;
case 93:
//#line 175 ".\gramatica.y"
{ logger.logError("[Parser] Se esperaba una expresion en la sentencia return"); }
break;
case 96:
//#line 181 ".\gramatica.y"
{ logger.logError("[Parser] Hay mas de 2 parametros en la funcion"); }
break;
case 101:
//#line 191 ".\gramatica.y"
{ logger.logError("[Parser] Se esperaba un identificador nombre para el parametro"); }
break;
case 102:
//#line 192 ".\gramatica.y"
{ logger.logError("[Parser] Se esperaba un tipo valido para el parametro"); }
break;
case 103:
//#line 196 ".\gramatica.y"
{ logger.logSuccess("[Parser] Declaracion de constantes detectado"); }
break;
case 104:
//#line 197 ".\gramatica.y"
{ logger.logError("[Parser] Se esperaba ; al final de la declaracion de constantes"); }
break;
case 105:
//#line 198 ".\gramatica.y"
{ logger.logError("[Parser] Se esperaba una lista de declaracion de constantes"); }
break;
case 109:
//#line 208 ".\gramatica.y"
{ logger.logError("[Parser] Se esperaba una constante del lado derecho de la asignacion"); }
break;
case 110:
//#line 209 ".\gramatica.y"
{ logger.logError("[Parser] Se esperaba el simbolo asignacion en la declaracion de constantes"); }
break;
case 111:
//#line 210 ".\gramatica.y"
{ logger.logError("[Parser] Se esperaba una asignacion en la declaracion de constantes"); }
break;
case 125:
//#line 233 ".\gramatica.y"
{ logger.logSuccess("[Parser] Sentencia break detectada"); }
break;
case 126:
//#line 234 ".\gramatica.y"
{ logger.logSuccess("[Parser] Sentencia break con etiqueta detectada"); }
break;
case 127:
//#line 235 ".\gramatica.y"
{ logger.logError("[Parser] Se esperaba un ; luego de la sentencia break"); }
break;
case 128:
//#line 236 ".\gramatica.y"
{ logger.logError("[Parser] Se esperaba un ; luego de la sentencia break"); }
break;
case 129:
//#line 237 ".\gramatica.y"
{ logger.logError("[Parser] Se esperaba una etiqueta en la sentencia break"); }
break;
case 130:
//#line 241 ".\gramatica.y"
{ logger.logSuccess("[Parser] Sentencia continue detectada"); }
break;
case 131:
//#line 242 ".\gramatica.y"
{ logger.logError("[Parser] Se esperaba un ; al final de la sentencia continue"); }
break;
case 134:
//#line 251 ".\gramatica.y"
{ logger.logSuccess("[Parser] Sentencia do until detectada"); }
break;
case 135:
//#line 252 ".\gramatica.y"
{ logger.logError("[Parser] Se esperaba un ; al final de la sentencia do"); }
break;
case 136:
//#line 253 ".\gramatica.y"
{ logger.logError("[Parser] Se esperaba una condicion para la sentencia do"); }
break;
case 137:
//#line 254 ".\gramatica.y"
{ logger.logSuccess("[Parser] Se esperaba un ( en la condicion para la sentencia do"); }
break;
case 138:
//#line 255 ".\gramatica.y"
{ logger.logSuccess("[Parser] Se esperaba un ) en la condicion para la sentencia do"); }
break;
case 144:
//#line 273 ".\gramatica.y"
{ logger.logSuccess("[Parser] Asignacion detectada"); }
break;
case 145:
//#line 274 ".\gramatica.y"
{logger.logError("[Parser] Se espera una expresion del lado derecho de la asignacion");}
break;
case 146:
//#line 275 ".\gramatica.y"
{ logger.logError("[Parser] Se espera un ; al final de la asignacion"); }
break;
case 147:
//#line 279 ".\gramatica.y"
{ logger.logSuccess("[Parser] Sentencia when detectada"); }
break;
case 148:
//#line 280 ".\gramatica.y"
{ logger.logError("[Parser] Se esperaba la palabra reservada then en la sentencia when"); }
break;
case 149:
//#line 281 ".\gramatica.y"
{ logger.logError("[Parser] Se esperaba una condicion en la sentencia when"); }
break;
case 150:
//#line 282 ".\gramatica.y"
{ logger.logError("[Parser] Se esperaba un ; al final de la sentencia when"); }
break;
case 151:
//#line 283 ".\gramatica.y"
{ logger.logError("[Parser] Se esperaba la palabra reservada then en la sentencia when"); }
break;
case 152:
//#line 284 ".\gramatica.y"
{ logger.logError("[Parser] Se esperaban sentencias dentro del when"); }
break;
case 155:
//#line 293 ".\gramatica.y"
{ logger.logSuccess("[Parser] Sentencia if then detectada"); }
break;
case 156:
//#line 294 ".\gramatica.y"
{ logger.logSuccess("[Parser] Sentencia if then else detectada"); }
break;
case 162:
//#line 309 ".\gramatica.y"
{ logger.logError("[Parser] Se esperaba un expresion del lado derecho de la comparacion"); }
break;
case 163:
//#line 310 ".\gramatica.y"
{ logger.logError("[Parser] Se esperaba un expresion del lado izquierdo de la comparacion"); }
break;
case 185:
//#line 356 ".\gramatica.y"
{ logger.logSuccess("[Parser] Sentencia out detectada"); }
break;
case 186:
//#line 357 ".\gramatica.y"
{ logger.logSuccess("[Parser] Sentencia out detectada"); }
break;
case 187:
//#line 358 ".\gramatica.y"
{ logger.logError("[Parser] Se esperaba una cadena o identificador en la sentencia out"); }
break;
case 188:
//#line 359 ".\gramatica.y"
{ logger.logError("[Parser] Se esperaba un ( en la sentencia out"); }
break;
case 189:
//#line 360 ".\gramatica.y"
{ logger.logError("[Parser] Se esperaba un ) en la sentencia out"); }
break;
case 190:
//#line 361 ".\gramatica.y"
{ logger.logError("[Parser] Se esperaba un ( en la sentencia out"); }
break;
case 191:
//#line 362 ".\gramatica.y"
{ logger.logError("[Parser] Se esperaba un ) en la sentencia out"); }
break;
case 192:
//#line 363 ".\gramatica.y"
{ logger.logError("[Parser] Se espera un ; al final de la sentencia out"); }
break;
case 193:
//#line 364 ".\gramatica.y"
{ logger.logError("[Parser] Se espera un ; al final de la sentencia out"); }
break;
case 195:
//#line 369 ".\gramatica.y"
{ constanteConSigno(val_peek(0).sval); }
break;
//#line 1362 "Parser.java"
//########## END OF USER-SUPPLIED ACTIONS ##########
    }//switch
    //#### Now let's reduce... ####
    if (yydebug) debug("reduce");
    state_drop(yym);             //we just reduced yylen states
    yystate = state_peek(0);     //get new state
    val_drop(yym);               //corresponding value drop
    yym = yylhs[yyn];            //select next TERMINAL(on lhs)
    if (yystate == 0 && yym == 0)//done? 'rest' state and at first TERMINAL
      {
      if (yydebug) debug("After reduction, shifting from state 0 to state "+YYFINAL+"");
      yystate = YYFINAL;         //explicitly say we're done
      state_push(YYFINAL);       //and save it
      val_push(yyval);           //also save the semantic value of parsing
      if (yychar < 0)            //we want another character?
        {
        yychar = yylex();        //get next character
        if (yychar<0) yychar=0;  //clean, if necessary
        if (yydebug)
          yylexdebug(yystate,yychar);
        }
      if (yychar == 0)          //Good exit (if lex returns 0 ;-)
         break;                 //quit the loop--all DONE
      }//if yystate
    else                        //else not done yet
      {                         //get next state and push, for next yydefred[]
      yyn = yygindex[yym];      //find out where to go
      if ((yyn != 0) && (yyn += yystate) >= 0 &&
            yyn <= YYTABLESIZE && yycheck[yyn] == yystate)
        yystate = yytable[yyn]; //get new state
      else
        yystate = yydgoto[yym]; //else go to new defred
      if (yydebug) debug("after reduction, shifting from state "+state_peek(0)+" to state "+yystate+"");
      state_push(yystate);     //going again, so push state & val...
      val_push(yyval);         //for next action
      }
    }//main loop
  return 0;//yyaccept!!
}
//## end of method parse() ######################################



//## run() --- for Thread #######################################
/**
 * A default run method, used for operating this parser
 * object in the background.  It is intended for extending Thread
 * or implementing Runnable.  Turn off with -Jnorun .
 */
public void run()
{
  yyparse();
}
//## end of method run() ########################################



//## Constructors ###############################################
/**
 * Default constructor.  Turn off with -Jnoconstruct .

 */
public Parser()
{
  //nothing to do
}


/**
 * Create a parser, setting the debug to true or false.
 * @param debugMe true for debugging, false for no debug.
 */
public Parser(boolean debugMe)
{
  yydebug=debugMe;
}
//###############################################################



}
//################### END OF CLASS ##############################
