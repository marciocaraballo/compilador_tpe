//### This file created by BYACC 1.8(/Java extension  1.15)
//### Java capabilities added 7 Jan 97, Bob Jamison
//### Updated : 27 Nov 97  -- Bob Jamison, Joe Nieten
//###           01 Jan 98  -- Bob Jamison -- fixed generic semantic constructor
//###           01 Jun 99  -- Bob Jamison -- added Runnable support
//###           06 Aug 00  -- Bob Jamison -- made state variables class-global
//###           03 Jan 01  -- Bob Jamison -- improved flags, tracing
//###           16 May 01  -- Bob Jamison -- added custom stack sizing
//###           04 Mar 02  -- Yuval Oren  -- improved java performance, added options
//###           14 Mar 02  -- Tomas Hurka -- -d support, static initializer workaround
//### Please send bug reports to tom@hukatronic.cz
//### static char yysccsid[] = "@(#)yaccpar	1.8 (Berkeley) 01/20/90";






//#line 2 ".\gramatica.y"
package compilador;
import java.io.File;
//#line 20 "Parser.java"




public class Parser
{

boolean yydebug;        //do I want debug output?
int yynerrs;            //number of errors so far
int yyerrflag;          //was there an error?
int yychar;             //the current working character

//########## MESSAGES ##########
//###############################################################
// method: debug
//###############################################################
void debug(String msg)
{
  if (yydebug)
    System.out.println(msg);
}

//########## STATE STACK ##########
final static int YYSTACKSIZE = 500;  //maximum stack size
int statestk[] = new int[YYSTACKSIZE]; //state stack
int stateptr;
int stateptrmax;                     //highest index of stackptr
int statemax;                        //state when highest index reached
//###############################################################
// methods: state stack push,pop,drop,peek
//###############################################################
final void state_push(int state)
{
  try {
		stateptr++;
		statestk[stateptr]=state;
	 }
	 catch (ArrayIndexOutOfBoundsException e) {
     int oldsize = statestk.length;
     int newsize = oldsize * 2;
     int[] newstack = new int[newsize];
     System.arraycopy(statestk,0,newstack,0,oldsize);
     statestk = newstack;
     statestk[stateptr]=state;
  }
}
final int state_pop()
{
  return statestk[stateptr--];
}
final void state_drop(int cnt)
{
  stateptr -= cnt; 
}
final int state_peek(int relative)
{
  return statestk[stateptr-relative];
}
//###############################################################
// method: init_stacks : allocate and prepare stacks
//###############################################################
final boolean init_stacks()
{
  stateptr = -1;
  val_init();
  return true;
}
//###############################################################
// method: dump_stacks : show n levels of the stacks
//###############################################################
void dump_stacks(int count)
{
int i;
  System.out.println("=index==state====value=     s:"+stateptr+"  v:"+valptr);
  for (i=0;i<count;i++)
    System.out.println(" "+i+"    "+statestk[i]+"      "+valstk[i]);
  System.out.println("======================");
}


//########## SEMANTIC VALUES ##########
//public class ParserVal is defined in ParserVal.java


String   yytext;//user variable to return contextual strings
ParserVal yyval; //used to return semantic vals from action routines
ParserVal yylval;//the 'lval' (result) I got from yylex()
ParserVal valstk[];
int valptr;
//###############################################################
// methods: value stack push,pop,drop,peek.
//###############################################################
void val_init()
{
  valstk=new ParserVal[YYSTACKSIZE];
  yyval=new ParserVal();
  yylval=new ParserVal();
  valptr=-1;
}
void val_push(ParserVal val)
{
  if (valptr>=YYSTACKSIZE)
    return;
  valstk[++valptr]=val;
}
ParserVal val_pop()
{
  if (valptr<0)
    return new ParserVal();
  return valstk[valptr--];
}
void val_drop(int cnt)
{
int ptr;
  ptr=valptr-cnt;
  if (ptr<0)
    return;
  valptr = ptr;
}
ParserVal val_peek(int relative)
{
int ptr;
  ptr=valptr-relative;
  if (ptr<0)
    return new ParserVal();
  return valstk[ptr];
}
final ParserVal dup_yyval(ParserVal val)
{
  ParserVal dup = new ParserVal();
  dup.ival = val.ival;
  dup.dval = val.dval;
  dup.sval = val.sval;
  dup.obj = val.obj;
  return dup;
}
//#### end semantic value section ####
public final static short ID=257;
public final static short CTE=258;
public final static short CADENA=259;
public final static short IF=260;
public final static short THEN=261;
public final static short ELSE=262;
public final static short ENDIF=263;
public final static short OUT=264;
public final static short FUN=265;
public final static short RETURN=266;
public final static short BREAK=267;
public final static short ASIGNACION=268;
public final static short COMP_MAYOR_IGUAL=269;
public final static short COMP_MENOR_IGUAL=270;
public final static short COMP_DISTINTO=271;
public final static short WHEN=272;
public final static short DO=273;
public final static short UNTIL=274;
public final static short CONTINUE=275;
public final static short DOUBLE64=276;
public final static short UINT16=277;
public final static short DEFER=278;
public final static short CONST=279;
public final static short YYERRCODE=256;
final static short yylhs[] = {                           -1,
    0,    0,    0,    0,    0,    1,    2,    2,    3,    3,
    4,    4,    4,    4,    6,    6,    6,    6,   11,   11,
    7,    7,    7,   14,   14,   15,   15,   16,   16,   16,
   16,   16,   16,   16,   16,   16,   16,   22,   22,    8,
    8,   23,   23,   23,   23,   25,   25,   25,   21,   21,
   21,   21,   21,   21,   21,   21,   21,   21,   21,   21,
   21,   21,   19,   19,   19,   19,   19,   19,   19,   20,
   20,   26,   26,   26,   26,   26,   26,   28,   28,   29,
   29,   29,   12,   12,   12,   12,   12,   12,   12,   12,
   12,   12,   13,   13,   13,   13,   13,   32,   32,   32,
   35,   35,   34,   34,   36,   34,    9,    9,    9,   37,
   37,   38,   38,   38,   38,    5,    5,    5,    5,    5,
    5,    5,    5,    5,    5,   42,   42,   42,   30,   30,
   30,   30,   30,   31,   31,   41,   41,   43,   43,   43,
   43,   43,   27,   44,   44,   45,   45,   17,   17,   17,
   40,   40,   47,   40,   40,   40,   46,   46,   39,   39,
   48,   48,   49,   49,   24,   24,   24,   50,   50,   50,
   50,   50,   50,   33,   33,   33,   51,   51,   51,   52,
   52,   52,   54,   54,   55,   55,   56,   56,   18,   18,
   18,   18,   18,   18,   18,   18,   18,   53,   53,   10,
   10,
};
final static short yylen[] = {                            2,
    4,    3,    3,    3,    3,    1,    1,    2,    1,    1,
    1,    1,    1,    1,    3,    2,    2,    2,    3,    1,
    4,    5,    3,    1,    2,    1,    1,    1,    2,    1,
    2,    1,    2,    1,    2,    1,    2,    1,    2,    4,
    5,   10,   13,   13,   16,    1,    1,    2,    8,    8,
    8,   11,   11,   15,   13,   13,   15,   15,   15,   13,
   13,   14,    9,   10,   10,    8,    9,    9,    8,    7,
    9,    1,    1,    1,    4,    4,    3,    1,    2,    1,
    1,    1,    6,    7,    5,    5,    5,    5,    6,    6,
    6,    6,    5,    4,    3,    3,    4,    1,    3,    5,
    1,    3,    2,    1,    0,    2,    3,    2,    2,    1,
    3,    3,    2,    2,    1,    1,    2,    1,    2,    1,
    2,    1,    2,    1,    2,    1,    1,    1,    2,    4,
    1,    3,    3,    2,    1,    1,    3,    7,    6,    6,
    6,    6,    1,    1,    3,    1,    2,    4,    3,    3,
    9,    8,    0,   17,    7,    6,    1,    2,    8,   10,
    1,    3,    1,    2,    3,    2,    2,    1,    1,    1,
    1,    1,    1,    3,    3,    1,    3,    3,    1,    1,
    1,    1,    3,    4,    1,    3,    1,    1,    5,    5,
    4,    4,    4,    4,    4,    4,    4,    1,    2,    1,
    1,
};
final static short yydefred[] = {                         0,
    6,    0,    0,    0,    0,    0,    0,    0,    0,    0,
  201,  200,    0,    0,    0,    7,    9,   10,   11,   12,
   13,   14,    0,    0,    0,  116,  120,    0,  118,  122,
  124,  136,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,  126,  127,  128,
  144,    0,  117,  121,  119,  123,  125,    0,  109,    0,
    0,    2,    8,    0,   18,    0,   17,    0,    0,    5,
    0,    3,    0,  198,    0,  149,    0,    0,  179,  181,
  182,   19,  168,  169,  170,  171,  172,  173,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,  129,    0,  134,  146,
    0,    0,  114,    0,  107,    0,   15,    0,    0,    0,
    0,    0,   23,   26,    0,    0,   24,   27,   28,   30,
   32,   34,   36,    0,    0,  137,    1,    0,  199,    0,
    0,  148,    0,    0,    0,    0,    0,  194,  192,  195,
    0,  193,    0,  191,    0,    0,    0,    0,  103,    0,
    0,  106,    0,    0,    0,    0,  143,  133,    0,  145,
  147,    0,    0,  112,  111,    0,    0,    0,    0,    0,
   72,   80,   73,    0,    0,   78,   81,   82,    0,   29,
   31,   33,   35,   37,   21,    0,   25,    0,   40,    0,
  187,  183,  188,    0,  185,    0,    0,  177,  178,    0,
    0,  190,  189,    0,   88,    0,    0,   87,    0,    0,
   86,    0,    0,    0,    0,  130,    0,    0,    0,    0,
    0,    0,   95,    0,    0,    0,   79,    0,   22,   41,
    0,    0,  184,    0,  161,    0,   83,    0,   92,   91,
    0,   90,    0,    0,    0,  156,    0,  140,  142,    0,
  141,    0,   97,    0,    0,   77,    0,    0,    0,    0,
    0,  186,  163,    0,    0,    0,   84,    0,  100,  158,
    0,    0,    0,  138,    0,   93,    0,   75,   76,    0,
    0,    0,  162,  164,    0,  159,    0,  153,    0,  152,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,  102,    0,  151,   48,   38,    0,    0,    0,    0,
    0,    0,    0,    0,   70,    0,    0,    0,    0,  160,
    0,    0,    0,   39,    0,   49,    0,   51,   50,    0,
    0,    0,   46,   47,    0,   69,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,   63,
    0,    0,    0,   71,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,   42,   64,   65,    0,    0,    0,
    0,    0,    0,   52,    0,    0,   53,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,   55,   43,    0,   56,   60,   61,    0,   44,
    0,    0,   62,    0,    0,    0,    0,    0,    0,  154,
   58,   59,   54,    0,   57,    0,   45,    0,    0,    0,
    0,
};
final static short yydgoto[] = {                          3,
    4,   15,  253,   17,   18,   19,   20,   21,   22,   23,
   24,   25,  343,  126,  127,  316,  129,  130,  131,  132,
  133,  317,  344,   89,  306,  184,  135,  185,  186,  187,
  188,  100,   90,  101,  279,  102,   60,   61,   29,   30,
   31,   51,   32,   52,  111,  254,  313,  246,  274,   91,
   78,   79,   80,   81,  204,  205,
};
final static short yysindex[] = {                       -83,
    0, 1173,    0,  -89,  -34,   20,  -37,  -31,   42,  568,
    0,    0,  437,  -39,  839,    0,    0,    0,    0,    0,
    0,    0,  -29,   68,  -17,    0,    0,   83,    0,    0,
    0,    0,  862,  872,   53, -110,  678,  112,  131,   23,
  -15,  -27,  671,  -86,   16,  126,  525,    0,    0,    0,
    0,  -80,    0,    0,    0,    0,    0, -130,    0,  132,
  155,    0,    0,  162,    0,  172,    0,  829,  -30,    0,
  896,    0,  205,    0,  -10,    0,  122,   84,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,  243,   90,
   36,  231,  233,   27,   30,  239,    9,  242,   58,  276,
  285,   63,  278,  311,  101,  323,    0,  -16,    0,    0,
 1046,   56,    0,  119,    0,  134,    0,  342,   13,  348,
  288,  542,    0,    0,  253, 1147,    0,    0,    0,    0,
    0,    0,    0,  268,  336,    0,    0,   39,    0,   36,
   36,    0,   36,   36,  135,   36,  121,    0,    0,    0,
  353,    0,  354,    0,  343,  -98,   21,  -98,    0,  349,
  -98,    0,  -98,  358,  294,  -84,    0,    0,  359,    0,
    0,  681,  378,    0,    0,  678,   47,  211,  678, 1198,
    0,    0,    0,  146, 1198,    0,    0,    0,  388,    0,
    0,    0,    0,    0,    0,  301,    0,  305,    0,  159,
    0,    0,    0,  129,    0,   84,   84,    0,    0,  716,
  121,    0,    0,  -98,    0,  376,  -98,    0,  -98,  391,
    0,  -98, 1173,  313,  921,    0,  379,   49,  380,  396,
  381,  292,    0,  400, 1027,  404,    0,  678,    0,    0,
  288,   65,    0, 1044,    0,  -66,    0,  -98,    0,    0,
  -98,    0, 1173,  326, 1173,    0,  327,    0,    0,  395,
    0,  201,    0,  405,  212,    0,  350,  351,  678,  444,
  204,    0,    0, 1100,  716,  428,    0,  454,    0,    0,
  449,  384,  451,    0,  611,    0,  397,    0,    0,  484,
  269,  492,    0,    0,  270,    0,  -98,    0,  487,    0,
  673, 1225,  284,  -58,  286,  297,  944,  491,  696,  678,
  494,    0,  290,    0,    0,    0, 1063,  497,  441,  517,
  530,  124,  531, -104,    0, 1225,  284,  286,  550,    0,
  552,  331,  469,    0,  471,    0, 1225,    0,    0,  557,
  339, 1225,    0,    0,  355,    0,  547,  496,  506, 1063,
  560,  678,  545,  -52,   77,  488,  678, 1215,  595,    0,
  612,  617,  553,    0,  638, 1225,  706,  621,  726,  631,
  567,  570,  652,  571,    0,    0,    0,   82,  443, 1080,
 1225,  435,  440,    0, 1225,  448,    0,  461,  462,  456,
  464,  736,  582,  466,  605,  610, 1090,  677,  685, 1110,
  687,  691,  694,  183,  698, 1225, 1173,  699,  474,  504,
  505,  644,    0,    0,  510,    0,    0,    0, 1225,    0,
 1127,  649,    0,  720,  724,  725,  524,  729, 1215,    0,
    0,    0,    0,  731,    0,  666,    0,  532,  291, 1225,
 1215,
};
final static short yyrindex[] = {                         0,
    0,    0,    0,    0,  298,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
  536,  536,    0,  737,  967,  989,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,  442,    0,  544,
  499,    0,    0,  588,    0,  645,    0,    0,    0,    0,
  796,    0,  308,    0,    0,    0,  193,  338,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,  536,    0,  105,    0,
   25,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,  622,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,   62,   64,    0,    0,    0,
  217,    0,  240,    0,    0,    0,    0,    0,    0,    0,
  536,    0,    0,    0,    0,    0,    0,    0, 1008,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,  533,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,  363,  386,    0,    0,    0,
   70,    0,    0,  682,    0,    0,    0,    0,    0,   29,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,  113,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,  688,    0,    0,
  536,    0,  701,    0,    0,    0,    0,    0,    0,  264,
    0,    0,    0,  260,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,   74,    0,    0,
    0,    0,  410,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,  536,    0,    0,    0,
    0,    0,  551,    0,  562,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,  753,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
  778,  801,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,
};
final static short yygindex[] = {                         0,
    0,   61,  747,  -63,   -9,    0,    0,    0,    0,  -19,
  125,    0,  -49,    0,  -93,  -26,   -2,    2,  -94,  -85,
  -71, 1029,  -22,  -36, -270,  586,   14,  632, -128,   44,
   46,   17,  609, -117,  534,    0,  714,    0,  820,  821,
  823,    8,  768,    0,    0,  -95,    0,  563,    0,  752,
  206,  229,  -97,    0,    0,  602,
};
final static int YYTABLESIZE=1503;
static short yytable[];
static { yytable();}
static void yytable(){
yytable = new short[]{                         26,
   48,   26,   40,   27,  124,   27,  106,   26,   42,   36,
   53,   27,   26,  103,   54,   28,   27,   28,  125,   59,
  347,   99,   99,   28,   97,   98,   28,  192,   28,   65,
   26,   26,  197,   33,   27,   27,  193,   48,  225,    2,
  203,  128,  168,  220,   26,  134,   28,   28,   27,  155,
  194,  345,  177,   49,  110,   50,  237,   75,  104,   37,
   28,  216,  124,   96,   34,   98,  156,  151,   26,   99,
  153,  181,   27,  108,  107,  173,  196,   99,  217,  202,
   75,   43,   98,   75,   28,  150,   99,  231,  152,  260,
   49,   75,   50,   71,  182,  172,  383,   75,  183,  128,
   75,   48,  166,  198,  167,   68,  237,  259,   26,   75,
  165,   76,   27,  157,  101,   87,   88,   86,  171,  190,
  166,  169,  167,  191,   28,  143,   67,  113,  165,  257,
  144,  101,  140,  278,  141,  228,  215,  114,  218,  230,
   69,   99,  234,  221,  203,  104,   64,   66,  104,   87,
   88,   86,   92,  182,   49,  340,   50,  280,  182,  282,
   82,  119,  104,  140,  140,  141,  141,    5,  383,  243,
    6,   93,  242,    1,    7,    8,  224,   11,   12,  278,
  142,   35,    9,   10,  109,  267,   11,   12,   13,   14,
  115,  181,  150,  112,  247,  275,  276,  249,  116,  250,
  245,  270,  252,  319,  320,   36,  192,   26,  182,  367,
  368,   27,  268,  324,  182,  193,  197,   58,  183,   38,
   26,   39,   26,   28,   27,   41,   27,   64,  277,  194,
  117,   99,  290,   35,  273,  303,   28,   96,   28,  196,
  167,   26,   10,  124,  138,   27,  342,  139,   11,   12,
   26,  233,   26,  140,   27,  141,   27,   28,  304,  327,
   11,   12,  305,  139,  294,  245,   28,  333,   28,   73,
   74,   26,   26,  329,  348,   27,   27,   99,  315,   94,
  128,   95,  304,  145,   11,   12,  328,   28,   28,  148,
  334,  149,   73,   74,  335,  201,   74,  154,  190,  158,
  363,  349,  191,   73,   74,  419,  371,  180,  374,   73,
   74,  422,   73,   74,  159,  365,  160,  150,  315,  162,
  373,  201,   74,  334,   83,   84,   85,  335,  161,  334,
  395,  334,  264,  372,  140,  163,  141,  176,  369,  370,
  382,  197,  386,  392,  368,  206,  207,  412,  180,  180,
  180,  164,  180,  334,  180,  143,   20,  396,   83,   84,
   85,  165,  174,  166,  196,  382,  180,  180,  180,  180,
  334,  208,  209,  334,   96,   96,  174,  195,  176,  436,
  176,  176,  176,  340,   94,  175,   96,  179,  139,  119,
   58,  412,  199,  200,  334,  210,  176,  176,  176,  176,
  214,  341,  334,  174,   26,  174,  219,  174,   27,  155,
  180,  212,  213,  440,  334,  222,  223,  226,  229,  236,
   28,  174,  174,  174,  174,  239,  175,  238,  175,  240,
  175,  241,  180,  248,  251,  255,  262,  258,  261,  263,
  265,  115,  340,  269,  175,  175,  175,  175,  119,  150,
  281,  283,  150,  284,  150,  150,  150,  150,  150,  150,
  341,  285,  176,  286,  150,  150,  150,  150,  150,  150,
  150,  150,  287,  197,  288,  289,  197,  292,  197,  197,
  197,  197,  197,  197,  291,  115,  296,  174,  197,  197,
  197,  197,  197,  197,  197,  197,  196,  297,  110,  196,
  115,  196,  196,  196,  196,  196,  196,  298,  299,  300,
  175,  196,  196,  196,  196,  196,  196,  196,  196,  307,
  139,   94,   94,  139,  308,  139,  139,  139,  139,  309,
  139,  310,  311,   94,  155,  139,  139,  139,  139,  139,
  139,  139,  139,  108,   44,  314,  318,  118,  321,  325,
  340,    7,  330,  119,   45,  336,  119,  110,  322,  120,
  121,  331,   46,  337,  180,  122,  115,  180,  341,  180,
  180,  180,  180,  180,  180,  338,  180,  180,  180,  180,
  180,  180,  180,  180,  180,  180,  180,   20,  339,  346,
  351,  352,  353,  354,  176,  355,  357,  176,  340,  176,
  176,  176,  176,  176,  176,  360,  176,  176,  176,  176,
  176,  176,  176,  176,  176,  176,  176,  359,  364,  174,
  361,  113,  174,  110,  174,  174,  174,  174,  174,  174,
  362,  174,  174,  174,  174,  174,  174,  174,  174,  174,
  174,  174,  175,   77,   16,  175,   20,  175,  175,  175,
  175,  175,  175,  375,  175,  175,  175,  175,  175,  175,
  175,  175,  175,  175,  175,  113,  155,  366,  108,  155,
  376,  155,  155,  155,  155,  377,  155,  378,  379,  384,
  113,  155,  155,  155,  155,  155,  155,  155,  155,  387,
   47,  388,  390,   44,  389,  391,    6,  398,  115,  147,
    7,  115,  399,  393,  407,  115,  115,  115,    9,   10,
  401,  105,   20,  115,  115,   75,  404,  115,  115,  115,
  115,  227,   75,  402,  403,   75,  405,  178,  408,  409,
   87,   88,   86,  302,  410,  413,  424,   87,   88,   86,
   87,   88,   86,  414,   44,  416,  113,  118,   16,  417,
   16,    7,  418,  119,  211,  110,  420,  423,  110,  120,
  121,   63,  110,  110,  110,  122,  425,  426,  427,   16,
  110,  110,  428,  430,  110,  110,  110,  110,  431,   16,
   63,   44,  432,  433,    6,  232,  434,  435,    7,  437,
  438,   45,  105,  439,  143,    4,    9,   10,   44,   46,
  108,  189,   13,  108,   85,    7,   74,  108,  108,  108,
   89,  235,   46,  120,  121,  108,  108,   63,  326,  108,
  108,  108,  108,   47,   44,  157,  271,    6,  381,  175,
  312,    7,   55,   56,   45,   57,  136,  295,  244,    9,
   10,  146,   46,  272,   20,   13,    0,   20,  385,    0,
    0,   20,   20,   20,    0,    0,    0,    0,  406,   20,
   20,    0,    0,   20,   20,   20,   20,   44,    0,    0,
  118,    0,    0,    0,    7,    0,  119,   66,  113,    0,
    0,  113,  120,  121,    0,  113,  113,  113,  301,    0,
    0,    0,    0,  113,  113,    0,    0,  113,  113,  113,
  113,   16,   67,    0,   16,    0,    0,    0,   16,   16,
   16,    0,    0,    0,    0,    0,   16,   16,    0,    0,
   16,   16,   16,   16,    0,   68,    0,   73,   74,   44,
    0,    0,  118,    0,   73,   74,    7,   73,   74,   83,
   84,   85,    0,    0,  120,  121,   83,   84,   85,   83,
   84,   85,   44,  123,    0,  118,    0,    0,    0,    7,
    0,  119,   44,   62,    0,  118,    0,  120,  121,    7,
    0,  119,   44,  122,    0,    6,    0,  120,  121,    7,
    0,    0,   44,  301,    0,  189,   70,    9,   10,    7,
    0,    0,   44,   13,    0,  189,   72,  120,  121,    7,
    0,    0,    0,  122,    0,    0,    0,  120,  121,   66,
    0,    0,   66,  122,   66,   66,   66,   66,   66,   66,
  137,    0,    0,    0,   66,   66,   66,   66,   66,   66,
   66,   66,    0,    0,   67,    0,    0,   67,    0,   67,
   67,   67,   67,   67,   67,  256,    0,    0,    0,   67,
   67,   67,   67,   67,   67,   67,   67,   68,    0,    0,
   68,    0,   68,   68,   68,   68,   68,   68,  323,    0,
    0,    0,   68,   68,   68,   68,   68,   68,   68,   68,
    0,    0,    0,    0,    0,    5,    0,    0,  118,    0,
    0,  131,    7,    8,  119,    5,    0,    0,    6,    0,
  120,  121,    7,    8,   11,   12,  122,   14,    0,    0,
    9,   10,    0,  135,   11,   12,   13,   14,    5,    0,
    0,    6,    0,    0,    0,    7,    8,    0,    5,    0,
    0,    6,  132,    9,   10,    7,    8,   11,   12,   13,
   14,    0,    0,    9,   10,    0,    0,   11,   12,   13,
   14,  266,    5,    0,    0,    6,    0,    0,    0,    7,
    8,    0,    0,    0,    0,    0,    0,    9,   10,    0,
  170,   11,   12,   13,   14,    0,    0,    5,    0,    0,
    6,    0,    0,    0,    7,    8,    0,  332,    0,    0,
    0,    0,    9,   10,    0,    0,   11,   12,   13,   14,
    5,    0,    0,  189,  394,    0,    0,    7,    8,    0,
    0,    0,    0,    0,  411,  120,  121,    0,    0,   11,
   12,  122,   14,  131,  293,    0,  131,    0,    0,    0,
  131,    0,  131,  131,  415,    0,    0,    0,  131,  131,
  131,  131,    0,    0,  131,  135,    0,    0,  135,    0,
    0,  411,  135,    0,  135,  135,    0,    0,    0,    0,
  135,  135,  135,  135,  132,    0,  135,  132,    0,    0,
    0,  132,    0,  132,  132,    0,    0,    0,    0,  132,
  132,  132,  132,   44,    0,  132,  118,    0,    0,    0,
    7,    0,  119,   45,    0,    0,    0,    0,  120,  121,
   44,   46,   44,    6,  122,    6,    0,    7,    0,    7,
    0,    0,   45,    0,    0,    9,   10,    9,   10,   44,
   46,   13,  118,   13,    0,    0,    7,    0,  119,    0,
    0,    0,    0,    0,  120,  121,   44,    0,    0,  118,
  122,    0,    0,    7,    0,  119,   44,    0,    0,  189,
    0,  120,  121,    7,  350,  119,   44,  122,    0,    6,
    0,  120,  121,    7,    0,  356,   44,  122,    0,  189,
  358,    9,   10,    7,    0,    0,    0,   13,    0,    0,
    0,  120,  121,   44,    0,    0,  189,  122,    0,    0,
    7,    0,    0,    0,  380,    0,    0,    0,  120,  121,
    0,    0,    0,    5,  122,    0,  118,    0,    0,  397,
    7,    8,  119,  400,    0,    0,    0,    0,  120,  121,
    0,    0,   11,   12,  122,   14,    0,    0,    0,    5,
    0,    0,    6,    0,  421,    0,    7,    8,    0,    0,
    0,    0,    0,    0,    9,   10,    0,  429,   11,   12,
   13,   14,    0,    0,   44,    0,    0,  189,    0,    0,
    0,    7,    0,    0,   45,    0,    0,    0,  441,  120,
  121,   44,   46,    0,  189,  122,    0,    0,    7,    0,
  119,   44,    0,    0,  189,    0,  120,  121,    7,    0,
    0,    0,  122,    0,    0,    0,  120,  121,    0,    0,
    0,    0,  122,
};
}
static short yycheck[];
static { yycheck(); }
static void yycheck() {
yycheck = new short[] {                          2,
   10,    4,   40,    2,   68,    4,   43,   10,   40,   44,
   13,   10,   15,   41,   13,    2,   15,    4,   68,   59,
  125,   41,   42,   10,   40,   41,   13,  122,   15,   59,
   33,   34,  126,  123,   33,   34,  122,   47,  123,  123,
  138,   68,   59,  161,   47,   68,   33,   34,   47,   41,
  122,  322,   40,   10,   47,   10,  185,   45,   42,   40,
   47,   41,  126,   41,    4,   41,   58,   41,   71,   41,
   41,  121,   71,   58,   59,  112,  126,   97,   58,   41,
   45,   40,   58,   45,   71,   59,   58,   41,   59,   41,
   47,   45,   47,   33,  121,   40,  367,   45,  121,  126,
   45,  111,   41,  126,   41,  123,  235,   59,  111,   45,
   41,   59,  111,   97,   41,   60,   61,   62,  111,  122,
   59,  108,   59,  122,  111,   42,   59,  258,   59,  225,
   47,   58,   43,  251,   45,  172,  156,  268,  158,  176,
   58,  161,  179,  163,  242,   41,  257,   23,   44,   60,
   61,   62,   41,  180,  111,  260,  111,  253,  185,  255,
   36,  266,   58,   43,   43,   45,   45,  257,  439,   41,
  260,   41,   44,  257,  264,  265,  261,  276,  277,  297,
   59,  268,  272,  273,   59,  235,  276,  277,  278,  279,
   59,  241,    0,  274,  214,  262,  263,  217,   44,  219,
  210,  238,  222,  262,  263,   44,  301,  210,  235,  262,
  263,  210,  235,  307,  241,  301,    0,  257,  241,  257,
  223,  259,  225,  210,  223,  257,  225,  257,  248,  301,
   59,  251,  269,  268,  244,  285,  223,  125,  225,    0,
  257,  244,  273,  307,   40,  244,  123,  258,  276,  277,
  253,   41,  255,   43,  253,   45,  255,  244,  285,  309,
  276,  277,  285,    0,  274,  275,  253,  317,  255,  257,
  258,  274,  275,  310,  324,  274,  275,  297,  301,  257,
  307,  259,  309,   41,  276,  277,  309,  274,  275,   59,
  317,   59,  257,  258,  317,  257,  258,   59,  301,   58,
  350,  324,  301,  257,  258,  123,  356,    0,  358,  257,
  258,  407,  257,  258,  257,  352,   41,  125,  341,  257,
  357,  257,  258,  350,  269,  270,  271,  350,   44,  356,
  380,  358,   41,  356,   43,   58,   45,    0,  262,  263,
  367,  125,  369,  262,  263,  140,  141,  397,   41,   42,
   43,   41,   45,  380,   47,   58,   59,  380,  269,  270,
  271,  261,    0,   41,  125,  392,   59,   60,   61,   62,
  397,  143,  144,  400,  262,  263,  258,  125,   41,  429,
   43,   40,   45,  260,  125,    0,  274,   40,  125,  266,
  257,  441,  125,   58,  421,  261,   59,   60,   61,   62,
   58,  278,  429,   41,  407,   43,   58,   45,  407,    0,
  123,   59,   59,  123,  441,   58,  123,   59,   41,  274,
  407,   59,   60,   61,   62,  125,   41,   40,   43,  125,
   45,  273,  125,   58,   44,  123,   41,   59,   59,   59,
   41,    0,  260,   40,   59,   60,   61,   62,  266,  257,
  125,  125,  260,   59,  262,  263,  264,  265,  266,  267,
  278,  261,  125,   59,  272,  273,  274,  275,  276,  277,
  278,  279,  261,  257,  125,  125,  260,  274,  262,  263,
  264,  265,  266,  267,   41,   44,   59,  125,  272,  273,
  274,  275,  276,  277,  278,  279,  257,   44,    0,  260,
   59,  262,  263,  264,  265,  266,  267,   59,  125,   59,
  125,  272,  273,  274,  275,  276,  277,  278,  279,  123,
  257,  262,  263,  260,   41,  262,  263,  264,  265,  261,
  267,   40,  263,  274,  125,  272,  273,  274,  275,  276,
  277,  278,  279,    0,  257,   59,  263,  260,  263,   59,
  260,  264,   59,  266,  267,   59,  266,   59,  262,  272,
  273,  272,  275,  123,  257,  278,  125,  260,  278,  262,
  263,  264,  265,  266,  267,   59,  269,  270,  271,  272,
  273,  274,  275,  276,  277,  278,  279,    0,   59,   59,
   41,   40,  262,  125,  257,  125,   40,  260,  260,  262,
  263,  264,  265,  266,  267,   59,  269,  270,  271,  272,
  273,  274,  275,  276,  277,  278,  279,  263,   59,  257,
  125,    0,  260,  125,  262,  263,  264,  265,  266,  267,
  125,  269,  270,  271,  272,  273,  274,  275,  276,  277,
  278,  279,  257,   35,    0,  260,   59,  262,  263,  264,
  265,  266,  267,   59,  269,  270,  271,  272,  273,  274,
  275,  276,  277,  278,  279,   44,  257,  123,  125,  260,
   59,  262,  263,  264,  265,   59,  267,  125,   41,   59,
   59,  272,  273,  274,  275,  276,  277,  278,  279,   59,
  123,  125,   41,  257,  125,  125,  260,  263,  257,   91,
  264,  260,  263,  261,  123,  264,  265,  266,  272,  273,
  263,   41,  125,  272,  273,   45,  261,  276,  277,  278,
  279,   41,   45,  263,  263,   45,  263,  119,  263,  125,
   60,   61,   62,  123,  125,   59,  263,   60,   61,   62,
   60,   61,   62,   59,  257,   59,  125,  260,    2,   59,
    4,  264,   59,  266,  146,  257,   59,   59,  260,  272,
  273,   15,  264,  265,  266,  278,  263,  263,  125,  125,
  272,  273,  263,  125,  276,  277,  278,  279,   59,   33,
   34,  257,   59,   59,  260,  177,  263,   59,  264,   59,
  125,  267,  257,  262,   58,    0,  272,  273,  257,  275,
  257,  260,  278,  260,  123,  264,  274,  264,  265,  266,
  123,  180,  262,  272,  273,  272,  273,   71,  123,  276,
  277,  278,  279,  262,  257,  125,  241,  260,  123,  116,
  297,  264,   13,   13,  267,   13,   69,  275,  123,  272,
  273,   90,  275,  242,  257,  278,   -1,  260,  123,   -1,
   -1,  264,  265,  266,   -1,   -1,   -1,   -1,  123,  272,
  273,   -1,   -1,  276,  277,  278,  279,  257,   -1,   -1,
  260,   -1,   -1,   -1,  264,   -1,  266,  125,  257,   -1,
   -1,  260,  272,  273,   -1,  264,  265,  266,  278,   -1,
   -1,   -1,   -1,  272,  273,   -1,   -1,  276,  277,  278,
  279,  257,  125,   -1,  260,   -1,   -1,   -1,  264,  265,
  266,   -1,   -1,   -1,   -1,   -1,  272,  273,   -1,   -1,
  276,  277,  278,  279,   -1,  125,   -1,  257,  258,  257,
   -1,   -1,  260,   -1,  257,  258,  264,  257,  258,  269,
  270,  271,   -1,   -1,  272,  273,  269,  270,  271,  269,
  270,  271,  257,  125,   -1,  260,   -1,   -1,   -1,  264,
   -1,  266,  257,  125,   -1,  260,   -1,  272,  273,  264,
   -1,  266,  257,  278,   -1,  260,   -1,  272,  273,  264,
   -1,   -1,  257,  278,   -1,  260,  125,  272,  273,  264,
   -1,   -1,  257,  278,   -1,  260,  125,  272,  273,  264,
   -1,   -1,   -1,  278,   -1,   -1,   -1,  272,  273,  257,
   -1,   -1,  260,  278,  262,  263,  264,  265,  266,  267,
  125,   -1,   -1,   -1,  272,  273,  274,  275,  276,  277,
  278,  279,   -1,   -1,  257,   -1,   -1,  260,   -1,  262,
  263,  264,  265,  266,  267,  125,   -1,   -1,   -1,  272,
  273,  274,  275,  276,  277,  278,  279,  257,   -1,   -1,
  260,   -1,  262,  263,  264,  265,  266,  267,  125,   -1,
   -1,   -1,  272,  273,  274,  275,  276,  277,  278,  279,
   -1,   -1,   -1,   -1,   -1,  257,   -1,   -1,  260,   -1,
   -1,  125,  264,  265,  266,  257,   -1,   -1,  260,   -1,
  272,  273,  264,  265,  276,  277,  278,  279,   -1,   -1,
  272,  273,   -1,  125,  276,  277,  278,  279,  257,   -1,
   -1,  260,   -1,   -1,   -1,  264,  265,   -1,  257,   -1,
   -1,  260,  125,  272,  273,  264,  265,  276,  277,  278,
  279,   -1,   -1,  272,  273,   -1,   -1,  276,  277,  278,
  279,  125,  257,   -1,   -1,  260,   -1,   -1,   -1,  264,
  265,   -1,   -1,   -1,   -1,   -1,   -1,  272,  273,   -1,
  125,  276,  277,  278,  279,   -1,   -1,  257,   -1,   -1,
  260,   -1,   -1,   -1,  264,  265,   -1,  125,   -1,   -1,
   -1,   -1,  272,  273,   -1,   -1,  276,  277,  278,  279,
  257,   -1,   -1,  260,  125,   -1,   -1,  264,  265,   -1,
   -1,   -1,   -1,   -1,  125,  272,  273,   -1,   -1,  276,
  277,  278,  279,  257,  125,   -1,  260,   -1,   -1,   -1,
  264,   -1,  266,  267,  125,   -1,   -1,   -1,  272,  273,
  274,  275,   -1,   -1,  278,  257,   -1,   -1,  260,   -1,
   -1,  125,  264,   -1,  266,  267,   -1,   -1,   -1,   -1,
  272,  273,  274,  275,  257,   -1,  278,  260,   -1,   -1,
   -1,  264,   -1,  266,  267,   -1,   -1,   -1,   -1,  272,
  273,  274,  275,  257,   -1,  278,  260,   -1,   -1,   -1,
  264,   -1,  266,  267,   -1,   -1,   -1,   -1,  272,  273,
  257,  275,  257,  260,  278,  260,   -1,  264,   -1,  264,
   -1,   -1,  267,   -1,   -1,  272,  273,  272,  273,  257,
  275,  278,  260,  278,   -1,   -1,  264,   -1,  266,   -1,
   -1,   -1,   -1,   -1,  272,  273,  257,   -1,   -1,  260,
  278,   -1,   -1,  264,   -1,  266,  257,   -1,   -1,  260,
   -1,  272,  273,  264,  326,  266,  257,  278,   -1,  260,
   -1,  272,  273,  264,   -1,  337,  257,  278,   -1,  260,
  342,  272,  273,  264,   -1,   -1,   -1,  278,   -1,   -1,
   -1,  272,  273,  257,   -1,   -1,  260,  278,   -1,   -1,
  264,   -1,   -1,   -1,  366,   -1,   -1,   -1,  272,  273,
   -1,   -1,   -1,  257,  278,   -1,  260,   -1,   -1,  381,
  264,  265,  266,  385,   -1,   -1,   -1,   -1,  272,  273,
   -1,   -1,  276,  277,  278,  279,   -1,   -1,   -1,  257,
   -1,   -1,  260,   -1,  406,   -1,  264,  265,   -1,   -1,
   -1,   -1,   -1,   -1,  272,  273,   -1,  419,  276,  277,
  278,  279,   -1,   -1,  257,   -1,   -1,  260,   -1,   -1,
   -1,  264,   -1,   -1,  267,   -1,   -1,   -1,  440,  272,
  273,  257,  275,   -1,  260,  278,   -1,   -1,  264,   -1,
  266,  257,   -1,   -1,  260,   -1,  272,  273,  264,   -1,
   -1,   -1,  278,   -1,   -1,   -1,  272,  273,   -1,   -1,
   -1,   -1,  278,
};
}
final static short YYFINAL=3;
final static short YYMAXTOKEN=279;
final static String yyname[] = {
"end-of-file",null,null,null,null,null,null,null,null,null,null,null,null,null,
null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,
null,null,null,null,null,null,null,null,null,null,"'('","')'","'*'","'+'","','",
"'-'",null,"'/'",null,null,null,null,null,null,null,null,null,null,"':'","';'",
"'<'","'='","'>'",null,null,null,null,null,null,null,null,null,null,null,null,
null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,
null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,
null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,
"'{'",null,"'}'",null,null,null,null,null,null,null,null,null,null,null,null,
null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,
null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,
null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,
null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,
null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,
null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,
null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,
null,null,null,null,null,null,null,"ID","CTE","CADENA","IF","THEN","ELSE",
"ENDIF","OUT","FUN","RETURN","BREAK","ASIGNACION","COMP_MAYOR_IGUAL",
"COMP_MENOR_IGUAL","COMP_DISTINTO","WHEN","DO","UNTIL","CONTINUE","DOUBLE64",
"UINT16","DEFER","CONST",
};
final static String yyrule[] = {
"$accept : programa",
"programa : nombre_programa '{' sentencias '}'",
"programa : '{' sentencias '}'",
"programa : nombre_programa sentencias '}'",
"programa : nombre_programa '{' sentencias",
"programa : nombre_programa '{' '}'",
"nombre_programa : ID",
"sentencias : sentencia",
"sentencias : sentencias sentencia",
"sentencia : sentencia_declarativa",
"sentencia : sentencia_ejecutable",
"sentencia_declarativa : sentencia_declarativa_variables",
"sentencia_declarativa : funcion_con_return",
"sentencia_declarativa : funcion_sin_return",
"sentencia_declarativa : declaracion_constantes",
"sentencia_declarativa_variables : tipo lista_de_variables ';'",
"sentencia_declarativa_variables : tipo lista_de_variables",
"sentencia_declarativa_variables : lista_de_variables ';'",
"sentencia_declarativa_variables : tipo ';'",
"lista_de_variables : ID ',' lista_de_variables",
"lista_de_variables : ID",
"funcion_con_return : encabezado_funcion '{' sentencia_return '}'",
"funcion_con_return : encabezado_funcion '{' sentencias_funcion sentencia_return '}'",
"funcion_con_return : encabezado_funcion '{' '}'",
"sentencias_funcion : sentencia_funcion",
"sentencias_funcion : sentencias_funcion sentencia_funcion",
"sentencia_funcion : sentencia_declarativa",
"sentencia_funcion : sentencia_ejecutable_funcion",
"sentencia_ejecutable_funcion : asignacion",
"sentencia_ejecutable_funcion : DEFER asignacion",
"sentencia_ejecutable_funcion : imprimir",
"sentencia_ejecutable_funcion : DEFER imprimir",
"sentencia_ejecutable_funcion : sentencia_when_con_return",
"sentencia_ejecutable_funcion : DEFER sentencia_when_con_return",
"sentencia_ejecutable_funcion : sentencia_do_con_return",
"sentencia_ejecutable_funcion : DEFER sentencia_do_con_return",
"sentencia_ejecutable_funcion : sentencia_seleccion_simple_con_return",
"sentencia_ejecutable_funcion : DEFER sentencia_seleccion_simple_con_return",
"sentencias_ejecutables_funcion : sentencia_ejecutable_funcion",
"sentencias_ejecutables_funcion : sentencias_ejecutables_funcion sentencia_ejecutable_funcion",
"funcion_sin_return : encabezado_funcion '{' sentencia_seleccion_compuesta_con_return '}'",
"funcion_sin_return : encabezado_funcion '{' sentencias_funcion sentencia_seleccion_compuesta_con_return '}'",
"sentencia_seleccion_compuesta_con_return : IF '(' condicion ')' THEN sentencia_seleccion_compuesta_con_return_simple ELSE sentencia_seleccion_compuesta_con_return_simple ENDIF ';'",
"sentencia_seleccion_compuesta_con_return : IF '(' condicion ')' THEN '{' sentencias_ejecutables_funcion sentencia_return '}' ELSE sentencia_seleccion_compuesta_con_return_simple ENDIF ';'",
"sentencia_seleccion_compuesta_con_return : IF '(' condicion ')' THEN sentencia_seleccion_compuesta_con_return_simple ELSE '{' sentencias_ejecutables_funcion sentencia_return '}' ENDIF ';'",
"sentencia_seleccion_compuesta_con_return : IF '(' condicion ')' THEN '{' sentencias_ejecutables_funcion sentencia_return '}' ELSE '{' sentencias_ejecutables_funcion sentencia_return '}' ENDIF ';'",
"sentencia_seleccion_compuesta_con_return_simple : sentencia_return",
"sentencia_seleccion_compuesta_con_return_simple : sentencia_seleccion_compuesta_con_return",
"sentencia_seleccion_compuesta_con_return_simple : DEFER sentencia_seleccion_compuesta_con_return",
"sentencia_seleccion_simple_con_return : IF '(' condicion ')' THEN sentencia_return ENDIF ';'",
"sentencia_seleccion_simple_con_return : IF '(' condicion ')' THEN sentencia_seleccion_compuesta_con_return ENDIF ';'",
"sentencia_seleccion_simple_con_return : IF '(' condicion ')' THEN sentencia_ejecutable_funcion ENDIF ';'",
"sentencia_seleccion_simple_con_return : IF '(' condicion ')' THEN '{' sentencias_ejecutables_funcion sentencia_return '}' ENDIF ';'",
"sentencia_seleccion_simple_con_return : IF '(' condicion ')' THEN '{' sentencias_ejecutables_funcion sentencia_seleccion_compuesta_con_return '}' ENDIF ';'",
"sentencia_seleccion_simple_con_return : IF '(' condicion ')' THEN '{' sentencias_ejecutables_funcion sentencia_return '}' ELSE '{' sentencias_ejecutables_funcion '}' ENDIF ';'",
"sentencia_seleccion_simple_con_return : IF '(' condicion ')' THEN '{' sentencias_ejecutables_funcion sentencia_return '}' ELSE sentencia_ejecutable_funcion ENDIF ';'",
"sentencia_seleccion_simple_con_return : IF '(' condicion ')' THEN '{' sentencias_ejecutables_funcion sentencia_seleccion_compuesta_con_return '}' ELSE sentencia_ejecutable_funcion ENDIF ';'",
"sentencia_seleccion_simple_con_return : IF '(' condicion ')' THEN '{' sentencias_ejecutables_funcion sentencia_seleccion_compuesta_con_return '}' ELSE '{' sentencias_ejecutables_funcion '}' ENDIF ';'",
"sentencia_seleccion_simple_con_return : IF '(' condicion ')' THEN '{' sentencias_ejecutables_funcion '}' ELSE '{' sentencias_ejecutables_funcion sentencia_return '}' ENDIF ';'",
"sentencia_seleccion_simple_con_return : IF '(' condicion ')' THEN '{' sentencias_ejecutables_funcion '}' ELSE '{' sentencias_ejecutables_funcion sentencia_seleccion_compuesta_con_return '}' ENDIF ';'",
"sentencia_seleccion_simple_con_return : IF '(' condicion ')' THEN sentencia_ejecutable_funcion ELSE '{' sentencias_ejecutables_funcion sentencia_return '}' ENDIF ';'",
"sentencia_seleccion_simple_con_return : IF '(' condicion ')' THEN sentencia_ejecutable_funcion ELSE '{' sentencias_ejecutables_funcion sentencia_seleccion_compuesta_con_return '}' ENDIF ';'",
"sentencia_seleccion_simple_con_return : IF '(' condicion ')' THEN '{' sentencias_ejecutables_funcion '}' ELSE '{' sentencias_ejecutables_funcion '}' ENDIF ';'",
"sentencia_when_con_return : WHEN '(' condicion ')' THEN '{' sentencia_funcion '}' ';'",
"sentencia_when_con_return : WHEN '(' condicion ')' THEN '{' sentencia_funcion sentencia_return '}' ';'",
"sentencia_when_con_return : WHEN '(' condicion ')' THEN '{' sentencia_funcion sentencia_seleccion_compuesta_con_return '}' ';'",
"sentencia_when_con_return : WHEN '(' condicion ')' THEN '{' sentencia_funcion '}'",
"sentencia_when_con_return : WHEN '(' condicion ')' THEN '{' sentencia_funcion sentencia_return '}'",
"sentencia_when_con_return : WHEN '(' condicion ')' THEN '{' sentencia_funcion sentencia_seleccion_compuesta_con_return '}'",
"sentencia_when_con_return : WHEN '(' condicion ')' THEN '{' '}' ';'",
"sentencia_do_con_return : DO bloque_sentencias_ejecutables_do_con_return UNTIL '(' condicion ')' ';'",
"sentencia_do_con_return : etiqueta ':' DO bloque_sentencias_ejecutables_do_con_return UNTIL '(' condicion ')' ';'",
"bloque_sentencias_ejecutables_do_con_return : sentencia_return",
"bloque_sentencias_ejecutables_do_con_return : sentencia_seleccion_compuesta_con_return",
"bloque_sentencias_ejecutables_do_con_return : sentencias_ejecutables_do_funcion",
"bloque_sentencias_ejecutables_do_con_return : '{' sentencias_ejecutables_do_funcion sentencia_return '}'",
"bloque_sentencias_ejecutables_do_con_return : '{' sentencias_ejecutables_do_funcion sentencia_seleccion_compuesta_con_return '}'",
"bloque_sentencias_ejecutables_do_con_return : '{' sentencias_ejecutables_do_funcion '}'",
"sentencias_ejecutables_do_funcion : sentencia_ejecutable_do_funcion",
"sentencias_ejecutables_do_funcion : sentencias_ejecutables_do_funcion sentencia_ejecutable_do_funcion",
"sentencia_ejecutable_do_funcion : sentencia_ejecutable_funcion",
"sentencia_ejecutable_do_funcion : sentencia_break",
"sentencia_ejecutable_do_funcion : sentencia_continue",
"encabezado_funcion : FUN ID '(' ')' ':' tipo",
"encabezado_funcion : FUN ID '(' lista_de_parametros ')' ':' tipo",
"encabezado_funcion : FUN ID '(' ')' ':'",
"encabezado_funcion : FUN '(' ')' ':' tipo",
"encabezado_funcion : FUN ID ')' ':' tipo",
"encabezado_funcion : FUN ID '(' ':' tipo",
"encabezado_funcion : FUN ID '(' lista_de_parametros ')' ':'",
"encabezado_funcion : FUN '(' lista_de_parametros ')' ':' tipo",
"encabezado_funcion : FUN ID lista_de_parametros ')' ':' tipo",
"encabezado_funcion : FUN ID '(' lista_de_parametros ':' tipo",
"sentencia_return : RETURN '(' expresion ')' ';'",
"sentencia_return : RETURN '(' expresion ')'",
"sentencia_return : RETURN expresion ')'",
"sentencia_return : RETURN '(' expresion",
"sentencia_return : RETURN '(' ')' ';'",
"lista_de_parametros : parametro",
"lista_de_parametros : parametro ',' parametro",
"lista_de_parametros : parametro ',' parametro ',' lista_parametros_exceso",
"lista_parametros_exceso : parametro",
"lista_parametros_exceso : parametro ',' lista_parametros_exceso",
"parametro : tipo ID",
"parametro : tipo",
"$$1 :",
"parametro : $$1 ID",
"declaracion_constantes : CONST lista_declaracion_constantes ';'",
"declaracion_constantes : CONST lista_declaracion_constantes",
"declaracion_constantes : CONST ';'",
"lista_declaracion_constantes : declaracion_constante",
"lista_declaracion_constantes : declaracion_constante ',' lista_declaracion_constantes",
"declaracion_constante : ID ASIGNACION CTE",
"declaracion_constante : ID ASIGNACION",
"declaracion_constante : ID CTE",
"declaracion_constante : ID",
"sentencia_ejecutable : asignacion",
"sentencia_ejecutable : DEFER asignacion",
"sentencia_ejecutable : seleccion",
"sentencia_ejecutable : DEFER seleccion",
"sentencia_ejecutable : imprimir",
"sentencia_ejecutable : DEFER imprimir",
"sentencia_ejecutable : sentencia_when",
"sentencia_ejecutable : DEFER sentencia_when",
"sentencia_ejecutable : sentencia_do",
"sentencia_ejecutable : DEFER sentencia_do",
"sentencia_ejecutable_do : sentencia_ejecutable",
"sentencia_ejecutable_do : sentencia_break",
"sentencia_ejecutable_do : sentencia_continue",
"sentencia_break : BREAK ';'",
"sentencia_break : BREAK ':' etiqueta ';'",
"sentencia_break : BREAK",
"sentencia_break : BREAK ':' etiqueta",
"sentencia_break : BREAK ':' ';'",
"sentencia_continue : CONTINUE ';'",
"sentencia_continue : CONTINUE",
"sentencia_do : sentencia_do_simple",
"sentencia_do : etiqueta ':' sentencia_do_simple",
"sentencia_do_simple : DO bloque_sentencias_ejecutables_do UNTIL '(' condicion ')' ';'",
"sentencia_do_simple : DO bloque_sentencias_ejecutables_do UNTIL '(' condicion ')'",
"sentencia_do_simple : DO bloque_sentencias_ejecutables_do UNTIL '(' ')' ';'",
"sentencia_do_simple : DO bloque_sentencias_ejecutables_do UNTIL condicion ')' ';'",
"sentencia_do_simple : DO bloque_sentencias_ejecutables_do UNTIL '(' condicion ';'",
"etiqueta : ID",
"bloque_sentencias_ejecutables_do : sentencia_ejecutable_do",
"bloque_sentencias_ejecutables_do : '{' sentencias_ejecutables_do '}'",
"sentencias_ejecutables_do : sentencia_ejecutable_do",
"sentencias_ejecutables_do : sentencias_ejecutables_do sentencia_ejecutable_do",
"asignacion : ID ASIGNACION expresion ';'",
"asignacion : ID ASIGNACION ';'",
"asignacion : ID ASIGNACION expresion",
"sentencia_when : WHEN '(' condicion ')' THEN '{' sentencias_when '}' ';'",
"sentencia_when : WHEN '(' condicion ')' '{' sentencias_when '}' ';'",
"$$2 :",
"sentencia_when : WHEN '(' ')' THEN '{' sentencias_when '}' ';' $$2 WHEN '(' condicion ')' THEN '{' sentencias_when '}'",
"sentencia_when : WHEN '(' condicion ')' '{' sentencias_when '}'",
"sentencia_when : WHEN '(' condicion ')' '{' '}'",
"sentencias_when : sentencia",
"sentencias_when : sentencia sentencias_when",
"seleccion : IF '(' condicion ')' THEN bloque_sentencias_ejecutables_seleccion ENDIF ';'",
"seleccion : IF '(' condicion ')' THEN bloque_sentencias_ejecutables_seleccion ELSE bloque_sentencias_ejecutables_seleccion ENDIF ';'",
"bloque_sentencias_ejecutables_seleccion : sentencia_ejecutable",
"bloque_sentencias_ejecutables_seleccion : '{' sentencias_ejecutables '}'",
"sentencias_ejecutables : sentencia_ejecutable",
"sentencias_ejecutables : sentencias_ejecutables sentencia_ejecutable",
"condicion : expresion comparador expresion",
"condicion : expresion comparador",
"condicion : comparador expresion",
"comparador : COMP_MAYOR_IGUAL",
"comparador : COMP_MENOR_IGUAL",
"comparador : COMP_DISTINTO",
"comparador : '>'",
"comparador : '<'",
"comparador : '='",
"expresion : expresion '+' termino",
"expresion : expresion '-' termino",
"expresion : termino",
"termino : termino '*' factor",
"termino : termino '/' factor",
"termino : factor",
"factor : ID",
"factor : constante",
"factor : invocacion_funcion",
"invocacion_funcion : ID '(' ')'",
"invocacion_funcion : ID '(' lista_de_parametros_reales ')'",
"lista_de_parametros_reales : parametro_real",
"lista_de_parametros_reales : lista_de_parametros_reales ',' parametro_real",
"parametro_real : ID",
"parametro_real : constante",
"imprimir : OUT '(' CADENA ')' ';'",
"imprimir : OUT '(' ID ')' ';'",
"imprimir : OUT '(' ')' ';'",
"imprimir : OUT CADENA ')' ';'",
"imprimir : OUT '(' CADENA ';'",
"imprimir : OUT ID ')' ';'",
"imprimir : OUT '(' ID ';'",
"imprimir : OUT '(' CADENA ')'",
"imprimir : OUT '(' ID ')'",
"constante : CTE",
"constante : '-' CTE",
"tipo : UINT16",
"tipo : DOUBLE64",
};

//#line 382 ".\gramatica.y"

public static AnalizadorLexico lexico = null;
public static Logger logger = null;
public static TablaDeSimbolos ts = null;

public void constanteConSigno(String constante) {
	if (constante.contains(".")) {
		
		String negConstante = "-"+constante;
		
		Double parsedDouble = Double.parseDouble(negConstante.replace('D', 'E'));
		
		if (parsedDouble < -2.2250738585072014E-308 && -1.7976931348623157E+308 > parsedDouble) {
			logger.logWarning("[Parser] Rango invalido para la constante: " + negConstante + ", se trunca al rango permitido");
			
			if (-1.7976931348623157E+308 < parsedDouble) {
				negConstante = new String("-1.7976931348623157D+308");
			} else {
				negConstante =  new String("-2.2250738585072014D-308");
			}
		}
		
		ts.swapLexemas(constante, negConstante);
	} else {
		//se recibio un uint que fue aceptado por el lexico pero resulta ser negativo
		logger.logWarning("[Parser] No se admiten ui16 con valores negativos: " + "-"+constante + ", se trunca a 0");
		
		ts.swapLexemas(constante, "0");
	}
}	

public int yylex() {
	return lexico.yylex(yylval);
}

public void yyerror(String error) {
	logger.logError(error);
}

public static void main(String[] args) {
	if (args.length == 0) {
		System.err.println("No se especifico ningun archivo de codigo");
	} else {
		String archivo_a_leer = args[0];
		System.out.println("Se va a leer archivo " + archivo_a_leer);
		
		FileReaderHelper fileHelper = new FileReaderHelper();
		
		fileHelper.open(archivo_a_leer);
		
		Parser parser = new Parser();
		logger = new Logger();
		ts = new TablaDeSimbolos();
		lexico = new AnalizadorLexico(fileHelper, ts, logger);
		
        parser.run();

		String path = new File(archivo_a_leer).getAbsolutePath().replaceAll(args[0],"");
        
        Output out = new Output(path);
        
        String printTs = ts.print();
        
        
        out.saveFile("codigo-lexico.txt", logger.getLexico());
		out.saveFile("codigo-sintetico.txt", logger.getSintactico());
		out.saveFile("tabla-de-simbolos.txt", printTs);
        
		System.out.println(printTs);
	}
}
//#line 932 "Parser.java"
//###############################################################
// method: yylexdebug : check lexer state
//###############################################################
void yylexdebug(int state,int ch)
{
String s=null;
  if (ch < 0) ch=0;
  if (ch <= YYMAXTOKEN) //check index bounds
     s = yyname[ch];    //now get it
  if (s==null)
    s = "illegal-symbol";
  debug("state "+state+", reading "+ch+" ("+s+")");
}





//The following are now global, to aid in error reporting
int yyn;       //next next thing to do
int yym;       //
int yystate;   //current parsing state from state table
String yys;    //current token string


//###############################################################
// method: yyparse : parse input and execute indicated items
//###############################################################
int yyparse()
{
boolean doaction;
  init_stacks();
  yynerrs = 0;
  yyerrflag = 0;
  yychar = -1;          //impossible char forces a read
  yystate=0;            //initial state
  state_push(yystate);  //save it
  val_push(yylval);     //save empty value
  while (true) //until parsing is done, either correctly, or w/error
    {
    doaction=true;
    if (yydebug) debug("loop"); 
    //#### NEXT ACTION (from reduction table)
    for (yyn=yydefred[yystate];yyn==0;yyn=yydefred[yystate])
      {
      if (yydebug) debug("yyn:"+yyn+"  state:"+yystate+"  yychar:"+yychar);
      if (yychar < 0)      //we want a char?
        {
        yychar = yylex();  //get next token
        if (yydebug) debug(" next yychar:"+yychar);
        //#### ERROR CHECK ####
        if (yychar < 0)    //it it didn't work/error
          {
          yychar = 0;      //change it to default string (no -1!)
          if (yydebug)
            yylexdebug(yystate,yychar);
          }
        }//yychar<0
      yyn = yysindex[yystate];  //get amount to shift by (shift index)
      if ((yyn != 0) && (yyn += yychar) >= 0 &&
          yyn <= YYTABLESIZE && yycheck[yyn] == yychar)
        {
        if (yydebug)
          debug("state "+yystate+", shifting to state "+yytable[yyn]);
        //#### NEXT STATE ####
        yystate = yytable[yyn];//we are in a new state
        state_push(yystate);   //save it
        val_push(yylval);      //push our lval as the input for next rule
        yychar = -1;           //since we have 'eaten' a token, say we need another
        if (yyerrflag > 0)     //have we recovered an error?
           --yyerrflag;        //give ourselves credit
        doaction=false;        //but don't process yet
        break;   //quit the yyn=0 loop
        }

    yyn = yyrindex[yystate];  //reduce
    if ((yyn !=0 ) && (yyn += yychar) >= 0 &&
            yyn <= YYTABLESIZE && yycheck[yyn] == yychar)
      {   //we reduced!
      if (yydebug) debug("reduce");
      yyn = yytable[yyn];
      doaction=true; //get ready to execute
      break;         //drop down to actions
      }
    else //ERROR RECOVERY
      {
      if (yyerrflag==0)
        {
        yyerror("syntax error");
        yynerrs++;
        }
      if (yyerrflag < 3) //low error count?
        {
        yyerrflag = 3;
        while (true)   //do until break
          {
          if (stateptr<0)   //check for under & overflow here
            {
            yyerror("stack underflow. aborting...");  //note lower case 's'
            return 1;
            }
          yyn = yysindex[state_peek(0)];
          if ((yyn != 0) && (yyn += YYERRCODE) >= 0 &&
                    yyn <= YYTABLESIZE && yycheck[yyn] == YYERRCODE)
            {
            if (yydebug)
              debug("state "+state_peek(0)+", error recovery shifting to state "+yytable[yyn]+" ");
            yystate = yytable[yyn];
            state_push(yystate);
            val_push(yylval);
            doaction=false;
            break;
            }
          else
            {
            if (yydebug)
              debug("error recovery discarding state "+state_peek(0)+" ");
            if (stateptr<0)   //check for under & overflow here
              {
              yyerror("Stack underflow. aborting...");  //capital 'S'
              return 1;
              }
            state_pop();
            val_pop();
            }
          }
        }
      else            //discard this token
        {
        if (yychar == 0)
          return 1; //yyabort
        if (yydebug)
          {
          yys = null;
          if (yychar <= YYMAXTOKEN) yys = yyname[yychar];
          if (yys == null) yys = "illegal-symbol";
          debug("state "+yystate+", error recovery discards token "+yychar+" ("+yys+")");
          }
        yychar = -1;  //read another
        }
      }//end error recovery
    }//yyn=0 loop
    if (!doaction)   //any reason not to proceed?
      continue;      //skip action
    yym = yylen[yyn];          //get count of terminals on rhs
    if (yydebug)
      debug("state "+yystate+", reducing "+yym+" by rule "+yyn+" ("+yyrule[yyn]+")");
    if (yym>0)                 //if count of rhs not 'nil'
      yyval = val_peek(yym-1); //get current semantic value
    yyval = dup_yyval(yyval); //duplicate yyval if ParserVal is used as semantic value
    switch(yyn)
      {
//########## USER-SUPPLIED ACTIONS ##########
case 1:
//#line 17 ".\gramatica.y"
{ logger.logSuccess("[Parser] Programa correcto detectado"); }
break;
case 2:
//#line 18 ".\gramatica.y"
{ logger.logError("[Parser] Se esperaba un identificador nombre del programa"); }
break;
case 3:
//#line 19 ".\gramatica.y"
{ logger.logError("[Parser] Se esperaba un { antes de las sentencias del programa"); }
break;
case 4:
//#line 20 ".\gramatica.y"
{ logger.logError("[Parser] Se esperaba un } al final de las sentencias del programa"); }
break;
case 5:
//#line 21 ".\gramatica.y"
{ logger.logError("[Parser] Se esperaban sentencias del programa"); }
break;
case 15:
//#line 46 ".\gramatica.y"
{ logger.logSuccess("[Parser] Declaracion de lista de variables detectado"); }
break;
case 16:
//#line 47 ".\gramatica.y"
{ logger.logError("[Parser] Se esperaba un ; al final de la lista de variables"); }
break;
case 17:
//#line 48 ".\gramatica.y"
{ logger.logError("[Parser] Se esperaba un tipo para la lista de variables"); }
break;
case 18:
//#line 49 ".\gramatica.y"
{ logger.logError("[Parser] Se esperaba una variable o lista de variables"); }
break;
case 21:
//#line 58 ".\gramatica.y"
{ logger.logSuccess("[Parser] Declaracion de funcion detectado"); }
break;
case 22:
//#line 59 ".\gramatica.y"
{ logger.logSuccess("[Parser] Declaracion de funcion detectado"); }
break;
case 23:
//#line 60 ".\gramatica.y"
{ logger.logError("[Parser] Se esperaban sentencias en la funcion"); }
break;
case 40:
//#line 92 ".\gramatica.y"
{ logger.logSuccess("[Parser] Declaracion de funcion detectado"); }
break;
case 41:
//#line 93 ".\gramatica.y"
{ logger.logSuccess("[Parser] Declaracion de funcion detectado"); }
break;
case 42:
//#line 97 ".\gramatica.y"
{ logger.logSuccess("[Parser] Sentencia de seleccion detectada"); }
break;
case 43:
//#line 98 ".\gramatica.y"
{ logger.logSuccess("[Parser] Sentencia de seleccion detectada"); }
break;
case 44:
//#line 99 ".\gramatica.y"
{ logger.logSuccess("[Parser] Sentencia de seleccion detectada"); }
break;
case 45:
//#line 100 ".\gramatica.y"
{ logger.logSuccess("[Parser] Sentencia de seleccion detectada"); }
break;
case 49:
//#line 110 ".\gramatica.y"
{ logger.logSuccess("[Parser] Sentencia de seleccion detectada"); }
break;
case 50:
//#line 111 ".\gramatica.y"
{ logger.logSuccess("[Parser] Sentencia de seleccion detectada"); }
break;
case 51:
//#line 112 ".\gramatica.y"
{ logger.logSuccess("[Parser] Sentencia de seleccion detectada"); }
break;
case 52:
//#line 113 ".\gramatica.y"
{ logger.logSuccess("[Parser] Sentencia de seleccion detectada"); }
break;
case 53:
//#line 114 ".\gramatica.y"
{ logger.logSuccess("[Parser] Sentencia de seleccion detectada"); }
break;
case 54:
//#line 115 ".\gramatica.y"
{ logger.logSuccess("[Parser] Sentencia de seleccion detectada"); }
break;
case 55:
//#line 116 ".\gramatica.y"
{ logger.logSuccess("[Parser] Sentencia de seleccion detectada"); }
break;
case 56:
//#line 117 ".\gramatica.y"
{ logger.logSuccess("[Parser] Sentencia de seleccion detectada"); }
break;
case 57:
//#line 118 ".\gramatica.y"
{ logger.logSuccess("[Parser] Sentencia de seleccion detectada"); }
break;
case 58:
//#line 119 ".\gramatica.y"
{ logger.logSuccess("[Parser] Sentencia de seleccion detectada"); }
break;
case 59:
//#line 120 ".\gramatica.y"
{ logger.logSuccess("[Parser] Sentencia de seleccion detectada"); }
break;
case 60:
//#line 121 ".\gramatica.y"
{ logger.logSuccess("[Parser] Sentencia de seleccion detectada"); }
break;
case 61:
//#line 122 ".\gramatica.y"
{ logger.logSuccess("[Parser] Sentencia de seleccion detectada"); }
break;
case 62:
//#line 123 ".\gramatica.y"
{ logger.logSuccess("[Parser] Sentencia de seleccion detectada"); }
break;
case 63:
//#line 127 ".\gramatica.y"
{ logger.logSuccess("[Parser] Sentencia when detectada"); }
break;
case 64:
//#line 128 ".\gramatica.y"
{ logger.logSuccess("[Parser] Sentencia when detectada"); }
break;
case 65:
//#line 129 ".\gramatica.y"
{ logger.logSuccess("[Parser] Sentencia when detectada"); }
break;
case 66:
//#line 130 ".\gramatica.y"
{ logger.logError("[Parser] Se esperaba ; al final de la sentencia when"); }
break;
case 67:
//#line 131 ".\gramatica.y"
{ logger.logError("[Parser] Se esperaba ; al final de la sentencia when"); }
break;
case 68:
//#line 132 ".\gramatica.y"
{ logger.logError("[Parser] Se esperaba ; al final de la sentencia when"); }
break;
case 69:
//#line 133 ".\gramatica.y"
{ logger.logError("[Parser] Se esperaban sentencias en la sentencia when"); }
break;
case 70:
//#line 137 ".\gramatica.y"
{ logger.logSuccess("[Parser] Sentencia do until detectada"); }
break;
case 71:
//#line 138 ".\gramatica.y"
{ logger.logSuccess("[Parser] Sentencia do until detectada"); }
break;
case 85:
//#line 164 ".\gramatica.y"
{ logger.logError("[Parser] Se esperaba un tipo de return para la funcion"); }
break;
case 86:
//#line 165 ".\gramatica.y"
{ logger.logError("[Parser] Se esperaba un identificador nombre para la funcion"); }
break;
case 87:
//#line 166 ".\gramatica.y"
{ logger.logError("[Parser] Se esperaba un ( luego del nombre de la funcion"); }
break;
case 88:
//#line 167 ".\gramatica.y"
{ logger.logError("[Parser] Se esperaba un ) luego del nombre para la funcion"); }
break;
case 89:
//#line 168 ".\gramatica.y"
{ logger.logError("[Parser] Se esperaba un tipo de return para la funcion"); }
break;
case 90:
//#line 169 ".\gramatica.y"
{ logger.logError("[Parser] Se esperaba un identificador nombre para la funcion"); }
break;
case 91:
//#line 170 ".\gramatica.y"
{ logger.logError("[Parser] Se esperaba un ( luego del nombre de la funcion"); }
break;
case 92:
//#line 171 ".\gramatica.y"
{ logger.logError("[Parser] Se esperaba un ) luego del nombre para la funcion"); }
break;
case 94:
//#line 176 ".\gramatica.y"
{ logger.logError("[Parser] Se esperaba un ; al final de la sentencia return"); }
break;
case 95:
//#line 177 ".\gramatica.y"
{ logger.logError("[Parser] Se esperaba un ( en la sentencia return"); }
break;
case 96:
//#line 178 ".\gramatica.y"
{ logger.logError("[Parser] Se esperaba un ) en la sentencia return"); }
break;
case 97:
//#line 179 ".\gramatica.y"
{ logger.logError("[Parser] Se esperaba una expresion en la sentencia return"); }
break;
case 100:
//#line 185 ".\gramatica.y"
{ logger.logError("[Parser] Hay mas de 2 parametros en la funcion"); }
break;
case 105:
//#line 195 ".\gramatica.y"
{ logger.logError("[Parser] Se esperaba un identificador nombre para el parametro"); }
break;
case 106:
//#line 196 ".\gramatica.y"
{ logger.logError("[Parser] Se esperaba un tipo valido para el parametro"); }
break;
case 107:
//#line 200 ".\gramatica.y"
{ logger.logSuccess("[Parser] Declaracion de constantes detectado"); }
break;
case 108:
//#line 201 ".\gramatica.y"
{ logger.logError("[Parser] Se esperaba ; al final de la declaracion de constantes"); }
break;
case 109:
//#line 202 ".\gramatica.y"
{ logger.logError("[Parser] Se esperaba una lista de declaracion de constantes"); }
break;
case 113:
//#line 212 ".\gramatica.y"
{ logger.logError("[Parser] Se esperaba una constante del lado derecho de la asignacion"); }
break;
case 114:
//#line 213 ".\gramatica.y"
{ logger.logError("[Parser] Se esperaba el simbolo asignacion en la declaracion de constantes"); }
break;
case 115:
//#line 214 ".\gramatica.y"
{ logger.logError("[Parser] Se esperaba una asignacion en la declaracion de constantes"); }
break;
case 129:
//#line 237 ".\gramatica.y"
{ logger.logSuccess("[Parser] Sentencia break detectada"); }
break;
case 130:
//#line 238 ".\gramatica.y"
{ logger.logSuccess("[Parser] Sentencia break con etiqueta detectada"); }
break;
case 131:
//#line 239 ".\gramatica.y"
{ logger.logError("[Parser] Se esperaba un ; luego de la sentencia break"); }
break;
case 132:
//#line 240 ".\gramatica.y"
{ logger.logError("[Parser] Se esperaba un ; luego de la sentencia break"); }
break;
case 133:
//#line 241 ".\gramatica.y"
{ logger.logError("[Parser] Se esperaba una etiqueta en la sentencia break"); }
break;
case 134:
//#line 245 ".\gramatica.y"
{ logger.logSuccess("[Parser] Sentencia continue detectada"); }
break;
case 135:
//#line 246 ".\gramatica.y"
{ logger.logError("[Parser] Se esperaba un ; al final de la sentencia continue"); }
break;
case 138:
//#line 255 ".\gramatica.y"
{ logger.logSuccess("[Parser] Sentencia do until detectada"); }
break;
case 139:
//#line 256 ".\gramatica.y"
{ logger.logError("[Parser] Se esperaba un ; al final de la sentencia do"); }
break;
case 140:
//#line 257 ".\gramatica.y"
{ logger.logError("[Parser] Se esperaba una condicion para la sentencia do"); }
break;
case 141:
//#line 258 ".\gramatica.y"
{ logger.logSuccess("[Parser] Se esperaba un ( en la condicion para la sentencia do"); }
break;
case 142:
//#line 259 ".\gramatica.y"
{ logger.logSuccess("[Parser] Se esperaba un ) en la condicion para la sentencia do"); }
break;
case 148:
//#line 277 ".\gramatica.y"
{ logger.logSuccess("[Parser] Asignacion detectada"); }
break;
case 149:
//#line 278 ".\gramatica.y"
{logger.logError("[Parser] Se espera una expresion del lado derecho de la asignacion");}
break;
case 150:
//#line 279 ".\gramatica.y"
{ logger.logError("[Parser] Se espera un ; al final de la asignacion"); }
break;
case 151:
//#line 283 ".\gramatica.y"
{ logger.logSuccess("[Parser] Sentencia when detectada"); }
break;
case 152:
//#line 284 ".\gramatica.y"
{ logger.logError("[Parser] Se esperaba la palabra reservada then en la sentencia when"); }
break;
case 153:
//#line 285 ".\gramatica.y"
{ logger.logError("[Parser] Se esperaba una condicion en la sentencia when"); }
break;
case 154:
//#line 286 ".\gramatica.y"
{ logger.logError("[Parser] Se esperaba un ; al final de la sentencia when"); }
break;
case 155:
//#line 287 ".\gramatica.y"
{ logger.logError("[Parser] Se esperaba la palabra reservada then en la sentencia when"); }
break;
case 156:
//#line 288 ".\gramatica.y"
{ logger.logError("[Parser] Se esperaban sentencias dentro del when"); }
break;
case 159:
//#line 297 ".\gramatica.y"
{ logger.logSuccess("[Parser] Sentencia if then detectada"); }
break;
case 160:
//#line 298 ".\gramatica.y"
{ logger.logSuccess("[Parser] Sentencia if then else detectada"); }
break;
case 166:
//#line 313 ".\gramatica.y"
{ logger.logError("[Parser] Se esperaba un expresion del lado derecho de la comparacion"); }
break;
case 167:
//#line 314 ".\gramatica.y"
{ logger.logError("[Parser] Se esperaba un expresion del lado izquierdo de la comparacion"); }
break;
case 189:
//#line 360 ".\gramatica.y"
{ logger.logSuccess("[Parser] Sentencia out detectada"); }
break;
case 190:
//#line 361 ".\gramatica.y"
{ logger.logSuccess("[Parser] Sentencia out detectada"); }
break;
case 191:
//#line 362 ".\gramatica.y"
{ logger.logError("[Parser] Se esperaba una cadena o identificador en la sentencia out"); }
break;
case 192:
//#line 363 ".\gramatica.y"
{ logger.logError("[Parser] Se esperaba un ( en la sentencia out"); }
break;
case 193:
//#line 364 ".\gramatica.y"
{ logger.logError("[Parser] Se esperaba un ) en la sentencia out"); }
break;
case 194:
//#line 365 ".\gramatica.y"
{ logger.logError("[Parser] Se esperaba un ( en la sentencia out"); }
break;
case 195:
//#line 366 ".\gramatica.y"
{ logger.logError("[Parser] Se esperaba un ) en la sentencia out"); }
break;
case 196:
//#line 367 ".\gramatica.y"
{ logger.logError("[Parser] Se espera un ; al final de la sentencia out"); }
break;
case 197:
//#line 368 ".\gramatica.y"
{ logger.logError("[Parser] Se espera un ; al final de la sentencia out"); }
break;
case 199:
//#line 373 ".\gramatica.y"
{ constanteConSigno(val_peek(0).sval); }
break;
//#line 1469 "Parser.java"
//########## END OF USER-SUPPLIED ACTIONS ##########
    }//switch
    //#### Now let's reduce... ####
    if (yydebug) debug("reduce");
    state_drop(yym);             //we just reduced yylen states
    yystate = state_peek(0);     //get new state
    val_drop(yym);               //corresponding value drop
    yym = yylhs[yyn];            //select next TERMINAL(on lhs)
    if (yystate == 0 && yym == 0)//done? 'rest' state and at first TERMINAL
      {
      if (yydebug) debug("After reduction, shifting from state 0 to state "+YYFINAL+"");
      yystate = YYFINAL;         //explicitly say we're done
      state_push(YYFINAL);       //and save it
      val_push(yyval);           //also save the semantic value of parsing
      if (yychar < 0)            //we want another character?
        {
        yychar = yylex();        //get next character
        if (yychar<0) yychar=0;  //clean, if necessary
        if (yydebug)
          yylexdebug(yystate,yychar);
        }
      if (yychar == 0)          //Good exit (if lex returns 0 ;-)
         break;                 //quit the loop--all DONE
      }//if yystate
    else                        //else not done yet
      {                         //get next state and push, for next yydefred[]
      yyn = yygindex[yym];      //find out where to go
      if ((yyn != 0) && (yyn += yystate) >= 0 &&
            yyn <= YYTABLESIZE && yycheck[yyn] == yystate)
        yystate = yytable[yyn]; //get new state
      else
        yystate = yydgoto[yym]; //else go to new defred
      if (yydebug) debug("after reduction, shifting from state "+state_peek(0)+" to state "+yystate+"");
      state_push(yystate);     //going again, so push state & val...
      val_push(yyval);         //for next action
      }
    }//main loop
  return 0;//yyaccept!!
}
//## end of method parse() ######################################



//## run() --- for Thread #######################################
/**
 * A default run method, used for operating this parser
 * object in the background.  It is intended for extending Thread
 * or implementing Runnable.  Turn off with -Jnorun .
 */
public void run()
{
  yyparse();
}
//## end of method run() ########################################



//## Constructors ###############################################
/**
 * Default constructor.  Turn off with -Jnoconstruct .

 */
public Parser()
{
  //nothing to do
}


/**
 * Create a parser, setting the debug to true or false.
 * @param debugMe true for debugging, false for no debug.
 */
public Parser(boolean debugMe)
{
  yydebug=debugMe;
}
//###############################################################



}
//################### END OF CLASS ##############################
