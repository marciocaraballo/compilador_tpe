//### This file created by BYACC 1.8(/Java extension  1.15)
//### Java capabilities added 7 Jan 97, Bob Jamison
//### Updated : 27 Nov 97  -- Bob Jamison, Joe Nieten
//###           01 Jan 98  -- Bob Jamison -- fixed generic semantic constructor
//###           01 Jun 99  -- Bob Jamison -- added Runnable support
//###           06 Aug 00  -- Bob Jamison -- made state variables class-global
//###           03 Jan 01  -- Bob Jamison -- improved flags, tracing
//###           16 May 01  -- Bob Jamison -- added custom stack sizing
//###           04 Mar 02  -- Yuval Oren  -- improved java performance, added options
//###           14 Mar 02  -- Tomas Hurka -- -d support, static initializer workaround
//### Please send bug reports to tom@hukatronic.cz
//### static char yysccsid[] = "@(#)yaccpar	1.8 (Berkeley) 01/20/90";



package compilador;



//#line 2 "./src/compilador/gramatica.y"
import java.io.File;
//#line 19 "Parser.java"




public class Parser
{

boolean yydebug;        //do I want debug output?
int yynerrs;            //number of errors so far
int yyerrflag;          //was there an error?
int yychar;             //the current working character

//########## MESSAGES ##########
//###############################################################
// method: debug
//###############################################################
void debug(String msg)
{
  if (yydebug)
    System.out.println(msg);
}

//########## STATE STACK ##########
final static int YYSTACKSIZE = 500;  //maximum stack size
int statestk[] = new int[YYSTACKSIZE]; //state stack
int stateptr;
int stateptrmax;                     //highest index of stackptr
int statemax;                        //state when highest index reached
//###############################################################
// methods: state stack push,pop,drop,peek
//###############################################################
final void state_push(int state)
{
  try {
		stateptr++;
		statestk[stateptr]=state;
	 }
	 catch (ArrayIndexOutOfBoundsException e) {
     int oldsize = statestk.length;
     int newsize = oldsize * 2;
     int[] newstack = new int[newsize];
     System.arraycopy(statestk,0,newstack,0,oldsize);
     statestk = newstack;
     statestk[stateptr]=state;
  }
}
final int state_pop()
{
  return statestk[stateptr--];
}
final void state_drop(int cnt)
{
  stateptr -= cnt; 
}
final int state_peek(int relative)
{
  return statestk[stateptr-relative];
}
//###############################################################
// method: init_stacks : allocate and prepare stacks
//###############################################################
final boolean init_stacks()
{
  stateptr = -1;
  val_init();
  return true;
}
//###############################################################
// method: dump_stacks : show n levels of the stacks
//###############################################################
void dump_stacks(int count)
{
int i;
  System.out.println("=index==state====value=     s:"+stateptr+"  v:"+valptr);
  for (i=0;i<count;i++)
    System.out.println(" "+i+"    "+statestk[i]+"      "+valstk[i]);
  System.out.println("======================");
}


//########## SEMANTIC VALUES ##########
//public class ParserVal is defined in ParserVal.java


String   yytext;//user variable to return contextual strings
ParserVal yyval; //used to return semantic vals from action routines
ParserVal yylval;//the 'lval' (result) I got from yylex()
ParserVal valstk[];
int valptr;
//###############################################################
// methods: value stack push,pop,drop,peek.
//###############################################################
void val_init()
{
  valstk=new ParserVal[YYSTACKSIZE];
  yyval=new ParserVal();
  yylval=new ParserVal();
  valptr=-1;
}
void val_push(ParserVal val)
{
  if (valptr>=YYSTACKSIZE)
    return;
  valstk[++valptr]=val;
}
ParserVal val_pop()
{
  if (valptr<0)
    return new ParserVal();
  return valstk[valptr--];
}
void val_drop(int cnt)
{
int ptr;
  ptr=valptr-cnt;
  if (ptr<0)
    return;
  valptr = ptr;
}
ParserVal val_peek(int relative)
{
int ptr;
  ptr=valptr-relative;
  if (ptr<0)
    return new ParserVal();
  return valstk[ptr];
}
final ParserVal dup_yyval(ParserVal val)
{
  ParserVal dup = new ParserVal();
  dup.ival = val.ival;
  dup.dval = val.dval;
  dup.sval = val.sval;
  dup.obj = val.obj;
  return dup;
}
//#### end semantic value section ####
public final static short ID=257;
public final static short CTE=258;
public final static short CADENA=259;
public final static short IF=260;
public final static short ELSE=261;
public final static short ENDIF=262;
public final static short PRINT=263;
public final static short VOID=264;
public final static short RETURN=265;
public final static short COMP_MAYOR_IGUAL=266;
public final static short COMP_MENOR_IGUAL=267;
public final static short COMP_IGUAL=268;
public final static short COMP_DISTINTO=269;
public final static short CLASS=270;
public final static short WHILE=271;
public final static short DO=272;
public final static short INTERFACE=273;
public final static short IMPLEMENT=274;
public final static short INT=275;
public final static short ULONG=276;
public final static short FLOAT=277;
public final static short OPERADOR_MENOS=278;
public final static short YYERRCODE=256;
final static short yylhs[] = {                           -1,
    0,    0,    0,    0,    0,    1,    1,    2,    2,    4,
    4,    4,    4,    4,    4,   11,   11,   12,   12,   13,
   13,   13,   13,   13,   10,   10,    9,    9,    9,    9,
    9,    9,    9,    9,    9,    9,    9,   15,   19,   15,
   15,   15,   15,   15,   15,   15,   15,   15,    8,    8,
    8,    8,    8,    8,    8,    8,    8,   14,   14,   14,
   20,   14,   14,   14,   14,   14,   16,   16,   16,   16,
   16,   16,   18,   18,   18,   18,   18,   18,   18,   18,
   18,   18,   18,   23,   23,   24,   24,   21,   21,   21,
   21,   22,   22,   22,   22,    7,    7,    7,    7,    7,
    7,    7,    6,    6,    6,    6,    6,    6,   28,   28,
    5,    5,    5,   26,   26,    3,    3,    3,    3,   29,
   29,   29,   32,   32,   32,   32,   32,   32,   35,   35,
   36,   36,   38,   38,   38,   38,   31,   31,   31,   31,
   31,   31,   31,   31,   39,   39,   30,   37,   37,   37,
   37,   37,   37,   37,   37,   40,   40,   40,   40,   40,
   40,   40,   40,   40,   40,   40,   40,   43,   43,   44,
   44,   44,   42,   42,   42,   41,   34,   34,   33,   33,
   33,   33,   17,   17,   17,   17,   45,   45,   45,   45,
   45,   45,   27,   27,   27,   46,   46,   46,   47,   47,
   47,   25,   25,
};
final static short yylen[] = {                            2,
    3,    2,    2,    2,    0,    1,    2,    1,    1,    1,
    1,    1,    1,    1,    1,    1,    2,    1,    1,    1,
    1,    1,    1,    1,    2,    1,    7,    6,    6,    6,
    6,    3,    4,    2,    5,    4,    3,    7,    0,   13,
    6,    6,    3,    4,    2,    5,    4,    3,    9,    7,
    8,    6,    8,    6,    8,    8,    6,    9,    7,    8,
    0,   15,    6,    8,    8,    6,    1,    3,    2,    2,
    2,    1,    1,    1,    1,    3,    4,    5,    2,    3,
    2,    3,    2,    1,    2,    1,    1,    1,    2,    1,
    2,    1,    2,    1,    2,    3,    2,    2,    3,    2,
    3,    2,    5,    4,    7,    4,    3,    6,    1,    3,
    4,    3,    3,    1,    3,    1,    1,    1,    1,    3,
    2,    2,    5,    4,    3,    2,    4,    3,    1,    2,
    2,    1,    3,    2,    1,    2,    5,    7,    4,    3,
    6,    5,    4,    6,    1,    2,    2,    5,    4,    7,
    6,    4,    3,    4,    3,    4,    3,    5,    4,    3,
    2,    3,    2,    4,    3,    2,    1,    1,    2,    1,
    1,    1,    1,    3,    2,    2,    1,    3,    1,    1,
    1,    1,    3,    2,    2,    3,    1,    1,    1,    1,
    1,    1,    3,    3,    1,    3,    3,    1,    1,    2,
    1,    1,    2,
};
final static short yydefred[] = {                         0,
    0,    0,    0,    0,    0,    0,    0,    0,  179,  180,
  181,    0,    0,    0,    6,    8,    9,   10,   11,   12,
   13,   14,   15,    0,  116,  117,  118,  119,    0,    0,
    0,    0,  202,    0,    0,   98,    0,    0,    0,   25,
    0,    0,    0,    0,    0,   34,    0,    0,    0,    0,
    0,    0,    0,  126,    0,  129,    0,    4,    0,    2,
    7,    0,    0,    0,  177,  122,    0,    0,    0,    0,
  167,   18,   20,   21,   22,    0,    0,   16,   19,   23,
   24,  147,    0,  187,  188,  189,  190,    0,  191,  192,
    0,  201,    0,    0,    0,  198,   99,   96,  203,  101,
  182,    0,  155,    0,    0,  153,    0,    0,    0,    0,
  135,    0,  145,    0,  140,    0,    0,   32,    0,   71,
   90,   88,    0,    0,    0,    0,    0,   70,   91,   89,
    0,  128,    0,    0,  125,  130,  131,    1,    0,    0,
  113,    0,  115,  120,    0,    0,    0,    0,   45,    0,
    0,   74,    0,    0,    0,  161,    0,    0,  163,  170,
  171,  172,    0,  168,  166,    0,   17,  200,    0,    0,
    0,    0,    0,    0,    0,    0,    0,  149,    0,  176,
  154,  152,  136,    0,    0,    0,    0,  143,  146,    0,
  139,    0,   68,   36,    0,   33,    0,    0,    0,  127,
  124,  104,    0,    0,  111,  178,    0,    0,   43,   83,
   94,   92,    0,    0,    0,    0,    0,   79,   95,    0,
   93,  157,    0,  160,    0,  165,  169,  162,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,  196,  197,
    0,  148,  173,    0,    0,    0,    0,  137,  133,  142,
    0,   35,    0,    0,    0,  123,    0,    0,  103,    0,
    0,   76,    0,   47,    0,   44,    0,    0,   80,  159,
  156,    0,  164,    0,   54,    0,   57,    0,    0,    0,
    0,  151,  175,    0,  144,  141,   29,   30,    0,   31,
    0,    0,    0,    0,    0,    0,  114,   77,   86,   87,
    0,   84,   46,    0,    0,    0,  158,    0,    0,    0,
    0,   50,  150,  174,  138,   27,    0,  105,   63,    0,
   66,    0,    0,   78,   85,   41,    0,   42,   53,   55,
   56,    0,    0,    0,    0,   59,    0,   38,    0,   49,
   64,   65,    0,    0,    0,   58,    0,    0,    0,    0,
    0,    0,    0,    0,    0,   40,    0,   62,
};
final static short yydgoto[] = {                         13,
   14,   15,  160,   49,   73,   74,   75,   21,   22,   23,
   77,   78,  162,   80,   81,   50,   91,  154,  339,  337,
   51,  155,  301,  302,   92,   24,   93,  258,   25,   26,
   27,   28,   29,   67,   55,   56,   30,  113,  114,   82,
  243,  244,  163,  164,   94,   95,   96,
};
final static short yysindex[] = {                      1178,
    0,  -21,   58,  -40,  -32, -112,  270,  292,    0,    0,
    0, 1242,    0, 1265,    0,    0,    0,    0,    0,    0,
    0,    0,    0,   51,    0,    0,    0,    0,   -4, 1043,
 1020,   -7,    0,   75, -211,    0,   98,  -19,  112,    0,
 -109, -103,  549,  200, 1290,    0, 1070,    0,    0,  -36,
 1311,  -91, -179,    0, -101,    0,  116,    0, 1332,    0,
    0,   70,   77, -159,    0,    0,   66,   73,  937, 1353,
    0,    0,    0,    0,    0, 1375, 1396,    0,    0,    0,
    0,    0, -108,    0,    0,    0,    0, 1199,    0,    0,
  139,    0,  958,  -28,   84,    0,    0,    0,    0,    0,
    0,  224,    0,  -58,  150,    0,  160,  162,  -88,  549,
    0,   -3,    0,  574,    0,  549,  912,    0,  589,    0,
    0,    0, 1418,  217,  229,  223,  589,    0,    0,    0,
 -179,    0,  -66,  -62,    0,    0,    0,    0,  233,  241,
    0,   50,    0,    0,   26, 1097,  249, 1651,    0, 1102,
    0,    0,    0,  -34, 1439,    0, 1460, 1481,    0,    0,
    0,    0, 1502,    0,    0, 1524,    0,    0, -196,  972,
  -28,  -28,  -28,  -28,   87,  -28,  -28,    0,   55,    0,
    0,    0,    0,  405,  549,  915,   74,    0,    0,  941,
    0,  255,    0,    0,  256,    0, 1115,  262,  -57,    0,
    0,    0,  -28,  267,    0,    0, 1220,  265,    0,    0,
    0,    0, 1545,  274,  279,  232,  589,    0,    0,  197,
    0,    0, 1567,    0, 1588,    0,    0,    0, 1609, 1199,
  280, 1199,  307,  -72,   84,   84,   87,   87,    0,    0,
 -232,    0,    0,  100,  549, 1019, 1048,    0,    0,    0,
  309,    0,  311,  295,  319,    0,   87,   -5,    0,  105,
  993,    0, 1673,    0,  326,    0, 1120,  330,    0,    0,
    0, 1630,    0,  111,    0,  117,    0, 1136,  334,  156,
 -232,    0,    0, 1269,    0,    0,    0,    0,  336,    0,
  -28,  341,  342, 1220,  346,  -49,    0,    0,    0,    0,
 1686,    0,    0,  348,  333,  372,    0,  374,  375,  376,
  168,    0,    0,    0,    0,    0,   87,    0,    0,  176,
    0, 1157,  378,    0,    0,    0,  398,    0,    0,    0,
    0,  399,  400,  403,  194,    0,  152,    0,  185,    0,
    0,    0,  418,  426,  196,    0,  427,  430, 1220,  589,
  210,  432, 1220,  438,  212,    0,  439,    0,
};
final static short yyrindex[] = {                       484,
   18,    0,    0,    0,  188,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,  215,    0,  344,    0,    0,  368,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,  164,  751,    0,
    0,    0,    0,    0,    0,    0,  -41,    0,  489,    0,
    0,    0,    0,    0,    0,    0,  414,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,  134,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,  247,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,  237,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,  -37,  455,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,  497,    0,
    0,  532,    0,    0,    0,    0,    0,    0,    0,    0,
  782,    0,  814,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,  457,  461,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0, 1516,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,  610,    0,    0,    0,    0,    0,    0,
    0,    0,  -35,  837,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,  298,  321,  462,  464,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,  106,    0,    0,    0,
    0,    0,  -11,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,  652,    0,
    0,    0,    0,    0,    0,    0,    0,    0,  673,    0,
    0,  694,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,  201,    0,    0,    0,
    0,    0,  236,    0,    0,    0,  234,    0,    0,    0,
    0,  723,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,  864,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,
};
final static short yygindex[] = {                         0,
  509,   28,    1,  688,   16,   41,   69,    0,    0,  -20,
  456,  -70,    3,    0,    0,   48,  -45,  977,    0,    0,
  480,  381,    0,  230,  533,    0,   46,    0,    0,  594,
    0,    0,  789,  436,   54,  -17,  615,  -63,  556,    0,
  -12,  297, -148,  389,  451,  174,  172,
};
final static int YYTABLESIZE=1958;
static short yytable[];
static { yytable();}
static void yytable(){
yytable = new short[]{                         39,
   16,  125,   69,  127,   81,  217,  167,   48,  223,   76,
   43,   40,   16,  110,   16,   18,   35,  229,   31,  116,
  102,  103,   18,  135,  101,  105,  107,   18,   82,   18,
   72,  131,   79,  132,  185,  292,   97,  136,  291,   66,
   19,   61,    9,   10,   11,  121,   99,   19,  152,  157,
  189,  129,   19,  189,   19,  161,  166,  114,  200,   16,
   18,  182,  201,  114,  230,  231,   18,  256,   20,  151,
   72,  153,   79,  192,   18,   20,  272,   72,  114,   79,
   20,  198,   20,  132,    4,   19,   61,  167,   48,  179,
   62,   19,  171,  205,  172,  242,   64,  143,  241,   19,
  208,   36,   35,   18,  215,  133,  134,  140,  142,  144,
  139,   63,  146,   20,   35,  136,  136,  249,   98,   20,
  141,   35,  189,  129,  145,  176,  189,   20,   19,  171,
  177,  172,  145,  199,  220,  169,  161,  225,   18,  175,
  282,  100,  161,  281,   41,  161,  109,  108,  211,  109,
  212,  254,  106,  115,    4,  219,   20,  221,   72,  137,
   79,   42,    4,   19,  109,    9,   10,   11,  184,  168,
   48,  268,    4,  199,  199,  199,  199,  199,  199,  170,
  199,  136,  189,  189,  199,   18,  152,   26,  278,  279,
  181,   20,  263,  199,  199,  199,  313,    4,  180,  281,
  182,    4,  161,   72,  161,  183,    4,  151,  161,  153,
   19,  322,  323,  219,  100,  221,   38,  234,  237,  238,
  189,  305,  132,   69,   69,   81,   81,   26,   83,   33,
   48,  283,   48,   69,  126,   81,  216,  101,   20,  119,
  152,  110,  299,  118,  110,   18,  195,   18,  257,   82,
   82,  161,   65,   65,  100,    9,   10,   11,  199,   82,
  194,  151,  197,  153,  178,  300,  196,  283,  314,  195,
   19,  267,   19,  152,  182,  266,  202,  274,   48,  276,
  299,  204,  206,  171,  203,  172,  195,  195,   90,  195,
  195,  195,  209,   18,  151,  251,  153,  193,   20,  252,
   20,  152,  255,  300,  352,  261,  195,  195,  195,   47,
  259,  101,   26,   46,   32,   33,   34,  264,   19,  265,
  194,  269,  151,  275,  153,  311,   83,   33,  152,    9,
   10,   11,  152,   83,   33,  289,  317,  193,  193,  100,
  193,  193,  193,   97,  235,  236,   20,  239,  240,  151,
  277,  153,  287,  151,  288,  153,  101,  193,  193,  193,
  194,  194,  290,  194,  194,  194,  293,  102,  101,  303,
  306,  195,  308,  327,    9,   10,   11,  312,  309,  316,
  194,  194,  194,   97,  318,  319,    9,   10,   11,  321,
  199,  326,   45,  199,  199,  199,  199,  199,  199,  199,
  199,  199,  199,  199,  199,  199,  199,  102,  199,  199,
  199,  344,  101,  121,   53,  328,   54,  329,  330,  331,
   90,  336,  193,   90,   72,   72,   90,   90,   90,  332,
    9,   10,   11,   90,   72,   90,   90,  333,   90,   90,
   90,  338,  340,  341,   26,  194,  342,   26,   26,   26,
   26,   26,   26,  121,   37,  343,  345,   26,   26,   26,
   26,  346,   26,   26,   26,  347,  348,  349,   97,  350,
  353,  100,  354,  357,  100,  100,  100,  100,  100,  100,
  101,  356,  358,    5,  100,  100,  100,  100,    3,  100,
  100,  100,  102,  182,   37,   61,  107,  184,    9,   10,
   11,  185,  186,  195,  183,   39,  195,  195,  195,  195,
  195,  195,  195,  195,  195,  195,  195,  195,  195,  195,
   59,  195,  195,  195,  123,  158,    1,  245,  213,    2,
  325,  112,    3,    4,    5,   37,  107,  280,  121,    6,
   44,    7,    8,  174,    9,   10,   11,  187,   52,    0,
    0,  227,    0,    0,  193,    4,    0,  193,  193,  193,
  193,  193,  193,  193,  193,  193,  193,  193,  193,  193,
  193,  112,  193,  193,  193,    0,    0,  194,    0,   37,
  194,  194,  194,  194,  194,  194,  194,  194,  194,  194,
  194,  194,  194,  194,    0,  194,  194,  194,  117,    0,
   97,    0,    0,   97,   97,   97,   97,   97,   97,  106,
    0,  227,    0,   97,   97,   97,   97,  227,   97,   97,
   97,  107,   57,    0,  102,    0,    0,  102,  102,  102,
  102,  102,  102,   35,  111,    0,  111,  102,  102,  102,
  102,    0,  102,  102,  102,    0,    0,    0,   90,  106,
   89,   52,    0,    0,    0,    0,  112,    0,    0,    0,
  227,  108,    0,    0,    0,  186,   57,   57,    4,   57,
  121,  190,   28,  121,  121,  121,  121,  121,  121,    9,
   10,   11,    0,  121,  121,  121,  121,   17,  121,  121,
  121,   52,    0,  108,    0,    0,    0,    0,  188,   17,
    0,   17,    0,  111,    0,    0,    0,  111,    0,  111,
  111,   37,   28,    0,   37,   37,   37,   37,   37,   37,
    0,    0,   51,    0,   37,   37,   37,   37,    0,   37,
   37,   37,  122,  108,  106,    0,    0,    0,  130,  246,
  247,    0,    0,    0,    0,   57,   17,   57,   57,    0,
    0,    0,    0,  107,    0,    0,  107,  107,  107,  107,
  107,  107,   51,    0,    0,    0,  107,  107,  107,  107,
    0,  107,  107,  107,    0,    0,   52,  111,  111,  111,
    0,    0,    0,  111,    0,    0,    0,    0,  112,    0,
   67,  112,  112,  112,  112,  112,  112,   28,    0,    0,
  284,  112,  112,  112,  112,  108,  112,  112,  112,    0,
  130,    0,    4,   57,    0,    0,    0,    0,  108,    0,
    0,   75,    0,    9,   10,   11,  104,  104,    0,  112,
  108,  112,    0,    0,    0,    0,    0,    4,  111,  111,
  111,    0,    0,    0,    0,   83,   33,   51,    9,   10,
   11,    0,    0,   73,   84,   85,   86,   87,    0,    0,
    0,    0,    0,    0,    0,    0,  106,    0,    0,  106,
  106,  106,  106,  106,  106,   88,   48,  111,    0,  106,
  106,  106,  106,    0,  106,  106,  106,    0,    0,    0,
  104,    0,    0,    0,    0,    0,    0,    0,  112,    0,
    0,    0,  112,   60,  112,  112,   94,    0,   52,    0,
    0,   52,   52,   52,   52,   52,   52,    0,    0,    0,
    0,   52,   52,   52,   52,    0,   52,   52,   52,   28,
    0,    0,   28,   28,   28,   28,   28,   28,   92,    0,
    0,    0,   28,   28,   28,   28,    0,   28,   28,   28,
  108,    0,    0,  108,  108,  108,  108,  108,  108,    0,
    0,   48,    0,  108,  108,  108,  108,  104,  108,  108,
  108,    0,  112,  112,  112,    0,  150,    0,  112,   51,
  149,    0,   51,   51,   51,   51,   51,   51,   60,    0,
    0,    0,   51,   51,   51,   51,    0,   51,   51,   51,
  171,    0,  172,    0,    0,    0,    0,   88,    0,    0,
   88,   67,   67,   88,   88,   88,    0,   90,  173,   89,
   88,   67,   88,   88,    0,   88,   88,   88,    0,  104,
    0,    0,  104,  112,  112,  112,  191,    0,   94,  248,
    0,   94,   75,   75,   94,   94,   94,    0,    0,    0,
    0,   94,   75,   94,   94,    0,   94,   94,   94,  148,
   88,    0,    0,    0,   35,  250,    0,    0,  104,  104,
   92,    0,  112,   92,   73,   73,   92,   92,   92,   90,
    0,   89,    0,   92,   73,   92,   92,    0,   92,   92,
   92,    0,    0,   48,   45,    0,   48,   48,   48,   48,
   48,   48,    0,    0,    0,    0,   48,   48,   48,   48,
  124,   48,   48,   48,   35,  148,    0,    0,    0,    0,
   60,    0,    0,   60,   60,   60,   60,   60,   60,   90,
    0,   89,    0,   60,   60,   60,   60,  207,   60,   60,
   60,   35,  214,  285,    0,    0,   35,    0,    0,    0,
    0,    0,    0,    0,    0,  253,   90,    0,   89,   35,
  304,   90,    0,   89,   35,   70,    0,   71,  108,    0,
    0,  108,  286,    0,   90,    4,   89,    0,    4,   90,
    0,   89,    0,  260,    0,    0,    9,   10,   11,    9,
   10,   11,    0,    1,    0,    0,   68,  108,    0,    3,
    4,    5,    0,    0,    4,    0,    6,  147,   69,    8,
    0,    9,   10,   11,    0,    9,   10,   11,    0,    0,
    0,    0,    0,   84,   85,   86,   87,    0,    1,    0,
    0,    2,  232,  233,    3,    4,    5,  296,    0,    0,
    0,    6,    0,    7,    8,    0,    9,   10,   11,    1,
    0,    0,   68,  294,  295,    3,    4,    5,   45,    0,
    0,    0,    6,    0,   69,    8,    0,    9,   10,   11,
  320,    0,    0,    0,    0,  108,   83,   33,    0,  148,
    0,    0,    4,    0,    0,   84,   85,   86,   87,    0,
    0,    0,    0,    9,   10,   11,    0,    0,  335,    1,
   12,    0,   68,    0,  108,    3,    4,    5,    0,    0,
    0,    4,    6,    0,   69,    8,    0,    9,   10,   11,
    0,   45,    9,   10,   11,  351,   83,   33,    0,  355,
    0,    0,    0,    0,    0,   84,   85,   86,   87,    0,
    0,    0,  148,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,   83,   33,    0,    0,    0,   83,   33,
    0,    0,   84,   85,   86,   87,   58,   84,   85,   86,
   87,   83,   33,    0,    0,    0,   83,   33,    0,    0,
   84,   85,   86,   87,    0,   84,   85,   86,   87,   60,
    0,    0,    1,  315,    0,    2,    0,  310,    3,    4,
    5,    0,    0,    0,    0,    6,    0,    7,    8,    0,
    9,   10,   11,    1,  120,    0,   68,    0,  334,    3,
    4,    5,    0,    0,    0,    0,    6,    0,   69,    8,
    0,    9,   10,   11,    1,  128,    0,    2,    0,    0,
    3,    4,    5,    0,    0,    0,    0,    6,    0,    7,
    8,    0,    9,   10,   11,    1,  138,    0,    2,    0,
    0,    3,    4,    5,    0,    0,    0,    0,    6,    0,
    7,    8,    0,    9,   10,   11,    1,  156,    0,   68,
    0,    0,    3,    4,    5,    0,    0,    0,    0,    6,
    0,   69,    8,    0,    9,   10,   11,    0,    1,  159,
    0,    2,    0,    0,    3,    4,    5,    0,    0,    0,
    0,    6,    0,    7,    8,    0,    9,   10,   11,    0,
  165,    1,    0,    0,    2,  108,    0,    3,    4,    5,
    0,    0,    4,    0,    6,    0,    7,    8,    0,    9,
   10,   11,  193,    9,   10,   11,    1,    0,    0,    2,
    0,    0,    3,    4,    5,    0,    0,    0,    0,    6,
    0,    7,    8,  218,    9,   10,   11,    1,    0,    0,
    2,    0,    0,    3,    4,    5,    0,    0,    0,    0,
    6,    0,    7,    8,  222,    9,   10,   11,    1,    0,
    0,    2,    0,    0,    3,    4,    5,    0,    0,    0,
    0,    6,    0,    7,    8,  224,    9,   10,   11,    1,
    0,    0,   68,    0,    0,    3,    4,    5,    0,    0,
    0,    0,    6,    0,   69,    8,  226,    9,   10,   11,
    0,    1,    0,    0,   68,    0,    0,    3,    4,    5,
  134,    0,    0,    0,    6,    0,   69,    8,  228,    9,
   10,   11,    1,    0,    0,   68,    0,    0,    3,    4,
    5,    0,    0,    0,    0,    6,    0,   69,    8,  262,
    9,   10,   11,    0,    1,    0,    0,    2,    0,    0,
    3,    4,    5,    0,    0,    0,    0,    6,    0,    7,
    8,  270,    9,   10,   11,    1,    0,    0,   68,    0,
    0,    3,    4,    5,    0,    0,    0,    0,    6,    0,
   69,    8,  271,    9,   10,   11,    1,    0,    0,   68,
    0,    0,    3,    4,    5,    0,    0,    0,    0,    6,
    0,   69,    8,  273,    9,   10,   11,    1,    0,    0,
   68,    0,    0,    3,    4,    5,    0,    0,    0,    0,
    6,    0,   69,    8,  307,    9,   10,   11,    1,    0,
    0,   68,    0,    0,    3,    4,    5,    0,    0,    0,
    0,    6,  134,   69,    8,  210,    9,   10,   11,  134,
    1,    0,    0,   68,    0,    0,    3,    4,    5,    0,
  134,  134,  134,    6,    0,   69,    8,  298,    9,   10,
   11,    1,    0,    0,   68,    0,    0,    3,    4,    5,
  324,    0,    0,    0,    6,    0,   69,    8,    0,    9,
   10,   11,    0,    1,    0,    0,   68,    0,    0,    3,
    4,    5,    0,    0,    0,    0,    6,    0,   69,    8,
    0,    9,   10,   11,    1,    0,    0,   68,    0,    0,
    3,    4,    5,    0,    0,    0,    0,    6,    0,   69,
    8,    0,    9,   10,   11,    1,    0,    0,   68,    0,
    0,    3,    4,    5,    0,    0,    0,    0,    6,    0,
   69,    8,    0,    9,   10,   11,    1,    0,    0,   68,
    0,    0,    3,    4,    5,    0,    0,    0,    0,    6,
    0,   69,    8,    0,    9,   10,   11,    1,    0,    0,
   68,    0,    0,    3,    4,    0,    0,    0,    0,    0,
    6,    0,   69,    8,    0,    9,   10,   11,    0,  297,
    0,    0,   68,    0,    0,    3,    0,    5,    0,    0,
    0,    0,  297,    0,   69,   68,    0,    0,    3,    0,
    5,    0,    0,    0,    0,    0,    0,   69,
};
}
static short yycheck[];
static { yycheck(); }
static void yycheck() {
yycheck = new short[] {                         40,
    0,   47,   40,   40,   40,   40,   77,    7,  157,   30,
  123,   44,   12,  123,   14,    0,   45,  166,   40,  123,
   40,   41,    7,  125,  257,   38,   39,   12,   40,   14,
   30,  123,   30,  125,  123,   41,   44,   55,   44,   44,
    0,   14,  275,  276,  277,   45,  258,    7,   69,   70,
  114,   51,   12,  117,   14,   76,   77,   40,  125,   59,
   45,   44,  125,   46,  261,  262,   51,  125,    0,   69,
   70,   69,   70,  119,   59,    7,  225,   77,   61,   77,
   12,  127,   14,  125,  264,   45,   59,  158,   88,  102,
   40,   51,   43,   44,   45,   41,   46,  257,   44,   59,
  146,   44,   45,   88,  150,   52,   53,   62,   63,   44,
   41,   61,   40,   45,   45,  133,  134,   44,   44,   51,
   44,   45,  186,  123,   59,   42,  190,   59,   88,   43,
   47,   45,   59,    0,  155,   88,  157,  158,  123,   94,
   41,   44,  163,   44,  257,  166,   41,  257,  148,   44,
  148,  197,   41,  257,  264,  155,   88,  155,  158,   44,
  158,  274,  264,  123,  274,  275,  276,  277,  257,  278,
  170,  217,  264,   40,   41,   42,   43,   44,   45,   41,
   47,  199,  246,  247,  131,  170,  207,    0,  261,  262,
   41,  123,  213,   60,   61,   62,   41,  264,  257,   44,
   41,  264,  223,   40,  225,   44,  264,  207,  229,  207,
  170,  261,  262,  213,    0,  213,  257,  170,  173,  174,
  284,  267,  264,  261,  262,  261,  262,   40,  257,  258,
  230,  244,  232,  271,  271,  271,  271,  257,  170,   40,
  261,   41,  263,   44,   44,  230,    0,  232,  203,  261,
  262,  272,  257,  257,   40,  275,  276,  277,  125,  271,
   44,  261,   40,  261,   41,  263,   44,  280,  281,   41,
  230,   40,  232,  294,  257,   44,   44,  230,  278,  232,
  301,   41,  257,   43,   44,   45,   40,   41,  125,   43,
   44,   45,   44,  278,  294,   41,  294,    0,  230,   44,
  232,  322,   41,  301,  350,   41,   60,   61,   62,   40,
   44,  257,  125,   44,  257,  258,  259,   44,  278,   41,
    0,  125,  322,   44,  322,  278,  257,  258,  349,  275,
  276,  277,  353,  257,  258,   41,  291,   40,   41,  125,
   43,   44,   45,    0,  171,  172,  278,  176,  177,  349,
   44,  349,   44,  353,   44,  353,  257,   60,   61,   62,
   40,   41,   44,   43,   44,   45,  262,    0,  257,   44,
   41,  125,  262,   41,  275,  276,  277,   44,  262,   44,
   60,   61,   62,   40,   44,   44,  275,  276,  277,   44,
  257,   44,  123,  260,  261,  262,  263,  264,  265,  266,
  267,  268,  269,  270,  271,  272,  273,   40,  275,  276,
  277,  260,  257,    0,  123,   44,  125,   44,   44,   44,
  257,   44,  125,  260,  261,  262,  263,  264,  265,  262,
  275,  276,  277,  270,  271,  272,  273,  262,  275,  276,
  277,   44,   44,   44,  257,  125,   44,  260,  261,  262,
  263,  264,  265,   40,    0,  262,  272,  270,  271,  272,
  273,   44,  275,  276,  277,   40,  271,   41,  125,   40,
  261,  257,   41,  262,  260,  261,  262,  263,  264,  265,
  257,   44,   44,    0,  270,  271,  272,  273,    0,  275,
  276,  277,  125,  257,   40,  260,    0,   41,  275,  276,
  277,   41,   41,  257,   41,  272,  260,  261,  262,  263,
  264,  265,  266,  267,  268,  269,  270,  271,  272,  273,
   12,  275,  276,  277,   45,   70,  257,  123,  148,  260,
  301,    0,  263,  264,  265,    3,   40,  241,  125,  270,
  271,  272,  273,   93,  275,  276,  277,  112,  257,   -1,
   -1,  163,   -1,   -1,  257,  264,   -1,  260,  261,  262,
  263,  264,  265,  266,  267,  268,  269,  270,  271,  272,
  273,   40,  275,  276,  277,   -1,   -1,  257,   -1,  125,
  260,  261,  262,  263,  264,  265,  266,  267,  268,  269,
  270,  271,  272,  273,   -1,  275,  276,  277,   43,   -1,
  257,   -1,   -1,  260,  261,  262,  263,  264,  265,    0,
   -1,  223,   -1,  270,  271,  272,  273,  229,  275,  276,
  277,  125,    8,   -1,  257,   -1,   -1,  260,  261,  262,
  263,  264,  265,   45,   41,   -1,   43,  270,  271,  272,
  273,   -1,  275,  276,  277,   -1,   -1,   -1,   60,   40,
   62,    0,   -1,   -1,   -1,   -1,  125,   -1,   -1,   -1,
  272,  257,   -1,   -1,   -1,  110,   52,   53,  264,   55,
  257,  116,    0,  260,  261,  262,  263,  264,  265,  275,
  276,  277,   -1,  270,  271,  272,  273,    0,  275,  276,
  277,   40,   -1,    0,   -1,   -1,   -1,   -1,  125,   12,
   -1,   14,   -1,  110,   -1,   -1,   -1,  114,   -1,  116,
  117,  257,   40,   -1,  260,  261,  262,  263,  264,  265,
   -1,   -1,    0,   -1,  270,  271,  272,  273,   -1,  275,
  276,  277,   45,   40,  125,   -1,   -1,   -1,   51,  184,
  185,   -1,   -1,   -1,   -1,  131,   59,  133,  134,   -1,
   -1,   -1,   -1,  257,   -1,   -1,  260,  261,  262,  263,
  264,  265,   40,   -1,   -1,   -1,  270,  271,  272,  273,
   -1,  275,  276,  277,   -1,   -1,  125,  184,  185,  186,
   -1,   -1,   -1,  190,   -1,   -1,   -1,   -1,  257,   -1,
   40,  260,  261,  262,  263,  264,  265,  125,   -1,   -1,
  245,  270,  271,  272,  273,  257,  275,  276,  277,   -1,
  123,   -1,  264,  199,   -1,   -1,   -1,   -1,  125,   -1,
   -1,   40,   -1,  275,  276,  277,   38,   39,   -1,   41,
  257,   43,   -1,   -1,   -1,   -1,   -1,  264,  245,  246,
  247,   -1,   -1,   -1,   -1,  257,  258,  125,  275,  276,
  277,   -1,   -1,   40,  266,  267,  268,  269,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,  257,   -1,   -1,  260,
  261,  262,  263,  264,  265,  125,   40,  284,   -1,  270,
  271,  272,  273,   -1,  275,  276,  277,   -1,   -1,   -1,
  102,   -1,   -1,   -1,   -1,   -1,   -1,   -1,  110,   -1,
   -1,   -1,  114,   40,  116,  117,  125,   -1,  257,   -1,
   -1,  260,  261,  262,  263,  264,  265,   -1,   -1,   -1,
   -1,  270,  271,  272,  273,   -1,  275,  276,  277,  257,
   -1,   -1,  260,  261,  262,  263,  264,  265,  125,   -1,
   -1,   -1,  270,  271,  272,  273,   -1,  275,  276,  277,
  257,   -1,   -1,  260,  261,  262,  263,  264,  265,   -1,
   -1,  125,   -1,  270,  271,  272,  273,  179,  275,  276,
  277,   -1,  184,  185,  186,   -1,   40,   -1,  190,  257,
   44,   -1,  260,  261,  262,  263,  264,  265,  125,   -1,
   -1,   -1,  270,  271,  272,  273,   -1,  275,  276,  277,
   43,   -1,   45,   -1,   -1,   -1,   -1,  257,   -1,   -1,
  260,  261,  262,  263,  264,  265,   -1,   60,   61,   62,
  270,  271,  272,  273,   -1,  275,  276,  277,   -1,  241,
   -1,   -1,  244,  245,  246,  247,  125,   -1,  257,  125,
   -1,  260,  261,  262,  263,  264,  265,   -1,   -1,   -1,
   -1,  270,  271,  272,  273,   -1,  275,  276,  277,  123,
   41,   -1,   -1,   -1,   45,  125,   -1,   -1,  280,  281,
  257,   -1,  284,  260,  261,  262,  263,  264,  265,   60,
   -1,   62,   -1,  270,  271,  272,  273,   -1,  275,  276,
  277,   -1,   -1,  257,  123,   -1,  260,  261,  262,  263,
  264,  265,   -1,   -1,   -1,   -1,  270,  271,  272,  273,
   41,  275,  276,  277,   45,  123,   -1,   -1,   -1,   -1,
  257,   -1,   -1,  260,  261,  262,  263,  264,  265,   60,
   -1,   62,   -1,  270,  271,  272,  273,   41,  275,  276,
  277,   45,   41,  125,   -1,   -1,   45,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   41,   60,   -1,   62,   45,
   41,   60,   -1,   62,   45,  123,   -1,  125,  257,   -1,
   -1,  257,  125,   -1,   60,  264,   62,   -1,  264,   60,
   -1,   62,   -1,  207,   -1,   -1,  275,  276,  277,  275,
  276,  277,   -1,  257,   -1,   -1,  260,  257,   -1,  263,
  264,  265,   -1,   -1,  264,   -1,  270,  271,  272,  273,
   -1,  275,  276,  277,   -1,  275,  276,  277,   -1,   -1,
   -1,   -1,   -1,  266,  267,  268,  269,   -1,  257,   -1,
   -1,  260,  261,  262,  263,  264,  265,  261,   -1,   -1,
   -1,  270,   -1,  272,  273,   -1,  275,  276,  277,  257,
   -1,   -1,  260,  261,  262,  263,  264,  265,  123,   -1,
   -1,   -1,  270,   -1,  272,  273,   -1,  275,  276,  277,
  294,   -1,   -1,   -1,   -1,  257,  257,  258,   -1,  123,
   -1,   -1,  264,   -1,   -1,  266,  267,  268,  269,   -1,
   -1,   -1,   -1,  275,  276,  277,   -1,   -1,  322,  257,
  123,   -1,  260,   -1,  257,  263,  264,  265,   -1,   -1,
   -1,  264,  270,   -1,  272,  273,   -1,  275,  276,  277,
   -1,  123,  275,  276,  277,  349,  257,  258,   -1,  353,
   -1,   -1,   -1,   -1,   -1,  266,  267,  268,  269,   -1,
   -1,   -1,  123,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,  257,  258,   -1,   -1,   -1,  257,  258,
   -1,   -1,  266,  267,  268,  269,  125,  266,  267,  268,
  269,  257,  258,   -1,   -1,   -1,  257,  258,   -1,   -1,
  266,  267,  268,  269,   -1,  266,  267,  268,  269,  125,
   -1,   -1,  257,  125,   -1,  260,   -1,  262,  263,  264,
  265,   -1,   -1,   -1,   -1,  270,   -1,  272,  273,   -1,
  275,  276,  277,  257,  125,   -1,  260,   -1,  262,  263,
  264,  265,   -1,   -1,   -1,   -1,  270,   -1,  272,  273,
   -1,  275,  276,  277,  257,  125,   -1,  260,   -1,   -1,
  263,  264,  265,   -1,   -1,   -1,   -1,  270,   -1,  272,
  273,   -1,  275,  276,  277,  257,  125,   -1,  260,   -1,
   -1,  263,  264,  265,   -1,   -1,   -1,   -1,  270,   -1,
  272,  273,   -1,  275,  276,  277,  257,  125,   -1,  260,
   -1,   -1,  263,  264,  265,   -1,   -1,   -1,   -1,  270,
   -1,  272,  273,   -1,  275,  276,  277,   -1,  257,  125,
   -1,  260,   -1,   -1,  263,  264,  265,   -1,   -1,   -1,
   -1,  270,   -1,  272,  273,   -1,  275,  276,  277,   -1,
  125,  257,   -1,   -1,  260,  257,   -1,  263,  264,  265,
   -1,   -1,  264,   -1,  270,   -1,  272,  273,   -1,  275,
  276,  277,  125,  275,  276,  277,  257,   -1,   -1,  260,
   -1,   -1,  263,  264,  265,   -1,   -1,   -1,   -1,  270,
   -1,  272,  273,  125,  275,  276,  277,  257,   -1,   -1,
  260,   -1,   -1,  263,  264,  265,   -1,   -1,   -1,   -1,
  270,   -1,  272,  273,  125,  275,  276,  277,  257,   -1,
   -1,  260,   -1,   -1,  263,  264,  265,   -1,   -1,   -1,
   -1,  270,   -1,  272,  273,  125,  275,  276,  277,  257,
   -1,   -1,  260,   -1,   -1,  263,  264,  265,   -1,   -1,
   -1,   -1,  270,   -1,  272,  273,  125,  275,  276,  277,
   -1,  257,   -1,   -1,  260,   -1,   -1,  263,  264,  265,
  125,   -1,   -1,   -1,  270,   -1,  272,  273,  125,  275,
  276,  277,  257,   -1,   -1,  260,   -1,   -1,  263,  264,
  265,   -1,   -1,   -1,   -1,  270,   -1,  272,  273,  125,
  275,  276,  277,   -1,  257,   -1,   -1,  260,   -1,   -1,
  263,  264,  265,   -1,   -1,   -1,   -1,  270,   -1,  272,
  273,  125,  275,  276,  277,  257,   -1,   -1,  260,   -1,
   -1,  263,  264,  265,   -1,   -1,   -1,   -1,  270,   -1,
  272,  273,  125,  275,  276,  277,  257,   -1,   -1,  260,
   -1,   -1,  263,  264,  265,   -1,   -1,   -1,   -1,  270,
   -1,  272,  273,  125,  275,  276,  277,  257,   -1,   -1,
  260,   -1,   -1,  263,  264,  265,   -1,   -1,   -1,   -1,
  270,   -1,  272,  273,  125,  275,  276,  277,  257,   -1,
   -1,  260,   -1,   -1,  263,  264,  265,   -1,   -1,   -1,
   -1,  270,  257,  272,  273,  125,  275,  276,  277,  264,
  257,   -1,   -1,  260,   -1,   -1,  263,  264,  265,   -1,
  275,  276,  277,  270,   -1,  272,  273,  125,  275,  276,
  277,  257,   -1,   -1,  260,   -1,   -1,  263,  264,  265,
  125,   -1,   -1,   -1,  270,   -1,  272,  273,   -1,  275,
  276,  277,   -1,  257,   -1,   -1,  260,   -1,   -1,  263,
  264,  265,   -1,   -1,   -1,   -1,  270,   -1,  272,  273,
   -1,  275,  276,  277,  257,   -1,   -1,  260,   -1,   -1,
  263,  264,  265,   -1,   -1,   -1,   -1,  270,   -1,  272,
  273,   -1,  275,  276,  277,  257,   -1,   -1,  260,   -1,
   -1,  263,  264,  265,   -1,   -1,   -1,   -1,  270,   -1,
  272,  273,   -1,  275,  276,  277,  257,   -1,   -1,  260,
   -1,   -1,  263,  264,  265,   -1,   -1,   -1,   -1,  270,
   -1,  272,  273,   -1,  275,  276,  277,  257,   -1,   -1,
  260,   -1,   -1,  263,  264,   -1,   -1,   -1,   -1,   -1,
  270,   -1,  272,  273,   -1,  275,  276,  277,   -1,  257,
   -1,   -1,  260,   -1,   -1,  263,   -1,  265,   -1,   -1,
   -1,   -1,  257,   -1,  272,  260,   -1,   -1,  263,   -1,
  265,   -1,   -1,   -1,   -1,   -1,   -1,  272,
};
}
final static short YYFINAL=13;
final static short YYMAXTOKEN=278;
final static String yyname[] = {
"end-of-file",null,null,null,null,null,null,null,null,null,null,null,null,null,
null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,
null,null,null,null,null,null,null,null,null,null,"'('","')'","'*'","'+'","','",
"'-'","'.'","'/'",null,null,null,null,null,null,null,null,null,null,null,"';'",
"'<'","'='","'>'",null,null,null,null,null,null,null,null,null,null,null,null,
null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,
null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,
null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,
"'{'",null,"'}'",null,null,null,null,null,null,null,null,null,null,null,null,
null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,
null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,
null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,
null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,
null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,
null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,
null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,
null,null,null,null,null,null,null,"ID","CTE","CADENA","IF","ELSE","ENDIF",
"PRINT","VOID","RETURN","COMP_MAYOR_IGUAL","COMP_MENOR_IGUAL","COMP_IGUAL",
"COMP_DISTINTO","CLASS","WHILE","DO","INTERFACE","IMPLEMENT","INT","ULONG",
"FLOAT","OPERADOR_MENOS",
};
final static String yyrule[] = {
"$accept : programa",
"programa : '{' sentencias '}'",
"programa : sentencias '}'",
"programa : '{' sentencias",
"programa : '{' '}'",
"programa :",
"sentencias : sentencia",
"sentencias : sentencias sentencia",
"sentencia : sentencia_declarativa",
"sentencia : sentencia_ejecutable",
"sentencia_ejecutable : sentencia_asignacion",
"sentencia_ejecutable : sentencia_invocacion_funcion",
"sentencia_ejecutable : sentencia_imprimir",
"sentencia_ejecutable : sentencia_seleccion",
"sentencia_ejecutable : sentencia_iterativa_do_while",
"sentencia_ejecutable : sentencia_return",
"sentencias_funcion : sentencia_funcion",
"sentencias_funcion : sentencias_funcion sentencia_funcion",
"sentencia_funcion : sentencia_declarativa",
"sentencia_funcion : sentencia_ejecutable_funcion",
"sentencia_ejecutable_funcion : sentencia_asignacion",
"sentencia_ejecutable_funcion : sentencia_invocacion_funcion",
"sentencia_ejecutable_funcion : sentencia_imprimir",
"sentencia_ejecutable_funcion : sentencia_seleccion_funcion",
"sentencia_ejecutable_funcion : sentencia_iterativa_do_while_funcion",
"sentencia_return : RETURN ','",
"sentencia_return : RETURN",
"sentencia_iterativa_do_while : DO bloque_sentencias_ejecutables WHILE '(' condicion ')' ','",
"sentencia_iterativa_do_while : DO bloque_sentencias_ejecutables WHILE '(' condicion ')'",
"sentencia_iterativa_do_while : DO WHILE '(' condicion ')' ','",
"sentencia_iterativa_do_while : DO bloque_sentencias_ejecutables WHILE '(' ')' ','",
"sentencia_iterativa_do_while : DO bloque_sentencias_ejecutables '(' condicion ')' ','",
"sentencia_iterativa_do_while : DO WHILE ','",
"sentencia_iterativa_do_while : DO bloque_sentencias_ejecutables WHILE ','",
"sentencia_iterativa_do_while : DO ','",
"sentencia_iterativa_do_while : DO '(' condicion ')' ','",
"sentencia_iterativa_do_while : DO '(' ')' ','",
"sentencia_iterativa_do_while : DO '(' ')'",
"sentencia_iterativa_do_while_funcion : DO bloque_sentencias_ejecutables_funcion WHILE '(' condicion ')' ','",
"$$1 :",
"sentencia_iterativa_do_while_funcion : DO bloque_sentencias_ejecutables_funcion WHILE '(' condicion ')' $$1 DO WHILE '(' condicion ')' ','",
"sentencia_iterativa_do_while_funcion : DO bloque_sentencias_ejecutables_funcion WHILE '(' ')' ','",
"sentencia_iterativa_do_while_funcion : DO bloque_sentencias_ejecutables_funcion '(' condicion ')' ','",
"sentencia_iterativa_do_while_funcion : DO WHILE ','",
"sentencia_iterativa_do_while_funcion : DO bloque_sentencias_ejecutables_funcion WHILE ','",
"sentencia_iterativa_do_while_funcion : DO ','",
"sentencia_iterativa_do_while_funcion : DO '(' condicion ')' ','",
"sentencia_iterativa_do_while_funcion : DO '(' ')' ','",
"sentencia_iterativa_do_while_funcion : DO '(' ')'",
"sentencia_seleccion : IF '(' condicion ')' bloque_sentencias_ejecutables ELSE bloque_sentencias_ejecutables ENDIF ','",
"sentencia_seleccion : IF '(' condicion ')' bloque_sentencias_ejecutables ENDIF ','",
"sentencia_seleccion : IF '(' condicion ')' bloque_sentencias_ejecutables ELSE bloque_sentencias_ejecutables ENDIF",
"sentencia_seleccion : IF '(' condicion ')' bloque_sentencias_ejecutables ENDIF",
"sentencia_seleccion : IF '(' ')' bloque_sentencias_ejecutables ELSE bloque_sentencias_ejecutables ENDIF ','",
"sentencia_seleccion : IF '(' ')' bloque_sentencias_ejecutables ENDIF ','",
"sentencia_seleccion : IF '(' condicion ')' ELSE bloque_sentencias_ejecutables ENDIF ','",
"sentencia_seleccion : IF '(' condicion ')' bloque_sentencias_ejecutables ELSE ENDIF ','",
"sentencia_seleccion : IF '(' condicion ')' ENDIF ','",
"sentencia_seleccion_funcion : IF '(' condicion ')' bloque_sentencias_ejecutables_funcion ELSE bloque_sentencias_ejecutables_funcion ENDIF ','",
"sentencia_seleccion_funcion : IF '(' condicion ')' bloque_sentencias_ejecutables_funcion ENDIF ','",
"sentencia_seleccion_funcion : IF '(' condicion ')' bloque_sentencias_ejecutables_funcion ELSE bloque_sentencias_ejecutables_funcion ENDIF",
"$$2 :",
"sentencia_seleccion_funcion : IF '(' condicion ')' bloque_sentencias_ejecutables_funcion ENDIF $$2 IF '(' ')' bloque_sentencias_ejecutables_funcion ELSE bloque_sentencias_ejecutables_funcion ENDIF ','",
"sentencia_seleccion_funcion : IF '(' ')' bloque_sentencias_ejecutables_funcion ENDIF ','",
"sentencia_seleccion_funcion : IF '(' condicion ')' ELSE bloque_sentencias_ejecutables_funcion ENDIF ','",
"sentencia_seleccion_funcion : IF '(' condicion ')' bloque_sentencias_ejecutables_funcion ELSE ENDIF ','",
"sentencia_seleccion_funcion : IF '(' condicion ')' ENDIF ','",
"bloque_sentencias_ejecutables : sentencia_ejecutable",
"bloque_sentencias_ejecutables : '{' sentencias_ejecutables '}'",
"bloque_sentencias_ejecutables : '{' sentencias_ejecutables",
"bloque_sentencias_ejecutables : sentencias_ejecutables '}'",
"bloque_sentencias_ejecutables : '{' '}'",
"bloque_sentencias_ejecutables : sentencia_declarativa",
"bloque_sentencias_ejecutables_funcion : sentencia_ejecutable_funcion",
"bloque_sentencias_ejecutables_funcion : sentencia_return",
"bloque_sentencias_ejecutables_funcion : sentencia_declarativa",
"bloque_sentencias_ejecutables_funcion : '{' sentencias_ejecutables_funcion '}'",
"bloque_sentencias_ejecutables_funcion : '{' sentencias_ejecutables_funcion sentencia_return '}'",
"bloque_sentencias_ejecutables_funcion : '{' sentencias_ejecutables_funcion sentencia_return sentencias_ejecutables_funcion_inalcanzable '}'",
"bloque_sentencias_ejecutables_funcion : sentencias_ejecutables_funcion '}'",
"bloque_sentencias_ejecutables_funcion : sentencias_ejecutables_funcion sentencia_return '}'",
"bloque_sentencias_ejecutables_funcion : '{' sentencias_ejecutables_funcion",
"bloque_sentencias_ejecutables_funcion : '{' sentencias_ejecutables_funcion sentencia_return",
"bloque_sentencias_ejecutables_funcion : '{' '}'",
"sentencias_ejecutables_funcion_inalcanzable : sentencia_ejecutable_funcion_inalcanzable",
"sentencias_ejecutables_funcion_inalcanzable : sentencias_ejecutables_funcion_inalcanzable sentencia_ejecutable_funcion_inalcanzable",
"sentencia_ejecutable_funcion_inalcanzable : sentencia_return",
"sentencia_ejecutable_funcion_inalcanzable : sentencia_ejecutable_funcion",
"sentencias_ejecutables : sentencia_ejecutable",
"sentencias_ejecutables : sentencias_ejecutables sentencia_ejecutable",
"sentencias_ejecutables : sentencia_declarativa",
"sentencias_ejecutables : sentencias_ejecutables sentencia_declarativa",
"sentencias_ejecutables_funcion : sentencia_ejecutable_funcion",
"sentencias_ejecutables_funcion : sentencias_ejecutables_funcion sentencia_ejecutable_funcion",
"sentencias_ejecutables_funcion : sentencia_declarativa",
"sentencias_ejecutables_funcion : sentencias_ejecutables_funcion sentencia_declarativa",
"sentencia_imprimir : PRINT CADENA ','",
"sentencia_imprimir : PRINT CADENA",
"sentencia_imprimir : PRINT ','",
"sentencia_imprimir : PRINT ID ','",
"sentencia_imprimir : PRINT ID",
"sentencia_imprimir : PRINT constante ','",
"sentencia_imprimir : PRINT constante",
"sentencia_invocacion_funcion : sentencia_objeto_identificador '(' expresion ')' ','",
"sentencia_invocacion_funcion : sentencia_objeto_identificador '(' ')' ','",
"sentencia_invocacion_funcion : sentencia_objeto_identificador '(' expresion ',' lista_expresiones_invocacion_funcion_exceso ')' ','",
"sentencia_invocacion_funcion : sentencia_objeto_identificador '(' expresion ')'",
"sentencia_invocacion_funcion : sentencia_objeto_identificador '(' ')'",
"sentencia_invocacion_funcion : sentencia_objeto_identificador '(' expresion ',' lista_expresiones_invocacion_funcion_exceso ')'",
"lista_expresiones_invocacion_funcion_exceso : expresion",
"lista_expresiones_invocacion_funcion_exceso : lista_expresiones_invocacion_funcion_exceso ',' expresion",
"sentencia_asignacion : sentencia_objeto_identificador '=' expresion ','",
"sentencia_asignacion : sentencia_objeto_identificador '=' expresion",
"sentencia_asignacion : sentencia_objeto_identificador '=' ','",
"sentencia_objeto_identificador : ID",
"sentencia_objeto_identificador : sentencia_objeto_identificador '.' ID",
"sentencia_declarativa : declaracion_variable",
"sentencia_declarativa : declaracion_funcion",
"sentencia_declarativa : declaracion_clase",
"sentencia_declarativa : declaracion_interfaz",
"declaracion_variable : tipo lista_de_variables ','",
"declaracion_variable : tipo lista_de_variables",
"declaracion_variable : tipo ','",
"declaracion_interfaz : INTERFACE ID '{' bloque_encabezado_funcion_declaracion_interfaz '}'",
"declaracion_interfaz : INTERFACE '{' bloque_encabezado_funcion_declaracion_interfaz '}'",
"declaracion_interfaz : INTERFACE bloque_encabezado_funcion_declaracion_interfaz '}'",
"declaracion_interfaz : INTERFACE '}'",
"declaracion_interfaz : INTERFACE ID bloque_encabezado_funcion_declaracion_interfaz '}'",
"declaracion_interfaz : INTERFACE ID '}'",
"bloque_encabezado_funcion_declaracion_interfaz : encabezado_funcion_declaracion_interfaz",
"bloque_encabezado_funcion_declaracion_interfaz : bloque_encabezado_funcion_declaracion_interfaz encabezado_funcion_declaracion_interfaz",
"encabezado_funcion_declaracion_interfaz : encabezado_funcion ','",
"encabezado_funcion_declaracion_interfaz : encabezado_funcion",
"sentencia_declarativa_clase : tipo lista_de_variables ','",
"sentencia_declarativa_clase : tipo lista_de_variables",
"sentencia_declarativa_clase : declaracion_funcion",
"sentencia_declarativa_clase : ID ','",
"declaracion_clase : CLASS ID '{' bloque_sentencias_declarativas_clase '}'",
"declaracion_clase : CLASS ID IMPLEMENT ID '{' bloque_sentencias_declarativas_clase '}'",
"declaracion_clase : CLASS '{' bloque_sentencias_declarativas_clase '}'",
"declaracion_clase : CLASS IMPLEMENT ID",
"declaracion_clase : CLASS ID IMPLEMENT '{' bloque_sentencias_declarativas_clase '}'",
"declaracion_clase : CLASS IMPLEMENT '{' bloque_sentencias_declarativas_clase '}'",
"declaracion_clase : CLASS ID bloque_sentencias_declarativas_clase '}'",
"declaracion_clase : CLASS ID IMPLEMENT ID bloque_sentencias_declarativas_clase '}'",
"bloque_sentencias_declarativas_clase : sentencia_declarativa_clase",
"bloque_sentencias_declarativas_clase : bloque_sentencias_declarativas_clase sentencia_declarativa_clase",
"declaracion_funcion : encabezado_funcion cuerpo_funcion",
"encabezado_funcion : VOID ID '(' parametro_funcion ')'",
"encabezado_funcion : VOID ID '(' ')'",
"encabezado_funcion : VOID ID '(' parametro_funcion ',' lista_parametros_funcion_exceso ')'",
"encabezado_funcion : VOID ID '(' parametro_funcion lista_parametros_funcion_exceso ')'",
"encabezado_funcion : VOID '(' parametro_funcion ')'",
"encabezado_funcion : VOID '(' ')'",
"encabezado_funcion : VOID ID parametro_funcion ')'",
"encabezado_funcion : VOID ID ')'",
"cuerpo_funcion : '{' sentencias_funcion sentencia_return '}'",
"cuerpo_funcion : '{' sentencia_return '}'",
"cuerpo_funcion : '{' sentencias_funcion sentencia_return sentencias_funcion_inalcanzable '}'",
"cuerpo_funcion : '{' sentencia_return sentencias_funcion_inalcanzable '}'",
"cuerpo_funcion : '{' sentencias_funcion '}'",
"cuerpo_funcion : '{' '}'",
"cuerpo_funcion : sentencias_funcion sentencia_return '}'",
"cuerpo_funcion : sentencia_return '}'",
"cuerpo_funcion : sentencias_funcion sentencia_return sentencias_funcion_inalcanzable '}'",
"cuerpo_funcion : sentencia_return sentencias_funcion_inalcanzable '}'",
"cuerpo_funcion : sentencias_funcion '}'",
"cuerpo_funcion : '}'",
"sentencias_funcion_inalcanzable : sentencia_funcion_inalcanzable",
"sentencias_funcion_inalcanzable : sentencias_funcion_inalcanzable sentencia_funcion_inalcanzable",
"sentencia_funcion_inalcanzable : sentencia_declarativa",
"sentencia_funcion_inalcanzable : sentencia_return",
"sentencia_funcion_inalcanzable : sentencia_ejecutable_funcion",
"lista_parametros_funcion_exceso : parametro_funcion",
"lista_parametros_funcion_exceso : lista_parametros_funcion_exceso ',' parametro_funcion",
"lista_parametros_funcion_exceso : lista_parametros_funcion_exceso parametro_funcion",
"parametro_funcion : tipo ID",
"lista_de_variables : ID",
"lista_de_variables : lista_de_variables ';' ID",
"tipo : INT",
"tipo : ULONG",
"tipo : FLOAT",
"tipo : ID",
"condicion : expresion comparador expresion",
"condicion : expresion comparador",
"condicion : comparador expresion",
"condicion : expresion '=' expresion",
"comparador : COMP_MAYOR_IGUAL",
"comparador : COMP_MENOR_IGUAL",
"comparador : COMP_IGUAL",
"comparador : COMP_DISTINTO",
"comparador : '>'",
"comparador : '<'",
"expresion : expresion '+' termino",
"expresion : expresion '-' termino",
"expresion : termino",
"termino : termino '*' factor",
"termino : termino '/' factor",
"termino : factor",
"factor : ID",
"factor : ID OPERADOR_MENOS",
"factor : constante",
"constante : CTE",
"constante : '-' CTE",
};

//#line 358 "./src/compilador/gramatica.y"

public static AnalizadorLexico lexico = null;
public static Logger logger = Logger.getInstance();
public static TablaDeSimbolos ts = TablaDeSimbolos.getInstance();
public static Parser parser = null;
public static int MAX_INT_VALUE = (int) (Math.pow(2, 15) - 1);

/** Chequea, para los INT, que el valor positivo no supere el valor maximo */
public void corregirConstantePositivaEntera(String constante) {
	if (constante.contains("_i")) {
		//se recibio un INT con signo positivo
		boolean exceptionOutOfRange = false;
		int cte = 0;
		String constanteValue = constante.toString().split("_")[0];

		try {
			cte = Integer.parseInt(constanteValue);
		} catch (NumberFormatException e) {
			exceptionOutOfRange = true;
		}

		if (cte > MAX_INT_VALUE || exceptionOutOfRange) {
			logger.logWarning("[Parser] Rango invalido para la constante: " + constante + ", se trunca al valor " + MAX_INT_VALUE + "_i");

			ts.swapLexemas(constante, MAX_INT_VALUE + "_i");
		}
	}
}

public void constanteConSigno(String constante) {
	/** Check de float negativos */
	if (constante.contains(".")) {
		String negConstante = "-"+constante;
		ts.swapLexemas(constante, negConstante);
	} else {

		if (constante.contains("_ul")) {
			//se recibio un ULONG con signo negativo
			logger.logWarning("[Parser] No se admiten ULONG con valores negativos: " + "-"+constante + ", se trunca a 0_ul");
		
			ts.swapLexemas(constante, "0_ul");
		} else {
			// se recibio un INT negativo
			String negConstante = "-"+constante;
			ts.swapLexemas(constante, negConstante);
		}
	}
}	

public int yylex() {
	return lexico.yylex(yylval);
}

public void yyerror(String error) {
	logger.logError(error);
}

public static void main(String[] args) {
	if (args.length == 0) {
		System.err.println("No se especifico ningun archivo de codigo");
	} else {
		String archivo_a_leer = args[0];
		System.out.println("Se va a leer archivo " + archivo_a_leer);
		
		FileReaderHelper fileHelper = new FileReaderHelper();
		
		boolean fileOpenSuccess = fileHelper.open(archivo_a_leer);
		
		if (fileOpenSuccess) {
			parser = new Parser();
			lexico = new AnalizadorLexico(fileHelper);
			
	        parser.run();
	
			String path = new File(archivo_a_leer).getAbsolutePath();
	        
	        Output out = new Output(path);
	        
	        out.saveFile("codigo-lexico.txt", logger.getLexico());
			out.saveFile("codigo-sintactico.txt", logger.getSintactico());
			out.saveFile("tabla-de-simbolos.txt", ts.print());
		}
	}
}
//#line 1006 "Parser.java"
//###############################################################
// method: yylexdebug : check lexer state
//###############################################################
void yylexdebug(int state,int ch)
{
String s=null;
  if (ch < 0) ch=0;
  if (ch <= YYMAXTOKEN) //check index bounds
     s = yyname[ch];    //now get it
  if (s==null)
    s = "illegal-symbol";
  debug("state "+state+", reading "+ch+" ("+s+")");
}





//The following are now global, to aid in error reporting
int yyn;       //next next thing to do
int yym;       //
int yystate;   //current parsing state from state table
String yys;    //current token string


//###############################################################
// method: yyparse : parse input and execute indicated items
//###############################################################
int yyparse()
{
boolean doaction;
  init_stacks();
  yynerrs = 0;
  yyerrflag = 0;
  yychar = -1;          //impossible char forces a read
  yystate=0;            //initial state
  state_push(yystate);  //save it
  val_push(yylval);     //save empty value
  while (true) //until parsing is done, either correctly, or w/error
    {
    doaction=true;
    if (yydebug) debug("loop"); 
    //#### NEXT ACTION (from reduction table)
    for (yyn=yydefred[yystate];yyn==0;yyn=yydefred[yystate])
      {
      if (yydebug) debug("yyn:"+yyn+"  state:"+yystate+"  yychar:"+yychar);
      if (yychar < 0)      //we want a char?
        {
        yychar = yylex();  //get next token
        if (yydebug) debug(" next yychar:"+yychar);
        //#### ERROR CHECK ####
        if (yychar < 0)    //it it didn't work/error
          {
          yychar = 0;      //change it to default string (no -1!)
          if (yydebug)
            yylexdebug(yystate,yychar);
          }
        }//yychar<0
      yyn = yysindex[yystate];  //get amount to shift by (shift index)
      if ((yyn != 0) && (yyn += yychar) >= 0 &&
          yyn <= YYTABLESIZE && yycheck[yyn] == yychar)
        {
        if (yydebug)
          debug("state "+yystate+", shifting to state "+yytable[yyn]);
        //#### NEXT STATE ####
        yystate = yytable[yyn];//we are in a new state
        state_push(yystate);   //save it
        val_push(yylval);      //push our lval as the input for next rule
        yychar = -1;           //since we have 'eaten' a token, say we need another
        if (yyerrflag > 0)     //have we recovered an error?
           --yyerrflag;        //give ourselves credit
        doaction=false;        //but don't process yet
        break;   //quit the yyn=0 loop
        }

    yyn = yyrindex[yystate];  //reduce
    if ((yyn !=0 ) && (yyn += yychar) >= 0 &&
            yyn <= YYTABLESIZE && yycheck[yyn] == yychar)
      {   //we reduced!
      if (yydebug) debug("reduce");
      yyn = yytable[yyn];
      doaction=true; //get ready to execute
      break;         //drop down to actions
      }
    else //ERROR RECOVERY
      {
      if (yyerrflag==0)
        {
        yyerror("syntax error");
        yynerrs++;
        }
      if (yyerrflag < 3) //low error count?
        {
        yyerrflag = 3;
        while (true)   //do until break
          {
          if (stateptr<0)   //check for under & overflow here
            {
            yyerror("stack underflow. aborting...");  //note lower case 's'
            return 1;
            }
          yyn = yysindex[state_peek(0)];
          if ((yyn != 0) && (yyn += YYERRCODE) >= 0 &&
                    yyn <= YYTABLESIZE && yycheck[yyn] == YYERRCODE)
            {
            if (yydebug)
              debug("state "+state_peek(0)+", error recovery shifting to state "+yytable[yyn]+" ");
            yystate = yytable[yyn];
            state_push(yystate);
            val_push(yylval);
            doaction=false;
            break;
            }
          else
            {
            if (yydebug)
              debug("error recovery discarding state "+state_peek(0)+" ");
            if (stateptr<0)   //check for under & overflow here
              {
              yyerror("Stack underflow. aborting...");  //capital 'S'
              return 1;
              }
            state_pop();
            val_pop();
            }
          }
        }
      else            //discard this token
        {
        if (yychar == 0)
          return 1; //yyabort
        if (yydebug)
          {
          yys = null;
          if (yychar <= YYMAXTOKEN) yys = yyname[yychar];
          if (yys == null) yys = "illegal-symbol";
          debug("state "+yystate+", error recovery discards token "+yychar+" ("+yys+")");
          }
        yychar = -1;  //read another
        }
      }//end error recovery
    }//yyn=0 loop
    if (!doaction)   //any reason not to proceed?
      continue;      //skip action
    yym = yylen[yyn];          //get count of terminals on rhs
    if (yydebug)
      debug("state "+yystate+", reducing "+yym+" by rule "+yyn+" ("+yyrule[yyn]+")");
    if (yym>0)                 //if count of rhs not 'nil'
      yyval = val_peek(yym-1); //get current semantic value
    yyval = dup_yyval(yyval); //duplicate yyval if ParserVal is used as semantic value
    switch(yyn)
      {
//########## USER-SUPPLIED ACTIONS ##########
case 1:
//#line 17 "./src/compilador/gramatica.y"
{ logger.logSuccess("[Parser] Programa correcto detectado"); }
break;
case 2:
//#line 18 "./src/compilador/gramatica.y"
{ logger.logError("[Parser] Se esperaba simbolo '{' al principio del programa"); }
break;
case 3:
//#line 19 "./src/compilador/gramatica.y"
{ logger.logError("[Parser] Se esperaba simbolo '}' al final del programa"); }
break;
case 4:
//#line 20 "./src/compilador/gramatica.y"
{ logger.logError("[Parser] Programa vacio"); }
break;
case 5:
//#line 21 "./src/compilador/gramatica.y"
{ logger.logError("[Parser] Programa vacio"); }
break;
case 15:
//#line 40 "./src/compilador/gramatica.y"
{ logger.logError("[Parser] Sentencia RETURN fuera de funcion"); }
break;
case 26:
//#line 63 "./src/compilador/gramatica.y"
{ logger.logError("[Parser] Se esperab un simbolo ',' luego del RETURN"); }
break;
case 27:
//#line 67 "./src/compilador/gramatica.y"
{ logger.logSuccess("[Parser] Sentencia iterativa DO WHILE detectada"); }
break;
case 28:
//#line 68 "./src/compilador/gramatica.y"
{ logger.logError("[Parser] Se esperaba ',' luego de sentencia DO WHILE"); }
break;
case 29:
//#line 69 "./src/compilador/gramatica.y"
{ logger.logError("[Parser] Se esperaban sentencias ejecutables en sentencia DO WHILE"); }
break;
case 30:
//#line 70 "./src/compilador/gramatica.y"
{ logger.logError("[Parser] Se esperaba condicion en sentencia DO WHILE"); }
break;
case 31:
//#line 71 "./src/compilador/gramatica.y"
{ logger.logError("[Parser] Se esperaba WHILE en sentencia DO WHILE"); }
break;
case 32:
//#line 72 "./src/compilador/gramatica.y"
{ logger.logError("[Parser] Se esperaban sentencias ejecutables en sentencia DO WHILE"); }
break;
case 33:
//#line 73 "./src/compilador/gramatica.y"
{ logger.logError("[Parser] Se esperaba condicion en sentencia DO WHILE"); }
break;
case 34:
//#line 74 "./src/compilador/gramatica.y"
{ logger.logError("[Parser] Se esperaban sentencias ejecutables en sentencia DO WHILE"); }
break;
case 35:
//#line 75 "./src/compilador/gramatica.y"
{ logger.logError("[Parser] Se esperaban sentencias ejecutables en sentencia DO WHILE"); }
break;
case 36:
//#line 76 "./src/compilador/gramatica.y"
{ logger.logError("[Parser] Se esperaban sentencias ejecutables en sentencia DO WHILE"); }
break;
case 37:
//#line 77 "./src/compilador/gramatica.y"
{ logger.logError("[Parser] Se esperaban sentencias ejecutables en sentencia DO WHILE"); }
break;
case 38:
//#line 81 "./src/compilador/gramatica.y"
{ logger.logSuccess("[Parser] Sentencia iterativa DO WHILE detectada"); }
break;
case 39:
//#line 82 "./src/compilador/gramatica.y"
{ logger.logError("[Parser] Se esperaba ',' luego de sentencia DO WHILE"); }
break;
case 40:
//#line 83 "./src/compilador/gramatica.y"
{ logger.logError("[Parser] Se esperaban sentencias ejecutables en sentencia DO WHILE"); }
break;
case 41:
//#line 84 "./src/compilador/gramatica.y"
{ logger.logError("[Parser] Se esperaba condicion en sentencia DO WHILE"); }
break;
case 42:
//#line 85 "./src/compilador/gramatica.y"
{ logger.logError("[Parser] Se esperaba WHILE en sentencia DO WHILE"); }
break;
case 43:
//#line 86 "./src/compilador/gramatica.y"
{ logger.logError("[Parser] Se esperaban sentencias ejecutables en sentencia DO WHILE"); }
break;
case 44:
//#line 87 "./src/compilador/gramatica.y"
{ logger.logError("[Parser] Se esperaba condicion en sentencia DO WHILE"); }
break;
case 45:
//#line 88 "./src/compilador/gramatica.y"
{ logger.logError("[Parser] Se esperaban sentencias ejecutables en sentencia DO WHILE"); }
break;
case 46:
//#line 89 "./src/compilador/gramatica.y"
{ logger.logError("[Parser] Se esperaban sentencias ejecutables en sentencia DO WHILE"); }
break;
case 47:
//#line 90 "./src/compilador/gramatica.y"
{ logger.logError("[Parser] Se esperaban sentencias ejecutables en sentencia DO WHILE"); }
break;
case 48:
//#line 91 "./src/compilador/gramatica.y"
{ logger.logError("[Parser] Se esperaban sentencias ejecutables en sentencia DO WHILE"); }
break;
case 49:
//#line 95 "./src/compilador/gramatica.y"
{ logger.logSuccess("[Parser] Sentencia seleccion IF ELSE detectada"); }
break;
case 50:
//#line 96 "./src/compilador/gramatica.y"
{ logger.logSuccess("[Parser] Sentencia seleccion IF sin ELSE detectada"); }
break;
case 51:
//#line 97 "./src/compilador/gramatica.y"
{ logger.logError("[Parser] Se esperaba ',' luego de sentencia IF ELSE"); }
break;
case 52:
//#line 98 "./src/compilador/gramatica.y"
{ logger.logError("[Parser] Se esperaba ',' luego de sentencia IF sin ELSE"); }
break;
case 53:
//#line 99 "./src/compilador/gramatica.y"
{ logger.logError("[Parser] Se esperaba condicion en sentencia IF ELSE"); }
break;
case 54:
//#line 100 "./src/compilador/gramatica.y"
{ logger.logError("[Parser] Se esperaba condicion en sentencia IF"); }
break;
case 55:
//#line 101 "./src/compilador/gramatica.y"
{ logger.logError("[Parser] Se esperaban sentencias ejecutables en sentencia IF ELSE"); }
break;
case 56:
//#line 102 "./src/compilador/gramatica.y"
{ logger.logError("[Parser] Se esperaban sentencias ejecutables en sentencia IF ELSE"); }
break;
case 57:
//#line 103 "./src/compilador/gramatica.y"
{ logger.logError("[Parser] Se esperaban sentencias ejecutables en sentencia IF"); }
break;
case 58:
//#line 107 "./src/compilador/gramatica.y"
{ logger.logSuccess("[Parser] Sentencia seleccion IF ELSE detectada"); }
break;
case 59:
//#line 108 "./src/compilador/gramatica.y"
{ logger.logSuccess("[Parser] Sentencia seleccion IF sin ELSE detectada"); }
break;
case 60:
//#line 109 "./src/compilador/gramatica.y"
{ logger.logError("[Parser] Se esperaba ',' luego de sentencia IF ELSE"); }
break;
case 61:
//#line 110 "./src/compilador/gramatica.y"
{ logger.logError("[Parser] Se esperaba ',' luego de sentencia IF sin ELSE"); }
break;
case 62:
//#line 111 "./src/compilador/gramatica.y"
{ logger.logError("[Parser] Se esperaba condicion en sentencia IF ELSE"); }
break;
case 63:
//#line 112 "./src/compilador/gramatica.y"
{ logger.logError("[Parser] Se esperaba condicion en sentencia IF"); }
break;
case 64:
//#line 113 "./src/compilador/gramatica.y"
{ logger.logError("[Parser] Se esperaban sentencias ejecutables en sentencia IF ELSE"); }
break;
case 65:
//#line 114 "./src/compilador/gramatica.y"
{ logger.logError("[Parser] Se esperaban sentencias ejecutables en sentencia IF ELSE"); }
break;
case 66:
//#line 115 "./src/compilador/gramatica.y"
{ logger.logError("[Parser] Se esperaban sentencias ejecutables en sentencia IF"); }
break;
case 69:
//#line 121 "./src/compilador/gramatica.y"
{ logger.logError("[Parser] Se esperaban un simbolo '}' en el bloque"); }
break;
case 70:
//#line 122 "./src/compilador/gramatica.y"
{ logger.logError("[Parser] Se esperaban un simbolo '{' en el bloque"); }
break;
case 71:
//#line 123 "./src/compilador/gramatica.y"
{ logger.logError("[Parser] Se esperaban sentencias ejecutables dentro del bloque"); }
break;
case 72:
//#line 124 "./src/compilador/gramatica.y"
{ logger.logError("[Parser] No se permiten declaraciones de variables dentro de bloque de sentencias ejecutables"); }
break;
case 75:
//#line 130 "./src/compilador/gramatica.y"
{ logger.logError("[Parser] No se permiten declaraciones de variables dentro de bloque de sentencias ejecutables"); }
break;
case 79:
//#line 134 "./src/compilador/gramatica.y"
{ logger.logError("[Parser] Se esperaban un simbolo '{' en el bloque"); }
break;
case 80:
//#line 135 "./src/compilador/gramatica.y"
{ logger.logError("[Parser] Se esperaban un simbolo '{' en el bloque"); }
break;
case 81:
//#line 136 "./src/compilador/gramatica.y"
{ logger.logError("[Parser] Se esperaban un simbolo '}' en el bloque"); }
break;
case 82:
//#line 137 "./src/compilador/gramatica.y"
{ logger.logError("[Parser] Se esperaban un simbolo '}' en el bloque"); }
break;
case 83:
//#line 138 "./src/compilador/gramatica.y"
{ logger.logError("[Parser] Se esperaban sentencias ejecutables en bloque de sentencias ejecutables"); }
break;
case 84:
//#line 142 "./src/compilador/gramatica.y"
{ logger.logError("[Parser] Codigo inalcanzable luego del RETURN, se ignorara"); }
break;
case 85:
//#line 143 "./src/compilador/gramatica.y"
{ logger.logError("[Parser] Codigo inalcanzable luego del RETURN, se ignorara"); }
break;
case 90:
//#line 154 "./src/compilador/gramatica.y"
{ logger.logError("[Parser] No se aceptan declaraciones de variables en sentencias ejecutables"); }
break;
case 91:
//#line 155 "./src/compilador/gramatica.y"
{ logger.logError("[Parser] No se aceptan declaraciones de variables en sentencias ejecutables"); }
break;
case 94:
//#line 161 "./src/compilador/gramatica.y"
{ logger.logError("[Parser] No se aceptan declaraciones de variables en sentencias ejecutables"); }
break;
case 95:
//#line 162 "./src/compilador/gramatica.y"
{ logger.logError("[Parser] No se aceptan declaraciones de variables en sentencias ejecutables"); }
break;
case 96:
//#line 166 "./src/compilador/gramatica.y"
{ logger.logSuccess("[Parser] Sentencia PRINT detectada"); }
break;
case 97:
//#line 167 "./src/compilador/gramatica.y"
{ logger.logError("[Parser] Se esperaba un simbolo ',' en Sentencia PRINT"); }
break;
case 98:
//#line 168 "./src/compilador/gramatica.y"
{ logger.logError("[Parser] Se esperaba CADENA en Sentencia PRINT"); }
break;
case 99:
//#line 169 "./src/compilador/gramatica.y"
{ logger.logError("[Parser] Se esperaba una CADENA y se encontro un IDENTIFICADOR en sentencia PRINT"); }
break;
case 100:
//#line 170 "./src/compilador/gramatica.y"
{ logger.logError("[Parser] Se esperaba un simbolo ',' en sentencia PRINT"); }
break;
case 101:
//#line 171 "./src/compilador/gramatica.y"
{ logger.logError("[Parser] Se esperaba una CADENA y se encontro una constante en sentencia PRINT"); }
break;
case 102:
//#line 172 "./src/compilador/gramatica.y"
{ logger.logError("[Parser] Se esperaba un simbolo ',' en sentencia PRINT"); }
break;
case 103:
//#line 176 "./src/compilador/gramatica.y"
{ logger.logSuccess("[Parser] Invocacion de funcion con expresion detectada"); }
break;
case 104:
//#line 177 "./src/compilador/gramatica.y"
{ logger.logSuccess("[Parser] Invocacion de funcion sin expresion detectada"); }
break;
case 105:
//#line 178 "./src/compilador/gramatica.y"
{ logger.logError("[Parser] Invocacion de funcion con multiples expresiones detectada, se preserva solo la primera expresion"); }
break;
case 106:
//#line 179 "./src/compilador/gramatica.y"
{ logger.logError("[Parser] Se esperaba un simbolo ',' en invocacion de funcion"); }
break;
case 107:
//#line 180 "./src/compilador/gramatica.y"
{ logger.logError("[Parser] Se esperaba un simbolo ',' en invocacion de funcion"); }
break;
case 108:
//#line 181 "./src/compilador/gramatica.y"
{ logger.logError("[Parser] Se esperaba un simbolo ',' en invocacion de funcion"); }
break;
case 111:
//#line 190 "./src/compilador/gramatica.y"
{ logger.logSuccess("[Parser] Asignacion detectada"); }
break;
case 112:
//#line 191 "./src/compilador/gramatica.y"
{ logger.logError("[Parser] Se esperaba un simbolo ',' en sentencia asignacion"); }
break;
case 113:
//#line 192 "./src/compilador/gramatica.y"
{ logger.logError("[Parser] Se esperaba expresion del lado derecho en sentencia asignacion"); }
break;
case 120:
//#line 208 "./src/compilador/gramatica.y"
{ logger.logSuccess("[Parser] Declaracion de lista de variables detectado"); }
break;
case 121:
//#line 209 "./src/compilador/gramatica.y"
{ logger.logError("[Parser] Se esperaba un simbolo ',' en sentencia declaracion de variables"); }
break;
case 122:
//#line 210 "./src/compilador/gramatica.y"
{ logger.logError("[Parser] Se esperaba una lista de variables en sentencia declaracion de variables"); }
break;
case 123:
//#line 214 "./src/compilador/gramatica.y"
{ logger.logSuccess("[Parser] Declaracion de INTERFACE detectada"); }
break;
case 124:
//#line 215 "./src/compilador/gramatica.y"
{ logger.logError("[Parser] Se esperaba un identificador en declaracion de INTERFACE"); }
break;
case 125:
//#line 216 "./src/compilador/gramatica.y"
{ logger.logError("[Parser] Se esperaba un identificador en declaracion de INTERFACE"); }
break;
case 126:
//#line 217 "./src/compilador/gramatica.y"
{ logger.logError("[Parser] Se esperaba un identificador en declaracion de INTERFACE"); }
break;
case 127:
//#line 218 "./src/compilador/gramatica.y"
{ logger.logError("[Parser] Se esperaba un simbolo '{' en declaracion de INTERFACE"); }
break;
case 128:
//#line 219 "./src/compilador/gramatica.y"
{ logger.logError("[Parser] Se esperaba un simbolo '{' en declaracion de INTERFACE"); }
break;
case 132:
//#line 229 "./src/compilador/gramatica.y"
{ logger.logError("[Parser] Se esperaba un simbolo ',' en declaracion de metodo en CLASS"); }
break;
case 133:
//#line 233 "./src/compilador/gramatica.y"
{ logger.logSuccess("[Parser] Declaracion de lista de variables en CLASS detectado"); }
break;
case 134:
//#line 234 "./src/compilador/gramatica.y"
{ logger.logError("[Parser] Se esperaba un simbolo ',' en declaracion de lista de variables en CLASS"); }
break;
case 137:
//#line 240 "./src/compilador/gramatica.y"
{ logger.logSuccess("[Parser] Declaracion de clase CLASS detectado"); }
break;
case 138:
//#line 241 "./src/compilador/gramatica.y"
{ logger.logSuccess("[Parser] Declaracion de clase CLASS detectado"); }
break;
case 139:
//#line 242 "./src/compilador/gramatica.y"
{ logger.logError("[Parser] Se esperaba un identificador en declaracion de clase"); }
break;
case 140:
//#line 243 "./src/compilador/gramatica.y"
{ logger.logError("[Parser] Se esperaba un identificador en declaracion de clase"); }
break;
case 141:
//#line 244 "./src/compilador/gramatica.y"
{ logger.logError("[Parser] Se esperaba un identificador en IMPLEMENT de clase"); }
break;
case 142:
//#line 245 "./src/compilador/gramatica.y"
{ logger.logError("[Parser] Se esperaba un identificador en declaracion de clase"); }
break;
case 143:
//#line 246 "./src/compilador/gramatica.y"
{ logger.logError("[Parser] Se esperaba un simbolo '{' en declaracion de clase"); }
break;
case 144:
//#line 247 "./src/compilador/gramatica.y"
{ logger.logError("[Parser] Se esperaba un simbolo '{' en declaracion de clase"); }
break;
case 147:
//#line 256 "./src/compilador/gramatica.y"
{ logger.logSuccess("[Parser] Declaracion de funcion detectado"); }
break;
case 150:
//#line 262 "./src/compilador/gramatica.y"
{ logger.logError("[Parser] Encabezado de funcion con mas de 1 parametro detectado, se preserva solo el primer parametro"); }
break;
case 151:
//#line 263 "./src/compilador/gramatica.y"
{ logger.logError("[Parser] Encabezado de funcion con mas de 1 parametro detectado, se preserva solo el primer parametro"); }
break;
case 152:
//#line 264 "./src/compilador/gramatica.y"
{ logger.logError("[Parser] Se esperaba un identificador en el encabezado de la funcion"); }
break;
case 153:
//#line 265 "./src/compilador/gramatica.y"
{ logger.logError("[Parser] Se esperaba un identificador en el encabezado de la funcion"); }
break;
case 154:
//#line 266 "./src/compilador/gramatica.y"
{ logger.logError("[Parser] Se esperaba un simbolo '(' en el encabezado de la funcion"); }
break;
case 155:
//#line 267 "./src/compilador/gramatica.y"
{ logger.logError("[Parser] Se esperaba un simbolo '(' en el encabezado de la funcion"); }
break;
case 160:
//#line 275 "./src/compilador/gramatica.y"
{ logger.logError("[Parser] Se esperaba una sentencia RETURN al final de la funcion"); }
break;
case 161:
//#line 276 "./src/compilador/gramatica.y"
{ logger.logError("[Parser] Se esperaba una sentencia RETURN al final de la funcion"); }
break;
case 162:
//#line 277 "./src/compilador/gramatica.y"
{ logger.logError("[Parser] Se esperaba un simbolo '{' en el cuerpo de la funcion"); }
break;
case 163:
//#line 278 "./src/compilador/gramatica.y"
{ logger.logError("[Parser] Se esperaba un simbolo '{' en el cuerpo de la funcion"); }
break;
case 164:
//#line 279 "./src/compilador/gramatica.y"
{ logger.logError("[Parser] Se esperaba un simbolo '{' en el cuerpo de la funcion"); }
break;
case 165:
//#line 280 "./src/compilador/gramatica.y"
{ logger.logError("[Parser] Se esperaba un simbolo '{' en el cuerpo de la funcion"); }
break;
case 166:
//#line 281 "./src/compilador/gramatica.y"
{ logger.logError("[Parser] Se esperaba un simbolo '{' en el cuerpo de la funcion"); }
break;
case 167:
//#line 282 "./src/compilador/gramatica.y"
{ logger.logError("[Parser] Se esperaba un simbolo '{' en el cuerpo de la funcion"); }
break;
case 168:
//#line 286 "./src/compilador/gramatica.y"
{ logger.logError("[Parser] Codigo inalcanzable luego del RETURN, se ignorara"); }
break;
case 169:
//#line 287 "./src/compilador/gramatica.y"
{ logger.logError("[Parser] Codigo inalcanzable luego del RETURN, se ignorara"); }
break;
case 184:
//#line 320 "./src/compilador/gramatica.y"
{ logger.logError("[Parser] Se esperaba una expresion del lado derecho de la comparacion"); }
break;
case 185:
//#line 321 "./src/compilador/gramatica.y"
{ logger.logError("[Parser] Se esperaba una expresion del lado izquierdo de la comparacion"); }
break;
case 186:
//#line 322 "./src/compilador/gramatica.y"
{ logger.logError("[Parser] Se esperaba un comparador valido en la comparacion"); }
break;
case 202:
//#line 353 "./src/compilador/gramatica.y"
{ corregirConstantePositivaEntera(val_peek(0).sval); }
break;
case 203:
//#line 354 "./src/compilador/gramatica.y"
{ constanteConSigno(val_peek(0).sval); }
break;
//#line 1639 "Parser.java"
//########## END OF USER-SUPPLIED ACTIONS ##########
    }//switch
    //#### Now let's reduce... ####
    if (yydebug) debug("reduce");
    state_drop(yym);             //we just reduced yylen states
    yystate = state_peek(0);     //get new state
    val_drop(yym);               //corresponding value drop
    yym = yylhs[yyn];            //select next TERMINAL(on lhs)
    if (yystate == 0 && yym == 0)//done? 'rest' state and at first TERMINAL
      {
      if (yydebug) debug("After reduction, shifting from state 0 to state "+YYFINAL+"");
      yystate = YYFINAL;         //explicitly say we're done
      state_push(YYFINAL);       //and save it
      val_push(yyval);           //also save the semantic value of parsing
      if (yychar < 0)            //we want another character?
        {
        yychar = yylex();        //get next character
        if (yychar<0) yychar=0;  //clean, if necessary
        if (yydebug)
          yylexdebug(yystate,yychar);
        }
      if (yychar == 0)          //Good exit (if lex returns 0 ;-)
         break;                 //quit the loop--all DONE
      }//if yystate
    else                        //else not done yet
      {                         //get next state and push, for next yydefred[]
      yyn = yygindex[yym];      //find out where to go
      if ((yyn != 0) && (yyn += yystate) >= 0 &&
            yyn <= YYTABLESIZE && yycheck[yyn] == yystate)
        yystate = yytable[yyn]; //get new state
      else
        yystate = yydgoto[yym]; //else go to new defred
      if (yydebug) debug("after reduction, shifting from state "+state_peek(0)+" to state "+yystate+"");
      state_push(yystate);     //going again, so push state & val...
      val_push(yyval);         //for next action
      }
    }//main loop
  return 0;//yyaccept!!
}
//## end of method parse() ######################################



//## run() --- for Thread #######################################
/**
 * A default run method, used for operating this parser
 * object in the background.  It is intended for extending Thread
 * or implementing Runnable.  Turn off with -Jnorun .
 */
public void run()
{
  yyparse();
}
//## end of method run() ########################################



//## Constructors ###############################################
/**
 * Default constructor.  Turn off with -Jnoconstruct .

 */
public Parser()
{
  //nothing to do
}


/**
 * Create a parser, setting the debug to true or false.
 * @param debugMe true for debugging, false for no debug.
 */
public Parser(boolean debugMe)
{
  yydebug=debugMe;
}
//###############################################################



}
//################### END OF CLASS ##############################
