//### This file created by BYACC 1.8(/Java extension  1.15)
//### Java capabilities added 7 Jan 97, Bob Jamison
//### Updated : 27 Nov 97  -- Bob Jamison, Joe Nieten
//###           01 Jan 98  -- Bob Jamison -- fixed generic semantic constructor
//###           01 Jun 99  -- Bob Jamison -- added Runnable support
//###           06 Aug 00  -- Bob Jamison -- made state variables class-global
//###           03 Jan 01  -- Bob Jamison -- improved flags, tracing
//###           16 May 01  -- Bob Jamison -- added custom stack sizing
//###           04 Mar 02  -- Yuval Oren  -- improved java performance, added options
//###           14 Mar 02  -- Tomas Hurka -- -d support, static initializer workaround
//### Please send bug reports to tom@hukatronic.cz
//### static char yysccsid[] = "@(#)yaccpar	1.8 (Berkeley) 01/20/90";






//#line 2 ".\gramatica.y"
package compilador;
import java.io.File;
//#line 20 "Parser.java"




public class Parser
{

boolean yydebug;        //do I want debug output?
int yynerrs;            //number of errors so far
int yyerrflag;          //was there an error?
int yychar;             //the current working character

//########## MESSAGES ##########
//###############################################################
// method: debug
//###############################################################
void debug(String msg)
{
  if (yydebug)
    System.out.println(msg);
}

//########## STATE STACK ##########
final static int YYSTACKSIZE = 500;  //maximum stack size
int statestk[] = new int[YYSTACKSIZE]; //state stack
int stateptr;
int stateptrmax;                     //highest index of stackptr
int statemax;                        //state when highest index reached
//###############################################################
// methods: state stack push,pop,drop,peek
//###############################################################
final void state_push(int state)
{
  try {
		stateptr++;
		statestk[stateptr]=state;
	 }
	 catch (ArrayIndexOutOfBoundsException e) {
     int oldsize = statestk.length;
     int newsize = oldsize * 2;
     int[] newstack = new int[newsize];
     System.arraycopy(statestk,0,newstack,0,oldsize);
     statestk = newstack;
     statestk[stateptr]=state;
  }
}
final int state_pop()
{
  return statestk[stateptr--];
}
final void state_drop(int cnt)
{
  stateptr -= cnt; 
}
final int state_peek(int relative)
{
  return statestk[stateptr-relative];
}
//###############################################################
// method: init_stacks : allocate and prepare stacks
//###############################################################
final boolean init_stacks()
{
  stateptr = -1;
  val_init();
  return true;
}
//###############################################################
// method: dump_stacks : show n levels of the stacks
//###############################################################
void dump_stacks(int count)
{
int i;
  System.out.println("=index==state====value=     s:"+stateptr+"  v:"+valptr);
  for (i=0;i<count;i++)
    System.out.println(" "+i+"    "+statestk[i]+"      "+valstk[i]);
  System.out.println("======================");
}


//########## SEMANTIC VALUES ##########
//public class ParserVal is defined in ParserVal.java


String   yytext;//user variable to return contextual strings
ParserVal yyval; //used to return semantic vals from action routines
ParserVal yylval;//the 'lval' (result) I got from yylex()
ParserVal valstk[];
int valptr;
//###############################################################
// methods: value stack push,pop,drop,peek.
//###############################################################
void val_init()
{
  valstk=new ParserVal[YYSTACKSIZE];
  yyval=new ParserVal();
  yylval=new ParserVal();
  valptr=-1;
}
void val_push(ParserVal val)
{
  if (valptr>=YYSTACKSIZE)
    return;
  valstk[++valptr]=val;
}
ParserVal val_pop()
{
  if (valptr<0)
    return new ParserVal();
  return valstk[valptr--];
}
void val_drop(int cnt)
{
int ptr;
  ptr=valptr-cnt;
  if (ptr<0)
    return;
  valptr = ptr;
}
ParserVal val_peek(int relative)
{
int ptr;
  ptr=valptr-relative;
  if (ptr<0)
    return new ParserVal();
  return valstk[ptr];
}
final ParserVal dup_yyval(ParserVal val)
{
  ParserVal dup = new ParserVal();
  dup.ival = val.ival;
  dup.dval = val.dval;
  dup.sval = val.sval;
  dup.obj = val.obj;
  return dup;
}
//#### end semantic value section ####
public final static short ID=257;
public final static short CTE=258;
public final static short CADENA=259;
public final static short IF=260;
public final static short THEN=261;
public final static short ELSE=262;
public final static short ENDIF=263;
public final static short OUT=264;
public final static short FUN=265;
public final static short RETURN=266;
public final static short BREAK=267;
public final static short ASIGNACION=268;
public final static short COMP_MAYOR_IGUAL=269;
public final static short COMP_MENOR_IGUAL=270;
public final static short COMP_DISTINTO=271;
public final static short WHEN=272;
public final static short DO=273;
public final static short UNTIL=274;
public final static short CONTINUE=275;
public final static short DOUBLE64=276;
public final static short UINT16=277;
public final static short DEFER=278;
public final static short CONST=279;
public final static short YYERRCODE=256;
final static short yylhs[] = {                           -1,
    0,    0,    0,    0,    0,    1,    2,    2,    3,    3,
    4,    4,    4,    4,    6,    6,    6,    6,   11,   11,
    7,    7,    7,   14,   14,   15,   15,   16,   16,   16,
   16,   16,   16,   16,   16,   16,   16,   22,   22,    8,
    8,   23,   23,   23,   23,   23,   23,   23,   25,   25,
   25,   21,   21,   21,   21,   21,   21,   21,   21,   21,
   21,   21,   21,   21,   21,   19,   19,   19,   19,   19,
   19,   19,   20,   20,   26,   26,   26,   26,   26,   26,
   26,   26,   26,   26,   26,   26,   26,   28,   28,   29,
   29,   29,   12,   12,   12,   12,   12,   12,   12,   12,
   12,   12,   13,   13,   13,   13,   13,   32,   32,   32,
   35,   35,   34,   34,   36,   34,    9,    9,    9,   37,
   37,   38,   38,   38,   38,    5,    5,    5,    5,    5,
    5,    5,    5,    5,    5,   42,   42,   42,   30,   30,
   30,   30,   30,   31,   31,   41,   41,   43,   43,   43,
   43,   43,   27,   44,   44,   44,   44,   45,   45,   17,
   17,   17,   40,   40,   47,   40,   40,   40,   46,   46,
   39,   39,   39,   39,   39,   39,   39,   39,   39,   39,
   39,   39,   48,   48,   48,   48,   48,   49,   49,   24,
   24,   24,   50,   50,   50,   50,   50,   50,   33,   33,
   33,   51,   51,   51,   52,   52,   52,   54,   54,   55,
   55,   56,   56,   18,   18,   18,   18,   18,   18,   18,
   18,   18,   53,   53,   10,   10,
};
final static short yylen[] = {                            2,
    4,    3,    3,    3,    3,    1,    1,    2,    1,    1,
    1,    1,    1,    1,    3,    2,    2,    2,    3,    1,
    4,    5,    3,    1,    2,    1,    1,    1,    2,    1,
    2,    1,    2,    1,    2,    1,    2,    1,    2,    4,
    5,   10,   13,   13,   13,   13,   16,   16,    1,    1,
    2,    8,    8,    8,   11,   11,   15,   13,   13,   15,
   15,   15,   13,   13,   14,    9,   10,   10,    8,    9,
    9,    8,    7,    9,    1,    1,    1,    4,    4,    3,
    2,    3,    3,    3,    3,    2,    2,    1,    2,    1,
    1,    1,    6,    7,    5,    5,    5,    5,    6,    6,
    6,    6,    5,    4,    3,    3,    4,    1,    3,    5,
    1,    3,    2,    1,    0,    2,    3,    2,    2,    1,
    3,    3,    2,    2,    1,    1,    2,    1,    2,    1,
    2,    1,    2,    1,    2,    1,    1,    1,    2,    4,
    1,    3,    3,    2,    1,    1,    3,    7,    6,    6,
    6,    6,    1,    1,    3,    2,    2,    1,    2,    4,
    3,    3,    9,    8,    0,   17,    7,    6,    1,    2,
    8,   10,    7,    9,    7,    7,    7,    7,    7,    9,
    9,    8,    1,    3,    2,    2,    2,    1,    2,    3,
    2,    2,    1,    1,    1,    1,    1,    1,    3,    3,
    1,    3,    3,    1,    1,    1,    1,    3,    4,    1,
    3,    1,    1,    5,    5,    4,    4,    4,    4,    4,
    4,    4,    1,    2,    1,    1,
};
final static short yydefred[] = {                         0,
    6,    0,    0,    0,    0,    0,    0,    0,    0,    0,
  226,  225,    0,    0,    0,    7,    9,   10,   11,   12,
   13,   14,    0,    0,    0,  126,  130,    0,  128,  132,
  134,  146,    0,    0,    0,    0,    0,  223,  193,  194,
  195,    0,    0,  196,  197,  198,    0,    0,    0,    0,
  204,  206,  207,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,  136,  137,  138,    0,    0,    0,  127,
  131,  129,  133,  135,    0,  119,    0,    0,    2,    8,
    0,   18,    0,   17,    0,    0,    5,    0,    3,  161,
    0,   19,    0,  224,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,  139,    0,
  144,  158,    0,    0,  157,  159,  124,    0,  117,    0,
   15,    0,    0,    0,    0,    0,   23,   26,    0,    0,
   24,   27,   28,   30,   32,   34,   36,    0,    0,  147,
    1,  160,  212,  208,  213,    0,  210,    0,    0,    0,
    0,    0,    0,    0,  202,  203,  219,  217,  220,    0,
  218,    0,  216,    0,    0,    0,    0,  113,    0,    0,
  116,    0,    0,    0,    0,  153,  143,    0,  155,    0,
    0,  122,  121,    0,    0,    0,    0,    0,   75,   90,
   76,    0,    0,   88,   91,   92,    0,   29,   31,   33,
   35,   37,   21,    0,   25,    0,   40,    0,    0,  209,
    0,    0,    0,    0,    0,    0,    0,    0,  215,  214,
    0,   98,    0,    0,   97,    0,    0,   96,    0,    0,
    0,    0,  140,    0,    0,    0,    0,    0,    0,  105,
    0,   81,    0,    0,   87,    0,    0,   89,    0,   22,
   41,    0,  211,  185,  188,    0,    0,    0,  187,  189,
    0,    0,    0,    0,    0,    0,    0,   93,    0,  102,
  101,    0,  100,    0,    0,    0,  168,    0,  150,  152,
    0,  151,    0,  107,    0,    0,   80,    0,    0,    0,
   83,   85,    0,    0,  184,    0,  177,  175,    0,  178,
    0,    0,    0,  179,  176,   94,    0,  110,  170,    0,
    0,    0,  148,    0,  103,    0,   78,   79,    0,    0,
    0,    0,  182,    0,  171,    0,    0,  165,    0,  164,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
  180,    0,  181,  112,    0,  163,   51,   38,    0,    0,
    0,    0,    0,    0,    0,    0,   73,    0,    0,    0,
    0,  172,    0,    0,    0,   39,    0,   52,    0,   54,
   53,    0,    0,    0,   49,   50,    0,   72,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,   66,    0,    0,    0,    0,   74,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,   42,   67,
   68,    0,    0,    0,    0,    0,    0,    0,   55,    0,
    0,    0,   56,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,   58,   43,    0,    0,   59,   44,   63,
   64,    0,   45,   46,    0,    0,    0,   65,    0,    0,
    0,    0,    0,    0,    0,  166,   61,   62,   57,    0,
   60,    0,    0,    0,   47,   48,    0,    0,    0,    0,
    0,    0,    0,    0,
};
final static short yydgoto[] = {                          3,
    4,   15,  284,   17,   18,   19,   20,   21,   22,   23,
   24,   25,  385,  140,  141,  358,  143,  144,  145,  146,
  147,  359,  386,   47,  346,  202,  149,  203,  204,  205,
  206,  112,   48,  113,  318,  114,   77,   78,   29,   30,
   31,  126,   32,   68,   69,  285,  355,  223,  224,   49,
   50,   51,   52,   53,  156,  157,
};
final static short yysindex[] = {                       -76,
    0, 1439,    0,  708,  -19,   57,    4,   10,    9,   80,
    0,    0, 1127,  -16, 1028,    0,    0,    0,    0,    0,
    0,    0,   13,  -30,  -60,    0,    0,   31,    0,    0,
    0,    0, 1038, 1061,   32, -182,   44,    0,    0,    0,
    0, -158,  807,    0,    0,    0,   67,  -40,   21,  147,
    0,    0,    0,   75,   83,  -23,  -31,  -17,  829, -163,
  152,   85, 1467,    0,    0,    0,    0, -121, 1271,    0,
    0,    0,    0,    0,  -90,    0,  115,  176,    0,    0,
  181,    0,  184,    0, 1005,  -41,    0, 1092,    0,    0,
  139,    0,   23,    0,   40,  -34,   68,   21,   21,   21,
  192,   21,   21,  244,  266,   11,   35,  286,  -25,  291,
   94,  320,  322,  107,  313,  335,  121,  362,    0,   26,
    0,    0, 1288,  765,    0,    0,    0,  143,    0,  150,
    0,  369,   17,  376,  859, 1250,    0,    0,  300,  542,
    0,    0,    0,    0,    0,    0,    0,  301,  375,    0,
    0,    0,    0,    0,    0,  132,    0,  810,  810,  681,
  810,  147,  147,  192,    0,    0,    0,    0,    0,  379,
    0,  381,    0,  396, -145,   81, -145,    0,  401, -145,
    0, -145,  407,  324,  -82,    0,    0,  409,    0,  851,
  425,    0,    0,  110,   42,  173,  110, 1305,    0,    0,
    0,  202, 1216,    0,    0,    0,  437,    0,    0,    0,
    0,    0,    0,  354,    0,  364,    0,  214,   53,    0,
 1072,    0,  -57, 1393,  227,  743,   56,  228,    0,    0,
 -145,    0,  434, -145,    0, -145,  449,    0, -145, 1439,
  372, 1102,    0,  438,   54,  445,  455,  447,  329,    0,
  468,    0, 1233,  470,    0,  386,  387,    0,  110,    0,
    0,  859,    0,    0,    0, 1395,  810,  454,    0,    0,
  457,  254,  459,   61,  810,  460,  466,    0, -145,    0,
    0, -145,    0, 1439,  402, 1439,    0,  416,    0,    0,
  473,    0,  281,    0,  494,  302,    0,  431,  440,  110,
    0,    0,  525,  303,    0,  312,    0,    0,  517,    0,
  810,  519,  316,    0,    0,    0,  536,    0,    0,  522,
  461,  526,    0,  -65,    0,  465,    0,    0,  551,  341,
  554,  544,    0,  351,    0,  545, -145,    0,  556,    0,
 1450, 1506,  353,   72,  355,  357, 1125,  569,  876,  110,
    0,  570,    0,    0,  358,    0,    0,    0, 1332,  583,
  518,  584,  586,  242,  588,  -91,    0, 1506,  353,  355,
  607,    0,  617,  408,  567,    0,  568,    0, 1506,    0,
    0,  654,  483, 1506,    0,    0,  458,    0,  638,  595,
  619, 1332,  688,  110,  626,   79,  122, 1484,  110, 1484,
  697,    0,  699,  700,  645,  646,    0,  732, 1506,  886,
  717,  905,  724,  659,  660,  756,  670,  675,    0,    0,
    0,  125,  129,  540, 1349, 1506,  546,  548,    0, 1506,
  549,  553,    0,  559,  561,  573,  565,  566,  833,  916,
  680,  574,  692,  705, 1359,  774,  776, 1376,  777,  782,
  784,  792,  323,  794,  803, 1506, 1506, 1439,  804,  577,
  601,  602,  746,    0,    0,  609,  748,    0,    0,    0,
    0, 1506,    0,    0, 1412, 1422,  750,    0,  817,  818,
  821,  620,  823,  625, 1484,    0,    0,    0,    0,  825,
    0,  836,  778,  780,    0,    0,  640,  652,  508,  572,
 1506, 1506, 1495, 1495,
};
final static short yyrindex[] = {                         0,
    0,    0,    0,    0,  258,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,  389,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,  412,
    0,    0,    0,    0,    0,    0,  650,  650,    0,  857,
 1148, 1171,    0,    0,    0,    0, 1252,    0,    0,    0,
    0,    0,    0,    0,  698,    0,  644,  621,    0,    0,
  671,    0,  781,    0,    0,    0,    0,  918,    0,    0,
  295,    0,    0,    0,    0,    0,    0,    0,    0,  -22,
  -14,    0,    0,    0,    0,    0,    0,    0,  650,    0,
   71,    0,   82,    0,    0,    0,    0,    0,    0,    0,
    0,    0,  651,    0,    0,    0,    0,  754,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,  439,  462,  -11,    0,    0,    0,    0,    0,  333,
    0,  360,    0,    0,    0,    0,    0,    0,    0,  650,
    0,    0,    0,    0,    0,    0,    0, 1194,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,  653,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0, 1322,    0,    0,    0,    0,    0,    0,    0,    0,
  796,    0,    0,    0,    0,    0,   87,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,   58,    0,
    0,    0,  655,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,  135,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,  801,    0,
    0,  650,    0,  805,    0,    0,    0,    0,    0,    0,
  271,    0,    0,    0,  277,    0,    0,  658,  665,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,  488,    0,    0,    0,    0,  106,    0,    0,    0,
    0,  515,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,  650,    0,    0,    0,
    0,    0,  664,    0,  672,    0,    0,    0,    0,    0,
    0,  582,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,  936,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,  959,  982,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,
};
final static short yygindex[] = {                         0,
    0,   55,   77,  -71,   -9,    0,    0,    0,    0,  247,
   73,    0,   45,    0, -114,  -62,   -2,    2,  -35,  -33,
  -29, 1279,   69,   -4, 1229,  678,  133,  753, -147,   64,
  352,   -5,   -7, -140,  615,    0,  816,    0,  944,  947,
  948,   36,  880,    0,  904, -204,    0,  953,  757,  921,
  307,  361,  -42,    0,    0,  760,
};
final static int YYTABLESIZE=1784;
static short yytable[];
static { yytable();}
static void yytable(){
yytable = new short[]{                         26,
   64,   26,   98,   27,   99,   27,  160,   26,  109,  110,
   70,   27,   26,  138,   71,  174,   27,  108,  191,   45,
   46,   44,  142,  115,   36,  215,  192,   91,   84,  190,
   26,   26,  175,  389,   27,   27,  191,  288,   96,  237,
  242,  101,   76,   56,  192,   67,    2,  190,   59,   58,
  155,  170,  116,   64,  118,  258,  195,  342,   34,   64,
   26,   42,   85,  154,   27,   42,   26,   42,  138,  169,
   27,   82,  200,   65,   81,  172,   42,  142,   16,  319,
   16,  321,  248,   93,  187,   26,   42,   88,   86,   27,
   90,   80,  164,  171,  291,   83,   43,   42,  122,   94,
  210,   42,  211,  176,   35,  258,  212,   97,   92,   16,
   80,  114,  290,   64,  114,  104,   45,   46,   44,  191,
   26,  233,  108,  105,   27,  196,   65,  109,  114,  139,
   11,   12,   65,  208,   28,  200,   28,  209,  234,  108,
  200,  317,   28,  121,  109,   28,  111,   28,  222,  222,
  222,  222,  124,  148,   42,   26,   26,   26,   26,   27,
   27,   27,   27,  111,   80,   28,   28,  127,  382,   45,
   46,   44,  220,  129,  133,  219,  155,  128,  241,  199,
    1,   98,  106,   99,  214,  245,   65,  249,  102,  247,
  200,   60,  251,  103,  132,   28,  317,  152,    7,  200,
  133,   28,   63,  201,  267,  268,  134,  135,  216,  120,
  119,  265,  341,  250,  270,   98,  222,   99,   26,  130,
   28,   26,   27,   26,   36,   27,  159,   27,   39,   40,
   41,   10,  366,  106,   98,  107,   99,   26,  191,   26,
   75,   27,  131,   27,   11,   12,  192,  256,   35,  190,
   11,   12,  188,  477,  303,   28,  270,  222,   11,   12,
   54,  344,   55,   26,   26,  222,   57,   27,   27,   81,
  149,  257,   26,   37,   38,  138,   27,   37,   38,  153,
   38,   26,  186,   26,  142,   27,  344,   27,   37,   38,
   28,   28,   28,   28,  162,  329,  376,  298,   37,   38,
  158,  222,  167,  111,  111,  210,  199,  211,   26,  153,
   38,  212,   27,   37,   38,  153,   20,  275,  276,  106,
  106,  299,  311,  312,  168,   39,   40,   41,  161,  376,
  201,  106,  222,  361,  362,  376,   60,  376,  208,    6,
  410,  411,  209,    7,  173,  371,   61,  427,  177,  431,
  178,    9,   10,   28,   62,  111,   28,   13,   28,  221,
  179,   66,  376,  181,  384,  180,   37,   38,  343,  295,
  182,   98,   28,   99,   28,  183,  427,  431,   39,   40,
   41,  184,  376,  412,  413,  376,  439,  411,  205,  408,
  440,  413,  345,  369,  416,  149,  186,  186,   28,   28,
  192,  104,  185,  375,  162,  163,   75,   28,  194,  357,
  390,  201,  376,  376,   66,  197,   28,  370,   28,  162,
   66,  232,  376,  235,  213,  217,  111,  377,  238,  205,
  205,  205,  218,  205,  391,  205,  405,  229,  199,  230,
  376,  376,  414,   28,  417,  472,  240,  205,  205,  205,
  205,  357,  201,  231,  201,   26,  201,  222,  236,   27,
  406,  200,  165,  166,  239,  246,  415,  243,  418,  443,
  201,  201,  201,  201,   66,  254,  259,  278,  260,  199,
  280,  199,  281,  199,  221,  283,  262,  173,  261,  271,
  277,  279,  282,  444,  286,  293,  289,  199,  199,  199,
  199,  382,  200,  292,  200,  294,  200,  133,  296,  300,
  301,  302,  307,  205,  167,  308,  309,  310,  314,  383,
  200,  200,  200,  200,  315,  316,  320,  149,  111,  493,
  149,  323,  149,  149,  149,  149,  201,  149,  104,  104,
  322,  324,  149,  149,  149,  149,  149,  149,  149,  149,
  104,  162,  325,  494,  162,  327,  162,  162,  162,  162,
  162,  162,  326,  199,  328,  330,  162,  162,  162,  162,
  162,  162,  162,  162,  332,  333,  331,  335,  336,  337,
  338,  174,  382,  111,  340,  339,  200,  347,  133,  222,
   28,  348,  222,  350,  222,  222,  222,  222,  222,  222,
  383,  349,  351,  353,  222,  222,  222,  222,  222,  222,
  222,  222,  173,  352,  356,  360,  221,  363,  364,  221,
  120,  221,  221,  221,  221,  221,  221,  367,  372,  373,
  501,  221,  221,  221,  221,  221,  221,  221,  221,  167,
  379,  378,  380,  118,  381,  205,  388,  393,  205,  205,
  205,  205,  205,  205,  205,  205,  394,  205,  205,  205,
  205,  205,  205,  205,  205,  205,  205,  205,  201,  395,
   20,  201,  201,  201,  201,  201,  201,  201,  201,  120,
  201,  201,  201,  201,  201,  201,  201,  201,  201,  201,
  201,  396,  397,  399,  502,  199,  402,  125,  199,  199,
  199,  199,  199,  199,  199,  199,  174,  199,  199,  199,
  199,  199,  199,  199,  199,  199,  199,  199,  200,  403,
  401,  200,  200,  200,  200,  200,  200,  200,  200,   20,
  200,  200,  200,  200,  200,  200,  200,  200,  200,  200,
  200,  125,  382,  404,  173,  120,  407,  173,  409,  173,
  173,  173,  173,  123,  173,  419,  125,  420,  421,  173,
  173,  173,  173,  173,  173,  173,  173,  382,  118,  422,
  423,  167,  424,  133,  167,  429,  167,  167,  167,  167,
   16,  167,  433,  434,  435,  383,  167,  167,  167,  167,
  167,  167,  167,  167,  437,   20,  436,  123,    5,  438,
  441,  132,  458,  221,  190,    7,    8,  133,  446,   42,
  447,  449,  123,  134,  135,  450,  460,   11,   12,  136,
   14,  451,  125,  452,   45,   46,   44,  454,  455,  461,
   33,  382,  464,  453,  465,  468,  459,  133,  174,  479,
  469,  174,  470,  174,  174,  174,  174,   95,  174,  383,
  471,   42,  473,  174,  174,  174,  174,  174,  174,  174,
  174,  474,  478,  480,  481,  221,   45,   46,   44,  117,
  482,  483,  484,   42,  486,  487,  488,  120,  123,  489,
  120,  491,  490,  495,  120,  120,  120,  492,   45,   46,
   44,  244,  120,  120,  496,   42,  120,  120,  120,  120,
  118,  499,  497,  118,  498,   16,  115,  118,  118,  118,
   45,   46,   44,  500,  153,  118,  118,    4,   95,  118,
  118,  118,  118,   99,  156,   49,   77,   20,   86,  169,
   20,   82,  221,   50,   20,   20,   20,   60,   84,  304,
    6,  226,   20,   20,    7,  193,   20,   20,   20,   20,
  253,  354,    9,   10,  125,  456,   72,  125,   13,   73,
   74,  125,  125,  125,    5,  150,  123,    6,  100,  125,
  125,    7,    8,  125,  125,  125,  125,  266,  263,    9,
   10,  198,    0,   11,   12,   13,   14,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,  368,   60,
    0,    0,    6,    0,  272,  273,    7,    0,  426,    0,
  123,    0,    0,  123,    9,   10,    0,  123,  123,  123,
   13,   37,   38,    0,    0,  123,  123,  430,    0,  123,
  123,  123,  123,   39,   40,   41,    0,   16,  457,    0,
   16,    0,    0,    0,   16,   16,   16,    0,    0,    0,
    0,    0,   16,   16,    0,    0,   16,   16,   16,   16,
   69,    0,    0,   37,   38,    0,   60,    0,    0,    6,
    0,    0,    0,    7,    0,   39,   40,   41,    0,    0,
    0,    9,   10,   70,    0,   37,   38,   13,    0,   60,
    0,    0,  207,    0,    0,    0,    7,   39,   40,   41,
    0,    0,    0,    0,  134,  135,   71,   37,   38,    0,
  136,  225,  227,  228,    0,   60,    0,    0,  132,   39,
   40,   41,    7,    0,  133,   61,    0,    0,    0,  137,
  134,  135,   60,   62,    0,  132,  136,    0,    0,    7,
    0,  133,   60,    0,    0,  132,    0,  134,  135,    7,
    0,  133,   79,  136,    0,    0,    0,  134,  135,    0,
    0,   60,   87,  341,  132,    0,    0,    0,    7,    0,
  133,    0,   60,    0,    0,  207,  134,  135,  274,    7,
    0,    0,  341,    0,    0,   89,    0,  134,  135,    0,
    0,    0,   69,  136,    0,   69,  264,   69,   69,   69,
   69,   69,   69,    0,    0,    0,    0,   69,   69,   69,
   69,   69,   69,   69,   69,   70,  151,    0,   70,  306,
   70,   70,   70,   70,   70,   70,  287,  313,    0,    0,
   70,   70,   70,   70,   70,   70,   70,   70,   71,    0,
    0,   71,    0,   71,   71,   71,   71,   71,   71,  365,
    0,    0,    0,   71,   71,   71,   71,   71,   71,   71,
   71,    5,    0,  334,  132,    0,    0,    0,    7,    8,
  133,    0,  141,    0,    0,    0,  134,  135,    0,    0,
   11,   12,  136,   14,    5,    0,    0,    6,    0,    0,
    0,    7,    8,    0,    5,  145,    0,    6,    0,    9,
   10,    7,    8,   11,   12,   13,   14,    0,    0,    9,
   10,    0,    0,   11,   12,   13,   14,    5,  142,    0,
    6,    0,    0,    0,    7,    8,    0,    0,   60,    0,
    0,    6,    9,   10,    0,    7,   11,   12,   13,   14,
  255,    0,    0,    9,   10,    0,    0,    0,    5,   13,
    0,    6,    0,    0,    0,    7,    8,  297,    5,    0,
    0,    6,    0,    9,   10,    7,    8,   11,   12,   13,
   14,    0,    0,    9,   10,    0,  158,   11,   12,   13,
   14,    5,    0,   60,  207,    0,    6,    0,    7,    8,
    7,    0,    0,    0,    0,  125,  134,  135,    9,   10,
   11,   12,  136,   14,  141,    0,    0,  141,    0,    0,
    0,  141,  189,  141,  141,    0,    0,    0,    0,  141,
  141,  141,  141,    0,    0,  141,    0,  145,    0,  252,
  145,    0,    0,    0,  145,    0,  145,  145,    0,    0,
    0,    0,  145,  145,  145,  145,  188,    0,  145,    0,
  142,    0,    0,  142,    0,    0,  374,  142,    0,  142,
  142,    0,    0,    0,    0,  142,  142,  142,  142,    0,
    0,  142,   60,  442,    0,  132,    0,    0,    0,    7,
    0,  133,   61,  462,    0,    0,    0,  134,  135,   60,
   62,    0,  132,  136,    0,    0,    7,    0,  133,   61,
  466,    0,    0,    0,  134,  135,   60,   62,  158,  207,
  136,  158,    0,    7,    0,  158,    0,  269,  158,  305,
    0,  134,  135,  158,  158,  154,  158,   60,    0,  158,
    6,    0,    0,    0,    7,    0,  462,   61,    0,    0,
    0,    0,    9,   10,   60,   62,  466,    6,   13,    0,
    0,    7,    0,    0,   61,    0,    0,    0,    0,    9,
   10,   60,   62,    0,  207,   13,    0,    0,    7,    0,
    0,   61,    0,    0,    0,    0,  134,  135,  188,   62,
    0,  188,  136,  183,  183,  188,    0,    0,   60,    0,
    0,  132,  387,  188,  188,    7,    0,  133,    0,  188,
    0,    0,    0,  134,  135,   60,    0,    0,  132,  136,
    0,    0,    7,    0,  133,   60,    0,    0,  132,    0,
  134,  135,    7,    0,  133,    0,  136,    0,    0,    0,
  134,  135,   60,    0,    0,  132,  341,    0,  428,    7,
  432,  133,    0,    0,    0,    0,  392,  134,  135,   60,
    0,   60,    6,  341,    6,    0,    7,  398,    7,    0,
    0,    0,  400,    0,    9,   10,    9,   10,   60,    0,
   13,  207,   13,  463,    0,    7,  467,    0,   60,    0,
    0,  207,    0,  134,  135,    7,    0,  425,    0,  136,
    0,    0,    0,  134,  135,    5,    0,    0,    6,  136,
    0,    0,    7,    8,  445,    0,   60,    0,  448,  132,
    9,   10,    0,    7,   11,   12,   13,   14,    0,    0,
    0,  134,  135,   60,    0,    0,    6,  428,  432,    0,
    7,  463,  467,   61,  475,  476,    0,    0,    9,   10,
   60,   62,    0,  132,   13,    0,    0,    7,    0,  133,
  485,   60,    0,    0,  132,  134,  135,    0,    7,    0,
  133,  136,   60,    0,    0,  207,  134,  135,    0,    7,
    0,    0,  341,    0,    0,    0,    0,  134,  135,  503,
  504,    0,    0,  136,
};
}
static short yycheck[];
static { yycheck(); }
static void yycheck() {
yycheck = new short[] {                          2,
   10,    4,   43,    2,   45,    4,   41,   10,   40,   41,
   13,   10,   15,   85,   13,   41,   15,   41,   41,   60,
   61,   62,   85,   41,   44,  140,   41,   35,   59,   41,
   33,   34,   58,  125,   33,   34,   59,  242,   43,  180,
  123,   49,   59,   40,   59,   10,  123,   59,   40,   40,
   93,   41,   58,   63,   59,  203,   40,  123,    4,   69,
   63,   45,  123,   41,   63,   45,   69,   45,  140,   59,
   69,   59,  135,   10,  257,   41,   45,  140,    2,  284,
    4,  286,   41,   40,   59,   88,   45,   33,   58,   88,
   59,   15,  100,   59,   41,   23,   40,   45,   63,  258,
  136,   45,  136,  109,  268,  253,  136,   41,   36,   33,
   34,   41,   59,  123,   44,   41,   60,   61,   62,  124,
  123,   41,   41,   41,  123,  133,   63,   41,   58,   85,
  276,  277,   69,  136,    2,  198,    4,  136,   58,   58,
  203,  282,   10,   59,   58,   13,   41,   15,  158,  159,
  160,  161,  274,   85,   45,  158,  159,  160,  161,  158,
  159,  160,  161,   58,   88,   33,   34,  258,  260,   60,
   61,   62,   41,   59,  266,   44,  219,  268,  261,  135,
  257,   43,  125,   45,  140,  190,  123,  195,   42,  194,
  253,  257,  197,   47,  260,   63,  337,   59,  264,  262,
  266,   69,  123,  135,  262,  263,  272,  273,  140,   58,
   59,  221,  278,   41,  224,   43,  226,   45,  221,   44,
   88,  224,  221,  226,   44,  224,  261,  226,  269,  270,
  271,  273,  347,  257,   43,  259,   45,  240,  261,  242,
  257,  240,   59,  242,  276,  277,  261,  203,  268,  261,
  276,  277,  120,  458,  259,  123,  266,  267,  276,  277,
  257,  324,  259,  266,  267,  275,  257,  266,  267,  257,
    0,  203,  275,  257,  258,  347,  275,  257,  258,  257,
  258,  284,  257,  286,  347,  284,  349,  286,  257,  258,
  158,  159,  160,  161,    0,  300,  359,  253,  257,  258,
  261,  311,   59,   57,   58,  341,  262,  341,  311,  257,
  258,  341,  311,  257,  258,   58,   59,  262,  263,  262,
  263,  253,  262,  263,   59,  269,  270,  271,  261,  392,
  262,  274,    0,  262,  263,  398,  257,  400,  341,  260,
  262,  263,  341,  264,   59,  350,  267,  410,   58,  412,
  257,  272,  273,  221,  275,  109,  224,  278,  226,    0,
   41,   10,  425,  257,  123,   44,  257,  258,  324,   41,
   58,   43,  240,   45,  242,   41,  439,  440,  269,  270,
  271,  261,  445,  262,  263,  448,  262,  263,    0,  394,
  262,  263,  324,  349,  399,  125,  262,  263,  266,  267,
  258,  125,   41,  359,   98,   99,  257,  275,   40,  341,
  366,    0,  475,  476,   63,   40,  284,  349,  286,  125,
   69,  175,  485,  177,  125,  125,  180,  359,  182,   41,
   42,   43,   58,   45,  366,   47,  392,   59,    0,   59,
  503,  504,  398,  311,  400,  123,  123,   59,   60,   61,
   62,  383,   41,   58,   43,  458,   45,  125,   58,  458,
  392,    0,  102,  103,   58,   41,  398,   59,  400,  425,
   59,   60,   61,   62,  123,  274,   40,  231,  125,   41,
  234,   43,  236,   45,  125,  239,  273,    0,  125,  263,
  263,   58,   44,  425,  123,   41,   59,   59,   60,   61,
   62,  260,   41,   59,   43,   59,   45,  266,   41,   40,
  125,  125,   59,  125,    0,   59,  263,   59,   59,  278,
   59,   60,   61,   62,   59,  279,  125,  257,  282,  485,
  260,   59,  262,  263,  264,  265,  125,  267,  262,  263,
  125,  261,  272,  273,  274,  275,  276,  277,  278,  279,
  274,  257,   59,  485,  260,  125,  262,  263,  264,  265,
  266,  267,  261,  125,  125,   41,  272,  273,  274,  275,
  276,  277,  278,  279,  263,   59,  274,   59,  263,   44,
   59,    0,  260,  337,   59,  125,  125,  123,  266,  257,
  458,   41,  260,   40,  262,  263,  264,  265,  266,  267,
  278,  261,   59,   59,  272,  273,  274,  275,  276,  277,
  278,  279,  125,  263,   59,  263,  257,  263,  262,  260,
    0,  262,  263,  264,  265,  266,  267,   59,   59,  272,
  123,  272,  273,  274,  275,  276,  277,  278,  279,  125,
  123,   59,   59,    0,   59,  257,   59,   41,  260,  261,
  262,  263,  264,  265,  266,  267,   40,  269,  270,  271,
  272,  273,  274,  275,  276,  277,  278,  279,  257,  262,
    0,  260,  261,  262,  263,  264,  265,  266,  267,   59,
  269,  270,  271,  272,  273,  274,  275,  276,  277,  278,
  279,  125,  125,   40,  123,  257,   59,    0,  260,  261,
  262,  263,  264,  265,  266,  267,  125,  269,  270,  271,
  272,  273,  274,  275,  276,  277,  278,  279,  257,  125,
  263,  260,  261,  262,  263,  264,  265,  266,  267,   59,
  269,  270,  271,  272,  273,  274,  275,  276,  277,  278,
  279,   44,  260,  125,  257,  125,   59,  260,  123,  262,
  263,  264,  265,    0,  267,   59,   59,   59,   59,  272,
  273,  274,  275,  276,  277,  278,  279,  260,  125,  125,
  125,  257,   41,  266,  260,   59,  262,  263,  264,  265,
    0,  267,   59,  125,  125,  278,  272,  273,  274,  275,
  276,  277,  278,  279,  125,  125,   41,   44,  257,  125,
  261,  260,  123,  123,   40,  264,  265,  266,  263,   45,
  263,  263,   59,  272,  273,  263,  125,  276,  277,  278,
  279,  263,  125,  263,   60,   61,   62,  263,  263,  125,
  123,  260,   59,  261,   59,   59,  263,  266,  257,  263,
   59,  260,   59,  262,  263,  264,  265,   41,  267,  278,
   59,   45,   59,  272,  273,  274,  275,  276,  277,  278,
  279,   59,   59,  263,  263,  123,   60,   61,   62,   41,
  125,  263,  125,   45,  125,   59,   59,  257,  125,   59,
  260,   59,  263,   59,  264,  265,  266,  263,   60,   61,
   62,   41,  272,  273,   59,   45,  276,  277,  278,  279,
  257,  262,  125,  260,  125,  125,  257,  264,  265,  266,
   60,   61,   62,  262,   58,  272,  273,    0,  123,  276,
  277,  278,  279,  123,  274,  262,  274,  257,  274,  125,
  260,  274,  123,  262,  264,  265,  266,  257,  274,  262,
  260,  261,  272,  273,  264,  130,  276,  277,  278,  279,
  198,  337,  272,  273,  257,  123,   13,  260,  278,   13,
   13,  264,  265,  266,  257,   86,   63,  260,   48,  272,
  273,  264,  265,  276,  277,  278,  279,  221,  219,  272,
  273,  123,   -1,  276,  277,  278,  279,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,  123,  257,
   -1,   -1,  260,   -1,  262,  263,  264,   -1,  123,   -1,
  257,   -1,   -1,  260,  272,  273,   -1,  264,  265,  266,
  278,  257,  258,   -1,   -1,  272,  273,  123,   -1,  276,
  277,  278,  279,  269,  270,  271,   -1,  257,  123,   -1,
  260,   -1,   -1,   -1,  264,  265,  266,   -1,   -1,   -1,
   -1,   -1,  272,  273,   -1,   -1,  276,  277,  278,  279,
  125,   -1,   -1,  257,  258,   -1,  257,   -1,   -1,  260,
   -1,   -1,   -1,  264,   -1,  269,  270,  271,   -1,   -1,
   -1,  272,  273,  125,   -1,  257,  258,  278,   -1,  257,
   -1,   -1,  260,   -1,   -1,   -1,  264,  269,  270,  271,
   -1,   -1,   -1,   -1,  272,  273,  125,  257,  258,   -1,
  278,  159,  160,  161,   -1,  257,   -1,   -1,  260,  269,
  270,  271,  264,   -1,  266,  267,   -1,   -1,   -1,  125,
  272,  273,  257,  275,   -1,  260,  278,   -1,   -1,  264,
   -1,  266,  257,   -1,   -1,  260,   -1,  272,  273,  264,
   -1,  266,  125,  278,   -1,   -1,   -1,  272,  273,   -1,
   -1,  257,  125,  278,  260,   -1,   -1,   -1,  264,   -1,
  266,   -1,  257,   -1,   -1,  260,  272,  273,  226,  264,
   -1,   -1,  278,   -1,   -1,  125,   -1,  272,  273,   -1,
   -1,   -1,  257,  278,   -1,  260,  125,  262,  263,  264,
  265,  266,  267,   -1,   -1,   -1,   -1,  272,  273,  274,
  275,  276,  277,  278,  279,  257,  125,   -1,  260,  267,
  262,  263,  264,  265,  266,  267,  125,  275,   -1,   -1,
  272,  273,  274,  275,  276,  277,  278,  279,  257,   -1,
   -1,  260,   -1,  262,  263,  264,  265,  266,  267,  125,
   -1,   -1,   -1,  272,  273,  274,  275,  276,  277,  278,
  279,  257,   -1,  311,  260,   -1,   -1,   -1,  264,  265,
  266,   -1,  125,   -1,   -1,   -1,  272,  273,   -1,   -1,
  276,  277,  278,  279,  257,   -1,   -1,  260,   -1,   -1,
   -1,  264,  265,   -1,  257,  125,   -1,  260,   -1,  272,
  273,  264,  265,  276,  277,  278,  279,   -1,   -1,  272,
  273,   -1,   -1,  276,  277,  278,  279,  257,  125,   -1,
  260,   -1,   -1,   -1,  264,  265,   -1,   -1,  257,   -1,
   -1,  260,  272,  273,   -1,  264,  276,  277,  278,  279,
  125,   -1,   -1,  272,  273,   -1,   -1,   -1,  257,  278,
   -1,  260,   -1,   -1,   -1,  264,  265,  125,  257,   -1,
   -1,  260,   -1,  272,  273,  264,  265,  276,  277,  278,
  279,   -1,   -1,  272,  273,   -1,  125,  276,  277,  278,
  279,  257,   -1,  257,  260,   -1,  260,   -1,  264,  265,
  264,   -1,   -1,   -1,   -1,  125,  272,  273,  272,  273,
  276,  277,  278,  279,  257,   -1,   -1,  260,   -1,   -1,
   -1,  264,  125,  266,  267,   -1,   -1,   -1,   -1,  272,
  273,  274,  275,   -1,   -1,  278,   -1,  257,   -1,  125,
  260,   -1,   -1,   -1,  264,   -1,  266,  267,   -1,   -1,
   -1,   -1,  272,  273,  274,  275,  125,   -1,  278,   -1,
  257,   -1,   -1,  260,   -1,   -1,  125,  264,   -1,  266,
  267,   -1,   -1,   -1,   -1,  272,  273,  274,  275,   -1,
   -1,  278,  257,  125,   -1,  260,   -1,   -1,   -1,  264,
   -1,  266,  267,  125,   -1,   -1,   -1,  272,  273,  257,
  275,   -1,  260,  278,   -1,   -1,  264,   -1,  266,  267,
  125,   -1,   -1,   -1,  272,  273,  257,  275,  257,  260,
  278,  260,   -1,  264,   -1,  264,   -1,  125,  267,  125,
   -1,  272,  273,  272,  273,  274,  275,  257,   -1,  278,
  260,   -1,   -1,   -1,  264,   -1,  125,  267,   -1,   -1,
   -1,   -1,  272,  273,  257,  275,  125,  260,  278,   -1,
   -1,  264,   -1,   -1,  267,   -1,   -1,   -1,   -1,  272,
  273,  257,  275,   -1,  260,  278,   -1,   -1,  264,   -1,
   -1,  267,   -1,   -1,   -1,   -1,  272,  273,  257,  275,
   -1,  260,  278,  262,  263,  264,   -1,   -1,  257,   -1,
   -1,  260,  364,  272,  273,  264,   -1,  266,   -1,  278,
   -1,   -1,   -1,  272,  273,  257,   -1,   -1,  260,  278,
   -1,   -1,  264,   -1,  266,  257,   -1,   -1,  260,   -1,
  272,  273,  264,   -1,  266,   -1,  278,   -1,   -1,   -1,
  272,  273,  257,   -1,   -1,  260,  278,   -1,  410,  264,
  412,  266,   -1,   -1,   -1,   -1,  368,  272,  273,  257,
   -1,  257,  260,  278,  260,   -1,  264,  379,  264,   -1,
   -1,   -1,  384,   -1,  272,  273,  272,  273,  257,   -1,
  278,  260,  278,  445,   -1,  264,  448,   -1,  257,   -1,
   -1,  260,   -1,  272,  273,  264,   -1,  409,   -1,  278,
   -1,   -1,   -1,  272,  273,  257,   -1,   -1,  260,  278,
   -1,   -1,  264,  265,  426,   -1,  257,   -1,  430,  260,
  272,  273,   -1,  264,  276,  277,  278,  279,   -1,   -1,
   -1,  272,  273,  257,   -1,   -1,  260,  499,  500,   -1,
  264,  503,  504,  267,  456,  457,   -1,   -1,  272,  273,
  257,  275,   -1,  260,  278,   -1,   -1,  264,   -1,  266,
  472,  257,   -1,   -1,  260,  272,  273,   -1,  264,   -1,
  266,  278,  257,   -1,   -1,  260,  272,  273,   -1,  264,
   -1,   -1,  278,   -1,   -1,   -1,   -1,  272,  273,  501,
  502,   -1,   -1,  278,
};
}
final static short YYFINAL=3;
final static short YYMAXTOKEN=279;
final static String yyname[] = {
"end-of-file",null,null,null,null,null,null,null,null,null,null,null,null,null,
null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,
null,null,null,null,null,null,null,null,null,null,"'('","')'","'*'","'+'","','",
"'-'",null,"'/'",null,null,null,null,null,null,null,null,null,null,"':'","';'",
"'<'","'='","'>'",null,null,null,null,null,null,null,null,null,null,null,null,
null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,
null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,
null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,
"'{'",null,"'}'",null,null,null,null,null,null,null,null,null,null,null,null,
null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,
null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,
null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,
null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,
null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,
null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,
null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,
null,null,null,null,null,null,null,"ID","CTE","CADENA","IF","THEN","ELSE",
"ENDIF","OUT","FUN","RETURN","BREAK","ASIGNACION","COMP_MAYOR_IGUAL",
"COMP_MENOR_IGUAL","COMP_DISTINTO","WHEN","DO","UNTIL","CONTINUE","DOUBLE64",
"UINT16","DEFER","CONST",
};
final static String yyrule[] = {
"$accept : programa",
"programa : nombre_programa '{' sentencias '}'",
"programa : '{' sentencias '}'",
"programa : nombre_programa sentencias '}'",
"programa : nombre_programa '{' sentencias",
"programa : nombre_programa '{' '}'",
"nombre_programa : ID",
"sentencias : sentencia",
"sentencias : sentencias sentencia",
"sentencia : sentencia_declarativa",
"sentencia : sentencia_ejecutable",
"sentencia_declarativa : sentencia_declarativa_variables",
"sentencia_declarativa : funcion_con_return",
"sentencia_declarativa : funcion_sin_return",
"sentencia_declarativa : declaracion_constantes",
"sentencia_declarativa_variables : tipo lista_de_variables ';'",
"sentencia_declarativa_variables : tipo lista_de_variables",
"sentencia_declarativa_variables : lista_de_variables ';'",
"sentencia_declarativa_variables : tipo ';'",
"lista_de_variables : ID ',' lista_de_variables",
"lista_de_variables : ID",
"funcion_con_return : encabezado_funcion '{' sentencia_return '}'",
"funcion_con_return : encabezado_funcion '{' sentencias_funcion sentencia_return '}'",
"funcion_con_return : encabezado_funcion '{' '}'",
"sentencias_funcion : sentencia_funcion",
"sentencias_funcion : sentencias_funcion sentencia_funcion",
"sentencia_funcion : sentencia_declarativa",
"sentencia_funcion : sentencia_ejecutable_funcion",
"sentencia_ejecutable_funcion : asignacion",
"sentencia_ejecutable_funcion : DEFER asignacion",
"sentencia_ejecutable_funcion : imprimir",
"sentencia_ejecutable_funcion : DEFER imprimir",
"sentencia_ejecutable_funcion : sentencia_when_con_return",
"sentencia_ejecutable_funcion : DEFER sentencia_when_con_return",
"sentencia_ejecutable_funcion : sentencia_do_con_return",
"sentencia_ejecutable_funcion : DEFER sentencia_do_con_return",
"sentencia_ejecutable_funcion : sentencia_seleccion_simple_con_return",
"sentencia_ejecutable_funcion : DEFER sentencia_seleccion_simple_con_return",
"sentencias_ejecutables_funcion : sentencia_ejecutable_funcion",
"sentencias_ejecutables_funcion : sentencias_ejecutables_funcion sentencia_ejecutable_funcion",
"funcion_sin_return : encabezado_funcion '{' sentencia_seleccion_compuesta_con_return '}'",
"funcion_sin_return : encabezado_funcion '{' sentencias_funcion sentencia_seleccion_compuesta_con_return '}'",
"sentencia_seleccion_compuesta_con_return : IF '(' condicion ')' THEN sentencia_seleccion_compuesta_con_return_simple ELSE sentencia_seleccion_compuesta_con_return_simple ENDIF ';'",
"sentencia_seleccion_compuesta_con_return : IF '(' condicion ')' THEN '{' sentencias_ejecutables_funcion sentencia_return '}' ELSE sentencia_seleccion_compuesta_con_return_simple ENDIF ';'",
"sentencia_seleccion_compuesta_con_return : IF '(' condicion ')' THEN '{' sentencias_ejecutables_funcion sentencia_seleccion_compuesta_con_return '}' ELSE sentencia_seleccion_compuesta_con_return_simple ENDIF ';'",
"sentencia_seleccion_compuesta_con_return : IF '(' condicion ')' THEN sentencia_seleccion_compuesta_con_return_simple ELSE '{' sentencias_ejecutables_funcion sentencia_return '}' ENDIF ';'",
"sentencia_seleccion_compuesta_con_return : IF '(' condicion ')' THEN sentencia_seleccion_compuesta_con_return_simple ELSE '{' sentencias_ejecutables_funcion sentencia_seleccion_compuesta_con_return '}' ENDIF ';'",
"sentencia_seleccion_compuesta_con_return : IF '(' condicion ')' THEN '{' sentencias_ejecutables_funcion sentencia_return '}' ELSE '{' sentencias_ejecutables_funcion sentencia_seleccion_compuesta_con_return_simple '}' ENDIF ';'",
"sentencia_seleccion_compuesta_con_return : IF '(' condicion ')' THEN '{' sentencias_ejecutables_funcion sentencia_seleccion_compuesta_con_return '}' ELSE '{' sentencias_ejecutables_funcion sentencia_seleccion_compuesta_con_return_simple '}' ENDIF ';'",
"sentencia_seleccion_compuesta_con_return_simple : sentencia_return",
"sentencia_seleccion_compuesta_con_return_simple : sentencia_seleccion_compuesta_con_return",
"sentencia_seleccion_compuesta_con_return_simple : DEFER sentencia_seleccion_compuesta_con_return",
"sentencia_seleccion_simple_con_return : IF '(' condicion ')' THEN sentencia_return ENDIF ';'",
"sentencia_seleccion_simple_con_return : IF '(' condicion ')' THEN sentencia_seleccion_compuesta_con_return ENDIF ';'",
"sentencia_seleccion_simple_con_return : IF '(' condicion ')' THEN sentencia_ejecutable_funcion ENDIF ';'",
"sentencia_seleccion_simple_con_return : IF '(' condicion ')' THEN '{' sentencias_ejecutables_funcion sentencia_return '}' ENDIF ';'",
"sentencia_seleccion_simple_con_return : IF '(' condicion ')' THEN '{' sentencias_ejecutables_funcion sentencia_seleccion_compuesta_con_return '}' ENDIF ';'",
"sentencia_seleccion_simple_con_return : IF '(' condicion ')' THEN '{' sentencias_ejecutables_funcion sentencia_return '}' ELSE '{' sentencias_ejecutables_funcion '}' ENDIF ';'",
"sentencia_seleccion_simple_con_return : IF '(' condicion ')' THEN '{' sentencias_ejecutables_funcion sentencia_return '}' ELSE sentencia_ejecutable_funcion ENDIF ';'",
"sentencia_seleccion_simple_con_return : IF '(' condicion ')' THEN '{' sentencias_ejecutables_funcion sentencia_seleccion_compuesta_con_return '}' ELSE sentencia_ejecutable_funcion ENDIF ';'",
"sentencia_seleccion_simple_con_return : IF '(' condicion ')' THEN '{' sentencias_ejecutables_funcion sentencia_seleccion_compuesta_con_return '}' ELSE '{' sentencias_ejecutables_funcion '}' ENDIF ';'",
"sentencia_seleccion_simple_con_return : IF '(' condicion ')' THEN '{' sentencias_ejecutables_funcion '}' ELSE '{' sentencias_ejecutables_funcion sentencia_return '}' ENDIF ';'",
"sentencia_seleccion_simple_con_return : IF '(' condicion ')' THEN '{' sentencias_ejecutables_funcion '}' ELSE '{' sentencias_ejecutables_funcion sentencia_seleccion_compuesta_con_return '}' ENDIF ';'",
"sentencia_seleccion_simple_con_return : IF '(' condicion ')' THEN sentencia_ejecutable_funcion ELSE '{' sentencias_ejecutables_funcion sentencia_return '}' ENDIF ';'",
"sentencia_seleccion_simple_con_return : IF '(' condicion ')' THEN sentencia_ejecutable_funcion ELSE '{' sentencias_ejecutables_funcion sentencia_seleccion_compuesta_con_return '}' ENDIF ';'",
"sentencia_seleccion_simple_con_return : IF '(' condicion ')' THEN '{' sentencias_ejecutables_funcion '}' ELSE '{' sentencias_ejecutables_funcion '}' ENDIF ';'",
"sentencia_when_con_return : WHEN '(' condicion ')' THEN '{' sentencia_funcion '}' ';'",
"sentencia_when_con_return : WHEN '(' condicion ')' THEN '{' sentencia_funcion sentencia_return '}' ';'",
"sentencia_when_con_return : WHEN '(' condicion ')' THEN '{' sentencia_funcion sentencia_seleccion_compuesta_con_return '}' ';'",
"sentencia_when_con_return : WHEN '(' condicion ')' THEN '{' sentencia_funcion '}'",
"sentencia_when_con_return : WHEN '(' condicion ')' THEN '{' sentencia_funcion sentencia_return '}'",
"sentencia_when_con_return : WHEN '(' condicion ')' THEN '{' sentencia_funcion sentencia_seleccion_compuesta_con_return '}'",
"sentencia_when_con_return : WHEN '(' condicion ')' THEN '{' '}' ';'",
"sentencia_do_con_return : DO bloque_sentencias_ejecutables_do_con_return UNTIL '(' condicion ')' ';'",
"sentencia_do_con_return : etiqueta ':' DO bloque_sentencias_ejecutables_do_con_return UNTIL '(' condicion ')' ';'",
"bloque_sentencias_ejecutables_do_con_return : sentencia_return",
"bloque_sentencias_ejecutables_do_con_return : sentencia_seleccion_compuesta_con_return",
"bloque_sentencias_ejecutables_do_con_return : sentencias_ejecutables_do_funcion",
"bloque_sentencias_ejecutables_do_con_return : '{' sentencias_ejecutables_do_funcion sentencia_return '}'",
"bloque_sentencias_ejecutables_do_con_return : '{' sentencias_ejecutables_do_funcion sentencia_seleccion_compuesta_con_return '}'",
"bloque_sentencias_ejecutables_do_con_return : '{' sentencias_ejecutables_do_funcion '}'",
"bloque_sentencias_ejecutables_do_con_return : '{' '}'",
"bloque_sentencias_ejecutables_do_con_return : '{' sentencias_ejecutables_do_funcion sentencia_return",
"bloque_sentencias_ejecutables_do_con_return : sentencias_ejecutables_do_funcion sentencia_return '}'",
"bloque_sentencias_ejecutables_do_con_return : '{' sentencias_ejecutables_do_funcion sentencia_seleccion_compuesta_con_return",
"bloque_sentencias_ejecutables_do_con_return : sentencias_ejecutables_do_funcion sentencia_seleccion_compuesta_con_return '}'",
"bloque_sentencias_ejecutables_do_con_return : '{' sentencias_ejecutables_do_funcion",
"bloque_sentencias_ejecutables_do_con_return : sentencias_ejecutables_do_funcion '}'",
"sentencias_ejecutables_do_funcion : sentencia_ejecutable_do_funcion",
"sentencias_ejecutables_do_funcion : sentencias_ejecutables_do_funcion sentencia_ejecutable_do_funcion",
"sentencia_ejecutable_do_funcion : sentencia_ejecutable_funcion",
"sentencia_ejecutable_do_funcion : sentencia_break",
"sentencia_ejecutable_do_funcion : sentencia_continue",
"encabezado_funcion : FUN ID '(' ')' ':' tipo",
"encabezado_funcion : FUN ID '(' lista_de_parametros ')' ':' tipo",
"encabezado_funcion : FUN ID '(' ')' ':'",
"encabezado_funcion : FUN '(' ')' ':' tipo",
"encabezado_funcion : FUN ID ')' ':' tipo",
"encabezado_funcion : FUN ID '(' ':' tipo",
"encabezado_funcion : FUN ID '(' lista_de_parametros ')' ':'",
"encabezado_funcion : FUN '(' lista_de_parametros ')' ':' tipo",
"encabezado_funcion : FUN ID lista_de_parametros ')' ':' tipo",
"encabezado_funcion : FUN ID '(' lista_de_parametros ':' tipo",
"sentencia_return : RETURN '(' expresion ')' ';'",
"sentencia_return : RETURN '(' expresion ')'",
"sentencia_return : RETURN expresion ')'",
"sentencia_return : RETURN '(' expresion",
"sentencia_return : RETURN '(' ')' ';'",
"lista_de_parametros : parametro",
"lista_de_parametros : parametro ',' parametro",
"lista_de_parametros : parametro ',' parametro ',' lista_parametros_exceso",
"lista_parametros_exceso : parametro",
"lista_parametros_exceso : parametro ',' lista_parametros_exceso",
"parametro : tipo ID",
"parametro : tipo",
"$$1 :",
"parametro : $$1 ID",
"declaracion_constantes : CONST lista_declaracion_constantes ';'",
"declaracion_constantes : CONST lista_declaracion_constantes",
"declaracion_constantes : CONST ';'",
"lista_declaracion_constantes : declaracion_constante",
"lista_declaracion_constantes : declaracion_constante ',' lista_declaracion_constantes",
"declaracion_constante : ID ASIGNACION CTE",
"declaracion_constante : ID ASIGNACION",
"declaracion_constante : ID CTE",
"declaracion_constante : ID",
"sentencia_ejecutable : asignacion",
"sentencia_ejecutable : DEFER asignacion",
"sentencia_ejecutable : seleccion",
"sentencia_ejecutable : DEFER seleccion",
"sentencia_ejecutable : imprimir",
"sentencia_ejecutable : DEFER imprimir",
"sentencia_ejecutable : sentencia_when",
"sentencia_ejecutable : DEFER sentencia_when",
"sentencia_ejecutable : sentencia_do",
"sentencia_ejecutable : DEFER sentencia_do",
"sentencia_ejecutable_do : sentencia_ejecutable",
"sentencia_ejecutable_do : sentencia_break",
"sentencia_ejecutable_do : sentencia_continue",
"sentencia_break : BREAK ';'",
"sentencia_break : BREAK ':' etiqueta ';'",
"sentencia_break : BREAK",
"sentencia_break : BREAK ':' etiqueta",
"sentencia_break : BREAK ':' ';'",
"sentencia_continue : CONTINUE ';'",
"sentencia_continue : CONTINUE",
"sentencia_do : sentencia_do_simple",
"sentencia_do : etiqueta ':' sentencia_do_simple",
"sentencia_do_simple : DO bloque_sentencias_ejecutables_do UNTIL '(' condicion ')' ';'",
"sentencia_do_simple : DO bloque_sentencias_ejecutables_do UNTIL '(' condicion ')'",
"sentencia_do_simple : DO bloque_sentencias_ejecutables_do UNTIL '(' ')' ';'",
"sentencia_do_simple : DO bloque_sentencias_ejecutables_do UNTIL condicion ')' ';'",
"sentencia_do_simple : DO bloque_sentencias_ejecutables_do UNTIL '(' condicion ';'",
"etiqueta : ID",
"bloque_sentencias_ejecutables_do : sentencia_ejecutable_do",
"bloque_sentencias_ejecutables_do : '{' sentencias_ejecutables_do '}'",
"bloque_sentencias_ejecutables_do : '{' sentencias_ejecutables_do",
"bloque_sentencias_ejecutables_do : sentencias_ejecutables_do '}'",
"sentencias_ejecutables_do : sentencia_ejecutable_do",
"sentencias_ejecutables_do : sentencias_ejecutables_do sentencia_ejecutable_do",
"asignacion : ID ASIGNACION expresion ';'",
"asignacion : ID ASIGNACION ';'",
"asignacion : ID ASIGNACION expresion",
"sentencia_when : WHEN '(' condicion ')' THEN '{' sentencias_when '}' ';'",
"sentencia_when : WHEN '(' condicion ')' '{' sentencias_when '}' ';'",
"$$2 :",
"sentencia_when : WHEN '(' ')' THEN '{' sentencias_when '}' ';' $$2 WHEN '(' condicion ')' THEN '{' sentencias_when '}'",
"sentencia_when : WHEN '(' condicion ')' '{' sentencias_when '}'",
"sentencia_when : WHEN '(' condicion ')' '{' '}'",
"sentencias_when : sentencia",
"sentencias_when : sentencia sentencias_when",
"seleccion : IF '(' condicion ')' THEN bloque_sentencias_ejecutables_seleccion ENDIF ';'",
"seleccion : IF '(' condicion ')' THEN bloque_sentencias_ejecutables_seleccion ELSE bloque_sentencias_ejecutables_seleccion ENDIF ';'",
"seleccion : IF '(' condicion ')' THEN bloque_sentencias_ejecutables_seleccion ENDIF",
"seleccion : IF '(' condicion ')' THEN bloque_sentencias_ejecutables_seleccion ELSE bloque_sentencias_ejecutables_seleccion ENDIF",
"seleccion : IF '(' condicion THEN bloque_sentencias_ejecutables_seleccion ENDIF ';'",
"seleccion : IF condicion ')' THEN bloque_sentencias_ejecutables_seleccion ENDIF ';'",
"seleccion : IF '(' ')' THEN bloque_sentencias_ejecutables_seleccion ENDIF ';'",
"seleccion : IF '(' condicion ')' THEN ENDIF ';'",
"seleccion : IF '(' condicion ')' bloque_sentencias_ejecutables_seleccion ENDIF ';'",
"seleccion : IF '(' ')' THEN bloque_sentencias_ejecutables_seleccion ELSE bloque_sentencias_ejecutables_seleccion ENDIF ';'",
"seleccion : IF '(' condicion ')' bloque_sentencias_ejecutables_seleccion ELSE bloque_sentencias_ejecutables_seleccion ENDIF ';'",
"seleccion : IF '(' condicion ')' THEN ELSE ENDIF ';'",
"bloque_sentencias_ejecutables_seleccion : sentencia_ejecutable",
"bloque_sentencias_ejecutables_seleccion : '{' sentencias_ejecutables '}'",
"bloque_sentencias_ejecutables_seleccion : '{' '}'",
"bloque_sentencias_ejecutables_seleccion : '{' sentencias_ejecutables",
"bloque_sentencias_ejecutables_seleccion : sentencias_ejecutables '}'",
"sentencias_ejecutables : sentencia_ejecutable",
"sentencias_ejecutables : sentencias_ejecutables sentencia_ejecutable",
"condicion : expresion comparador expresion",
"condicion : expresion comparador",
"condicion : comparador expresion",
"comparador : COMP_MAYOR_IGUAL",
"comparador : COMP_MENOR_IGUAL",
"comparador : COMP_DISTINTO",
"comparador : '>'",
"comparador : '<'",
"comparador : '='",
"expresion : expresion '+' termino",
"expresion : expresion '-' termino",
"expresion : termino",
"termino : termino '*' factor",
"termino : termino '/' factor",
"termino : factor",
"factor : ID",
"factor : constante",
"factor : invocacion_funcion",
"invocacion_funcion : ID '(' ')'",
"invocacion_funcion : ID '(' lista_de_parametros_reales ')'",
"lista_de_parametros_reales : parametro_real",
"lista_de_parametros_reales : lista_de_parametros_reales ',' parametro_real",
"parametro_real : ID",
"parametro_real : constante",
"imprimir : OUT '(' CADENA ')' ';'",
"imprimir : OUT '(' ID ')' ';'",
"imprimir : OUT '(' ')' ';'",
"imprimir : OUT CADENA ')' ';'",
"imprimir : OUT '(' CADENA ';'",
"imprimir : OUT ID ')' ';'",
"imprimir : OUT '(' ID ';'",
"imprimir : OUT '(' CADENA ')'",
"imprimir : OUT '(' ID ')'",
"constante : CTE",
"constante : '-' CTE",
"tipo : UINT16",
"tipo : DOUBLE64",
};

//#line 407 ".\gramatica.y"

public static AnalizadorLexico lexico = null;
public static Logger logger = null;
public static TablaDeSimbolos ts = null;

public void constanteConSigno(String constante) {
	if (constante.contains(".")) {
		
		String negConstante = "-"+constante;
		
		Double parsedDouble = Double.parseDouble(negConstante.replace('D', 'E'));
		
		if (parsedDouble < -2.2250738585072014E-308 && -1.7976931348623157E+308 > parsedDouble) {
			logger.logWarning("[Parser] Rango invalido para la constante: " + negConstante + ", se trunca al rango permitido");
			
			if (-1.7976931348623157E+308 < parsedDouble) {
				negConstante = new String("-1.7976931348623157D+308");
			} else {
				negConstante =  new String("-2.2250738585072014D-308");
			}
		}
		
		ts.swapLexemas(constante, negConstante);
	} else {
		//se recibio un uint que fue aceptado por el lexico pero resulta ser negativo
		logger.logWarning("[Parser] No se admiten ui16 con valores negativos: " + "-"+constante + ", se trunca a 0");
		
		ts.swapLexemas(constante, "0");
	}
}	

public int yylex() {
	return lexico.yylex(yylval);
}

public void yyerror(String error) {
	logger.logError(error);
}

public static void main(String[] args) {
	if (args.length == 0) {
		System.err.println("No se especifico ningun archivo de codigo");
	} else {
		String archivo_a_leer = args[0];
		System.out.println("Se va a leer archivo " + archivo_a_leer);
		
		FileReaderHelper fileHelper = new FileReaderHelper();
		
		fileHelper.open(archivo_a_leer);
		
		Parser parser = new Parser();
		logger = new Logger();
		ts = new TablaDeSimbolos();
		lexico = new AnalizadorLexico(fileHelper, ts, logger);
		
        parser.run();

		String path = new File(archivo_a_leer).getAbsolutePath().replaceAll(args[0],"");
        
        Output out = new Output(path);
        
        String printTs = ts.print();
        
        
        out.saveFile("codigo-lexico.txt", logger.getLexico());
		out.saveFile("codigo-sintetico.txt", logger.getSintactico());
		out.saveFile("tabla-de-simbolos.txt", printTs);
        
		System.out.println(printTs);
	}
}
//#line 1035 "Parser.java"
//###############################################################
// method: yylexdebug : check lexer state
//###############################################################
void yylexdebug(int state,int ch)
{
String s=null;
  if (ch < 0) ch=0;
  if (ch <= YYMAXTOKEN) //check index bounds
     s = yyname[ch];    //now get it
  if (s==null)
    s = "illegal-symbol";
  debug("state "+state+", reading "+ch+" ("+s+")");
}





//The following are now global, to aid in error reporting
int yyn;       //next next thing to do
int yym;       //
int yystate;   //current parsing state from state table
String yys;    //current token string


//###############################################################
// method: yyparse : parse input and execute indicated items
//###############################################################
int yyparse()
{
boolean doaction;
  init_stacks();
  yynerrs = 0;
  yyerrflag = 0;
  yychar = -1;          //impossible char forces a read
  yystate=0;            //initial state
  state_push(yystate);  //save it
  val_push(yylval);     //save empty value
  while (true) //until parsing is done, either correctly, or w/error
    {
    doaction=true;
    if (yydebug) debug("loop"); 
    //#### NEXT ACTION (from reduction table)
    for (yyn=yydefred[yystate];yyn==0;yyn=yydefred[yystate])
      {
      if (yydebug) debug("yyn:"+yyn+"  state:"+yystate+"  yychar:"+yychar);
      if (yychar < 0)      //we want a char?
        {
        yychar = yylex();  //get next token
        if (yydebug) debug(" next yychar:"+yychar);
        //#### ERROR CHECK ####
        if (yychar < 0)    //it it didn't work/error
          {
          yychar = 0;      //change it to default string (no -1!)
          if (yydebug)
            yylexdebug(yystate,yychar);
          }
        }//yychar<0
      yyn = yysindex[yystate];  //get amount to shift by (shift index)
      if ((yyn != 0) && (yyn += yychar) >= 0 &&
          yyn <= YYTABLESIZE && yycheck[yyn] == yychar)
        {
        if (yydebug)
          debug("state "+yystate+", shifting to state "+yytable[yyn]);
        //#### NEXT STATE ####
        yystate = yytable[yyn];//we are in a new state
        state_push(yystate);   //save it
        val_push(yylval);      //push our lval as the input for next rule
        yychar = -1;           //since we have 'eaten' a token, say we need another
        if (yyerrflag > 0)     //have we recovered an error?
           --yyerrflag;        //give ourselves credit
        doaction=false;        //but don't process yet
        break;   //quit the yyn=0 loop
        }

    yyn = yyrindex[yystate];  //reduce
    if ((yyn !=0 ) && (yyn += yychar) >= 0 &&
            yyn <= YYTABLESIZE && yycheck[yyn] == yychar)
      {   //we reduced!
      if (yydebug) debug("reduce");
      yyn = yytable[yyn];
      doaction=true; //get ready to execute
      break;         //drop down to actions
      }
    else //ERROR RECOVERY
      {
      if (yyerrflag==0)
        {
        yyerror("syntax error");
        yynerrs++;
        }
      if (yyerrflag < 3) //low error count?
        {
        yyerrflag = 3;
        while (true)   //do until break
          {
          if (stateptr<0)   //check for under & overflow here
            {
            yyerror("stack underflow. aborting...");  //note lower case 's'
            return 1;
            }
          yyn = yysindex[state_peek(0)];
          if ((yyn != 0) && (yyn += YYERRCODE) >= 0 &&
                    yyn <= YYTABLESIZE && yycheck[yyn] == YYERRCODE)
            {
            if (yydebug)
              debug("state "+state_peek(0)+", error recovery shifting to state "+yytable[yyn]+" ");
            yystate = yytable[yyn];
            state_push(yystate);
            val_push(yylval);
            doaction=false;
            break;
            }
          else
            {
            if (yydebug)
              debug("error recovery discarding state "+state_peek(0)+" ");
            if (stateptr<0)   //check for under & overflow here
              {
              yyerror("Stack underflow. aborting...");  //capital 'S'
              return 1;
              }
            state_pop();
            val_pop();
            }
          }
        }
      else            //discard this token
        {
        if (yychar == 0)
          return 1; //yyabort
        if (yydebug)
          {
          yys = null;
          if (yychar <= YYMAXTOKEN) yys = yyname[yychar];
          if (yys == null) yys = "illegal-symbol";
          debug("state "+yystate+", error recovery discards token "+yychar+" ("+yys+")");
          }
        yychar = -1;  //read another
        }
      }//end error recovery
    }//yyn=0 loop
    if (!doaction)   //any reason not to proceed?
      continue;      //skip action
    yym = yylen[yyn];          //get count of terminals on rhs
    if (yydebug)
      debug("state "+yystate+", reducing "+yym+" by rule "+yyn+" ("+yyrule[yyn]+")");
    if (yym>0)                 //if count of rhs not 'nil'
      yyval = val_peek(yym-1); //get current semantic value
    yyval = dup_yyval(yyval); //duplicate yyval if ParserVal is used as semantic value
    switch(yyn)
      {
//########## USER-SUPPLIED ACTIONS ##########
case 1:
//#line 17 ".\gramatica.y"
{ logger.logSuccess("[Parser] Programa correcto detectado"); }
break;
case 2:
//#line 18 ".\gramatica.y"
{ logger.logError("[Parser] Se esperaba un identificador nombre del programa"); }
break;
case 3:
//#line 19 ".\gramatica.y"
{ logger.logError("[Parser] Se esperaba un { antes de las sentencias del programa"); }
break;
case 4:
//#line 20 ".\gramatica.y"
{ logger.logError("[Parser] Se esperaba un } al final de las sentencias del programa"); }
break;
case 5:
//#line 21 ".\gramatica.y"
{ logger.logError("[Parser] Se esperaban sentencias del programa"); }
break;
case 15:
//#line 46 ".\gramatica.y"
{ logger.logSuccess("[Parser] Declaracion de lista de variables detectado"); }
break;
case 16:
//#line 47 ".\gramatica.y"
{ logger.logError("[Parser] Se esperaba un ; al final de la lista de variables"); }
break;
case 17:
//#line 48 ".\gramatica.y"
{ logger.logError("[Parser] Se esperaba un tipo para la lista de variables"); }
break;
case 18:
//#line 49 ".\gramatica.y"
{ logger.logError("[Parser] Se esperaba una variable o lista de variables"); }
break;
case 21:
//#line 58 ".\gramatica.y"
{ logger.logSuccess("[Parser] Declaracion de funcion detectado"); }
break;
case 22:
//#line 59 ".\gramatica.y"
{ logger.logSuccess("[Parser] Declaracion de funcion detectado"); }
break;
case 23:
//#line 60 ".\gramatica.y"
{ logger.logError("[Parser] Se esperaban sentencias en la funcion"); }
break;
case 40:
//#line 92 ".\gramatica.y"
{ logger.logSuccess("[Parser] Declaracion de funcion detectado"); }
break;
case 41:
//#line 93 ".\gramatica.y"
{ logger.logSuccess("[Parser] Declaracion de funcion detectado"); }
break;
case 52:
//#line 113 ".\gramatica.y"
{ logger.logSuccess("[Parser] Sentencia de seleccion detectada"); }
break;
case 53:
//#line 114 ".\gramatica.y"
{ logger.logSuccess("[Parser] Sentencia de seleccion detectada"); }
break;
case 54:
//#line 115 ".\gramatica.y"
{ logger.logSuccess("[Parser] Sentencia de seleccion detectada"); }
break;
case 55:
//#line 116 ".\gramatica.y"
{ logger.logSuccess("[Parser] Sentencia de seleccion detectada"); }
break;
case 56:
//#line 117 ".\gramatica.y"
{ logger.logSuccess("[Parser] Sentencia de seleccion detectada"); }
break;
case 57:
//#line 118 ".\gramatica.y"
{ logger.logSuccess("[Parser] Sentencia de seleccion detectada"); }
break;
case 58:
//#line 119 ".\gramatica.y"
{ logger.logSuccess("[Parser] Sentencia de seleccion detectada"); }
break;
case 59:
//#line 120 ".\gramatica.y"
{ logger.logSuccess("[Parser] Sentencia de seleccion detectada"); }
break;
case 60:
//#line 121 ".\gramatica.y"
{ logger.logSuccess("[Parser] Sentencia de seleccion detectada"); }
break;
case 61:
//#line 122 ".\gramatica.y"
{ logger.logSuccess("[Parser] Sentencia de seleccion detectada"); }
break;
case 62:
//#line 123 ".\gramatica.y"
{ logger.logSuccess("[Parser] Sentencia de seleccion detectada"); }
break;
case 63:
//#line 124 ".\gramatica.y"
{ logger.logSuccess("[Parser] Sentencia de seleccion detectada"); }
break;
case 64:
//#line 125 ".\gramatica.y"
{ logger.logSuccess("[Parser] Sentencia de seleccion detectada"); }
break;
case 65:
//#line 126 ".\gramatica.y"
{ logger.logSuccess("[Parser] Sentencia de seleccion detectada"); }
break;
case 66:
//#line 130 ".\gramatica.y"
{ logger.logSuccess("[Parser] Sentencia when detectada"); }
break;
case 67:
//#line 131 ".\gramatica.y"
{ logger.logSuccess("[Parser] Sentencia when detectada"); }
break;
case 68:
//#line 132 ".\gramatica.y"
{ logger.logSuccess("[Parser] Sentencia when detectada"); }
break;
case 69:
//#line 133 ".\gramatica.y"
{ logger.logError("[Parser] Se esperaba ; al final de la sentencia when"); }
break;
case 70:
//#line 134 ".\gramatica.y"
{ logger.logError("[Parser] Se esperaba ; al final de la sentencia when"); }
break;
case 71:
//#line 135 ".\gramatica.y"
{ logger.logError("[Parser] Se esperaba ; al final de la sentencia when"); }
break;
case 72:
//#line 136 ".\gramatica.y"
{ logger.logError("[Parser] Se esperaban sentencias en la sentencia when"); }
break;
case 73:
//#line 140 ".\gramatica.y"
{ logger.logSuccess("[Parser] Sentencia do until detectada"); }
break;
case 74:
//#line 141 ".\gramatica.y"
{ logger.logSuccess("[Parser] Sentencia do until detectada"); }
break;
case 81:
//#line 151 ".\gramatica.y"
{ logger.logError("[Parser] Se esperaban sentencias en la sentencia do"); }
break;
case 82:
//#line 152 ".\gramatica.y"
{ logger.logError("[Parser] Se esperaba un } al final de la sentencia do"); }
break;
case 83:
//#line 153 ".\gramatica.y"
{ logger.logError("[Parser] Se esperaba un } al final de la sentencia do"); }
break;
case 84:
//#line 154 ".\gramatica.y"
{ logger.logError("[Parser] Se esperaba un } al final de la sentencia do"); }
break;
case 85:
//#line 155 ".\gramatica.y"
{ logger.logError("[Parser] Se esperaba un } al final de la sentencia do"); }
break;
case 86:
//#line 156 ".\gramatica.y"
{ logger.logError("[Parser] Se esperaba un } al final de la sentencia do"); }
break;
case 87:
//#line 157 ".\gramatica.y"
{ logger.logError("[Parser] Se esperaba un } al final de la sentencia do"); }
break;
case 95:
//#line 174 ".\gramatica.y"
{ logger.logError("[Parser] Se esperaba un tipo de return para la funcion"); }
break;
case 96:
//#line 175 ".\gramatica.y"
{ logger.logError("[Parser] Se esperaba un identificador nombre para la funcion"); }
break;
case 97:
//#line 176 ".\gramatica.y"
{ logger.logError("[Parser] Se esperaba un ( luego del nombre de la funcion"); }
break;
case 98:
//#line 177 ".\gramatica.y"
{ logger.logError("[Parser] Se esperaba un ) luego del nombre para la funcion"); }
break;
case 99:
//#line 178 ".\gramatica.y"
{ logger.logError("[Parser] Se esperaba un tipo de return para la funcion"); }
break;
case 100:
//#line 179 ".\gramatica.y"
{ logger.logError("[Parser] Se esperaba un identificador nombre para la funcion"); }
break;
case 101:
//#line 180 ".\gramatica.y"
{ logger.logError("[Parser] Se esperaba un ( luego del nombre de la funcion"); }
break;
case 102:
//#line 181 ".\gramatica.y"
{ logger.logError("[Parser] Se esperaba un ) luego del nombre para la funcion"); }
break;
case 104:
//#line 186 ".\gramatica.y"
{ logger.logError("[Parser] Se esperaba un ; al final de la sentencia return"); }
break;
case 105:
//#line 187 ".\gramatica.y"
{ logger.logError("[Parser] Se esperaba un ( en la sentencia return"); }
break;
case 106:
//#line 188 ".\gramatica.y"
{ logger.logError("[Parser] Se esperaba un ) en la sentencia return"); }
break;
case 107:
//#line 189 ".\gramatica.y"
{ logger.logError("[Parser] Se esperaba una expresion en la sentencia return"); }
break;
case 110:
//#line 195 ".\gramatica.y"
{ logger.logError("[Parser] Hay mas de 2 parametros en la funcion"); }
break;
case 115:
//#line 205 ".\gramatica.y"
{ logger.logError("[Parser] Se esperaba un identificador nombre para el parametro"); }
break;
case 116:
//#line 206 ".\gramatica.y"
{ logger.logError("[Parser] Se esperaba un tipo valido para el parametro"); }
break;
case 117:
//#line 210 ".\gramatica.y"
{ logger.logSuccess("[Parser] Declaracion de constantes detectado"); }
break;
case 118:
//#line 211 ".\gramatica.y"
{ logger.logError("[Parser] Se esperaba ; al final de la declaracion de constantes"); }
break;
case 119:
//#line 212 ".\gramatica.y"
{ logger.logError("[Parser] Se esperaba una lista de declaracion de constantes"); }
break;
case 123:
//#line 222 ".\gramatica.y"
{ logger.logError("[Parser] Se esperaba una constante del lado derecho de la asignacion"); }
break;
case 124:
//#line 223 ".\gramatica.y"
{ logger.logError("[Parser] Se esperaba el simbolo asignacion en la declaracion de constantes"); }
break;
case 125:
//#line 224 ".\gramatica.y"
{ logger.logError("[Parser] Se esperaba una asignacion en la declaracion de constantes"); }
break;
case 139:
//#line 247 ".\gramatica.y"
{ logger.logSuccess("[Parser] Sentencia break detectada"); }
break;
case 140:
//#line 248 ".\gramatica.y"
{ logger.logSuccess("[Parser] Sentencia break con etiqueta detectada"); }
break;
case 141:
//#line 249 ".\gramatica.y"
{ logger.logError("[Parser] Se esperaba un ; luego de la sentencia break"); }
break;
case 142:
//#line 250 ".\gramatica.y"
{ logger.logError("[Parser] Se esperaba un ; luego de la sentencia break"); }
break;
case 143:
//#line 251 ".\gramatica.y"
{ logger.logError("[Parser] Se esperaba una etiqueta en la sentencia break"); }
break;
case 144:
//#line 255 ".\gramatica.y"
{ logger.logSuccess("[Parser] Sentencia continue detectada"); }
break;
case 145:
//#line 256 ".\gramatica.y"
{ logger.logError("[Parser] Se esperaba un ; al final de la sentencia continue"); }
break;
case 148:
//#line 265 ".\gramatica.y"
{ logger.logSuccess("[Parser] Sentencia do until detectada"); }
break;
case 149:
//#line 266 ".\gramatica.y"
{ logger.logError("[Parser] Se esperaba un ; al final de la sentencia do"); }
break;
case 150:
//#line 267 ".\gramatica.y"
{ logger.logError("[Parser] Se esperaba una condicion para la sentencia do"); }
break;
case 151:
//#line 268 ".\gramatica.y"
{ logger.logSuccess("[Parser] Se esperaba un ( en la condicion para la sentencia do"); }
break;
case 152:
//#line 269 ".\gramatica.y"
{ logger.logSuccess("[Parser] Se esperaba un ) en la condicion para la sentencia do"); }
break;
case 156:
//#line 279 ".\gramatica.y"
{ logger.logError("[Parser] Se esperaba un } al final de la sentencia do"); }
break;
case 157:
//#line 280 ".\gramatica.y"
{ logger.logError("[Parser] Se esperaba un { en la sentencia do"); }
break;
case 160:
//#line 289 ".\gramatica.y"
{ logger.logSuccess("[Parser] Asignacion detectada"); }
break;
case 161:
//#line 290 ".\gramatica.y"
{logger.logError("[Parser] Se espera una expresion del lado derecho de la asignacion");}
break;
case 162:
//#line 291 ".\gramatica.y"
{ logger.logError("[Parser] Se espera un ; al final de la asignacion"); }
break;
case 163:
//#line 295 ".\gramatica.y"
{ logger.logSuccess("[Parser] Sentencia when detectada"); }
break;
case 164:
//#line 296 ".\gramatica.y"
{ logger.logError("[Parser] Se esperaba la palabra reservada then en la sentencia when"); }
break;
case 165:
//#line 297 ".\gramatica.y"
{ logger.logError("[Parser] Se esperaba una condicion en la sentencia when"); }
break;
case 166:
//#line 298 ".\gramatica.y"
{ logger.logError("[Parser] Se esperaba un ; al final de la sentencia when"); }
break;
case 167:
//#line 299 ".\gramatica.y"
{ logger.logError("[Parser] Se esperaba la palabra reservada then en la sentencia when"); }
break;
case 168:
//#line 300 ".\gramatica.y"
{ logger.logError("[Parser] Se esperaban sentencias dentro del when"); }
break;
case 171:
//#line 309 ".\gramatica.y"
{ logger.logSuccess("[Parser] Sentencia if then detectada"); }
break;
case 172:
//#line 310 ".\gramatica.y"
{ logger.logSuccess("[Parser] Sentencia if then else detectada"); }
break;
case 173:
//#line 311 ".\gramatica.y"
{ logger.logError("[Parser] Se esperaba un ; al final de la sentencia seleccion"); }
break;
case 174:
//#line 312 ".\gramatica.y"
{ logger.logError("[Parser] Se esperaba un ; al final de la sentencia seleccion"); }
break;
case 175:
//#line 313 ".\gramatica.y"
{ logger.logError("[Parser] Se esperaba un ) en la condicion de la sentencia seleccion"); }
break;
case 176:
//#line 314 ".\gramatica.y"
{ logger.logError("[Parser] Se esperaba un ( en la condicion de la sentencia seleccion"); }
break;
case 177:
//#line 315 ".\gramatica.y"
{ logger.logError("[Parser] Se esperaba una condicion en la sentencia seleccion"); }
break;
case 178:
//#line 316 ".\gramatica.y"
{ logger.logError("[Parser] Se esperaban sentencias en la sentencia seleccion"); }
break;
case 179:
//#line 317 ".\gramatica.y"
{ logger.logError("[Parser] Se esperaban la palabra reservada then en la sentencia seleccion"); }
break;
case 180:
//#line 318 ".\gramatica.y"
{ logger.logError("[Parser] Se esperaban una condicion en la sentencia seleccion"); }
break;
case 181:
//#line 319 ".\gramatica.y"
{ logger.logError("[Parser] Se esperaban la palabra reservada then en la sentencia seleccion"); }
break;
case 182:
//#line 320 ".\gramatica.y"
{ logger.logError("[Parser] Se esperaban sentencias en la sentencia seleccion"); }
break;
case 185:
//#line 326 ".\gramatica.y"
{ logger.logError("[Parser] Se esperaban sentencias dentro de la seleccion"); }
break;
case 186:
//#line 327 ".\gramatica.y"
{ logger.logError("[Parser] Se esperaba un } al final de la seleccion"); }
break;
case 187:
//#line 328 ".\gramatica.y"
{ logger.logError("[Parser] Se esperaba un { en la seleccion"); }
break;
case 191:
//#line 338 ".\gramatica.y"
{ logger.logError("[Parser] Se esperaba un expresion del lado derecho de la comparacion"); }
break;
case 192:
//#line 339 ".\gramatica.y"
{ logger.logError("[Parser] Se esperaba un expresion del lado izquierdo de la comparacion"); }
break;
case 214:
//#line 385 ".\gramatica.y"
{ logger.logSuccess("[Parser] Sentencia out detectada"); }
break;
case 215:
//#line 386 ".\gramatica.y"
{ logger.logSuccess("[Parser] Sentencia out detectada"); }
break;
case 216:
//#line 387 ".\gramatica.y"
{ logger.logError("[Parser] Se esperaba una cadena o identificador en la sentencia out"); }
break;
case 217:
//#line 388 ".\gramatica.y"
{ logger.logError("[Parser] Se esperaba un ( en la sentencia out"); }
break;
case 218:
//#line 389 ".\gramatica.y"
{ logger.logError("[Parser] Se esperaba un ) en la sentencia out"); }
break;
case 219:
//#line 390 ".\gramatica.y"
{ logger.logError("[Parser] Se esperaba un ( en la sentencia out"); }
break;
case 220:
//#line 391 ".\gramatica.y"
{ logger.logError("[Parser] Se esperaba un ) en la sentencia out"); }
break;
case 221:
//#line 392 ".\gramatica.y"
{ logger.logError("[Parser] Se espera un ; al final de la sentencia out"); }
break;
case 222:
//#line 393 ".\gramatica.y"
{ logger.logError("[Parser] Se espera un ; al final de la sentencia out"); }
break;
case 224:
//#line 398 ".\gramatica.y"
{ constanteConSigno(val_peek(0).sval); }
break;
//#line 1644 "Parser.java"
//########## END OF USER-SUPPLIED ACTIONS ##########
    }//switch
    //#### Now let's reduce... ####
    if (yydebug) debug("reduce");
    state_drop(yym);             //we just reduced yylen states
    yystate = state_peek(0);     //get new state
    val_drop(yym);               //corresponding value drop
    yym = yylhs[yyn];            //select next TERMINAL(on lhs)
    if (yystate == 0 && yym == 0)//done? 'rest' state and at first TERMINAL
      {
      if (yydebug) debug("After reduction, shifting from state 0 to state "+YYFINAL+"");
      yystate = YYFINAL;         //explicitly say we're done
      state_push(YYFINAL);       //and save it
      val_push(yyval);           //also save the semantic value of parsing
      if (yychar < 0)            //we want another character?
        {
        yychar = yylex();        //get next character
        if (yychar<0) yychar=0;  //clean, if necessary
        if (yydebug)
          yylexdebug(yystate,yychar);
        }
      if (yychar == 0)          //Good exit (if lex returns 0 ;-)
         break;                 //quit the loop--all DONE
      }//if yystate
    else                        //else not done yet
      {                         //get next state and push, for next yydefred[]
      yyn = yygindex[yym];      //find out where to go
      if ((yyn != 0) && (yyn += yystate) >= 0 &&
            yyn <= YYTABLESIZE && yycheck[yyn] == yystate)
        yystate = yytable[yyn]; //get new state
      else
        yystate = yydgoto[yym]; //else go to new defred
      if (yydebug) debug("after reduction, shifting from state "+state_peek(0)+" to state "+yystate+"");
      state_push(yystate);     //going again, so push state & val...
      val_push(yyval);         //for next action
      }
    }//main loop
  return 0;//yyaccept!!
}
//## end of method parse() ######################################



//## run() --- for Thread #######################################
/**
 * A default run method, used for operating this parser
 * object in the background.  It is intended for extending Thread
 * or implementing Runnable.  Turn off with -Jnorun .
 */
public void run()
{
  yyparse();
}
//## end of method run() ########################################



//## Constructors ###############################################
/**
 * Default constructor.  Turn off with -Jnoconstruct .

 */
public Parser()
{
  //nothing to do
}


/**
 * Create a parser, setting the debug to true or false.
 * @param debugMe true for debugging, false for no debug.
 */
public Parser(boolean debugMe)
{
  yydebug=debugMe;
}
//###############################################################



}
//################### END OF CLASS ##############################
