//### This file created by BYACC 1.8(/Java extension  1.15)
//### Java capabilities added 7 Jan 97, Bob Jamison
//### Updated : 27 Nov 97  -- Bob Jamison, Joe Nieten
//###           01 Jan 98  -- Bob Jamison -- fixed generic semantic constructor
//###           01 Jun 99  -- Bob Jamison -- added Runnable support
//###           06 Aug 00  -- Bob Jamison -- made state variables class-global
//###           03 Jan 01  -- Bob Jamison -- improved flags, tracing
//###           16 May 01  -- Bob Jamison -- added custom stack sizing
//###           04 Mar 02  -- Yuval Oren  -- improved java performance, added options
//###           14 Mar 02  -- Tomas Hurka -- -d support, static initializer workaround
//### Please send bug reports to tom@hukatronic.cz
//### static char yysccsid[] = "@(#)yaccpar	1.8 (Berkeley) 01/20/90";






//#line 2 ".\gramatica.y"
package compilador;
import java.io.File;
//#line 20 "Parser.java"




public class Parser
{

boolean yydebug;        //do I want debug output?
int yynerrs;            //number of errors so far
int yyerrflag;          //was there an error?
int yychar;             //the current working character

//########## MESSAGES ##########
//###############################################################
// method: debug
//###############################################################
void debug(String msg)
{
  if (yydebug)
    System.out.println(msg);
}

//########## STATE STACK ##########
final static int YYSTACKSIZE = 500;  //maximum stack size
int statestk[] = new int[YYSTACKSIZE]; //state stack
int stateptr;
int stateptrmax;                     //highest index of stackptr
int statemax;                        //state when highest index reached
//###############################################################
// methods: state stack push,pop,drop,peek
//###############################################################
final void state_push(int state)
{
  try {
		stateptr++;
		statestk[stateptr]=state;
	 }
	 catch (ArrayIndexOutOfBoundsException e) {
     int oldsize = statestk.length;
     int newsize = oldsize * 2;
     int[] newstack = new int[newsize];
     System.arraycopy(statestk,0,newstack,0,oldsize);
     statestk = newstack;
     statestk[stateptr]=state;
  }
}
final int state_pop()
{
  return statestk[stateptr--];
}
final void state_drop(int cnt)
{
  stateptr -= cnt; 
}
final int state_peek(int relative)
{
  return statestk[stateptr-relative];
}
//###############################################################
// method: init_stacks : allocate and prepare stacks
//###############################################################
final boolean init_stacks()
{
  stateptr = -1;
  val_init();
  return true;
}
//###############################################################
// method: dump_stacks : show n levels of the stacks
//###############################################################
void dump_stacks(int count)
{
int i;
  System.out.println("=index==state====value=     s:"+stateptr+"  v:"+valptr);
  for (i=0;i<count;i++)
    System.out.println(" "+i+"    "+statestk[i]+"      "+valstk[i]);
  System.out.println("======================");
}


//########## SEMANTIC VALUES ##########
//public class ParserVal is defined in ParserVal.java


String   yytext;//user variable to return contextual strings
ParserVal yyval; //used to return semantic vals from action routines
ParserVal yylval;//the 'lval' (result) I got from yylex()
ParserVal valstk[];
int valptr;
//###############################################################
// methods: value stack push,pop,drop,peek.
//###############################################################
void val_init()
{
  valstk=new ParserVal[YYSTACKSIZE];
  yyval=new ParserVal();
  yylval=new ParserVal();
  valptr=-1;
}
void val_push(ParserVal val)
{
  if (valptr>=YYSTACKSIZE)
    return;
  valstk[++valptr]=val;
}
ParserVal val_pop()
{
  if (valptr<0)
    return new ParserVal();
  return valstk[valptr--];
}
void val_drop(int cnt)
{
int ptr;
  ptr=valptr-cnt;
  if (ptr<0)
    return;
  valptr = ptr;
}
ParserVal val_peek(int relative)
{
int ptr;
  ptr=valptr-relative;
  if (ptr<0)
    return new ParserVal();
  return valstk[ptr];
}
final ParserVal dup_yyval(ParserVal val)
{
  ParserVal dup = new ParserVal();
  dup.ival = val.ival;
  dup.dval = val.dval;
  dup.sval = val.sval;
  dup.obj = val.obj;
  return dup;
}
//#### end semantic value section ####
public final static short ID=257;
public final static short CTE=258;
public final static short CADENA=259;
public final static short IF=260;
public final static short THEN=261;
public final static short ELSE=262;
public final static short ENDIF=263;
public final static short OUT=264;
public final static short FUN=265;
public final static short RETURN=266;
public final static short BREAK=267;
public final static short ASIGNACION=268;
public final static short COMP_MAYOR_IGUAL=269;
public final static short COMP_MENOR_IGUAL=270;
public final static short COMP_DISTINTO=271;
public final static short WHEN=272;
public final static short DO=273;
public final static short UNTIL=274;
public final static short CONTINUE=275;
public final static short DOUBLE64=276;
public final static short UINT16=277;
public final static short DEFER=278;
public final static short CONST=279;
public final static short YYERRCODE=256;
final static short yylhs[] = {                           -1,
    0,    0,    0,    0,    0,    1,    2,    2,    3,    3,
    4,    4,    4,    4,    6,    6,    6,    6,   11,   11,
    7,    7,    7,   14,   14,   15,   15,   16,   16,   16,
   16,   16,   16,   16,   16,   16,   16,   22,   22,    8,
    8,   23,   23,   23,   23,   25,   25,   25,   21,   21,
   21,   21,   21,   21,   21,   21,   21,   21,   21,   21,
   21,   21,   19,   19,   19,   19,   19,   19,   19,   20,
   20,   26,   26,   26,   26,   26,   26,   26,   26,   26,
   26,   26,   26,   26,   28,   28,   29,   29,   29,   12,
   12,   12,   12,   12,   12,   12,   12,   12,   12,   13,
   13,   13,   13,   13,   32,   32,   32,   35,   35,   34,
   34,   36,   34,    9,    9,    9,   37,   37,   38,   38,
   38,   38,    5,    5,    5,    5,    5,    5,    5,    5,
    5,    5,   42,   42,   42,   30,   30,   30,   30,   30,
   31,   31,   41,   41,   43,   43,   43,   43,   43,   27,
   44,   44,   45,   45,   17,   17,   17,   40,   40,   47,
   40,   40,   40,   46,   46,   39,   39,   48,   48,   49,
   49,   24,   24,   24,   50,   50,   50,   50,   50,   50,
   33,   33,   33,   51,   51,   51,   52,   52,   52,   54,
   54,   55,   55,   56,   56,   18,   18,   18,   18,   18,
   18,   18,   18,   18,   53,   53,   10,   10,
};
final static short yylen[] = {                            2,
    4,    3,    3,    3,    3,    1,    1,    2,    1,    1,
    1,    1,    1,    1,    3,    2,    2,    2,    3,    1,
    4,    5,    3,    1,    2,    1,    1,    1,    2,    1,
    2,    1,    2,    1,    2,    1,    2,    1,    2,    4,
    5,   10,   13,   13,   16,    1,    1,    2,    8,    8,
    8,   11,   11,   15,   13,   13,   15,   15,   15,   13,
   13,   14,    9,   10,   10,    8,    9,    9,    8,    7,
    9,    1,    1,    1,    4,    4,    3,    2,    3,    3,
    3,    3,    2,    2,    1,    2,    1,    1,    1,    6,
    7,    5,    5,    5,    5,    6,    6,    6,    6,    5,
    4,    3,    3,    4,    1,    3,    5,    1,    3,    2,
    1,    0,    2,    3,    2,    2,    1,    3,    3,    2,
    2,    1,    1,    2,    1,    2,    1,    2,    1,    2,
    1,    2,    1,    1,    1,    2,    4,    1,    3,    3,
    2,    1,    1,    3,    7,    6,    6,    6,    6,    1,
    1,    3,    1,    2,    4,    3,    3,    9,    8,    0,
   17,    7,    6,    1,    2,    8,   10,    1,    3,    1,
    2,    3,    2,    2,    1,    1,    1,    1,    1,    1,
    3,    3,    1,    3,    3,    1,    1,    1,    1,    3,
    4,    1,    3,    1,    1,    5,    5,    4,    4,    4,
    4,    4,    4,    4,    1,    2,    1,    1,
};
final static short yydefred[] = {                         0,
    6,    0,    0,    0,    0,    0,    0,    0,    0,    0,
  208,  207,    0,    0,    0,    7,    9,   10,   11,   12,
   13,   14,    0,    0,    0,  123,  127,    0,  125,  129,
  131,  143,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,  133,  134,  135,
  151,    0,  124,  128,  126,  130,  132,    0,  116,    0,
    0,    2,    8,    0,   18,    0,   17,    0,    0,    5,
    0,    3,    0,  205,    0,  156,    0,    0,  186,  188,
  189,   19,  175,  176,  177,  178,  179,  180,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,  136,    0,  141,  153,
    0,    0,  121,    0,  114,    0,   15,    0,    0,    0,
    0,    0,   23,   26,    0,    0,   24,   27,   28,   30,
   32,   34,   36,    0,    0,  144,    1,    0,  206,    0,
    0,  155,    0,    0,    0,    0,    0,  201,  199,  202,
    0,  200,    0,  198,    0,    0,    0,    0,  110,    0,
    0,  113,    0,    0,    0,    0,  150,  140,    0,  152,
  154,    0,    0,  119,  118,    0,    0,    0,    0,    0,
   72,   87,   73,    0,    0,   85,   88,   89,    0,   29,
   31,   33,   35,   37,   21,    0,   25,    0,   40,    0,
  194,  190,  195,    0,  192,    0,    0,  184,  185,    0,
    0,  197,  196,    0,   95,    0,    0,   94,    0,    0,
   93,    0,    0,    0,    0,  137,    0,    0,    0,    0,
    0,    0,  102,    0,   78,    0,    0,   84,    0,    0,
   86,    0,   22,   41,    0,    0,  191,    0,  168,    0,
   90,    0,   99,   98,    0,   97,    0,    0,    0,  163,
    0,  147,  149,    0,  148,    0,  104,    0,    0,   77,
    0,    0,    0,   80,   82,    0,    0,  193,  170,    0,
    0,    0,   91,    0,  107,  165,    0,    0,    0,  145,
    0,  100,    0,   75,   76,    0,    0,    0,  169,  171,
    0,  166,    0,  160,    0,  159,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,  109,    0,  158,
   48,   38,    0,    0,    0,    0,    0,    0,    0,    0,
   70,    0,    0,    0,    0,  167,    0,    0,    0,   39,
    0,   49,    0,   51,   50,    0,    0,    0,   46,   47,
    0,   69,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,   63,    0,    0,    0,   71,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
   42,   64,   65,    0,    0,    0,    0,    0,    0,   52,
    0,    0,   53,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,   55,   43,
    0,   56,   60,   61,    0,   44,    0,    0,   62,    0,
    0,    0,    0,    0,    0,  161,   58,   59,   54,    0,
   57,    0,   45,    0,    0,    0,    0,
};
final static short yydgoto[] = {                          3,
    4,   15,  257,   17,   18,   19,   20,   21,   22,   23,
   24,   25,  349,  126,  127,  322,  129,  130,  131,  132,
  133,  323,  350,   89,  312,  184,  135,  185,  186,  187,
  188,  100,   90,  101,  285,  102,   60,   61,   29,   30,
   31,   51,   32,   52,  111,  258,  319,  250,  280,   91,
   78,   79,   80,   81,  204,  205,
};
final static short yysindex[] = {                       -81,
    0, 1233,    0,  680,  -35,   16,  -39,  -12,   59,  535,
    0,    0,  507,  -56,  894,    0,    0,    0,    0,    0,
    0,    0,  -38,   -5,  -52,    0,    0,   48,    0,    0,
    0,    0,  920,  930,   -4, -129,  697,  108,  114,  -21,
   -1,    9,  663, -106,  145,  111,  454,    0,    0,    0,
    0,  -91,    0,    0,    0,    0,    0, -198,    0,  136,
  148,    0,    0,  156,    0,  150,    0,  870,  -51,    0,
  954,    0,  186,    0,   10,    0,  123,  122,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,  215,   31,
   33,  173,  213,   38,   45,  229,  -36,  235,   49,  257,
  264,   55,  256,  278,   62,  289,    0,  -26,    0,    0,
 1109,  113,    0,   69,    0,   75,    0,  295,   23,  298,
  327,  642,    0,    0,  217, 1223,    0,    0,    0,    0,
    0,    0,    0,  228,  301,    0,    0,   39,    0,   33,
   33,    0,   33,   33,   95,   33,  141,    0,    0,    0,
  302,    0,  307,    0,  316,  -70,   17,  -70,    0,  322,
  -70,    0,  -70,  329,  266,  -71,    0,    0,  332,    0,
    0,  693,  352,    0,    0,  697,   53,  222,  697, 1126,
    0,    0,    0,  129, 1075,    0,    0,    0,  357,    0,
    0,    0,    0,    0,    0,  280,    0,  285,    0,  152,
    0,    0,    0,   96,    0,  122,  122,    0,    0,  -79,
  141,    0,    0,  -70,    0,  360,  -70,    0,  -70,  382,
    0,  -70, 1233,  308,  964,    0,  374,   67,  375,  398,
  381,  336,    0,  401,    0, 1092,  404,    0,  321,  324,
    0,  697,    0,    0,  327,   60,    0,  565,    0,  -34,
    0,  -70,    0,    0,  -70,    0, 1233,  349, 1233,    0,
  350,    0,    0,  388,    0,  223,    0,  393,  224,    0,
  361,  362,  697,    0,    0,  436,  225,    0,    0, 1174,
  -79,  437,    0,  453,    0,    0,  439,  377,  445,    0,
  716,    0,  390,    0,    0,  470,  253,  483,    0,    0,
  261,    0,  -70,    0,  468,    0,  666, 1073,  265,  -28,
  272,  275,  988,  479,  733,  697,  480,    0,  268,    0,
    0,    0,  990,  491,  428,  493,  494,  -89,  495,   92,
    0, 1073,  265,  272,  516,    0,  518,  297,  458,    0,
  461,    0, 1073,    0,    0,  521,  304, 1073,    0,    0,
  299,    0,  529,  464,  465,  990,  533,  697,  472,  -15,
  133, 1256,  697, 1266,  538,    0,  539,  542,  478,    0,
  574, 1073,  752,  547,  769,  568,  503,  505,  591,  509,
    0,    0,    0,  139,  395, 1145, 1073,  372,  396,    0,
 1073,  405,    0,  419,  420,  431,  422,  771,  570,  432,
  536,  569, 1155,  646,  647, 1193,  648,  650,  653,  107,
  654, 1073, 1233,  656,  456,  457,  459,  592,    0,    0,
  467,    0,    0,    0, 1073,    0, 1204,  614,    0,  657,
  681,  682,  482,  687, 1266,    0,    0,    0,    0,  692,
    0,  627,    0,  498,  154, 1073, 1266,
};
final static short yyrindex[] = {                         0,
    0,    0,    0,    0,  354,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
  504,  504,    0,  704, 1012, 1031,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,  512,    0,  555,
  471,    0,    0,  631,    0,  608,    0,    0,    0,    0,
  763,    0,  303,    0,    0,    0,  191,  347,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,  504,    0,  101,    0,
   80,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,  585,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,   70,   74,    0,    0,    0,
  216,    0,  243,    0,    0,    0,    0,    0,    0,    0,
  504,    0,    0,    0,    0,    0,    0,    0, 1050,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,  492,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,  376,  400,    0,    0,    0,
   82,    0,    0,  645,    0,    0,    0,    0,    0,   86,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0, -102,    0,    0,    0,  496,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,  651,    0,    0,  504,    0,  640,    0,    0,    0,
    0,    0,    0,  269,    0,    0,    0,   77,    0,    0,
  499,  501,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,  105,    0,    0,    0,    0,  424,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,  504,    0,    0,    0,    0,    0,  519,    0,
  520,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,  797,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,  821,  845,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,
};
final static short yygindex[] = {                         0,
    0,   63,   85,  -61,   41,    0,    0,    0,    0,  755,
  112,    0,  -31,    0, -116,  -49,   -2,    2,  -97,  -96,
  -92, 1048,   13,  -29, -266,  541,   14,  603, -126,   54,
   56,   15,   11, -123,  484,    0,  677,    0,  781,  785,
  787,    6,  732,    0,    0, -143,    0,  523,    0,  715,
  282,  286,  -95,    0,    0,  560,
};
final static int YYTABLESIZE=1544;
static short yytable[];
static { yytable();}
static void yytable(){
yytable = new short[]{                         26,
   40,   26,   59,   27,  155,   27,  124,   26,   36,  197,
   53,   27,   26,  106,   54,   28,   27,   28,  128,   96,
   65,  156,  103,   28,  192,  193,   28,   42,   28,  194,
   26,   26,  168,  348,   27,   27,  125,  220,   97,   98,
   75,    2,  203,  248,   26,   77,   28,   28,   27,  103,
   48,  225,  110,   67,   76,   37,  104,  216,  241,  113,
   28,  351,  177,   49,  124,   50,   34,   75,   26,  114,
   68,  182,   27,  140,  217,  141,  128,   75,  151,  202,
  134,  261,  173,   75,   28,  153,   16,   48,   16,  181,
   87,   88,   86,  231,  196,   71,  150,   75,   43,   63,
   49,  147,   50,  152,   75,   69,  389,  264,   26,  241,
  173,  157,   27,  286,  174,  288,  171,   16,   63,  190,
  105,  169,  172,  191,   28,  263,  106,   64,  173,  178,
  182,  284,  174,  183,   66,  182,  247,  105,  198,  246,
  172,  111,  228,  106,  111,  108,  230,   82,   92,  234,
  203,   48,  172,  239,   93,   63,  211,   75,  111,  103,
  103,   35,  108,  143,   49,  140,   50,  141,  144,  109,
  346,  103,   87,   88,   86,    1,  119,   44,  389,  284,
    6,  142,  112,  140,    7,  141,  182,  232,  347,  224,
  157,  116,    9,   10,  115,  182,  330,  240,   13,   36,
   58,  101,  108,  107,  271,   11,   12,   26,  117,  192,
  193,   27,  276,  181,  194,  204,  353,   38,   64,   39,
   26,   10,   26,   28,   27,  138,   27,  281,  282,  425,
  167,  148,   35,  325,  326,   94,   28,   95,   28,   11,
   12,  310,  203,  296,   41,   26,  373,  374,  272,   27,
  249,  124,   73,   74,   26,  145,   26,  183,   27,  309,
   27,   28,  233,  128,  140,  310,  141,  139,  146,  428,
   28,  149,   28,  340,   11,   12,  446,   26,   26,   73,
   74,   27,   27,  333,   11,   12,  335,  154,  279,   73,
   74,  339,  158,   28,   28,  201,   74,  160,  354,   83,
   84,   85,  187,  311,  190,  159,  340,  161,  191,   73,
   74,  162,  340,  163,  340,  157,  201,   74,  164,  321,
  300,  249,  165,  388,  369,  392,  174,  334,  371,  166,
  377,   58,  380,  379,  176,  341,  340,  179,  101,  101,
  204,  195,  355,  187,  187,  187,  183,  187,  388,  187,
  101,  346,  199,  340,  401,  210,  340,  119,  200,  321,
  212,  187,  187,  187,  187,  213,  346,  203,  341,   73,
   74,  418,  119,  214,  378,  181,  268,  340,  140,  219,
  141,   83,   84,   85,  347,  340,  222,  183,  223,  183,
  226,  183,  229,  146,  375,  376,  242,  340,  402,  182,
  398,  374,  237,  442,  243,  183,  183,  183,  183,  244,
   26,  150,   20,  346,   27,  418,  181,  252,  181,  119,
  181,  206,  207,  162,  245,  255,   28,  187,  208,  209,
  259,  347,  262,  265,  181,  181,  181,  181,  266,  267,
  182,  269,  182,  273,  182,  274,  290,  157,  275,  180,
  157,  292,  157,  157,  157,  157,  157,  157,  182,  182,
  182,  182,  157,  157,  157,  157,  157,  157,  157,  157,
  117,  183,  204,  287,  289,  204,  297,  204,  204,  204,
  204,  204,  204,  291,  293,  294,  295,  204,  204,  204,
  204,  204,  204,  204,  204,  302,  303,  304,  298,  203,
  181,  305,  203,  306,  203,  203,  203,  203,  203,  203,
  314,  122,  313,  315,  203,  203,  203,  203,  203,  203,
  203,  203,  316,  317,  182,  146,  320,  324,  146,  117,
  146,  146,  146,  146,  327,  146,  328,  331,  336,  337,
  146,  146,  146,  146,  146,  146,  146,  146,  162,  342,
  343,  344,  345,  352,  115,  122,  357,  358,  359,  187,
  363,  365,  187,  346,  187,  187,  187,  187,  187,  187,
  122,  187,  187,  187,  187,  187,  187,  187,  187,  187,
  187,  187,  360,   44,  120,  361,  118,  366,  367,  368,
    7,  370,  119,   45,  372,  117,  381,  382,  120,  121,
  383,   46,  384,  183,  122,  390,  183,   16,  183,  183,
  183,  183,  183,  183,  385,  183,  183,  183,  183,  183,
  183,  183,  183,  183,  183,  183,  393,  394,  120,  395,
   20,  396,  181,  397,  404,  181,  122,  181,  181,  181,
  181,  181,  181,  120,  181,  181,  181,  181,  181,  181,
  181,  181,  181,  181,  181,  399,  182,   47,  405,  182,
  415,  182,  182,  182,  182,  182,  182,  407,  182,  182,
  182,  182,  182,  182,  182,  182,  182,  182,  182,  115,
  162,  408,  409,  162,  411,  162,  162,  162,  162,   20,
  162,  410,  413,  416,  414,  162,  162,  162,  162,  162,
  162,  162,  162,  105,  419,  420,  422,   75,  423,  120,
   44,  424,  426,    6,  429,  437,  433,    7,  430,  431,
   45,  432,   87,   88,   86,    9,   10,  117,   46,  434,
  117,   13,   16,  227,  117,  117,  117,   75,  436,  438,
  439,   75,  117,  117,  440,  441,  117,  117,  117,  117,
  443,  444,   87,   88,   86,   20,   87,   88,   86,  445,
  112,  150,    4,   44,  164,   74,    6,   92,  122,   83,
    7,  122,   79,   96,   81,  122,  122,  122,    9,   10,
   46,   47,  236,  122,  122,  277,  318,  122,  122,  122,
  122,   44,  175,   55,    6,   99,   99,   56,    7,   57,
  136,   45,   33,  301,  146,  278,    9,   10,    0,   46,
    0,  115,   13,    0,  115,    0,    0,    0,  115,  115,
  115,   44,    0,    0,    6,    0,  115,  115,    7,    0,
  115,  115,  115,  115,    0,    0,    9,   10,  308,    0,
    0,  120,   13,    0,  120,    0,    0,    0,  120,  120,
  120,   99,    0,    0,    0,  332,  120,  120,    0,    0,
  120,  120,  120,  120,   16,    0,    0,   16,    0,    0,
    0,   16,   16,   16,  387,    0,    0,    0,    0,   16,
   16,    0,    0,   16,   16,   16,   16,   20,    0,    0,
   20,  391,    0,  412,   20,   20,   20,    0,   44,    0,
    0,  189,   20,   20,    0,    7,   20,   20,   20,   20,
  215,    0,  218,  120,  121,   99,    0,  221,    0,   73,
   74,   66,   44,    0,    0,  118,    0,    0,    0,    7,
    0,   83,   84,   85,    0,    0,    5,  120,  121,    6,
    0,    0,    0,    7,    8,   67,    0,    0,    0,   73,
   74,    9,   10,   73,   74,   11,   12,   13,   14,    0,
    0,   83,   84,   85,    0,   83,   84,   85,  251,   68,
    0,  253,   44,  254,    0,  118,  256,    0,    0,    7,
    0,  119,    0,    0,    0,    0,    0,  120,  121,   44,
    0,    0,  118,  307,  123,    0,    7,    0,  119,    0,
    0,    0,    0,    0,  120,  121,  283,    0,   44,   99,
  122,  118,    0,    0,    0,    7,    0,  119,   62,    0,
    0,    0,    0,  120,  121,   44,    0,   44,  189,  307,
  189,    0,    7,    0,    7,    0,    0,    0,    0,    0,
  120,  121,  120,  121,   70,    0,  122,    0,  122,    0,
    0,    0,    0,   66,   72,    0,   66,   99,   66,   66,
   66,   66,   66,   66,    0,    0,    0,    0,   66,   66,
   66,   66,   66,   66,   66,   66,    0,   67,  137,    0,
   67,    0,   67,   67,   67,   67,   67,   67,  260,    0,
    0,    0,   67,   67,   67,   67,   67,   67,   67,   67,
    0,   68,    0,    0,   68,    0,   68,   68,   68,   68,
   68,   68,  329,    0,  338,    0,   68,   68,   68,   68,
   68,   68,   68,   68,    0,    0,    5,    0,    0,  118,
    0,    0,    0,    7,    8,  119,  138,    0,    0,    0,
    0,  120,  121,    0,    0,   11,   12,  122,   14,    0,
    5,    0,    0,    6,    0,  142,    0,    7,    8,    0,
    0,    0,    0,    0,    0,    9,   10,    0,    0,   11,
   12,   13,   14,    0,  139,    0,    5,    0,    0,    6,
    0,    0,    0,    7,    8,    0,    5,    0,    0,    6,
    0,    9,   10,    7,    8,   11,   12,   13,   14,  238,
    0,    9,   10,    0,    0,   11,   12,   13,   14,    0,
    5,    0,    0,    6,    0,    0,  270,    7,    8,    0,
    5,    0,    0,    6,    0,    9,   10,    7,    8,   11,
   12,   13,   14,  170,    0,    9,   10,    0,    0,   11,
   12,   13,   14,    0,    5,    0,   44,  189,    0,  118,
  235,    7,    8,    7,    0,  119,    0,    0,    0,  120,
  121,  120,  121,   11,   12,  122,   14,  122,  138,  400,
    0,  138,    0,    0,    0,  138,    0,  138,  138,  417,
    0,    0,    0,  138,  138,  138,  138,  142,    0,  138,
  142,    0,    0,    0,  142,    0,  142,  142,  299,    0,
    0,    0,  142,  142,  142,  142,  139,    0,  142,  139,
    0,    0,    0,  139,    0,  139,  139,  421,    0,    0,
    0,  139,  139,  139,  139,    0,    0,  139,  417,   44,
    0,   44,  189,    0,  118,    0,    7,    0,    7,    0,
  119,   45,    0,    0,  120,  121,  120,  121,   44,   46,
  122,  118,  122,    0,    0,    7,    0,  119,   45,    0,
    0,    0,    0,  120,  121,   44,   46,    0,    6,  122,
    0,    0,    7,    0,    0,   45,    0,    0,    0,  356,
    9,   10,   44,   46,    0,  189,   13,    0,    0,    7,
  362,    0,   45,    0,    0,  364,    0,  120,  121,    0,
   46,   44,    0,  122,  118,    0,    0,    0,    7,    0,
  119,   44,    0,    0,  189,    0,  120,  121,    7,  386,
  119,    0,  122,    0,    0,    0,  120,  121,    0,    0,
   44,    0,  122,    6,  403,    0,    0,    7,  406,    0,
    0,    0,    0,    0,    0,    9,   10,    0,    0,   44,
    0,   13,  189,    0,    0,    0,    7,    0,    0,  427,
   44,    0,    0,  189,  120,  121,    0,    7,    0,    0,
  122,    0,  435,    0,    0,  120,  121,    0,    0,    5,
    0,  122,  118,    0,    0,    0,    7,    8,  119,    5,
    0,    0,    6,  447,  120,  121,    7,    8,   11,   12,
  122,   14,    0,    0,    9,   10,    0,    0,   11,   12,
   13,   14,   44,    0,    0,  118,    0,    0,    0,    7,
    0,  119,   44,    0,    0,  189,    0,  120,  121,    7,
    0,  119,    0,  122,    0,    0,    0,  120,  121,    0,
    0,    0,    0,  122,
};
}
static short yycheck[];
static { yycheck(); }
static void yycheck() {
yycheck = new short[] {                          2,
   40,    4,   59,    2,   41,    4,   68,   10,   44,  126,
   13,   10,   15,   43,   13,    2,   15,    4,   68,   41,
   59,   58,  125,   10,  122,  122,   13,   40,   15,  122,
   33,   34,   59,  123,   33,   34,   68,  161,   40,   41,
   45,  123,  138,  123,   47,   35,   33,   34,   47,   41,
   10,  123,   47,   59,   59,   40,   42,   41,  185,  258,
   47,  328,   40,   10,  126,   10,    4,   45,   71,  268,
  123,  121,   71,   43,   58,   45,  126,   45,   41,   41,
   68,  225,  112,   45,   71,   41,    2,   47,    4,  121,
   60,   61,   62,   41,  126,   33,   59,   45,   40,   15,
   47,   91,   47,   59,   45,   58,  373,   41,  111,  236,
   41,   97,  111,  257,   41,  259,  111,   33,   34,  122,
   41,  108,   41,  122,  111,   59,   41,  257,   59,  119,
  180,  255,   59,  121,   23,  185,   41,   58,  126,   44,
   59,   41,  172,   58,   44,   41,  176,   36,   41,  179,
  246,  111,   40,  185,   41,   71,  146,   45,   58,  262,
  263,  268,   58,   42,  111,   43,  111,   45,   47,   59,
  260,  274,   60,   61,   62,  257,  266,  257,  445,  303,
  260,   59,  274,   43,  264,   45,  236,  177,  278,  261,
    0,   44,  272,  273,   59,  245,  313,  185,  278,   44,
  257,  125,   58,   59,  236,  276,  277,  210,   59,  307,
  307,  210,  242,  245,  307,    0,  125,  257,  257,  259,
  223,  273,  225,  210,  223,   40,  225,  262,  263,  123,
  257,   59,  268,  262,  263,  257,  223,  259,  225,  276,
  277,  291,    0,  273,  257,  248,  262,  263,  236,  248,
  210,  313,  257,  258,  257,   41,  259,  245,  257,  291,
  259,  248,   41,  313,   43,  315,   45,  258,    0,  413,
  257,   59,  259,  323,  276,  277,  123,  280,  281,  257,
  258,  280,  281,  315,  276,  277,  316,   59,  248,  257,
  258,  323,   58,  280,  281,  257,  258,   41,  330,  269,
  270,  271,    0,  291,  307,  257,  356,   44,  307,  257,
  258,  257,  362,   58,  364,  125,  257,  258,   41,  307,
  280,  281,  261,  373,  356,  375,  258,  315,  358,   41,
  362,  257,  364,  363,   40,  323,  386,   40,  262,  263,
  125,  125,  330,   41,   42,   43,    0,   45,  398,   47,
  274,  260,  125,  403,  386,  261,  406,  266,   58,  347,
   59,   59,   60,   61,   62,   59,  260,  125,  356,  257,
  258,  403,  266,   58,  362,    0,   41,  427,   43,   58,
   45,  269,  270,  271,  278,  435,   58,   41,  123,   43,
   59,   45,   41,  125,  262,  263,   40,  447,  386,    0,
  262,  263,  274,  435,  125,   59,   60,   61,   62,  125,
  413,   58,   59,  260,  413,  447,   41,   58,   43,  266,
   45,  140,  141,    0,  273,   44,  413,  125,  143,  144,
  123,  278,   59,   59,   59,   60,   61,   62,   41,   59,
   41,   41,   43,   40,   45,  125,   59,  257,  125,  123,
  260,   59,  262,  263,  264,  265,  266,  267,   59,   60,
   61,   62,  272,  273,  274,  275,  276,  277,  278,  279,
    0,  125,  257,  125,  125,  260,   41,  262,  263,  264,
  265,  266,  267,  261,  261,  125,  125,  272,  273,  274,
  275,  276,  277,  278,  279,   59,   44,   59,  274,  257,
  125,  125,  260,   59,  262,  263,  264,  265,  266,  267,
   41,    0,  123,  261,  272,  273,  274,  275,  276,  277,
  278,  279,   40,  263,  125,  257,   59,  263,  260,   59,
  262,  263,  264,  265,  263,  267,  262,   59,   59,  272,
  272,  273,  274,  275,  276,  277,  278,  279,  125,   59,
  123,   59,   59,   59,    0,   44,   41,   40,  262,  257,
   40,  263,  260,  260,  262,  263,  264,  265,  266,  267,
   59,  269,  270,  271,  272,  273,  274,  275,  276,  277,
  278,  279,  125,  257,    0,  125,  260,   59,  125,  125,
  264,   59,  266,  267,  123,  125,   59,   59,  272,  273,
   59,  275,  125,  257,  278,   59,  260,    0,  262,  263,
  264,  265,  266,  267,   41,  269,  270,  271,  272,  273,
  274,  275,  276,  277,  278,  279,   59,  125,   44,  125,
    0,   41,  257,  125,  263,  260,  125,  262,  263,  264,
  265,  266,  267,   59,  269,  270,  271,  272,  273,  274,
  275,  276,  277,  278,  279,  261,  257,  123,  263,  260,
  125,  262,  263,  264,  265,  266,  267,  263,  269,  270,
  271,  272,  273,  274,  275,  276,  277,  278,  279,  125,
  257,  263,  263,  260,  263,  262,  263,  264,  265,   59,
  267,  261,  123,  125,  263,  272,  273,  274,  275,  276,
  277,  278,  279,   41,   59,   59,   59,   45,   59,  125,
  257,   59,   59,  260,   59,   59,  125,  264,  263,  263,
  267,  263,   60,   61,   62,  272,  273,  257,  275,  263,
  260,  278,  125,   41,  264,  265,  266,   45,  125,   59,
   59,   45,  272,  273,  263,   59,  276,  277,  278,  279,
   59,  125,   60,   61,   62,  125,   60,   61,   62,  262,
  257,   58,    0,  257,  125,  274,  260,  123,  257,  274,
  264,  260,  274,  123,  274,  264,  265,  266,  272,  273,
  262,  262,  180,  272,  273,  245,  303,  276,  277,  278,
  279,  257,  116,   13,  260,   41,   42,   13,  264,   13,
   69,  267,  123,  281,   90,  246,  272,  273,   -1,  275,
   -1,  257,  278,   -1,  260,   -1,   -1,   -1,  264,  265,
  266,  257,   -1,   -1,  260,   -1,  272,  273,  264,   -1,
  276,  277,  278,  279,   -1,   -1,  272,  273,  123,   -1,
   -1,  257,  278,   -1,  260,   -1,   -1,   -1,  264,  265,
  266,   97,   -1,   -1,   -1,  123,  272,  273,   -1,   -1,
  276,  277,  278,  279,  257,   -1,   -1,  260,   -1,   -1,
   -1,  264,  265,  266,  123,   -1,   -1,   -1,   -1,  272,
  273,   -1,   -1,  276,  277,  278,  279,  257,   -1,   -1,
  260,  123,   -1,  123,  264,  265,  266,   -1,  257,   -1,
   -1,  260,  272,  273,   -1,  264,  276,  277,  278,  279,
  156,   -1,  158,  272,  273,  161,   -1,  163,   -1,  257,
  258,  125,  257,   -1,   -1,  260,   -1,   -1,   -1,  264,
   -1,  269,  270,  271,   -1,   -1,  257,  272,  273,  260,
   -1,   -1,   -1,  264,  265,  125,   -1,   -1,   -1,  257,
  258,  272,  273,  257,  258,  276,  277,  278,  279,   -1,
   -1,  269,  270,  271,   -1,  269,  270,  271,  214,  125,
   -1,  217,  257,  219,   -1,  260,  222,   -1,   -1,  264,
   -1,  266,   -1,   -1,   -1,   -1,   -1,  272,  273,  257,
   -1,   -1,  260,  278,  125,   -1,  264,   -1,  266,   -1,
   -1,   -1,   -1,   -1,  272,  273,  252,   -1,  257,  255,
  278,  260,   -1,   -1,   -1,  264,   -1,  266,  125,   -1,
   -1,   -1,   -1,  272,  273,  257,   -1,  257,  260,  278,
  260,   -1,  264,   -1,  264,   -1,   -1,   -1,   -1,   -1,
  272,  273,  272,  273,  125,   -1,  278,   -1,  278,   -1,
   -1,   -1,   -1,  257,  125,   -1,  260,  303,  262,  263,
  264,  265,  266,  267,   -1,   -1,   -1,   -1,  272,  273,
  274,  275,  276,  277,  278,  279,   -1,  257,  125,   -1,
  260,   -1,  262,  263,  264,  265,  266,  267,  125,   -1,
   -1,   -1,  272,  273,  274,  275,  276,  277,  278,  279,
   -1,  257,   -1,   -1,  260,   -1,  262,  263,  264,  265,
  266,  267,  125,   -1,  125,   -1,  272,  273,  274,  275,
  276,  277,  278,  279,   -1,   -1,  257,   -1,   -1,  260,
   -1,   -1,   -1,  264,  265,  266,  125,   -1,   -1,   -1,
   -1,  272,  273,   -1,   -1,  276,  277,  278,  279,   -1,
  257,   -1,   -1,  260,   -1,  125,   -1,  264,  265,   -1,
   -1,   -1,   -1,   -1,   -1,  272,  273,   -1,   -1,  276,
  277,  278,  279,   -1,  125,   -1,  257,   -1,   -1,  260,
   -1,   -1,   -1,  264,  265,   -1,  257,   -1,   -1,  260,
   -1,  272,  273,  264,  265,  276,  277,  278,  279,  125,
   -1,  272,  273,   -1,   -1,  276,  277,  278,  279,   -1,
  257,   -1,   -1,  260,   -1,   -1,  125,  264,  265,   -1,
  257,   -1,   -1,  260,   -1,  272,  273,  264,  265,  276,
  277,  278,  279,  125,   -1,  272,  273,   -1,   -1,  276,
  277,  278,  279,   -1,  257,   -1,  257,  260,   -1,  260,
  125,  264,  265,  264,   -1,  266,   -1,   -1,   -1,  272,
  273,  272,  273,  276,  277,  278,  279,  278,  257,  125,
   -1,  260,   -1,   -1,   -1,  264,   -1,  266,  267,  125,
   -1,   -1,   -1,  272,  273,  274,  275,  257,   -1,  278,
  260,   -1,   -1,   -1,  264,   -1,  266,  267,  125,   -1,
   -1,   -1,  272,  273,  274,  275,  257,   -1,  278,  260,
   -1,   -1,   -1,  264,   -1,  266,  267,  125,   -1,   -1,
   -1,  272,  273,  274,  275,   -1,   -1,  278,  125,  257,
   -1,  257,  260,   -1,  260,   -1,  264,   -1,  264,   -1,
  266,  267,   -1,   -1,  272,  273,  272,  273,  257,  275,
  278,  260,  278,   -1,   -1,  264,   -1,  266,  267,   -1,
   -1,   -1,   -1,  272,  273,  257,  275,   -1,  260,  278,
   -1,   -1,  264,   -1,   -1,  267,   -1,   -1,   -1,  332,
  272,  273,  257,  275,   -1,  260,  278,   -1,   -1,  264,
  343,   -1,  267,   -1,   -1,  348,   -1,  272,  273,   -1,
  275,  257,   -1,  278,  260,   -1,   -1,   -1,  264,   -1,
  266,  257,   -1,   -1,  260,   -1,  272,  273,  264,  372,
  266,   -1,  278,   -1,   -1,   -1,  272,  273,   -1,   -1,
  257,   -1,  278,  260,  387,   -1,   -1,  264,  391,   -1,
   -1,   -1,   -1,   -1,   -1,  272,  273,   -1,   -1,  257,
   -1,  278,  260,   -1,   -1,   -1,  264,   -1,   -1,  412,
  257,   -1,   -1,  260,  272,  273,   -1,  264,   -1,   -1,
  278,   -1,  425,   -1,   -1,  272,  273,   -1,   -1,  257,
   -1,  278,  260,   -1,   -1,   -1,  264,  265,  266,  257,
   -1,   -1,  260,  446,  272,  273,  264,  265,  276,  277,
  278,  279,   -1,   -1,  272,  273,   -1,   -1,  276,  277,
  278,  279,  257,   -1,   -1,  260,   -1,   -1,   -1,  264,
   -1,  266,  257,   -1,   -1,  260,   -1,  272,  273,  264,
   -1,  266,   -1,  278,   -1,   -1,   -1,  272,  273,   -1,
   -1,   -1,   -1,  278,
};
}
final static short YYFINAL=3;
final static short YYMAXTOKEN=279;
final static String yyname[] = {
"end-of-file",null,null,null,null,null,null,null,null,null,null,null,null,null,
null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,
null,null,null,null,null,null,null,null,null,null,"'('","')'","'*'","'+'","','",
"'-'",null,"'/'",null,null,null,null,null,null,null,null,null,null,"':'","';'",
"'<'","'='","'>'",null,null,null,null,null,null,null,null,null,null,null,null,
null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,
null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,
null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,
"'{'",null,"'}'",null,null,null,null,null,null,null,null,null,null,null,null,
null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,
null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,
null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,
null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,
null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,
null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,
null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,
null,null,null,null,null,null,null,"ID","CTE","CADENA","IF","THEN","ELSE",
"ENDIF","OUT","FUN","RETURN","BREAK","ASIGNACION","COMP_MAYOR_IGUAL",
"COMP_MENOR_IGUAL","COMP_DISTINTO","WHEN","DO","UNTIL","CONTINUE","DOUBLE64",
"UINT16","DEFER","CONST",
};
final static String yyrule[] = {
"$accept : programa",
"programa : nombre_programa '{' sentencias '}'",
"programa : '{' sentencias '}'",
"programa : nombre_programa sentencias '}'",
"programa : nombre_programa '{' sentencias",
"programa : nombre_programa '{' '}'",
"nombre_programa : ID",
"sentencias : sentencia",
"sentencias : sentencias sentencia",
"sentencia : sentencia_declarativa",
"sentencia : sentencia_ejecutable",
"sentencia_declarativa : sentencia_declarativa_variables",
"sentencia_declarativa : funcion_con_return",
"sentencia_declarativa : funcion_sin_return",
"sentencia_declarativa : declaracion_constantes",
"sentencia_declarativa_variables : tipo lista_de_variables ';'",
"sentencia_declarativa_variables : tipo lista_de_variables",
"sentencia_declarativa_variables : lista_de_variables ';'",
"sentencia_declarativa_variables : tipo ';'",
"lista_de_variables : ID ',' lista_de_variables",
"lista_de_variables : ID",
"funcion_con_return : encabezado_funcion '{' sentencia_return '}'",
"funcion_con_return : encabezado_funcion '{' sentencias_funcion sentencia_return '}'",
"funcion_con_return : encabezado_funcion '{' '}'",
"sentencias_funcion : sentencia_funcion",
"sentencias_funcion : sentencias_funcion sentencia_funcion",
"sentencia_funcion : sentencia_declarativa",
"sentencia_funcion : sentencia_ejecutable_funcion",
"sentencia_ejecutable_funcion : asignacion",
"sentencia_ejecutable_funcion : DEFER asignacion",
"sentencia_ejecutable_funcion : imprimir",
"sentencia_ejecutable_funcion : DEFER imprimir",
"sentencia_ejecutable_funcion : sentencia_when_con_return",
"sentencia_ejecutable_funcion : DEFER sentencia_when_con_return",
"sentencia_ejecutable_funcion : sentencia_do_con_return",
"sentencia_ejecutable_funcion : DEFER sentencia_do_con_return",
"sentencia_ejecutable_funcion : sentencia_seleccion_simple_con_return",
"sentencia_ejecutable_funcion : DEFER sentencia_seleccion_simple_con_return",
"sentencias_ejecutables_funcion : sentencia_ejecutable_funcion",
"sentencias_ejecutables_funcion : sentencias_ejecutables_funcion sentencia_ejecutable_funcion",
"funcion_sin_return : encabezado_funcion '{' sentencia_seleccion_compuesta_con_return '}'",
"funcion_sin_return : encabezado_funcion '{' sentencias_funcion sentencia_seleccion_compuesta_con_return '}'",
"sentencia_seleccion_compuesta_con_return : IF '(' condicion ')' THEN sentencia_seleccion_compuesta_con_return_simple ELSE sentencia_seleccion_compuesta_con_return_simple ENDIF ';'",
"sentencia_seleccion_compuesta_con_return : IF '(' condicion ')' THEN '{' sentencias_ejecutables_funcion sentencia_return '}' ELSE sentencia_seleccion_compuesta_con_return_simple ENDIF ';'",
"sentencia_seleccion_compuesta_con_return : IF '(' condicion ')' THEN sentencia_seleccion_compuesta_con_return_simple ELSE '{' sentencias_ejecutables_funcion sentencia_return '}' ENDIF ';'",
"sentencia_seleccion_compuesta_con_return : IF '(' condicion ')' THEN '{' sentencias_ejecutables_funcion sentencia_return '}' ELSE '{' sentencias_ejecutables_funcion sentencia_return '}' ENDIF ';'",
"sentencia_seleccion_compuesta_con_return_simple : sentencia_return",
"sentencia_seleccion_compuesta_con_return_simple : sentencia_seleccion_compuesta_con_return",
"sentencia_seleccion_compuesta_con_return_simple : DEFER sentencia_seleccion_compuesta_con_return",
"sentencia_seleccion_simple_con_return : IF '(' condicion ')' THEN sentencia_return ENDIF ';'",
"sentencia_seleccion_simple_con_return : IF '(' condicion ')' THEN sentencia_seleccion_compuesta_con_return ENDIF ';'",
"sentencia_seleccion_simple_con_return : IF '(' condicion ')' THEN sentencia_ejecutable_funcion ENDIF ';'",
"sentencia_seleccion_simple_con_return : IF '(' condicion ')' THEN '{' sentencias_ejecutables_funcion sentencia_return '}' ENDIF ';'",
"sentencia_seleccion_simple_con_return : IF '(' condicion ')' THEN '{' sentencias_ejecutables_funcion sentencia_seleccion_compuesta_con_return '}' ENDIF ';'",
"sentencia_seleccion_simple_con_return : IF '(' condicion ')' THEN '{' sentencias_ejecutables_funcion sentencia_return '}' ELSE '{' sentencias_ejecutables_funcion '}' ENDIF ';'",
"sentencia_seleccion_simple_con_return : IF '(' condicion ')' THEN '{' sentencias_ejecutables_funcion sentencia_return '}' ELSE sentencia_ejecutable_funcion ENDIF ';'",
"sentencia_seleccion_simple_con_return : IF '(' condicion ')' THEN '{' sentencias_ejecutables_funcion sentencia_seleccion_compuesta_con_return '}' ELSE sentencia_ejecutable_funcion ENDIF ';'",
"sentencia_seleccion_simple_con_return : IF '(' condicion ')' THEN '{' sentencias_ejecutables_funcion sentencia_seleccion_compuesta_con_return '}' ELSE '{' sentencias_ejecutables_funcion '}' ENDIF ';'",
"sentencia_seleccion_simple_con_return : IF '(' condicion ')' THEN '{' sentencias_ejecutables_funcion '}' ELSE '{' sentencias_ejecutables_funcion sentencia_return '}' ENDIF ';'",
"sentencia_seleccion_simple_con_return : IF '(' condicion ')' THEN '{' sentencias_ejecutables_funcion '}' ELSE '{' sentencias_ejecutables_funcion sentencia_seleccion_compuesta_con_return '}' ENDIF ';'",
"sentencia_seleccion_simple_con_return : IF '(' condicion ')' THEN sentencia_ejecutable_funcion ELSE '{' sentencias_ejecutables_funcion sentencia_return '}' ENDIF ';'",
"sentencia_seleccion_simple_con_return : IF '(' condicion ')' THEN sentencia_ejecutable_funcion ELSE '{' sentencias_ejecutables_funcion sentencia_seleccion_compuesta_con_return '}' ENDIF ';'",
"sentencia_seleccion_simple_con_return : IF '(' condicion ')' THEN '{' sentencias_ejecutables_funcion '}' ELSE '{' sentencias_ejecutables_funcion '}' ENDIF ';'",
"sentencia_when_con_return : WHEN '(' condicion ')' THEN '{' sentencia_funcion '}' ';'",
"sentencia_when_con_return : WHEN '(' condicion ')' THEN '{' sentencia_funcion sentencia_return '}' ';'",
"sentencia_when_con_return : WHEN '(' condicion ')' THEN '{' sentencia_funcion sentencia_seleccion_compuesta_con_return '}' ';'",
"sentencia_when_con_return : WHEN '(' condicion ')' THEN '{' sentencia_funcion '}'",
"sentencia_when_con_return : WHEN '(' condicion ')' THEN '{' sentencia_funcion sentencia_return '}'",
"sentencia_when_con_return : WHEN '(' condicion ')' THEN '{' sentencia_funcion sentencia_seleccion_compuesta_con_return '}'",
"sentencia_when_con_return : WHEN '(' condicion ')' THEN '{' '}' ';'",
"sentencia_do_con_return : DO bloque_sentencias_ejecutables_do_con_return UNTIL '(' condicion ')' ';'",
"sentencia_do_con_return : etiqueta ':' DO bloque_sentencias_ejecutables_do_con_return UNTIL '(' condicion ')' ';'",
"bloque_sentencias_ejecutables_do_con_return : sentencia_return",
"bloque_sentencias_ejecutables_do_con_return : sentencia_seleccion_compuesta_con_return",
"bloque_sentencias_ejecutables_do_con_return : sentencias_ejecutables_do_funcion",
"bloque_sentencias_ejecutables_do_con_return : '{' sentencias_ejecutables_do_funcion sentencia_return '}'",
"bloque_sentencias_ejecutables_do_con_return : '{' sentencias_ejecutables_do_funcion sentencia_seleccion_compuesta_con_return '}'",
"bloque_sentencias_ejecutables_do_con_return : '{' sentencias_ejecutables_do_funcion '}'",
"bloque_sentencias_ejecutables_do_con_return : '{' '}'",
"bloque_sentencias_ejecutables_do_con_return : '{' sentencias_ejecutables_do_funcion sentencia_return",
"bloque_sentencias_ejecutables_do_con_return : sentencias_ejecutables_do_funcion sentencia_return '}'",
"bloque_sentencias_ejecutables_do_con_return : '{' sentencias_ejecutables_do_funcion sentencia_seleccion_compuesta_con_return",
"bloque_sentencias_ejecutables_do_con_return : sentencias_ejecutables_do_funcion sentencia_seleccion_compuesta_con_return '}'",
"bloque_sentencias_ejecutables_do_con_return : '{' sentencias_ejecutables_do_funcion",
"bloque_sentencias_ejecutables_do_con_return : sentencias_ejecutables_do_funcion '}'",
"sentencias_ejecutables_do_funcion : sentencia_ejecutable_do_funcion",
"sentencias_ejecutables_do_funcion : sentencias_ejecutables_do_funcion sentencia_ejecutable_do_funcion",
"sentencia_ejecutable_do_funcion : sentencia_ejecutable_funcion",
"sentencia_ejecutable_do_funcion : sentencia_break",
"sentencia_ejecutable_do_funcion : sentencia_continue",
"encabezado_funcion : FUN ID '(' ')' ':' tipo",
"encabezado_funcion : FUN ID '(' lista_de_parametros ')' ':' tipo",
"encabezado_funcion : FUN ID '(' ')' ':'",
"encabezado_funcion : FUN '(' ')' ':' tipo",
"encabezado_funcion : FUN ID ')' ':' tipo",
"encabezado_funcion : FUN ID '(' ':' tipo",
"encabezado_funcion : FUN ID '(' lista_de_parametros ')' ':'",
"encabezado_funcion : FUN '(' lista_de_parametros ')' ':' tipo",
"encabezado_funcion : FUN ID lista_de_parametros ')' ':' tipo",
"encabezado_funcion : FUN ID '(' lista_de_parametros ':' tipo",
"sentencia_return : RETURN '(' expresion ')' ';'",
"sentencia_return : RETURN '(' expresion ')'",
"sentencia_return : RETURN expresion ')'",
"sentencia_return : RETURN '(' expresion",
"sentencia_return : RETURN '(' ')' ';'",
"lista_de_parametros : parametro",
"lista_de_parametros : parametro ',' parametro",
"lista_de_parametros : parametro ',' parametro ',' lista_parametros_exceso",
"lista_parametros_exceso : parametro",
"lista_parametros_exceso : parametro ',' lista_parametros_exceso",
"parametro : tipo ID",
"parametro : tipo",
"$$1 :",
"parametro : $$1 ID",
"declaracion_constantes : CONST lista_declaracion_constantes ';'",
"declaracion_constantes : CONST lista_declaracion_constantes",
"declaracion_constantes : CONST ';'",
"lista_declaracion_constantes : declaracion_constante",
"lista_declaracion_constantes : declaracion_constante ',' lista_declaracion_constantes",
"declaracion_constante : ID ASIGNACION CTE",
"declaracion_constante : ID ASIGNACION",
"declaracion_constante : ID CTE",
"declaracion_constante : ID",
"sentencia_ejecutable : asignacion",
"sentencia_ejecutable : DEFER asignacion",
"sentencia_ejecutable : seleccion",
"sentencia_ejecutable : DEFER seleccion",
"sentencia_ejecutable : imprimir",
"sentencia_ejecutable : DEFER imprimir",
"sentencia_ejecutable : sentencia_when",
"sentencia_ejecutable : DEFER sentencia_when",
"sentencia_ejecutable : sentencia_do",
"sentencia_ejecutable : DEFER sentencia_do",
"sentencia_ejecutable_do : sentencia_ejecutable",
"sentencia_ejecutable_do : sentencia_break",
"sentencia_ejecutable_do : sentencia_continue",
"sentencia_break : BREAK ';'",
"sentencia_break : BREAK ':' etiqueta ';'",
"sentencia_break : BREAK",
"sentencia_break : BREAK ':' etiqueta",
"sentencia_break : BREAK ':' ';'",
"sentencia_continue : CONTINUE ';'",
"sentencia_continue : CONTINUE",
"sentencia_do : sentencia_do_simple",
"sentencia_do : etiqueta ':' sentencia_do_simple",
"sentencia_do_simple : DO bloque_sentencias_ejecutables_do UNTIL '(' condicion ')' ';'",
"sentencia_do_simple : DO bloque_sentencias_ejecutables_do UNTIL '(' condicion ')'",
"sentencia_do_simple : DO bloque_sentencias_ejecutables_do UNTIL '(' ')' ';'",
"sentencia_do_simple : DO bloque_sentencias_ejecutables_do UNTIL condicion ')' ';'",
"sentencia_do_simple : DO bloque_sentencias_ejecutables_do UNTIL '(' condicion ';'",
"etiqueta : ID",
"bloque_sentencias_ejecutables_do : sentencia_ejecutable_do",
"bloque_sentencias_ejecutables_do : '{' sentencias_ejecutables_do '}'",
"sentencias_ejecutables_do : sentencia_ejecutable_do",
"sentencias_ejecutables_do : sentencias_ejecutables_do sentencia_ejecutable_do",
"asignacion : ID ASIGNACION expresion ';'",
"asignacion : ID ASIGNACION ';'",
"asignacion : ID ASIGNACION expresion",
"sentencia_when : WHEN '(' condicion ')' THEN '{' sentencias_when '}' ';'",
"sentencia_when : WHEN '(' condicion ')' '{' sentencias_when '}' ';'",
"$$2 :",
"sentencia_when : WHEN '(' ')' THEN '{' sentencias_when '}' ';' $$2 WHEN '(' condicion ')' THEN '{' sentencias_when '}'",
"sentencia_when : WHEN '(' condicion ')' '{' sentencias_when '}'",
"sentencia_when : WHEN '(' condicion ')' '{' '}'",
"sentencias_when : sentencia",
"sentencias_when : sentencia sentencias_when",
"seleccion : IF '(' condicion ')' THEN bloque_sentencias_ejecutables_seleccion ENDIF ';'",
"seleccion : IF '(' condicion ')' THEN bloque_sentencias_ejecutables_seleccion ELSE bloque_sentencias_ejecutables_seleccion ENDIF ';'",
"bloque_sentencias_ejecutables_seleccion : sentencia_ejecutable",
"bloque_sentencias_ejecutables_seleccion : '{' sentencias_ejecutables '}'",
"sentencias_ejecutables : sentencia_ejecutable",
"sentencias_ejecutables : sentencias_ejecutables sentencia_ejecutable",
"condicion : expresion comparador expresion",
"condicion : expresion comparador",
"condicion : comparador expresion",
"comparador : COMP_MAYOR_IGUAL",
"comparador : COMP_MENOR_IGUAL",
"comparador : COMP_DISTINTO",
"comparador : '>'",
"comparador : '<'",
"comparador : '='",
"expresion : expresion '+' termino",
"expresion : expresion '-' termino",
"expresion : termino",
"termino : termino '*' factor",
"termino : termino '/' factor",
"termino : factor",
"factor : ID",
"factor : constante",
"factor : invocacion_funcion",
"invocacion_funcion : ID '(' ')'",
"invocacion_funcion : ID '(' lista_de_parametros_reales ')'",
"lista_de_parametros_reales : parametro_real",
"lista_de_parametros_reales : lista_de_parametros_reales ',' parametro_real",
"parametro_real : ID",
"parametro_real : constante",
"imprimir : OUT '(' CADENA ')' ';'",
"imprimir : OUT '(' ID ')' ';'",
"imprimir : OUT '(' ')' ';'",
"imprimir : OUT CADENA ')' ';'",
"imprimir : OUT '(' CADENA ';'",
"imprimir : OUT ID ')' ';'",
"imprimir : OUT '(' ID ';'",
"imprimir : OUT '(' CADENA ')'",
"imprimir : OUT '(' ID ')'",
"constante : CTE",
"constante : '-' CTE",
"tipo : UINT16",
"tipo : DOUBLE64",
};

//#line 389 ".\gramatica.y"

public static AnalizadorLexico lexico = null;
public static Logger logger = null;
public static TablaDeSimbolos ts = null;

public void constanteConSigno(String constante) {
	if (constante.contains(".")) {
		
		String negConstante = "-"+constante;
		
		Double parsedDouble = Double.parseDouble(negConstante.replace('D', 'E'));
		
		if (parsedDouble < -2.2250738585072014E-308 && -1.7976931348623157E+308 > parsedDouble) {
			logger.logWarning("[Parser] Rango invalido para la constante: " + negConstante + ", se trunca al rango permitido");
			
			if (-1.7976931348623157E+308 < parsedDouble) {
				negConstante = new String("-1.7976931348623157D+308");
			} else {
				negConstante =  new String("-2.2250738585072014D-308");
			}
		}
		
		ts.swapLexemas(constante, negConstante);
	} else {
		//se recibio un uint que fue aceptado por el lexico pero resulta ser negativo
		logger.logWarning("[Parser] No se admiten ui16 con valores negativos: " + "-"+constante + ", se trunca a 0");
		
		ts.swapLexemas(constante, "0");
	}
}	

public int yylex() {
	return lexico.yylex(yylval);
}

public void yyerror(String error) {
	logger.logError(error);
}

public static void main(String[] args) {
	if (args.length == 0) {
		System.err.println("No se especifico ningun archivo de codigo");
	} else {
		String archivo_a_leer = args[0];
		System.out.println("Se va a leer archivo " + archivo_a_leer);
		
		FileReaderHelper fileHelper = new FileReaderHelper();
		
		fileHelper.open(archivo_a_leer);
		
		Parser parser = new Parser();
		logger = new Logger();
		ts = new TablaDeSimbolos();
		lexico = new AnalizadorLexico(fileHelper, ts, logger);
		
        parser.run();

		String path = new File(archivo_a_leer).getAbsolutePath().replaceAll(args[0],"");
        
        Output out = new Output(path);
        
        String printTs = ts.print();
        
        
        out.saveFile("codigo-lexico.txt", logger.getLexico());
		out.saveFile("codigo-sintetico.txt", logger.getSintactico());
		out.saveFile("tabla-de-simbolos.txt", printTs);
        
		System.out.println(printTs);
	}
}
//#line 947 "Parser.java"
//###############################################################
// method: yylexdebug : check lexer state
//###############################################################
void yylexdebug(int state,int ch)
{
String s=null;
  if (ch < 0) ch=0;
  if (ch <= YYMAXTOKEN) //check index bounds
     s = yyname[ch];    //now get it
  if (s==null)
    s = "illegal-symbol";
  debug("state "+state+", reading "+ch+" ("+s+")");
}





//The following are now global, to aid in error reporting
int yyn;       //next next thing to do
int yym;       //
int yystate;   //current parsing state from state table
String yys;    //current token string


//###############################################################
// method: yyparse : parse input and execute indicated items
//###############################################################
int yyparse()
{
boolean doaction;
  init_stacks();
  yynerrs = 0;
  yyerrflag = 0;
  yychar = -1;          //impossible char forces a read
  yystate=0;            //initial state
  state_push(yystate);  //save it
  val_push(yylval);     //save empty value
  while (true) //until parsing is done, either correctly, or w/error
    {
    doaction=true;
    if (yydebug) debug("loop"); 
    //#### NEXT ACTION (from reduction table)
    for (yyn=yydefred[yystate];yyn==0;yyn=yydefred[yystate])
      {
      if (yydebug) debug("yyn:"+yyn+"  state:"+yystate+"  yychar:"+yychar);
      if (yychar < 0)      //we want a char?
        {
        yychar = yylex();  //get next token
        if (yydebug) debug(" next yychar:"+yychar);
        //#### ERROR CHECK ####
        if (yychar < 0)    //it it didn't work/error
          {
          yychar = 0;      //change it to default string (no -1!)
          if (yydebug)
            yylexdebug(yystate,yychar);
          }
        }//yychar<0
      yyn = yysindex[yystate];  //get amount to shift by (shift index)
      if ((yyn != 0) && (yyn += yychar) >= 0 &&
          yyn <= YYTABLESIZE && yycheck[yyn] == yychar)
        {
        if (yydebug)
          debug("state "+yystate+", shifting to state "+yytable[yyn]);
        //#### NEXT STATE ####
        yystate = yytable[yyn];//we are in a new state
        state_push(yystate);   //save it
        val_push(yylval);      //push our lval as the input for next rule
        yychar = -1;           //since we have 'eaten' a token, say we need another
        if (yyerrflag > 0)     //have we recovered an error?
           --yyerrflag;        //give ourselves credit
        doaction=false;        //but don't process yet
        break;   //quit the yyn=0 loop
        }

    yyn = yyrindex[yystate];  //reduce
    if ((yyn !=0 ) && (yyn += yychar) >= 0 &&
            yyn <= YYTABLESIZE && yycheck[yyn] == yychar)
      {   //we reduced!
      if (yydebug) debug("reduce");
      yyn = yytable[yyn];
      doaction=true; //get ready to execute
      break;         //drop down to actions
      }
    else //ERROR RECOVERY
      {
      if (yyerrflag==0)
        {
        yyerror("syntax error");
        yynerrs++;
        }
      if (yyerrflag < 3) //low error count?
        {
        yyerrflag = 3;
        while (true)   //do until break
          {
          if (stateptr<0)   //check for under & overflow here
            {
            yyerror("stack underflow. aborting...");  //note lower case 's'
            return 1;
            }
          yyn = yysindex[state_peek(0)];
          if ((yyn != 0) && (yyn += YYERRCODE) >= 0 &&
                    yyn <= YYTABLESIZE && yycheck[yyn] == YYERRCODE)
            {
            if (yydebug)
              debug("state "+state_peek(0)+", error recovery shifting to state "+yytable[yyn]+" ");
            yystate = yytable[yyn];
            state_push(yystate);
            val_push(yylval);
            doaction=false;
            break;
            }
          else
            {
            if (yydebug)
              debug("error recovery discarding state "+state_peek(0)+" ");
            if (stateptr<0)   //check for under & overflow here
              {
              yyerror("Stack underflow. aborting...");  //capital 'S'
              return 1;
              }
            state_pop();
            val_pop();
            }
          }
        }
      else            //discard this token
        {
        if (yychar == 0)
          return 1; //yyabort
        if (yydebug)
          {
          yys = null;
          if (yychar <= YYMAXTOKEN) yys = yyname[yychar];
          if (yys == null) yys = "illegal-symbol";
          debug("state "+yystate+", error recovery discards token "+yychar+" ("+yys+")");
          }
        yychar = -1;  //read another
        }
      }//end error recovery
    }//yyn=0 loop
    if (!doaction)   //any reason not to proceed?
      continue;      //skip action
    yym = yylen[yyn];          //get count of terminals on rhs
    if (yydebug)
      debug("state "+yystate+", reducing "+yym+" by rule "+yyn+" ("+yyrule[yyn]+")");
    if (yym>0)                 //if count of rhs not 'nil'
      yyval = val_peek(yym-1); //get current semantic value
    yyval = dup_yyval(yyval); //duplicate yyval if ParserVal is used as semantic value
    switch(yyn)
      {
//########## USER-SUPPLIED ACTIONS ##########
case 1:
//#line 17 ".\gramatica.y"
{ logger.logSuccess("[Parser] Programa correcto detectado"); }
break;
case 2:
//#line 18 ".\gramatica.y"
{ logger.logError("[Parser] Se esperaba un identificador nombre del programa"); }
break;
case 3:
//#line 19 ".\gramatica.y"
{ logger.logError("[Parser] Se esperaba un { antes de las sentencias del programa"); }
break;
case 4:
//#line 20 ".\gramatica.y"
{ logger.logError("[Parser] Se esperaba un } al final de las sentencias del programa"); }
break;
case 5:
//#line 21 ".\gramatica.y"
{ logger.logError("[Parser] Se esperaban sentencias del programa"); }
break;
case 15:
//#line 46 ".\gramatica.y"
{ logger.logSuccess("[Parser] Declaracion de lista de variables detectado"); }
break;
case 16:
//#line 47 ".\gramatica.y"
{ logger.logError("[Parser] Se esperaba un ; al final de la lista de variables"); }
break;
case 17:
//#line 48 ".\gramatica.y"
{ logger.logError("[Parser] Se esperaba un tipo para la lista de variables"); }
break;
case 18:
//#line 49 ".\gramatica.y"
{ logger.logError("[Parser] Se esperaba una variable o lista de variables"); }
break;
case 21:
//#line 58 ".\gramatica.y"
{ logger.logSuccess("[Parser] Declaracion de funcion detectado"); }
break;
case 22:
//#line 59 ".\gramatica.y"
{ logger.logSuccess("[Parser] Declaracion de funcion detectado"); }
break;
case 23:
//#line 60 ".\gramatica.y"
{ logger.logError("[Parser] Se esperaban sentencias en la funcion"); }
break;
case 40:
//#line 92 ".\gramatica.y"
{ logger.logSuccess("[Parser] Declaracion de funcion detectado"); }
break;
case 41:
//#line 93 ".\gramatica.y"
{ logger.logSuccess("[Parser] Declaracion de funcion detectado"); }
break;
case 42:
//#line 97 ".\gramatica.y"
{ logger.logSuccess("[Parser] Sentencia de seleccion detectada"); }
break;
case 43:
//#line 98 ".\gramatica.y"
{ logger.logSuccess("[Parser] Sentencia de seleccion detectada"); }
break;
case 44:
//#line 99 ".\gramatica.y"
{ logger.logSuccess("[Parser] Sentencia de seleccion detectada"); }
break;
case 45:
//#line 100 ".\gramatica.y"
{ logger.logSuccess("[Parser] Sentencia de seleccion detectada"); }
break;
case 49:
//#line 110 ".\gramatica.y"
{ logger.logSuccess("[Parser] Sentencia de seleccion detectada"); }
break;
case 50:
//#line 111 ".\gramatica.y"
{ logger.logSuccess("[Parser] Sentencia de seleccion detectada"); }
break;
case 51:
//#line 112 ".\gramatica.y"
{ logger.logSuccess("[Parser] Sentencia de seleccion detectada"); }
break;
case 52:
//#line 113 ".\gramatica.y"
{ logger.logSuccess("[Parser] Sentencia de seleccion detectada"); }
break;
case 53:
//#line 114 ".\gramatica.y"
{ logger.logSuccess("[Parser] Sentencia de seleccion detectada"); }
break;
case 54:
//#line 115 ".\gramatica.y"
{ logger.logSuccess("[Parser] Sentencia de seleccion detectada"); }
break;
case 55:
//#line 116 ".\gramatica.y"
{ logger.logSuccess("[Parser] Sentencia de seleccion detectada"); }
break;
case 56:
//#line 117 ".\gramatica.y"
{ logger.logSuccess("[Parser] Sentencia de seleccion detectada"); }
break;
case 57:
//#line 118 ".\gramatica.y"
{ logger.logSuccess("[Parser] Sentencia de seleccion detectada"); }
break;
case 58:
//#line 119 ".\gramatica.y"
{ logger.logSuccess("[Parser] Sentencia de seleccion detectada"); }
break;
case 59:
//#line 120 ".\gramatica.y"
{ logger.logSuccess("[Parser] Sentencia de seleccion detectada"); }
break;
case 60:
//#line 121 ".\gramatica.y"
{ logger.logSuccess("[Parser] Sentencia de seleccion detectada"); }
break;
case 61:
//#line 122 ".\gramatica.y"
{ logger.logSuccess("[Parser] Sentencia de seleccion detectada"); }
break;
case 62:
//#line 123 ".\gramatica.y"
{ logger.logSuccess("[Parser] Sentencia de seleccion detectada"); }
break;
case 63:
//#line 127 ".\gramatica.y"
{ logger.logSuccess("[Parser] Sentencia when detectada"); }
break;
case 64:
//#line 128 ".\gramatica.y"
{ logger.logSuccess("[Parser] Sentencia when detectada"); }
break;
case 65:
//#line 129 ".\gramatica.y"
{ logger.logSuccess("[Parser] Sentencia when detectada"); }
break;
case 66:
//#line 130 ".\gramatica.y"
{ logger.logError("[Parser] Se esperaba ; al final de la sentencia when"); }
break;
case 67:
//#line 131 ".\gramatica.y"
{ logger.logError("[Parser] Se esperaba ; al final de la sentencia when"); }
break;
case 68:
//#line 132 ".\gramatica.y"
{ logger.logError("[Parser] Se esperaba ; al final de la sentencia when"); }
break;
case 69:
//#line 133 ".\gramatica.y"
{ logger.logError("[Parser] Se esperaban sentencias en la sentencia when"); }
break;
case 70:
//#line 137 ".\gramatica.y"
{ logger.logSuccess("[Parser] Sentencia do until detectada"); }
break;
case 71:
//#line 138 ".\gramatica.y"
{ logger.logSuccess("[Parser] Sentencia do until detectada"); }
break;
case 78:
//#line 148 ".\gramatica.y"
{ logger.logError("[Parser] Se esperaban sentencias en la sentencia do"); }
break;
case 79:
//#line 149 ".\gramatica.y"
{ logger.logError("[Parser] Se esperaba un } al final de la sentencia do"); }
break;
case 80:
//#line 150 ".\gramatica.y"
{ logger.logError("[Parser] Se esperaba un } al final de la sentencia do"); }
break;
case 81:
//#line 151 ".\gramatica.y"
{ logger.logError("[Parser] Se esperaba un } al final de la sentencia do"); }
break;
case 82:
//#line 152 ".\gramatica.y"
{ logger.logError("[Parser] Se esperaba un } al final de la sentencia do"); }
break;
case 83:
//#line 153 ".\gramatica.y"
{ logger.logError("[Parser] Se esperaba un } al final de la sentencia do"); }
break;
case 84:
//#line 154 ".\gramatica.y"
{ logger.logError("[Parser] Se esperaba un } al final de la sentencia do"); }
break;
case 92:
//#line 171 ".\gramatica.y"
{ logger.logError("[Parser] Se esperaba un tipo de return para la funcion"); }
break;
case 93:
//#line 172 ".\gramatica.y"
{ logger.logError("[Parser] Se esperaba un identificador nombre para la funcion"); }
break;
case 94:
//#line 173 ".\gramatica.y"
{ logger.logError("[Parser] Se esperaba un ( luego del nombre de la funcion"); }
break;
case 95:
//#line 174 ".\gramatica.y"
{ logger.logError("[Parser] Se esperaba un ) luego del nombre para la funcion"); }
break;
case 96:
//#line 175 ".\gramatica.y"
{ logger.logError("[Parser] Se esperaba un tipo de return para la funcion"); }
break;
case 97:
//#line 176 ".\gramatica.y"
{ logger.logError("[Parser] Se esperaba un identificador nombre para la funcion"); }
break;
case 98:
//#line 177 ".\gramatica.y"
{ logger.logError("[Parser] Se esperaba un ( luego del nombre de la funcion"); }
break;
case 99:
//#line 178 ".\gramatica.y"
{ logger.logError("[Parser] Se esperaba un ) luego del nombre para la funcion"); }
break;
case 101:
//#line 183 ".\gramatica.y"
{ logger.logError("[Parser] Se esperaba un ; al final de la sentencia return"); }
break;
case 102:
//#line 184 ".\gramatica.y"
{ logger.logError("[Parser] Se esperaba un ( en la sentencia return"); }
break;
case 103:
//#line 185 ".\gramatica.y"
{ logger.logError("[Parser] Se esperaba un ) en la sentencia return"); }
break;
case 104:
//#line 186 ".\gramatica.y"
{ logger.logError("[Parser] Se esperaba una expresion en la sentencia return"); }
break;
case 107:
//#line 192 ".\gramatica.y"
{ logger.logError("[Parser] Hay mas de 2 parametros en la funcion"); }
break;
case 112:
//#line 202 ".\gramatica.y"
{ logger.logError("[Parser] Se esperaba un identificador nombre para el parametro"); }
break;
case 113:
//#line 203 ".\gramatica.y"
{ logger.logError("[Parser] Se esperaba un tipo valido para el parametro"); }
break;
case 114:
//#line 207 ".\gramatica.y"
{ logger.logSuccess("[Parser] Declaracion de constantes detectado"); }
break;
case 115:
//#line 208 ".\gramatica.y"
{ logger.logError("[Parser] Se esperaba ; al final de la declaracion de constantes"); }
break;
case 116:
//#line 209 ".\gramatica.y"
{ logger.logError("[Parser] Se esperaba una lista de declaracion de constantes"); }
break;
case 120:
//#line 219 ".\gramatica.y"
{ logger.logError("[Parser] Se esperaba una constante del lado derecho de la asignacion"); }
break;
case 121:
//#line 220 ".\gramatica.y"
{ logger.logError("[Parser] Se esperaba el simbolo asignacion en la declaracion de constantes"); }
break;
case 122:
//#line 221 ".\gramatica.y"
{ logger.logError("[Parser] Se esperaba una asignacion en la declaracion de constantes"); }
break;
case 136:
//#line 244 ".\gramatica.y"
{ logger.logSuccess("[Parser] Sentencia break detectada"); }
break;
case 137:
//#line 245 ".\gramatica.y"
{ logger.logSuccess("[Parser] Sentencia break con etiqueta detectada"); }
break;
case 138:
//#line 246 ".\gramatica.y"
{ logger.logError("[Parser] Se esperaba un ; luego de la sentencia break"); }
break;
case 139:
//#line 247 ".\gramatica.y"
{ logger.logError("[Parser] Se esperaba un ; luego de la sentencia break"); }
break;
case 140:
//#line 248 ".\gramatica.y"
{ logger.logError("[Parser] Se esperaba una etiqueta en la sentencia break"); }
break;
case 141:
//#line 252 ".\gramatica.y"
{ logger.logSuccess("[Parser] Sentencia continue detectada"); }
break;
case 142:
//#line 253 ".\gramatica.y"
{ logger.logError("[Parser] Se esperaba un ; al final de la sentencia continue"); }
break;
case 145:
//#line 262 ".\gramatica.y"
{ logger.logSuccess("[Parser] Sentencia do until detectada"); }
break;
case 146:
//#line 263 ".\gramatica.y"
{ logger.logError("[Parser] Se esperaba un ; al final de la sentencia do"); }
break;
case 147:
//#line 264 ".\gramatica.y"
{ logger.logError("[Parser] Se esperaba una condicion para la sentencia do"); }
break;
case 148:
//#line 265 ".\gramatica.y"
{ logger.logSuccess("[Parser] Se esperaba un ( en la condicion para la sentencia do"); }
break;
case 149:
//#line 266 ".\gramatica.y"
{ logger.logSuccess("[Parser] Se esperaba un ) en la condicion para la sentencia do"); }
break;
case 155:
//#line 284 ".\gramatica.y"
{ logger.logSuccess("[Parser] Asignacion detectada"); }
break;
case 156:
//#line 285 ".\gramatica.y"
{logger.logError("[Parser] Se espera una expresion del lado derecho de la asignacion");}
break;
case 157:
//#line 286 ".\gramatica.y"
{ logger.logError("[Parser] Se espera un ; al final de la asignacion"); }
break;
case 158:
//#line 290 ".\gramatica.y"
{ logger.logSuccess("[Parser] Sentencia when detectada"); }
break;
case 159:
//#line 291 ".\gramatica.y"
{ logger.logError("[Parser] Se esperaba la palabra reservada then en la sentencia when"); }
break;
case 160:
//#line 292 ".\gramatica.y"
{ logger.logError("[Parser] Se esperaba una condicion en la sentencia when"); }
break;
case 161:
//#line 293 ".\gramatica.y"
{ logger.logError("[Parser] Se esperaba un ; al final de la sentencia when"); }
break;
case 162:
//#line 294 ".\gramatica.y"
{ logger.logError("[Parser] Se esperaba la palabra reservada then en la sentencia when"); }
break;
case 163:
//#line 295 ".\gramatica.y"
{ logger.logError("[Parser] Se esperaban sentencias dentro del when"); }
break;
case 166:
//#line 304 ".\gramatica.y"
{ logger.logSuccess("[Parser] Sentencia if then detectada"); }
break;
case 167:
//#line 305 ".\gramatica.y"
{ logger.logSuccess("[Parser] Sentencia if then else detectada"); }
break;
case 173:
//#line 320 ".\gramatica.y"
{ logger.logError("[Parser] Se esperaba un expresion del lado derecho de la comparacion"); }
break;
case 174:
//#line 321 ".\gramatica.y"
{ logger.logError("[Parser] Se esperaba un expresion del lado izquierdo de la comparacion"); }
break;
case 196:
//#line 367 ".\gramatica.y"
{ logger.logSuccess("[Parser] Sentencia out detectada"); }
break;
case 197:
//#line 368 ".\gramatica.y"
{ logger.logSuccess("[Parser] Sentencia out detectada"); }
break;
case 198:
//#line 369 ".\gramatica.y"
{ logger.logError("[Parser] Se esperaba una cadena o identificador en la sentencia out"); }
break;
case 199:
//#line 370 ".\gramatica.y"
{ logger.logError("[Parser] Se esperaba un ( en la sentencia out"); }
break;
case 200:
//#line 371 ".\gramatica.y"
{ logger.logError("[Parser] Se esperaba un ) en la sentencia out"); }
break;
case 201:
//#line 372 ".\gramatica.y"
{ logger.logError("[Parser] Se esperaba un ( en la sentencia out"); }
break;
case 202:
//#line 373 ".\gramatica.y"
{ logger.logError("[Parser] Se esperaba un ) en la sentencia out"); }
break;
case 203:
//#line 374 ".\gramatica.y"
{ logger.logError("[Parser] Se espera un ; al final de la sentencia out"); }
break;
case 204:
//#line 375 ".\gramatica.y"
{ logger.logError("[Parser] Se espera un ; al final de la sentencia out"); }
break;
case 206:
//#line 380 ".\gramatica.y"
{ constanteConSigno(val_peek(0).sval); }
break;
//#line 1512 "Parser.java"
//########## END OF USER-SUPPLIED ACTIONS ##########
    }//switch
    //#### Now let's reduce... ####
    if (yydebug) debug("reduce");
    state_drop(yym);             //we just reduced yylen states
    yystate = state_peek(0);     //get new state
    val_drop(yym);               //corresponding value drop
    yym = yylhs[yyn];            //select next TERMINAL(on lhs)
    if (yystate == 0 && yym == 0)//done? 'rest' state and at first TERMINAL
      {
      if (yydebug) debug("After reduction, shifting from state 0 to state "+YYFINAL+"");
      yystate = YYFINAL;         //explicitly say we're done
      state_push(YYFINAL);       //and save it
      val_push(yyval);           //also save the semantic value of parsing
      if (yychar < 0)            //we want another character?
        {
        yychar = yylex();        //get next character
        if (yychar<0) yychar=0;  //clean, if necessary
        if (yydebug)
          yylexdebug(yystate,yychar);
        }
      if (yychar == 0)          //Good exit (if lex returns 0 ;-)
         break;                 //quit the loop--all DONE
      }//if yystate
    else                        //else not done yet
      {                         //get next state and push, for next yydefred[]
      yyn = yygindex[yym];      //find out where to go
      if ((yyn != 0) && (yyn += yystate) >= 0 &&
            yyn <= YYTABLESIZE && yycheck[yyn] == yystate)
        yystate = yytable[yyn]; //get new state
      else
        yystate = yydgoto[yym]; //else go to new defred
      if (yydebug) debug("after reduction, shifting from state "+state_peek(0)+" to state "+yystate+"");
      state_push(yystate);     //going again, so push state & val...
      val_push(yyval);         //for next action
      }
    }//main loop
  return 0;//yyaccept!!
}
//## end of method parse() ######################################



//## run() --- for Thread #######################################
/**
 * A default run method, used for operating this parser
 * object in the background.  It is intended for extending Thread
 * or implementing Runnable.  Turn off with -Jnorun .
 */
public void run()
{
  yyparse();
}
//## end of method run() ########################################



//## Constructors ###############################################
/**
 * Default constructor.  Turn off with -Jnoconstruct .

 */
public Parser()
{
  //nothing to do
}


/**
 * Create a parser, setting the debug to true or false.
 * @param debugMe true for debugging, false for no debug.
 */
public Parser(boolean debugMe)
{
  yydebug=debugMe;
}
//###############################################################



}
//################### END OF CLASS ##############################
