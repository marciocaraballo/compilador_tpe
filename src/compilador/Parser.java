//### This file created by BYACC 1.8(/Java extension  1.15)
//### Java capabilities added 7 Jan 97, Bob Jamison
//### Updated : 27 Nov 97  -- Bob Jamison, Joe Nieten
//###           01 Jan 98  -- Bob Jamison -- fixed generic semantic constructor
//###           01 Jun 99  -- Bob Jamison -- added Runnable support
//###           06 Aug 00  -- Bob Jamison -- made state variables class-global
//###           03 Jan 01  -- Bob Jamison -- improved flags, tracing
//###           16 May 01  -- Bob Jamison -- added custom stack sizing
//###           04 Mar 02  -- Yuval Oren  -- improved java performance, added options
//###           14 Mar 02  -- Tomas Hurka -- -d support, static initializer workaround
//### Please send bug reports to tom@hukatronic.cz
//### static char yysccsid[] = "@(#)yaccpar	1.8 (Berkeley) 01/20/90";






//#line 2 ".\gramatica.y"
package compilador;
import java.io.File;
//#line 20 "Parser.java"




public class Parser
{

boolean yydebug;        //do I want debug output?
int yynerrs;            //number of errors so far
int yyerrflag;          //was there an error?
int yychar;             //the current working character

//########## MESSAGES ##########
//###############################################################
// method: debug
//###############################################################
void debug(String msg)
{
  if (yydebug)
    System.out.println(msg);
}

//########## STATE STACK ##########
final static int YYSTACKSIZE = 500;  //maximum stack size
int statestk[] = new int[YYSTACKSIZE]; //state stack
int stateptr;
int stateptrmax;                     //highest index of stackptr
int statemax;                        //state when highest index reached
//###############################################################
// methods: state stack push,pop,drop,peek
//###############################################################
final void state_push(int state)
{
  try {
		stateptr++;
		statestk[stateptr]=state;
	 }
	 catch (ArrayIndexOutOfBoundsException e) {
     int oldsize = statestk.length;
     int newsize = oldsize * 2;
     int[] newstack = new int[newsize];
     System.arraycopy(statestk,0,newstack,0,oldsize);
     statestk = newstack;
     statestk[stateptr]=state;
  }
}
final int state_pop()
{
  return statestk[stateptr--];
}
final void state_drop(int cnt)
{
  stateptr -= cnt; 
}
final int state_peek(int relative)
{
  return statestk[stateptr-relative];
}
//###############################################################
// method: init_stacks : allocate and prepare stacks
//###############################################################
final boolean init_stacks()
{
  stateptr = -1;
  val_init();
  return true;
}
//###############################################################
// method: dump_stacks : show n levels of the stacks
//###############################################################
void dump_stacks(int count)
{
int i;
  System.out.println("=index==state====value=     s:"+stateptr+"  v:"+valptr);
  for (i=0;i<count;i++)
    System.out.println(" "+i+"    "+statestk[i]+"      "+valstk[i]);
  System.out.println("======================");
}


//########## SEMANTIC VALUES ##########
//public class ParserVal is defined in ParserVal.java


String   yytext;//user variable to return contextual strings
ParserVal yyval; //used to return semantic vals from action routines
ParserVal yylval;//the 'lval' (result) I got from yylex()
ParserVal valstk[];
int valptr;
//###############################################################
// methods: value stack push,pop,drop,peek.
//###############################################################
void val_init()
{
  valstk=new ParserVal[YYSTACKSIZE];
  yyval=new ParserVal();
  yylval=new ParserVal();
  valptr=-1;
}
void val_push(ParserVal val)
{
  if (valptr>=YYSTACKSIZE)
    return;
  valstk[++valptr]=val;
}
ParserVal val_pop()
{
  if (valptr<0)
    return new ParserVal();
  return valstk[valptr--];
}
void val_drop(int cnt)
{
int ptr;
  ptr=valptr-cnt;
  if (ptr<0)
    return;
  valptr = ptr;
}
ParserVal val_peek(int relative)
{
int ptr;
  ptr=valptr-relative;
  if (ptr<0)
    return new ParserVal();
  return valstk[ptr];
}
final ParserVal dup_yyval(ParserVal val)
{
  ParserVal dup = new ParserVal();
  dup.ival = val.ival;
  dup.dval = val.dval;
  dup.sval = val.sval;
  dup.obj = val.obj;
  return dup;
}
//#### end semantic value section ####
public final static short ID=257;
public final static short CTE=258;
public final static short CADENA=259;
public final static short IF=260;
public final static short THEN=261;
public final static short ELSE=262;
public final static short ENDIF=263;
public final static short OUT=264;
public final static short FUN=265;
public final static short RETURN=266;
public final static short BREAK=267;
public final static short ASIGNACION=268;
public final static short COMP_MAYOR_IGUAL=269;
public final static short COMP_MENOR_IGUAL=270;
public final static short COMP_DISTINTO=271;
public final static short WHEN=272;
public final static short DO=273;
public final static short UNTIL=274;
public final static short CONTINUE=275;
public final static short DOUBLE64=276;
public final static short UINT16=277;
public final static short DEFER=278;
public final static short CONST=279;
public final static short YYERRCODE=256;
final static short yylhs[] = {                           -1,
    0,    0,    0,    0,    0,    1,    2,    2,    3,    3,
    4,    4,    4,    4,    6,    6,    6,    6,   11,   11,
    7,    7,    7,   14,   14,   15,   15,   15,   15,   15,
   15,   15,   15,   15,   15,    8,    8,   19,   19,   19,
   19,   18,   18,   22,   16,   23,   23,   17,   17,   17,
   17,   12,   12,   12,   12,   12,   12,   12,   12,   12,
   12,   13,   13,   13,   13,   13,   26,   26,   26,   29,
   29,   28,   28,   30,   28,    9,    9,    9,   31,   31,
   32,   32,   32,   32,    5,    5,    5,    5,    5,    5,
    5,    5,    5,    5,   38,   38,   38,   39,   39,   39,
   39,   39,   40,   40,   37,   37,   41,   41,   41,   41,
   41,   24,   42,   42,   25,   25,   33,   33,   33,   36,
   36,   44,   36,   36,   36,   43,   43,   34,   34,   34,
   34,   34,   34,   34,   34,   34,   34,   34,   34,   34,
   34,   34,   34,   45,   45,   45,   45,   45,   21,   21,
   20,   20,   20,   46,   46,   46,   46,   46,   46,   27,
   27,   27,   47,   47,   47,   48,   48,   48,   50,   50,
   51,   51,   52,   52,   35,   35,   35,   35,   35,   35,
   35,   35,   35,   49,   49,   10,   10,
};
final static short yylen[] = {                            2,
    4,    3,    3,    3,    3,    1,    1,    2,    1,    1,
    1,    1,    1,    1,    3,    2,    2,    2,    3,    1,
    4,    5,    3,    1,    2,    1,    1,    1,    2,    1,
    2,    1,    2,    1,    2,    4,    5,   10,   13,   13,
   16,    8,   11,    0,   20,    1,    2,    7,    9,   10,
   12,    6,    7,    5,    5,    5,    5,    6,    6,    6,
    6,    5,    4,    3,    3,    4,    1,    3,    5,    1,
    3,    2,    1,    0,    2,    3,    2,    2,    1,    3,
    3,    2,    2,    1,    1,    2,    1,    2,    1,    2,
    1,    2,    1,    2,    1,    1,    1,    2,    4,    1,
    3,    3,    2,    1,    1,    3,    7,    6,    6,    6,
    6,    1,    1,    3,    1,    2,    4,    3,    3,    9,
    8,    0,   17,    7,    6,    1,    2,    8,   10,    7,
    7,    7,    7,    7,    7,    9,    9,    9,    9,    9,
    9,    9,    8,    1,    3,    2,    2,    2,    1,    2,
    3,    2,    2,    1,    1,    1,    1,    1,    1,    3,
    3,    1,    3,    3,    1,    1,    1,    1,    3,    4,
    1,    3,    1,    1,    5,    5,    4,    4,    4,    4,
    4,    4,    4,    1,    2,    1,    1,
};
final static short yydefred[] = {                         0,
    6,    0,    0,    0,    0,    0,    0,    0,    0,    0,
  187,  186,    0,    0,    0,    7,    9,   10,   11,   12,
   13,   14,    0,    0,    0,    0,   85,   87,   89,   91,
   93,  105,    0,    0,    0,    0,    0,  184,  154,  155,
  156,    0,    0,  157,  158,  159,    0,    0,    0,    0,
  165,  167,  168,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,   95,  113,   96,   97,    0,   86,   88,
   90,   92,   94,    0,   78,    0,    0,    2,    8,    0,
   18,    0,   17,    0,    0,    5,    0,    3,  118,    0,
   19,    0,  185,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,   98,    0,  103,
    0,  115,    0,   83,    0,   76,    0,   15,    0,    0,
    0,    0,    0,   23,   26,   27,    0,    0,   24,   28,
   30,   32,    0,    0,  106,    1,  117,  173,  169,  174,
    0,  171,    0,    0,    0,    0,    0,    0,    0,  163,
  164,  180,  178,  181,    0,  179,    0,  177,    0,    0,
    0,    0,   72,    0,    0,   75,    0,    0,    0,    0,
  112,  102,    0,  114,  116,    0,    0,   81,   80,    0,
    0,    0,    0,    0,    0,   29,   31,   33,   35,   21,
    0,   25,    0,   36,    0,    0,  170,    0,    0,    0,
    0,    0,    0,    0,    0,  176,  175,    0,   57,    0,
    0,   56,    0,    0,   55,    0,    0,    0,    0,   99,
    0,    0,    0,    0,    0,    0,   64,    0,    0,    0,
   22,   37,    0,  172,  148,  149,    0,  146,  150,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
   52,    0,   61,   60,    0,   59,    0,    0,    0,  125,
    0,  109,  111,    0,  110,    0,   66,    0,    0,    0,
    0,    0,    0,  145,    0,  132,    0,  130,    0,    0,
  135,    0,    0,    0,  133,    0,  131,   53,    0,   69,
  127,    0,    0,    0,  107,    0,   62,    0,    0,    0,
    0,    0,    0,    0,  143,    0,    0,    0,  128,    0,
    0,    0,  122,    0,  121,    0,    0,    0,    0,    0,
    0,    0,  138,  136,  140,  141,    0,  139,  137,   71,
    0,  120,    0,    0,    0,    0,    0,   48,    0,    0,
  129,    0,    0,    0,    0,   42,    0,    0,    0,    0,
    0,    0,    0,    0,   44,    0,    0,   49,    0,    0,
    0,    0,   38,    0,   50,    0,    0,    0,    0,   43,
    0,    0,    0,    0,    0,    0,    0,    0,   51,    0,
    0,   39,   40,    0,    0,    0,    0,  123,    0,    0,
   41,    0,   46,   34,    0,    0,   47,    0,   45,
};
final static short yydgoto[] = {                          3,
    4,   15,  267,   17,  209,   19,   20,   21,   22,   23,
   24,   25,  137,  138,  139,  140,  141,  142,  404,   47,
  210,  374,  405,   26,  121,  111,   48,  112,  300,  113,
   76,   77,   27,   28,   29,   30,   31,   65,   66,   67,
   32,   68,  303,  341,  214,   49,   50,   51,   52,   53,
  151,  152,
};
final static short yysindex[] = {                       -68,
    0, 1173,    0,  537,  -39,   44,   -5,  -17,   62,  749,
    0,    0,  138,  -48,  877,    0,    0,    0,    0,    0,
    0,    0,  -40,   -6,  -55,   69,    0,    0,    0,    0,
    0,    0,  900,  910,   53, -146,   93,    0,    0,    0,
    0, -117,  695,    0,    0,    0,  119,   17,   65,  107,
    0,    0,    0,  130,  137,    9,  -34,  -15,  720,  -78,
   97,  167, 1219,    0,    0,    0,    0,  -56,    0,    0,
    0,    0,    0, -151,    0,  179,  200,    0,    0,  206,
    0,  214,    0,  854,  -14,    0,  935,    0,    0,   94,
    0,   26,    0,   14,  -37,   20,   65,   65,   65,  162,
   65,   65,  230,  232,   13,   15,  239,  -19,  248,   72,
  277,  301,   90,  304,  324,  116,  339,    0,  -35,    0,
 1055,    0,   63,    0,  141,    0,  125,    0,  102,    6,
  361,  414,  563,    0,    0,    0,  295,  494,    0,    0,
    0,    0,  308,  377,    0,    0,    0,    0,    0,    0,
   52,    0,  837,  837,  776,  837,  107,  107,  162,    0,
    0,    0,    0,    0,  378,    0,  379,    0,  381,   27,
   28,   27,    0,  382,   27,    0,   27,  383,  313,  -96,
    0,    0,  384,    0,    0,  723,  401,    0,    0,  695,
   42,  159,  720, 1219,  171,    0,    0,    0,    0,    0,
  321,    0,  330,    0,  205,   81,    0, 1101,    0, 1111,
   54,   74,  766,  112,  122,    0,    0,   27,    0,  443,
   27,    0,   27,  448,    0,   27, 1173,  392,  945,    0,
  458,   16,  465,  -27,  466,  299,    0,  485, 1033,  487,
    0,    0,  673,    0,    0,    0, 1130,    0,    0,  837,
  479,  837,  481,  795,  488,  124,  837,  489,  837,  490,
    0,   27,    0,    0,   27,    0, 1173,  425, 1173,    0,
  435,    0,    0,  502,    0,  818,    0,  503,  -94,  438,
  121, 1219,  292,    0,  302,    0,  312,    0,  517,  314,
    0,  835,  519,  325,    0,  326,    0,    0,  543,    0,
    0,  531,  467,  534,    0,  -87,    0,  472,  322,  556,
 1033,  558,  540,  542,    0,  545,  552,  350,    0,  565,
  566,   27,    0,  575,    0, 1101,  131, 1140,  562,  576,
  511,  121,    0,    0,    0,    0,  588,    0,    0,    0,
  376,    0, 1091,  -86,  598,  533,  121,    0,  385,  629,
    0,  635,  554,  412,  419,    0,  618,  642,  648,  636,
  121,  134, -144,  643,    0,  644,  121,    0,  663,  -82,
  646,  589,    0,  445,    0,  674,  460,  412,  456,    0,
  459,  683,  665,  602, -144,  668,  669,  121,    0, 1173,
  605,    0,    0,  696,  619,  480,  491,    0,  694,  640,
    0, 1196,    0,    0,  494,  649,    0,  710,    0,
};
final static short yyrindex[] = {                         0,
    0,    0,    0,    0,  291,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,  152,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,  187,
    0,    0,    0,    0,    0,    0,  125,  125,    0,  717,
  968,  987,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,   91,    0,  469,  591,    0,    0,  614,
    0,  637,    0,    0,    0,    0,  777,    0,    0,  256,
    0,    0,    0,    0,    0,    0,    0,    0,  -38,  -26,
    0,    0,    0,    0,    0,    0,    0,  125,    0,    8,
    0,   32,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,  568,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0, 1163,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,  210,  233,  -25,    0,
    0,    0,    0,    0,  279,    0,  307,    0,    0,    0,
    0,    0,    0,    0,  125,    0,    0,    0,    0,    0,
    0,    0, 1010,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0, 1163,    0,    0,    0,    0,    0, 1072,    0,
    0,    0,    0,    0,    0,    0,    0,  653,    0,    0,
    0,    0,    0,   73,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0, -105,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,  143,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,  655,    0,    0,  125,    0,  654,    0,    0,    0,
    0,    0,    0,  343,    0,    0,    0,   34,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,  366,    0,    0,    0,    0,    0,   80,    0,
    0,    0,    0,  389,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,  125,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,  434,    0,    0,    0,
    0,    0,  143,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,
};
final static short yygindex[] = {                         0,
    0,   61,  716,  -74,   -2,    0,    0,    0,    0,  750,
  109,    0,  600,    0, -120,  656,  657,  658,  -41,  -42,
 -180,    0,    0,  -75, -164,  -20,   10, -150,  464,    0,
  660,    0,   35,   82,   86,   87,   88,  -51,    0,    0,
   -9,    0, -187,    0,  909,  740,  310,  252,  -45,    0,
    0,  586,
};
final static int YYTABLESIZE=1497;
static short yytable[];
static { yytable();}
static void yytable(){
yytable = new short[]{                         18,
   95,   18,  152,  155,   36,  108,  109,   64,  144,  135,
   75,  122,   18,  276,  153,  151,  117,  202,   81,   65,
  152,  169,   58,  182,  224,  114,  229,  247,  229,  239,
   18,   18,  153,  151,   56,  326,  354,  115,  170,  268,
  378,  271,  143,  183,   90,  191,  150,   69,   73,  107,
   42,   73,   83,  165,    2,  167,  274,  144,  100,   97,
   64,   98,  144,  135,   34,   73,  149,   84,  220,  185,
   42,  164,   67,  166,  273,  145,   45,   46,   44,  301,
  187,  136,  235,   43,   18,  221,   42,  171,   42,   67,
   84,  199,  207,   87,   70,  206,  203,   42,   71,   72,
   73,   59,  186,   45,   46,   44,  124,   42,  159,   42,
   80,   89,   60,   68,  299,    6,  125,  311,   64,    7,
   70,  130,   45,   46,   44,   42,   85,    9,   10,   64,
   68,   82,   92,   13,   84,  136,   97,   70,   98,  192,
   93,  190,  122,  232,   91,  343,   42,  234,  101,   84,
  238,  166,  147,  102,  119,  118,   65,   65,   63,   96,
  150,   45,   46,   44,  228,   42,  308,   69,   65,   60,
  103,  299,    6,  363,  254,  255,    7,  104,  130,  130,
   45,   46,   44,  130,    9,   10,  162,  185,    1,   35,
   13,   64,  166,  166,  166,  145,  166,  385,  166,  237,
  236,   97,  395,   98,   97,  246,   98,  249,   74,  160,
  166,  166,  166,  166,   70,   84,   80,  123,   71,   72,
   73,  181,  152,  154,   18,  120,   18,  162,   35,  162,
  122,  162,  161,  154,  153,  151,   64,  126,  310,   57,
   64,   11,   12,  127,  249,  162,  162,  162,  162,   36,
  160,   54,  160,   55,  160,  119,   11,   12,   10,  185,
   11,   12,   37,   38,   18,  105,   18,  106,  160,  160,
  160,  160,  128,  161,  153,  161,  166,  161,  183,   64,
  156,  403,  148,   38,  407,   39,   40,   41,  162,  350,
  163,  161,  161,  161,  161,   63,   63,  168,   37,   38,
   37,   38,   11,   12,  358,  172,  182,   63,   64,   37,
   38,  162,   39,   40,   41,  250,  251,  174,  369,   37,
   38,   37,   38,  246,  376,   18,  144,  135,  173,  144,
  135,   39,   40,   41,  160,  252,  253,  148,   38,  278,
  249,   97,  108,   98,  175,  394,  176,   84,  112,   20,
   84,  246,  160,  161,   84,   84,   84,  161,   37,   38,
  249,  177,   84,   84,  178,  134,   84,   84,   84,   84,
   39,   40,   41,  257,  258,  246,  179,   37,   38,  180,
  119,   74,  249,  259,  260,  292,  293,   18,  124,   39,
   40,   41,  344,  345,   60,  370,  371,    6,  188,  136,
  193,    7,  136,  183,  147,  147,  157,  158,  166,    9,
   10,  166,  166,  166,  166,  166,  166,  166,  166,  200,
  166,  166,  166,  166,  166,  166,  166,  166,  166,  166,
  166,  182,  204,  142,  205,  227,  216,  217,  218,  223,
  226,  233,  230,  162,  240,  241,  162,  162,  162,  162,
  162,  162,  162,  162,  242,  162,  162,  162,  162,  162,
  162,  162,  162,  162,  162,  162,  160,  108,   77,  160,
  160,  160,  160,  160,  160,  160,  160,  243,  160,  160,
  160,  160,  160,  160,  160,  160,  160,  160,  160,  161,
  134,  265,  161,  161,  161,  161,  161,  161,  161,  161,
  262,  161,  161,  161,  161,  161,  161,  161,  161,  161,
  161,  161,  119,  124,  269,  119,  272,  119,  119,  119,
  119,  119,  119,  275,  277,  279,  281,  119,  119,  119,
  119,  119,  119,  119,  119,  183,  194,  286,  183,  288,
  183,  183,  183,  183,  183,  183,  291,  295,  297,  302,
  183,  183,  183,  183,  183,  183,  183,  183,  142,  304,
  305,  307,  309,  182,  313,  312,  182,   82,  182,  182,
  182,  182,  182,  182,  314,  315,  316,  319,  182,  182,
  182,  182,  182,  182,  182,  182,  322,  320,  321,  323,
   79,  324,  325,   77,  328,  329,  330,  332,  333,  108,
  334,  347,  108,  335,  108,  108,  108,  108,  108,  108,
  336,   82,  337,   20,  108,  108,  108,  108,  108,  108,
  108,  108,  134,  338,  339,  134,   82,  134,  134,  134,
  134,  134,  134,  342,  348,  349,   16,  134,  134,  134,
  134,  134,  134,  134,  134,  124,  351,  352,  124,   79,
  124,  124,  124,  124,  124,  124,  356,  357,  359,   33,
  124,  124,  124,  124,  124,  124,  124,  124,   60,  360,
   60,    6,   20,    6,  361,    7,  365,    7,  362,  130,
   61,  364,  366,    9,   10,    9,   10,  367,   62,   13,
  142,   13,   82,  142,  368,  142,  142,  142,  142,  142,
  142,  373,  375,  377,  380,  142,  142,  142,  142,  142,
  142,  142,  142,  381,  383,   79,  382,   16,  386,   16,
  384,  387,  388,  389,  390,   77,  392,  393,   77,  396,
   79,  195,   77,   77,   77,   94,  397,  201,   20,   42,
   77,   77,  399,  398,   77,   77,   77,   77,   16,   79,
    5,  400,  401,  129,   45,   46,   44,    7,    8,  130,
  116,   16,  402,  231,   42,  131,  132,   42,  409,   11,
   12,  133,   14,  408,  112,   54,    4,   58,  126,   45,
   46,   44,   45,   46,   44,  340,  189,   99,  196,  197,
  198,  244,    0,    5,    0,  282,    6,    0,    0,    0,
    7,    8,   79,    0,    0,    0,  110,  110,    9,   10,
    0,    0,   11,   12,   13,   14,    0,    0,    0,   60,
    0,    0,  129,    0,   82,    0,    7,   82,    0,    0,
    0,   82,   82,   82,  131,  132,    0,    0,  280,   82,
   82,    0,  283,   82,   82,   82,   82,   79,    0,    0,
   79,    0,    0,    0,   79,   79,   79,  110,    0,    0,
    0,    0,   79,   79,    0,    0,   79,   79,   79,   79,
   20,   63,    0,   20,    0,    0,    0,   20,   20,   20,
    0,    0,    0,    0,    0,   20,   20,    0,  208,   20,
   20,   20,   20,   16,    0,    0,   16,    0,  208,    0,
   16,   16,   16,    0,    0,  327,    0,    0,   16,   16,
  331,    0,   16,   16,   16,   16,    0,  208,    0,  219,
    0,  222,    0,    0,  110,    0,  225,  346,    0,   60,
    0,    0,    6,    0,    0,    0,    7,    0,  130,   61,
  208,    0,  353,  355,    9,   10,    0,   62,    0,    0,
   13,   37,   38,    0,    0,    0,    0,  208,    0,  208,
    0,    0,  372,   39,   40,   41,    0,  261,    0,  379,
  263,    0,  264,    0,    0,  266,   37,   38,  134,   37,
   38,    0,    0,    0,  391,    0,    0,    0,   39,   40,
   41,   39,   40,   41,    0,    0,    0,    0,    0,    0,
    0,   78,    0,    0,  406,   60,    0,    0,    6,    0,
    0,  298,    7,    0,  110,   61,    0,    0,    0,    0,
    9,   10,   60,   62,   86,    6,   13,  254,  255,    7,
    0,    0,   60,    0,   88,    6,  213,    9,   10,    7,
    0,    0,    0,   13,    0,    0,    0,    9,   10,    0,
    0,   60,    0,   13,    6,    0,    0,  289,    7,  146,
    0,  211,  212,    0,  215,    0,    9,   10,    0,  270,
    0,  110,   13,    0,   60,    0,    0,    6,  306,    0,
    0,    7,    0,    0,    0,    0,    0,    0,    0,    9,
   10,   60,  100,   60,    6,   13,    6,  317,    7,    0,
    7,    0,    0,    0,    0,    0,    9,   10,    9,   10,
    5,  104,   13,  129,   13,    0,    0,    7,    8,  130,
    0,  256,    0,    0,    0,  131,  132,    0,    0,   11,
   12,  133,   14,    5,  101,    0,    6,    0,    0,    0,
    7,    8,    0,    0,    0,    0,    0,    0,    9,   10,
    0,    0,   11,   12,   13,   14,    5,  184,  285,    6,
  287,    0,  290,    7,    8,  294,    5,  296,    0,    6,
    0,    9,   10,    7,    8,   11,   12,   13,   14,  184,
    0,    9,   10,    0,    0,   11,   12,   13,   14,    0,
    0,    5,    0,    0,    6,    0,  149,    0,    7,    8,
  318,    5,    0,    0,    6,    0,    9,   10,    7,    8,
   11,   12,   13,   14,  256,  284,    9,   10,    0,    0,
   11,   12,   13,   14,  100,  245,    0,  100,    0,    0,
    0,  100,    0,  100,  100,  248,    0,    0,    0,  100,
  100,  100,  100,  104,    0,  100,  104,    0,    0,    0,
  104,    0,  104,  104,  284,    0,    0,    0,  104,  104,
  104,  104,    0,    0,  104,    0,  101,    0,    0,  101,
    0,    0,    0,  101,    0,  101,  101,    0,    0,    0,
    0,  101,  101,  101,  101,    0,    0,  101,    0,   60,
    0,    0,    6,    0,    0,    0,    7,    0,  130,   61,
    0,    0,    0,    0,    9,   10,    0,   62,    0,    0,
   13,   60,    0,    0,    6,    0,    0,    0,    7,    0,
    0,   61,    0,    0,    0,    0,    9,   10,  149,   62,
    0,  149,   13,  144,  144,  149,    0,    0,    0,    0,
    0,    0,    0,  149,  149,    0,    0,   60,    0,  149,
    6,    0,    0,    0,    7,    0,  130,   60,    0,    0,
    6,    0,    9,   10,    7,    0,    0,   60,   13,    0,
    6,    0,    9,   10,    7,    0,    0,    0,   13,    0,
    0,    0,    9,   10,    0,    0,   60,    0,   13,    6,
    0,    0,    0,    7,    0,    0,    5,    0,    0,    6,
    0,    9,   10,    7,    8,  130,    0,   13,    0,    0,
    0,    9,   10,    0,    0,   11,   12,   13,   14,   34,
    0,    0,   34,    0,    0,    0,   34,   34,   34,    5,
    0,    0,    6,    0,   34,   34,    7,    8,   34,   34,
   34,   34,    0,    0,    9,   10,    0,    0,   11,   12,
   13,   14,    5,    0,    0,  129,    0,    0,    0,    7,
    8,    0,    0,    0,    0,    0,    0,  131,  132,    0,
    0,   11,   12,  133,   14,   60,    0,    0,    6,    0,
    0,    0,    7,    0,    0,   61,    0,    0,    0,    0,
    9,   10,    0,   62,    0,    0,   13,
};
}
static short yycheck[];
static { yycheck(); }
static void yycheck() {
yycheck = new short[] {                          2,
   43,    4,   41,   41,   44,   40,   41,   10,   84,   84,
   59,   63,   15,   41,   41,   41,   59,  138,   59,  125,
   59,   41,   40,   59,  175,   41,  123,  208,  123,  194,
   33,   34,   59,   59,   40,  123,  123,   58,   58,  227,
  123,  229,   84,  119,   35,   40,   92,   13,   41,   41,
   45,   44,   59,   41,  123,   41,   41,  133,   49,   43,
   63,   45,  138,  138,    4,   58,   41,  123,   41,  121,
   45,   59,   41,   59,   59,   85,   60,   61,   62,  267,
  123,   84,   41,   40,   87,   58,   45,  108,   45,   58,
    0,  133,   41,   33,   13,   44,  138,   45,   13,   13,
   13,   40,   40,   60,   61,   62,  258,   45,   99,   45,
  257,   59,  257,   41,  265,  260,  268,  282,  121,  264,
   41,  266,   60,   61,   62,   45,   58,  272,  273,  132,
   58,   23,   40,  278,   44,  138,   43,   58,   45,  130,
  258,   40,  194,  186,   36,  326,   45,  190,   42,   59,
  193,    0,   59,   47,   58,   59,  262,  263,  125,   41,
  206,   60,   61,   62,  261,   45,  261,  133,  274,  257,
   41,  322,  260,  354,  262,  263,  264,   41,  266,  266,
   60,   61,   62,  266,  272,  273,    0,  239,  257,  268,
  278,  194,   41,   42,   43,  205,   45,  378,   47,   41,
  191,   43,  390,   45,   43,  208,   45,  210,  257,    0,
   59,   60,   61,   62,  133,  125,  257,  274,  133,  133,
  133,  257,  261,  261,  227,   59,  229,   41,  268,   43,
  282,   45,    0,  261,  261,  261,  239,   59,  281,  257,
  243,  276,  277,   44,  247,   59,   60,   61,   62,   44,
   41,  257,   43,  259,   45,    0,  276,  277,  273,  311,
  276,  277,  257,  258,  267,  257,  269,  259,   59,   60,
   61,   62,   59,   41,  261,   43,  125,   45,    0,  282,
  261,  402,  257,  258,  405,  269,  270,  271,   59,  332,
   59,   59,   60,   61,   62,  262,  263,   59,  257,  258,
  257,  258,  276,  277,  347,   58,    0,  274,  311,  257,
  258,  125,  269,  270,  271,  262,  263,   41,  361,  257,
  258,  257,  258,  326,  367,  328,  402,  402,  257,  405,
  405,  269,  270,  271,  125,  262,  263,  257,  258,   41,
  343,   43,    0,   45,   44,  388,  257,  257,   58,   59,
  260,  354,  101,  102,  264,  265,  266,  125,  257,  258,
  363,   58,  272,  273,   41,    0,  276,  277,  278,  279,
  269,  270,  271,  262,  263,  378,  261,  257,  258,   41,
  125,  257,  385,  262,  263,  262,  263,  390,    0,  269,
  270,  271,  262,  263,  257,  262,  263,  260,  258,  402,
   40,  264,  405,  125,  262,  263,   97,   98,  257,  272,
  273,  260,  261,  262,  263,  264,  265,  266,  267,  125,
  269,  270,  271,  272,  273,  274,  275,  276,  277,  278,
  279,  125,  125,    0,   58,  123,   59,   59,   58,   58,
   58,   41,   59,  257,  274,  125,  260,  261,  262,  263,
  264,  265,  266,  267,  125,  269,  270,  271,  272,  273,
  274,  275,  276,  277,  278,  279,  257,  125,    0,  260,
  261,  262,  263,  264,  265,  266,  267,  273,  269,  270,
  271,  272,  273,  274,  275,  276,  277,  278,  279,  257,
  125,   44,  260,  261,  262,  263,  264,  265,  266,  267,
   58,  269,  270,  271,  272,  273,  274,  275,  276,  277,
  278,  279,  257,  125,  123,  260,   59,  262,  263,  264,
  265,  266,  267,   59,   59,   41,   40,  272,  273,  274,
  275,  276,  277,  278,  279,  257,  123,   59,  260,   59,
  262,  263,  264,  265,  266,  267,   59,   59,   59,  125,
  272,  273,  274,  275,  276,  277,  278,  279,  125,  125,
   59,   59,  125,  257,  263,  274,  260,    0,  262,  263,
  264,  265,  266,  267,  263,   59,  263,   59,  272,  273,
  274,  275,  276,  277,  278,  279,   44,  263,  263,   59,
    0,  125,   59,  125,  123,  274,   41,   40,   59,  257,
   59,   40,  260,   59,  262,  263,  264,  265,  266,  267,
   59,   44,  263,    0,  272,  273,  274,  275,  276,  277,
  278,  279,  257,   59,   59,  260,   59,  262,  263,  264,
  265,  266,  267,   59,   59,  125,    0,  272,  273,  274,
  275,  276,  277,  278,  279,  257,   59,  272,  260,   59,
  262,  263,  264,  265,  266,  267,   59,  125,  274,  123,
  272,  273,  274,  275,  276,  277,  278,  279,  257,   41,
  257,  260,   59,  260,   40,  264,   59,  264,  125,  266,
  267,  263,   41,  272,  273,  272,  273,   40,  275,  278,
  257,  278,  125,  260,   59,  262,  263,  264,  265,  266,
  267,   59,   59,   41,   59,  272,  273,  274,  275,  276,
  277,  278,  279,  125,   41,  125,  272,    2,  263,    4,
  261,  263,   40,   59,  123,  257,   59,   59,  260,  125,
   15,  132,  264,  265,  266,   41,   41,  138,  125,   45,
  272,  273,  263,  125,  276,  277,  278,  279,   33,   34,
  257,  261,   59,  260,   60,   61,   62,  264,  265,  266,
   41,  125,  123,   41,   45,  272,  273,   45,   59,  276,
  277,  278,  279,  125,   58,  123,    0,  123,  125,   60,
   61,   62,   60,   61,   62,  322,  127,   48,  133,  133,
  133,  206,   -1,  257,   -1,  123,  260,   -1,   -1,   -1,
  264,  265,   87,   -1,   -1,   -1,   57,   58,  272,  273,
   -1,   -1,  276,  277,  278,  279,   -1,   -1,   -1,  257,
   -1,   -1,  260,   -1,  257,   -1,  264,  260,   -1,   -1,
   -1,  264,  265,  266,  272,  273,   -1,   -1,  239,  272,
  273,   -1,  243,  276,  277,  278,  279,  257,   -1,   -1,
  260,   -1,   -1,   -1,  264,  265,  266,  108,   -1,   -1,
   -1,   -1,  272,  273,   -1,   -1,  276,  277,  278,  279,
  257,  123,   -1,  260,   -1,   -1,   -1,  264,  265,  266,
   -1,   -1,   -1,   -1,   -1,  272,  273,   -1,  123,  276,
  277,  278,  279,  257,   -1,   -1,  260,   -1,  123,   -1,
  264,  265,  266,   -1,   -1,  306,   -1,   -1,  272,  273,
  311,   -1,  276,  277,  278,  279,   -1,  123,   -1,  170,
   -1,  172,   -1,   -1,  175,   -1,  177,  328,   -1,  257,
   -1,   -1,  260,   -1,   -1,   -1,  264,   -1,  266,  267,
  123,   -1,  343,  344,  272,  273,   -1,  275,   -1,   -1,
  278,  257,  258,   -1,   -1,   -1,   -1,  123,   -1,  123,
   -1,   -1,  363,  269,  270,  271,   -1,  218,   -1,  370,
  221,   -1,  223,   -1,   -1,  226,  257,  258,  125,  257,
  258,   -1,   -1,   -1,  385,   -1,   -1,   -1,  269,  270,
  271,  269,  270,  271,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,  125,   -1,   -1,  405,  257,   -1,   -1,  260,   -1,
   -1,  262,  264,   -1,  265,  267,   -1,   -1,   -1,   -1,
  272,  273,  257,  275,  125,  260,  278,  262,  263,  264,
   -1,   -1,  257,   -1,  125,  260,  261,  272,  273,  264,
   -1,   -1,   -1,  278,   -1,   -1,   -1,  272,  273,   -1,
   -1,  257,   -1,  278,  260,   -1,   -1,  263,  264,  125,
   -1,  153,  154,   -1,  156,   -1,  272,  273,   -1,  125,
   -1,  322,  278,   -1,  257,   -1,   -1,  260,  261,   -1,
   -1,  264,   -1,   -1,   -1,   -1,   -1,   -1,   -1,  272,
  273,  257,  125,  257,  260,  278,  260,  263,  264,   -1,
  264,   -1,   -1,   -1,   -1,   -1,  272,  273,  272,  273,
  257,  125,  278,  260,  278,   -1,   -1,  264,  265,  266,
   -1,  213,   -1,   -1,   -1,  272,  273,   -1,   -1,  276,
  277,  278,  279,  257,  125,   -1,  260,   -1,   -1,   -1,
  264,  265,   -1,   -1,   -1,   -1,   -1,   -1,  272,  273,
   -1,   -1,  276,  277,  278,  279,  257,  125,  250,  260,
  252,   -1,  254,  264,  265,  257,  257,  259,   -1,  260,
   -1,  272,  273,  264,  265,  276,  277,  278,  279,  125,
   -1,  272,  273,   -1,   -1,  276,  277,  278,  279,   -1,
   -1,  257,   -1,   -1,  260,   -1,  125,   -1,  264,  265,
  292,  257,   -1,   -1,  260,   -1,  272,  273,  264,  265,
  276,  277,  278,  279,  306,  125,  272,  273,   -1,   -1,
  276,  277,  278,  279,  257,  125,   -1,  260,   -1,   -1,
   -1,  264,   -1,  266,  267,  125,   -1,   -1,   -1,  272,
  273,  274,  275,  257,   -1,  278,  260,   -1,   -1,   -1,
  264,   -1,  266,  267,  125,   -1,   -1,   -1,  272,  273,
  274,  275,   -1,   -1,  278,   -1,  257,   -1,   -1,  260,
   -1,   -1,   -1,  264,   -1,  266,  267,   -1,   -1,   -1,
   -1,  272,  273,  274,  275,   -1,   -1,  278,   -1,  257,
   -1,   -1,  260,   -1,   -1,   -1,  264,   -1,  266,  267,
   -1,   -1,   -1,   -1,  272,  273,   -1,  275,   -1,   -1,
  278,  257,   -1,   -1,  260,   -1,   -1,   -1,  264,   -1,
   -1,  267,   -1,   -1,   -1,   -1,  272,  273,  257,  275,
   -1,  260,  278,  262,  263,  264,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,  272,  273,   -1,   -1,  257,   -1,  278,
  260,   -1,   -1,   -1,  264,   -1,  266,  257,   -1,   -1,
  260,   -1,  272,  273,  264,   -1,   -1,  257,  278,   -1,
  260,   -1,  272,  273,  264,   -1,   -1,   -1,  278,   -1,
   -1,   -1,  272,  273,   -1,   -1,  257,   -1,  278,  260,
   -1,   -1,   -1,  264,   -1,   -1,  257,   -1,   -1,  260,
   -1,  272,  273,  264,  265,  266,   -1,  278,   -1,   -1,
   -1,  272,  273,   -1,   -1,  276,  277,  278,  279,  257,
   -1,   -1,  260,   -1,   -1,   -1,  264,  265,  266,  257,
   -1,   -1,  260,   -1,  272,  273,  264,  265,  276,  277,
  278,  279,   -1,   -1,  272,  273,   -1,   -1,  276,  277,
  278,  279,  257,   -1,   -1,  260,   -1,   -1,   -1,  264,
  265,   -1,   -1,   -1,   -1,   -1,   -1,  272,  273,   -1,
   -1,  276,  277,  278,  279,  257,   -1,   -1,  260,   -1,
   -1,   -1,  264,   -1,   -1,  267,   -1,   -1,   -1,   -1,
  272,  273,   -1,  275,   -1,   -1,  278,
};
}
final static short YYFINAL=3;
final static short YYMAXTOKEN=279;
final static String yyname[] = {
"end-of-file",null,null,null,null,null,null,null,null,null,null,null,null,null,
null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,
null,null,null,null,null,null,null,null,null,null,"'('","')'","'*'","'+'","','",
"'-'",null,"'/'",null,null,null,null,null,null,null,null,null,null,"':'","';'",
"'<'","'='","'>'",null,null,null,null,null,null,null,null,null,null,null,null,
null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,
null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,
null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,
"'{'",null,"'}'",null,null,null,null,null,null,null,null,null,null,null,null,
null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,
null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,
null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,
null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,
null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,
null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,
null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,
null,null,null,null,null,null,null,"ID","CTE","CADENA","IF","THEN","ELSE",
"ENDIF","OUT","FUN","RETURN","BREAK","ASIGNACION","COMP_MAYOR_IGUAL",
"COMP_MENOR_IGUAL","COMP_DISTINTO","WHEN","DO","UNTIL","CONTINUE","DOUBLE64",
"UINT16","DEFER","CONST",
};
final static String yyrule[] = {
"$accept : programa",
"programa : nombre_programa '{' sentencias '}'",
"programa : '{' sentencias '}'",
"programa : nombre_programa sentencias '}'",
"programa : nombre_programa '{' sentencias",
"programa : nombre_programa '{' '}'",
"nombre_programa : ID",
"sentencias : sentencia",
"sentencias : sentencias sentencia",
"sentencia : sentencia_declarativa",
"sentencia : sentencia_ejecutable",
"sentencia_declarativa : sentencia_declarativa_variables",
"sentencia_declarativa : funcion_con_return",
"sentencia_declarativa : funcion_sin_return",
"sentencia_declarativa : declaracion_constantes",
"sentencia_declarativa_variables : tipo lista_de_variables ';'",
"sentencia_declarativa_variables : tipo lista_de_variables",
"sentencia_declarativa_variables : lista_de_variables ';'",
"sentencia_declarativa_variables : tipo ';'",
"lista_de_variables : ID ',' lista_de_variables",
"lista_de_variables : ID",
"funcion_con_return : encabezado_funcion '{' sentencia_return '}'",
"funcion_con_return : encabezado_funcion '{' sentencias_funcion sentencia_return '}'",
"funcion_con_return : encabezado_funcion '{' '}'",
"sentencias_funcion : sentencia_funcion",
"sentencias_funcion : sentencias_funcion sentencia_funcion",
"sentencia_funcion : sentencia_declarativa",
"sentencia_funcion : sentencia_ejecutable",
"sentencia_funcion : sentencia_when_con_return",
"sentencia_funcion : DEFER sentencia_when_con_return",
"sentencia_funcion : sentencia_do_con_return",
"sentencia_funcion : DEFER sentencia_do_con_return",
"sentencia_funcion : sentencia_seleccion_simple_con_return",
"sentencia_funcion : DEFER sentencia_seleccion_simple_con_return",
"sentencia_funcion : sentencia_seleccion_compuesta_con_return",
"sentencia_funcion : DEFER sentencia_seleccion_compuesta_con_return",
"funcion_sin_return : encabezado_funcion '{' sentencia_seleccion_compuesta_con_return '}'",
"funcion_sin_return : encabezado_funcion '{' sentencias_funcion sentencia_seleccion_compuesta_con_return '}'",
"sentencia_seleccion_compuesta_con_return : IF '(' condicion ')' THEN sentencia_return ELSE sentencia_return ENDIF ';'",
"sentencia_seleccion_compuesta_con_return : IF '(' condicion ')' THEN '{' sentencias_ejecutables sentencia_return '}' ELSE sentencia_return ENDIF ';'",
"sentencia_seleccion_compuesta_con_return : IF '(' condicion ')' THEN sentencia_return ELSE '{' sentencias_ejecutables sentencia_return '}' ENDIF ';'",
"sentencia_seleccion_compuesta_con_return : IF '(' condicion ')' THEN '{' sentencias_ejecutables sentencia_return '}' ELSE '{' sentencias_ejecutables sentencia_return '}' ENDIF ';'",
"sentencia_seleccion_simple_con_return : IF '(' condicion ')' THEN sentencia_return ENDIF ';'",
"sentencia_seleccion_simple_con_return : IF '(' condicion ')' THEN '{' sentencias_ejecutables sentencia_return '}' ENDIF ';'",
"$$1 :",
"sentencia_when_con_return : WHEN '(' condicion ')' THEN '{' sentencia_return '}' ';' $$1 WHEN '(' condicion ')' THEN '{' sentencias_when_con_return sentencia_return '}' ';'",
"sentencias_when_con_return : sentencia_funcion",
"sentencias_when_con_return : sentencias_when_con_return sentencia_funcion",
"sentencia_do_con_return : DO sentencia_return UNTIL '(' condicion ')' ';'",
"sentencia_do_con_return : etiqueta ':' DO sentencia_return UNTIL '(' condicion ')' ';'",
"sentencia_do_con_return : DO '{' sentencias_ejecutables_do sentencia_return '}' UNTIL '(' condicion ')' ';'",
"sentencia_do_con_return : etiqueta ':' DO '{' sentencias_ejecutables_do sentencia_return '}' UNTIL '(' condicion ')' ';'",
"encabezado_funcion : FUN ID '(' ')' ':' tipo",
"encabezado_funcion : FUN ID '(' lista_de_parametros ')' ':' tipo",
"encabezado_funcion : FUN ID '(' ')' ':'",
"encabezado_funcion : FUN '(' ')' ':' tipo",
"encabezado_funcion : FUN ID ')' ':' tipo",
"encabezado_funcion : FUN ID '(' ':' tipo",
"encabezado_funcion : FUN ID '(' lista_de_parametros ')' ':'",
"encabezado_funcion : FUN '(' lista_de_parametros ')' ':' tipo",
"encabezado_funcion : FUN ID lista_de_parametros ')' ':' tipo",
"encabezado_funcion : FUN ID '(' lista_de_parametros ':' tipo",
"sentencia_return : RETURN '(' expresion ')' ';'",
"sentencia_return : RETURN '(' expresion ')'",
"sentencia_return : RETURN expresion ')'",
"sentencia_return : RETURN '(' expresion",
"sentencia_return : RETURN '(' ')' ';'",
"lista_de_parametros : parametro",
"lista_de_parametros : parametro ',' parametro",
"lista_de_parametros : parametro ',' parametro ',' lista_parametros_exceso",
"lista_parametros_exceso : parametro",
"lista_parametros_exceso : parametro ',' lista_parametros_exceso",
"parametro : tipo ID",
"parametro : tipo",
"$$2 :",
"parametro : $$2 ID",
"declaracion_constantes : CONST lista_declaracion_constantes ';'",
"declaracion_constantes : CONST lista_declaracion_constantes",
"declaracion_constantes : CONST ';'",
"lista_declaracion_constantes : declaracion_constante",
"lista_declaracion_constantes : declaracion_constante ',' lista_declaracion_constantes",
"declaracion_constante : ID ASIGNACION CTE",
"declaracion_constante : ID ASIGNACION",
"declaracion_constante : ID CTE",
"declaracion_constante : ID",
"sentencia_ejecutable : asignacion",
"sentencia_ejecutable : DEFER asignacion",
"sentencia_ejecutable : seleccion",
"sentencia_ejecutable : DEFER seleccion",
"sentencia_ejecutable : imprimir",
"sentencia_ejecutable : DEFER imprimir",
"sentencia_ejecutable : sentencia_when",
"sentencia_ejecutable : DEFER sentencia_when",
"sentencia_ejecutable : sentencia_do",
"sentencia_ejecutable : DEFER sentencia_do",
"sentencia_ejecutable_do : sentencia_ejecutable",
"sentencia_ejecutable_do : sentencia_break",
"sentencia_ejecutable_do : sentencia_continue",
"sentencia_break : BREAK ';'",
"sentencia_break : BREAK ':' etiqueta ';'",
"sentencia_break : BREAK",
"sentencia_break : BREAK ':' etiqueta",
"sentencia_break : BREAK ':' ';'",
"sentencia_continue : CONTINUE ';'",
"sentencia_continue : CONTINUE",
"sentencia_do : sentencia_do_simple",
"sentencia_do : etiqueta ':' sentencia_do_simple",
"sentencia_do_simple : DO bloque_sentencias_ejecutables_do UNTIL '(' condicion ')' ';'",
"sentencia_do_simple : DO bloque_sentencias_ejecutables_do UNTIL '(' condicion ')'",
"sentencia_do_simple : DO bloque_sentencias_ejecutables_do UNTIL '(' ')' ';'",
"sentencia_do_simple : DO bloque_sentencias_ejecutables_do UNTIL condicion ')' ';'",
"sentencia_do_simple : DO bloque_sentencias_ejecutables_do UNTIL '(' condicion ';'",
"etiqueta : ID",
"bloque_sentencias_ejecutables_do : sentencia_ejecutable_do",
"bloque_sentencias_ejecutables_do : '{' sentencias_ejecutables_do '}'",
"sentencias_ejecutables_do : sentencia_ejecutable_do",
"sentencias_ejecutables_do : sentencias_ejecutables_do sentencia_ejecutable_do",
"asignacion : ID ASIGNACION expresion ';'",
"asignacion : ID ASIGNACION ';'",
"asignacion : ID ASIGNACION expresion",
"sentencia_when : WHEN '(' condicion ')' THEN '{' sentencias_when '}' ';'",
"sentencia_when : WHEN '(' condicion ')' '{' sentencias_when '}' ';'",
"$$3 :",
"sentencia_when : WHEN '(' ')' THEN '{' sentencias_when '}' ';' $$3 WHEN '(' condicion ')' THEN '{' sentencias_when '}'",
"sentencia_when : WHEN '(' condicion ')' '{' sentencias_when '}'",
"sentencia_when : WHEN '(' condicion ')' '{' '}'",
"sentencias_when : sentencia",
"sentencias_when : sentencia sentencias_when",
"seleccion : IF '(' condicion ')' THEN bloque_sentencias_ejecutables_seleccion ENDIF ';'",
"seleccion : IF '(' condicion ')' THEN bloque_sentencias_ejecutables_seleccion ELSE bloque_sentencias_ejecutables_seleccion ENDIF ';'",
"seleccion : IF '(' condicion THEN bloque_sentencias_ejecutables_seleccion ENDIF ';'",
"seleccion : IF condicion ')' THEN bloque_sentencias_ejecutables_seleccion ENDIF ';'",
"seleccion : IF '(' ')' THEN bloque_sentencias_ejecutables_seleccion ENDIF ';'",
"seleccion : IF '(' condicion ')' bloque_sentencias_ejecutables_seleccion ENDIF ';'",
"seleccion : IF '(' condicion ')' THEN bloque_sentencias_ejecutables_seleccion ENDIF",
"seleccion : IF '(' condicion ')' THEN ENDIF ';'",
"seleccion : IF '(' condicion THEN bloque_sentencias_ejecutables_seleccion ELSE bloque_sentencias_ejecutables_seleccion ENDIF ';'",
"seleccion : IF condicion ')' THEN bloque_sentencias_ejecutables_seleccion ELSE bloque_sentencias_ejecutables_seleccion ENDIF ';'",
"seleccion : IF '(' ')' THEN bloque_sentencias_ejecutables_seleccion ELSE bloque_sentencias_ejecutables_seleccion ENDIF ';'",
"seleccion : IF '(' condicion ')' bloque_sentencias_ejecutables_seleccion ELSE bloque_sentencias_ejecutables_seleccion ENDIF ';'",
"seleccion : IF '(' condicion ')' THEN ELSE bloque_sentencias_ejecutables_seleccion ENDIF ';'",
"seleccion : IF '(' condicion ')' THEN bloque_sentencias_ejecutables_seleccion ELSE ENDIF ';'",
"seleccion : IF '(' condicion ')' THEN bloque_sentencias_ejecutables_seleccion ELSE bloque_sentencias_ejecutables_seleccion ENDIF",
"seleccion : IF '(' condicion ')' THEN ELSE ENDIF ';'",
"bloque_sentencias_ejecutables_seleccion : sentencia_ejecutable",
"bloque_sentencias_ejecutables_seleccion : '{' sentencias_ejecutables '}'",
"bloque_sentencias_ejecutables_seleccion : sentencias_ejecutables '}'",
"bloque_sentencias_ejecutables_seleccion : '{' sentencias_ejecutables",
"bloque_sentencias_ejecutables_seleccion : '{' '}'",
"sentencias_ejecutables : sentencia_ejecutable",
"sentencias_ejecutables : sentencias_ejecutables sentencia_ejecutable",
"condicion : expresion comparador expresion",
"condicion : expresion comparador",
"condicion : comparador expresion",
"comparador : COMP_MAYOR_IGUAL",
"comparador : COMP_MENOR_IGUAL",
"comparador : COMP_DISTINTO",
"comparador : '>'",
"comparador : '<'",
"comparador : '='",
"expresion : expresion '+' termino",
"expresion : expresion '-' termino",
"expresion : termino",
"termino : termino '*' factor",
"termino : termino '/' factor",
"termino : factor",
"factor : ID",
"factor : constante",
"factor : invocacion_funcion",
"invocacion_funcion : ID '(' ')'",
"invocacion_funcion : ID '(' lista_de_parametros_reales ')'",
"lista_de_parametros_reales : parametro_real",
"lista_de_parametros_reales : lista_de_parametros_reales ',' parametro_real",
"parametro_real : ID",
"parametro_real : constante",
"imprimir : OUT '(' CADENA ')' ';'",
"imprimir : OUT '(' ID ')' ';'",
"imprimir : OUT '(' ')' ';'",
"imprimir : OUT CADENA ')' ';'",
"imprimir : OUT '(' CADENA ';'",
"imprimir : OUT ID ')' ';'",
"imprimir : OUT '(' ID ';'",
"imprimir : OUT '(' CADENA ')'",
"imprimir : OUT '(' ID ')'",
"constante : CTE",
"constante : '-' CTE",
"tipo : UINT16",
"tipo : DOUBLE64",
};

//#line 353 ".\gramatica.y"

public static AnalizadorLexico lexico = null;
public static Logger logger = null;
public static TablaDeSimbolos ts = null;

public void constanteConSigno(String constante) {
	if (constante.contains(".")) {
		
		String negConstante = "-"+constante;
		
		Double parsedDouble = Double.parseDouble(negConstante.replace('D', 'E'));
		
		if (parsedDouble < -2.2250738585072014E-308 && -1.7976931348623157E+308 > parsedDouble) {
			logger.logWarning("[Parser] Rango invalido para la constante: " + negConstante + ", se trunca al rango permitido");
			
			if (-1.7976931348623157E+308 < parsedDouble) {
				negConstante = new String("-1.7976931348623157D+308");
			} else {
				negConstante =  new String("-2.2250738585072014D-308");
			}
		}
		
		ts.swapLexemas(constante, negConstante);
	} else {
		//se recibio un uint que fue aceptado por el lexico pero resulta ser negativo
		logger.logWarning("[Parser] No se admiten ui16 con valores negativos: " + "-"+constante + ", se trunca a 0");
		
		ts.swapLexemas(constante, "0");
	}
}	

public int yylex() {
	return lexico.yylex(yylval);
}

public void yyerror(String error) {
	logger.logError(error);
}

public static void main(String[] args) {
	if (args.length == 0) {
		System.err.println("No se especifico ningun archivo de codigo");
	} else {
		String archivo_a_leer = args[0];
		System.out.println("Se va a leer archivo " + archivo_a_leer);
		
		FileReaderHelper fileHelper = new FileReaderHelper();
		
		fileHelper.open(archivo_a_leer);
		
		Parser parser = new Parser();
		logger = new Logger();
		ts = new TablaDeSimbolos();
		lexico = new AnalizadorLexico(fileHelper, ts, logger);
		
        parser.run();

		String path = new File(archivo_a_leer).getAbsolutePath().replaceAll(args[0],"");
        
        Output out = new Output(path);
        
        String printTs = ts.print();
        
        
        out.saveFile("codigo-lexico.txt", logger.getLexico());
		out.saveFile("codigo-sintetico.txt", logger.getSintactico());
		out.saveFile("tabla-de-simbolos.txt", printTs);
        
		System.out.println(printTs);
	}
}
//#line 900 "Parser.java"
//###############################################################
// method: yylexdebug : check lexer state
//###############################################################
void yylexdebug(int state,int ch)
{
String s=null;
  if (ch < 0) ch=0;
  if (ch <= YYMAXTOKEN) //check index bounds
     s = yyname[ch];    //now get it
  if (s==null)
    s = "illegal-symbol";
  debug("state "+state+", reading "+ch+" ("+s+")");
}





//The following are now global, to aid in error reporting
int yyn;       //next next thing to do
int yym;       //
int yystate;   //current parsing state from state table
String yys;    //current token string


//###############################################################
// method: yyparse : parse input and execute indicated items
//###############################################################
int yyparse()
{
boolean doaction;
  init_stacks();
  yynerrs = 0;
  yyerrflag = 0;
  yychar = -1;          //impossible char forces a read
  yystate=0;            //initial state
  state_push(yystate);  //save it
  val_push(yylval);     //save empty value
  while (true) //until parsing is done, either correctly, or w/error
    {
    doaction=true;
    if (yydebug) debug("loop"); 
    //#### NEXT ACTION (from reduction table)
    for (yyn=yydefred[yystate];yyn==0;yyn=yydefred[yystate])
      {
      if (yydebug) debug("yyn:"+yyn+"  state:"+yystate+"  yychar:"+yychar);
      if (yychar < 0)      //we want a char?
        {
        yychar = yylex();  //get next token
        if (yydebug) debug(" next yychar:"+yychar);
        //#### ERROR CHECK ####
        if (yychar < 0)    //it it didn't work/error
          {
          yychar = 0;      //change it to default string (no -1!)
          if (yydebug)
            yylexdebug(yystate,yychar);
          }
        }//yychar<0
      yyn = yysindex[yystate];  //get amount to shift by (shift index)
      if ((yyn != 0) && (yyn += yychar) >= 0 &&
          yyn <= YYTABLESIZE && yycheck[yyn] == yychar)
        {
        if (yydebug)
          debug("state "+yystate+", shifting to state "+yytable[yyn]);
        //#### NEXT STATE ####
        yystate = yytable[yyn];//we are in a new state
        state_push(yystate);   //save it
        val_push(yylval);      //push our lval as the input for next rule
        yychar = -1;           //since we have 'eaten' a token, say we need another
        if (yyerrflag > 0)     //have we recovered an error?
           --yyerrflag;        //give ourselves credit
        doaction=false;        //but don't process yet
        break;   //quit the yyn=0 loop
        }

    yyn = yyrindex[yystate];  //reduce
    if ((yyn !=0 ) && (yyn += yychar) >= 0 &&
            yyn <= YYTABLESIZE && yycheck[yyn] == yychar)
      {   //we reduced!
      if (yydebug) debug("reduce");
      yyn = yytable[yyn];
      doaction=true; //get ready to execute
      break;         //drop down to actions
      }
    else //ERROR RECOVERY
      {
      if (yyerrflag==0)
        {
        yyerror("syntax error");
        yynerrs++;
        }
      if (yyerrflag < 3) //low error count?
        {
        yyerrflag = 3;
        while (true)   //do until break
          {
          if (stateptr<0)   //check for under & overflow here
            {
            yyerror("stack underflow. aborting...");  //note lower case 's'
            return 1;
            }
          yyn = yysindex[state_peek(0)];
          if ((yyn != 0) && (yyn += YYERRCODE) >= 0 &&
                    yyn <= YYTABLESIZE && yycheck[yyn] == YYERRCODE)
            {
            if (yydebug)
              debug("state "+state_peek(0)+", error recovery shifting to state "+yytable[yyn]+" ");
            yystate = yytable[yyn];
            state_push(yystate);
            val_push(yylval);
            doaction=false;
            break;
            }
          else
            {
            if (yydebug)
              debug("error recovery discarding state "+state_peek(0)+" ");
            if (stateptr<0)   //check for under & overflow here
              {
              yyerror("Stack underflow. aborting...");  //capital 'S'
              return 1;
              }
            state_pop();
            val_pop();
            }
          }
        }
      else            //discard this token
        {
        if (yychar == 0)
          return 1; //yyabort
        if (yydebug)
          {
          yys = null;
          if (yychar <= YYMAXTOKEN) yys = yyname[yychar];
          if (yys == null) yys = "illegal-symbol";
          debug("state "+yystate+", error recovery discards token "+yychar+" ("+yys+")");
          }
        yychar = -1;  //read another
        }
      }//end error recovery
    }//yyn=0 loop
    if (!doaction)   //any reason not to proceed?
      continue;      //skip action
    yym = yylen[yyn];          //get count of terminals on rhs
    if (yydebug)
      debug("state "+yystate+", reducing "+yym+" by rule "+yyn+" ("+yyrule[yyn]+")");
    if (yym>0)                 //if count of rhs not 'nil'
      yyval = val_peek(yym-1); //get current semantic value
    yyval = dup_yyval(yyval); //duplicate yyval if ParserVal is used as semantic value
    switch(yyn)
      {
//########## USER-SUPPLIED ACTIONS ##########
case 1:
//#line 17 ".\gramatica.y"
{ logger.logSuccess("[Parser] Programa correcto detectado"); }
break;
case 2:
//#line 18 ".\gramatica.y"
{ logger.logError("[Parser] Se esperaba un identificador nombre del programa"); }
break;
case 3:
//#line 19 ".\gramatica.y"
{ logger.logError("[Parser] Se esperaba un { antes de las sentencias del programa"); }
break;
case 4:
//#line 20 ".\gramatica.y"
{ logger.logError("[Parser] Se esperaba un } al final de las sentencias del programa"); }
break;
case 5:
//#line 21 ".\gramatica.y"
{ logger.logError("[Parser] Se esperaban sentencias del programa"); }
break;
case 15:
//#line 46 ".\gramatica.y"
{ logger.logSuccess("[Parser] Declaracion de lista de variables detectado"); }
break;
case 16:
//#line 47 ".\gramatica.y"
{ logger.logError("[Parser] Se esperaba un ; al final de la lista de variables"); }
break;
case 17:
//#line 48 ".\gramatica.y"
{ logger.logError("[Parser] Se esperaba un tipo para la lista de variables"); }
break;
case 18:
//#line 49 ".\gramatica.y"
{ logger.logError("[Parser] Se esperaba una variable o lista de variables"); }
break;
case 21:
//#line 58 ".\gramatica.y"
{ logger.logSuccess("[Parser] Declaracion de funcion detectado"); }
break;
case 22:
//#line 59 ".\gramatica.y"
{ logger.logSuccess("[Parser] Declaracion de funcion detectado"); }
break;
case 23:
//#line 60 ".\gramatica.y"
{ logger.logError("[Parser] Se esperaban sentencias en la funcion"); }
break;
case 36:
//#line 82 ".\gramatica.y"
{ logger.logSuccess("[Parser] Declaracion de funcion detectado"); }
break;
case 37:
//#line 83 ".\gramatica.y"
{ logger.logSuccess("[Parser] Declaracion de funcion detectado"); }
break;
case 44:
//#line 99 ".\gramatica.y"
{ logger.logSuccess("[Parser] Sentencia when detectada"); }
break;
case 45:
//#line 100 ".\gramatica.y"
{ logger.logSuccess("[Parser] Sentencia when detectada"); }
break;
case 48:
//#line 109 ".\gramatica.y"
{ logger.logSuccess("[Parser] Sentencia do until detectada"); }
break;
case 49:
//#line 110 ".\gramatica.y"
{ logger.logSuccess("[Parser] Sentencia do until detectada"); }
break;
case 50:
//#line 111 ".\gramatica.y"
{ logger.logSuccess("[Parser] Sentencia do until detectada"); }
break;
case 51:
//#line 112 ".\gramatica.y"
{ logger.logSuccess("[Parser] Sentencia do until detectada"); }
break;
case 54:
//#line 118 ".\gramatica.y"
{ logger.logError("[Parser] Se esperaba un tipo de return para la funcion"); }
break;
case 55:
//#line 119 ".\gramatica.y"
{ logger.logError("[Parser] Se esperaba un identificador nombre para la funcion"); }
break;
case 56:
//#line 120 ".\gramatica.y"
{ logger.logError("[Parser] Se esperaba un ( luego del nombre de la funcion"); }
break;
case 57:
//#line 121 ".\gramatica.y"
{ logger.logError("[Parser] Se esperaba un ) luego del nombre para la funcion"); }
break;
case 58:
//#line 122 ".\gramatica.y"
{ logger.logError("[Parser] Se esperaba un tipo de return para la funcion"); }
break;
case 59:
//#line 123 ".\gramatica.y"
{ logger.logError("[Parser] Se esperaba un identificador nombre para la funcion"); }
break;
case 60:
//#line 124 ".\gramatica.y"
{ logger.logError("[Parser] Se esperaba un ( luego del nombre de la funcion"); }
break;
case 61:
//#line 125 ".\gramatica.y"
{ logger.logError("[Parser] Se esperaba un ) luego del nombre para la funcion"); }
break;
case 63:
//#line 130 ".\gramatica.y"
{ logger.logError("[Parser] Se esperaba un ; al final de la sentencia return"); }
break;
case 64:
//#line 131 ".\gramatica.y"
{ logger.logError("[Parser] Se esperaba un ( en la sentencia return"); }
break;
case 65:
//#line 132 ".\gramatica.y"
{ logger.logError("[Parser] Se esperaba un ) en la sentencia return"); }
break;
case 66:
//#line 133 ".\gramatica.y"
{ logger.logError("[Parser] Se esperaba una expresion en la sentencia return"); }
break;
case 69:
//#line 139 ".\gramatica.y"
{ logger.logError("[Parser] Hay mas de 2 parametros en la funcion"); }
break;
case 74:
//#line 149 ".\gramatica.y"
{ logger.logError("[Parser] Se esperaba un identificador nombre para el parametro"); }
break;
case 75:
//#line 150 ".\gramatica.y"
{ logger.logError("[Parser] Se esperaba un tipo valido para el parametro"); }
break;
case 76:
//#line 154 ".\gramatica.y"
{ logger.logSuccess("[Parser] Declaracion de constantes detectado"); }
break;
case 77:
//#line 155 ".\gramatica.y"
{ logger.logError("[Parser] Se esperaba ; al final de la declaracion de constantes"); }
break;
case 78:
//#line 156 ".\gramatica.y"
{ logger.logError("[Parser] Se esperaba una lista de declaracion de constantes"); }
break;
case 82:
//#line 166 ".\gramatica.y"
{ logger.logError("[Parser] Se esperaba una constante del lado derecho de la asignacion"); }
break;
case 83:
//#line 167 ".\gramatica.y"
{ logger.logError("[Parser] Se esperaba el simbolo asignacion en la declaracion de constantes"); }
break;
case 84:
//#line 168 ".\gramatica.y"
{ logger.logError("[Parser] Se esperaba una asignacion en la declaracion de constantes"); }
break;
case 98:
//#line 191 ".\gramatica.y"
{ logger.logSuccess("[Parser] Sentencia break detectada"); }
break;
case 99:
//#line 192 ".\gramatica.y"
{ logger.logSuccess("[Parser] Sentencia break con etiqueta detectada"); }
break;
case 100:
//#line 193 ".\gramatica.y"
{ logger.logError("[Parser] Se esperaba un ; luego de la sentencia break"); }
break;
case 101:
//#line 194 ".\gramatica.y"
{ logger.logError("[Parser] Se esperaba un ; luego de la sentencia break"); }
break;
case 102:
//#line 195 ".\gramatica.y"
{ logger.logError("[Parser] Se esperaba una etiqueta en la sentencia break"); }
break;
case 103:
//#line 199 ".\gramatica.y"
{ logger.logSuccess("[Parser] Sentencia continue detectada"); }
break;
case 104:
//#line 200 ".\gramatica.y"
{ logger.logError("[Parser] Se esperaba un ; al final de la sentencia continue"); }
break;
case 107:
//#line 209 ".\gramatica.y"
{ logger.logSuccess("[Parser] Sentencia do until detectada"); }
break;
case 108:
//#line 210 ".\gramatica.y"
{ logger.logError("[Parser] Se esperaba un ; al final de la sentencia do"); }
break;
case 109:
//#line 211 ".\gramatica.y"
{ logger.logError("[Parser] Se esperaba una condicion para la sentencia do"); }
break;
case 110:
//#line 212 ".\gramatica.y"
{ logger.logSuccess("[Parser] Se esperaba un ( en la condicion para la sentencia do"); }
break;
case 111:
//#line 213 ".\gramatica.y"
{ logger.logSuccess("[Parser] Se esperaba un ) en la condicion para la sentencia do"); }
break;
case 117:
//#line 231 ".\gramatica.y"
{ logger.logSuccess("[Parser] Asignacion detectada"); }
break;
case 118:
//#line 232 ".\gramatica.y"
{logger.logError("[Parser] Se espera una expresion del lado derecho de la asignacion");}
break;
case 119:
//#line 233 ".\gramatica.y"
{ logger.logError("[Parser] Se espera un ; al final de la asignacion"); }
break;
case 120:
//#line 237 ".\gramatica.y"
{ logger.logSuccess("[Parser] Sentencia when detectada"); }
break;
case 121:
//#line 238 ".\gramatica.y"
{ logger.logError("[Parser] Se esperaba la palabra reservada then en la sentencia when"); }
break;
case 122:
//#line 239 ".\gramatica.y"
{ logger.logError("[Parser] Se esperaba una condicion en la sentencia when"); }
break;
case 123:
//#line 240 ".\gramatica.y"
{ logger.logError("[Parser] Se esperaba un ; al final de la sentencia when"); }
break;
case 124:
//#line 241 ".\gramatica.y"
{ logger.logError("[Parser] Se esperaba la palabra reservada then en la sentencia when"); }
break;
case 125:
//#line 242 ".\gramatica.y"
{ logger.logError("[Parser] Se esperaban sentencias dentro del when"); }
break;
case 128:
//#line 251 ".\gramatica.y"
{ logger.logSuccess("[Parser] Sentencia if then detectada"); }
break;
case 129:
//#line 252 ".\gramatica.y"
{ logger.logSuccess("[Parser] Sentencia if then else detectada"); }
break;
case 130:
//#line 253 ".\gramatica.y"
{ logger.logError("[Parser] Se esperaba un ) para la condicion de la sentencia de seleccion"); }
break;
case 131:
//#line 254 ".\gramatica.y"
{ logger.logError("[Parser] Se esperaba un ( para la condicion de la sentencia de seleccion"); }
break;
case 132:
//#line 255 ".\gramatica.y"
{ logger.logError("[Parser] Se esperaba una condicion para la sentencia de seleccion"); }
break;
case 133:
//#line 256 ".\gramatica.y"
{ logger.logError("[Parser] Se esperaba la palabra reservada then en la sentencia de seleccion"); }
break;
case 134:
//#line 257 ".\gramatica.y"
{ logger.logError("[Parser] Se esperaba un ; al final de la sentencia de seleccion"); }
break;
case 135:
//#line 258 ".\gramatica.y"
{ logger.logError("[Parser] Se esperaba un bloque de sentencias en la sentencia de seleccion luego de la palabra reservada then"); }
break;
case 136:
//#line 259 ".\gramatica.y"
{ logger.logError("[Parser] Se esperaba un ) para la condicion de la sentencia de seleccion"); }
break;
case 137:
//#line 260 ".\gramatica.y"
{ logger.logError("[Parser] Se esperaba un ( para la condicion de la sentencia de seleccion"); }
break;
case 138:
//#line 261 ".\gramatica.y"
{ logger.logError("[Parser] Se esperaba una condicion para la sentencia de seleccion"); }
break;
case 139:
//#line 262 ".\gramatica.y"
{ logger.logError("[Parser] Se esperaba la palabra reservada then en la sentencia de seleccion"); }
break;
case 140:
//#line 263 ".\gramatica.y"
{ logger.logError("[Parser] Se esperaba un bloque de sentencias en la sentencia de seleccion luego de la palabra reservada then"); }
break;
case 141:
//#line 264 ".\gramatica.y"
{ logger.logError("[Parser] Se esperaba un bloque de sentencias en la sentencia de seleccion luego de la palabra reservada else"); }
break;
case 142:
//#line 265 ".\gramatica.y"
{ logger.logError("[Parser] Se esperaba un ; al final de la sentencia de seleccion"); }
break;
case 143:
//#line 266 ".\gramatica.y"
{ logger.logError("[Parser] Se esperaba un bloque de sentencias para el then y el else de la sentencia de seleccion"); }
break;
case 146:
//#line 272 ".\gramatica.y"
{ logger.logError("[Parser] Se esperaba un { para el bloque de sentencias en la sentencia if"); }
break;
case 147:
//#line 273 ".\gramatica.y"
{ logger.logError("[Parser] Se esperaba un } para el bloque de sentencias en la sentencia if"); }
break;
case 148:
//#line 274 ".\gramatica.y"
{ logger.logError("[Parser] Se esperaba sentencias ejecutables dentro del bloque if"); }
break;
case 152:
//#line 284 ".\gramatica.y"
{ logger.logError("[Parser] Se esperaba un expresion del lado derecho de la comparacion"); }
break;
case 153:
//#line 285 ".\gramatica.y"
{ logger.logError("[Parser] Se esperaba un expresion del lado izquierdo de la comparacion"); }
break;
case 175:
//#line 331 ".\gramatica.y"
{ logger.logSuccess("[Parser] Sentencia out detectada"); }
break;
case 176:
//#line 332 ".\gramatica.y"
{ logger.logSuccess("[Parser] Sentencia out detectada"); }
break;
case 177:
//#line 333 ".\gramatica.y"
{ logger.logError("[Parser] Se esperaba una cadena o identificador en la sentencia out"); }
break;
case 178:
//#line 334 ".\gramatica.y"
{ logger.logError("[Parser] Se esperaba un ( en la sentencia out"); }
break;
case 179:
//#line 335 ".\gramatica.y"
{ logger.logError("[Parser] Se esperaba un ) en la sentencia out"); }
break;
case 180:
//#line 336 ".\gramatica.y"
{ logger.logError("[Parser] Se esperaba un ( en la sentencia out"); }
break;
case 181:
//#line 337 ".\gramatica.y"
{ logger.logError("[Parser] Se esperaba un ) en la sentencia out"); }
break;
case 182:
//#line 338 ".\gramatica.y"
{ logger.logError("[Parser] Se espera un ; al final de la sentencia out"); }
break;
case 183:
//#line 339 ".\gramatica.y"
{ logger.logError("[Parser] Se espera un ; al final de la sentencia out"); }
break;
case 185:
//#line 344 ".\gramatica.y"
{ constanteConSigno(val_peek(0).sval); }
break;
//#line 1421 "Parser.java"
//########## END OF USER-SUPPLIED ACTIONS ##########
    }//switch
    //#### Now let's reduce... ####
    if (yydebug) debug("reduce");
    state_drop(yym);             //we just reduced yylen states
    yystate = state_peek(0);     //get new state
    val_drop(yym);               //corresponding value drop
    yym = yylhs[yyn];            //select next TERMINAL(on lhs)
    if (yystate == 0 && yym == 0)//done? 'rest' state and at first TERMINAL
      {
      if (yydebug) debug("After reduction, shifting from state 0 to state "+YYFINAL+"");
      yystate = YYFINAL;         //explicitly say we're done
      state_push(YYFINAL);       //and save it
      val_push(yyval);           //also save the semantic value of parsing
      if (yychar < 0)            //we want another character?
        {
        yychar = yylex();        //get next character
        if (yychar<0) yychar=0;  //clean, if necessary
        if (yydebug)
          yylexdebug(yystate,yychar);
        }
      if (yychar == 0)          //Good exit (if lex returns 0 ;-)
         break;                 //quit the loop--all DONE
      }//if yystate
    else                        //else not done yet
      {                         //get next state and push, for next yydefred[]
      yyn = yygindex[yym];      //find out where to go
      if ((yyn != 0) && (yyn += yystate) >= 0 &&
            yyn <= YYTABLESIZE && yycheck[yyn] == yystate)
        yystate = yytable[yyn]; //get new state
      else
        yystate = yydgoto[yym]; //else go to new defred
      if (yydebug) debug("after reduction, shifting from state "+state_peek(0)+" to state "+yystate+"");
      state_push(yystate);     //going again, so push state & val...
      val_push(yyval);         //for next action
      }
    }//main loop
  return 0;//yyaccept!!
}
//## end of method parse() ######################################



//## run() --- for Thread #######################################
/**
 * A default run method, used for operating this parser
 * object in the background.  It is intended for extending Thread
 * or implementing Runnable.  Turn off with -Jnorun .
 */
public void run()
{
  yyparse();
}
//## end of method run() ########################################



//## Constructors ###############################################
/**
 * Default constructor.  Turn off with -Jnoconstruct .

 */
public Parser()
{
  //nothing to do
}


/**
 * Create a parser, setting the debug to true or false.
 * @param debugMe true for debugging, false for no debug.
 */
public Parser(boolean debugMe)
{
  yydebug=debugMe;
}
//###############################################################



}
//################### END OF CLASS ##############################
