//### This file created by BYACC 1.8(/Java extension  1.15)
//### Java capabilities added 7 Jan 97, Bob Jamison
//### Updated : 27 Nov 97  -- Bob Jamison, Joe Nieten
//###           01 Jan 98  -- Bob Jamison -- fixed generic semantic constructor
//###           01 Jun 99  -- Bob Jamison -- added Runnable support
//###           06 Aug 00  -- Bob Jamison -- made state variables class-global
//###           03 Jan 01  -- Bob Jamison -- improved flags, tracing
//###           16 May 01  -- Bob Jamison -- added custom stack sizing
//###           04 Mar 02  -- Yuval Oren  -- improved java performance, added options
//###           14 Mar 02  -- Tomas Hurka -- -d support, static initializer workaround
//### Please send bug reports to tom@hukatronic.cz
//### static char yysccsid[] = "@(#)yaccpar	1.8 (Berkeley) 01/20/90";






//#line 2 ".\gramatica.y"
package compilador;
import java.io.File;
//#line 20 "Parser.java"




public class Parser
{

boolean yydebug;        //do I want debug output?
int yynerrs;            //number of errors so far
int yyerrflag;          //was there an error?
int yychar;             //the current working character

//########## MESSAGES ##########
//###############################################################
// method: debug
//###############################################################
void debug(String msg)
{
  if (yydebug)
    System.out.println(msg);
}

//########## STATE STACK ##########
final static int YYSTACKSIZE = 500;  //maximum stack size
int statestk[] = new int[YYSTACKSIZE]; //state stack
int stateptr;
int stateptrmax;                     //highest index of stackptr
int statemax;                        //state when highest index reached
//###############################################################
// methods: state stack push,pop,drop,peek
//###############################################################
final void state_push(int state)
{
  try {
		stateptr++;
		statestk[stateptr]=state;
	 }
	 catch (ArrayIndexOutOfBoundsException e) {
     int oldsize = statestk.length;
     int newsize = oldsize * 2;
     int[] newstack = new int[newsize];
     System.arraycopy(statestk,0,newstack,0,oldsize);
     statestk = newstack;
     statestk[stateptr]=state;
  }
}
final int state_pop()
{
  return statestk[stateptr--];
}
final void state_drop(int cnt)
{
  stateptr -= cnt; 
}
final int state_peek(int relative)
{
  return statestk[stateptr-relative];
}
//###############################################################
// method: init_stacks : allocate and prepare stacks
//###############################################################
final boolean init_stacks()
{
  stateptr = -1;
  val_init();
  return true;
}
//###############################################################
// method: dump_stacks : show n levels of the stacks
//###############################################################
void dump_stacks(int count)
{
int i;
  System.out.println("=index==state====value=     s:"+stateptr+"  v:"+valptr);
  for (i=0;i<count;i++)
    System.out.println(" "+i+"    "+statestk[i]+"      "+valstk[i]);
  System.out.println("======================");
}


//########## SEMANTIC VALUES ##########
//public class ParserVal is defined in ParserVal.java


String   yytext;//user variable to return contextual strings
ParserVal yyval; //used to return semantic vals from action routines
ParserVal yylval;//the 'lval' (result) I got from yylex()
ParserVal valstk[];
int valptr;
//###############################################################
// methods: value stack push,pop,drop,peek.
//###############################################################
void val_init()
{
  valstk=new ParserVal[YYSTACKSIZE];
  yyval=new ParserVal();
  yylval=new ParserVal();
  valptr=-1;
}
void val_push(ParserVal val)
{
  if (valptr>=YYSTACKSIZE)
    return;
  valstk[++valptr]=val;
}
ParserVal val_pop()
{
  if (valptr<0)
    return new ParserVal();
  return valstk[valptr--];
}
void val_drop(int cnt)
{
int ptr;
  ptr=valptr-cnt;
  if (ptr<0)
    return;
  valptr = ptr;
}
ParserVal val_peek(int relative)
{
int ptr;
  ptr=valptr-relative;
  if (ptr<0)
    return new ParserVal();
  return valstk[ptr];
}
final ParserVal dup_yyval(ParserVal val)
{
  ParserVal dup = new ParserVal();
  dup.ival = val.ival;
  dup.dval = val.dval;
  dup.sval = val.sval;
  dup.obj = val.obj;
  return dup;
}
//#### end semantic value section ####
public final static short ID=257;
public final static short CTE=258;
public final static short CADENA=259;
public final static short IF=260;
public final static short THEN=261;
public final static short ELSE=262;
public final static short ENDIF=263;
public final static short OUT=264;
public final static short FUN=265;
public final static short RETURN=266;
public final static short BREAK=267;
public final static short ASIGNACION=268;
public final static short COMP_MAYOR_IGUAL=269;
public final static short COMP_MENOR_IGUAL=270;
public final static short COMP_DISTINTO=271;
public final static short WHEN=272;
public final static short DO=273;
public final static short UNTIL=274;
public final static short CONTINUE=275;
public final static short DOUBLE64=276;
public final static short UINT16=277;
public final static short DEFER=278;
public final static short CONST=279;
public final static short YYERRCODE=256;
final static short yylhs[] = {                           -1,
    0,    0,    0,    0,    0,    0,    1,    2,    2,    3,
    3,    4,    4,    4,    4,    6,    6,    6,    6,   11,
   11,    7,    7,    7,   14,   14,   15,   15,   16,   16,
   16,   16,   16,   16,   16,   16,   16,   16,   22,   22,
    8,    8,   23,   23,   23,   23,   23,   23,   23,   23,
   23,   23,   23,   23,   23,   23,   25,   25,   25,   21,
   21,   21,   21,   21,   21,   21,   21,   21,   21,   21,
   21,   21,   21,   19,   19,   19,   19,   19,   19,   19,
   19,   19,   19,   19,   19,   19,   20,   20,   20,   20,
   20,   20,   26,   26,   26,   26,   26,   26,   26,   26,
   26,   26,   26,   26,   26,   28,   28,   29,   29,   29,
   12,   12,   12,   12,   12,   12,   12,   12,   12,   12,
   13,   13,   13,   13,   13,   32,   32,   32,   35,   35,
   34,   34,   36,   34,    9,    9,    9,   37,   37,   38,
   38,   38,   38,   38,    5,    5,    5,    5,    5,    5,
    5,    5,    5,    5,   42,   42,   42,   30,   30,   30,
   30,   30,   31,   31,   41,   41,   43,   43,   43,   43,
   43,   27,   44,   44,   44,   44,   45,   45,   17,   17,
   17,   17,   17,   40,   40,   40,   40,   40,   40,   46,
   46,   39,   39,   39,   39,   39,   39,   39,   39,   39,
   39,   39,   39,   47,   47,   47,   47,   47,   48,   48,
   24,   24,   24,   49,   49,   49,   49,   49,   49,   33,
   33,   33,   50,   50,   50,   51,   51,   51,   53,   53,
   54,   54,   55,   55,   18,   18,   18,   18,   18,   18,
   18,   18,   18,   52,   52,   10,   10,
};
final static short yylen[] = {                            2,
    4,    3,    3,    3,    3,    0,    1,    1,    2,    1,
    1,    1,    1,    1,    1,    3,    2,    2,    2,    3,
    1,    4,    5,    3,    1,    2,    1,    1,    1,    2,
    1,    2,    1,    2,    1,    2,    1,    2,    1,    2,
    4,    5,   10,   13,   13,   13,   13,   16,   16,    9,
   12,   12,   12,   12,   15,   15,    1,    1,    2,    8,
    8,    8,   11,   11,   15,   13,   13,   15,   15,   15,
   13,   13,   14,    9,   10,   10,    8,    9,    9,    8,
    8,    9,    9,    8,    9,    9,    7,    9,    6,    8,
    5,    7,    1,    1,    1,    4,    4,    3,    2,    3,
    3,    3,    3,    2,    2,    1,    2,    1,    1,    1,
    6,    7,    5,    5,    5,    5,    6,    6,    6,    6,
    5,    4,    3,    3,    4,    1,    3,    5,    1,    3,
    2,    1,    0,    2,    3,    2,    2,    1,    3,    3,
    2,    2,    1,    3,    1,    2,    1,    2,    1,    2,
    1,    2,    1,    2,    1,    1,    1,    2,    4,    1,
    3,    3,    2,    1,    1,    3,    7,    6,    6,    6,
    6,    1,    1,    3,    2,    2,    1,    2,    4,    3,
    3,    4,    3,    9,    8,    8,    8,    7,    6,    1,
    2,    8,   10,    7,    9,    7,    7,    7,    7,    7,
    9,    9,    8,    1,    3,    2,    2,    2,    1,    2,
    3,    2,    2,    1,    1,    1,    1,    1,    1,    3,
    3,    1,    3,    3,    1,    1,    1,    1,    3,    4,
    1,    3,    1,    1,    5,    5,    4,    4,    4,    4,
    4,    4,    4,    1,    2,    1,    1,
};
final static short yydefred[] = {                         0,
    7,    0,    0,    0,    0,    0,    0,    0,    0,    0,
  247,  246,    0,    0,    0,    8,   10,   11,   12,   13,
   14,   15,    0,    0,    0,  145,  149,    0,  147,  151,
  153,  165,    0,    0,    0,    0,    0,    0,  244,  214,
  215,  216,    0,    0,  219,  217,  218,    0,    0,    0,
    0,  225,  227,  228,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,  155,  156,  157,    0,    0,    0,
  146,  150,  148,  152,  154,    0,  137,    0,    0,    2,
    9,    0,   19,    0,   18,    0,    0,    5,    0,    3,
  180,    0,   20,    0,    0,  245,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
  158,    0,  163,  177,    0,    0,  176,  178,  142,    0,
    0,  135,    0,   16,    0,    0,    0,    0,    0,   24,
   27,    0,    0,   25,   28,   29,   31,   33,   35,   37,
    0,    0,  166,    1,  179,  182,  233,  229,  234,    0,
  231,    0,    0,    0,    0,    0,    0,    0,  223,  224,
  240,  238,  241,    0,  239,    0,  237,    0,    0,    0,
    0,  131,    0,    0,  134,    0,    0,    0,    0,  172,
  162,    0,  174,    0,    0,  140,  144,  139,    0,    0,
    0,    0,    0,   93,  108,   94,    0,    0,  106,  109,
  110,    0,   30,   32,   34,   36,   38,   22,    0,   26,
    0,   41,    0,    0,  230,    0,    0,    0,    0,    0,
    0,    0,    0,  236,  235,    0,  116,    0,    0,  115,
    0,    0,  114,    0,    0,    0,    0,  159,    0,    0,
    0,    0,    0,    0,  123,    0,    0,   99,    0,    0,
  105,    0,    0,  107,    0,   23,   42,    0,  232,  206,
  209,    0,    0,    0,  208,  210,    0,    0,    0,    0,
    0,    0,    0,  111,    0,  120,  119,    0,  118,    0,
    0,    0,  189,    0,  169,  171,    0,  170,    0,  125,
    0,    0,    0,   98,    0,    0,    0,  101,  103,    0,
    0,  205,    0,  198,  196,    0,  199,    0,    0,    0,
  200,  197,  112,    0,  128,  191,    0,    0,    0,  167,
    0,  121,    0,    0,    0,   96,   97,   91,    0,    0,
    0,    0,  203,    0,  192,    0,    0,  186,    0,  185,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,  201,    0,  202,  130,  184,   59,   39,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,   87,    0,    0,    0,   92,    0,
  193,    0,    0,   40,    0,   60,    0,   62,   61,    0,
    0,   57,   58,    0,    0,   81,    0,    0,   80,    0,
    0,    0,   84,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,   82,   83,   74,    0,    0,   85,
   86,    0,    0,   88,    0,    0,    0,    0,    0,    0,
    0,    0,    0,   43,    0,   75,   76,    0,    0,    0,
    0,    0,    0,   63,    0,    0,    0,   64,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,   66,   44,    0,    0,
   67,   45,   71,   72,   46,   47,    0,    0,    0,   73,
    0,    0,    0,    0,    0,    0,    0,    0,   69,   70,
   65,    0,   68,    0,    0,    0,   48,   49,    0,    0,
    0,    0,    0,    0,
};
final static short yydgoto[] = {                          3,
    4,   15,  290,   17,   18,   19,   20,   21,   22,   23,
   24,   25,  402,  143,  144,  369,  146,  147,  148,  149,
  150,  370,  403,   48,  356,  207,  152,  208,  209,  210,
  211,  114,   49,  115,  325,  116,   78,   79,   29,   30,
   31,  128,   32,   69,   70,  291,  228,  229,   50,   51,
   52,   53,   54,  160,  161,
};
final static short yysindex[] = {                       -85,
    0, 1733,    0,  -64,  -42,   31,    6,  -34,   57, 1034,
    0,    0,  269,  -28, 1298,    0,    0,    0,    0,    0,
    0,    0,  -11,   13,    4,    0,    0,   23,    0,    0,
    0,    0, 1321, 1349,   50, -117,  -24,   97,    0,    0,
    0,    0, -109,   53,    0,    0,    0,  126,  -27,  -24,
   33,    0,    0,    0,  136,  143,   36,  -26,  -15,  616,
  -41,   96,  121, 1781,    0,    0,    0,    0,  -67, 1550,
    0,    0,    0,    0,    0,  -48,    0,  160,  177,    0,
    0,  233,    0,  214,    0, 1288,   26,    0, 1375,    0,
    0,  115,    0,  152,   -5,    0,   59,  -37,   76,  -24,
  -24,  -24,  103,  -24,  -24,  255,  259,   41,   80,  268,
  -19,  283,   87,  308,  309,  109,  318,  340,  149,  363,
    0,   10,    0,    0, 1567,  838,    0,    0,    0,  178,
  184,    0,  158,    0,  378,   34,  404,  967,  432,    0,
    0,  323,  984,    0,    0,    0,    0,    0,    0,    0,
  326,  398,    0,    0,    0,    0,    0,    0,    0,   45,
    0,  948,  948, 1057,  948,   33,   33,  103,    0,    0,
    0,    0,    0,  400,    0,  417,    0,  426, -113,   66,
 -113,    0,  427, -113,    0, -113,  428,  364,  -55,    0,
    0,  429,    0,  995,  456,    0,    0,    0,  623,   71,
  339, 1018, 1587,    0,    0,    0,  228, 1495,    0,    0,
    0,  460,    0,    0,    0,    0,    0,    0,  379,    0,
  384,    0,  237,   90,    0, 1672,    0,  107, 1683,  248,
  903,  139,  250,    0,    0, -113,    0,  469, -113,    0,
 -113,  470,    0, -113, 1733,  405, 1385,    0,  471,   82,
  472,  491,  475,  354,    0,  274,  495,    0, 1512,  503,
    0,  424,  425,    0,  623,    0,    0,  967,    0,    0,
    0, 1694,  948,  492,    0,    0,  497,  294,  499,  144,
  948,  502,  505,    0, -113,    0,    0, -113,    0, 1733,
  437, 1733,    0,  441,    0,    0,  509,    0,  311,    0,
  511,  451,   48,    0,  453,  454, 1053,    0,    0,  546,
  322,    0,  327,    0,    0,  538,    0,  948,  539,  338,
    0,    0,    0,  558,    0,    0,  548,  480,  551,    0,
 1100,    0, 1758,  490, 1758,    0,    0,    0,  574,  359,
  587,  572,    0,  370,    0,  579, -113,    0,  580,    0,
  549,   99,  377,  146,  380,  385,  -98, 1408,   20,  582,
 1120, 1085,    0,  583,    0,    0,    0,    0,    0, 1616,
  586,  523,  589,  595,   65,  618,  600,  535,  540,  607,
  179,  610,  545,  547,    0,   99,  377,  380,    0,  633,
    0,  419,  554,    0,  561,    0,   99,    0,    0,  431,
   99,    0,    0,  430,  623,    0,  628,  635,    0,  636,
  573,  575,    0,  638,  640, 1616,  643,  588,  163,  165,
 1351, 1351,  647,  662,    0,    0,    0,  650,  660,    0,
    0,  596,  605,    0,   99, 1131,  661, 1148,  672,  608,
  611,  612,  634,    0,  510,    0,    0,  167,  170, 1633,
   99,  519,  520,    0,   99,  541,  542,    0,  544,  553,
  555,  556,   95, 1158, 1177,  568,  637,  683, 1650,  673,
  701, 1661,  713,  752,  753,  755,  758,  785,   99,   99,
   99,  786,  584,  609,  613,  724,    0,    0,  619,  725,
    0,    0,    0,    0,    0,    0, 1351, 1705, 1716,    0,
  800,  816,  820,  621,  829,  626,  766,  771,    0,    0,
    0,  843,    0,  844,  652,  653,    0,    0,  180,  183,
   99,   99, 1800, 1800,
};
final static short yyrindex[] = {                       897,
    0,    0,    0,    0,  376,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,  478,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
  524,    0,    0,    0,    0,    0,    0,  655,  655,    0,
  867, 1431, 1454,    0,    0,    0,    0, 1531,    0,    0,
    0,    0,    0,    0,    0,  316,    0,  217,  877,    0,
    0,  913,    0,  937,    0,    0,    0,    0,  926,    0,
    0,  501,    0,  644,    0,    0,    0,    0,    0,    0,
    0,  -36,  -30,    0,    0,    0,    0,    0,    0,    0,
  655,    0,   29,    0,   85,    0,    0,    0,    0,    0,
    0,    0,    0,    0,  654,    0,    0,    0,    0,  846,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,  563,  591,  -29,    0,    0,
    0,    0,    0,  667,    0,  690,    0,    0,    0,    0,
    0,    0,    0,  655,    0,    0,    0,    0,    0,    0,
    0, 1476,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,  674,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0, 1606,    0,    0,    0,
    0,    0,    0,    0,    0,  815,    0,    0,    0,    0,
    0,   89,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,  -93,    0,    0,    0,    0,  675,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,  203,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,  828,    0,    0,  655,    0,  833,
    0,    0,    0,    0,    0,    0,  450,    0,    0,    0,
  -84,    0,    0,    0,  685,  686,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,  718,    0,
    0,    0,    0,   92,    0,    0,    0,    0,  746,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,  655,    0,  770,    0,
    0,    0,  699,    0,  708,    0,    0,    0,    0, 1074,
    0,    0,    0,  810,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0, 1194,
    0,    0,    0,    0,    0,    0, 1219,    0,    0,    0,
    0,    0,  157,    0,    0,    0,    0, 1242, 1265,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
  201,    0,    0,  229,    0,    0,  243,  297,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,  337,    0,  355,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,
};
final static short yygindex[] = {                         0,
    0,   52,   86,  -79,   40,    0,    0,    0,    0,  -50,
   42,    0,  -76,    0,   -1,  -86,  226,  383, -114, -111,
  -81, 1540,  -83,  -43,  664,  705,  390,  773, -154,   32,
   74,  -12,   16, -160,  627,    0,  851,    0,  964,  966,
  973,   39,  900,    0,  924, -184, -120,  763,  949,  367,
  365,  -58,    0,    0,  775,
};
final static int YYTABLESIZE=2078;
static short yytable[];
static { yytable();}
static void yytable(){
yytable = new short[]{                        145,
   98,   36,  151,  164,  212,   59,  141,  113,  113,  142,
  213,  211,  131,  111,  112,  100,  120,  101,   37,   37,
   43,  178,  212,  242,  215,  117,  377,  216,  213,  211,
   77,  124,   47,   45,   46,  158,  159,    2,  179,   43,
  122,   66,  230,  232,  233,   57,  118,   83,   68,   65,
   92,  205,   94,  264,  206,   34,  145,  217,   33,  221,
  113,  204,  294,  141,   84,  103,  219,  247,  191,  132,
   44,   85,  132,  200,  104,   43,  110,   93,   43,  105,
   87,  174,  195,   67,   89,  225,  132,   16,  224,   16,
   47,   45,   46,   97,   43,   66,   60,   43,  180,  173,
   81,   66,  124,   65,  264,  326,  238,  328,   91,   65,
  280,  253,   47,   45,   46,   43,  205,  168,   16,   81,
  176,  205,  297,  239,  263,  126,   86,  324,  237,  127,
  240,  262,  129,  113,   43,  243,   95,   67,  175,   82,
  296,  220,  126,   67,  382,  100,  127,  101,   96,  129,
  250,  201,  313,  122,  121,  252,   66,  100,  257,  101,
  320,  376,   11,   12,   65,  159,   99,  136,  124,  124,
  335,    1,  205,  155,   81,  306,  106,  122,  122,  123,
  124,  205,  305,  107,  206,  284,  324,  401,  286,  122,
  287,  204,    5,  289,  100,    6,  101,  344,   67,    7,
    8,  227,  227,  227,  227,  246,  126,    9,   10,  129,
  156,   11,   12,   13,   14,  254,  136,  479,  132,  130,
  133,  310,   58,  163,  212,   35,   35,   26,   76,   26,
  213,  211,   38,   39,  323,   26,  215,  113,   71,  216,
   26,   40,   41,   42,  354,   82,  145,  355,  145,   11,
   12,  157,   39,  141,  353,  141,   11,   12,   26,   26,
   11,   12,   55,  339,   56,  271,  190,  368,  276,  217,
  227,  145,  134,  379,  354,  384,   36,  388,  141,  376,
  378,   50,  383,  394,  387,  136,  395,   38,   39,   26,
   38,   39,  108,  393,  109,   26,  113,  412,   10,   40,
   41,   42,  521,  410,  411,  522,   38,   39,  334,   38,
   39,  276,  227,  171,   26,  143,  368,  172,  390,  162,
  227,   40,   41,   42,  376,   51,  177,   38,   39,  394,
  136,  357,  433,  359,  394,  394,  165,  441,  443,  432,
  181,  136,  400,  182,  440,  442,  157,   39,  183,  452,
   26,  456,  184,   52,  376,   61,  381,  227,  212,  143,
  136,  424,    7,  394,  213,  185,  468,   53,  273,  274,
  137,  138,  400,  467,  143,  186,  139,  452,  456,  255,
  187,  100,  394,  101,   27,  394,   27,   26,   26,   26,
   26,   28,   27,   28,  301,   72,  100,   27,  101,   28,
  281,  282,   28,  189,   28,  318,  319,  372,  373,  188,
  394,  394,  394,  508,   76,   27,   27,  199,   50,   50,
  507,   54,   28,   28,  436,  437,  438,  439,  464,  437,
   50,  465,  439,  172,   21,  196,  394,  394,  376,  376,
  143,  197,  376,  202,  136,  136,   27,  218,  136,  168,
  222,   26,   27,   28,   26,  223,   26,  400,  234,   28,
  400,   55,   51,   51,  207,  207,  166,  167,  169,  170,
   26,   27,   26,  136,   51,  235,  136,  226,   28,   56,
  136,  136,  136,  236,  241,  244,  245,  248,  136,  136,
   52,   52,  136,  136,  136,  136,  251,   26,   26,  265,
  181,  260,   52,  266,   53,   53,   26,   27,  267,  268,
  277,  192,  283,  288,   28,   26,   53,   26,  226,  226,
  226,  214,  226,  222,  226,   61,  285,  292,    6,  295,
  298,  299,    7,  300,  302,  303,  226,  226,  226,  226,
    9,   10,  307,   26,   27,   27,   27,   27,  308,  309,
  314,   28,   28,   28,   28,  315,  316,  317,   54,   54,
  321,  327,  220,  322,  222,  329,  222,  330,  222,  332,
   54,  331,  143,  333,  168,  143,  213,  336,  337,  143,
  143,  143,  222,  222,  222,  222,  340,  143,  143,  342,
  221,  143,  143,  143,  143,  341,  343,  345,   55,   55,
  346,  347,  226,  220,  349,  220,  348,  220,   27,  350,
   55,   27,  358,   27,  360,   28,   56,   56,   28,  361,
   28,  220,  220,  220,  220,  181,  362,   27,   56,   27,
  363,  221,  364,  221,   28,  221,   28,  365,  367,  371,
  385,  391,  374,  183,  396,  397,  375,  398,  222,  221,
  221,  221,  221,  399,   27,   27,  119,  405,  406,  407,
   43,   28,   28,   27,  408,  409,  243,   43,  413,  414,
   28,  415,   27,  417,   27,   47,   45,   46,  419,   28,
  418,   28,   47,   45,   46,  420,  425,  220,   61,  242,
  376,  212,  423,  426,  427,    7,  430,  428,  431,  429,
   27,  434,  445,  137,  138,  444,  168,   28,  446,  168,
  435,  168,  168,  168,  168,  221,  168,  194,  447,  454,
  448,  168,  168,  168,  168,  168,  168,  168,  168,  449,
  458,  487,  459,  214,  226,  460,  461,  226,  226,  226,
  226,  226,  226,  226,  226,  188,  226,  226,  226,  226,
  226,  226,  226,  226,  226,  226,  226,  181,  462,  488,
  181,  483,  181,  181,  181,  181,  181,  181,  183,  187,
  463,  491,  181,  181,  181,  181,  181,  181,  181,  181,
  222,  470,  471,  222,  222,  222,  222,  222,  222,  222,
  222,  243,  222,  222,  222,  222,  222,  222,  222,  222,
  222,  222,  222,  473,  474,   61,  475,  484,  135,  195,
  492,  493,    7,  494,  242,  476,  495,  477,  478,  220,
  137,  138,  220,  220,  220,  220,  220,  220,  220,  220,
  482,  220,  220,  220,  220,  220,  220,  220,  220,  220,
  220,  220,  194,  496,  500,  141,  501,  221,  504,  506,
  221,  221,  221,  221,  221,  221,  221,  221,  509,  221,
  221,  221,  221,  221,  221,  221,  221,  221,  221,  221,
  188,  502,   38,   39,  510,  503,  138,  194,  511,   38,
   39,  505,   43,  512,   40,   41,   42,  513,  514,  141,
  515,   40,   41,   42,  187,  516,    6,   47,   45,   46,
  183,  517,  518,  183,  141,  183,  183,  183,  183,  183,
  183,  133,   21,  519,  520,  183,  183,  183,  183,  183,
  183,  183,  183,  243,  172,    4,  243,  175,  243,  243,
  243,  243,  243,  243,  195,  138,   17,  113,  243,  243,
  243,  243,  243,  243,  243,  243,  242,   95,  104,  242,
  117,  242,  242,  242,  242,  242,  242,  190,  100,  102,
   57,  242,  242,  242,  242,  242,  242,  242,  242,   58,
  141,   21,  311,  366,  194,  259,   73,  194,   74,  194,
  194,  194,  194,  198,  194,   75,  153,  125,  272,  194,
  194,  194,  194,  194,  194,  194,  194,  102,  269,    0,
    0,  138,  188,    0,    0,  188,    0,  188,  188,  188,
  188,    0,  188,    0,    0,    0,    0,  188,  188,  188,
  188,  188,  188,  188,  188,  226,  187,    0,    0,  187,
    0,  187,  187,  187,  187,  249,  187,   21,  404,   43,
    0,  187,  187,  187,  187,  187,  187,  187,  187,    0,
    0,    0,    0,    0,   47,   45,   46,    0,  256,    0,
    0,   17,   43,    0,    0,    0,  195,    0,    0,  195,
  226,  195,  195,  195,  195,    0,  195,   47,   45,   46,
    0,  195,  195,  195,  195,  195,  195,  195,  195,  203,
    0,    0,    0,  338,   38,   39,    0,   43,    0,  453,
    0,  457,  141,    0,    0,  141,   40,   41,   42,  141,
  141,  141,   47,   45,   46,    0,    0,  141,  141,    0,
    0,  141,  141,  141,  141,  389,    0,    0,    0,   43,
    0,    0,  486,  138,    0,  490,  138,    0,    0,    0,
  138,  138,  138,    0,   47,   45,   46,    0,  138,  138,
    0,    0,  138,  138,  138,  138,   64,    0,    0,   61,
    0,    0,    6,    0,  278,  279,    7,    0,    0,   21,
    0,    0,   21,    0,    9,   10,   21,   21,   21,  226,
   13,    0,  453,  457,   21,   21,  486,  490,   21,   21,
   21,   21,    0,   17,    0,    0,   17,    0,   89,    0,
   17,   17,   17,    0,   61,    0,    0,    6,   17,   17,
    0,    7,   17,   17,   17,   17,    0,    0,    0,    9,
   10,    0,  352,   61,    0,   13,  135,    0,    0,    0,
    7,    0,  136,   62,    0,    0,    0,    0,  137,  138,
    5,   63,  386,  135,  139,    0,    0,    7,    8,  136,
    0,   38,   39,  451,    0,  137,  138,    0,    0,   11,
   12,  139,   14,   40,   41,   42,    0,    0,    0,    0,
  455,    0,    0,    0,   38,   39,    0,    0,    0,    0,
  480,    0,    0,    0,    0,    0,   40,   41,   42,    0,
   61,    0,    0,    6,    0,    0,    0,    7,    0,  481,
   62,    0,    0,    0,    0,    9,   10,    0,   63,   38,
   39,   13,    0,   61,    0,    0,    6,  231,   77,    0,
    7,   40,   41,   42,    0,    0,    0,    0,    9,   10,
   89,    0,    0,   89,   13,   89,   89,   89,   89,   89,
   89,   38,   39,   90,    0,   89,   89,   89,   89,   89,
   89,   89,   89,   40,   41,   42,   61,    0,    0,  135,
    0,    0,    0,    7,    0,  136,   78,    0,    0,    0,
    0,  137,  138,    0,    0,    0,   61,  351,    0,  135,
    0,    0,    0,    7,    0,  136,    0,   61,    0,   79,
  135,  137,  138,    0,    7,    0,  136,  139,    0,    0,
    0,    0,  137,  138,   61,    0,    0,  135,  351,    0,
    0,    7,  140,  136,   61,    0,    0,  212,    0,  137,
  138,    7,   80,    0,    0,  351,    0,    0,    0,  137,
  138,    0,    0,   61,    0,  139,  212,    0,    0,    0,
    7,    0,    0,    0,    0,   88,    0,    0,  137,  138,
   77,    0,    0,   77,  139,   77,   77,   77,   77,   77,
   77,    0,    0,    0,    0,   77,   77,   77,   77,   77,
   77,   77,   77,   90,    0,   90,    0,    0,   90,    0,
   90,   90,   90,   90,   90,   90,    0,    0,    0,    0,
   90,   90,   90,   90,   90,   90,   90,   90,   78,  154,
    0,   78,    0,   78,   78,   78,   78,   78,   78,  293,
    0,    0,    0,   78,   78,   78,   78,   78,   78,   78,
   78,   79,    0,    0,   79,    0,   79,   79,   79,   79,
   79,   79,  380,    0,    0,    0,   79,   79,   79,   79,
   79,   79,   79,   79,    5,    0,    0,  135,    0,    0,
    0,    7,    8,  136,    5,  160,    0,    6,    0,  137,
  138,    7,    8,   11,   12,  139,   14,    0,    0,    9,
   10,    0,    0,   11,   12,   13,   14,    5,  164,    0,
    6,    0,    0,    0,    7,    8,    0,    0,    0,    0,
    0,    0,    9,   10,    0,    0,   11,   12,   13,   14,
  161,    0,    0,    0,    0,    5,    0,   61,    6,    0,
  135,    0,    7,    8,    7,    0,  136,    0,    0,  261,
    9,   10,  137,  138,   11,   12,   13,   14,  139,    0,
    0,    5,    0,    0,    6,    0,  304,    0,    7,    8,
    0,    5,    0,    0,    6,    0,    9,   10,    7,    8,
   11,   12,   13,   14,    0,  177,    9,   10,    0,    0,
   11,   12,   13,   14,    5,    0,    0,  212,    0,    0,
    0,    7,    8,    0,  127,    0,    0,    0,    0,  137,
  138,    0,    0,   11,   12,  139,   14,  160,    0,    0,
  160,  193,    0,    0,  160,    0,  160,  160,    0,    0,
    0,    0,  160,  160,  160,  160,    0,    0,  160,    0,
  164,  258,    0,  164,    0,    0,    0,  164,    0,  164,
  164,    0,    0,    0,    0,  164,  164,  164,  164,    0,
  209,  164,  161,    0,    0,  161,    0,    0,    0,  161,
  392,  161,  161,    0,    0,    0,    0,  161,  161,  161,
  161,   61,    0,  161,  135,    0,    0,  466,    7,    0,
  136,   62,    0,    0,    0,    0,  137,  138,   61,   63,
    0,  135,  139,    0,  485,    7,    0,  136,   62,    0,
    0,    0,    0,  137,  138,  489,   63,  177,    0,  139,
  177,    0,    0,    0,  177,    0,  270,  177,    0,    0,
    0,    0,  177,  177,  173,  177,   61,  275,  177,    6,
    0,    0,    0,    7,    0,    0,   62,    0,  312,    0,
    0,    9,   10,   61,   63,    0,    6,   13,    0,  485,
    7,    0,    0,   62,    0,    0,    0,    0,    9,   10,
  489,   63,    0,   61,   13,    0,  212,    0,    0,    0,
    7,    0,    0,   62,    0,    0,    0,    0,  137,  138,
    0,   63,  209,    0,  139,  209,    0,  204,  204,  209,
    0,    0,   61,    0,    0,  135,    0,  209,  209,    7,
    0,  136,    0,  209,    0,    0,    0,  137,  138,   61,
    0,    0,  135,  139,    0,    0,    7,    0,  136,    0,
    0,    0,    0,    0,  137,  138,   61,    0,    0,  135,
  139,    0,    0,    7,    0,  136,    0,   61,    0,    0,
  135,  137,  138,    0,    7,  416,  136,  351,   61,    0,
    0,    6,  137,  138,    0,    7,  421,    0,  351,   61,
  422,    0,    6,    9,   10,    0,    7,    0,    0,   13,
   61,    0,    0,    6,    9,   10,    0,    7,    0,    0,
   13,   61,    0,    0,  212,    9,   10,    0,    7,    0,
    0,   13,   61,    0,  450,  212,  137,  138,    0,    7,
    0,    0,  139,    0,    0,    0,    0,  137,  138,    5,
  469,    0,    6,  139,  472,    0,    7,    8,    0,    0,
    0,    0,    0,    0,    9,   10,    0,    0,   11,   12,
   13,   14,    0,    0,    5,    0,    0,  212,  497,  498,
  499,    7,    8,    0,    0,    0,    0,    0,    0,  137,
  138,    0,    0,   11,   12,  139,   14,   61,    0,    0,
    6,    0,    0,    0,    7,    0,    0,   62,    0,    0,
    0,    0,    9,   10,    0,   63,   61,    0,   13,  135,
  523,  524,    0,    7,    0,  136,    0,    0,    0,    0,
    0,  137,  138,    0,    0,    0,    0,  351,
};
}
static short yycheck[];
static { yycheck(); }
static void yycheck() {
yycheck = new short[] {                         86,
   44,   44,   86,   41,   41,   40,   86,   58,   59,   86,
   41,   41,   61,   40,   41,   43,   60,   45,   61,   61,
   45,   41,   59,  184,  139,   41,  125,  139,   59,   59,
   59,  125,   60,   61,   62,   41,   95,  123,   58,   45,
  125,   10,  163,  164,  165,   40,   59,   59,   10,   10,
   35,  138,   37,  208,  138,    4,  143,  139,  123,  143,
  111,  138,  247,  143,   23,   50,  143,  123,   59,   41,
   40,   59,   44,   40,   42,   45,   41,   36,   45,   47,
   58,   41,  126,   10,   33,   41,   58,    2,   44,    4,
   60,   61,   62,   41,   45,   64,   40,   45,  111,   59,
   15,   70,   64,   64,  259,  290,   41,  292,   59,   70,
  231,   41,   60,   61,   62,   45,  203,  102,   33,   34,
   41,  208,   41,   58,  208,   41,  123,  288,  179,   41,
  181,  208,   41,  184,   45,  186,   40,   64,   59,  257,
   59,  143,   58,   70,  125,   43,   58,   45,  258,   58,
  194,  136,  273,   58,   59,  199,  125,   43,  202,   45,
  281,  260,  276,  277,  125,  224,   41,  266,  262,  263,
  123,  257,  259,   59,   89,  259,   41,  262,  263,   59,
  274,  268,  259,   41,  268,  236,  347,  123,  239,  274,
  241,  268,  257,  244,   43,  260,   45,  318,  125,  264,
  265,  162,  163,  164,  165,  261,  274,  272,  273,  258,
   59,  276,  277,  278,  279,  200,    0,  123,   59,  268,
   44,  265,  257,  261,  261,  268,  268,    2,  257,    4,
  261,  261,  257,  258,  285,   10,  351,  288,   13,  351,
   15,  269,  270,  271,  331,  257,  333,  331,  335,  276,
  277,  257,  258,  333,  331,  335,  276,  277,   33,   34,
  276,  277,  257,  307,  259,  226,  257,  351,  229,  351,
  231,  358,   59,  357,  361,  359,   44,  361,  358,  260,
  357,  125,  359,  370,  361,  266,  370,  257,  258,   64,
  257,  258,  257,  370,  259,   70,  347,  381,  273,  269,
  270,  271,  123,  125,  381,  123,  257,  258,  261,  257,
  258,  272,  273,   59,   89,    0,  400,   59,  362,  261,
  281,  269,  270,  271,  260,  125,   59,  257,  258,  416,
  266,  333,  416,  335,  421,  422,  261,  421,  422,  416,
   58,  125,  278,  257,  421,  422,  257,  258,   41,  436,
  125,  438,   44,  125,  260,  257,  358,  318,  260,   44,
  266,  405,  264,  450,  139,  257,  450,  125,  262,  263,
  272,  273,  278,  450,   59,   58,  278,  464,  465,   41,
   41,   43,  469,   45,    2,  472,    4,  162,  163,  164,
  165,    2,   10,    4,   41,   13,   43,   15,   45,   10,
  262,  263,   13,   41,   15,  262,  263,  262,  263,  261,
  497,  498,  499,  497,  257,   33,   34,   40,  262,  263,
  497,  125,   33,   34,  262,  263,  262,  263,  262,  263,
  274,  262,  263,   58,   59,  258,  523,  524,  260,  260,
  125,  258,  260,   40,  266,  266,   64,  125,  266,    0,
  125,  226,   70,   64,  229,   58,  231,  278,   59,   70,
  278,  125,  262,  263,  262,  263,  100,  101,  104,  105,
  245,   89,  247,  257,  274,   59,  260,    0,   89,  125,
  264,  265,  266,   58,   58,   58,  123,   59,  272,  273,
  262,  263,  276,  277,  278,  279,   41,  272,  273,   40,
    0,  274,  274,  125,  262,  263,  281,  125,  125,  273,
  263,  122,  263,   44,  125,  290,  274,  292,   41,   42,
   43,  139,   45,    0,   47,  257,   58,  123,  260,   59,
   59,   41,  264,   59,  261,   41,   59,   60,   61,   62,
  272,  273,   40,  318,  162,  163,  164,  165,  125,  125,
   59,  162,  163,  164,  165,   59,  263,   59,  262,  263,
   59,  125,    0,   59,   41,  125,   43,   59,   45,   59,
  274,  261,  257,  123,  125,  260,  351,  125,  125,  264,
  265,  266,   59,   60,   61,   62,   41,  272,  273,  263,
    0,  276,  277,  278,  279,  274,   59,   59,  262,  263,
  263,   44,  125,   41,  125,   43,   59,   45,  226,   59,
  274,  229,  123,  231,   41,  226,  262,  263,  229,  261,
  231,   59,   60,   61,   62,  125,   40,  245,  274,  247,
   59,   41,  263,   43,  245,   45,  247,   59,   59,  263,
   59,   59,  263,    0,   59,  123,  262,   59,  125,   59,
   60,   61,   62,   59,  272,  273,   41,   40,   59,  125,
   45,  272,  273,  281,  125,   59,    0,   45,   59,  125,
  281,  125,  290,   41,  292,   60,   61,   62,  125,  290,
  262,  292,   60,   61,   62,  125,   59,  125,  257,    0,
  260,  260,  263,   59,   59,  264,   59,  125,   59,  125,
  318,   59,   41,  272,  273,   59,  257,  318,   59,  260,
  123,  262,  263,  264,  265,  125,  267,    0,   59,   59,
  125,  272,  273,  274,  275,  276,  277,  278,  279,  125,
   59,   59,  125,  351,  257,  125,  125,  260,  261,  262,
  263,  264,  265,  266,  267,    0,  269,  270,  271,  272,
  273,  274,  275,  276,  277,  278,  279,  257,  125,   59,
  260,  125,  262,  263,  264,  265,  266,  267,  125,    0,
  261,   59,  272,  273,  274,  275,  276,  277,  278,  279,
  257,  263,  263,  260,  261,  262,  263,  264,  265,  266,
  267,  125,  269,  270,  271,  272,  273,  274,  275,  276,
  277,  278,  279,  263,  263,  257,  263,  125,  260,    0,
   59,   59,  264,   59,  125,  263,   59,  263,  263,  257,
  272,  273,  260,  261,  262,  263,  264,  265,  266,  267,
  263,  269,  270,  271,  272,  273,  274,  275,  276,  277,
  278,  279,  125,   59,   59,    0,  263,  257,  125,  125,
  260,  261,  262,  263,  264,  265,  266,  267,   59,  269,
  270,  271,  272,  273,  274,  275,  276,  277,  278,  279,
  125,  263,  257,  258,   59,  263,    0,   40,   59,  257,
  258,  263,   45,  263,  269,  270,  271,   59,  263,   44,
  125,  269,  270,  271,  125,  125,    0,   60,   61,   62,
  257,   59,   59,  260,   59,  262,  263,  264,  265,  266,
  267,  257,    0,  262,  262,  272,  273,  274,  275,  276,
  277,  278,  279,  257,   58,    0,  260,  274,  262,  263,
  264,  265,  266,  267,  125,   59,    0,  123,  272,  273,
  274,  275,  276,  277,  278,  279,  257,  274,  274,  260,
  123,  262,  263,  264,  265,  266,  267,  125,  274,  274,
  262,  272,  273,  274,  275,  276,  277,  278,  279,  262,
  125,   59,  268,  347,  257,  203,   13,  260,   13,  262,
  263,  264,  265,  133,  267,   13,   87,   64,  226,  272,
  273,  274,  275,  276,  277,  278,  279,   49,  224,   -1,
   -1,  125,  257,   -1,   -1,  260,   -1,  262,  263,  264,
  265,   -1,  267,   -1,   -1,   -1,   -1,  272,  273,  274,
  275,  276,  277,  278,  279,  123,  257,   -1,   -1,  260,
   -1,  262,  263,  264,  265,   41,  267,  125,  375,   45,
   -1,  272,  273,  274,  275,  276,  277,  278,  279,   -1,
   -1,   -1,   -1,   -1,   60,   61,   62,   -1,   41,   -1,
   -1,  125,   45,   -1,   -1,   -1,  257,   -1,   -1,  260,
  123,  262,  263,  264,  265,   -1,  267,   60,   61,   62,
   -1,  272,  273,  274,  275,  276,  277,  278,  279,  123,
   -1,   -1,   -1,   41,  257,  258,   -1,   45,   -1,  436,
   -1,  438,  257,   -1,   -1,  260,  269,  270,  271,  264,
  265,  266,   60,   61,   62,   -1,   -1,  272,  273,   -1,
   -1,  276,  277,  278,  279,   41,   -1,   -1,   -1,   45,
   -1,   -1,  469,  257,   -1,  472,  260,   -1,   -1,   -1,
  264,  265,  266,   -1,   60,   61,   62,   -1,  272,  273,
   -1,   -1,  276,  277,  278,  279,  123,   -1,   -1,  257,
   -1,   -1,  260,   -1,  262,  263,  264,   -1,   -1,  257,
   -1,   -1,  260,   -1,  272,  273,  264,  265,  266,  123,
  278,   -1,  519,  520,  272,  273,  523,  524,  276,  277,
  278,  279,   -1,  257,   -1,   -1,  260,   -1,  125,   -1,
  264,  265,  266,   -1,  257,   -1,   -1,  260,  272,  273,
   -1,  264,  276,  277,  278,  279,   -1,   -1,   -1,  272,
  273,   -1,  123,  257,   -1,  278,  260,   -1,   -1,   -1,
  264,   -1,  266,  267,   -1,   -1,   -1,   -1,  272,  273,
  257,  275,  123,  260,  278,   -1,   -1,  264,  265,  266,
   -1,  257,  258,  123,   -1,  272,  273,   -1,   -1,  276,
  277,  278,  279,  269,  270,  271,   -1,   -1,   -1,   -1,
  123,   -1,   -1,   -1,  257,  258,   -1,   -1,   -1,   -1,
  123,   -1,   -1,   -1,   -1,   -1,  269,  270,  271,   -1,
  257,   -1,   -1,  260,   -1,   -1,   -1,  264,   -1,  123,
  267,   -1,   -1,   -1,   -1,  272,  273,   -1,  275,  257,
  258,  278,   -1,  257,   -1,   -1,  260,  261,  125,   -1,
  264,  269,  270,  271,   -1,   -1,   -1,   -1,  272,  273,
  257,   -1,   -1,  260,  278,  262,  263,  264,  265,  266,
  267,  257,  258,  125,   -1,  272,  273,  274,  275,  276,
  277,  278,  279,  269,  270,  271,  257,   -1,   -1,  260,
   -1,   -1,   -1,  264,   -1,  266,  125,   -1,   -1,   -1,
   -1,  272,  273,   -1,   -1,   -1,  257,  278,   -1,  260,
   -1,   -1,   -1,  264,   -1,  266,   -1,  257,   -1,  125,
  260,  272,  273,   -1,  264,   -1,  266,  278,   -1,   -1,
   -1,   -1,  272,  273,  257,   -1,   -1,  260,  278,   -1,
   -1,  264,  125,  266,  257,   -1,   -1,  260,   -1,  272,
  273,  264,  125,   -1,   -1,  278,   -1,   -1,   -1,  272,
  273,   -1,   -1,  257,   -1,  278,  260,   -1,   -1,   -1,
  264,   -1,   -1,   -1,   -1,  125,   -1,   -1,  272,  273,
  257,   -1,   -1,  260,  278,  262,  263,  264,  265,  266,
  267,   -1,   -1,   -1,   -1,  272,  273,  274,  275,  276,
  277,  278,  279,  125,   -1,  257,   -1,   -1,  260,   -1,
  262,  263,  264,  265,  266,  267,   -1,   -1,   -1,   -1,
  272,  273,  274,  275,  276,  277,  278,  279,  257,  125,
   -1,  260,   -1,  262,  263,  264,  265,  266,  267,  125,
   -1,   -1,   -1,  272,  273,  274,  275,  276,  277,  278,
  279,  257,   -1,   -1,  260,   -1,  262,  263,  264,  265,
  266,  267,  125,   -1,   -1,   -1,  272,  273,  274,  275,
  276,  277,  278,  279,  257,   -1,   -1,  260,   -1,   -1,
   -1,  264,  265,  266,  257,  125,   -1,  260,   -1,  272,
  273,  264,  265,  276,  277,  278,  279,   -1,   -1,  272,
  273,   -1,   -1,  276,  277,  278,  279,  257,  125,   -1,
  260,   -1,   -1,   -1,  264,  265,   -1,   -1,   -1,   -1,
   -1,   -1,  272,  273,   -1,   -1,  276,  277,  278,  279,
  125,   -1,   -1,   -1,   -1,  257,   -1,  257,  260,   -1,
  260,   -1,  264,  265,  264,   -1,  266,   -1,   -1,  125,
  272,  273,  272,  273,  276,  277,  278,  279,  278,   -1,
   -1,  257,   -1,   -1,  260,   -1,  125,   -1,  264,  265,
   -1,  257,   -1,   -1,  260,   -1,  272,  273,  264,  265,
  276,  277,  278,  279,   -1,  125,  272,  273,   -1,   -1,
  276,  277,  278,  279,  257,   -1,   -1,  260,   -1,   -1,
   -1,  264,  265,   -1,  125,   -1,   -1,   -1,   -1,  272,
  273,   -1,   -1,  276,  277,  278,  279,  257,   -1,   -1,
  260,  125,   -1,   -1,  264,   -1,  266,  267,   -1,   -1,
   -1,   -1,  272,  273,  274,  275,   -1,   -1,  278,   -1,
  257,  125,   -1,  260,   -1,   -1,   -1,  264,   -1,  266,
  267,   -1,   -1,   -1,   -1,  272,  273,  274,  275,   -1,
  125,  278,  257,   -1,   -1,  260,   -1,   -1,   -1,  264,
  125,  266,  267,   -1,   -1,   -1,   -1,  272,  273,  274,
  275,  257,   -1,  278,  260,   -1,   -1,  125,  264,   -1,
  266,  267,   -1,   -1,   -1,   -1,  272,  273,  257,  275,
   -1,  260,  278,   -1,  125,  264,   -1,  266,  267,   -1,
   -1,   -1,   -1,  272,  273,  125,  275,  257,   -1,  278,
  260,   -1,   -1,   -1,  264,   -1,  125,  267,   -1,   -1,
   -1,   -1,  272,  273,  274,  275,  257,  125,  278,  260,
   -1,   -1,   -1,  264,   -1,   -1,  267,   -1,  125,   -1,
   -1,  272,  273,  257,  275,   -1,  260,  278,   -1,  125,
  264,   -1,   -1,  267,   -1,   -1,   -1,   -1,  272,  273,
  125,  275,   -1,  257,  278,   -1,  260,   -1,   -1,   -1,
  264,   -1,   -1,  267,   -1,   -1,   -1,   -1,  272,  273,
   -1,  275,  257,   -1,  278,  260,   -1,  262,  263,  264,
   -1,   -1,  257,   -1,   -1,  260,   -1,  272,  273,  264,
   -1,  266,   -1,  278,   -1,   -1,   -1,  272,  273,  257,
   -1,   -1,  260,  278,   -1,   -1,  264,   -1,  266,   -1,
   -1,   -1,   -1,   -1,  272,  273,  257,   -1,   -1,  260,
  278,   -1,   -1,  264,   -1,  266,   -1,  257,   -1,   -1,
  260,  272,  273,   -1,  264,  386,  266,  278,  257,   -1,
   -1,  260,  272,  273,   -1,  264,  397,   -1,  278,  257,
  401,   -1,  260,  272,  273,   -1,  264,   -1,   -1,  278,
  257,   -1,   -1,  260,  272,  273,   -1,  264,   -1,   -1,
  278,  257,   -1,   -1,  260,  272,  273,   -1,  264,   -1,
   -1,  278,  257,   -1,  435,  260,  272,  273,   -1,  264,
   -1,   -1,  278,   -1,   -1,   -1,   -1,  272,  273,  257,
  451,   -1,  260,  278,  455,   -1,  264,  265,   -1,   -1,
   -1,   -1,   -1,   -1,  272,  273,   -1,   -1,  276,  277,
  278,  279,   -1,   -1,  257,   -1,   -1,  260,  479,  480,
  481,  264,  265,   -1,   -1,   -1,   -1,   -1,   -1,  272,
  273,   -1,   -1,  276,  277,  278,  279,  257,   -1,   -1,
  260,   -1,   -1,   -1,  264,   -1,   -1,  267,   -1,   -1,
   -1,   -1,  272,  273,   -1,  275,  257,   -1,  278,  260,
  521,  522,   -1,  264,   -1,  266,   -1,   -1,   -1,   -1,
   -1,  272,  273,   -1,   -1,   -1,   -1,  278,
};
}
final static short YYFINAL=3;
final static short YYMAXTOKEN=279;
final static String yyname[] = {
"end-of-file",null,null,null,null,null,null,null,null,null,null,null,null,null,
null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,
null,null,null,null,null,null,null,null,null,null,"'('","')'","'*'","'+'","','",
"'-'",null,"'/'",null,null,null,null,null,null,null,null,null,null,"':'","';'",
"'<'","'='","'>'",null,null,null,null,null,null,null,null,null,null,null,null,
null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,
null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,
null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,
"'{'",null,"'}'",null,null,null,null,null,null,null,null,null,null,null,null,
null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,
null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,
null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,
null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,
null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,
null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,
null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,
null,null,null,null,null,null,null,"ID","CTE","CADENA","IF","THEN","ELSE",
"ENDIF","OUT","FUN","RETURN","BREAK","ASIGNACION","COMP_MAYOR_IGUAL",
"COMP_MENOR_IGUAL","COMP_DISTINTO","WHEN","DO","UNTIL","CONTINUE","DOUBLE64",
"UINT16","DEFER","CONST",
};
final static String yyrule[] = {
"$accept : programa",
"programa : nombre_programa '{' sentencias '}'",
"programa : '{' sentencias '}'",
"programa : nombre_programa sentencias '}'",
"programa : nombre_programa '{' sentencias",
"programa : nombre_programa '{' '}'",
"programa :",
"nombre_programa : ID",
"sentencias : sentencia",
"sentencias : sentencias sentencia",
"sentencia : sentencia_declarativa",
"sentencia : sentencia_ejecutable",
"sentencia_declarativa : sentencia_declarativa_variables",
"sentencia_declarativa : funcion_con_return",
"sentencia_declarativa : funcion_sin_return",
"sentencia_declarativa : declaracion_constantes",
"sentencia_declarativa_variables : tipo lista_de_variables ';'",
"sentencia_declarativa_variables : tipo lista_de_variables",
"sentencia_declarativa_variables : lista_de_variables ';'",
"sentencia_declarativa_variables : tipo ';'",
"lista_de_variables : ID ',' lista_de_variables",
"lista_de_variables : ID",
"funcion_con_return : encabezado_funcion '{' sentencia_return '}'",
"funcion_con_return : encabezado_funcion '{' sentencias_funcion sentencia_return '}'",
"funcion_con_return : encabezado_funcion '{' '}'",
"sentencias_funcion : sentencia_funcion",
"sentencias_funcion : sentencias_funcion sentencia_funcion",
"sentencia_funcion : sentencia_declarativa",
"sentencia_funcion : sentencia_ejecutable_funcion",
"sentencia_ejecutable_funcion : asignacion",
"sentencia_ejecutable_funcion : DEFER asignacion",
"sentencia_ejecutable_funcion : imprimir",
"sentencia_ejecutable_funcion : DEFER imprimir",
"sentencia_ejecutable_funcion : sentencia_when_con_return",
"sentencia_ejecutable_funcion : DEFER sentencia_when_con_return",
"sentencia_ejecutable_funcion : sentencia_do_con_return",
"sentencia_ejecutable_funcion : DEFER sentencia_do_con_return",
"sentencia_ejecutable_funcion : sentencia_seleccion_simple_con_return",
"sentencia_ejecutable_funcion : DEFER sentencia_seleccion_simple_con_return",
"sentencias_ejecutables_funcion : sentencia_ejecutable_funcion",
"sentencias_ejecutables_funcion : sentencias_ejecutables_funcion sentencia_ejecutable_funcion",
"funcion_sin_return : encabezado_funcion '{' sentencia_seleccion_compuesta_con_return '}'",
"funcion_sin_return : encabezado_funcion '{' sentencias_funcion sentencia_seleccion_compuesta_con_return '}'",
"sentencia_seleccion_compuesta_con_return : IF '(' condicion ')' THEN sentencia_seleccion_compuesta_con_return_simple ELSE sentencia_seleccion_compuesta_con_return_simple ENDIF ';'",
"sentencia_seleccion_compuesta_con_return : IF '(' condicion ')' THEN '{' sentencias_ejecutables_funcion sentencia_return '}' ELSE sentencia_seleccion_compuesta_con_return_simple ENDIF ';'",
"sentencia_seleccion_compuesta_con_return : IF '(' condicion ')' THEN '{' sentencias_ejecutables_funcion sentencia_seleccion_compuesta_con_return '}' ELSE sentencia_seleccion_compuesta_con_return_simple ENDIF ';'",
"sentencia_seleccion_compuesta_con_return : IF '(' condicion ')' THEN sentencia_seleccion_compuesta_con_return_simple ELSE '{' sentencias_ejecutables_funcion sentencia_return '}' ENDIF ';'",
"sentencia_seleccion_compuesta_con_return : IF '(' condicion ')' THEN sentencia_seleccion_compuesta_con_return_simple ELSE '{' sentencias_ejecutables_funcion sentencia_seleccion_compuesta_con_return '}' ENDIF ';'",
"sentencia_seleccion_compuesta_con_return : IF '(' condicion ')' THEN '{' sentencias_ejecutables_funcion sentencia_return '}' ELSE '{' sentencias_ejecutables_funcion sentencia_seleccion_compuesta_con_return_simple '}' ENDIF ';'",
"sentencia_seleccion_compuesta_con_return : IF '(' condicion ')' THEN '{' sentencias_ejecutables_funcion sentencia_seleccion_compuesta_con_return '}' ELSE '{' sentencias_ejecutables_funcion sentencia_seleccion_compuesta_con_return_simple '}' ENDIF ';'",
"sentencia_seleccion_compuesta_con_return : IF '(' condicion ')' THEN sentencia_seleccion_compuesta_con_return_simple ELSE sentencia_seleccion_compuesta_con_return_simple ENDIF",
"sentencia_seleccion_compuesta_con_return : IF '(' condicion ')' THEN '{' sentencias_ejecutables_funcion sentencia_return '}' ELSE sentencia_seleccion_compuesta_con_return_simple ENDIF",
"sentencia_seleccion_compuesta_con_return : IF '(' condicion ')' THEN '{' sentencias_ejecutables_funcion sentencia_seleccion_compuesta_con_return '}' ELSE sentencia_seleccion_compuesta_con_return_simple ENDIF",
"sentencia_seleccion_compuesta_con_return : IF '(' condicion ')' THEN sentencia_seleccion_compuesta_con_return_simple ELSE '{' sentencias_ejecutables_funcion sentencia_return '}' ENDIF",
"sentencia_seleccion_compuesta_con_return : IF '(' condicion ')' THEN sentencia_seleccion_compuesta_con_return_simple ELSE '{' sentencias_ejecutables_funcion sentencia_seleccion_compuesta_con_return '}' ENDIF",
"sentencia_seleccion_compuesta_con_return : IF '(' condicion ')' THEN '{' sentencias_ejecutables_funcion sentencia_return '}' ELSE '{' sentencias_ejecutables_funcion sentencia_seleccion_compuesta_con_return_simple '}' ENDIF",
"sentencia_seleccion_compuesta_con_return : IF '(' condicion ')' THEN '{' sentencias_ejecutables_funcion sentencia_seleccion_compuesta_con_return '}' ELSE '{' sentencias_ejecutables_funcion sentencia_seleccion_compuesta_con_return_simple '}' ENDIF",
"sentencia_seleccion_compuesta_con_return_simple : sentencia_return",
"sentencia_seleccion_compuesta_con_return_simple : sentencia_seleccion_compuesta_con_return",
"sentencia_seleccion_compuesta_con_return_simple : DEFER sentencia_seleccion_compuesta_con_return",
"sentencia_seleccion_simple_con_return : IF '(' condicion ')' THEN sentencia_return ENDIF ';'",
"sentencia_seleccion_simple_con_return : IF '(' condicion ')' THEN sentencia_seleccion_compuesta_con_return ENDIF ';'",
"sentencia_seleccion_simple_con_return : IF '(' condicion ')' THEN sentencia_ejecutable_funcion ENDIF ';'",
"sentencia_seleccion_simple_con_return : IF '(' condicion ')' THEN '{' sentencias_ejecutables_funcion sentencia_return '}' ENDIF ';'",
"sentencia_seleccion_simple_con_return : IF '(' condicion ')' THEN '{' sentencias_ejecutables_funcion sentencia_seleccion_compuesta_con_return '}' ENDIF ';'",
"sentencia_seleccion_simple_con_return : IF '(' condicion ')' THEN '{' sentencias_ejecutables_funcion sentencia_return '}' ELSE '{' sentencias_ejecutables_funcion '}' ENDIF ';'",
"sentencia_seleccion_simple_con_return : IF '(' condicion ')' THEN '{' sentencias_ejecutables_funcion sentencia_return '}' ELSE sentencia_ejecutable_funcion ENDIF ';'",
"sentencia_seleccion_simple_con_return : IF '(' condicion ')' THEN '{' sentencias_ejecutables_funcion sentencia_seleccion_compuesta_con_return '}' ELSE sentencia_ejecutable_funcion ENDIF ';'",
"sentencia_seleccion_simple_con_return : IF '(' condicion ')' THEN '{' sentencias_ejecutables_funcion sentencia_seleccion_compuesta_con_return '}' ELSE '{' sentencias_ejecutables_funcion '}' ENDIF ';'",
"sentencia_seleccion_simple_con_return : IF '(' condicion ')' THEN '{' sentencias_ejecutables_funcion '}' ELSE '{' sentencias_ejecutables_funcion sentencia_return '}' ENDIF ';'",
"sentencia_seleccion_simple_con_return : IF '(' condicion ')' THEN '{' sentencias_ejecutables_funcion '}' ELSE '{' sentencias_ejecutables_funcion sentencia_seleccion_compuesta_con_return '}' ENDIF ';'",
"sentencia_seleccion_simple_con_return : IF '(' condicion ')' THEN sentencia_ejecutable_funcion ELSE '{' sentencias_ejecutables_funcion sentencia_return '}' ENDIF ';'",
"sentencia_seleccion_simple_con_return : IF '(' condicion ')' THEN sentencia_ejecutable_funcion ELSE '{' sentencias_ejecutables_funcion sentencia_seleccion_compuesta_con_return '}' ENDIF ';'",
"sentencia_seleccion_simple_con_return : IF '(' condicion ')' THEN '{' sentencias_ejecutables_funcion '}' ELSE '{' sentencias_ejecutables_funcion '}' ENDIF ';'",
"sentencia_when_con_return : WHEN '(' condicion ')' THEN '{' sentencia_funcion '}' ';'",
"sentencia_when_con_return : WHEN '(' condicion ')' THEN '{' sentencia_funcion sentencia_return '}' ';'",
"sentencia_when_con_return : WHEN '(' condicion ')' THEN '{' sentencia_funcion sentencia_seleccion_compuesta_con_return '}' ';'",
"sentencia_when_con_return : WHEN '(' condicion ')' THEN '{' sentencia_funcion '}'",
"sentencia_when_con_return : WHEN '(' condicion ')' THEN '{' sentencia_funcion sentencia_return '}'",
"sentencia_when_con_return : WHEN '(' condicion ')' THEN '{' sentencia_funcion sentencia_seleccion_compuesta_con_return '}'",
"sentencia_when_con_return : WHEN '(' condicion ')' THEN '{' '}' ';'",
"sentencia_when_con_return : WHEN '(' ')' THEN '{' sentencia_funcion '}' ';'",
"sentencia_when_con_return : WHEN '(' ')' THEN '{' sentencia_funcion sentencia_return '}' ';'",
"sentencia_when_con_return : WHEN '(' ')' THEN '{' sentencia_funcion sentencia_seleccion_compuesta_con_return '}' ';'",
"sentencia_when_con_return : WHEN '(' condicion ')' '{' sentencia_funcion '}' ';'",
"sentencia_when_con_return : WHEN '(' condicion ')' '{' sentencia_funcion sentencia_return '}' ';'",
"sentencia_when_con_return : WHEN '(' condicion ')' '{' sentencia_funcion sentencia_seleccion_compuesta_con_return '}' ';'",
"sentencia_do_con_return : DO bloque_sentencias_ejecutables_do_con_return UNTIL '(' condicion ')' ';'",
"sentencia_do_con_return : etiqueta ':' DO bloque_sentencias_ejecutables_do_con_return UNTIL '(' condicion ')' ';'",
"sentencia_do_con_return : DO bloque_sentencias_ejecutables_do_con_return UNTIL '(' condicion ')'",
"sentencia_do_con_return : etiqueta ':' DO bloque_sentencias_ejecutables_do_con_return UNTIL '(' condicion ')'",
"sentencia_do_con_return : DO bloque_sentencias_ejecutables_do_con_return UNTIL '(' ')'",
"sentencia_do_con_return : etiqueta ':' DO bloque_sentencias_ejecutables_do_con_return UNTIL '(' ')'",
"bloque_sentencias_ejecutables_do_con_return : sentencia_return",
"bloque_sentencias_ejecutables_do_con_return : sentencia_seleccion_compuesta_con_return",
"bloque_sentencias_ejecutables_do_con_return : sentencias_ejecutables_do_funcion",
"bloque_sentencias_ejecutables_do_con_return : '{' sentencias_ejecutables_do_funcion sentencia_return '}'",
"bloque_sentencias_ejecutables_do_con_return : '{' sentencias_ejecutables_do_funcion sentencia_seleccion_compuesta_con_return '}'",
"bloque_sentencias_ejecutables_do_con_return : '{' sentencias_ejecutables_do_funcion '}'",
"bloque_sentencias_ejecutables_do_con_return : '{' '}'",
"bloque_sentencias_ejecutables_do_con_return : '{' sentencias_ejecutables_do_funcion sentencia_return",
"bloque_sentencias_ejecutables_do_con_return : sentencias_ejecutables_do_funcion sentencia_return '}'",
"bloque_sentencias_ejecutables_do_con_return : '{' sentencias_ejecutables_do_funcion sentencia_seleccion_compuesta_con_return",
"bloque_sentencias_ejecutables_do_con_return : sentencias_ejecutables_do_funcion sentencia_seleccion_compuesta_con_return '}'",
"bloque_sentencias_ejecutables_do_con_return : '{' sentencias_ejecutables_do_funcion",
"bloque_sentencias_ejecutables_do_con_return : sentencias_ejecutables_do_funcion '}'",
"sentencias_ejecutables_do_funcion : sentencia_ejecutable_do_funcion",
"sentencias_ejecutables_do_funcion : sentencias_ejecutables_do_funcion sentencia_ejecutable_do_funcion",
"sentencia_ejecutable_do_funcion : sentencia_ejecutable_funcion",
"sentencia_ejecutable_do_funcion : sentencia_break",
"sentencia_ejecutable_do_funcion : sentencia_continue",
"encabezado_funcion : FUN ID '(' ')' ':' tipo",
"encabezado_funcion : FUN ID '(' lista_de_parametros ')' ':' tipo",
"encabezado_funcion : FUN ID '(' ')' ':'",
"encabezado_funcion : FUN '(' ')' ':' tipo",
"encabezado_funcion : FUN ID ')' ':' tipo",
"encabezado_funcion : FUN ID '(' ':' tipo",
"encabezado_funcion : FUN ID '(' lista_de_parametros ')' ':'",
"encabezado_funcion : FUN '(' lista_de_parametros ')' ':' tipo",
"encabezado_funcion : FUN ID lista_de_parametros ')' ':' tipo",
"encabezado_funcion : FUN ID '(' lista_de_parametros ':' tipo",
"sentencia_return : RETURN '(' expresion ')' ';'",
"sentencia_return : RETURN '(' expresion ')'",
"sentencia_return : RETURN expresion ')'",
"sentencia_return : RETURN '(' expresion",
"sentencia_return : RETURN '(' ')' ';'",
"lista_de_parametros : parametro",
"lista_de_parametros : parametro ',' parametro",
"lista_de_parametros : parametro ',' parametro ',' lista_parametros_exceso",
"lista_parametros_exceso : parametro",
"lista_parametros_exceso : parametro ',' lista_parametros_exceso",
"parametro : tipo ID",
"parametro : tipo",
"$$1 :",
"parametro : $$1 ID",
"declaracion_constantes : CONST lista_declaracion_constantes ';'",
"declaracion_constantes : CONST lista_declaracion_constantes",
"declaracion_constantes : CONST ';'",
"lista_declaracion_constantes : declaracion_constante",
"lista_declaracion_constantes : declaracion_constante ',' lista_declaracion_constantes",
"declaracion_constante : ID ASIGNACION CTE",
"declaracion_constante : ID ASIGNACION",
"declaracion_constante : ID CTE",
"declaracion_constante : ID",
"declaracion_constante : ID '=' CTE",
"sentencia_ejecutable : asignacion",
"sentencia_ejecutable : DEFER asignacion",
"sentencia_ejecutable : seleccion",
"sentencia_ejecutable : DEFER seleccion",
"sentencia_ejecutable : imprimir",
"sentencia_ejecutable : DEFER imprimir",
"sentencia_ejecutable : sentencia_when",
"sentencia_ejecutable : DEFER sentencia_when",
"sentencia_ejecutable : sentencia_do",
"sentencia_ejecutable : DEFER sentencia_do",
"sentencia_ejecutable_do : sentencia_ejecutable",
"sentencia_ejecutable_do : sentencia_break",
"sentencia_ejecutable_do : sentencia_continue",
"sentencia_break : BREAK ';'",
"sentencia_break : BREAK ':' etiqueta ';'",
"sentencia_break : BREAK",
"sentencia_break : BREAK ':' etiqueta",
"sentencia_break : BREAK ':' ';'",
"sentencia_continue : CONTINUE ';'",
"sentencia_continue : CONTINUE",
"sentencia_do : sentencia_do_simple",
"sentencia_do : etiqueta ':' sentencia_do_simple",
"sentencia_do_simple : DO bloque_sentencias_ejecutables_do UNTIL '(' condicion ')' ';'",
"sentencia_do_simple : DO bloque_sentencias_ejecutables_do UNTIL '(' condicion ')'",
"sentencia_do_simple : DO bloque_sentencias_ejecutables_do UNTIL '(' ')' ';'",
"sentencia_do_simple : DO bloque_sentencias_ejecutables_do UNTIL condicion ')' ';'",
"sentencia_do_simple : DO bloque_sentencias_ejecutables_do UNTIL '(' condicion ';'",
"etiqueta : ID",
"bloque_sentencias_ejecutables_do : sentencia_ejecutable_do",
"bloque_sentencias_ejecutables_do : '{' sentencias_ejecutables_do '}'",
"bloque_sentencias_ejecutables_do : '{' sentencias_ejecutables_do",
"bloque_sentencias_ejecutables_do : sentencias_ejecutables_do '}'",
"sentencias_ejecutables_do : sentencia_ejecutable_do",
"sentencias_ejecutables_do : sentencias_ejecutables_do sentencia_ejecutable_do",
"asignacion : ID ASIGNACION expresion ';'",
"asignacion : ID ASIGNACION ';'",
"asignacion : ID ASIGNACION expresion",
"asignacion : ID '=' expresion ';'",
"asignacion : ID '=' expresion",
"sentencia_when : WHEN '(' condicion ')' THEN '{' sentencias_when '}' ';'",
"sentencia_when : WHEN '(' condicion ')' '{' sentencias_when '}' ';'",
"sentencia_when : WHEN '(' ')' THEN '{' sentencias_when '}' ';'",
"sentencia_when : WHEN '(' condicion ')' THEN '{' sentencias_when '}'",
"sentencia_when : WHEN '(' condicion ')' '{' sentencias_when '}'",
"sentencia_when : WHEN '(' condicion ')' '{' '}'",
"sentencias_when : sentencia",
"sentencias_when : sentencia sentencias_when",
"seleccion : IF '(' condicion ')' THEN bloque_sentencias_ejecutables_seleccion ENDIF ';'",
"seleccion : IF '(' condicion ')' THEN bloque_sentencias_ejecutables_seleccion ELSE bloque_sentencias_ejecutables_seleccion ENDIF ';'",
"seleccion : IF '(' condicion ')' THEN bloque_sentencias_ejecutables_seleccion ENDIF",
"seleccion : IF '(' condicion ')' THEN bloque_sentencias_ejecutables_seleccion ELSE bloque_sentencias_ejecutables_seleccion ENDIF",
"seleccion : IF '(' condicion THEN bloque_sentencias_ejecutables_seleccion ENDIF ';'",
"seleccion : IF condicion ')' THEN bloque_sentencias_ejecutables_seleccion ENDIF ';'",
"seleccion : IF '(' ')' THEN bloque_sentencias_ejecutables_seleccion ENDIF ';'",
"seleccion : IF '(' condicion ')' THEN ENDIF ';'",
"seleccion : IF '(' condicion ')' bloque_sentencias_ejecutables_seleccion ENDIF ';'",
"seleccion : IF '(' ')' THEN bloque_sentencias_ejecutables_seleccion ELSE bloque_sentencias_ejecutables_seleccion ENDIF ';'",
"seleccion : IF '(' condicion ')' bloque_sentencias_ejecutables_seleccion ELSE bloque_sentencias_ejecutables_seleccion ENDIF ';'",
"seleccion : IF '(' condicion ')' THEN ELSE ENDIF ';'",
"bloque_sentencias_ejecutables_seleccion : sentencia_ejecutable",
"bloque_sentencias_ejecutables_seleccion : '{' sentencias_ejecutables '}'",
"bloque_sentencias_ejecutables_seleccion : '{' '}'",
"bloque_sentencias_ejecutables_seleccion : '{' sentencias_ejecutables",
"bloque_sentencias_ejecutables_seleccion : sentencias_ejecutables '}'",
"sentencias_ejecutables : sentencia_ejecutable",
"sentencias_ejecutables : sentencias_ejecutables sentencia_ejecutable",
"condicion : expresion comparador expresion",
"condicion : expresion comparador",
"condicion : comparador expresion",
"comparador : COMP_MAYOR_IGUAL",
"comparador : COMP_MENOR_IGUAL",
"comparador : COMP_DISTINTO",
"comparador : '>'",
"comparador : '<'",
"comparador : '='",
"expresion : expresion '+' termino",
"expresion : expresion '-' termino",
"expresion : termino",
"termino : termino '*' factor",
"termino : termino '/' factor",
"termino : factor",
"factor : ID",
"factor : constante",
"factor : invocacion_funcion",
"invocacion_funcion : ID '(' ')'",
"invocacion_funcion : ID '(' lista_de_parametros_reales ')'",
"lista_de_parametros_reales : parametro_real",
"lista_de_parametros_reales : lista_de_parametros_reales ',' parametro_real",
"parametro_real : ID",
"parametro_real : constante",
"imprimir : OUT '(' CADENA ')' ';'",
"imprimir : OUT '(' ID ')' ';'",
"imprimir : OUT '(' ')' ';'",
"imprimir : OUT CADENA ')' ';'",
"imprimir : OUT '(' CADENA ';'",
"imprimir : OUT ID ')' ';'",
"imprimir : OUT '(' ID ';'",
"imprimir : OUT '(' CADENA ')'",
"imprimir : OUT '(' ID ')'",
"constante : CTE",
"constante : '-' CTE",
"tipo : UINT16",
"tipo : DOUBLE64",
};

//#line 428 ".\gramatica.y"

public static AnalizadorLexico lexico = null;
public static Logger logger = null;
public static TablaDeSimbolos ts = null;

public static StringBuilder negConstante = new StringBuilder();

public void constanteConSigno(String constante) {
	if (constante.contains(".")) {

		negConstante.setLength(0);
		negConstante.append("-");
		negConstante.append(constante);
		
		Double parsedDouble = Double.parseDouble(negConstante.toString().replace('D', 'E'));
		
		if (parsedDouble < -2.2250738585072014E-308 && -1.7976931348623157E+308 > parsedDouble) {
			logger.logWarning("[Parser] Rango invalido para la constante: " + negConstante + ", se trunca al rango permitido");
			
			if (-1.7976931348623157E+308 < parsedDouble) {
				negConstante.setLength(0);
				negConstante.append("-1.7976931348623157D+308");
			} else {
				negConstante.setLength(0);
				negConstante.append("-2.2250738585072014D-308");
			}
		}
		
		ts.swapLexemas(constante, negConstante.toString());
	} else {
		//se recibio un uint que fue aceptado por el lexico pero resulta ser negativo
		logger.logWarning("[Parser] No se admiten ui16 con valores negativos: " + "-"+constante + ", se trunca a 0");
		
		ts.swapLexemas(constante, "0");
	}
}	

public int yylex() {
	return lexico.yylex(yylval);
}

public void yyerror(String error) {
	logger.logError(error);
}

public static void main(String[] args) {
	if (args.length == 0) {
		System.err.println("No se especifico ningun archivo de codigo");
	} else {
		String archivo_a_leer = args[0];
		System.out.println("Se va a leer archivo " + archivo_a_leer);
		
		logger = new Logger();
		
		FileReaderHelper fileHelper = new FileReaderHelper(logger);
		
		boolean fileOpenSuccess = fileHelper.open(archivo_a_leer);
		
		if (fileOpenSuccess) {
			Parser parser = new Parser();
			ts = new TablaDeSimbolos();
			lexico = new AnalizadorLexico(fileHelper, ts, logger);
			
	        parser.run();
	
			String path = new File(archivo_a_leer).getAbsolutePath();
	        
	        Output out = new Output(path);
	        
	        String printTs = ts.print();
	        
	        out.saveFile("codigo-lexico.txt", logger.getLexico());
			out.saveFile("codigo-sintetico.txt", logger.getSintactico());
			out.saveFile("tabla-de-simbolos.txt", printTs);
	        
			System.out.println(printTs);
		}
	}
}
//#line 1132 "Parser.java"
//###############################################################
// method: yylexdebug : check lexer state
//###############################################################
void yylexdebug(int state,int ch)
{
String s=null;
  if (ch < 0) ch=0;
  if (ch <= YYMAXTOKEN) //check index bounds
     s = yyname[ch];    //now get it
  if (s==null)
    s = "illegal-symbol";
  debug("state "+state+", reading "+ch+" ("+s+")");
}





//The following are now global, to aid in error reporting
int yyn;       //next next thing to do
int yym;       //
int yystate;   //current parsing state from state table
String yys;    //current token string


//###############################################################
// method: yyparse : parse input and execute indicated items
//###############################################################
int yyparse()
{
boolean doaction;
  init_stacks();
  yynerrs = 0;
  yyerrflag = 0;
  yychar = -1;          //impossible char forces a read
  yystate=0;            //initial state
  state_push(yystate);  //save it
  val_push(yylval);     //save empty value
  while (true) //until parsing is done, either correctly, or w/error
    {
    doaction=true;
    if (yydebug) debug("loop"); 
    //#### NEXT ACTION (from reduction table)
    for (yyn=yydefred[yystate];yyn==0;yyn=yydefred[yystate])
      {
      if (yydebug) debug("yyn:"+yyn+"  state:"+yystate+"  yychar:"+yychar);
      if (yychar < 0)      //we want a char?
        {
        yychar = yylex();  //get next token
        if (yydebug) debug(" next yychar:"+yychar);
        //#### ERROR CHECK ####
        if (yychar < 0)    //it it didn't work/error
          {
          yychar = 0;      //change it to default string (no -1!)
          if (yydebug)
            yylexdebug(yystate,yychar);
          }
        }//yychar<0
      yyn = yysindex[yystate];  //get amount to shift by (shift index)
      if ((yyn != 0) && (yyn += yychar) >= 0 &&
          yyn <= YYTABLESIZE && yycheck[yyn] == yychar)
        {
        if (yydebug)
          debug("state "+yystate+", shifting to state "+yytable[yyn]);
        //#### NEXT STATE ####
        yystate = yytable[yyn];//we are in a new state
        state_push(yystate);   //save it
        val_push(yylval);      //push our lval as the input for next rule
        yychar = -1;           //since we have 'eaten' a token, say we need another
        if (yyerrflag > 0)     //have we recovered an error?
           --yyerrflag;        //give ourselves credit
        doaction=false;        //but don't process yet
        break;   //quit the yyn=0 loop
        }

    yyn = yyrindex[yystate];  //reduce
    if ((yyn !=0 ) && (yyn += yychar) >= 0 &&
            yyn <= YYTABLESIZE && yycheck[yyn] == yychar)
      {   //we reduced!
      if (yydebug) debug("reduce");
      yyn = yytable[yyn];
      doaction=true; //get ready to execute
      break;         //drop down to actions
      }
    else //ERROR RECOVERY
      {
      if (yyerrflag==0)
        {
        yyerror("syntax error");
        yynerrs++;
        }
      if (yyerrflag < 3) //low error count?
        {
        yyerrflag = 3;
        while (true)   //do until break
          {
          if (stateptr<0)   //check for under & overflow here
            {
            yyerror("stack underflow. aborting...");  //note lower case 's'
            return 1;
            }
          yyn = yysindex[state_peek(0)];
          if ((yyn != 0) && (yyn += YYERRCODE) >= 0 &&
                    yyn <= YYTABLESIZE && yycheck[yyn] == YYERRCODE)
            {
            if (yydebug)
              debug("state "+state_peek(0)+", error recovery shifting to state "+yytable[yyn]+" ");
            yystate = yytable[yyn];
            state_push(yystate);
            val_push(yylval);
            doaction=false;
            break;
            }
          else
            {
            if (yydebug)
              debug("error recovery discarding state "+state_peek(0)+" ");
            if (stateptr<0)   //check for under & overflow here
              {
              yyerror("Stack underflow. aborting...");  //capital 'S'
              return 1;
              }
            state_pop();
            val_pop();
            }
          }
        }
      else            //discard this token
        {
        if (yychar == 0)
          return 1; //yyabort
        if (yydebug)
          {
          yys = null;
          if (yychar <= YYMAXTOKEN) yys = yyname[yychar];
          if (yys == null) yys = "illegal-symbol";
          debug("state "+yystate+", error recovery discards token "+yychar+" ("+yys+")");
          }
        yychar = -1;  //read another
        }
      }//end error recovery
    }//yyn=0 loop
    if (!doaction)   //any reason not to proceed?
      continue;      //skip action
    yym = yylen[yyn];          //get count of terminals on rhs
    if (yydebug)
      debug("state "+yystate+", reducing "+yym+" by rule "+yyn+" ("+yyrule[yyn]+")");
    if (yym>0)                 //if count of rhs not 'nil'
      yyval = val_peek(yym-1); //get current semantic value
    yyval = dup_yyval(yyval); //duplicate yyval if ParserVal is used as semantic value
    switch(yyn)
      {
//########## USER-SUPPLIED ACTIONS ##########
case 1:
//#line 17 ".\gramatica.y"
{ logger.logSuccess("[Parser] Programa correcto detectado"); }
break;
case 2:
//#line 18 ".\gramatica.y"
{ logger.logError("[Parser] Se esperaba un identificador nombre del programa"); }
break;
case 3:
//#line 19 ".\gramatica.y"
{ logger.logError("[Parser] Se esperaba un { antes de las sentencias del programa"); }
break;
case 4:
//#line 20 ".\gramatica.y"
{ logger.logError("[Parser] Se esperaba un } al final de las sentencias del programa"); }
break;
case 5:
//#line 21 ".\gramatica.y"
{ logger.logError("[Parser] Se esperaban sentencias del programa"); }
break;
case 6:
//#line 22 ".\gramatica.y"
{ logger.logError("[Parser] Se esperaban sentencias del programa"); }
break;
case 16:
//#line 47 ".\gramatica.y"
{ logger.logSuccess("[Parser] Declaracion de lista de variables detectado"); }
break;
case 17:
//#line 48 ".\gramatica.y"
{ logger.logError("[Parser] Se esperaba un ; al final de la lista de variables"); }
break;
case 18:
//#line 49 ".\gramatica.y"
{ logger.logError("[Parser] Se esperaba un tipo para la lista de variables"); }
break;
case 19:
//#line 50 ".\gramatica.y"
{ logger.logError("[Parser] Se esperaba una variable o lista de variables"); }
break;
case 22:
//#line 59 ".\gramatica.y"
{ logger.logSuccess("[Parser] Declaracion de funcion detectado"); }
break;
case 23:
//#line 60 ".\gramatica.y"
{ logger.logSuccess("[Parser] Declaracion de funcion detectado"); }
break;
case 24:
//#line 61 ".\gramatica.y"
{ logger.logError("[Parser] Se esperaban sentencias en la funcion"); }
break;
case 41:
//#line 93 ".\gramatica.y"
{ logger.logSuccess("[Parser] Declaracion de funcion detectado"); }
break;
case 42:
//#line 94 ".\gramatica.y"
{ logger.logSuccess("[Parser] Declaracion de funcion detectado"); }
break;
case 43:
//#line 98 ".\gramatica.y"
{ logger.logSuccess("[Parser] Sentencia seleccion detectada"); }
break;
case 44:
//#line 99 ".\gramatica.y"
{ logger.logSuccess("[Parser] Sentencia seleccion detectada"); }
break;
case 45:
//#line 100 ".\gramatica.y"
{ logger.logSuccess("[Parser] Sentencia seleccion detectada"); }
break;
case 46:
//#line 101 ".\gramatica.y"
{ logger.logSuccess("[Parser] Sentencia seleccion detectada"); }
break;
case 47:
//#line 102 ".\gramatica.y"
{ logger.logSuccess("[Parser] Sentencia seleccion detectada"); }
break;
case 48:
//#line 103 ".\gramatica.y"
{ logger.logSuccess("[Parser] Sentencia seleccion detectada"); }
break;
case 49:
//#line 104 ".\gramatica.y"
{ logger.logSuccess("[Parser] Sentencia seleccion detectada"); }
break;
case 50:
//#line 105 ".\gramatica.y"
{ logger.logError("[Parser] Se esperaba un ; al final de la sentencia de seleccion"); }
break;
case 51:
//#line 106 ".\gramatica.y"
{ logger.logError("[Parser] Se esperaba un ; al final de la sentencia de seleccion"); }
break;
case 52:
//#line 107 ".\gramatica.y"
{ logger.logError("[Parser] Se esperaba un ; al final de la sentencia de seleccion"); }
break;
case 53:
//#line 108 ".\gramatica.y"
{ logger.logError("[Parser] Se esperaba un ; al final de la sentencia de seleccion"); }
break;
case 54:
//#line 109 ".\gramatica.y"
{ logger.logError("[Parser] Se esperaba un ; al final de la sentencia de seleccion"); }
break;
case 55:
//#line 110 ".\gramatica.y"
{ logger.logError("[Parser] Se esperaba un ; al final de la sentencia de seleccion"); }
break;
case 56:
//#line 111 ".\gramatica.y"
{ logger.logError("[Parser] Se esperaba un ; al final de la sentencia de seleccion"); }
break;
case 60:
//#line 121 ".\gramatica.y"
{ logger.logSuccess("[Parser] Sentencia de seleccion detectada"); }
break;
case 61:
//#line 122 ".\gramatica.y"
{ logger.logSuccess("[Parser] Sentencia de seleccion detectada"); }
break;
case 62:
//#line 123 ".\gramatica.y"
{ logger.logSuccess("[Parser] Sentencia de seleccion detectada"); }
break;
case 63:
//#line 124 ".\gramatica.y"
{ logger.logSuccess("[Parser] Sentencia de seleccion detectada"); }
break;
case 64:
//#line 125 ".\gramatica.y"
{ logger.logSuccess("[Parser] Sentencia de seleccion detectada"); }
break;
case 65:
//#line 126 ".\gramatica.y"
{ logger.logSuccess("[Parser] Sentencia de seleccion detectada"); }
break;
case 66:
//#line 127 ".\gramatica.y"
{ logger.logSuccess("[Parser] Sentencia de seleccion detectada"); }
break;
case 67:
//#line 128 ".\gramatica.y"
{ logger.logSuccess("[Parser] Sentencia de seleccion detectada"); }
break;
case 68:
//#line 129 ".\gramatica.y"
{ logger.logSuccess("[Parser] Sentencia de seleccion detectada"); }
break;
case 69:
//#line 130 ".\gramatica.y"
{ logger.logSuccess("[Parser] Sentencia de seleccion detectada"); }
break;
case 70:
//#line 131 ".\gramatica.y"
{ logger.logSuccess("[Parser] Sentencia de seleccion detectada"); }
break;
case 71:
//#line 132 ".\gramatica.y"
{ logger.logSuccess("[Parser] Sentencia de seleccion detectada"); }
break;
case 72:
//#line 133 ".\gramatica.y"
{ logger.logSuccess("[Parser] Sentencia de seleccion detectada"); }
break;
case 73:
//#line 134 ".\gramatica.y"
{ logger.logSuccess("[Parser] Sentencia de seleccion detectada"); }
break;
case 74:
//#line 138 ".\gramatica.y"
{ logger.logSuccess("[Parser] Sentencia when detectada"); }
break;
case 75:
//#line 139 ".\gramatica.y"
{ logger.logSuccess("[Parser] Sentencia when detectada"); }
break;
case 76:
//#line 140 ".\gramatica.y"
{ logger.logSuccess("[Parser] Sentencia when detectada"); }
break;
case 77:
//#line 141 ".\gramatica.y"
{ logger.logError("[Parser] Se esperaba ; al final de la sentencia when"); }
break;
case 78:
//#line 142 ".\gramatica.y"
{ logger.logError("[Parser] Se esperaba ; al final de la sentencia when"); }
break;
case 79:
//#line 143 ".\gramatica.y"
{ logger.logError("[Parser] Se esperaba ; al final de la sentencia when"); }
break;
case 80:
//#line 144 ".\gramatica.y"
{ logger.logError("[Parser] Se esperaban sentencias en la sentencia when"); }
break;
case 81:
//#line 145 ".\gramatica.y"
{ logger.logError("[Parser] Se esperaba una condicion en la sentencia when"); }
break;
case 82:
//#line 146 ".\gramatica.y"
{ logger.logError("[Parser] Se esperaba una condicion en la sentencia when"); }
break;
case 83:
//#line 147 ".\gramatica.y"
{ logger.logError("[Parser] Se esperaba una condicion en la sentencia when"); }
break;
case 84:
//#line 148 ".\gramatica.y"
{ logger.logError("[Parser] Se esperaba la palabra reservada then en la sentencia when"); }
break;
case 85:
//#line 149 ".\gramatica.y"
{ logger.logError("[Parser] Se esperaba la palabra reservada then en la sentencia when"); }
break;
case 86:
//#line 150 ".\gramatica.y"
{ logger.logError("[Parser] Se esperaba la palabra reservada then en la sentencia when"); }
break;
case 87:
//#line 154 ".\gramatica.y"
{ logger.logSuccess("[Parser] Sentencia do until detectada"); }
break;
case 88:
//#line 155 ".\gramatica.y"
{ logger.logSuccess("[Parser] Sentencia do until detectada"); }
break;
case 89:
//#line 156 ".\gramatica.y"
{ logger.logError("[Parser] Se esperaba un ; al final de la sentencia do"); }
break;
case 90:
//#line 157 ".\gramatica.y"
{ logger.logError("[Parser] Se esperaba un ; al final de la sentencia do"); }
break;
case 91:
//#line 158 ".\gramatica.y"
{ logger.logError("[Parser] Se esperaba una condicion en la sentencia do"); }
break;
case 92:
//#line 159 ".\gramatica.y"
{ logger.logError("[Parser] Se esperaba una condicion en la sentencia do"); }
break;
case 99:
//#line 169 ".\gramatica.y"
{ logger.logError("[Parser] Se esperaban sentencias en la sentencia do"); }
break;
case 100:
//#line 170 ".\gramatica.y"
{ logger.logError("[Parser] Se esperaba un } al final de la sentencia do"); }
break;
case 101:
//#line 171 ".\gramatica.y"
{ logger.logError("[Parser] Se esperaba un } al final de la sentencia do"); }
break;
case 102:
//#line 172 ".\gramatica.y"
{ logger.logError("[Parser] Se esperaba un } al final de la sentencia do"); }
break;
case 103:
//#line 173 ".\gramatica.y"
{ logger.logError("[Parser] Se esperaba un } al final de la sentencia do"); }
break;
case 104:
//#line 174 ".\gramatica.y"
{ logger.logError("[Parser] Se esperaba un } al final de la sentencia do"); }
break;
case 105:
//#line 175 ".\gramatica.y"
{ logger.logError("[Parser] Se esperaba un } al final de la sentencia do"); }
break;
case 113:
//#line 192 ".\gramatica.y"
{ logger.logError("[Parser] Se esperaba un tipo de return para la funcion"); }
break;
case 114:
//#line 193 ".\gramatica.y"
{ logger.logError("[Parser] Se esperaba un identificador nombre para la funcion"); }
break;
case 115:
//#line 194 ".\gramatica.y"
{ logger.logError("[Parser] Se esperaba un ( luego del nombre de la funcion"); }
break;
case 116:
//#line 195 ".\gramatica.y"
{ logger.logError("[Parser] Se esperaba un ) luego del nombre para la funcion"); }
break;
case 117:
//#line 196 ".\gramatica.y"
{ logger.logError("[Parser] Se esperaba un tipo de return para la funcion"); }
break;
case 118:
//#line 197 ".\gramatica.y"
{ logger.logError("[Parser] Se esperaba un identificador nombre para la funcion"); }
break;
case 119:
//#line 198 ".\gramatica.y"
{ logger.logError("[Parser] Se esperaba un ( luego del nombre de la funcion"); }
break;
case 120:
//#line 199 ".\gramatica.y"
{ logger.logError("[Parser] Se esperaba un ) luego del nombre para la funcion"); }
break;
case 122:
//#line 204 ".\gramatica.y"
{ logger.logError("[Parser] Se esperaba un ; al final de la sentencia return"); }
break;
case 123:
//#line 205 ".\gramatica.y"
{ logger.logError("[Parser] Se esperaba un ( en la sentencia return"); }
break;
case 124:
//#line 206 ".\gramatica.y"
{ logger.logError("[Parser] Se esperaba un ) en la sentencia return"); }
break;
case 125:
//#line 207 ".\gramatica.y"
{ logger.logError("[Parser] Se esperaba una expresion en la sentencia return"); }
break;
case 128:
//#line 213 ".\gramatica.y"
{ logger.logError("[Parser] Hay mas de 2 parametros en la funcion"); }
break;
case 133:
//#line 223 ".\gramatica.y"
{ logger.logError("[Parser] Se esperaba un identificador nombre para el parametro"); }
break;
case 134:
//#line 224 ".\gramatica.y"
{ logger.logError("[Parser] Se esperaba un tipo valido para el parametro"); }
break;
case 135:
//#line 228 ".\gramatica.y"
{ logger.logSuccess("[Parser] Declaracion de constantes detectado"); }
break;
case 136:
//#line 229 ".\gramatica.y"
{ logger.logError("[Parser] Se esperaba ; al final de la declaracion de constantes"); }
break;
case 137:
//#line 230 ".\gramatica.y"
{ logger.logError("[Parser] Se esperaba una lista de declaracion de constantes"); }
break;
case 141:
//#line 240 ".\gramatica.y"
{ logger.logError("[Parser] Se esperaba una constante del lado derecho de la asignacion"); }
break;
case 142:
//#line 241 ".\gramatica.y"
{ logger.logError("[Parser] Se esperaba el simbolo asignacion en la declaracion de constantes"); }
break;
case 143:
//#line 242 ".\gramatica.y"
{ logger.logError("[Parser] Se esperaba una asignacion en la declaracion de constantes"); }
break;
case 158:
//#line 266 ".\gramatica.y"
{ logger.logSuccess("[Parser] Sentencia break detectada"); }
break;
case 159:
//#line 267 ".\gramatica.y"
{ logger.logSuccess("[Parser] Sentencia break con etiqueta detectada"); }
break;
case 160:
//#line 268 ".\gramatica.y"
{ logger.logError("[Parser] Se esperaba un ; luego de la sentencia break"); }
break;
case 161:
//#line 269 ".\gramatica.y"
{ logger.logError("[Parser] Se esperaba un ; luego de la sentencia break"); }
break;
case 162:
//#line 270 ".\gramatica.y"
{ logger.logError("[Parser] Se esperaba una etiqueta en la sentencia break"); }
break;
case 163:
//#line 274 ".\gramatica.y"
{ logger.logSuccess("[Parser] Sentencia continue detectada"); }
break;
case 164:
//#line 275 ".\gramatica.y"
{ logger.logError("[Parser] Se esperaba un ; al final de la sentencia continue"); }
break;
case 167:
//#line 284 ".\gramatica.y"
{ logger.logSuccess("[Parser] Sentencia do until detectada"); }
break;
case 168:
//#line 285 ".\gramatica.y"
{ logger.logError("[Parser] Se esperaba un ; al final de la sentencia do"); }
break;
case 169:
//#line 286 ".\gramatica.y"
{ logger.logError("[Parser] Se esperaba una condicion para la sentencia do"); }
break;
case 170:
//#line 287 ".\gramatica.y"
{ logger.logSuccess("[Parser] Se esperaba un ( en la condicion para la sentencia do"); }
break;
case 171:
//#line 288 ".\gramatica.y"
{ logger.logSuccess("[Parser] Se esperaba un ) en la condicion para la sentencia do"); }
break;
case 175:
//#line 298 ".\gramatica.y"
{ logger.logError("[Parser] Se esperaba un } al final de la sentencia do"); }
break;
case 176:
//#line 299 ".\gramatica.y"
{ logger.logError("[Parser] Se esperaba un { en la sentencia do"); }
break;
case 179:
//#line 308 ".\gramatica.y"
{ logger.logSuccess("[Parser] Asignacion detectada"); }
break;
case 180:
//#line 309 ".\gramatica.y"
{logger.logError("[Parser] Se espera una expresion del lado derecho de la asignacion");}
break;
case 181:
//#line 310 ".\gramatica.y"
{ logger.logError("[Parser] Se espera un ; al final de la asignacion"); }
break;
case 182:
//#line 311 ".\gramatica.y"
{ logger.logError("[Parser] Se espera el simbolo =: en lugar de = para la asignacion"); }
break;
case 183:
//#line 312 ".\gramatica.y"
{ logger.logError("[Parser] Se espera el simbolo =: en lugar de = para la asignacion"); }
break;
case 184:
//#line 316 ".\gramatica.y"
{ logger.logSuccess("[Parser] Sentencia when detectada"); }
break;
case 185:
//#line 317 ".\gramatica.y"
{ logger.logError("[Parser] Se esperaba la palabra reservada then en la sentencia when"); }
break;
case 186:
//#line 318 ".\gramatica.y"
{ logger.logError("[Parser] Se esperaba una condicion en la sentencia when"); }
break;
case 187:
//#line 319 ".\gramatica.y"
{ logger.logError("[Parser] Se esperaba un ; al final de la sentencia when"); }
break;
case 188:
//#line 320 ".\gramatica.y"
{ logger.logError("[Parser] Se esperaba la palabra reservada then en la sentencia when"); }
break;
case 189:
//#line 321 ".\gramatica.y"
{ logger.logError("[Parser] Se esperaban sentencias dentro del when"); }
break;
case 192:
//#line 330 ".\gramatica.y"
{ logger.logSuccess("[Parser] Sentencia if then detectada"); }
break;
case 193:
//#line 331 ".\gramatica.y"
{ logger.logSuccess("[Parser] Sentencia if then else detectada"); }
break;
case 194:
//#line 332 ".\gramatica.y"
{ logger.logError("[Parser] Se esperaba un ; al final de la sentencia seleccion"); }
break;
case 195:
//#line 333 ".\gramatica.y"
{ logger.logError("[Parser] Se esperaba un ; al final de la sentencia seleccion"); }
break;
case 196:
//#line 334 ".\gramatica.y"
{ logger.logError("[Parser] Se esperaba un ) en la condicion de la sentencia seleccion"); }
break;
case 197:
//#line 335 ".\gramatica.y"
{ logger.logError("[Parser] Se esperaba un ( en la condicion de la sentencia seleccion"); }
break;
case 198:
//#line 336 ".\gramatica.y"
{ logger.logError("[Parser] Se esperaba una condicion en la sentencia seleccion"); }
break;
case 199:
//#line 337 ".\gramatica.y"
{ logger.logError("[Parser] Se esperaban sentencias en la sentencia seleccion"); }
break;
case 200:
//#line 338 ".\gramatica.y"
{ logger.logError("[Parser] Se esperaban la palabra reservada then en la sentencia seleccion"); }
break;
case 201:
//#line 339 ".\gramatica.y"
{ logger.logError("[Parser] Se esperaban una condicion en la sentencia seleccion"); }
break;
case 202:
//#line 340 ".\gramatica.y"
{ logger.logError("[Parser] Se esperaban la palabra reservada then en la sentencia seleccion"); }
break;
case 203:
//#line 341 ".\gramatica.y"
{ logger.logError("[Parser] Se esperaban sentencias en la sentencia seleccion"); }
break;
case 206:
//#line 347 ".\gramatica.y"
{ logger.logError("[Parser] Se esperaban sentencias dentro de la seleccion"); }
break;
case 207:
//#line 348 ".\gramatica.y"
{ logger.logError("[Parser] Se esperaba un } al final de la seleccion"); }
break;
case 208:
//#line 349 ".\gramatica.y"
{ logger.logError("[Parser] Se esperaba un { en la seleccion"); }
break;
case 212:
//#line 359 ".\gramatica.y"
{ logger.logError("[Parser] Se esperaba un expresion del lado derecho de la comparacion"); }
break;
case 213:
//#line 360 ".\gramatica.y"
{ logger.logError("[Parser] Se esperaba un expresion del lado izquierdo de la comparacion"); }
break;
case 235:
//#line 406 ".\gramatica.y"
{ logger.logSuccess("[Parser] Sentencia out detectada"); }
break;
case 236:
//#line 407 ".\gramatica.y"
{ logger.logSuccess("[Parser] Sentencia out detectada"); }
break;
case 237:
//#line 408 ".\gramatica.y"
{ logger.logError("[Parser] Se esperaba una cadena o identificador en la sentencia out"); }
break;
case 238:
//#line 409 ".\gramatica.y"
{ logger.logError("[Parser] Se esperaba un ( en la sentencia out"); }
break;
case 239:
//#line 410 ".\gramatica.y"
{ logger.logError("[Parser] Se esperaba un ) en la sentencia out"); }
break;
case 240:
//#line 411 ".\gramatica.y"
{ logger.logError("[Parser] Se esperaba un ( en la sentencia out"); }
break;
case 241:
//#line 412 ".\gramatica.y"
{ logger.logError("[Parser] Se esperaba un ) en la sentencia out"); }
break;
case 242:
//#line 413 ".\gramatica.y"
{ logger.logError("[Parser] Se espera un ; al final de la sentencia out"); }
break;
case 243:
//#line 414 ".\gramatica.y"
{ logger.logError("[Parser] Se espera un ; al final de la sentencia out"); }
break;
case 245:
//#line 419 ".\gramatica.y"
{ constanteConSigno(val_peek(0).sval); }
break;
//#line 1849 "Parser.java"
//########## END OF USER-SUPPLIED ACTIONS ##########
    }//switch
    //#### Now let's reduce... ####
    if (yydebug) debug("reduce");
    state_drop(yym);             //we just reduced yylen states
    yystate = state_peek(0);     //get new state
    val_drop(yym);               //corresponding value drop
    yym = yylhs[yyn];            //select next TERMINAL(on lhs)
    if (yystate == 0 && yym == 0)//done? 'rest' state and at first TERMINAL
      {
      if (yydebug) debug("After reduction, shifting from state 0 to state "+YYFINAL+"");
      yystate = YYFINAL;         //explicitly say we're done
      state_push(YYFINAL);       //and save it
      val_push(yyval);           //also save the semantic value of parsing
      if (yychar < 0)            //we want another character?
        {
        yychar = yylex();        //get next character
        if (yychar<0) yychar=0;  //clean, if necessary
        if (yydebug)
          yylexdebug(yystate,yychar);
        }
      if (yychar == 0)          //Good exit (if lex returns 0 ;-)
         break;                 //quit the loop--all DONE
      }//if yystate
    else                        //else not done yet
      {                         //get next state and push, for next yydefred[]
      yyn = yygindex[yym];      //find out where to go
      if ((yyn != 0) && (yyn += yystate) >= 0 &&
            yyn <= YYTABLESIZE && yycheck[yyn] == yystate)
        yystate = yytable[yyn]; //get new state
      else
        yystate = yydgoto[yym]; //else go to new defred
      if (yydebug) debug("after reduction, shifting from state "+state_peek(0)+" to state "+yystate+"");
      state_push(yystate);     //going again, so push state & val...
      val_push(yyval);         //for next action
      }
    }//main loop
  return 0;//yyaccept!!
}
//## end of method parse() ######################################



//## run() --- for Thread #######################################
/**
 * A default run method, used for operating this parser
 * object in the background.  It is intended for extending Thread
 * or implementing Runnable.  Turn off with -Jnorun .
 */
public void run()
{
  yyparse();
}
//## end of method run() ########################################



//## Constructors ###############################################
/**
 * Default constructor.  Turn off with -Jnoconstruct .

 */
public Parser()
{
  //nothing to do
}


/**
 * Create a parser, setting the debug to true or false.
 * @param debugMe true for debugging, false for no debug.
 */
public Parser(boolean debugMe)
{
  yydebug=debugMe;
}
//###############################################################



}
//################### END OF CLASS ##############################
