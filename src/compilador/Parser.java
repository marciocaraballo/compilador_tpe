//### This file created by BYACC 1.8(/Java extension  1.15)
//### Java capabilities added 7 Jan 97, Bob Jamison
//### Updated : 27 Nov 97  -- Bob Jamison, Joe Nieten
//###           01 Jan 98  -- Bob Jamison -- fixed generic semantic constructor
//###           01 Jun 99  -- Bob Jamison -- added Runnable support
//###           06 Aug 00  -- Bob Jamison -- made state variables class-global
//###           03 Jan 01  -- Bob Jamison -- improved flags, tracing
//###           16 May 01  -- Bob Jamison -- added custom stack sizing
//###           04 Mar 02  -- Yuval Oren  -- improved java performance, added options
//###           14 Mar 02  -- Tomas Hurka -- -d support, static initializer workaround
//### Please send bug reports to tom@hukatronic.cz
//### static char yysccsid[] = "@(#)yaccpar	1.8 (Berkeley) 01/20/90";






//#line 2 ".\gramatica.y"
package compilador;
import java.io.File;
//#line 20 "Parser.java"




public class Parser
{

boolean yydebug;        //do I want debug output?
int yynerrs;            //number of errors so far
int yyerrflag;          //was there an error?
int yychar;             //the current working character

//########## MESSAGES ##########
//###############################################################
// method: debug
//###############################################################
void debug(String msg)
{
  if (yydebug)
    System.out.println(msg);
}

//########## STATE STACK ##########
final static int YYSTACKSIZE = 500;  //maximum stack size
int statestk[] = new int[YYSTACKSIZE]; //state stack
int stateptr;
int stateptrmax;                     //highest index of stackptr
int statemax;                        //state when highest index reached
//###############################################################
// methods: state stack push,pop,drop,peek
//###############################################################
final void state_push(int state)
{
  try {
		stateptr++;
		statestk[stateptr]=state;
	 }
	 catch (ArrayIndexOutOfBoundsException e) {
     int oldsize = statestk.length;
     int newsize = oldsize * 2;
     int[] newstack = new int[newsize];
     System.arraycopy(statestk,0,newstack,0,oldsize);
     statestk = newstack;
     statestk[stateptr]=state;
  }
}
final int state_pop()
{
  return statestk[stateptr--];
}
final void state_drop(int cnt)
{
  stateptr -= cnt; 
}
final int state_peek(int relative)
{
  return statestk[stateptr-relative];
}
//###############################################################
// method: init_stacks : allocate and prepare stacks
//###############################################################
final boolean init_stacks()
{
  stateptr = -1;
  val_init();
  return true;
}
//###############################################################
// method: dump_stacks : show n levels of the stacks
//###############################################################
void dump_stacks(int count)
{
int i;
  System.out.println("=index==state====value=     s:"+stateptr+"  v:"+valptr);
  for (i=0;i<count;i++)
    System.out.println(" "+i+"    "+statestk[i]+"      "+valstk[i]);
  System.out.println("======================");
}


//########## SEMANTIC VALUES ##########
//public class ParserVal is defined in ParserVal.java


String   yytext;//user variable to return contextual strings
ParserVal yyval; //used to return semantic vals from action routines
ParserVal yylval;//the 'lval' (result) I got from yylex()
ParserVal valstk[];
int valptr;
//###############################################################
// methods: value stack push,pop,drop,peek.
//###############################################################
void val_init()
{
  valstk=new ParserVal[YYSTACKSIZE];
  yyval=new ParserVal();
  yylval=new ParserVal();
  valptr=-1;
}
void val_push(ParserVal val)
{
  if (valptr>=YYSTACKSIZE)
    return;
  valstk[++valptr]=val;
}
ParserVal val_pop()
{
  if (valptr<0)
    return new ParserVal();
  return valstk[valptr--];
}
void val_drop(int cnt)
{
int ptr;
  ptr=valptr-cnt;
  if (ptr<0)
    return;
  valptr = ptr;
}
ParserVal val_peek(int relative)
{
int ptr;
  ptr=valptr-relative;
  if (ptr<0)
    return new ParserVal();
  return valstk[ptr];
}
final ParserVal dup_yyval(ParserVal val)
{
  ParserVal dup = new ParserVal();
  dup.ival = val.ival;
  dup.dval = val.dval;
  dup.sval = val.sval;
  dup.obj = val.obj;
  return dup;
}
//#### end semantic value section ####
public final static short ID=257;
public final static short CTE=258;
public final static short CADENA=259;
public final static short IF=260;
public final static short THEN=261;
public final static short ELSE=262;
public final static short ENDIF=263;
public final static short OUT=264;
public final static short FUN=265;
public final static short RETURN=266;
public final static short BREAK=267;
public final static short ASIGNACION=268;
public final static short COMP_MAYOR_IGUAL=269;
public final static short COMP_MENOR_IGUAL=270;
public final static short COMP_DISTINTO=271;
public final static short WHEN=272;
public final static short DO=273;
public final static short UNTIL=274;
public final static short CONTINUE=275;
public final static short DOUBLE64=276;
public final static short UINT16=277;
public final static short DEFER=278;
public final static short CONST=279;
public final static short YYERRCODE=256;
final static short yylhs[] = {                           -1,
    0,    0,    0,    0,    0,    0,    1,    2,    2,    3,
    3,    4,    4,    4,    4,    6,    6,    6,    6,   11,
   11,    7,    7,    7,   14,   14,   15,   15,   16,   16,
   16,   16,   16,   16,   16,   16,   16,   16,   22,   22,
    8,    8,   23,   23,   23,   23,   23,   23,   23,   23,
   23,   23,   23,   23,   23,   23,   25,   25,   25,   21,
   21,   21,   21,   21,   21,   21,   21,   21,   21,   21,
   21,   21,   21,   19,   19,   19,   19,   19,   19,   19,
   19,   19,   19,   19,   19,   19,   20,   20,   20,   20,
   20,   20,   26,   26,   26,   26,   26,   26,   26,   26,
   26,   26,   26,   26,   26,   28,   28,   29,   29,   29,
   12,   12,   12,   12,   12,   12,   12,   12,   12,   12,
   13,   13,   13,   13,   13,   32,   32,   32,   35,   35,
   34,   34,   36,   34,    9,    9,    9,   37,   37,   38,
   38,   38,   38,   38,    5,    5,    5,    5,    5,    5,
    5,    5,    5,    5,   42,   42,   42,   30,   30,   30,
   30,   30,   31,   31,   41,   41,   43,   43,   43,   43,
   43,   27,   44,   44,   44,   44,   45,   45,   17,   17,
   17,   17,   17,   40,   40,   47,   40,   40,   40,   46,
   46,   39,   39,   39,   39,   39,   39,   39,   39,   39,
   39,   39,   39,   48,   48,   48,   48,   48,   49,   49,
   24,   24,   24,   50,   50,   50,   50,   50,   50,   33,
   33,   33,   51,   51,   51,   52,   52,   52,   54,   54,
   55,   55,   56,   56,   18,   18,   18,   18,   18,   18,
   18,   18,   18,   53,   53,   10,   10,
};
final static short yylen[] = {                            2,
    4,    3,    3,    3,    3,    0,    1,    1,    2,    1,
    1,    1,    1,    1,    1,    3,    2,    2,    2,    3,
    1,    4,    5,    3,    1,    2,    1,    1,    1,    2,
    1,    2,    1,    2,    1,    2,    1,    2,    1,    2,
    4,    5,   10,   13,   13,   13,   13,   16,   16,    9,
   12,   12,   12,   12,   15,   15,    1,    1,    2,    8,
    8,    8,   11,   11,   15,   13,   13,   15,   15,   15,
   13,   13,   14,    9,   10,   10,    8,    9,    9,    8,
    8,    9,    9,    8,    9,    9,    7,    9,    6,    8,
    5,    7,    1,    1,    1,    4,    4,    3,    2,    3,
    3,    3,    3,    2,    2,    1,    2,    1,    1,    1,
    6,    7,    5,    5,    5,    5,    6,    6,    6,    6,
    5,    4,    3,    3,    4,    1,    3,    5,    1,    3,
    2,    1,    0,    2,    3,    2,    2,    1,    3,    3,
    2,    2,    1,    3,    1,    2,    1,    2,    1,    2,
    1,    2,    1,    2,    1,    1,    1,    2,    4,    1,
    3,    3,    2,    1,    1,    3,    7,    6,    6,    6,
    6,    1,    1,    3,    2,    2,    1,    2,    4,    3,
    3,    4,    3,    9,    8,    0,   17,    7,    6,    1,
    2,    8,   10,    7,    9,    7,    7,    7,    7,    7,
    9,    9,    8,    1,    3,    2,    2,    2,    1,    2,
    3,    2,    2,    1,    1,    1,    1,    1,    1,    3,
    3,    1,    3,    3,    1,    1,    1,    1,    3,    4,
    1,    3,    1,    1,    5,    5,    4,    4,    4,    4,
    4,    4,    4,    1,    2,    1,    1,
};
final static short yydefred[] = {                         0,
    7,    0,    0,    0,    0,    0,    0,    0,    0,    0,
  247,  246,    0,    0,    0,    8,   10,   11,   12,   13,
   14,   15,    0,    0,    0,  145,  149,    0,  147,  151,
  153,  165,    0,    0,    0,    0,    0,    0,  244,  214,
  215,  216,    0,    0,  219,  217,  218,    0,    0,    0,
    0,  225,  227,  228,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,  155,  156,  157,    0,    0,    0,
  146,  150,  148,  152,  154,    0,  137,    0,    0,    2,
    9,    0,   19,    0,   18,    0,    0,    5,    0,    3,
  180,    0,   20,    0,    0,  245,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
  158,    0,  163,  177,    0,    0,  176,  178,  142,    0,
    0,  135,    0,   16,    0,    0,    0,    0,    0,   24,
   27,    0,    0,   25,   28,   29,   31,   33,   35,   37,
    0,    0,  166,    1,  179,  182,  233,  229,  234,    0,
  231,    0,    0,    0,    0,    0,    0,    0,  223,  224,
  240,  238,  241,    0,  239,    0,  237,    0,    0,    0,
    0,  131,    0,    0,  134,    0,    0,    0,    0,  172,
  162,    0,  174,    0,    0,  140,  144,  139,    0,    0,
    0,    0,    0,   93,  108,   94,    0,    0,  106,  109,
  110,    0,   30,   32,   34,   36,   38,   22,    0,   26,
    0,   41,    0,    0,  230,    0,    0,    0,    0,    0,
    0,    0,    0,  236,  235,    0,  116,    0,    0,  115,
    0,    0,  114,    0,    0,    0,    0,  159,    0,    0,
    0,    0,    0,    0,  123,    0,    0,   99,    0,    0,
  105,    0,    0,  107,    0,   23,   42,    0,  232,  206,
  209,    0,    0,    0,  208,  210,    0,    0,    0,    0,
    0,    0,    0,  111,    0,  120,  119,    0,  118,    0,
    0,    0,  189,    0,  169,  171,    0,  170,    0,  125,
    0,    0,    0,   98,    0,    0,    0,  101,  103,    0,
    0,  205,    0,  198,  196,    0,  199,    0,    0,    0,
  200,  197,  112,    0,  128,  191,    0,    0,    0,  167,
    0,  121,    0,    0,    0,   96,   97,   91,    0,    0,
    0,    0,  203,    0,  192,    0,    0,  186,    0,  185,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,  201,    0,  202,  130,    0,  184,   59,   39,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,   87,    0,    0,    0,   92,
    0,  193,    0,    0,    0,   40,    0,   60,    0,   62,
   61,    0,    0,   57,   58,    0,    0,   81,    0,    0,
   80,    0,    0,    0,   84,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,   82,   83,   74,
    0,    0,   85,   86,    0,    0,   88,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,   43,    0,   75,
   76,    0,    0,    0,    0,    0,    0,    0,   63,    0,
    0,    0,   64,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,   66,   44,    0,    0,   67,   45,   71,
   72,   46,   47,    0,    0,    0,    0,   73,    0,    0,
    0,    0,    0,    0,    0,    0,  187,   69,   70,   65,
    0,   68,    0,    0,    0,   48,   49,    0,    0,    0,
    0,    0,    0,
};
final static short yydgoto[] = {                          3,
    4,   15,  290,   17,   18,   19,   20,   21,   22,   23,
   24,   25,  404,  143,  144,  370,  146,  147,  148,  149,
  150,  371,  405,   48,  356,  207,  152,  208,  209,  210,
  211,  114,   49,  115,  325,  116,   78,   79,   29,   30,
   31,  128,   32,   69,   70,  291,  367,  228,  229,   50,
   51,   52,   53,   54,  160,  161,
};
final static short yysindex[] = {                      -100,
    0, 1714,    0,  266,  -24,   72,  -21,   23,   21,  949,
    0,    0,  825,  -43, 1249,    0,    0,    0,    0,    0,
    0,    0,  -35,   26,  -19,    0,    0,   55,    0,    0,
    0,    0, 1272, 1295,  145, -139,   51,  104,    0,    0,
    0,    0, -142,   94,    0,    0,    0,  118,  126,   51,
   17,    0,    0,    0,  131,  141,   -3,  -15,  -11,  879,
  -22,   91,  148, 1750,    0,    0,    0,    0, -121, 1506,
    0,    0,    0,    0,    0,   33,    0,  189,  224,    0,
    0,  229,    0,  225,    0, 1226,   22,    0, 1320,    0,
    0,  339,    0,  411,   28,    0,   32,  -27,   38,   51,
   51,   51,    6,   51,   51,  244,  252,   -1,   66,  254,
  -36,  268,   80,  298,  302,  102,  314,  327,  122,  338,
    0,  -32,    0,    0, 1525,  861,    0,    0,    0,  130,
  135,    0,  144,    0,  368,   20,  374,  903,  966,    0,
    0,  296, 1691,    0,    0,    0,    0,    0,    0,    0,
  304,  397,    0,    0,    0,    0,    0,    0,    0,   39,
    0,  678,  678,  926,  678,   17,   17,    6,    0,    0,
    0,    0,    0,  403,    0,  410,    0,  401,  -61,   78,
  -61,    0,  418,  -61,    0,  -61,  427,  359,  -69,    0,
    0,  436,    0,  884,  460,    0,    0,    0,  931,   48,
   83,  887, 1547,    0,    0,    0,  235, 1451,    0,    0,
    0,  479,    0,    0,    0,    0,    0,    0,  399,    0,
  404,    0,  249,   64,    0, 1346,    0,   82, 1624,  270,
 1011,  142,  284,    0,    0,  -61,    0,  493,  -61,    0,
  -61,  526,    0,  -61, 1714,  442, 1344,    0,  515,   70,
  516,  536,  519,  451,    0,  318,  544,    0, 1470,  548,
    0,  461,  465,    0,  931,    0,    0,  903,    0,    0,
    0, 1643,  678,  533,    0,    0,  534,  331,  537,  162,
  678,  538,  539,    0,  -61,    0,    0,  -61,    0, 1714,
  470, 1714,    0,  474,    0,    0,  543,    0,  342,    0,
  550,  487,  -68,    0,  488,  490,  986,    0,    0,  571,
  348,    0,  361,    0,    0,  566,    0,  678,  576,  373,
    0,    0,    0,  594,    0,    0,  586,  557,  599,    0,
 1028,    0, 1724,  545, 1724,    0,    0,    0,  620,  430,
  644,  633,    0,  441,    0,  634,  -61,    0,  655,    0,
 1083,   98,  464,  169,  466,  471,  -77, 1368,  -49,  669,
 1039, 1009,    0,  672,    0,    0,  462,    0,    0,    0,
  639,  684,  636,  698,  707,  -48,  727,  709,  679,  680,
  710,  107,  721,  689,  703,    0,   98,  464,  466,    0,
  794,    0,  797,  577,  715,    0,  726,    0,   98,    0,
    0,  589,   98,    0,    0,  590,  931,    0,  793,  795,
    0,  798,  731,  734,    0,  801,  803,  639,  808,  931,
  746,  181,  201, -158, -158,  811,  831,    0,    0,    0,
  823,  824,    0,    0,  759,  760,    0,  849,   98, 1050,
  832, 1061,  833,  768,  770,  772,  773,    0,  641,    0,
    0,  205,  241,  646, 1585,   98,  637,  645,    0,   98,
  647,  650,    0,  651,  652,  653,  656,  174, 1072, 1089,
  807,  663,  806,  809, 1595,  859,  874, 1614,  877,  878,
  894,  895,  898,  899,   98,   98,   98, 1714,  900,  697,
  700,  701,  818,    0,    0,  708,  836,    0,    0,    0,
    0,    0,    0, -158, 1662, 1681,  841,    0,  914,  915,
  927,  722,  929,  735,  864,  875,    0,    0,    0,    0,
  940,    0,  942,  742,  748,    0,    0,  187,  200,   98,
   98,  968,  968,
};
final static short yyrindex[] = {                      1012,
    0,    0,    0,    0,  469,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,  446,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
  475,    0,    0,    0,    0,    0,    0,  754,  754,    0,
  956, 1391, 1410,    0,    0,    0,    0, 1487,    0,    0,
    0,    0,    0,    0,    0,  827,    0,  756,  730,    0,
    0,  779,    0,  802,    0,    0,    0,    0, 1015,    0,
    0,  354,    0,  377,    0,    0,    0,    0,    0,    0,
    0,  -38,   11,    0,    0,    0,    0,    0,    0,    0,
  754,    0,  137,    0,   90,    0,    0,    0,    0,    0,
    0,    0,    0,    0,  743,    0,    0,    0,    0,  850,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,  521,  546,   15,    0,    0,
    0,    0,    0,  400,    0,  423,    0,    0,    0,    0,
    0,    0,    0,  754,    0,    0,    0,    0,    0,    0,
    0, 1429,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,  744,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0, 1566,    0,    0,    0,
    0,    0,    0,    0,    0,  896,    0,    0,    0,    0,
    0,  290,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,  -83,    0,    0,    0,    0,  749,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,  278,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,  901,    0,    0,  754,    0,  905,
    0,    0,    0,    0,    0,    0,  498,    0,    0,    0,
  -78,    0,    0,    0,  751,  763,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,  569,    0,
    0,    0,    0,  299,    0,    0,    0,    0,  601,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,  754,    0,    0,    0,
    0,    0,  776,    0,  778,    0,    0,    0,    0, 1106,
    0,    0,    0,  705,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0, 1129,    0,    0,    0,    0,    0,    0, 1152,    0,
    0,    0,    0,    0,    0,  -54,    0,    0,    0,    0,
 1177, 1201,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,  112,    0,    0,  287,
    0,    0,  294,  310,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
  385,    0,  407,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,
};
final static short yygindex[] = {                         0,
    0,   46,  424,  -76,  286,    0,    0,    0,    0,   19,
  115,    0,   56,    0,  -46,  -33,   -2,    2, -132, -130,
  -82, 1490,   59,  -26,  719,  785,   88,  838, -175,   18,
   76,  -30,  297, -141,  713,    0,  928,    0, 1051, 1052,
 1060,   31,  976,    0, 1013, -246,    0,  724,  857, 1027,
  452,  450,  -50,    0,    0,  862,
};
final static int YYTABLESIZE=2028;
static short yytable[];
static { yytable();}
static void yytable(){
yytable = new short[]{                         26,
  294,   26,  212,   27,  178,   27,  215,   26,  216,  141,
   71,   27,   26,  164,   72,   77,   27,   98,   57,   36,
  212,  179,    2,   83,  111,  112,  191,   66,  118,  117,
   26,   26,  264,  120,   27,   27,   37,  110,   37,  174,
   68,  124,  242,  326,  159,  328,  122,  378,  100,   34,
  101,  213,  145,  247,  335,  211,  217,  173,  104,  200,
   60,   26,   59,  105,   43,   27,  141,   26,  158,  213,
   50,   27,   43,  211,  403,  383,  113,  113,   89,  225,
  180,   66,  224,  264,   85,   67,   26,   66,  253,   28,
   27,   28,   43,  131,  124,   43,  220,   28,   61,  195,
   28,  135,   28,   86,  205,    7,  176,  136,   43,  145,
  297,   44,   87,  137,  138,   96,   43,   82,  238,  139,
   28,   28,   26,  255,  175,  100,   27,  101,  296,  113,
  126,   47,   45,   46,   97,  239,  213,   84,   43,   67,
  214,  142,   66,   95,  151,   67,  324,  126,  122,  121,
   93,   28,  126,   47,   45,   46,    1,   28,   99,   26,
   26,   26,   26,   27,   27,   27,   27,  250,  100,  205,
  101,  106,  252,  159,  205,  257,   28,  132,  124,  124,
  132,  107,  377,  122,  122,   47,   45,   46,  136,   43,
  124,  246,  334,  204,  132,  122,  206,  237,  219,  240,
   67,  221,  113,   91,  243,  324,  123,   50,   50,  192,
  377,  377,   28,   76,   11,   12,  136,  136,  215,   50,
  216,   82,  212,   26,  190,  205,   26,   27,   26,  402,
   27,  412,   27,  163,  205,   55,   51,   56,  310,   11,
   12,  507,   26,   35,   26,   35,   27,  132,   27,   28,
   28,   28,   28,  108,  284,  109,  141,  286,  141,  287,
   11,   12,  289,  262,   11,   12,  263,  133,  217,   26,
   26,  213,   36,   27,   27,  211,   38,   39,   26,   58,
  339,  141,   27,  134,  157,   39,  357,   26,  359,   26,
  129,   27,  162,   27,   10,   65,  485,  354,  165,  145,
  130,  145,  171,  323,   38,   39,  113,   38,   39,  530,
  172,  382,  177,   28,  305,   26,   28,  306,   28,   27,
  157,   39,  531,  204,  145,  181,  206,  354,   38,   39,
  127,   92,   28,   94,   28,  391,  182,  396,  183,  129,
   40,   41,   42,  273,  274,  184,  103,  127,  213,   65,
   38,   39,  214,  181,   61,   65,  129,  212,  185,   28,
   28,    7,   40,   41,   42,  113,  377,  187,   28,  137,
  138,  186,  136,   51,   51,  139,  183,   28,  189,   28,
  427,  100,  188,  101,  396,   51,  353,  196,   33,  355,
  396,  396,  197,  438,   40,   41,   42,  155,  168,  243,
   76,   38,   39,  281,  282,   28,  457,  199,  461,  369,
   65,   52,  379,  202,  384,  380,  388,  385,   53,  389,
  218,  396,  242,  318,  319,   16,  395,   16,  222,  397,
  373,  374,  201,  377,   54,  457,  461,  413,   81,  136,
  414,  396,  440,  441,  396,  226,  377,  227,  227,  227,
  227,  402,  136,  100,  223,  101,   16,   81,  236,  377,
  369,  234,  442,  443,  402,  136,  469,  441,  235,  156,
  396,  396,  396,  435,  222,  241,  436,  402,  181,  444,
  446,  245,  445,  447,  244,   26,  226,  226,  226,   27,
  226,  301,  226,  100,  248,  101,  254,  168,  396,  396,
  251,  183,  470,  443,  226,  226,  226,  226,  260,   55,
  473,  271,   81,  474,  276,  222,  227,  222,  265,  222,
  220,  268,    5,  266,  243,    6,  172,   21,  267,    7,
    8,   56,  277,  222,  222,  222,  222,    9,   10,  207,
  207,   11,   12,   13,   14,  221,  283,  242,   52,   52,
  285,  166,  167,  169,  170,   53,   53,  276,  227,  515,
   52,  220,  516,  220,  292,  220,  227,   53,  194,  288,
  226,   54,   54,  295,  298,   28,  299,  300,  302,  220,
  220,  220,  220,   54,  303,  308,  221,  307,  221,  309,
  221,  314,  315,  316,  327,  317,  321,  322,  329,  222,
  188,  330,  331,  227,  221,  221,  221,  221,  332,  333,
  181,  340,  336,  181,  337,  181,  181,  181,  181,  181,
  181,  341,  168,  342,  343,  181,  181,  181,  181,  181,
  181,  181,  181,  183,  345,  346,  183,  347,  183,  183,
  183,  183,  183,  183,  348,  220,   55,   55,  183,  183,
  183,  183,  183,  183,  183,  183,  243,  350,   55,  243,
  360,  243,  243,  243,  243,  243,  243,  358,   56,   56,
  221,  243,  243,  243,  243,  243,  243,  243,  243,  242,
   56,  349,  242,  362,  242,  242,  242,  242,  242,  242,
  361,  363,  365,  194,  242,  242,  242,  242,  242,  242,
  242,  242,  226,  364,  195,  226,  226,  226,  226,  226,
  226,  226,  226,  368,  226,  226,  226,  226,  226,  226,
  226,  226,  226,  226,  226,  188,  372,  386,  375,  138,
  392,  222,  376,  393,  222,  222,  222,  222,  222,  222,
  222,  222,  398,  222,  222,  222,  222,  222,  222,  222,
  222,  222,  222,  222,  168,  136,  400,  168,  399,  168,
  168,  168,  168,  394,  168,  401,  407,  408,  411,  168,
  168,  168,  168,  168,  168,  168,  168,  220,   21,  415,
  220,  220,  220,  220,  220,  220,  220,  220,  138,  220,
  220,  220,  220,  220,  220,  220,  220,  220,  220,  220,
  226,   17,  221,  409,  410,  221,  221,  221,  221,  221,
  221,  221,  221,  416,  221,  221,  221,  221,  221,  221,
  221,  221,  221,  221,  221,  194,  143,  417,  194,  195,
  194,  194,  194,  194,  419,  194,  420,   21,  421,  422,
  194,  194,  194,  194,  194,  194,  194,  194,  377,  141,
  423,  428,  426,  429,  138,  431,  430,  188,  432,  433,
  188,  434,  188,  188,  188,  188,  437,  188,  439,  448,
  143,  449,  188,  188,  188,  188,  188,  188,  188,  188,
  136,  450,  451,  452,  453,  143,  230,  232,  233,  454,
  459,  463,  464,  141,  465,   61,  466,  467,  135,  476,
  194,  468,    7,   21,  136,   43,  471,  477,  141,  479,
  137,  138,  480,  481,  482,  483,  139,  494,  484,  119,
   47,   45,   46,   43,  249,  489,   17,  256,   43,  488,
  490,   43,  495,  491,   61,  498,  499,    6,   47,   45,
   46,    7,  512,   47,   45,   46,   47,   45,   46,    9,
   10,  143,  500,  501,  280,   13,  502,  503,  508,  509,
  514,  195,  510,  511,  195,  517,  195,  195,  195,  195,
  513,  195,  518,  519,  141,   43,  195,  195,  195,  195,
  195,  195,  195,  195,  521,  520,  138,  522,  524,  138,
   47,   45,   46,  138,  138,  138,  313,  523,  526,  525,
  527,  138,  138,  528,  320,  138,  138,  138,  138,  529,
  133,    6,  136,  172,    4,  136,  175,   95,  113,  136,
  136,  136,  104,  117,  100,  203,  338,  136,  136,  190,
   43,  136,  136,  136,  136,   21,  102,   57,   21,   58,
  259,  344,   21,   21,   21,   47,   45,   46,  226,  390,
   21,   21,  311,   43,   21,   21,   21,   21,   17,  366,
  198,   17,  153,   73,   74,   17,   17,   17,   47,   45,
   46,   64,   75,   17,   17,  102,  125,   17,   17,   17,
   17,   61,  272,  143,    6,  269,  143,    0,    7,    0,
  143,  143,  143,    0,  406,    0,    9,   10,  143,  143,
    0,    0,  143,  143,  143,  143,  141,    0,    0,  141,
    0,    0,    0,  141,  141,  141,    0,   38,   39,    0,
    0,  141,  141,    0,    0,  141,  141,  141,  141,   40,
   41,   42,    0,  226,    0,   38,   39,    0,    0,    0,
   38,   39,    0,   38,   39,    0,    0,   40,   41,   42,
  352,    0,   40,   41,   42,   40,   41,   42,  458,   61,
  462,  387,  135,    0,    0,    0,    7,    0,  136,   62,
    0,    0,  456,    0,  137,  138,    0,   63,    0,    0,
  139,    0,   61,  460,    0,    6,  231,   38,   39,    7,
    0,    0,    0,  493,  486,    0,  497,    9,   10,   40,
   41,   42,    0,   13,    0,   61,    0,    0,    6,    0,
    0,  487,    7,    0,    0,   62,    0,    0,    0,    0,
    9,   10,   61,   63,   61,  212,   13,  135,    0,    7,
   89,    7,    0,  136,    0,    0,    0,  137,  138,  137,
  138,    0,   38,   39,    0,  351,  458,  462,    0,    0,
  493,  497,    0,   77,   40,   41,   42,    0,    0,    0,
    0,    0,    0,    0,    0,   38,   39,   61,    0,    0,
    6,    0,  278,  279,    7,    0,   90,   40,   41,   42,
    0,    0,    9,   10,   61,    0,    0,  135,   13,    0,
    0,    7,    0,  136,    0,   61,    0,    0,  135,  137,
  138,   78,    7,    0,  136,  351,   61,    0,    0,  135,
  137,  138,    0,    7,    0,  136,  139,   61,    0,    0,
  135,  137,  138,    0,    7,   79,  136,  351,   61,    0,
    0,  212,  137,  138,    0,    7,    0,    0,  351,   61,
    0,    0,  135,  137,  138,   61,    7,    0,  212,  139,
  140,    0,    7,    0,  137,  138,    0,    0,    0,    0,
  137,  138,   89,    0,    0,   89,  139,   89,   89,   89,
   89,   89,   89,   80,    0,    0,    0,   89,   89,   89,
   89,   89,   89,   89,   89,   77,    0,    0,   77,    0,
   77,   77,   77,   77,   77,   77,   88,    0,    0,    0,
   77,   77,   77,   77,   77,   77,   77,   77,   90,    0,
    0,   90,    0,   90,   90,   90,   90,   90,   90,   90,
    0,    0,    0,   90,   90,   90,   90,   90,   90,   90,
   90,    0,    0,   78,    0,    0,   78,    0,   78,   78,
   78,   78,   78,   78,  154,    0,    0,    0,   78,   78,
   78,   78,   78,   78,   78,   78,    0,   79,    0,    0,
   79,    0,   79,   79,   79,   79,   79,   79,  293,    0,
  270,    0,   79,   79,   79,   79,   79,   79,   79,   79,
    0,    0,    5,    0,    0,  135,    0,    0,    0,    7,
    8,  136,  381,    0,    0,    0,    0,  137,  138,    0,
    0,   11,   12,  139,   14,    5,    0,    0,    6,    0,
    0,    0,    7,    8,    0,  160,    0,    0,    0,    0,
    9,   10,    0,    0,   11,   12,   13,   14,    5,    0,
    0,    6,    0,    0,  164,    7,    8,    0,    0,    0,
    0,    0,    0,    9,   10,    0,    0,   11,   12,   13,
   14,    5,    0,  161,    6,    0,    0,    0,    7,    8,
    0,    0,    0,    0,    0,    0,    9,   10,    0,    0,
   11,   12,   13,   14,    0,  261,    5,    0,    0,    6,
    0,    0,    0,    7,    8,    0,    0,    0,    0,    0,
    0,    9,   10,    0,  304,   11,   12,   13,   14,    0,
    5,    0,   61,    6,    0,    6,    0,    7,    8,    7,
    0,  177,    0,    0,    0,    9,   10,    9,   10,   11,
   12,   13,   14,   13,    5,    0,    0,  212,    0,    0,
  127,    7,    8,    0,    0,    0,    0,    0,    0,  137,
  138,    0,    0,   11,   12,  139,   14,  160,    0,  193,
  160,    0,    0,    0,  160,    0,  160,  160,    0,    0,
    0,    0,  160,  160,  160,  160,  164,    0,  160,  164,
    0,  258,    0,  164,    0,  164,  164,    0,    0,    0,
    0,  164,  164,  164,  164,  161,    0,  164,  161,    0,
  209,    0,  161,    0,  161,  161,    0,    0,    0,    0,
  161,  161,  161,  161,    0,    0,  161,   61,    0,  472,
  135,    0,    0,    0,    7,    0,  136,   62,    0,  492,
    0,    0,  137,  138,    0,   63,   61,    0,  139,  135,
    0,    0,    0,    7,    0,  136,   62,    0,  496,    0,
    0,  137,  138,  177,   63,    0,  177,  139,  275,    0,
  177,    0,    0,  177,    0,    0,    0,    0,  177,  177,
  173,  177,   61,    0,  177,    6,    0,  312,    0,    7,
    0,    0,   62,    0,    0,    0,    0,    9,   10,    0,
   63,   61,    0,   13,    6,    0,  492,    0,    7,    0,
    0,   62,    0,    0,    0,    0,    9,   10,    0,   63,
    0,    0,   13,   61,    0,  496,  212,    0,    0,    0,
    7,    0,    0,   62,    0,    0,    0,    0,  137,  138,
    0,   63,  209,    0,  139,  209,    0,  204,  204,  209,
    0,    0,    0,    0,    0,    0,    0,  209,  209,    0,
    0,   61,    0,  209,  135,    0,    0,    0,    7,    0,
  136,   61,    0,    0,  135,    0,  137,  138,    7,    0,
  136,    0,  139,    0,    0,    0,  137,  138,    0,    0,
   61,    0,  351,  135,    0,    0,  418,    7,    0,  136,
   61,    0,    0,    6,    0,  137,  138,    7,  424,    0,
    0,  351,  425,    0,    0,    9,   10,    0,    0,   61,
    0,   13,    6,    0,    0,    0,    7,    0,    0,    0,
    0,    0,    0,    0,    9,   10,    0,    0,   61,    0,
   13,  212,    0,    0,    0,    7,    0,    0,  455,    0,
    0,    0,    0,  137,  138,    0,    0,   61,    0,  139,
  212,    0,    0,    0,    7,  475,    0,    5,    0,  478,
  135,    0,  137,  138,    7,    8,  136,    0,  139,    0,
    0,    0,  137,  138,    0,    0,   11,   12,  139,   14,
    5,    0,    0,    6,  504,  505,  506,    7,    8,    0,
    5,    0,    0,  212,    0,    9,   10,    7,    8,   11,
   12,   13,   14,    0,    0,  137,  138,    0,    0,   11,
   12,  139,   14,    0,    0,    0,   61,    0,    0,    6,
    0,    0,    0,    7,    0,    0,   62,    0,    0,  532,
  533,    9,   10,    0,   63,    0,    0,   13,
};
}
static short yycheck[];
static { yycheck(); }
static void yycheck() {
yycheck = new short[] {                          2,
  247,    4,   41,    2,   41,    4,  139,   10,  139,   86,
   13,   10,   15,   41,   13,   59,   15,   44,   40,   44,
   59,   58,  123,   59,   40,   41,   59,   10,   59,   41,
   33,   34,  208,   60,   33,   34,   61,   41,   61,   41,
   10,  125,  184,  290,   95,  292,  125,  125,   43,    4,
   45,   41,   86,  123,  123,   41,  139,   59,   42,   40,
   40,   64,   40,   47,   45,   64,  143,   70,   41,   59,
  125,   70,   45,   59,  123,  125,   58,   59,   33,   41,
  111,   64,   44,  259,   59,   10,   89,   70,   41,    2,
   89,    4,   45,   61,   64,   45,  143,   10,  257,  126,
   13,  260,   15,  123,  138,  264,   41,  266,   45,  143,
   41,   40,   58,  272,  273,  258,   45,  257,   41,  278,
   33,   34,  125,   41,   59,   43,  125,   45,   59,  111,
   41,   60,   61,   62,   41,   58,  139,   23,   45,   64,
  139,   86,  125,   40,   86,   70,  288,   58,   58,   59,
   36,   64,  274,   60,   61,   62,  257,   70,   41,  162,
  163,  164,  165,  162,  163,  164,  165,  194,   43,  203,
   45,   41,  199,  224,  208,  202,   89,   41,  262,  263,
   44,   41,  260,  262,  263,   60,   61,   62,  266,   45,
  274,  261,  261,  138,   58,  274,  138,  179,  143,  181,
  125,  143,  184,   59,  186,  347,   59,  262,  263,  122,
  260,  260,  125,  257,  276,  277,  266,  266,  351,  274,
  351,  257,  261,  226,  257,  259,  229,  226,  231,  278,
  229,  125,  231,  261,  268,  257,  125,  259,  265,  276,
  277,  488,  245,  268,  247,  268,  245,   59,  247,  162,
  163,  164,  165,  257,  236,  259,  333,  239,  335,  241,
  276,  277,  244,  208,  276,  277,  208,   44,  351,  272,
  273,  261,   44,  272,  273,  261,  257,  258,  281,  257,
  307,  358,  281,   59,  257,  258,  333,  290,  335,  292,
  258,  290,  261,  292,  273,   10,  123,  331,  261,  333,
  268,  335,   59,  285,  257,  258,  288,  257,  258,  123,
   59,  358,   59,  226,  259,  318,  229,  259,  231,  318,
  257,  258,  123,  268,  358,   58,  268,  361,  257,  258,
   41,   35,  245,   37,  247,  362,  257,  371,   41,   41,
  269,  270,  271,  262,  263,   44,   50,   58,  351,   64,
  257,  258,  351,    0,  257,   70,   58,  260,  257,  272,
  273,  264,  269,  270,  271,  347,  260,   41,  281,  272,
  273,   58,  266,  262,  263,  278,    0,  290,   41,  292,
  407,   43,  261,   45,  418,  274,  331,  258,  123,  331,
  424,  425,  258,  420,  269,  270,  271,   59,  102,    0,
  257,  257,  258,  262,  263,  318,  440,   40,  442,  351,
  125,  125,  357,   40,  359,  357,  361,  359,  125,  361,
  125,  455,    0,  262,  263,    2,  371,    4,  125,  371,
  262,  263,  136,  260,  125,  469,  470,  382,   15,  266,
  382,  475,  262,  263,  478,    0,  260,  162,  163,  164,
  165,  278,  266,   43,   58,   45,   33,   34,   58,  260,
  402,   59,  262,  263,  278,  266,  262,  263,   59,   59,
  504,  505,  506,  418,    0,   58,  418,  278,  125,  424,
  425,  123,  424,  425,   58,  488,   41,   42,   43,  488,
   45,   41,   47,   43,   59,   45,  200,    0,  532,  533,
   41,  125,  262,  263,   59,   60,   61,   62,  274,  125,
  455,  226,   89,  455,  229,   41,  231,   43,   40,   45,
    0,  273,  257,  125,  125,  260,   58,   59,  125,  264,
  265,  125,  263,   59,   60,   61,   62,  272,  273,  262,
  263,  276,  277,  278,  279,    0,  263,  125,  262,  263,
   58,  100,  101,  104,  105,  262,  263,  272,  273,  504,
  274,   41,  504,   43,  123,   45,  281,  274,    0,   44,
  125,  262,  263,   59,   59,  488,   41,   59,  261,   59,
   60,   61,   62,  274,   41,  125,   41,   40,   43,  125,
   45,   59,   59,  263,  125,   59,   59,   59,  125,  125,
    0,   59,  261,  318,   59,   60,   61,   62,   59,  123,
  257,   41,  125,  260,  125,  262,  263,  264,  265,  266,
  267,  274,  125,  263,   59,  272,  273,  274,  275,  276,
  277,  278,  279,  257,   59,  263,  260,   44,  262,  263,
  264,  265,  266,  267,   59,  125,  262,  263,  272,  273,
  274,  275,  276,  277,  278,  279,  257,   59,  274,  260,
   41,  262,  263,  264,  265,  266,  267,  123,  262,  263,
  125,  272,  273,  274,  275,  276,  277,  278,  279,  257,
  274,  125,  260,   40,  262,  263,  264,  265,  266,  267,
  261,   59,   59,  125,  272,  273,  274,  275,  276,  277,
  278,  279,  257,  263,    0,  260,  261,  262,  263,  264,
  265,  266,  267,   59,  269,  270,  271,  272,  273,  274,
  275,  276,  277,  278,  279,  125,  263,   59,  263,    0,
   59,  257,  262,  272,  260,  261,  262,  263,  264,  265,
  266,  267,   59,  269,  270,  271,  272,  273,  274,  275,
  276,  277,  278,  279,  257,    0,   59,  260,  123,  262,
  263,  264,  265,  125,  267,   59,   40,   59,   59,  272,
  273,  274,  275,  276,  277,  278,  279,  257,    0,   59,
  260,  261,  262,  263,  264,  265,  266,  267,   59,  269,
  270,  271,  272,  273,  274,  275,  276,  277,  278,  279,
  123,    0,  257,  125,  125,  260,  261,  262,  263,  264,
  265,  266,  267,  125,  269,  270,  271,  272,  273,  274,
  275,  276,  277,  278,  279,  257,    0,  125,  260,  125,
  262,  263,  264,  265,   41,  267,   40,   59,  262,  125,
  272,  273,  274,  275,  276,  277,  278,  279,  260,    0,
  125,   59,  263,   59,  125,  125,   59,  257,  125,   59,
  260,   59,  262,  263,  264,  265,   59,  267,  123,   59,
   44,   41,  272,  273,  274,  275,  276,  277,  278,  279,
  125,   59,   59,  125,  125,   59,  163,  164,  165,   41,
   59,   59,  125,   44,  125,  257,  125,  125,  260,  263,
   40,  261,  264,  125,  266,   45,  261,  263,   59,  263,
  272,  273,  263,  263,  263,  263,  278,   59,  263,   41,
   60,   61,   62,   45,   41,  263,  125,   41,   45,  123,
  125,   45,   59,  125,  257,   59,   59,  260,   60,   61,
   62,  264,  125,   60,   61,   62,   60,   61,   62,  272,
  273,  125,   59,   59,  231,  278,   59,   59,   59,  263,
  125,  257,  263,  263,  260,  125,  262,  263,  264,  265,
  263,  267,   59,   59,  125,   45,  272,  273,  274,  275,
  276,  277,  278,  279,  263,   59,  257,   59,  125,  260,
   60,   61,   62,  264,  265,  266,  273,  263,   59,  125,
   59,  272,  273,  262,  281,  276,  277,  278,  279,  262,
  257,    0,  257,   58,    0,  260,  274,  274,  123,  264,
  265,  266,  274,  123,  274,  123,   41,  272,  273,  125,
   45,  276,  277,  278,  279,  257,  274,  262,  260,  262,
  203,  318,  264,  265,  266,   60,   61,   62,  123,   41,
  272,  273,  268,   45,  276,  277,  278,  279,  257,  347,
  133,  260,   87,   13,   13,  264,  265,  266,   60,   61,
   62,  123,   13,  272,  273,   49,   64,  276,  277,  278,
  279,  257,  226,  257,  260,  224,  260,   -1,  264,   -1,
  264,  265,  266,   -1,  376,   -1,  272,  273,  272,  273,
   -1,   -1,  276,  277,  278,  279,  257,   -1,   -1,  260,
   -1,   -1,   -1,  264,  265,  266,   -1,  257,  258,   -1,
   -1,  272,  273,   -1,   -1,  276,  277,  278,  279,  269,
  270,  271,   -1,  123,   -1,  257,  258,   -1,   -1,   -1,
  257,  258,   -1,  257,  258,   -1,   -1,  269,  270,  271,
  123,   -1,  269,  270,  271,  269,  270,  271,  440,  257,
  442,  123,  260,   -1,   -1,   -1,  264,   -1,  266,  267,
   -1,   -1,  123,   -1,  272,  273,   -1,  275,   -1,   -1,
  278,   -1,  257,  123,   -1,  260,  261,  257,  258,  264,
   -1,   -1,   -1,  475,  123,   -1,  478,  272,  273,  269,
  270,  271,   -1,  278,   -1,  257,   -1,   -1,  260,   -1,
   -1,  123,  264,   -1,   -1,  267,   -1,   -1,   -1,   -1,
  272,  273,  257,  275,  257,  260,  278,  260,   -1,  264,
  125,  264,   -1,  266,   -1,   -1,   -1,  272,  273,  272,
  273,   -1,  257,  258,   -1,  278,  528,  529,   -1,   -1,
  532,  533,   -1,  125,  269,  270,  271,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,  257,  258,  257,   -1,   -1,
  260,   -1,  262,  263,  264,   -1,  125,  269,  270,  271,
   -1,   -1,  272,  273,  257,   -1,   -1,  260,  278,   -1,
   -1,  264,   -1,  266,   -1,  257,   -1,   -1,  260,  272,
  273,  125,  264,   -1,  266,  278,  257,   -1,   -1,  260,
  272,  273,   -1,  264,   -1,  266,  278,  257,   -1,   -1,
  260,  272,  273,   -1,  264,  125,  266,  278,  257,   -1,
   -1,  260,  272,  273,   -1,  264,   -1,   -1,  278,  257,
   -1,   -1,  260,  272,  273,  257,  264,   -1,  260,  278,
  125,   -1,  264,   -1,  272,  273,   -1,   -1,   -1,   -1,
  272,  273,  257,   -1,   -1,  260,  278,  262,  263,  264,
  265,  266,  267,  125,   -1,   -1,   -1,  272,  273,  274,
  275,  276,  277,  278,  279,  257,   -1,   -1,  260,   -1,
  262,  263,  264,  265,  266,  267,  125,   -1,   -1,   -1,
  272,  273,  274,  275,  276,  277,  278,  279,  257,   -1,
   -1,  260,   -1,  262,  263,  264,  265,  266,  267,  125,
   -1,   -1,   -1,  272,  273,  274,  275,  276,  277,  278,
  279,   -1,   -1,  257,   -1,   -1,  260,   -1,  262,  263,
  264,  265,  266,  267,  125,   -1,   -1,   -1,  272,  273,
  274,  275,  276,  277,  278,  279,   -1,  257,   -1,   -1,
  260,   -1,  262,  263,  264,  265,  266,  267,  125,   -1,
  125,   -1,  272,  273,  274,  275,  276,  277,  278,  279,
   -1,   -1,  257,   -1,   -1,  260,   -1,   -1,   -1,  264,
  265,  266,  125,   -1,   -1,   -1,   -1,  272,  273,   -1,
   -1,  276,  277,  278,  279,  257,   -1,   -1,  260,   -1,
   -1,   -1,  264,  265,   -1,  125,   -1,   -1,   -1,   -1,
  272,  273,   -1,   -1,  276,  277,  278,  279,  257,   -1,
   -1,  260,   -1,   -1,  125,  264,  265,   -1,   -1,   -1,
   -1,   -1,   -1,  272,  273,   -1,   -1,  276,  277,  278,
  279,  257,   -1,  125,  260,   -1,   -1,   -1,  264,  265,
   -1,   -1,   -1,   -1,   -1,   -1,  272,  273,   -1,   -1,
  276,  277,  278,  279,   -1,  125,  257,   -1,   -1,  260,
   -1,   -1,   -1,  264,  265,   -1,   -1,   -1,   -1,   -1,
   -1,  272,  273,   -1,  125,  276,  277,  278,  279,   -1,
  257,   -1,  257,  260,   -1,  260,   -1,  264,  265,  264,
   -1,  125,   -1,   -1,   -1,  272,  273,  272,  273,  276,
  277,  278,  279,  278,  257,   -1,   -1,  260,   -1,   -1,
  125,  264,  265,   -1,   -1,   -1,   -1,   -1,   -1,  272,
  273,   -1,   -1,  276,  277,  278,  279,  257,   -1,  125,
  260,   -1,   -1,   -1,  264,   -1,  266,  267,   -1,   -1,
   -1,   -1,  272,  273,  274,  275,  257,   -1,  278,  260,
   -1,  125,   -1,  264,   -1,  266,  267,   -1,   -1,   -1,
   -1,  272,  273,  274,  275,  257,   -1,  278,  260,   -1,
  125,   -1,  264,   -1,  266,  267,   -1,   -1,   -1,   -1,
  272,  273,  274,  275,   -1,   -1,  278,  257,   -1,  125,
  260,   -1,   -1,   -1,  264,   -1,  266,  267,   -1,  125,
   -1,   -1,  272,  273,   -1,  275,  257,   -1,  278,  260,
   -1,   -1,   -1,  264,   -1,  266,  267,   -1,  125,   -1,
   -1,  272,  273,  257,  275,   -1,  260,  278,  125,   -1,
  264,   -1,   -1,  267,   -1,   -1,   -1,   -1,  272,  273,
  274,  275,  257,   -1,  278,  260,   -1,  125,   -1,  264,
   -1,   -1,  267,   -1,   -1,   -1,   -1,  272,  273,   -1,
  275,  257,   -1,  278,  260,   -1,  125,   -1,  264,   -1,
   -1,  267,   -1,   -1,   -1,   -1,  272,  273,   -1,  275,
   -1,   -1,  278,  257,   -1,  125,  260,   -1,   -1,   -1,
  264,   -1,   -1,  267,   -1,   -1,   -1,   -1,  272,  273,
   -1,  275,  257,   -1,  278,  260,   -1,  262,  263,  264,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,  272,  273,   -1,
   -1,  257,   -1,  278,  260,   -1,   -1,   -1,  264,   -1,
  266,  257,   -1,   -1,  260,   -1,  272,  273,  264,   -1,
  266,   -1,  278,   -1,   -1,   -1,  272,  273,   -1,   -1,
  257,   -1,  278,  260,   -1,   -1,  387,  264,   -1,  266,
  257,   -1,   -1,  260,   -1,  272,  273,  264,  399,   -1,
   -1,  278,  403,   -1,   -1,  272,  273,   -1,   -1,  257,
   -1,  278,  260,   -1,   -1,   -1,  264,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,  272,  273,   -1,   -1,  257,   -1,
  278,  260,   -1,   -1,   -1,  264,   -1,   -1,  439,   -1,
   -1,   -1,   -1,  272,  273,   -1,   -1,  257,   -1,  278,
  260,   -1,   -1,   -1,  264,  456,   -1,  257,   -1,  460,
  260,   -1,  272,  273,  264,  265,  266,   -1,  278,   -1,
   -1,   -1,  272,  273,   -1,   -1,  276,  277,  278,  279,
  257,   -1,   -1,  260,  485,  486,  487,  264,  265,   -1,
  257,   -1,   -1,  260,   -1,  272,  273,  264,  265,  276,
  277,  278,  279,   -1,   -1,  272,  273,   -1,   -1,  276,
  277,  278,  279,   -1,   -1,   -1,  257,   -1,   -1,  260,
   -1,   -1,   -1,  264,   -1,   -1,  267,   -1,   -1,  530,
  531,  272,  273,   -1,  275,   -1,   -1,  278,
};
}
final static short YYFINAL=3;
final static short YYMAXTOKEN=279;
final static String yyname[] = {
"end-of-file",null,null,null,null,null,null,null,null,null,null,null,null,null,
null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,
null,null,null,null,null,null,null,null,null,null,"'('","')'","'*'","'+'","','",
"'-'",null,"'/'",null,null,null,null,null,null,null,null,null,null,"':'","';'",
"'<'","'='","'>'",null,null,null,null,null,null,null,null,null,null,null,null,
null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,
null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,
null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,
"'{'",null,"'}'",null,null,null,null,null,null,null,null,null,null,null,null,
null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,
null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,
null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,
null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,
null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,
null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,
null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,
null,null,null,null,null,null,null,"ID","CTE","CADENA","IF","THEN","ELSE",
"ENDIF","OUT","FUN","RETURN","BREAK","ASIGNACION","COMP_MAYOR_IGUAL",
"COMP_MENOR_IGUAL","COMP_DISTINTO","WHEN","DO","UNTIL","CONTINUE","DOUBLE64",
"UINT16","DEFER","CONST",
};
final static String yyrule[] = {
"$accept : programa",
"programa : nombre_programa '{' sentencias '}'",
"programa : '{' sentencias '}'",
"programa : nombre_programa sentencias '}'",
"programa : nombre_programa '{' sentencias",
"programa : nombre_programa '{' '}'",
"programa :",
"nombre_programa : ID",
"sentencias : sentencia",
"sentencias : sentencias sentencia",
"sentencia : sentencia_declarativa",
"sentencia : sentencia_ejecutable",
"sentencia_declarativa : sentencia_declarativa_variables",
"sentencia_declarativa : funcion_con_return",
"sentencia_declarativa : funcion_sin_return",
"sentencia_declarativa : declaracion_constantes",
"sentencia_declarativa_variables : tipo lista_de_variables ';'",
"sentencia_declarativa_variables : tipo lista_de_variables",
"sentencia_declarativa_variables : lista_de_variables ';'",
"sentencia_declarativa_variables : tipo ';'",
"lista_de_variables : ID ',' lista_de_variables",
"lista_de_variables : ID",
"funcion_con_return : encabezado_funcion '{' sentencia_return '}'",
"funcion_con_return : encabezado_funcion '{' sentencias_funcion sentencia_return '}'",
"funcion_con_return : encabezado_funcion '{' '}'",
"sentencias_funcion : sentencia_funcion",
"sentencias_funcion : sentencias_funcion sentencia_funcion",
"sentencia_funcion : sentencia_declarativa",
"sentencia_funcion : sentencia_ejecutable_funcion",
"sentencia_ejecutable_funcion : asignacion",
"sentencia_ejecutable_funcion : DEFER asignacion",
"sentencia_ejecutable_funcion : imprimir",
"sentencia_ejecutable_funcion : DEFER imprimir",
"sentencia_ejecutable_funcion : sentencia_when_con_return",
"sentencia_ejecutable_funcion : DEFER sentencia_when_con_return",
"sentencia_ejecutable_funcion : sentencia_do_con_return",
"sentencia_ejecutable_funcion : DEFER sentencia_do_con_return",
"sentencia_ejecutable_funcion : sentencia_seleccion_simple_con_return",
"sentencia_ejecutable_funcion : DEFER sentencia_seleccion_simple_con_return",
"sentencias_ejecutables_funcion : sentencia_ejecutable_funcion",
"sentencias_ejecutables_funcion : sentencias_ejecutables_funcion sentencia_ejecutable_funcion",
"funcion_sin_return : encabezado_funcion '{' sentencia_seleccion_compuesta_con_return '}'",
"funcion_sin_return : encabezado_funcion '{' sentencias_funcion sentencia_seleccion_compuesta_con_return '}'",
"sentencia_seleccion_compuesta_con_return : IF '(' condicion ')' THEN sentencia_seleccion_compuesta_con_return_simple ELSE sentencia_seleccion_compuesta_con_return_simple ENDIF ';'",
"sentencia_seleccion_compuesta_con_return : IF '(' condicion ')' THEN '{' sentencias_ejecutables_funcion sentencia_return '}' ELSE sentencia_seleccion_compuesta_con_return_simple ENDIF ';'",
"sentencia_seleccion_compuesta_con_return : IF '(' condicion ')' THEN '{' sentencias_ejecutables_funcion sentencia_seleccion_compuesta_con_return '}' ELSE sentencia_seleccion_compuesta_con_return_simple ENDIF ';'",
"sentencia_seleccion_compuesta_con_return : IF '(' condicion ')' THEN sentencia_seleccion_compuesta_con_return_simple ELSE '{' sentencias_ejecutables_funcion sentencia_return '}' ENDIF ';'",
"sentencia_seleccion_compuesta_con_return : IF '(' condicion ')' THEN sentencia_seleccion_compuesta_con_return_simple ELSE '{' sentencias_ejecutables_funcion sentencia_seleccion_compuesta_con_return '}' ENDIF ';'",
"sentencia_seleccion_compuesta_con_return : IF '(' condicion ')' THEN '{' sentencias_ejecutables_funcion sentencia_return '}' ELSE '{' sentencias_ejecutables_funcion sentencia_seleccion_compuesta_con_return_simple '}' ENDIF ';'",
"sentencia_seleccion_compuesta_con_return : IF '(' condicion ')' THEN '{' sentencias_ejecutables_funcion sentencia_seleccion_compuesta_con_return '}' ELSE '{' sentencias_ejecutables_funcion sentencia_seleccion_compuesta_con_return_simple '}' ENDIF ';'",
"sentencia_seleccion_compuesta_con_return : IF '(' condicion ')' THEN sentencia_seleccion_compuesta_con_return_simple ELSE sentencia_seleccion_compuesta_con_return_simple ENDIF",
"sentencia_seleccion_compuesta_con_return : IF '(' condicion ')' THEN '{' sentencias_ejecutables_funcion sentencia_return '}' ELSE sentencia_seleccion_compuesta_con_return_simple ENDIF",
"sentencia_seleccion_compuesta_con_return : IF '(' condicion ')' THEN '{' sentencias_ejecutables_funcion sentencia_seleccion_compuesta_con_return '}' ELSE sentencia_seleccion_compuesta_con_return_simple ENDIF",
"sentencia_seleccion_compuesta_con_return : IF '(' condicion ')' THEN sentencia_seleccion_compuesta_con_return_simple ELSE '{' sentencias_ejecutables_funcion sentencia_return '}' ENDIF",
"sentencia_seleccion_compuesta_con_return : IF '(' condicion ')' THEN sentencia_seleccion_compuesta_con_return_simple ELSE '{' sentencias_ejecutables_funcion sentencia_seleccion_compuesta_con_return '}' ENDIF",
"sentencia_seleccion_compuesta_con_return : IF '(' condicion ')' THEN '{' sentencias_ejecutables_funcion sentencia_return '}' ELSE '{' sentencias_ejecutables_funcion sentencia_seleccion_compuesta_con_return_simple '}' ENDIF",
"sentencia_seleccion_compuesta_con_return : IF '(' condicion ')' THEN '{' sentencias_ejecutables_funcion sentencia_seleccion_compuesta_con_return '}' ELSE '{' sentencias_ejecutables_funcion sentencia_seleccion_compuesta_con_return_simple '}' ENDIF",
"sentencia_seleccion_compuesta_con_return_simple : sentencia_return",
"sentencia_seleccion_compuesta_con_return_simple : sentencia_seleccion_compuesta_con_return",
"sentencia_seleccion_compuesta_con_return_simple : DEFER sentencia_seleccion_compuesta_con_return",
"sentencia_seleccion_simple_con_return : IF '(' condicion ')' THEN sentencia_return ENDIF ';'",
"sentencia_seleccion_simple_con_return : IF '(' condicion ')' THEN sentencia_seleccion_compuesta_con_return ENDIF ';'",
"sentencia_seleccion_simple_con_return : IF '(' condicion ')' THEN sentencia_ejecutable_funcion ENDIF ';'",
"sentencia_seleccion_simple_con_return : IF '(' condicion ')' THEN '{' sentencias_ejecutables_funcion sentencia_return '}' ENDIF ';'",
"sentencia_seleccion_simple_con_return : IF '(' condicion ')' THEN '{' sentencias_ejecutables_funcion sentencia_seleccion_compuesta_con_return '}' ENDIF ';'",
"sentencia_seleccion_simple_con_return : IF '(' condicion ')' THEN '{' sentencias_ejecutables_funcion sentencia_return '}' ELSE '{' sentencias_ejecutables_funcion '}' ENDIF ';'",
"sentencia_seleccion_simple_con_return : IF '(' condicion ')' THEN '{' sentencias_ejecutables_funcion sentencia_return '}' ELSE sentencia_ejecutable_funcion ENDIF ';'",
"sentencia_seleccion_simple_con_return : IF '(' condicion ')' THEN '{' sentencias_ejecutables_funcion sentencia_seleccion_compuesta_con_return '}' ELSE sentencia_ejecutable_funcion ENDIF ';'",
"sentencia_seleccion_simple_con_return : IF '(' condicion ')' THEN '{' sentencias_ejecutables_funcion sentencia_seleccion_compuesta_con_return '}' ELSE '{' sentencias_ejecutables_funcion '}' ENDIF ';'",
"sentencia_seleccion_simple_con_return : IF '(' condicion ')' THEN '{' sentencias_ejecutables_funcion '}' ELSE '{' sentencias_ejecutables_funcion sentencia_return '}' ENDIF ';'",
"sentencia_seleccion_simple_con_return : IF '(' condicion ')' THEN '{' sentencias_ejecutables_funcion '}' ELSE '{' sentencias_ejecutables_funcion sentencia_seleccion_compuesta_con_return '}' ENDIF ';'",
"sentencia_seleccion_simple_con_return : IF '(' condicion ')' THEN sentencia_ejecutable_funcion ELSE '{' sentencias_ejecutables_funcion sentencia_return '}' ENDIF ';'",
"sentencia_seleccion_simple_con_return : IF '(' condicion ')' THEN sentencia_ejecutable_funcion ELSE '{' sentencias_ejecutables_funcion sentencia_seleccion_compuesta_con_return '}' ENDIF ';'",
"sentencia_seleccion_simple_con_return : IF '(' condicion ')' THEN '{' sentencias_ejecutables_funcion '}' ELSE '{' sentencias_ejecutables_funcion '}' ENDIF ';'",
"sentencia_when_con_return : WHEN '(' condicion ')' THEN '{' sentencia_funcion '}' ';'",
"sentencia_when_con_return : WHEN '(' condicion ')' THEN '{' sentencia_funcion sentencia_return '}' ';'",
"sentencia_when_con_return : WHEN '(' condicion ')' THEN '{' sentencia_funcion sentencia_seleccion_compuesta_con_return '}' ';'",
"sentencia_when_con_return : WHEN '(' condicion ')' THEN '{' sentencia_funcion '}'",
"sentencia_when_con_return : WHEN '(' condicion ')' THEN '{' sentencia_funcion sentencia_return '}'",
"sentencia_when_con_return : WHEN '(' condicion ')' THEN '{' sentencia_funcion sentencia_seleccion_compuesta_con_return '}'",
"sentencia_when_con_return : WHEN '(' condicion ')' THEN '{' '}' ';'",
"sentencia_when_con_return : WHEN '(' ')' THEN '{' sentencia_funcion '}' ';'",
"sentencia_when_con_return : WHEN '(' ')' THEN '{' sentencia_funcion sentencia_return '}' ';'",
"sentencia_when_con_return : WHEN '(' ')' THEN '{' sentencia_funcion sentencia_seleccion_compuesta_con_return '}' ';'",
"sentencia_when_con_return : WHEN '(' condicion ')' '{' sentencia_funcion '}' ';'",
"sentencia_when_con_return : WHEN '(' condicion ')' '{' sentencia_funcion sentencia_return '}' ';'",
"sentencia_when_con_return : WHEN '(' condicion ')' '{' sentencia_funcion sentencia_seleccion_compuesta_con_return '}' ';'",
"sentencia_do_con_return : DO bloque_sentencias_ejecutables_do_con_return UNTIL '(' condicion ')' ';'",
"sentencia_do_con_return : etiqueta ':' DO bloque_sentencias_ejecutables_do_con_return UNTIL '(' condicion ')' ';'",
"sentencia_do_con_return : DO bloque_sentencias_ejecutables_do_con_return UNTIL '(' condicion ')'",
"sentencia_do_con_return : etiqueta ':' DO bloque_sentencias_ejecutables_do_con_return UNTIL '(' condicion ')'",
"sentencia_do_con_return : DO bloque_sentencias_ejecutables_do_con_return UNTIL '(' ')'",
"sentencia_do_con_return : etiqueta ':' DO bloque_sentencias_ejecutables_do_con_return UNTIL '(' ')'",
"bloque_sentencias_ejecutables_do_con_return : sentencia_return",
"bloque_sentencias_ejecutables_do_con_return : sentencia_seleccion_compuesta_con_return",
"bloque_sentencias_ejecutables_do_con_return : sentencias_ejecutables_do_funcion",
"bloque_sentencias_ejecutables_do_con_return : '{' sentencias_ejecutables_do_funcion sentencia_return '}'",
"bloque_sentencias_ejecutables_do_con_return : '{' sentencias_ejecutables_do_funcion sentencia_seleccion_compuesta_con_return '}'",
"bloque_sentencias_ejecutables_do_con_return : '{' sentencias_ejecutables_do_funcion '}'",
"bloque_sentencias_ejecutables_do_con_return : '{' '}'",
"bloque_sentencias_ejecutables_do_con_return : '{' sentencias_ejecutables_do_funcion sentencia_return",
"bloque_sentencias_ejecutables_do_con_return : sentencias_ejecutables_do_funcion sentencia_return '}'",
"bloque_sentencias_ejecutables_do_con_return : '{' sentencias_ejecutables_do_funcion sentencia_seleccion_compuesta_con_return",
"bloque_sentencias_ejecutables_do_con_return : sentencias_ejecutables_do_funcion sentencia_seleccion_compuesta_con_return '}'",
"bloque_sentencias_ejecutables_do_con_return : '{' sentencias_ejecutables_do_funcion",
"bloque_sentencias_ejecutables_do_con_return : sentencias_ejecutables_do_funcion '}'",
"sentencias_ejecutables_do_funcion : sentencia_ejecutable_do_funcion",
"sentencias_ejecutables_do_funcion : sentencias_ejecutables_do_funcion sentencia_ejecutable_do_funcion",
"sentencia_ejecutable_do_funcion : sentencia_ejecutable_funcion",
"sentencia_ejecutable_do_funcion : sentencia_break",
"sentencia_ejecutable_do_funcion : sentencia_continue",
"encabezado_funcion : FUN ID '(' ')' ':' tipo",
"encabezado_funcion : FUN ID '(' lista_de_parametros ')' ':' tipo",
"encabezado_funcion : FUN ID '(' ')' ':'",
"encabezado_funcion : FUN '(' ')' ':' tipo",
"encabezado_funcion : FUN ID ')' ':' tipo",
"encabezado_funcion : FUN ID '(' ':' tipo",
"encabezado_funcion : FUN ID '(' lista_de_parametros ')' ':'",
"encabezado_funcion : FUN '(' lista_de_parametros ')' ':' tipo",
"encabezado_funcion : FUN ID lista_de_parametros ')' ':' tipo",
"encabezado_funcion : FUN ID '(' lista_de_parametros ':' tipo",
"sentencia_return : RETURN '(' expresion ')' ';'",
"sentencia_return : RETURN '(' expresion ')'",
"sentencia_return : RETURN expresion ')'",
"sentencia_return : RETURN '(' expresion",
"sentencia_return : RETURN '(' ')' ';'",
"lista_de_parametros : parametro",
"lista_de_parametros : parametro ',' parametro",
"lista_de_parametros : parametro ',' parametro ',' lista_parametros_exceso",
"lista_parametros_exceso : parametro",
"lista_parametros_exceso : parametro ',' lista_parametros_exceso",
"parametro : tipo ID",
"parametro : tipo",
"$$1 :",
"parametro : $$1 ID",
"declaracion_constantes : CONST lista_declaracion_constantes ';'",
"declaracion_constantes : CONST lista_declaracion_constantes",
"declaracion_constantes : CONST ';'",
"lista_declaracion_constantes : declaracion_constante",
"lista_declaracion_constantes : declaracion_constante ',' lista_declaracion_constantes",
"declaracion_constante : ID ASIGNACION CTE",
"declaracion_constante : ID ASIGNACION",
"declaracion_constante : ID CTE",
"declaracion_constante : ID",
"declaracion_constante : ID '=' CTE",
"sentencia_ejecutable : asignacion",
"sentencia_ejecutable : DEFER asignacion",
"sentencia_ejecutable : seleccion",
"sentencia_ejecutable : DEFER seleccion",
"sentencia_ejecutable : imprimir",
"sentencia_ejecutable : DEFER imprimir",
"sentencia_ejecutable : sentencia_when",
"sentencia_ejecutable : DEFER sentencia_when",
"sentencia_ejecutable : sentencia_do",
"sentencia_ejecutable : DEFER sentencia_do",
"sentencia_ejecutable_do : sentencia_ejecutable",
"sentencia_ejecutable_do : sentencia_break",
"sentencia_ejecutable_do : sentencia_continue",
"sentencia_break : BREAK ';'",
"sentencia_break : BREAK ':' etiqueta ';'",
"sentencia_break : BREAK",
"sentencia_break : BREAK ':' etiqueta",
"sentencia_break : BREAK ':' ';'",
"sentencia_continue : CONTINUE ';'",
"sentencia_continue : CONTINUE",
"sentencia_do : sentencia_do_simple",
"sentencia_do : etiqueta ':' sentencia_do_simple",
"sentencia_do_simple : DO bloque_sentencias_ejecutables_do UNTIL '(' condicion ')' ';'",
"sentencia_do_simple : DO bloque_sentencias_ejecutables_do UNTIL '(' condicion ')'",
"sentencia_do_simple : DO bloque_sentencias_ejecutables_do UNTIL '(' ')' ';'",
"sentencia_do_simple : DO bloque_sentencias_ejecutables_do UNTIL condicion ')' ';'",
"sentencia_do_simple : DO bloque_sentencias_ejecutables_do UNTIL '(' condicion ';'",
"etiqueta : ID",
"bloque_sentencias_ejecutables_do : sentencia_ejecutable_do",
"bloque_sentencias_ejecutables_do : '{' sentencias_ejecutables_do '}'",
"bloque_sentencias_ejecutables_do : '{' sentencias_ejecutables_do",
"bloque_sentencias_ejecutables_do : sentencias_ejecutables_do '}'",
"sentencias_ejecutables_do : sentencia_ejecutable_do",
"sentencias_ejecutables_do : sentencias_ejecutables_do sentencia_ejecutable_do",
"asignacion : ID ASIGNACION expresion ';'",
"asignacion : ID ASIGNACION ';'",
"asignacion : ID ASIGNACION expresion",
"asignacion : ID '=' expresion ';'",
"asignacion : ID '=' expresion",
"sentencia_when : WHEN '(' condicion ')' THEN '{' sentencias_when '}' ';'",
"sentencia_when : WHEN '(' condicion ')' '{' sentencias_when '}' ';'",
"$$2 :",
"sentencia_when : WHEN '(' ')' THEN '{' sentencias_when '}' ';' $$2 WHEN '(' condicion ')' THEN '{' sentencias_when '}'",
"sentencia_when : WHEN '(' condicion ')' '{' sentencias_when '}'",
"sentencia_when : WHEN '(' condicion ')' '{' '}'",
"sentencias_when : sentencia",
"sentencias_when : sentencia sentencias_when",
"seleccion : IF '(' condicion ')' THEN bloque_sentencias_ejecutables_seleccion ENDIF ';'",
"seleccion : IF '(' condicion ')' THEN bloque_sentencias_ejecutables_seleccion ELSE bloque_sentencias_ejecutables_seleccion ENDIF ';'",
"seleccion : IF '(' condicion ')' THEN bloque_sentencias_ejecutables_seleccion ENDIF",
"seleccion : IF '(' condicion ')' THEN bloque_sentencias_ejecutables_seleccion ELSE bloque_sentencias_ejecutables_seleccion ENDIF",
"seleccion : IF '(' condicion THEN bloque_sentencias_ejecutables_seleccion ENDIF ';'",
"seleccion : IF condicion ')' THEN bloque_sentencias_ejecutables_seleccion ENDIF ';'",
"seleccion : IF '(' ')' THEN bloque_sentencias_ejecutables_seleccion ENDIF ';'",
"seleccion : IF '(' condicion ')' THEN ENDIF ';'",
"seleccion : IF '(' condicion ')' bloque_sentencias_ejecutables_seleccion ENDIF ';'",
"seleccion : IF '(' ')' THEN bloque_sentencias_ejecutables_seleccion ELSE bloque_sentencias_ejecutables_seleccion ENDIF ';'",
"seleccion : IF '(' condicion ')' bloque_sentencias_ejecutables_seleccion ELSE bloque_sentencias_ejecutables_seleccion ENDIF ';'",
"seleccion : IF '(' condicion ')' THEN ELSE ENDIF ';'",
"bloque_sentencias_ejecutables_seleccion : sentencia_ejecutable",
"bloque_sentencias_ejecutables_seleccion : '{' sentencias_ejecutables '}'",
"bloque_sentencias_ejecutables_seleccion : '{' '}'",
"bloque_sentencias_ejecutables_seleccion : '{' sentencias_ejecutables",
"bloque_sentencias_ejecutables_seleccion : sentencias_ejecutables '}'",
"sentencias_ejecutables : sentencia_ejecutable",
"sentencias_ejecutables : sentencias_ejecutables sentencia_ejecutable",
"condicion : expresion comparador expresion",
"condicion : expresion comparador",
"condicion : comparador expresion",
"comparador : COMP_MAYOR_IGUAL",
"comparador : COMP_MENOR_IGUAL",
"comparador : COMP_DISTINTO",
"comparador : '>'",
"comparador : '<'",
"comparador : '='",
"expresion : expresion '+' termino",
"expresion : expresion '-' termino",
"expresion : termino",
"termino : termino '*' factor",
"termino : termino '/' factor",
"termino : factor",
"factor : ID",
"factor : constante",
"factor : invocacion_funcion",
"invocacion_funcion : ID '(' ')'",
"invocacion_funcion : ID '(' lista_de_parametros_reales ')'",
"lista_de_parametros_reales : parametro_real",
"lista_de_parametros_reales : lista_de_parametros_reales ',' parametro_real",
"parametro_real : ID",
"parametro_real : constante",
"imprimir : OUT '(' CADENA ')' ';'",
"imprimir : OUT '(' ID ')' ';'",
"imprimir : OUT '(' ')' ';'",
"imprimir : OUT CADENA ')' ';'",
"imprimir : OUT '(' CADENA ';'",
"imprimir : OUT ID ')' ';'",
"imprimir : OUT '(' ID ';'",
"imprimir : OUT '(' CADENA ')'",
"imprimir : OUT '(' ID ')'",
"constante : CTE",
"constante : '-' CTE",
"tipo : UINT16",
"tipo : DOUBLE64",
};

//#line 428 ".\gramatica.y"

public static AnalizadorLexico lexico = null;
public static Logger logger = null;
public static TablaDeSimbolos ts = null;

public void constanteConSigno(String constante) {
	if (constante.contains(".")) {
		
		String negConstante = "-"+constante;
		
		Double parsedDouble = Double.parseDouble(negConstante.replace('D', 'E'));
		
		if (parsedDouble < -2.2250738585072014E-308 && -1.7976931348623157E+308 > parsedDouble) {
			logger.logWarning("[Parser] Rango invalido para la constante: " + negConstante + ", se trunca al rango permitido");
			
			if (-1.7976931348623157E+308 < parsedDouble) {
				negConstante = new String("-1.7976931348623157D+308");
			} else {
				negConstante =  new String("-2.2250738585072014D-308");
			}
		}
		
		ts.swapLexemas(constante, negConstante);
	} else {
		//se recibio un uint que fue aceptado por el lexico pero resulta ser negativo
		logger.logWarning("[Parser] No se admiten ui16 con valores negativos: " + "-"+constante + ", se trunca a 0");
		
		ts.swapLexemas(constante, "0");
	}
}	

public int yylex() {
	return lexico.yylex(yylval);
}

public void yyerror(String error) {
	logger.logError(error);
}

public static void main(String[] args) {
	if (args.length == 0) {
		System.err.println("No se especifico ningun archivo de codigo");
	} else {
		String archivo_a_leer = args[0];
		System.out.println("Se va a leer archivo " + archivo_a_leer);
		
		logger = new Logger();
		
		FileReaderHelper fileHelper = new FileReaderHelper(logger);
		
		boolean fileOpenSuccess = fileHelper.open(archivo_a_leer);
		
		if (fileOpenSuccess) {
			Parser parser = new Parser();
			ts = new TablaDeSimbolos();
			lexico = new AnalizadorLexico(fileHelper, ts, logger);
			
	        parser.run();
	
			String path = new File(archivo_a_leer).getAbsolutePath();
	        
	        Output out = new Output(path);
	        
	        String printTs = ts.print();
	        
	        out.saveFile("codigo-lexico.txt", logger.getLexico());
			out.saveFile("codigo-sintetico.txt", logger.getSintactico());
			out.saveFile("tabla-de-simbolos.txt", printTs);
	        
			System.out.println(printTs);
		}
	}
}
//#line 1119 "Parser.java"
//###############################################################
// method: yylexdebug : check lexer state
//###############################################################
void yylexdebug(int state,int ch)
{
String s=null;
  if (ch < 0) ch=0;
  if (ch <= YYMAXTOKEN) //check index bounds
     s = yyname[ch];    //now get it
  if (s==null)
    s = "illegal-symbol";
  debug("state "+state+", reading "+ch+" ("+s+")");
}





//The following are now global, to aid in error reporting
int yyn;       //next next thing to do
int yym;       //
int yystate;   //current parsing state from state table
String yys;    //current token string


//###############################################################
// method: yyparse : parse input and execute indicated items
//###############################################################
int yyparse()
{
boolean doaction;
  init_stacks();
  yynerrs = 0;
  yyerrflag = 0;
  yychar = -1;          //impossible char forces a read
  yystate=0;            //initial state
  state_push(yystate);  //save it
  val_push(yylval);     //save empty value
  while (true) //until parsing is done, either correctly, or w/error
    {
    doaction=true;
    if (yydebug) debug("loop"); 
    //#### NEXT ACTION (from reduction table)
    for (yyn=yydefred[yystate];yyn==0;yyn=yydefred[yystate])
      {
      if (yydebug) debug("yyn:"+yyn+"  state:"+yystate+"  yychar:"+yychar);
      if (yychar < 0)      //we want a char?
        {
        yychar = yylex();  //get next token
        if (yydebug) debug(" next yychar:"+yychar);
        //#### ERROR CHECK ####
        if (yychar < 0)    //it it didn't work/error
          {
          yychar = 0;      //change it to default string (no -1!)
          if (yydebug)
            yylexdebug(yystate,yychar);
          }
        }//yychar<0
      yyn = yysindex[yystate];  //get amount to shift by (shift index)
      if ((yyn != 0) && (yyn += yychar) >= 0 &&
          yyn <= YYTABLESIZE && yycheck[yyn] == yychar)
        {
        if (yydebug)
          debug("state "+yystate+", shifting to state "+yytable[yyn]);
        //#### NEXT STATE ####
        yystate = yytable[yyn];//we are in a new state
        state_push(yystate);   //save it
        val_push(yylval);      //push our lval as the input for next rule
        yychar = -1;           //since we have 'eaten' a token, say we need another
        if (yyerrflag > 0)     //have we recovered an error?
           --yyerrflag;        //give ourselves credit
        doaction=false;        //but don't process yet
        break;   //quit the yyn=0 loop
        }

    yyn = yyrindex[yystate];  //reduce
    if ((yyn !=0 ) && (yyn += yychar) >= 0 &&
            yyn <= YYTABLESIZE && yycheck[yyn] == yychar)
      {   //we reduced!
      if (yydebug) debug("reduce");
      yyn = yytable[yyn];
      doaction=true; //get ready to execute
      break;         //drop down to actions
      }
    else //ERROR RECOVERY
      {
      if (yyerrflag==0)
        {
        yyerror("syntax error");
        yynerrs++;
        }
      if (yyerrflag < 3) //low error count?
        {
        yyerrflag = 3;
        while (true)   //do until break
          {
          if (stateptr<0)   //check for under & overflow here
            {
            yyerror("stack underflow. aborting...");  //note lower case 's'
            return 1;
            }
          yyn = yysindex[state_peek(0)];
          if ((yyn != 0) && (yyn += YYERRCODE) >= 0 &&
                    yyn <= YYTABLESIZE && yycheck[yyn] == YYERRCODE)
            {
            if (yydebug)
              debug("state "+state_peek(0)+", error recovery shifting to state "+yytable[yyn]+" ");
            yystate = yytable[yyn];
            state_push(yystate);
            val_push(yylval);
            doaction=false;
            break;
            }
          else
            {
            if (yydebug)
              debug("error recovery discarding state "+state_peek(0)+" ");
            if (stateptr<0)   //check for under & overflow here
              {
              yyerror("Stack underflow. aborting...");  //capital 'S'
              return 1;
              }
            state_pop();
            val_pop();
            }
          }
        }
      else            //discard this token
        {
        if (yychar == 0)
          return 1; //yyabort
        if (yydebug)
          {
          yys = null;
          if (yychar <= YYMAXTOKEN) yys = yyname[yychar];
          if (yys == null) yys = "illegal-symbol";
          debug("state "+yystate+", error recovery discards token "+yychar+" ("+yys+")");
          }
        yychar = -1;  //read another
        }
      }//end error recovery
    }//yyn=0 loop
    if (!doaction)   //any reason not to proceed?
      continue;      //skip action
    yym = yylen[yyn];          //get count of terminals on rhs
    if (yydebug)
      debug("state "+yystate+", reducing "+yym+" by rule "+yyn+" ("+yyrule[yyn]+")");
    if (yym>0)                 //if count of rhs not 'nil'
      yyval = val_peek(yym-1); //get current semantic value
    yyval = dup_yyval(yyval); //duplicate yyval if ParserVal is used as semantic value
    switch(yyn)
      {
//########## USER-SUPPLIED ACTIONS ##########
case 1:
//#line 17 ".\gramatica.y"
{ logger.logSuccess("[Parser] Programa correcto detectado"); }
break;
case 2:
//#line 18 ".\gramatica.y"
{ logger.logError("[Parser] Se esperaba un identificador nombre del programa"); }
break;
case 3:
//#line 19 ".\gramatica.y"
{ logger.logError("[Parser] Se esperaba un { antes de las sentencias del programa"); }
break;
case 4:
//#line 20 ".\gramatica.y"
{ logger.logError("[Parser] Se esperaba un } al final de las sentencias del programa"); }
break;
case 5:
//#line 21 ".\gramatica.y"
{ logger.logError("[Parser] Se esperaban sentencias del programa"); }
break;
case 6:
//#line 22 ".\gramatica.y"
{ logger.logError("[Parser] Se esperaban sentencias del programa"); }
break;
case 16:
//#line 47 ".\gramatica.y"
{ logger.logSuccess("[Parser] Declaracion de lista de variables detectado"); }
break;
case 17:
//#line 48 ".\gramatica.y"
{ logger.logError("[Parser] Se esperaba un ; al final de la lista de variables"); }
break;
case 18:
//#line 49 ".\gramatica.y"
{ logger.logError("[Parser] Se esperaba un tipo para la lista de variables"); }
break;
case 19:
//#line 50 ".\gramatica.y"
{ logger.logError("[Parser] Se esperaba una variable o lista de variables"); }
break;
case 22:
//#line 59 ".\gramatica.y"
{ logger.logSuccess("[Parser] Declaracion de funcion detectado"); }
break;
case 23:
//#line 60 ".\gramatica.y"
{ logger.logSuccess("[Parser] Declaracion de funcion detectado"); }
break;
case 24:
//#line 61 ".\gramatica.y"
{ logger.logError("[Parser] Se esperaban sentencias en la funcion"); }
break;
case 41:
//#line 93 ".\gramatica.y"
{ logger.logSuccess("[Parser] Declaracion de funcion detectado"); }
break;
case 42:
//#line 94 ".\gramatica.y"
{ logger.logSuccess("[Parser] Declaracion de funcion detectado"); }
break;
case 43:
//#line 98 ".\gramatica.y"
{ logger.logSuccess("[Parser] Sentencia seleccion detectada"); }
break;
case 44:
//#line 99 ".\gramatica.y"
{ logger.logSuccess("[Parser] Sentencia seleccion detectada"); }
break;
case 45:
//#line 100 ".\gramatica.y"
{ logger.logSuccess("[Parser] Sentencia seleccion detectada"); }
break;
case 46:
//#line 101 ".\gramatica.y"
{ logger.logSuccess("[Parser] Sentencia seleccion detectada"); }
break;
case 47:
//#line 102 ".\gramatica.y"
{ logger.logSuccess("[Parser] Sentencia seleccion detectada"); }
break;
case 48:
//#line 103 ".\gramatica.y"
{ logger.logSuccess("[Parser] Sentencia seleccion detectada"); }
break;
case 49:
//#line 104 ".\gramatica.y"
{ logger.logSuccess("[Parser] Sentencia seleccion detectada"); }
break;
case 50:
//#line 105 ".\gramatica.y"
{ logger.logError("[Parser] Se esperaba un ; al final de la sentencia de seleccion"); }
break;
case 51:
//#line 106 ".\gramatica.y"
{ logger.logError("[Parser] Se esperaba un ; al final de la sentencia de seleccion"); }
break;
case 52:
//#line 107 ".\gramatica.y"
{ logger.logError("[Parser] Se esperaba un ; al final de la sentencia de seleccion"); }
break;
case 53:
//#line 108 ".\gramatica.y"
{ logger.logError("[Parser] Se esperaba un ; al final de la sentencia de seleccion"); }
break;
case 54:
//#line 109 ".\gramatica.y"
{ logger.logError("[Parser] Se esperaba un ; al final de la sentencia de seleccion"); }
break;
case 55:
//#line 110 ".\gramatica.y"
{ logger.logError("[Parser] Se esperaba un ; al final de la sentencia de seleccion"); }
break;
case 56:
//#line 111 ".\gramatica.y"
{ logger.logError("[Parser] Se esperaba un ; al final de la sentencia de seleccion"); }
break;
case 60:
//#line 121 ".\gramatica.y"
{ logger.logSuccess("[Parser] Sentencia de seleccion detectada"); }
break;
case 61:
//#line 122 ".\gramatica.y"
{ logger.logSuccess("[Parser] Sentencia de seleccion detectada"); }
break;
case 62:
//#line 123 ".\gramatica.y"
{ logger.logSuccess("[Parser] Sentencia de seleccion detectada"); }
break;
case 63:
//#line 124 ".\gramatica.y"
{ logger.logSuccess("[Parser] Sentencia de seleccion detectada"); }
break;
case 64:
//#line 125 ".\gramatica.y"
{ logger.logSuccess("[Parser] Sentencia de seleccion detectada"); }
break;
case 65:
//#line 126 ".\gramatica.y"
{ logger.logSuccess("[Parser] Sentencia de seleccion detectada"); }
break;
case 66:
//#line 127 ".\gramatica.y"
{ logger.logSuccess("[Parser] Sentencia de seleccion detectada"); }
break;
case 67:
//#line 128 ".\gramatica.y"
{ logger.logSuccess("[Parser] Sentencia de seleccion detectada"); }
break;
case 68:
//#line 129 ".\gramatica.y"
{ logger.logSuccess("[Parser] Sentencia de seleccion detectada"); }
break;
case 69:
//#line 130 ".\gramatica.y"
{ logger.logSuccess("[Parser] Sentencia de seleccion detectada"); }
break;
case 70:
//#line 131 ".\gramatica.y"
{ logger.logSuccess("[Parser] Sentencia de seleccion detectada"); }
break;
case 71:
//#line 132 ".\gramatica.y"
{ logger.logSuccess("[Parser] Sentencia de seleccion detectada"); }
break;
case 72:
//#line 133 ".\gramatica.y"
{ logger.logSuccess("[Parser] Sentencia de seleccion detectada"); }
break;
case 73:
//#line 134 ".\gramatica.y"
{ logger.logSuccess("[Parser] Sentencia de seleccion detectada"); }
break;
case 74:
//#line 138 ".\gramatica.y"
{ logger.logSuccess("[Parser] Sentencia when detectada"); }
break;
case 75:
//#line 139 ".\gramatica.y"
{ logger.logSuccess("[Parser] Sentencia when detectada"); }
break;
case 76:
//#line 140 ".\gramatica.y"
{ logger.logSuccess("[Parser] Sentencia when detectada"); }
break;
case 77:
//#line 141 ".\gramatica.y"
{ logger.logError("[Parser] Se esperaba ; al final de la sentencia when"); }
break;
case 78:
//#line 142 ".\gramatica.y"
{ logger.logError("[Parser] Se esperaba ; al final de la sentencia when"); }
break;
case 79:
//#line 143 ".\gramatica.y"
{ logger.logError("[Parser] Se esperaba ; al final de la sentencia when"); }
break;
case 80:
//#line 144 ".\gramatica.y"
{ logger.logError("[Parser] Se esperaban sentencias en la sentencia when"); }
break;
case 81:
//#line 145 ".\gramatica.y"
{ logger.logError("[Parser] Se esperaba una condicion en la sentencia when"); }
break;
case 82:
//#line 146 ".\gramatica.y"
{ logger.logError("[Parser] Se esperaba una condicion en la sentencia when"); }
break;
case 83:
//#line 147 ".\gramatica.y"
{ logger.logError("[Parser] Se esperaba una condicion en la sentencia when"); }
break;
case 84:
//#line 148 ".\gramatica.y"
{ logger.logError("[Parser] Se esperaba la palabra reservada then en la sentencia when"); }
break;
case 85:
//#line 149 ".\gramatica.y"
{ logger.logError("[Parser] Se esperaba la palabra reservada then en la sentencia when"); }
break;
case 86:
//#line 150 ".\gramatica.y"
{ logger.logError("[Parser] Se esperaba la palabra reservada then en la sentencia when"); }
break;
case 87:
//#line 154 ".\gramatica.y"
{ logger.logSuccess("[Parser] Sentencia do until detectada"); }
break;
case 88:
//#line 155 ".\gramatica.y"
{ logger.logSuccess("[Parser] Sentencia do until detectada"); }
break;
case 89:
//#line 156 ".\gramatica.y"
{ logger.logError("[Parser] Se esperaba un ; al final de la sentencia do"); }
break;
case 90:
//#line 157 ".\gramatica.y"
{ logger.logError("[Parser] Se esperaba un ; al final de la sentencia do"); }
break;
case 91:
//#line 158 ".\gramatica.y"
{ logger.logError("[Parser] Se esperaba una condicion en la sentencia do"); }
break;
case 92:
//#line 159 ".\gramatica.y"
{ logger.logError("[Parser] Se esperaba una condicion en la sentencia do"); }
break;
case 99:
//#line 169 ".\gramatica.y"
{ logger.logError("[Parser] Se esperaban sentencias en la sentencia do"); }
break;
case 100:
//#line 170 ".\gramatica.y"
{ logger.logError("[Parser] Se esperaba un } al final de la sentencia do"); }
break;
case 101:
//#line 171 ".\gramatica.y"
{ logger.logError("[Parser] Se esperaba un } al final de la sentencia do"); }
break;
case 102:
//#line 172 ".\gramatica.y"
{ logger.logError("[Parser] Se esperaba un } al final de la sentencia do"); }
break;
case 103:
//#line 173 ".\gramatica.y"
{ logger.logError("[Parser] Se esperaba un } al final de la sentencia do"); }
break;
case 104:
//#line 174 ".\gramatica.y"
{ logger.logError("[Parser] Se esperaba un } al final de la sentencia do"); }
break;
case 105:
//#line 175 ".\gramatica.y"
{ logger.logError("[Parser] Se esperaba un } al final de la sentencia do"); }
break;
case 113:
//#line 192 ".\gramatica.y"
{ logger.logError("[Parser] Se esperaba un tipo de return para la funcion"); }
break;
case 114:
//#line 193 ".\gramatica.y"
{ logger.logError("[Parser] Se esperaba un identificador nombre para la funcion"); }
break;
case 115:
//#line 194 ".\gramatica.y"
{ logger.logError("[Parser] Se esperaba un ( luego del nombre de la funcion"); }
break;
case 116:
//#line 195 ".\gramatica.y"
{ logger.logError("[Parser] Se esperaba un ) luego del nombre para la funcion"); }
break;
case 117:
//#line 196 ".\gramatica.y"
{ logger.logError("[Parser] Se esperaba un tipo de return para la funcion"); }
break;
case 118:
//#line 197 ".\gramatica.y"
{ logger.logError("[Parser] Se esperaba un identificador nombre para la funcion"); }
break;
case 119:
//#line 198 ".\gramatica.y"
{ logger.logError("[Parser] Se esperaba un ( luego del nombre de la funcion"); }
break;
case 120:
//#line 199 ".\gramatica.y"
{ logger.logError("[Parser] Se esperaba un ) luego del nombre para la funcion"); }
break;
case 122:
//#line 204 ".\gramatica.y"
{ logger.logError("[Parser] Se esperaba un ; al final de la sentencia return"); }
break;
case 123:
//#line 205 ".\gramatica.y"
{ logger.logError("[Parser] Se esperaba un ( en la sentencia return"); }
break;
case 124:
//#line 206 ".\gramatica.y"
{ logger.logError("[Parser] Se esperaba un ) en la sentencia return"); }
break;
case 125:
//#line 207 ".\gramatica.y"
{ logger.logError("[Parser] Se esperaba una expresion en la sentencia return"); }
break;
case 128:
//#line 213 ".\gramatica.y"
{ logger.logError("[Parser] Hay mas de 2 parametros en la funcion"); }
break;
case 133:
//#line 223 ".\gramatica.y"
{ logger.logError("[Parser] Se esperaba un identificador nombre para el parametro"); }
break;
case 134:
//#line 224 ".\gramatica.y"
{ logger.logError("[Parser] Se esperaba un tipo valido para el parametro"); }
break;
case 135:
//#line 228 ".\gramatica.y"
{ logger.logSuccess("[Parser] Declaracion de constantes detectado"); }
break;
case 136:
//#line 229 ".\gramatica.y"
{ logger.logError("[Parser] Se esperaba ; al final de la declaracion de constantes"); }
break;
case 137:
//#line 230 ".\gramatica.y"
{ logger.logError("[Parser] Se esperaba una lista de declaracion de constantes"); }
break;
case 141:
//#line 240 ".\gramatica.y"
{ logger.logError("[Parser] Se esperaba una constante del lado derecho de la asignacion"); }
break;
case 142:
//#line 241 ".\gramatica.y"
{ logger.logError("[Parser] Se esperaba el simbolo asignacion en la declaracion de constantes"); }
break;
case 143:
//#line 242 ".\gramatica.y"
{ logger.logError("[Parser] Se esperaba una asignacion en la declaracion de constantes"); }
break;
case 158:
//#line 266 ".\gramatica.y"
{ logger.logSuccess("[Parser] Sentencia break detectada"); }
break;
case 159:
//#line 267 ".\gramatica.y"
{ logger.logSuccess("[Parser] Sentencia break con etiqueta detectada"); }
break;
case 160:
//#line 268 ".\gramatica.y"
{ logger.logError("[Parser] Se esperaba un ; luego de la sentencia break"); }
break;
case 161:
//#line 269 ".\gramatica.y"
{ logger.logError("[Parser] Se esperaba un ; luego de la sentencia break"); }
break;
case 162:
//#line 270 ".\gramatica.y"
{ logger.logError("[Parser] Se esperaba una etiqueta en la sentencia break"); }
break;
case 163:
//#line 274 ".\gramatica.y"
{ logger.logSuccess("[Parser] Sentencia continue detectada"); }
break;
case 164:
//#line 275 ".\gramatica.y"
{ logger.logError("[Parser] Se esperaba un ; al final de la sentencia continue"); }
break;
case 167:
//#line 284 ".\gramatica.y"
{ logger.logSuccess("[Parser] Sentencia do until detectada"); }
break;
case 168:
//#line 285 ".\gramatica.y"
{ logger.logError("[Parser] Se esperaba un ; al final de la sentencia do"); }
break;
case 169:
//#line 286 ".\gramatica.y"
{ logger.logError("[Parser] Se esperaba una condicion para la sentencia do"); }
break;
case 170:
//#line 287 ".\gramatica.y"
{ logger.logSuccess("[Parser] Se esperaba un ( en la condicion para la sentencia do"); }
break;
case 171:
//#line 288 ".\gramatica.y"
{ logger.logSuccess("[Parser] Se esperaba un ) en la condicion para la sentencia do"); }
break;
case 175:
//#line 298 ".\gramatica.y"
{ logger.logError("[Parser] Se esperaba un } al final de la sentencia do"); }
break;
case 176:
//#line 299 ".\gramatica.y"
{ logger.logError("[Parser] Se esperaba un { en la sentencia do"); }
break;
case 179:
//#line 308 ".\gramatica.y"
{ logger.logSuccess("[Parser] Asignacion detectada"); }
break;
case 180:
//#line 309 ".\gramatica.y"
{logger.logError("[Parser] Se espera una expresion del lado derecho de la asignacion");}
break;
case 181:
//#line 310 ".\gramatica.y"
{ logger.logError("[Parser] Se espera un ; al final de la asignacion"); }
break;
case 182:
//#line 311 ".\gramatica.y"
{ logger.logError("[Parser] Se espera el simbolo =: en lugar de = para la asignacion"); }
break;
case 183:
//#line 312 ".\gramatica.y"
{ logger.logError("[Parser] Se espera el simbolo =: en lugar de = para la asignacion"); }
break;
case 184:
//#line 316 ".\gramatica.y"
{ logger.logSuccess("[Parser] Sentencia when detectada"); }
break;
case 185:
//#line 317 ".\gramatica.y"
{ logger.logError("[Parser] Se esperaba la palabra reservada then en la sentencia when"); }
break;
case 186:
//#line 318 ".\gramatica.y"
{ logger.logError("[Parser] Se esperaba una condicion en la sentencia when"); }
break;
case 187:
//#line 319 ".\gramatica.y"
{ logger.logError("[Parser] Se esperaba un ; al final de la sentencia when"); }
break;
case 188:
//#line 320 ".\gramatica.y"
{ logger.logError("[Parser] Se esperaba la palabra reservada then en la sentencia when"); }
break;
case 189:
//#line 321 ".\gramatica.y"
{ logger.logError("[Parser] Se esperaban sentencias dentro del when"); }
break;
case 192:
//#line 330 ".\gramatica.y"
{ logger.logSuccess("[Parser] Sentencia if then detectada"); }
break;
case 193:
//#line 331 ".\gramatica.y"
{ logger.logSuccess("[Parser] Sentencia if then else detectada"); }
break;
case 194:
//#line 332 ".\gramatica.y"
{ logger.logError("[Parser] Se esperaba un ; al final de la sentencia seleccion"); }
break;
case 195:
//#line 333 ".\gramatica.y"
{ logger.logError("[Parser] Se esperaba un ; al final de la sentencia seleccion"); }
break;
case 196:
//#line 334 ".\gramatica.y"
{ logger.logError("[Parser] Se esperaba un ) en la condicion de la sentencia seleccion"); }
break;
case 197:
//#line 335 ".\gramatica.y"
{ logger.logError("[Parser] Se esperaba un ( en la condicion de la sentencia seleccion"); }
break;
case 198:
//#line 336 ".\gramatica.y"
{ logger.logError("[Parser] Se esperaba una condicion en la sentencia seleccion"); }
break;
case 199:
//#line 337 ".\gramatica.y"
{ logger.logError("[Parser] Se esperaban sentencias en la sentencia seleccion"); }
break;
case 200:
//#line 338 ".\gramatica.y"
{ logger.logError("[Parser] Se esperaban la palabra reservada then en la sentencia seleccion"); }
break;
case 201:
//#line 339 ".\gramatica.y"
{ logger.logError("[Parser] Se esperaban una condicion en la sentencia seleccion"); }
break;
case 202:
//#line 340 ".\gramatica.y"
{ logger.logError("[Parser] Se esperaban la palabra reservada then en la sentencia seleccion"); }
break;
case 203:
//#line 341 ".\gramatica.y"
{ logger.logError("[Parser] Se esperaban sentencias en la sentencia seleccion"); }
break;
case 206:
//#line 347 ".\gramatica.y"
{ logger.logError("[Parser] Se esperaban sentencias dentro de la seleccion"); }
break;
case 207:
//#line 348 ".\gramatica.y"
{ logger.logError("[Parser] Se esperaba un } al final de la seleccion"); }
break;
case 208:
//#line 349 ".\gramatica.y"
{ logger.logError("[Parser] Se esperaba un { en la seleccion"); }
break;
case 212:
//#line 359 ".\gramatica.y"
{ logger.logError("[Parser] Se esperaba un expresion del lado derecho de la comparacion"); }
break;
case 213:
//#line 360 ".\gramatica.y"
{ logger.logError("[Parser] Se esperaba un expresion del lado izquierdo de la comparacion"); }
break;
case 235:
//#line 406 ".\gramatica.y"
{ logger.logSuccess("[Parser] Sentencia out detectada"); }
break;
case 236:
//#line 407 ".\gramatica.y"
{ logger.logSuccess("[Parser] Sentencia out detectada"); }
break;
case 237:
//#line 408 ".\gramatica.y"
{ logger.logError("[Parser] Se esperaba una cadena o identificador en la sentencia out"); }
break;
case 238:
//#line 409 ".\gramatica.y"
{ logger.logError("[Parser] Se esperaba un ( en la sentencia out"); }
break;
case 239:
//#line 410 ".\gramatica.y"
{ logger.logError("[Parser] Se esperaba un ) en la sentencia out"); }
break;
case 240:
//#line 411 ".\gramatica.y"
{ logger.logError("[Parser] Se esperaba un ( en la sentencia out"); }
break;
case 241:
//#line 412 ".\gramatica.y"
{ logger.logError("[Parser] Se esperaba un ) en la sentencia out"); }
break;
case 242:
//#line 413 ".\gramatica.y"
{ logger.logError("[Parser] Se espera un ; al final de la sentencia out"); }
break;
case 243:
//#line 414 ".\gramatica.y"
{ logger.logError("[Parser] Se espera un ; al final de la sentencia out"); }
break;
case 245:
//#line 419 ".\gramatica.y"
{ constanteConSigno(val_peek(0).sval); }
break;
//#line 1836 "Parser.java"
//########## END OF USER-SUPPLIED ACTIONS ##########
    }//switch
    //#### Now let's reduce... ####
    if (yydebug) debug("reduce");
    state_drop(yym);             //we just reduced yylen states
    yystate = state_peek(0);     //get new state
    val_drop(yym);               //corresponding value drop
    yym = yylhs[yyn];            //select next TERMINAL(on lhs)
    if (yystate == 0 && yym == 0)//done? 'rest' state and at first TERMINAL
      {
      if (yydebug) debug("After reduction, shifting from state 0 to state "+YYFINAL+"");
      yystate = YYFINAL;         //explicitly say we're done
      state_push(YYFINAL);       //and save it
      val_push(yyval);           //also save the semantic value of parsing
      if (yychar < 0)            //we want another character?
        {
        yychar = yylex();        //get next character
        if (yychar<0) yychar=0;  //clean, if necessary
        if (yydebug)
          yylexdebug(yystate,yychar);
        }
      if (yychar == 0)          //Good exit (if lex returns 0 ;-)
         break;                 //quit the loop--all DONE
      }//if yystate
    else                        //else not done yet
      {                         //get next state and push, for next yydefred[]
      yyn = yygindex[yym];      //find out where to go
      if ((yyn != 0) && (yyn += yystate) >= 0 &&
            yyn <= YYTABLESIZE && yycheck[yyn] == yystate)
        yystate = yytable[yyn]; //get new state
      else
        yystate = yydgoto[yym]; //else go to new defred
      if (yydebug) debug("after reduction, shifting from state "+state_peek(0)+" to state "+yystate+"");
      state_push(yystate);     //going again, so push state & val...
      val_push(yyval);         //for next action
      }
    }//main loop
  return 0;//yyaccept!!
}
//## end of method parse() ######################################



//## run() --- for Thread #######################################
/**
 * A default run method, used for operating this parser
 * object in the background.  It is intended for extending Thread
 * or implementing Runnable.  Turn off with -Jnorun .
 */
public void run()
{
  yyparse();
}
//## end of method run() ########################################



//## Constructors ###############################################
/**
 * Default constructor.  Turn off with -Jnoconstruct .

 */
public Parser()
{
  //nothing to do
}


/**
 * Create a parser, setting the debug to true or false.
 * @param debugMe true for debugging, false for no debug.
 */
public Parser(boolean debugMe)
{
  yydebug=debugMe;
}
//###############################################################



}
//################### END OF CLASS ##############################
