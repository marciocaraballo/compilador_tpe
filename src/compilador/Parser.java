//### This file created by BYACC 1.8(/Java extension  1.15)
//### Java capabilities added 7 Jan 97, Bob Jamison
//### Updated : 27 Nov 97  -- Bob Jamison, Joe Nieten
//###           01 Jan 98  -- Bob Jamison -- fixed generic semantic constructor
//###           01 Jun 99  -- Bob Jamison -- added Runnable support
//###           06 Aug 00  -- Bob Jamison -- made state variables class-global
//###           03 Jan 01  -- Bob Jamison -- improved flags, tracing
//###           16 May 01  -- Bob Jamison -- added custom stack sizing
//###           04 Mar 02  -- Yuval Oren  -- improved java performance, added options
//###           14 Mar 02  -- Tomas Hurka -- -d support, static initializer workaround
//### Please send bug reports to tom@hukatronic.cz
//### static char yysccsid[] = "@(#)yaccpar	1.8 (Berkeley) 01/20/90";



package compilador;



//#line 2 "gramatica.y"
import java.io.File;
//#line 19 "Parser.java"




public class Parser
{

boolean yydebug;        //do I want debug output?
int yynerrs;            //number of errors so far
int yyerrflag;          //was there an error?
int yychar;             //the current working character

//########## MESSAGES ##########
//###############################################################
// method: debug
//###############################################################
void debug(String msg)
{
  if (yydebug)
    System.out.println(msg);
}

//########## STATE STACK ##########
final static int YYSTACKSIZE = 500;  //maximum stack size
int statestk[] = new int[YYSTACKSIZE]; //state stack
int stateptr;
int stateptrmax;                     //highest index of stackptr
int statemax;                        //state when highest index reached
//###############################################################
// methods: state stack push,pop,drop,peek
//###############################################################
final void state_push(int state)
{
  try {
		stateptr++;
		statestk[stateptr]=state;
	 }
	 catch (ArrayIndexOutOfBoundsException e) {
     int oldsize = statestk.length;
     int newsize = oldsize * 2;
     int[] newstack = new int[newsize];
     System.arraycopy(statestk,0,newstack,0,oldsize);
     statestk = newstack;
     statestk[stateptr]=state;
  }
}
final int state_pop()
{
  return statestk[stateptr--];
}
final void state_drop(int cnt)
{
  stateptr -= cnt; 
}
final int state_peek(int relative)
{
  return statestk[stateptr-relative];
}
//###############################################################
// method: init_stacks : allocate and prepare stacks
//###############################################################
final boolean init_stacks()
{
  stateptr = -1;
  val_init();
  return true;
}
//###############################################################
// method: dump_stacks : show n levels of the stacks
//###############################################################
void dump_stacks(int count)
{
int i;
  System.out.println("=index==state====value=     s:"+stateptr+"  v:"+valptr);
  for (i=0;i<count;i++)
    System.out.println(" "+i+"    "+statestk[i]+"      "+valstk[i]);
  System.out.println("======================");
}


//########## SEMANTIC VALUES ##########
//public class ParserVal is defined in ParserVal.java


String   yytext;//user variable to return contextual strings
ParserVal yyval; //used to return semantic vals from action routines
ParserVal yylval;//the 'lval' (result) I got from yylex()
ParserVal valstk[];
int valptr;
//###############################################################
// methods: value stack push,pop,drop,peek.
//###############################################################
void val_init()
{
  valstk=new ParserVal[YYSTACKSIZE];
  yyval=new ParserVal();
  yylval=new ParserVal();
  valptr=-1;
}
void val_push(ParserVal val)
{
  if (valptr>=YYSTACKSIZE)
    return;
  valstk[++valptr]=val;
}
ParserVal val_pop()
{
  if (valptr<0)
    return new ParserVal();
  return valstk[valptr--];
}
void val_drop(int cnt)
{
int ptr;
  ptr=valptr-cnt;
  if (ptr<0)
    return;
  valptr = ptr;
}
ParserVal val_peek(int relative)
{
int ptr;
  ptr=valptr-relative;
  if (ptr<0)
    return new ParserVal();
  return valstk[ptr];
}
final ParserVal dup_yyval(ParserVal val)
{
  ParserVal dup = new ParserVal();
  dup.ival = val.ival;
  dup.dval = val.dval;
  dup.sval = val.sval;
  dup.obj = val.obj;
  return dup;
}
//#### end semantic value section ####
public final static short ID=257;
public final static short CTE=258;
public final static short CADENA=259;
public final static short IF=260;
public final static short ELSE=261;
public final static short ENDIF=262;
public final static short PRINT=263;
public final static short VOID=264;
public final static short RETURN=265;
public final static short COMP_MAYOR_IGUAL=266;
public final static short COMP_MENOR_IGUAL=267;
public final static short COMP_IGUAL=268;
public final static short COMP_DISTINTO=269;
public final static short CLASS=270;
public final static short WHILE=271;
public final static short DO=272;
public final static short INTERFACE=273;
public final static short IMPLEMENT=274;
public final static short INT=275;
public final static short ULONG=276;
public final static short FLOAT=277;
public final static short OPERADOR_MENOS=278;
public final static short YYERRCODE=256;
final static short yylhs[] = {                           -1,
    0,    0,    0,    0,    0,    1,    1,    2,    2,    2,
    4,    4,    4,    4,    4,    4,   11,   11,   12,   12,
   13,   13,   13,   13,   13,   10,   10,    9,    9,    9,
    9,    9,    9,    9,    9,    9,    9,    9,   15,   19,
   15,   15,   15,   15,   15,   15,   15,   15,   15,    8,
    8,    8,    8,    8,    8,    8,    8,    8,   14,   14,
   14,   23,   14,   14,   14,   14,   14,   20,   20,   20,
   20,   20,   20,   16,   16,   16,   16,   16,   16,   25,
   21,   21,   21,   21,   21,   21,   22,   22,   22,   22,
   22,   22,   22,   22,   22,   22,   22,   18,   18,   18,
   18,   18,   18,   18,   18,   18,   18,   18,   27,   27,
   28,   28,   24,   24,   24,   24,   26,   26,   26,   26,
    7,    7,    7,    7,    7,    7,    7,    6,    6,    6,
    6,    6,    6,   32,   32,    5,    5,    5,   30,   30,
    3,    3,    3,    3,   33,   33,   33,   39,   39,   36,
   36,   40,   40,   41,   41,   43,   43,   43,   43,   43,
   35,   44,   44,   44,   44,   44,   44,   45,   45,   34,
   46,   46,   46,   46,   46,   48,   48,   42,   42,   42,
   42,   42,   42,   42,   42,   47,   47,   47,   47,   47,
   47,   47,   47,   47,   47,   47,   47,   51,   51,   52,
   52,   52,   50,   50,   50,   49,   38,   38,   37,   37,
   37,   37,   17,   17,   17,   17,   53,   53,   53,   53,
   53,   53,   31,   31,   31,   54,   54,   54,   55,   55,
   55,   55,   29,   29,
};
final static short yylen[] = {                            2,
    3,    2,    2,    2,    0,    1,    2,    1,    1,    2,
    1,    1,    1,    1,    1,    1,    1,    2,    1,    1,
    1,    1,    1,    1,    1,    2,    1,    7,    6,    6,
    6,    6,    3,    4,    2,    5,    4,    3,    7,    0,
   13,    6,    6,    3,    4,    2,    5,    4,    3,    9,
    7,    8,    6,    8,    6,    8,    8,    6,    9,    7,
    8,    0,   15,    6,    8,    8,    6,    1,    3,    2,
    2,    2,    1,    3,    4,    3,    3,    2,    1,    1,
    1,    4,    3,    3,    2,    1,    1,    1,    1,    3,
    4,    5,    2,    3,    2,    3,    2,    1,    1,    1,
    3,    4,    5,    2,    3,    2,    3,    2,    1,    2,
    1,    1,    1,    2,    1,    2,    1,    2,    1,    2,
    3,    2,    2,    3,    2,    3,    2,    5,    4,    7,
    4,    3,    6,    1,    3,    4,    3,    3,    1,    3,
    1,    1,    1,    1,    3,    2,    2,    2,    1,    4,
    2,    1,    2,    2,    1,    3,    2,    1,    2,    2,
    4,    2,    4,    1,    3,    3,    2,    1,    2,    2,
    4,    3,    6,    5,    2,    2,    1,    5,    4,    7,
    6,    4,    3,    4,    3,    4,    3,    5,    4,    3,
    2,    3,    2,    4,    3,    2,    1,    1,    2,    1,
    1,    1,    1,    3,    2,    2,    1,    3,    1,    1,
    1,    1,    3,    2,    2,    3,    1,    1,    1,    1,
    1,    1,    3,    3,    1,    3,    3,    1,    1,    2,
    1,    3,    1,    2,
};
final static short yydefred[] = {                         0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,  209,
  210,  211,    0,    0,    0,    6,    8,    9,   11,   12,
   13,   14,   15,   16,    0,  141,  142,  143,  144,    0,
    0,    0,    0,    0,   10,    0,    0,  233,    0,    0,
  123,    0,  176,   26,    0,    0,    0,    0,   35,    0,
   79,   80,    0,    0,  148,    4,    0,    2,    7,    0,
    0,    0,  207,  147,    0,    0,  151,    0,    0,    0,
    0,  197,   19,   21,   22,   23,    0,    0,   17,   20,
   24,   25,  170,    0,  175,    0,  217,  218,  219,  220,
    0,    0,  221,  222,    0,  231,    0,    0,    0,  228,
  124,  121,  234,  126,    0,  165,   33,    0,  139,   78,
    0,    0,    0,    0,    0,  115,  113,    0,    1,    0,
    0,  138,    0,  140,  145,    0,    0,    0,  152,    0,
    0,    0,    0,  168,    0,    0,    0,    0,   46,    0,
    0,   99,    0,    0,    0,  191,    0,    0,  193,  200,
  201,  202,    0,  198,  196,    0,   18,  212,  172,    0,
    0,  230,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,  163,    0,   74,    0,
   37,    0,   34,    0,    0,   77,  116,  114,  129,    0,
    0,  136,  208,    0,    0,  150,  153,  154,  160,  159,
    0,  161,  169,    0,    0,   44,  108,  119,  117,    0,
    0,    0,    0,    0,  104,  120,    0,  118,  187,    0,
  190,    0,  195,  199,  192,    0,  206,    0,  171,  203,
    0,  232,   72,    0,    0,    0,   71,    0,    0,    0,
    0,    0,    0,    0,  226,  227,    0,   75,   36,    0,
    0,    0,    0,    0,  128,    0,  185,    0,  183,    0,
  156,    0,    0,   88,    0,    0,    0,    0,  101,    0,
   48,    0,   45,    0,    0,  105,  189,  186,    0,  194,
    0,    0,  174,  205,   69,    0,   86,    0,    0,   55,
    0,   58,    0,    0,   30,   31,    0,   32,    0,    0,
  179,    0,  184,  182,   97,    0,    0,   93,    0,    0,
    0,    0,  102,  111,  112,    0,  109,   47,    0,    0,
    0,  188,  173,  204,   85,    0,    0,    0,    0,    0,
    0,   51,   28,    0,  130,    0,  178,    0,   90,    0,
   64,   94,    0,   67,    0,    0,  103,  110,   42,    0,
   43,    0,   84,   54,   56,   57,    0,    0,  181,   91,
    0,    0,    0,    0,   60,    0,   39,    0,   82,   50,
  180,   92,   65,   66,    0,    0,    0,   59,    0,    0,
    0,    0,    0,    0,    0,    0,    0,   41,    0,   63,
};
final static short yydgoto[] = {                         14,
   15,   16,  150,  188,   74,   75,   76,   22,   23,   24,
   78,   79,  152,   81,   82,   53,   95,  144,  368,  167,
  289,  266,  366,  168,   54,  145,  316,  317,   96,   25,
   97,  254,   26,   27,   28,   29,   30,   65,   31,  128,
  129,  130,  134,   32,  135,   33,   83,   34,  230,  231,
  153,  154,   98,   99,  100,
};
final static short yysindex[] = {                      1221,
    2,    0,   27,   55, -201,   45, -220, 1026, -143,    0,
    0,    0, 1535,    0, 1558,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    5,    0,    0,    0,    0,  -39,
   12,   15, 1294,  138,    0,  964,  100,    0,  110,  -99,
    0,  119,    0,    0,  -79,  -82,   29, -115,    0, 1184,
    0,    0,  -14, 2149,    0,    0, 1581,    0,    0,  146,
  296,  -57,    0,    0,   -6,  -55,    0,  329,  166, 1053,
 1602,    0,    0,    0,    0,    0, 1623, 1644,    0,    0,
    0,    0,    0,    8,    0,  -51,    0,    0,    0,    0,
   51, 1380,    0,    0,  193,    0,  -37,   51,   40,    0,
    0,    0,    0,    0,   -5,    0,    0, 1207,    0,    0,
 1668,  229,  234,   80, 1207,    0,    0, 1691,    0,  244,
  275,    0,  140,    0,    0,   47,  -38, -113,    0,  261,
  279,  280,   77,    0,  167, 1247,  295, 2107,    0, 1274,
    0,    0,    0,  -11, 1714,    0, 1735, 1756,    0,    0,
    0,    0, 1777,    0,    0, 1798,    0,    0,    0,   95,
   72,    0,   43, 1821,    0,    0,  -73, 1844,  500,   51,
   51,   51,   51,  128,   51,   51,    0,  236,    0, 1868,
    0,  299,    0, 1339,  319,    0,    0,    0,    0,   51,
  325,    0,    0,   81,  102,    0,    0,    0,    0,    0,
   16,    0,    0, 1401,  331,    0,    0,    0,    0, 1889,
  330,  334,  116, 1207,    0,    0,  256,    0,    0, 1910,
    0, 1931,    0,    0,    0, 1952,    0, -214,    0,    0,
   88,    0,    0, 1974, 1422,  339,    0, 1422,  340,  -46,
   40,   40,  128,  128,    0,    0,  345,    0,    0,  346,
  353,  348,  128,   53,    0,  152,    0,  360,    0,  364,
    0, 2128,    0,    0,    0,  144, 1997, 1151,    0,  237,
    0,  366,    0, 1345,  367,    0,    0,    0, 2022,    0,
  123, -214,    0,    0,    0,  260,    0, 2149,  151,    0,
  154,    0, 1315,  370,    0,    0,  374,    0,   51,  376,
    0,  158,    0,    0,    0, 2043,  377,    0,  300, 1445,
  382,  -40,    0,    0,    0,  270,    0,    0,  393,  399,
  401,    0,    0,    0,    0, 2149, 2064,  407,  413,  414,
  197,    0,    0,  128,    0, -214,    0,  173,    0,  292,
    0,    0,  199,    0, 1359,  426,    0,    0,    0,  429,
    0, 2085,    0,    0,    0,    0,  430,  179,    0,    0,
  797,  431,  441,  226,    0,  231,    0,  220,    0,    0,
    0,    0,    0,    0,  449,  459,  230,    0,  462,  464,
 1401, 1207,  245,  466, 1445,  467,  246,    0,  469,    0,
};
final static short yyrindex[] = {                       510,
    0,  -29,    0,    0,  163,  447,  392,    0,  147,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,  472,    0,  545,    0,
    0,  625,    0,    0,  395,  405,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,  516,    0,    0,    0,
    0,    0,    0,    0,  656,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,  422,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,  522,    0,
    0,    0,    0,    0,  418,    0,    0,    0,    0,    0,
    0,  700,    0,    0,    0,    0,    0,    0,    0,  726,
    0,    0,  774,    0,    0,    0,    0,    0,    0, -106,
  267,  335,    0,    0,    0,    0,    0,    0,    0,    0,
 1078,    0, 1101,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,  678, 1468,    0,    0,    0,    0,
    0,    0,  496,  502,    0,    0,    0,    0,    0,   -9,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
  819,    0,    0,    0,    0,    0,    0,    0,    0,    0,
  351,    0,    0,    0,    0,    0,    0,    0,    0,  -18,
  844,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,  -36,    0,    0,    0,    0,    0,    0,
  577,  600,  505,  507,    0,    0,    0,    0,    0,    0,
    0,    0,   62,    0,    0,    0,    0,    0,    0,    0,
    0,    0, 1490,    0, 1513,    0,    0,    0,    0,  -12,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,  288,    0,    0,
    0,    0,    0,  883,    0,    0,  907,    0,    0,  934,
    0,    0,    0,    0,    0,   34,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,   86,    0,    0,    0,    0,    0,  106,
    0,    0,    0,    0,    0,  291,    0,    0,    0,  284,
    0,  309,    0,    0,    0,    0,  978,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0, 1000,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
};
final static short yygindex[] = {                         0,
  548,   20,    1,  233,   44,  153,  243,    0,    0,  -30,
  487,  -58,  228,    0,    0,    0,  -32, -260,    0,  406,
 -225, -241,    0,  -33,  526, -134,  238, -280,  572,    0,
    4,    0,    0,  -26,    0,    0,  258,  446,    0,    0,
  452,    0,  453,    0,    0,    0,    0,    0,  -84, -195,
 -117, -146,  484,   96,  126,
};
final static int YYTABLESIZE=2426;
static short yytable[];
static { yytable();}
static void yytable(){
yytable = new short[]{                        161,
   17,  195,   77,  210,   64,  170,  224,  171,   51,  110,
  139,  196,  291,   17,  212,   17,  139,  113,  155,  157,
  118,  106,   94,  172,   93,  115,  312,  107,  214,  220,
   76,  139,  281,   73,   59,  348,   45,  125,  226,  142,
  147,  132,  158,   19,   60,   35,  151,  156,  159,  343,
   62,   19,  126,   46,  116,   43,   19,   17,   19,  261,
   10,   11,   12,  121,  123,   61,   36,  331,  108,  267,
  141,   73,  107,  224,  126,  178,   59,  180,   73,  224,
  348,  175,  185,  232,  364,  170,  176,  171,   44,  157,
   91,   19,  165,  300,  163,   40,  299,   19,   41,   40,
   19,  174,  134,  205,  279,  134,  338,  212,  132,  258,
  260,  116,  229,   55,  217,  228,  151,  222,  187,  184,
  256,  257,  151,  183,  387,  151,  135,  306,  283,  135,
  234,  282,  224,  267,   66,   19,   67,   68,  208,  383,
  358,  109,  259,  101,    3,  216,  284,    4,   73,    6,
  127,  251,   20,  102,   19,  274,    8,  155,  103,  273,
   20,   19,  104,  323,  116,   20,  282,   20,  187,  165,
  170,  302,  171,  264,  106,  243,  244,   84,   85,  270,
  187,  275,  170,  192,  171,   91,  120,  235,  236,  151,
   40,  151,  301,  253,  105,  151,  284,  324,  337,  124,
   20,  336,  177,  177,  263,  136,   20,   19,  127,   20,
  216,   19,   19,  359,  293,  294,  282,   63,  194,  371,
  345,  346,  282,   19,   70,   70,  162,  212,   87,   88,
   89,   90,   18,  169,  187,  287,  309,  264,  287,  314,
   52,  320,   21,  106,   20,   18,  267,   18,  151,  107,
   21,  177,  106,  284,  327,   21,  114,   21,  107,  213,
   80,   76,  208,   20,  158,  241,  242,  216,  263,  149,
   20,  149,  181,  284,  182,  340,  247,   19,   19,  142,
   52,   19,   10,   11,   12,  314,  117,  189,  116,   18,
   21,  202,  352,  287,   95,   95,   21,  143,   80,   21,
  245,  246,  334,  193,  198,   80,  216,   86,   38,  314,
  141,   37,   38,   39,  142,  191,   20,  170,  190,  171,
   20,   20,  199,  200,  166,  133,  116,  187,  158,   19,
  314,   19,   20,   63,   21,   91,   19,  158,  206,  122,
   40,  160,  249,  117,  158,  141,   10,   11,   12,  384,
  264,  227,  187,   21,  142,   10,   11,   12,  158,  252,
   21,  313,   10,   11,   12,  209,   96,   96,  255,   19,
   19,  268,  218,  271,  272,   80,   10,   11,   12,  158,
  276,  263,  290,  292,  325,  141,   20,   20,  295,  296,
   20,  298,  133,  297,  347,   19,  117,   10,   11,   12,
  303,  166,   86,   38,  304,  307,   21,  321,  158,  318,
   21,   21,  328,  332,  158,  329,  360,  333,  160,  335,
  341,  229,   21,  131,  342,  344,   10,   11,   12,  158,
    5,  265,   10,   11,   12,  158,  349,  218,   20,  350,
   20,   10,   11,   12,  351,   20,   27,   10,   11,   12,
  354,  160,  160,   10,   11,   12,  355,  356,  357,  158,
  362,  229,  229,  229,  229,  229,  229,  288,  229,  365,
  288,  125,  367,  370,  373,  157,   21,   21,   20,   20,
   21,  229,  229,  229,  374,  160,   27,  375,  160,  209,
  376,  377,  378,  109,  218,  265,   69,  315,  379,    4,
  380,    6,  381,  382,   20,  385,  386,  389,   70,    5,
  388,  125,  390,  160,  164,    3,  109,  162,  326,    3,
  117,  225,    4,  212,    6,  288,  109,  167,   21,   69,
   21,    8,    4,  218,    6,   21,  214,  143,  160,  160,
  166,   70,  215,  315,  122,  216,  229,  213,  109,   81,
   62,   69,   86,   38,    4,   40,    6,  148,  117,  160,
   57,  225,  225,   70,  225,  225,  225,  315,   21,   21,
   83,   27,  143,  111,  240,   42,  223,  361,  201,  197,
  173,  225,  225,  225,  122,  131,    0,  203,  315,    0,
    0,  158,    5,  160,   21,  160,  125,    0,  158,  224,
    0,    0,    0,   10,   11,   12,    0,  157,  265,  158,
  158,  158,  143,    0,  157,  160,  223,  223,    0,  223,
  223,  223,  164,    0,  127,  157,  157,  157,    0,    0,
    0,    0,    0,    0,    0,    0,  223,  223,  223,  224,
  224,    0,  224,  224,  224,    0,  225,    0,    0,    0,
    0,    0,    0,    0,    0,  146,    0,    0,    0,  224,
  224,  224,    0,    0,  127,    0,    0,    0,    0,  122,
    0,    0,    0,    0,    0,    0,    0,  229,  229,    0,
    0,  229,  229,  229,  229,  229,  229,  229,  229,  229,
  229,  229,  229,  229,  229,  146,  229,  229,  229,   38,
    0,  223,   27,   27,    0,    0,   27,   27,   27,   27,
   27,   27,    0,    0,    0,    0,   27,   27,   27,   27,
    0,   27,   27,   27,  224,  132,    0,  125,  125,    0,
    0,  125,  125,  125,  125,  125,  125,    0,    0,   38,
    0,  125,  125,  125,  125,    0,  125,  125,  125,  127,
    0,    0,    0,    0,    0,    0,    2,    0,    0,    3,
  238,  239,    4,    5,    6,  132,    0,    0,    0,    7,
    0,    8,    9,  137,   10,   11,   12,  225,  225,    0,
  146,  225,  225,  225,  225,  225,  225,  225,  225,  225,
  225,  225,  225,  225,  225,    0,  225,  225,  225,    0,
  122,  122,  115,    0,  122,  122,  122,  122,  122,  122,
    0,    0,    0,  137,  122,  122,  122,  122,  131,  122,
  122,  122,    0,    0,   38,    0,    0,    0,    0,    0,
    0,    0,  223,  223,    0,    0,  223,  223,  223,  223,
  223,  223,  223,  223,  223,  223,  223,  223,  223,  223,
  132,  223,  223,  223,    0,  224,  224,    0,  131,  224,
  224,  224,  224,  224,  224,  224,  224,  224,  224,  224,
  224,  224,  224,    0,  224,  224,  224,    0,    0,    0,
  127,  127,   53,   49,  127,  127,  127,  127,  127,  127,
    0,    0,    0,    0,  127,  127,  127,  127,  137,  127,
  127,  127,    0,    0,    0,    0,   29,    0,    0,    0,
    0,  146,  146,    0,    0,  146,  146,  146,  146,  146,
  146,  372,   53,    0,    0,  146,  146,  146,  146,    0,
  146,  146,  146,  133,  115,    0,    0,  115,   73,   73,
  115,  115,  115,  131,    0,    0,   29,  115,    0,  115,
  115,    0,  115,  115,  115,   38,   38,    0,    0,   38,
   38,   38,   38,   38,   38,    0,    0,    0,   49,   38,
   38,   38,   38,  133,   38,   38,   38,   52,    0,    0,
    0,  132,  132,    0,    0,  132,  132,  132,  132,  132,
  132,    0,    0,    0,    0,  132,  132,  132,  132,    0,
  132,  132,  132,   91,   92,    0,    0,   53,   40,    0,
    0,    0,    0,    0,    0,    0,    0,   52,    0,    0,
    0,    0,    0,   94,    0,   93,    0,    0,    0,  137,
  137,   29,    0,  137,  137,  137,  137,  137,  137,   61,
    0,    0,    0,  137,  137,  137,  137,    0,  137,  137,
  137,    0,    0,  109,    0,    0,   69,    0,  133,    4,
    0,    6,    0,    0,    0,   50,    0,    0,   70,   49,
    0,    0,    0,    0,  131,  131,    0,    0,  131,  131,
  131,  131,  131,  131,    0,    0,    0,    0,  131,  131,
  131,  131,  140,  131,  131,  131,  139,    0,    0,    0,
   49,    0,   52,   49,   49,   49,   49,   49,   49,    0,
    0,    0,    0,   49,   49,   49,   49,  100,   49,   49,
   49,    0,    0,    0,   61,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,   53,   53,
   98,    0,   53,   53,   53,   53,   53,   53,   48,    0,
    0,    0,   53,   53,   53,   53,    0,   53,   53,   53,
    0,    0,   29,   29,    0,    0,   29,   29,   29,   29,
   29,   29,    0,    0,    0,  138,   29,   29,   29,   29,
    0,   29,   29,   29,    0,    0,    0,    0,    0,  133,
  133,    0,    0,  133,  133,  133,  133,  133,  133,    0,
    0,    0,  119,  133,  133,  133,  133,    0,  133,  133,
  133,    0,    0,    0,    0,    0,    0,    0,    0,    0,
   86,   38,    0,   91,  112,  117,    0,    0,   40,   87,
   88,   89,   90,   52,   52,    0,    0,   52,   52,   52,
   52,   52,   52,   94,    0,   93,   91,   52,   52,   52,
   52,   40,   52,   52,   52,    0,   61,    0,    0,   61,
   61,   61,   61,   61,   61,    0,   94,    0,   93,   61,
   61,   61,   61,  262,   61,   61,   61,    0,    0,    0,
    0,    0,    2,    0,    0,    3,   91,  204,    4,    5,
    6,   40,    0,    0,    0,    7,   47,    8,    9,    0,
   10,   11,   12,    0,    0,    0,   94,    0,   93,    2,
    0,    0,   69,   91,  211,    4,    5,    6,   40,    0,
    0,    0,    7,  137,   70,    9,    0,   10,   11,   12,
    0,    0,    0,   94,  119,   93,    0,  119,    0,  100,
  119,  119,  119,   13,    0,    0,    0,  119,  100,  119,
  119,    0,  119,  119,  119,    0,    0,  117,    0,    0,
  117,    0,   98,  117,  117,  117,    0,    0,    0,    0,
  117,   98,  117,  117,    0,  117,  117,  117,   91,  250,
    0,    0,    0,   40,   91,  319,    0,    0,    0,   40,
    0,    0,    0,    0,    0,    0,    0,    0,   94,    0,
   93,    0,    0,    0,   94,    0,   93,    2,    0,    0,
   69,  310,  311,    4,    5,    6,   71,    0,   72,    0,
    7,    0,   70,    9,    0,   10,   11,   12,    0,    0,
    0,    0,    0,    0,    0,    0,    0,  286,    0,    0,
   86,   38,    0,    0,    0,    0,    0,    0,    0,   87,
   88,   89,   90,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,   86,   38,    0,    0,    0,    0,    0,
    0,    0,   87,   88,   89,   90,    1,    2,    0,    0,
    3,  138,    0,    4,    5,    6,    0,    0,    0,    0,
    7,    0,    8,    9,    0,   10,   11,   12,    0,    0,
    0,    0,  164,   86,   38,    0,    0,    0,    0,    0,
    0,    0,   87,   88,   89,   90,    0,    0,    0,    0,
    0,    0,    0,  262,    0,    0,    0,    0,    0,    0,
   86,   38,    0,    0,    0,    0,    0,    0,    0,   87,
   88,   89,   90,    0,  286,    0,    0,    0,    0,    0,
    2,    0,    0,   69,    0,    0,    4,    5,    6,    0,
    0,    0,    0,    7,    0,   70,    9,  138,   10,   11,
   12,    2,    0,    0,    3,    0,  330,    4,    5,    6,
    0,    0,    0,    0,    7,    0,    8,    9,    0,   10,
   11,   12,  113,    0,    0,   86,   38,    0,    0,    0,
    0,   86,   38,    0,   87,   88,   89,   90,    0,    0,
   87,   88,   89,   90,  119,    2,    0,    0,   69,    0,
  363,    4,    5,    6,    0,    0,    0,    0,    7,    0,
   70,    9,    0,   10,   11,   12,    2,  117,    0,    3,
    0,    0,    4,    5,    6,    0,    0,    0,    0,    7,
    0,    8,    9,    0,   10,   11,   12,    2,    0,   56,
   69,    0,    0,    4,    5,    6,    0,    0,    0,    0,
    7,    0,   70,    9,    0,   10,   11,   12,    2,    0,
    0,    3,   58,    0,    4,    5,    6,    0,    0,    0,
    0,    7,    0,    8,    9,    0,   10,   11,   12,    0,
    0,    2,    0,    0,   69,  119,    0,    4,    5,    6,
    0,    0,    0,    0,    7,    0,   70,    9,    0,   10,
   11,   12,    0,    0,  113,    0,  146,  113,   68,   68,
  113,  113,  113,    0,    0,    0,    0,  113,    0,  113,
  113,    0,  113,  113,  113,    0,  119,  149,    0,  119,
   89,   89,  119,  119,  119,    0,    0,    0,    0,  119,
    0,  119,  119,    0,  119,  119,  119,    0,  155,  117,
    0,    0,  117,   87,   87,  117,  117,  117,    0,    0,
    0,    0,  117,    0,  117,  117,    0,  117,  117,  117,
    1,    2,  179,    0,    3,    0,    0,    4,    5,    6,
    0,    0,    0,    0,    7,    0,    8,    9,    0,   10,
   11,   12,    0,    1,    2,  186,    0,    3,    0,    0,
    4,    5,    6,    0,    0,    0,    0,    7,    0,    8,
    9,    0,   10,   11,   12,    0,    1,    2,  215,    0,
    3,    0,    0,    4,    5,    6,    0,    0,    0,    0,
    7,    0,    8,    9,    0,   10,   11,   12,    2,  219,
    0,   69,    0,    0,    4,    5,    6,    0,    0,    0,
    0,    7,    0,   70,    9,    0,   10,   11,   12,    2,
  221,    0,   69,    0,    0,    4,    5,    6,    0,    0,
    0,    0,    7,    0,   70,    9,    0,   10,   11,   12,
    2,  223,    0,   69,    0,    0,    4,    5,    6,    0,
    0,    0,    0,    7,    0,   70,    9,    0,   10,   11,
   12,    0,  225,    0,    2,    0,    0,    3,    0,    0,
    4,    5,    6,    0,    0,    0,    0,    7,    0,    8,
    9,    0,   10,   11,   12,  233,    0,    2,    0,    0,
    3,    0,    0,    4,    5,    6,    0,    0,    0,    0,
    7,    0,    8,    9,    0,   10,   11,   12,  237,    0,
    2,    0,    0,   69,    0,    0,    4,    5,    6,    0,
    0,    0,    0,    7,    0,   70,    9,    0,   10,   11,
   12,    2,  248,    0,   69,    0,    0,    4,    5,    6,
    0,    0,    0,    0,    7,    0,   70,    9,    0,   10,
   11,   12,    2,  269,    0,   69,    0,    0,    4,    5,
    6,    0,    0,    0,    0,    7,    0,   70,    9,    0,
   10,   11,   12,    2,  277,    0,   69,    0,    0,    4,
    5,    6,    0,    0,    0,    0,    7,    0,   70,    9,
    0,   10,   11,   12,    2,  278,    0,   69,    0,    0,
    4,    5,    6,    0,    0,    0,    0,    7,    0,   70,
    9,    0,   10,   11,   12,    0,  280,    2,    0,    0,
    3,    0,    0,    4,    5,    6,    0,    0,    0,    0,
    7,    0,    8,    9,    0,   10,   11,   12,  285,    0,
    2,    0,    0,    3,    0,    0,    4,    5,    6,    0,
    0,    0,    0,    7,    0,    8,    9,    0,   10,   11,
   12,  308,    0,    0,    2,    0,    0,    3,    0,    0,
    4,    5,    6,    0,    0,    0,    0,    7,    0,    8,
    9,    0,   10,   11,   12,    2,  322,    0,   69,    0,
    0,    4,    5,    6,    0,    0,    0,    0,    7,    0,
   70,    9,    0,   10,   11,   12,    2,  339,    0,   69,
    0,    0,    4,    5,    6,    0,    0,    0,    0,    7,
    0,   70,    9,    0,   10,   11,   12,    2,  353,    0,
   69,    0,    0,    4,    5,    6,    0,    0,    0,    0,
    7,    0,   70,    9,    0,   10,   11,   12,    2,  369,
    0,   69,    0,    0,    4,    5,    6,    0,    0,    0,
    0,    7,    0,   70,    9,    0,   10,   11,   12,    0,
    2,  207,    0,    3,    0,    0,    4,    5,    6,    0,
    0,    0,    0,    7,    0,    8,    9,    0,   10,   11,
   12,    0,  305,    2,    0,    0,   69,    0,    0,    4,
    5,    6,    0,    0,    0,    0,    7,    0,   70,    9,
    0,   10,   11,   12,    0,    0,    0,    0,    2,    0,
    0,   69,    0,    0,    4,    5,    6,    0,    0,    0,
    0,    7,    0,   70,    9,    0,   10,   11,   12,    2,
    0,    0,   69,    0,    0,    4,    5,    6,    0,    0,
    0,    0,    7,    0,   70,    9,    0,   10,   11,   12,
    2,    0,    0,    3,    0,    0,    4,    5,    6,    0,
    0,    0,    0,    7,    0,    8,    9,    0,   10,   11,
   12,    2,    0,    0,    3,    0,    0,    4,    5,    6,
    0,    0,    0,    0,    7,    0,    8,    9,    0,   10,
   11,   12,    0,    2,    0,    0,   69,    0,    0,    4,
    5,    0,    0,    0,    0,    0,    7,    0,   70,    9,
    0,   10,   11,   12,    2,    0,    0,   69,    0,    0,
    4,    5,    0,    0,    0,    0,    0,    7,    0,   70,
    9,    0,   10,   11,   12,    2,    0,    0,    3,    0,
    0,    4,    5,    6,    0,    0,    0,    0,    7,    0,
    8,    9,    0,   10,   11,   12,
};
}
static short yycheck[];
static { yycheck(); }
static void yycheck() {
yycheck = new short[] {                         84,
    0,   40,   33,  138,   44,   43,  153,   45,    8,  125,
   40,  125,  238,   13,   44,   15,   46,   50,  125,   78,
   54,   40,   60,   61,   62,   40,  268,   40,   40,  147,
   40,   61,  228,   33,   15,  316,  257,   44,  156,   70,
   71,   68,  257,    0,   40,   44,   77,   78,   41,  310,
   46,    8,   59,  274,   54,  257,   13,   57,   15,   44,
  275,  276,  277,   60,   61,   61,   40,  293,   40,  204,
   70,   71,   44,  220,   59,  108,   57,  111,   78,  226,
  361,   42,  115,   41,  345,   43,   47,   45,   44,  148,
   40,   48,   92,   41,   91,   45,   44,   54,   44,   45,
   57,   98,   41,  136,  222,   44,  302,  140,  135,  194,
  195,  111,   41,  257,  145,   44,  147,  148,  118,   40,
   40,   41,  153,   44,  385,  156,   41,  262,   41,   44,
  164,   44,  279,  268,  123,   92,  125,  123,  138,  381,
  336,  257,   41,   44,  260,  145,  231,  263,  148,  265,
  264,  184,    0,   44,  111,   40,  272,  264,  258,   44,
    8,  118,   44,   41,  164,   13,   44,   15,  168,  169,
   43,  256,   45,  204,  257,  172,  173,   40,   41,  210,
  180,  214,   43,   44,   45,   40,   41,  261,  262,  220,
   45,  222,   41,  190,  274,  226,  281,  282,   41,  257,
   48,   44,   40,   41,  204,   40,   54,  164,  264,   57,
  210,  168,  169,   41,  261,  262,   44,  257,  257,   41,
  261,  262,   44,  180,  261,  262,  278,  257,  266,  267,
  268,  269,    0,   41,  234,  235,  267,  268,  238,  270,
    8,  274,    0,  262,   92,   13,  381,   15,  279,  262,
    8,  257,  271,  338,  288,   13,  271,   15,  271,  271,
   33,  271,  262,  111,  257,  170,  171,  267,  268,  123,
  118,  125,   44,  358,   41,  306,   41,  234,  235,  310,
   48,  238,  275,  276,  277,  316,   54,   44,  288,   57,
   48,  125,  326,  293,  261,  262,   54,   70,   71,   57,
  175,  176,  299,  257,   44,   78,  306,  257,  258,  340,
  310,  257,  258,  259,  345,   41,  164,   43,   44,   45,
  168,  169,   44,   44,   92,   68,  326,  327,  257,  286,
  361,  288,  180,  257,   92,   40,  293,  257,   44,   44,
   45,   84,   44,  111,  257,  345,  275,  276,  277,  382,
  381,  257,  352,  111,  385,  275,  276,  277,  257,   41,
  118,  125,  275,  276,  277,  138,  261,  262,   44,  326,
  327,   41,  145,   44,   41,  148,  275,  276,  277,  257,
  125,  381,   44,   44,  125,  385,  234,  235,   44,   44,
  238,   44,  135,   41,  125,  352,  164,  275,  276,  277,
   41,  169,  257,  258,   41,  262,  164,   41,  257,   44,
  168,  169,  262,   44,  257,  262,  125,   44,  161,   44,
   44,    0,  180,  257,  125,   44,  275,  276,  277,  257,
  264,  204,  275,  276,  277,  257,   44,  210,  286,   41,
  288,  275,  276,  277,   44,  293,    0,  275,  276,  277,
   44,  194,  195,  275,  276,  277,   44,   44,  262,  125,
  262,   40,   41,   42,   43,   44,   45,  235,   47,   44,
  238,    0,   44,   44,   44,  125,  234,  235,  326,  327,
  238,   60,   61,   62,   44,  228,   40,  262,  231,  262,
  260,  272,   44,  257,  267,  268,  260,  270,   40,  263,
  271,  265,   41,   40,  352,  261,   41,  262,  272,    0,
   44,   40,   44,  256,  123,    0,  257,  123,  286,  260,
  288,    0,  263,  257,  265,  293,  257,  123,  286,  260,
  288,  272,  263,  306,  265,  293,   41,  310,  281,  282,
  123,  272,   41,  316,    0,   41,  125,   41,  257,  262,
  260,  260,  257,  258,  263,  272,  265,   71,  326,  302,
   13,   40,   41,  272,   43,   44,   45,  340,  326,  327,
  262,  125,  345,   48,  169,    4,    0,  340,  133,  128,
   97,   60,   61,   62,   40,  257,   -1,  135,  361,   -1,
   -1,  257,  264,  336,  352,  338,  125,   -1,  264,    0,
   -1,   -1,   -1,  275,  276,  277,   -1,  257,  381,  275,
  276,  277,  385,   -1,  264,  358,   40,   41,   -1,   43,
   44,   45,  123,   -1,    0,  275,  276,  277,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   60,   61,   62,   40,
   41,   -1,   43,   44,   45,   -1,  125,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,    0,   -1,   -1,   -1,   60,
   61,   62,   -1,   -1,   40,   -1,   -1,   -1,   -1,  125,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,  256,  257,   -1,
   -1,  260,  261,  262,  263,  264,  265,  266,  267,  268,
  269,  270,  271,  272,  273,   40,  275,  276,  277,    0,
   -1,  125,  256,  257,   -1,   -1,  260,  261,  262,  263,
  264,  265,   -1,   -1,   -1,   -1,  270,  271,  272,  273,
   -1,  275,  276,  277,  125,    0,   -1,  256,  257,   -1,
   -1,  260,  261,  262,  263,  264,  265,   -1,   -1,   40,
   -1,  270,  271,  272,  273,   -1,  275,  276,  277,  125,
   -1,   -1,   -1,   -1,   -1,   -1,  257,   -1,   -1,  260,
  261,  262,  263,  264,  265,   40,   -1,   -1,   -1,  270,
   -1,  272,  273,    0,  275,  276,  277,  256,  257,   -1,
  125,  260,  261,  262,  263,  264,  265,  266,  267,  268,
  269,  270,  271,  272,  273,   -1,  275,  276,  277,   -1,
  256,  257,  125,   -1,  260,  261,  262,  263,  264,  265,
   -1,   -1,   -1,   40,  270,  271,  272,  273,    0,  275,
  276,  277,   -1,   -1,  125,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,  256,  257,   -1,   -1,  260,  261,  262,  263,
  264,  265,  266,  267,  268,  269,  270,  271,  272,  273,
  125,  275,  276,  277,   -1,  256,  257,   -1,   40,  260,
  261,  262,  263,  264,  265,  266,  267,  268,  269,  270,
  271,  272,  273,   -1,  275,  276,  277,   -1,   -1,   -1,
  256,  257,    0,   40,  260,  261,  262,  263,  264,  265,
   -1,   -1,   -1,   -1,  270,  271,  272,  273,  125,  275,
  276,  277,   -1,   -1,   -1,   -1,    0,   -1,   -1,   -1,
   -1,  256,  257,   -1,   -1,  260,  261,  262,  263,  264,
  265,  125,   40,   -1,   -1,  270,  271,  272,  273,   -1,
  275,  276,  277,    0,  257,   -1,   -1,  260,  261,  262,
  263,  264,  265,  125,   -1,   -1,   40,  270,   -1,  272,
  273,   -1,  275,  276,  277,  256,  257,   -1,   -1,  260,
  261,  262,  263,  264,  265,   -1,   -1,   -1,  125,  270,
  271,  272,  273,   40,  275,  276,  277,    0,   -1,   -1,
   -1,  256,  257,   -1,   -1,  260,  261,  262,  263,  264,
  265,   -1,   -1,   -1,   -1,  270,  271,  272,  273,   -1,
  275,  276,  277,   40,   41,   -1,   -1,  125,   45,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   40,   -1,   -1,
   -1,   -1,   -1,   60,   -1,   62,   -1,   -1,   -1,  256,
  257,  125,   -1,  260,  261,  262,  263,  264,  265,   40,
   -1,   -1,   -1,  270,  271,  272,  273,   -1,  275,  276,
  277,   -1,   -1,  257,   -1,   -1,  260,   -1,  125,  263,
   -1,  265,   -1,   -1,   -1,   40,   -1,   -1,  272,   44,
   -1,   -1,   -1,   -1,  256,  257,   -1,   -1,  260,  261,
  262,  263,  264,  265,   -1,   -1,   -1,   -1,  270,  271,
  272,  273,   40,  275,  276,  277,   44,   -1,   -1,   -1,
  257,   -1,  125,  260,  261,  262,  263,  264,  265,   -1,
   -1,   -1,   -1,  270,  271,  272,  273,   40,  275,  276,
  277,   -1,   -1,   -1,  125,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,  256,  257,
   40,   -1,  260,  261,  262,  263,  264,  265,  123,   -1,
   -1,   -1,  270,  271,  272,  273,   -1,  275,  276,  277,
   -1,   -1,  256,  257,   -1,   -1,  260,  261,  262,  263,
  264,  265,   -1,   -1,   -1,  123,  270,  271,  272,  273,
   -1,  275,  276,  277,   -1,   -1,   -1,   -1,   -1,  256,
  257,   -1,   -1,  260,  261,  262,  263,  264,  265,   -1,
   -1,   -1,  125,  270,  271,  272,  273,   -1,  275,  276,
  277,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
  257,  258,   -1,   40,   41,  125,   -1,   -1,   45,  266,
  267,  268,  269,  256,  257,   -1,   -1,  260,  261,  262,
  263,  264,  265,   60,   -1,   62,   40,  270,  271,  272,
  273,   45,  275,  276,  277,   -1,  257,   -1,   -1,  260,
  261,  262,  263,  264,  265,   -1,   60,   -1,   62,  270,
  271,  272,  273,  123,  275,  276,  277,   -1,   -1,   -1,
   -1,   -1,  257,   -1,   -1,  260,   40,   41,  263,  264,
  265,   45,   -1,   -1,   -1,  270,  271,  272,  273,   -1,
  275,  276,  277,   -1,   -1,   -1,   60,   -1,   62,  257,
   -1,   -1,  260,   40,   41,  263,  264,  265,   45,   -1,
   -1,   -1,  270,  271,  272,  273,   -1,  275,  276,  277,
   -1,   -1,   -1,   60,  257,   62,   -1,  260,   -1,  262,
  263,  264,  265,  123,   -1,   -1,   -1,  270,  271,  272,
  273,   -1,  275,  276,  277,   -1,   -1,  257,   -1,   -1,
  260,   -1,  262,  263,  264,  265,   -1,   -1,   -1,   -1,
  270,  271,  272,  273,   -1,  275,  276,  277,   40,   41,
   -1,   -1,   -1,   45,   40,   41,   -1,   -1,   -1,   45,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   60,   -1,
   62,   -1,   -1,   -1,   60,   -1,   62,  257,   -1,   -1,
  260,  261,  262,  263,  264,  265,  123,   -1,  125,   -1,
  270,   -1,  272,  273,   -1,  275,  276,  277,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,  123,   -1,   -1,
  257,  258,   -1,   -1,   -1,   -1,   -1,   -1,   -1,  266,
  267,  268,  269,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,  257,  258,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,  266,  267,  268,  269,  256,  257,   -1,   -1,
  260,  123,   -1,  263,  264,  265,   -1,   -1,   -1,   -1,
  270,   -1,  272,  273,   -1,  275,  276,  277,   -1,   -1,
   -1,   -1,  123,  257,  258,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,  266,  267,  268,  269,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,  123,   -1,   -1,   -1,   -1,   -1,   -1,
  257,  258,   -1,   -1,   -1,   -1,   -1,   -1,   -1,  266,
  267,  268,  269,   -1,  123,   -1,   -1,   -1,   -1,   -1,
  257,   -1,   -1,  260,   -1,   -1,  263,  264,  265,   -1,
   -1,   -1,   -1,  270,   -1,  272,  273,  123,  275,  276,
  277,  257,   -1,   -1,  260,   -1,  262,  263,  264,  265,
   -1,   -1,   -1,   -1,  270,   -1,  272,  273,   -1,  275,
  276,  277,  125,   -1,   -1,  257,  258,   -1,   -1,   -1,
   -1,  257,  258,   -1,  266,  267,  268,  269,   -1,   -1,
  266,  267,  268,  269,  125,  257,   -1,   -1,  260,   -1,
  262,  263,  264,  265,   -1,   -1,   -1,   -1,  270,   -1,
  272,  273,   -1,  275,  276,  277,  257,  125,   -1,  260,
   -1,   -1,  263,  264,  265,   -1,   -1,   -1,   -1,  270,
   -1,  272,  273,   -1,  275,  276,  277,  257,   -1,  125,
  260,   -1,   -1,  263,  264,  265,   -1,   -1,   -1,   -1,
  270,   -1,  272,  273,   -1,  275,  276,  277,  257,   -1,
   -1,  260,  125,   -1,  263,  264,  265,   -1,   -1,   -1,
   -1,  270,   -1,  272,  273,   -1,  275,  276,  277,   -1,
   -1,  257,   -1,   -1,  260,  125,   -1,  263,  264,  265,
   -1,   -1,   -1,   -1,  270,   -1,  272,  273,   -1,  275,
  276,  277,   -1,   -1,  257,   -1,  125,  260,  261,  262,
  263,  264,  265,   -1,   -1,   -1,   -1,  270,   -1,  272,
  273,   -1,  275,  276,  277,   -1,  257,  125,   -1,  260,
  261,  262,  263,  264,  265,   -1,   -1,   -1,   -1,  270,
   -1,  272,  273,   -1,  275,  276,  277,   -1,  125,  257,
   -1,   -1,  260,  261,  262,  263,  264,  265,   -1,   -1,
   -1,   -1,  270,   -1,  272,  273,   -1,  275,  276,  277,
  256,  257,  125,   -1,  260,   -1,   -1,  263,  264,  265,
   -1,   -1,   -1,   -1,  270,   -1,  272,  273,   -1,  275,
  276,  277,   -1,  256,  257,  125,   -1,  260,   -1,   -1,
  263,  264,  265,   -1,   -1,   -1,   -1,  270,   -1,  272,
  273,   -1,  275,  276,  277,   -1,  256,  257,  125,   -1,
  260,   -1,   -1,  263,  264,  265,   -1,   -1,   -1,   -1,
  270,   -1,  272,  273,   -1,  275,  276,  277,  257,  125,
   -1,  260,   -1,   -1,  263,  264,  265,   -1,   -1,   -1,
   -1,  270,   -1,  272,  273,   -1,  275,  276,  277,  257,
  125,   -1,  260,   -1,   -1,  263,  264,  265,   -1,   -1,
   -1,   -1,  270,   -1,  272,  273,   -1,  275,  276,  277,
  257,  125,   -1,  260,   -1,   -1,  263,  264,  265,   -1,
   -1,   -1,   -1,  270,   -1,  272,  273,   -1,  275,  276,
  277,   -1,  125,   -1,  257,   -1,   -1,  260,   -1,   -1,
  263,  264,  265,   -1,   -1,   -1,   -1,  270,   -1,  272,
  273,   -1,  275,  276,  277,  125,   -1,  257,   -1,   -1,
  260,   -1,   -1,  263,  264,  265,   -1,   -1,   -1,   -1,
  270,   -1,  272,  273,   -1,  275,  276,  277,  125,   -1,
  257,   -1,   -1,  260,   -1,   -1,  263,  264,  265,   -1,
   -1,   -1,   -1,  270,   -1,  272,  273,   -1,  275,  276,
  277,  257,  125,   -1,  260,   -1,   -1,  263,  264,  265,
   -1,   -1,   -1,   -1,  270,   -1,  272,  273,   -1,  275,
  276,  277,  257,  125,   -1,  260,   -1,   -1,  263,  264,
  265,   -1,   -1,   -1,   -1,  270,   -1,  272,  273,   -1,
  275,  276,  277,  257,  125,   -1,  260,   -1,   -1,  263,
  264,  265,   -1,   -1,   -1,   -1,  270,   -1,  272,  273,
   -1,  275,  276,  277,  257,  125,   -1,  260,   -1,   -1,
  263,  264,  265,   -1,   -1,   -1,   -1,  270,   -1,  272,
  273,   -1,  275,  276,  277,   -1,  125,  257,   -1,   -1,
  260,   -1,   -1,  263,  264,  265,   -1,   -1,   -1,   -1,
  270,   -1,  272,  273,   -1,  275,  276,  277,  125,   -1,
  257,   -1,   -1,  260,   -1,   -1,  263,  264,  265,   -1,
   -1,   -1,   -1,  270,   -1,  272,  273,   -1,  275,  276,
  277,  125,   -1,   -1,  257,   -1,   -1,  260,   -1,   -1,
  263,  264,  265,   -1,   -1,   -1,   -1,  270,   -1,  272,
  273,   -1,  275,  276,  277,  257,  125,   -1,  260,   -1,
   -1,  263,  264,  265,   -1,   -1,   -1,   -1,  270,   -1,
  272,  273,   -1,  275,  276,  277,  257,  125,   -1,  260,
   -1,   -1,  263,  264,  265,   -1,   -1,   -1,   -1,  270,
   -1,  272,  273,   -1,  275,  276,  277,  257,  125,   -1,
  260,   -1,   -1,  263,  264,  265,   -1,   -1,   -1,   -1,
  270,   -1,  272,  273,   -1,  275,  276,  277,  257,  125,
   -1,  260,   -1,   -1,  263,  264,  265,   -1,   -1,   -1,
   -1,  270,   -1,  272,  273,   -1,  275,  276,  277,   -1,
  257,  125,   -1,  260,   -1,   -1,  263,  264,  265,   -1,
   -1,   -1,   -1,  270,   -1,  272,  273,   -1,  275,  276,
  277,   -1,  125,  257,   -1,   -1,  260,   -1,   -1,  263,
  264,  265,   -1,   -1,   -1,   -1,  270,   -1,  272,  273,
   -1,  275,  276,  277,   -1,   -1,   -1,   -1,  257,   -1,
   -1,  260,   -1,   -1,  263,  264,  265,   -1,   -1,   -1,
   -1,  270,   -1,  272,  273,   -1,  275,  276,  277,  257,
   -1,   -1,  260,   -1,   -1,  263,  264,  265,   -1,   -1,
   -1,   -1,  270,   -1,  272,  273,   -1,  275,  276,  277,
  257,   -1,   -1,  260,   -1,   -1,  263,  264,  265,   -1,
   -1,   -1,   -1,  270,   -1,  272,  273,   -1,  275,  276,
  277,  257,   -1,   -1,  260,   -1,   -1,  263,  264,  265,
   -1,   -1,   -1,   -1,  270,   -1,  272,  273,   -1,  275,
  276,  277,   -1,  257,   -1,   -1,  260,   -1,   -1,  263,
  264,   -1,   -1,   -1,   -1,   -1,  270,   -1,  272,  273,
   -1,  275,  276,  277,  257,   -1,   -1,  260,   -1,   -1,
  263,  264,   -1,   -1,   -1,   -1,   -1,  270,   -1,  272,
  273,   -1,  275,  276,  277,  257,   -1,   -1,  260,   -1,
   -1,  263,  264,  265,   -1,   -1,   -1,   -1,  270,   -1,
  272,  273,   -1,  275,  276,  277,
};
}
final static short YYFINAL=14;
final static short YYMAXTOKEN=278;
final static String yyname[] = {
"end-of-file",null,null,null,null,null,null,null,null,null,null,null,null,null,
null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,
null,null,null,null,null,null,null,null,null,null,"'('","')'","'*'","'+'","','",
"'-'","'.'","'/'",null,null,null,null,null,null,null,null,null,null,null,"';'",
"'<'","'='","'>'",null,null,null,null,null,null,null,null,null,null,null,null,
null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,
null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,
null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,
"'{'",null,"'}'",null,null,null,null,null,null,null,null,null,null,null,null,
null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,
null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,
null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,
null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,
null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,
null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,
null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,
null,null,null,null,null,null,null,"ID","CTE","CADENA","IF","ELSE","ENDIF",
"PRINT","VOID","RETURN","COMP_MAYOR_IGUAL","COMP_MENOR_IGUAL","COMP_IGUAL",
"COMP_DISTINTO","CLASS","WHILE","DO","INTERFACE","IMPLEMENT","INT","ULONG",
"FLOAT","OPERADOR_MENOS",
};
final static String yyrule[] = {
"$accept : programa",
"programa : '{' sentencias '}'",
"programa : sentencias '}'",
"programa : '{' sentencias",
"programa : '{' '}'",
"programa :",
"sentencias : sentencia",
"sentencias : sentencias sentencia",
"sentencia : sentencia_declarativa",
"sentencia : sentencia_ejecutable",
"sentencia : error ','",
"sentencia_ejecutable : sentencia_asignacion",
"sentencia_ejecutable : sentencia_invocacion_funcion",
"sentencia_ejecutable : sentencia_imprimir",
"sentencia_ejecutable : sentencia_seleccion",
"sentencia_ejecutable : sentencia_iterativa_do_while",
"sentencia_ejecutable : sentencia_return",
"sentencias_funcion : sentencia_funcion",
"sentencias_funcion : sentencias_funcion sentencia_funcion",
"sentencia_funcion : sentencia_declarativa",
"sentencia_funcion : sentencia_ejecutable_funcion",
"sentencia_ejecutable_funcion : sentencia_asignacion",
"sentencia_ejecutable_funcion : sentencia_invocacion_funcion",
"sentencia_ejecutable_funcion : sentencia_imprimir",
"sentencia_ejecutable_funcion : sentencia_seleccion_funcion",
"sentencia_ejecutable_funcion : sentencia_iterativa_do_while_funcion",
"sentencia_return : RETURN ','",
"sentencia_return : RETURN",
"sentencia_iterativa_do_while : DO bloque_sentencias_ejecutables_while WHILE '(' condicion ')' ','",
"sentencia_iterativa_do_while : DO bloque_sentencias_ejecutables_while WHILE '(' condicion ')'",
"sentencia_iterativa_do_while : DO WHILE '(' condicion ')' ','",
"sentencia_iterativa_do_while : DO bloque_sentencias_ejecutables_while WHILE '(' ')' ','",
"sentencia_iterativa_do_while : DO bloque_sentencias_ejecutables_while '(' condicion ')' ','",
"sentencia_iterativa_do_while : DO WHILE ','",
"sentencia_iterativa_do_while : DO bloque_sentencias_ejecutables_while WHILE ','",
"sentencia_iterativa_do_while : DO ','",
"sentencia_iterativa_do_while : DO '(' condicion ')' ','",
"sentencia_iterativa_do_while : DO '(' ')' ','",
"sentencia_iterativa_do_while : DO '(' ')'",
"sentencia_iterativa_do_while_funcion : DO bloque_sentencias_ejecutables_funcion WHILE '(' condicion ')' ','",
"$$1 :",
"sentencia_iterativa_do_while_funcion : DO bloque_sentencias_ejecutables_funcion WHILE '(' condicion ')' $$1 DO WHILE '(' condicion ')' ','",
"sentencia_iterativa_do_while_funcion : DO bloque_sentencias_ejecutables_funcion WHILE '(' ')' ','",
"sentencia_iterativa_do_while_funcion : DO bloque_sentencias_ejecutables_funcion '(' condicion ')' ','",
"sentencia_iterativa_do_while_funcion : DO WHILE ','",
"sentencia_iterativa_do_while_funcion : DO bloque_sentencias_ejecutables_funcion WHILE ','",
"sentencia_iterativa_do_while_funcion : DO ','",
"sentencia_iterativa_do_while_funcion : DO '(' condicion ')' ','",
"sentencia_iterativa_do_while_funcion : DO '(' ')' ','",
"sentencia_iterativa_do_while_funcion : DO '(' ')'",
"sentencia_seleccion : IF '(' condicion ')' bloque_sentencias_ejecutables_then ELSE bloque_sentencias_ejecutables ENDIF ','",
"sentencia_seleccion : IF '(' condicion ')' bloque_sentencias_ejecutables_then ENDIF ','",
"sentencia_seleccion : IF '(' condicion ')' bloque_sentencias_ejecutables_then ELSE bloque_sentencias_ejecutables ENDIF",
"sentencia_seleccion : IF '(' condicion ')' bloque_sentencias_ejecutables_then ENDIF",
"sentencia_seleccion : IF '(' ')' bloque_sentencias_ejecutables_then ELSE bloque_sentencias_ejecutables ENDIF ','",
"sentencia_seleccion : IF '(' ')' bloque_sentencias_ejecutables_then ENDIF ','",
"sentencia_seleccion : IF '(' condicion ')' ELSE bloque_sentencias_ejecutables ENDIF ','",
"sentencia_seleccion : IF '(' condicion ')' bloque_sentencias_ejecutables_then ELSE ENDIF ','",
"sentencia_seleccion : IF '(' condicion ')' ENDIF ','",
"sentencia_seleccion_funcion : IF '(' condicion ')' bloque_sentencias_ejecutables_then_funcion ELSE bloque_sentencias_ejecutables_funcion ENDIF ','",
"sentencia_seleccion_funcion : IF '(' condicion ')' bloque_sentencias_ejecutables_then_funcion ENDIF ','",
"sentencia_seleccion_funcion : IF '(' condicion ')' bloque_sentencias_ejecutables_then_funcion ELSE bloque_sentencias_ejecutables_funcion ENDIF",
"$$2 :",
"sentencia_seleccion_funcion : IF '(' condicion ')' bloque_sentencias_ejecutables_then_funcion ENDIF $$2 IF '(' ')' bloque_sentencias_ejecutables_then_funcion ELSE bloque_sentencias_ejecutables_funcion ENDIF ','",
"sentencia_seleccion_funcion : IF '(' ')' bloque_sentencias_ejecutables_then_funcion ENDIF ','",
"sentencia_seleccion_funcion : IF '(' condicion ')' ELSE bloque_sentencias_ejecutables_funcion ENDIF ','",
"sentencia_seleccion_funcion : IF '(' condicion ')' bloque_sentencias_ejecutables_then_funcion ELSE ENDIF ','",
"sentencia_seleccion_funcion : IF '(' condicion ')' ENDIF ','",
"bloque_sentencias_ejecutables_then : sentencia_ejecutable",
"bloque_sentencias_ejecutables_then : '{' sentencias_ejecutables '}'",
"bloque_sentencias_ejecutables_then : '{' sentencias_ejecutables",
"bloque_sentencias_ejecutables_then : sentencias_ejecutables '}'",
"bloque_sentencias_ejecutables_then : '{' '}'",
"bloque_sentencias_ejecutables_then : sentencia_declarativa",
"bloque_sentencias_ejecutables_while : '{' primer_sentencia '}'",
"bloque_sentencias_ejecutables_while : '{' primer_sentencia sentencias_ejecutables '}'",
"bloque_sentencias_ejecutables_while : '{' primer_sentencia sentencias_ejecutables",
"bloque_sentencias_ejecutables_while : primer_sentencia sentencias_ejecutables '}'",
"bloque_sentencias_ejecutables_while : '{' '}'",
"bloque_sentencias_ejecutables_while : sentencia_declarativa",
"primer_sentencia : sentencia_ejecutable",
"bloque_sentencias_ejecutables : sentencia_ejecutable",
"bloque_sentencias_ejecutables : '{' sentencia_ejecutable sentencias_ejecutables '}'",
"bloque_sentencias_ejecutables : '{' sentencia_ejecutable sentencias_ejecutables",
"bloque_sentencias_ejecutables : sentencia_ejecutable sentencias_ejecutables '}'",
"bloque_sentencias_ejecutables : '{' '}'",
"bloque_sentencias_ejecutables : sentencia_declarativa",
"bloque_sentencias_ejecutables_then_funcion : sentencia_ejecutable_funcion",
"bloque_sentencias_ejecutables_then_funcion : sentencia_return",
"bloque_sentencias_ejecutables_then_funcion : sentencia_declarativa",
"bloque_sentencias_ejecutables_then_funcion : '{' sentencias_ejecutables_funcion '}'",
"bloque_sentencias_ejecutables_then_funcion : '{' sentencias_ejecutables_funcion sentencia_return '}'",
"bloque_sentencias_ejecutables_then_funcion : '{' sentencias_ejecutables_funcion sentencia_return sentencias_ejecutables_funcion_inalcanzable '}'",
"bloque_sentencias_ejecutables_then_funcion : sentencias_ejecutables_funcion '}'",
"bloque_sentencias_ejecutables_then_funcion : sentencias_ejecutables_funcion sentencia_return '}'",
"bloque_sentencias_ejecutables_then_funcion : '{' sentencias_ejecutables_funcion",
"bloque_sentencias_ejecutables_then_funcion : '{' sentencias_ejecutables_funcion sentencia_return",
"bloque_sentencias_ejecutables_then_funcion : '{' '}'",
"bloque_sentencias_ejecutables_funcion : sentencia_ejecutable_funcion",
"bloque_sentencias_ejecutables_funcion : sentencia_return",
"bloque_sentencias_ejecutables_funcion : sentencia_declarativa",
"bloque_sentencias_ejecutables_funcion : '{' sentencias_ejecutables_funcion '}'",
"bloque_sentencias_ejecutables_funcion : '{' sentencias_ejecutables_funcion sentencia_return '}'",
"bloque_sentencias_ejecutables_funcion : '{' sentencias_ejecutables_funcion sentencia_return sentencias_ejecutables_funcion_inalcanzable '}'",
"bloque_sentencias_ejecutables_funcion : sentencias_ejecutables_funcion '}'",
"bloque_sentencias_ejecutables_funcion : sentencias_ejecutables_funcion sentencia_return '}'",
"bloque_sentencias_ejecutables_funcion : '{' sentencias_ejecutables_funcion",
"bloque_sentencias_ejecutables_funcion : '{' sentencias_ejecutables_funcion sentencia_return",
"bloque_sentencias_ejecutables_funcion : '{' '}'",
"sentencias_ejecutables_funcion_inalcanzable : sentencia_ejecutable_funcion_inalcanzable",
"sentencias_ejecutables_funcion_inalcanzable : sentencias_ejecutables_funcion_inalcanzable sentencia_ejecutable_funcion_inalcanzable",
"sentencia_ejecutable_funcion_inalcanzable : sentencia_return",
"sentencia_ejecutable_funcion_inalcanzable : sentencia_ejecutable_funcion",
"sentencias_ejecutables : sentencia_ejecutable",
"sentencias_ejecutables : sentencias_ejecutables sentencia_ejecutable",
"sentencias_ejecutables : sentencia_declarativa",
"sentencias_ejecutables : sentencias_ejecutables sentencia_declarativa",
"sentencias_ejecutables_funcion : sentencia_ejecutable_funcion",
"sentencias_ejecutables_funcion : sentencias_ejecutables_funcion sentencia_ejecutable_funcion",
"sentencias_ejecutables_funcion : sentencia_declarativa",
"sentencias_ejecutables_funcion : sentencias_ejecutables_funcion sentencia_declarativa",
"sentencia_imprimir : PRINT CADENA ','",
"sentencia_imprimir : PRINT CADENA",
"sentencia_imprimir : PRINT ','",
"sentencia_imprimir : PRINT ID ','",
"sentencia_imprimir : PRINT ID",
"sentencia_imprimir : PRINT constante ','",
"sentencia_imprimir : PRINT constante",
"sentencia_invocacion_funcion : sentencia_objeto_identificador '(' expresion ')' ','",
"sentencia_invocacion_funcion : sentencia_objeto_identificador '(' ')' ','",
"sentencia_invocacion_funcion : sentencia_objeto_identificador '(' expresion ',' lista_expresiones_invocacion_funcion_exceso ')' ','",
"sentencia_invocacion_funcion : sentencia_objeto_identificador '(' expresion ')'",
"sentencia_invocacion_funcion : sentencia_objeto_identificador '(' ')'",
"sentencia_invocacion_funcion : sentencia_objeto_identificador '(' expresion ',' lista_expresiones_invocacion_funcion_exceso ')'",
"lista_expresiones_invocacion_funcion_exceso : expresion",
"lista_expresiones_invocacion_funcion_exceso : lista_expresiones_invocacion_funcion_exceso ',' expresion",
"sentencia_asignacion : sentencia_objeto_identificador '=' expresion ','",
"sentencia_asignacion : sentencia_objeto_identificador '=' expresion",
"sentencia_asignacion : sentencia_objeto_identificador '=' ','",
"sentencia_objeto_identificador : ID",
"sentencia_objeto_identificador : sentencia_objeto_identificador '.' ID",
"sentencia_declarativa : declaracion_variable",
"sentencia_declarativa : declaracion_funcion",
"sentencia_declarativa : declaracion_clase",
"sentencia_declarativa : declaracion_interfaz",
"declaracion_variable : tipo lista_de_variables ','",
"declaracion_variable : tipo lista_de_variables",
"declaracion_variable : tipo ','",
"declaracion_interfaz_encabezado : INTERFACE ID",
"declaracion_interfaz_encabezado : INTERFACE",
"declaracion_interfaz : declaracion_interfaz_encabezado '{' bloque_encabezado_funcion_declaracion_interfaz '}'",
"declaracion_interfaz : declaracion_interfaz_encabezado '}'",
"bloque_encabezado_funcion_declaracion_interfaz : encabezado_funcion_declaracion_interfaz",
"bloque_encabezado_funcion_declaracion_interfaz : bloque_encabezado_funcion_declaracion_interfaz encabezado_funcion_declaracion_interfaz",
"encabezado_funcion_declaracion_interfaz : encabezado_funcion_interfaz ','",
"encabezado_funcion_declaracion_interfaz : encabezado_funcion_interfaz",
"sentencia_declarativa_clase : tipo lista_de_variables ','",
"sentencia_declarativa_clase : tipo lista_de_variables",
"sentencia_declarativa_clase : declaracion_funcion",
"sentencia_declarativa_clase : declaracion_funcion ','",
"sentencia_declarativa_clase : ID ','",
"declaracion_clase : declaracion_clase_encabezado '{' bloque_sentencias_declarativas_clase '}'",
"declaracion_clase_encabezado : CLASS ID",
"declaracion_clase_encabezado : CLASS ID IMPLEMENT ID",
"declaracion_clase_encabezado : CLASS",
"declaracion_clase_encabezado : CLASS IMPLEMENT ID",
"declaracion_clase_encabezado : CLASS ID IMPLEMENT",
"declaracion_clase_encabezado : CLASS IMPLEMENT",
"bloque_sentencias_declarativas_clase : sentencia_declarativa_clase",
"bloque_sentencias_declarativas_clase : bloque_sentencias_declarativas_clase sentencia_declarativa_clase",
"declaracion_funcion : encabezado_funcion cuerpo_funcion",
"encabezado_funcion : encabezado_funcion_nombre '(' parametro_funcion ')'",
"encabezado_funcion : encabezado_funcion_nombre '(' ')'",
"encabezado_funcion : encabezado_funcion_nombre '(' parametro_funcion ',' lista_parametros_funcion_exceso ')'",
"encabezado_funcion : encabezado_funcion_nombre '(' parametro_funcion lista_parametros_funcion_exceso ')'",
"encabezado_funcion : encabezado_funcion_nombre ')'",
"encabezado_funcion_nombre : VOID ID",
"encabezado_funcion_nombre : VOID",
"encabezado_funcion_interfaz : VOID ID '(' parametro_funcion ')'",
"encabezado_funcion_interfaz : VOID ID '(' ')'",
"encabezado_funcion_interfaz : VOID ID '(' parametro_funcion ',' lista_parametros_funcion_exceso ')'",
"encabezado_funcion_interfaz : VOID ID '(' parametro_funcion lista_parametros_funcion_exceso ')'",
"encabezado_funcion_interfaz : VOID '(' parametro_funcion ')'",
"encabezado_funcion_interfaz : VOID '(' ')'",
"encabezado_funcion_interfaz : VOID ID parametro_funcion ')'",
"encabezado_funcion_interfaz : VOID ID ')'",
"cuerpo_funcion : '{' sentencias_funcion sentencia_return '}'",
"cuerpo_funcion : '{' sentencia_return '}'",
"cuerpo_funcion : '{' sentencias_funcion sentencia_return sentencias_funcion_inalcanzable '}'",
"cuerpo_funcion : '{' sentencia_return sentencias_funcion_inalcanzable '}'",
"cuerpo_funcion : '{' sentencias_funcion '}'",
"cuerpo_funcion : '{' '}'",
"cuerpo_funcion : sentencias_funcion sentencia_return '}'",
"cuerpo_funcion : sentencia_return '}'",
"cuerpo_funcion : sentencias_funcion sentencia_return sentencias_funcion_inalcanzable '}'",
"cuerpo_funcion : sentencia_return sentencias_funcion_inalcanzable '}'",
"cuerpo_funcion : sentencias_funcion '}'",
"cuerpo_funcion : '}'",
"sentencias_funcion_inalcanzable : sentencia_funcion_inalcanzable",
"sentencias_funcion_inalcanzable : sentencias_funcion_inalcanzable sentencia_funcion_inalcanzable",
"sentencia_funcion_inalcanzable : sentencia_declarativa",
"sentencia_funcion_inalcanzable : sentencia_return",
"sentencia_funcion_inalcanzable : sentencia_ejecutable_funcion",
"lista_parametros_funcion_exceso : parametro_funcion",
"lista_parametros_funcion_exceso : lista_parametros_funcion_exceso ',' parametro_funcion",
"lista_parametros_funcion_exceso : lista_parametros_funcion_exceso parametro_funcion",
"parametro_funcion : tipo ID",
"lista_de_variables : ID",
"lista_de_variables : lista_de_variables ';' ID",
"tipo : INT",
"tipo : ULONG",
"tipo : FLOAT",
"tipo : ID",
"condicion : expresion comparador expresion",
"condicion : expresion comparador",
"condicion : comparador expresion",
"condicion : expresion '=' expresion",
"comparador : COMP_MAYOR_IGUAL",
"comparador : COMP_MENOR_IGUAL",
"comparador : COMP_IGUAL",
"comparador : COMP_DISTINTO",
"comparador : '>'",
"comparador : '<'",
"expresion : expresion '+' termino",
"expresion : expresion '-' termino",
"expresion : termino",
"termino : termino '*' factor",
"termino : termino '/' factor",
"termino : factor",
"factor : ID",
"factor : ID OPERADOR_MENOS",
"factor : constante",
"factor : '(' expresion ')'",
"constante : CTE",
"constante : '-' CTE",
};

//#line 733 "gramatica.y"

public static AnalizadorLexico lexico = null;
public static GeneracionCodigoIntermedio genCodigoIntermedio = GeneracionCodigoIntermedio.getInstance();
public static Logger logger = Logger.getInstance();
public static TablaDeSimbolos TS = TablaDeSimbolos.getInstance();
public static Polaca polaca = Polaca.getInstance();
public static Parser parser = null;
public static int MAX_INT_VALUE = (int) (Math.pow(2, 15) - 1);

/** Chequea, para los INT, que el valor positivo no supere el valor maximo */
public void corregirConstantePositivaEntera(String constante) {
	if (constante.contains("_i")) {
		//se recibio un INT con signo positivo
		boolean exceptionOutOfRange = false;
		int cte = 0;
		String constanteValue = constante.toString().split("_")[0];

		try {
			cte = Integer.parseInt(constanteValue);
		} catch (NumberFormatException e) {
			exceptionOutOfRange = true;
		}

		if (cte > MAX_INT_VALUE || exceptionOutOfRange) {
			logger.logWarning("[Parser] Rango invalido para la constante: " + constante + ", se trunca al valor " + MAX_INT_VALUE + "_i");

			TS.swapLexemas(constante, MAX_INT_VALUE + "_i");
		}
	}
}

public void constanteConSigno(String constante) {
	/** Check de float negativos */
	if (constante.contains(".")) {
		String negConstante = "-"+constante;
		TS.swapLexemas(constante, negConstante);
	} else {

		if (constante.contains("_ul")) {
			//se recibio un ULONG con signo negativo
			logger.logWarning("[Parser] No se admiten ULONG con valores negativos: " + "-"+constante + ", se trunca a 0_ul");
		
			TS.swapLexemas(constante, "0_ul");
		} else {
			// se recibio un INT negativo
			String negConstante = "-"+constante;
			TS.swapLexemas(constante, negConstante);
		}
	}
}	

public int yylex() {
	return lexico.yylex(parser);
}

public void yyerror(String error) {
	logger.logError(error);
}

public static void main(String[] args) {
	if (args.length == 0) {
		System.err.println("No se especifico ningun archivo de codigo");
	} else {
		String archivo_a_leer = args[0];
		System.out.println("Se va a leer archivo " + archivo_a_leer);
		
		FileReaderHelper fileHelper = new FileReaderHelper();
		
		boolean fileOpenSuccess = fileHelper.open(archivo_a_leer);
		
		if (fileOpenSuccess) {
			parser = new Parser();
			lexico = new AnalizadorLexico(fileHelper);
			
	        parser.run();
	
			String path = new File(archivo_a_leer).getAbsolutePath();
	        
	        Output out = new Output(path);
	        
	        out.saveFile("codigo-lexico.txt", logger.getLexico());
			out.saveFile("codigo-sintactico.txt", logger.getSintactico());
			out.saveFile("tabla-de-simbolos.txt", TS.print());

			polaca.showPolaca();
		}
	}
}
//#line 1152 "Parser.java"
//###############################################################
// method: yylexdebug : check lexer state
//###############################################################
void yylexdebug(int state,int ch)
{
String s=null;
  if (ch < 0) ch=0;
  if (ch <= YYMAXTOKEN) //check index bounds
     s = yyname[ch];    //now get it
  if (s==null)
    s = "illegal-symbol";
  debug("state "+state+", reading "+ch+" ("+s+")");
}





//The following are now global, to aid in error reporting
int yyn;       //next next thing to do
int yym;       //
int yystate;   //current parsing state from state table
String yys;    //current token string


//###############################################################
// method: yyparse : parse input and execute indicated items
//###############################################################
int yyparse()
{
boolean doaction;
  init_stacks();
  yynerrs = 0;
  yyerrflag = 0;
  yychar = -1;          //impossible char forces a read
  yystate=0;            //initial state
  state_push(yystate);  //save it
  val_push(yylval);     //save empty value
  while (true) //until parsing is done, either correctly, or w/error
    {
    doaction=true;
    if (yydebug) debug("loop"); 
    //#### NEXT ACTION (from reduction table)
    for (yyn=yydefred[yystate];yyn==0;yyn=yydefred[yystate])
      {
      if (yydebug) debug("yyn:"+yyn+"  state:"+yystate+"  yychar:"+yychar);
      if (yychar < 0)      //we want a char?
        {
        yychar = yylex();  //get next token
        if (yydebug) debug(" next yychar:"+yychar);
        //#### ERROR CHECK ####
        if (yychar < 0)    //it it didn't work/error
          {
          yychar = 0;      //change it to default string (no -1!)
          if (yydebug)
            yylexdebug(yystate,yychar);
          }
        }//yychar<0
      yyn = yysindex[yystate];  //get amount to shift by (shift index)
      if ((yyn != 0) && (yyn += yychar) >= 0 &&
          yyn <= YYTABLESIZE && yycheck[yyn] == yychar)
        {
        if (yydebug)
          debug("state "+yystate+", shifting to state "+yytable[yyn]);
        //#### NEXT STATE ####
        yystate = yytable[yyn];//we are in a new state
        state_push(yystate);   //save it
        val_push(yylval);      //push our lval as the input for next rule
        yychar = -1;           //since we have 'eaten' a token, say we need another
        if (yyerrflag > 0)     //have we recovered an error?
           --yyerrflag;        //give ourselves credit
        doaction=false;        //but don't process yet
        break;   //quit the yyn=0 loop
        }

    yyn = yyrindex[yystate];  //reduce
    if ((yyn !=0 ) && (yyn += yychar) >= 0 &&
            yyn <= YYTABLESIZE && yycheck[yyn] == yychar)
      {   //we reduced!
      if (yydebug) debug("reduce");
      yyn = yytable[yyn];
      doaction=true; //get ready to execute
      break;         //drop down to actions
      }
    else //ERROR RECOVERY
      {
      if (yyerrflag==0)
        {
        yyerror("syntax error");
        yynerrs++;
        }
      if (yyerrflag < 3) //low error count?
        {
        yyerrflag = 3;
        while (true)   //do until break
          {
          if (stateptr<0)   //check for under & overflow here
            {
            yyerror("stack underflow. aborting...");  //note lower case 's'
            return 1;
            }
          yyn = yysindex[state_peek(0)];
          if ((yyn != 0) && (yyn += YYERRCODE) >= 0 &&
                    yyn <= YYTABLESIZE && yycheck[yyn] == YYERRCODE)
            {
            if (yydebug)
              debug("state "+state_peek(0)+", error recovery shifting to state "+yytable[yyn]+" ");
            yystate = yytable[yyn];
            state_push(yystate);
            val_push(yylval);
            doaction=false;
            break;
            }
          else
            {
            if (yydebug)
              debug("error recovery discarding state "+state_peek(0)+" ");
            if (stateptr<0)   //check for under & overflow here
              {
              yyerror("Stack underflow. aborting...");  //capital 'S'
              return 1;
              }
            state_pop();
            val_pop();
            }
          }
        }
      else            //discard this token
        {
        if (yychar == 0)
          return 1; //yyabort
        if (yydebug)
          {
          yys = null;
          if (yychar <= YYMAXTOKEN) yys = yyname[yychar];
          if (yys == null) yys = "illegal-symbol";
          debug("state "+yystate+", error recovery discards token "+yychar+" ("+yys+")");
          }
        yychar = -1;  //read another
        }
      }//end error recovery
    }//yyn=0 loop
    if (!doaction)   //any reason not to proceed?
      continue;      //skip action
    yym = yylen[yyn];          //get count of terminals on rhs
    if (yydebug)
      debug("state "+yystate+", reducing "+yym+" by rule "+yyn+" ("+yyrule[yyn]+")");
    if (yym>0)                 //if count of rhs not 'nil'
      yyval = val_peek(yym-1); //get current semantic value
    yyval = dup_yyval(yyval); //duplicate yyval if ParserVal is used as semantic value
    switch(yyn)
      {
//########## USER-SUPPLIED ACTIONS ##########
case 1:
//#line 17 "gramatica.y"
{ logger.logSuccess("[Parser] Programa correcto detectado"); }
break;
case 2:
//#line 18 "gramatica.y"
{ logger.logError("[Parser] Se esperaba simbolo '{' al principio del programa"); }
break;
case 3:
//#line 19 "gramatica.y"
{ logger.logError("[Parser] Se esperaba simbolo '}' al final del programa"); }
break;
case 4:
//#line 20 "gramatica.y"
{ logger.logError("[Parser] Programa vacio"); }
break;
case 5:
//#line 21 "gramatica.y"
{ logger.logError("[Parser] Programa vacio"); }
break;
case 9:
//#line 31 "gramatica.y"
{ polaca.resetContador(); }
break;
case 10:
//#line 32 "gramatica.y"
{ logger.logError("[Parser] Error de sintaxis en la sentencia"); }
break;
case 16:
//#line 41 "gramatica.y"
{ logger.logError("[Parser] Sentencia RETURN fuera de funcion"); }
break;
case 27:
//#line 64 "gramatica.y"
{ logger.logError("[Parser] Se esperaba un simbolo ',' luego del RETURN"); }
break;
case 28:
//#line 68 "gramatica.y"
{ 
		logger.logSuccess("[Parser] Sentencia iterativa DO WHILE detectada"); 
		polaca.generarPasoIncompleto("BI");
		polaca.completarPasoIncompleto();
		polaca.completarPasoIncompletoIteracion();
		}
break;
case 29:
//#line 74 "gramatica.y"
{ logger.logError("[Parser] Se esperaba ',' luego de sentencia DO WHILE"); }
break;
case 30:
//#line 75 "gramatica.y"
{ logger.logError("[Parser] Se esperaban sentencias ejecutables en sentencia DO WHILE"); }
break;
case 31:
//#line 76 "gramatica.y"
{ logger.logError("[Parser] Se esperaba condicion en sentencia DO WHILE"); }
break;
case 32:
//#line 77 "gramatica.y"
{ logger.logError("[Parser] Se esperaba WHILE en sentencia DO WHILE"); }
break;
case 33:
//#line 78 "gramatica.y"
{ logger.logError("[Parser] Se esperaban sentencias ejecutables en sentencia DO WHILE"); }
break;
case 34:
//#line 79 "gramatica.y"
{ logger.logError("[Parser] Se esperaba condicion en sentencia DO WHILE"); }
break;
case 35:
//#line 80 "gramatica.y"
{ logger.logError("[Parser] Se esperaban sentencias ejecutables en sentencia DO WHILE"); }
break;
case 36:
//#line 81 "gramatica.y"
{ logger.logError("[Parser] Se esperaban sentencias ejecutables en sentencia DO WHILE"); }
break;
case 37:
//#line 82 "gramatica.y"
{ logger.logError("[Parser] Se esperaban sentencias ejecutables en sentencia DO WHILE"); }
break;
case 38:
//#line 83 "gramatica.y"
{ logger.logError("[Parser] Se esperaban sentencias ejecutables en sentencia DO WHILE"); }
break;
case 39:
//#line 87 "gramatica.y"
{ logger.logSuccess("[Parser] Sentencia iterativa DO WHILE detectada"); }
break;
case 40:
//#line 88 "gramatica.y"
{ logger.logError("[Parser] Se esperaba ',' luego de sentencia DO WHILE"); }
break;
case 41:
//#line 89 "gramatica.y"
{ logger.logError("[Parser] Se esperaban sentencias ejecutables en sentencia DO WHILE"); }
break;
case 42:
//#line 90 "gramatica.y"
{ logger.logError("[Parser] Se esperaba condicion en sentencia DO WHILE"); }
break;
case 43:
//#line 91 "gramatica.y"
{ logger.logError("[Parser] Se esperaba WHILE en sentencia DO WHILE"); }
break;
case 44:
//#line 92 "gramatica.y"
{ logger.logError("[Parser] Se esperaban sentencias ejecutables en sentencia DO WHILE"); }
break;
case 45:
//#line 93 "gramatica.y"
{ logger.logError("[Parser] Se esperaba condicion en sentencia DO WHILE"); }
break;
case 46:
//#line 94 "gramatica.y"
{ logger.logError("[Parser] Se esperaban sentencias ejecutables en sentencia DO WHILE"); }
break;
case 47:
//#line 95 "gramatica.y"
{ logger.logError("[Parser] Se esperaban sentencias ejecutables en sentencia DO WHILE"); }
break;
case 48:
//#line 96 "gramatica.y"
{ logger.logError("[Parser] Se esperaban sentencias ejecutables en sentencia DO WHILE"); }
break;
case 49:
//#line 97 "gramatica.y"
{ logger.logError("[Parser] Se esperaban sentencias ejecutables en sentencia DO WHILE"); }
break;
case 50:
//#line 101 "gramatica.y"
{ 
		logger.logSuccess("[Parser] Sentencia seleccion IF ELSE detectada"); 
		polaca.completarPasoIncompleto();
	}
break;
case 51:
//#line 105 "gramatica.y"
{ 
		logger.logSuccess("[Parser] Sentencia seleccion IF sin ELSE detectada"); 
		polaca.completarPasoIncompleto(); /* ESTA BIEN QUE APAREZCA BIFURCACION INCONDICIONAL ACA?*/
	}
break;
case 52:
//#line 109 "gramatica.y"
{ logger.logError("[Parser] Se esperaba ',' luego de sentencia IF ELSE"); }
break;
case 53:
//#line 110 "gramatica.y"
{ logger.logError("[Parser] Se esperaba ',' luego de sentencia IF sin ELSE"); }
break;
case 54:
//#line 111 "gramatica.y"
{ logger.logError("[Parser] Se esperaba condicion en sentencia IF ELSE"); }
break;
case 55:
//#line 112 "gramatica.y"
{ logger.logError("[Parser] Se esperaba condicion en sentencia IF"); }
break;
case 56:
//#line 113 "gramatica.y"
{ logger.logError("[Parser] Se esperaban sentencias ejecutables en sentencia IF ELSE"); }
break;
case 57:
//#line 114 "gramatica.y"
{ logger.logError("[Parser] Se esperaban sentencias ejecutables en sentencia IF ELSE"); }
break;
case 58:
//#line 115 "gramatica.y"
{ logger.logError("[Parser] Se esperaban sentencias ejecutables en sentencia IF"); }
break;
case 59:
//#line 119 "gramatica.y"
{ 
		logger.logSuccess("[Parser] Sentencia seleccion IF ELSE detectada"); 
		polaca.completarPasoIncompleto();
	}
break;
case 60:
//#line 123 "gramatica.y"
{ 
		logger.logSuccess("[Parser] Sentencia seleccion IF sin ELSE detectada");
		polaca.completarPasoIncompleto();
	}
break;
case 61:
//#line 127 "gramatica.y"
{ logger.logError("[Parser] Se esperaba ',' luego de sentencia IF ELSE"); }
break;
case 62:
//#line 128 "gramatica.y"
{ logger.logError("[Parser] Se esperaba ',' luego de sentencia IF sin ELSE"); }
break;
case 63:
//#line 129 "gramatica.y"
{ logger.logError("[Parser] Se esperaba condicion en sentencia IF ELSE"); }
break;
case 64:
//#line 130 "gramatica.y"
{ logger.logError("[Parser] Se esperaba condicion en sentencia IF"); }
break;
case 65:
//#line 131 "gramatica.y"
{ logger.logError("[Parser] Se esperaban sentencias ejecutables en sentencia IF ELSE"); }
break;
case 66:
//#line 132 "gramatica.y"
{ logger.logError("[Parser] Se esperaban sentencias ejecutables en sentencia IF ELSE"); }
break;
case 67:
//#line 133 "gramatica.y"
{ logger.logError("[Parser] Se esperaban sentencias ejecutables en sentencia IF"); }
break;
case 68:
//#line 137 "gramatica.y"
{
		/* EN LAS FILMINAS ESTA INVERTIDO ... */
		polaca.generarPasoIncompleto("BI");
		polaca.completarPasoIncompleto();
		polaca.apilar(polaca.polacaSize() - 1);
	}
break;
case 69:
//#line 143 "gramatica.y"
{
		polaca.generarPasoIncompleto("BI");
		polaca.completarPasoIncompleto();
		polaca.apilar(polaca.polacaSize() - 1);
	}
break;
case 70:
//#line 148 "gramatica.y"
{ logger.logError("[Parser] Se esperaban un simbolo '}' en el bloque"); }
break;
case 71:
//#line 149 "gramatica.y"
{ logger.logError("[Parser] Se esperaban un simbolo '{' en el bloque"); }
break;
case 72:
//#line 150 "gramatica.y"
{ logger.logError("[Parser] Se esperaban sentencias ejecutables dentro del bloque"); }
break;
case 73:
//#line 151 "gramatica.y"
{ logger.logError("[Parser] No se permiten declaraciones de variables dentro de bloque de sentencias ejecutables"); }
break;
case 76:
//#line 157 "gramatica.y"
{ logger.logError("[Parser] Se esperaban un simbolo '}' en el bloque"); }
break;
case 77:
//#line 158 "gramatica.y"
{ logger.logError("[Parser] Se esperaban un simbolo '{' en el bloque"); }
break;
case 78:
//#line 159 "gramatica.y"
{ logger.logError("[Parser] Se esperaban sentencias ejecutables dentro del bloque"); }
break;
case 79:
//#line 160 "gramatica.y"
{ logger.logError("[Parser] No se permiten declaraciones de variables dentro de bloque de sentencias ejecutables"); }
break;
case 80:
//#line 164 "gramatica.y"
{
		polaca.apilar(polaca.polacaSize() - polaca.getContador() + 1);
		polaca.resetContador();
	}
break;
case 83:
//#line 172 "gramatica.y"
{ logger.logError("[Parser] Se esperaban un simbolo '}' en el bloque"); }
break;
case 84:
//#line 173 "gramatica.y"
{ logger.logError("[Parser] Se esperaban un simbolo '{' en el bloque"); }
break;
case 85:
//#line 174 "gramatica.y"
{ logger.logError("[Parser] Se esperaban sentencias ejecutables dentro del bloque"); }
break;
case 86:
//#line 175 "gramatica.y"
{ logger.logError("[Parser] No se permiten declaraciones de variables dentro de bloque de sentencias ejecutables"); }
break;
case 87:
//#line 179 "gramatica.y"
{
		polaca.generarPasoIncompleto("BI");
		polaca.completarPasoIncompleto();
		polaca.apilar(polaca.polacaSize() - 1);
	}
break;
case 89:
//#line 185 "gramatica.y"
{ logger.logError("[Parser] No se permiten declaraciones de variables dentro de bloque de sentencias ejecutables"); }
break;
case 90:
//#line 186 "gramatica.y"
{
		polaca.generarPasoIncompleto("BI");
		polaca.completarPasoIncompleto();
		polaca.apilar(polaca.polacaSize() - 1);
	}
break;
case 93:
//#line 193 "gramatica.y"
{ logger.logError("[Parser] Se esperaban un simbolo '{' en el bloque"); }
break;
case 94:
//#line 194 "gramatica.y"
{ logger.logError("[Parser] Se esperaban un simbolo '{' en el bloque"); }
break;
case 95:
//#line 195 "gramatica.y"
{ logger.logError("[Parser] Se esperaban un simbolo '}' en el bloque"); }
break;
case 96:
//#line 196 "gramatica.y"
{ logger.logError("[Parser] Se esperaban un simbolo '}' en el bloque"); }
break;
case 97:
//#line 197 "gramatica.y"
{ logger.logError("[Parser] Se esperaban sentencias ejecutables en bloque de sentencias ejecutables"); }
break;
case 100:
//#line 203 "gramatica.y"
{ logger.logError("[Parser] No se permiten declaraciones de variables dentro de bloque de sentencias ejecutables"); }
break;
case 104:
//#line 207 "gramatica.y"
{ logger.logError("[Parser] Se esperaban un simbolo '{' en el bloque"); }
break;
case 105:
//#line 208 "gramatica.y"
{ logger.logError("[Parser] Se esperaban un simbolo '{' en el bloque"); }
break;
case 106:
//#line 209 "gramatica.y"
{ logger.logError("[Parser] Se esperaban un simbolo '}' en el bloque"); }
break;
case 107:
//#line 210 "gramatica.y"
{ logger.logError("[Parser] Se esperaban un simbolo '}' en el bloque"); }
break;
case 108:
//#line 211 "gramatica.y"
{ logger.logError("[Parser] Se esperaban sentencias ejecutables en bloque de sentencias ejecutables"); }
break;
case 109:
//#line 215 "gramatica.y"
{ logger.logError("[Parser] Codigo inalcanzable luego del RETURN, se ignorara"); }
break;
case 110:
//#line 216 "gramatica.y"
{ logger.logError("[Parser] Codigo inalcanzable luego del RETURN, se ignorara"); }
break;
case 113:
//#line 225 "gramatica.y"
{ polaca.resetContador(); }
break;
case 115:
//#line 227 "gramatica.y"
{ logger.logError("[Parser] No se aceptan declaraciones de variables en sentencias ejecutables"); }
break;
case 116:
//#line 228 "gramatica.y"
{ logger.logError("[Parser] No se aceptan declaraciones de variables en sentencias ejecutables"); }
break;
case 119:
//#line 234 "gramatica.y"
{ logger.logError("[Parser] No se aceptan declaraciones de variables en sentencias ejecutables"); }
break;
case 120:
//#line 235 "gramatica.y"
{ logger.logError("[Parser] No se aceptan declaraciones de variables en sentencias ejecutables"); }
break;
case 121:
//#line 239 "gramatica.y"
{ logger.logSuccess("[Parser] Sentencia PRINT detectada"); }
break;
case 122:
//#line 240 "gramatica.y"
{ logger.logError("[Parser] Se esperaba un simbolo ',' en Sentencia PRINT"); }
break;
case 123:
//#line 241 "gramatica.y"
{ logger.logError("[Parser] Se esperaba CADENA en Sentencia PRINT"); }
break;
case 124:
//#line 242 "gramatica.y"
{ logger.logError("[Parser] Se esperaba una CADENA y se encontro un IDENTIFICADOR en sentencia PRINT"); }
break;
case 125:
//#line 243 "gramatica.y"
{ logger.logError("[Parser] Se esperaba un simbolo ',' en sentencia PRINT"); }
break;
case 126:
//#line 244 "gramatica.y"
{ logger.logError("[Parser] Se esperaba una CADENA y se encontro una constante en sentencia PRINT"); }
break;
case 127:
//#line 245 "gramatica.y"
{ logger.logError("[Parser] Se esperaba un simbolo ',' en sentencia PRINT"); }
break;
case 128:
//#line 250 "gramatica.y"
{ 

		if (val_peek(4).sval.contains(".")) {
			String[] splittedIdentificador = val_peek(4).sval.split("\\.");
			String nombreVariable = splittedIdentificador[0];
			String nombreMiembro = splittedIdentificador[1];

			if (!genCodigoIntermedio.existeIdentificadorEnAlgunAmbitoContenedor(nombreVariable).isEmpty()){

				String tipoInstancia = (String) TS.getAtributo(nombreVariable + genCodigoIntermedio.generarAmbito(), Constantes.TYPE);
				
				if (TS.has(nombreMiembro + ":" + tipoInstancia)) {
					if ((boolean) TS.getAtributo(nombreMiembro + ":" + tipoInstancia, Constantes.TIENE_PARAMETRO)){
						logger.logSuccess("[Codigo Intermedio] El identificador " + nombreMiembro + " esta declarado dentro de la clase " + tipoInstancia);
					} else {
						logger.logError("[Codigo Intermedio] Cantidad de parametros incorrecta");
					}
				} else {
					logger.logError("[Codigo Intermedio] El identificador " + nombreMiembro + " no esta declarado dentro de la clase " + tipoInstancia);
				}
			}
		} else {
			if (!genCodigoIntermedio.existeIdentificadorEnAlgunAmbitoContenedor(val_peek(4).sval).isEmpty()){
				if (!(boolean) TS.getAtributo(val_peek(4).sval + genCodigoIntermedio.generarAmbito(), Constantes.TIENE_PARAMETRO)){
					logger.logError("Cantidad de parametros incorrecta");
				}
			}
		}
	}
break;
case 129:
//#line 279 "gramatica.y"
{ 
		logger.logSuccess("[Parser] Invocacion de funcion sin expresion detectada");

		if (val_peek(3).sval.contains(".")) {
			
			String[] splittedIdentificador = val_peek(3).sval.split("\\.");
			String nombreVariable = splittedIdentificador[0];
			String nombreMiembro = splittedIdentificador[1];

			if (!genCodigoIntermedio.existeIdentificadorEnAlgunAmbitoContenedor(nombreVariable).isEmpty()){

				String tipoInstancia = (String) TS.getAtributo(nombreVariable + genCodigoIntermedio.generarAmbito(), Constantes.TYPE);

				if (TS.has(nombreMiembro + ":" + tipoInstancia)) {
					
					if (!(boolean) TS.getAtributo(nombreMiembro + ":" + tipoInstancia, Constantes.TIENE_PARAMETRO)){
						logger.logSuccess("[Codigo Intermedio] El identificador " + nombreMiembro + " esta declarado dentro de la clase " + tipoInstancia);
					} else {
						logger.logError("[Codigo Intermedio] Cantidad de parametros incorrecta");
					}
				} else {
					logger.logError("[Codigo Intermedio] El identificador " + nombreMiembro + " no esta declarado dentro de la clase " + tipoInstancia);
				}
			}
		} else {
			if (!genCodigoIntermedio.existeIdentificadorEnAlgunAmbitoContenedor(val_peek(3).sval).isEmpty()){
				logger.logError("jejje " + val_peek(3).sval);
				if ((boolean) TS.getAtributo(val_peek(3).sval + genCodigoIntermedio.generarAmbito(), Constantes.TIENE_PARAMETRO)) {
					logger.logError("Cantidad de parametros incorrecta");
				}
			}
		}
	}
break;
case 130:
//#line 312 "gramatica.y"
{ logger.logError("[Parser] Invocacion de funcion con multiples expresiones detectada, se preserva solo la primera expresion"); }
break;
case 131:
//#line 313 "gramatica.y"
{ logger.logError("[Parser] Se esperaba un simbolo ',' en invocacion de funcion"); }
break;
case 132:
//#line 314 "gramatica.y"
{ logger.logError("[Parser] Se esperaba un simbolo ',' en invocacion de funcion"); }
break;
case 133:
//#line 315 "gramatica.y"
{ logger.logError("[Parser] Se esperaba un simbolo ',' en invocacion de funcion"); }
break;
case 136:
//#line 324 "gramatica.y"
{ 
		logger.logSuccess("[Parser] Asignacion detectada");
		String variable = genCodigoIntermedio.existeIdentificadorEnAlgunAmbitoContenedor(val_peek(3).sval);
		polaca.agregarElemento(val_peek(3).sval + variable);
		polaca.agregarElemento(val_peek(2).sval);
		if (!variable.isEmpty())
			/* INDICO EN LA TABLA DE SIMBOLOS QUE LA VARIABLE SE UTILIZO DEL LADO IZQUIERDO*/
			TS.agregarAtributo(val_peek(3).sval + variable, Constantes.COMPROBACION_USO, true);
	}
break;
case 137:
//#line 333 "gramatica.y"
{ logger.logError("[Parser] Se esperaba un simbolo ',' en sentencia asignacion"); }
break;
case 138:
//#line 334 "gramatica.y"
{ logger.logError("[Parser] Se esperaba expresion del lado derecho en sentencia asignacion"); }
break;
case 139:
//#line 338 "gramatica.y"
{
		yyval.sval = val_peek(0).sval;
		if (!genCodigoIntermedio.existeIdentificadorEnAlgunAmbitoContenedor(val_peek(0).sval).isEmpty()) {
		 	logger.logSuccess("[Codigo Intermedio] El identificador " + val_peek(0).sval + " esta declarado");
			TS.removeLexema(val_peek(0).sval);
		} else {
			logger.logError("[Codigo Intermedio] El identificador " + val_peek(0).sval + " no esta declarado");
		}
	}
break;
case 140:
//#line 347 "gramatica.y"
{

		yyval.sval = val_peek(2).sval + "." + val_peek(0).sval;

		/* if (!genCodigoIntermedio.existeIdentificadorEnAlgunAmbitoContenedor($1.sval).equals("")){*/

		/* 	String tipoInstancia = genCodigoIntermedio.tipoInstanceDeClase($1.sval);*/

		/* 	if (genCodigoIntermedio.perteneceMiembroAClase($3.sval, tipoInstancia)) {*/
		/* 		logger.logError($3.sval + ":" + tipoInstancia);*/
		/* 		if (genCodigoIntermedio.verificarParametrosDeMetodo($3.sval + ":" + tipoInstancia)){*/
		/* 			logger.logError("Cantidad de parametros incorrecta");*/
		/* 		} else {*/
		/* 			logger.logSuccess("[Codigo Intermedio] El identificador " + $3.sval + " esta declarado dentro de la clase " + tipoInstancia);*/
		/* 		}*/
		/* 	} else {*/
		/* 		logger.logError("[Codigo Intermedio] El identificador " + $3.sval + " no esta declarado dentro de la clase " + tipoInstancia);*/
		/* 	}*/
		/* }*/
	}
break;
case 145:
//#line 377 "gramatica.y"
{ 
		logger.logSuccess("[Parser] Declaracion de lista de variables detectado");
		genCodigoIntermedio.agregarTipoAListaDeVariables(val_peek(2).sval);
		genCodigoIntermedio.agregarUsoAListaDeVariables("variable");
		genCodigoIntermedio.agregarAmbitoAListaDeVariables();
		genCodigoIntermedio.removerListaVariablesADeclarar();
	}
break;
case 146:
//#line 384 "gramatica.y"
{ logger.logError("[Parser] Se esperaba un simbolo ',' en sentencia declaracion de variables"); }
break;
case 147:
//#line 385 "gramatica.y"
{ logger.logError("[Parser] Se esperaba una lista de variables en sentencia declaracion de variables"); }
break;
case 148:
//#line 389 "gramatica.y"
{
		TS.agregarAtributo(val_peek(0).sval, Constantes.USE, "nombre_interfaz");
		TS.agregarAtributo(val_peek(0).sval, Constantes.METODOS, null);
		/*Agrego Ambito a identificador*/
		TS.swapLexemas(val_peek(0).sval, val_peek(0).sval + genCodigoIntermedio.generarAmbito());
		genCodigoIntermedio.setAmbitoClaseInterfaz(val_peek(0).sval);
	}
break;
case 149:
//#line 396 "gramatica.y"
{ logger.logError("[Parser] Se esperaba un identificador en declaracion de INTERFACE"); }
break;
case 150:
//#line 400 "gramatica.y"
{ 
		logger.logSuccess("[Parser] Declaracion de INTERFACE detectada");
		genCodigoIntermedio.clearAmbitoClaseInterfaz();
	}
break;
case 151:
//#line 404 "gramatica.y"
{ logger.logError("[Parser] Se esperaba un simbolo '{' en declaracion de INTERFACE"); }
break;
case 155:
//#line 414 "gramatica.y"
{ logger.logError("[Parser] Se esperaba un simbolo ',' en declaracion de metodo en CLASS"); }
break;
case 156:
//#line 418 "gramatica.y"
{ 
		logger.logSuccess("[Parser] Declaracion de lista de variables en CLASS detectado"); 
		genCodigoIntermedio.agregarTipoAListaDeVariables(val_peek(2).sval);
		genCodigoIntermedio.agregarUsoAListaDeVariables("atributo");
		genCodigoIntermedio.agregarAmbitoAListaDeAtributos();
		genCodigoIntermedio.removerListaVariablesADeclarar();
	}
break;
case 157:
//#line 425 "gramatica.y"
{ logger.logError("[Parser] Se esperaba un simbolo ',' en declaracion de lista de variables en CLASS"); }
break;
case 159:
//#line 427 "gramatica.y"
{ logger.logError("[Parser] Se encontro un simbolo inesperado ',' en declaracion de funcion en CLASS"); }
break;
case 160:
//#line 428 "gramatica.y"
{
		if (!genCodigoIntermedio.existeIdentificadorEnAlgunAmbitoContenedor(val_peek(1).sval).isEmpty()) {
			logger.logSuccess("[Codigo Intermedio] El identificador " + val_peek(1).sval + " esta declarado");
		} else {
			logger.logError("[Codigo Intermedio] El identificador " + val_peek(1).sval + " no esta declarado");
		}
	}
break;
case 161:
//#line 438 "gramatica.y"
{ 
		logger.logSuccess("[Parser] Declaracion de clase CLASS detectado"); 

		/*String claseDeclarada = genCodigoIntermedio.getAmbitoClaseInterfaz();*/
		/*String claseImplementaInterfaz = genCodigoIntermedio.getInterfazAImplementar(claseDeclarada);*/
		
		if (genCodigoIntermedio.verificarImplementacion(val_peek(3).sval)){
			logger.logSuccess("[Codigo Intermedio] Metodos declarados en interfaz fueron implementados");
		}
		else{
			logger.logError("No fueron implementados todos los metodos de la interfaz");
		}
		
		genCodigoIntermedio.clearAmbitoClaseInterfaz();
	}
break;
case 162:
//#line 456 "gramatica.y"
{ 
		/*CHEQUEO QUE CLASE NO HAYA SIDO DECLARADA (DEBERIA CHEQUEAR USO, XQ PUEDE QUE IDENTIF PERTENEZCA A OTRA USO)*/
		if (!TS.has(val_peek(0).sval + genCodigoIntermedio.generarAmbito())) {
			TS.agregarAtributo(val_peek(0).sval, Constantes.USE, "nombre_clase");
			/*Agrego Ambito a identificador*/
			TS.swapLexemas(val_peek(0).sval, val_peek(0).sval + genCodigoIntermedio.generarAmbito());
			genCodigoIntermedio.setAmbitoClaseInterfaz(val_peek(0).sval);
			genCodigoIntermedio.apilarAmbito(val_peek(0).sval);
			yyval.sval = val_peek(0).sval;
		} else {
			logger.logError("[Codigo intermedio] Se intento volver a declarar el identificador " + val_peek(0).sval);
		}
	}
break;
case 163:
//#line 469 "gramatica.y"
{
		/*CHEQUEO QUE CLASE NO HAYA SIDO DECLARADA (DEBERIA CHEQUEAR USO, XQ PUEDE QUE IDENTIF PERTENEZCA A OTRA USO)*/
		if (!TS.has(val_peek(2).sval + genCodigoIntermedio.generarAmbito())) {
			if (!genCodigoIntermedio.existeIdentificadorEnAlgunAmbitoContenedor(val_peek(0).sval).isEmpty()) {
				logger.logSuccess("[Codigo Intermedio] El identificador " + val_peek(0).sval + " esta declarado");
				TS.agregarAtributo(val_peek(2).sval, Constantes.USE, "nombre_clase");
				TS.agregarAtributo(val_peek(2).sval, Constantes.METODOS, null);
				/* REGISTRO EN LA TABLA DE SIMBOLOS, CUAL ES LA INTERFAZ QUE ESTA IMPLEMENTANDO*/
				TS.agregarAtributo(val_peek(2).sval, Constantes.IMPLEMENTA, val_peek(0).sval);
				/*Agrego Ambito a identificador*/
				TS.swapLexemas(val_peek(2).sval, val_peek(2).sval + genCodigoIntermedio.generarAmbito());
				genCodigoIntermedio.setAmbitoClaseInterfaz(val_peek(2).sval);
				genCodigoIntermedio.apilarAmbito(val_peek(2).sval);
				yyval.sval = val_peek(2).sval;
			} else {
				logger.logError("[Codigo Intermedio] El identificador " + val_peek(0).sval + " no esta declarado");
			}
		} else {
			logger.logError("[Codigo intermedio] Se intento volver a declarar el identificador " + val_peek(2).sval);
		}
	}
break;
case 164:
//#line 490 "gramatica.y"
{ logger.logError("[Parser] Se esperaba un identificador en declaracion de clase"); }
break;
case 165:
//#line 491 "gramatica.y"
{ logger.logError("[Parser] Se esperaba un identificador en declaracion de clase"); }
break;
case 166:
//#line 492 "gramatica.y"
{ logger.logError("[Parser] Se esperaba un identificador en IMPLEMENT de clase"); }
break;
case 167:
//#line 493 "gramatica.y"
{ logger.logError("[Parser] Se esperaba un identificador en declaracion de clase"); }
break;
case 170:
//#line 504 "gramatica.y"
{ 
		logger.logSuccess("[Parser] Declaracion de funcion detectado");
		if (genCodigoIntermedio.isPuedoDesapilar())
			genCodigoIntermedio.desapilarAmbito();
		else 
			genCodigoIntermedio.setPuedoDesapilar();
	}
break;
case 171:
//#line 514 "gramatica.y"
{
		/* CHEQUEO QUE LA FUNCION NO ESTE DECLARADA*/
		if (!TS.has(val_peek(3).sval + genCodigoIntermedio.generarAmbito())) {
			if (genCodigoIntermedio.esDefinicionDeClase()) {
				TS.agregarAtributo(val_peek(3).sval, Constantes.USE, "nombre_metodo");
				TS.agregarAtributo(val_peek(3).sval, Constantes.TIENE_PARAMETRO, false);
				/* Agrego Ambito a metodo*/
				TS.swapLexemas(val_peek(3).sval, val_peek(3).sval + ":" + genCodigoIntermedio.getAmbitoClaseInterfaz());
			} else {
				TS.agregarAtributo(val_peek(3).sval, Constantes.USE, "nombre_funcion");
				TS.agregarAtributo(val_peek(3).sval, Constantes.TIENE_PARAMETRO, false);
				/*Agrego Ambito a identificador*/
				TS.swapLexemas(val_peek(3).sval, val_peek(3).sval + genCodigoIntermedio.generarAmbito());
			}

			/* INDICO QUE LA FUNCION TIENE PARAMETRO*/
			TS.agregarAtributo(val_peek(3).sval + genCodigoIntermedio.generarAmbito(), Constantes.TIENE_PARAMETRO, true);
			genCodigoIntermedio.apilarAmbito(val_peek(3).sval);
			/*Agrego Ambito a identificador*/
			TS.swapLexemas(val_peek(1).sval, val_peek(1).sval + genCodigoIntermedio.generarAmbito());
		} else {
			logger.logError("[Codigo intermedio] Se intento volver a declarar el identificador " + val_peek(3).sval);
			genCodigoIntermedio.setPuedoDesapilar();
		}
	}
break;
case 172:
//#line 539 "gramatica.y"
{
		/* CHEQUEO QUE LA FUNCION NO ESTE DECLARADA*/
		if (!TS.has(val_peek(2).sval + genCodigoIntermedio.generarAmbito())) {
			if (genCodigoIntermedio.esDefinicionDeClase()) {
				TS.agregarAtributo(val_peek(2).sval, Constantes.USE, "nombre_metodo");
				TS.agregarAtributo(val_peek(2).sval, Constantes.TIENE_PARAMETRO, false);
				/*Agrego Ambito a identificador*/
				TS.swapLexemas(val_peek(2).sval, val_peek(2).sval + ":" + genCodigoIntermedio.getAmbitoClaseInterfaz());
				genCodigoIntermedio.agregarAtributoMetodos(val_peek(2).sval);
				
			} else {
				TS.agregarAtributo(val_peek(2).sval, Constantes.USE, "nombre_funcion");
				TS.agregarAtributo(val_peek(2).sval, Constantes.TIENE_PARAMETRO, false);
				/*Agrego Ambito a identificador*/
				TS.swapLexemas(val_peek(2).sval, val_peek(2).sval + genCodigoIntermedio.generarAmbito());
			}
			genCodigoIntermedio.apilarAmbito(val_peek(2).sval);
		} else {
			logger.logError("[Codigo intermedio] Se intento volver a declarar el identificador " + val_peek(2).sval);
			genCodigoIntermedio.setPuedoDesapilar();
		}
	}
break;
case 173:
//#line 561 "gramatica.y"
{ logger.logError("[Parser] Encabezado de funcion con mas de 1 parametro detectado, se preserva solo el primer parametro"); }
break;
case 174:
//#line 562 "gramatica.y"
{ logger.logError("[Parser] Encabezado de funcion con mas de 1 parametro detectado, se preserva solo el primer parametro"); }
break;
case 175:
//#line 563 "gramatica.y"
{ logger.logError("[Parser] Se esperaba un simbolo '(' en el encabezado de la funcion"); }
break;
case 176:
//#line 567 "gramatica.y"
{
		yyval.sval = val_peek(0).sval;
	}
break;
case 177:
//#line 570 "gramatica.y"
{
		logger.logError("[Parser] Se esperaba un identificador en el encabezado de la funcion"); 
	}
break;
case 178:
//#line 576 "gramatica.y"
{ 
		TS.agregarAtributo(val_peek(3).sval, Constantes.USE, "nombre_metodo");
		/*Agrego Ambito a identificador*/
		TS.swapLexemas(val_peek(3).sval, val_peek(3).sval + ":" + genCodigoIntermedio.getAmbitoClaseInterfaz());
		genCodigoIntermedio.agregarAtributoMetodos(val_peek(3).sval);
	}
break;
case 179:
//#line 582 "gramatica.y"
{ 
		TS.agregarAtributo(val_peek(2).sval, Constantes.USE, "nombre_metodo");
		/*Agrego Ambito a identificador*/
		TS.swapLexemas(val_peek(2).sval, val_peek(2).sval + ":" + genCodigoIntermedio.getAmbitoClaseInterfaz());
		genCodigoIntermedio.agregarAtributoMetodos(val_peek(2).sval);
	}
break;
case 180:
//#line 588 "gramatica.y"
{ logger.logError("[Parser] Encabezado de funcion con mas de 1 parametro detectado, se preserva solo el primer parametro"); }
break;
case 181:
//#line 589 "gramatica.y"
{ logger.logError("[Parser] Encabezado de funcion con mas de 1 parametro detectado, se preserva solo el primer parametro"); }
break;
case 182:
//#line 590 "gramatica.y"
{ logger.logError("[Parser] Se esperaba un identificador en el encabezado de la funcion"); }
break;
case 183:
//#line 591 "gramatica.y"
{ logger.logError("[Parser] Se esperaba un identificador en el encabezado de la funcion"); }
break;
case 184:
//#line 592 "gramatica.y"
{ logger.logError("[Parser] Se esperaba un simbolo '(' en el encabezado de la funcion"); }
break;
case 185:
//#line 593 "gramatica.y"
{ logger.logError("[Parser] Se esperaba un simbolo '(' en el encabezado de la funcion"); }
break;
case 190:
//#line 601 "gramatica.y"
{ logger.logError("[Parser] Se esperaba una sentencia RETURN al final de la funcion"); }
break;
case 191:
//#line 602 "gramatica.y"
{ logger.logError("[Parser] Se esperaba una sentencia RETURN al final de la funcion"); }
break;
case 192:
//#line 603 "gramatica.y"
{ logger.logError("[Parser] Se esperaba un simbolo '{' en el cuerpo de la funcion"); }
break;
case 193:
//#line 604 "gramatica.y"
{ logger.logError("[Parser] Se esperaba un simbolo '{' en el cuerpo de la funcion"); }
break;
case 194:
//#line 605 "gramatica.y"
{ logger.logError("[Parser] Se esperaba un simbolo '{' en el cuerpo de la funcion"); }
break;
case 195:
//#line 606 "gramatica.y"
{ logger.logError("[Parser] Se esperaba un simbolo '{' en el cuerpo de la funcion"); }
break;
case 196:
//#line 607 "gramatica.y"
{ logger.logError("[Parser] Se esperaba un simbolo '{' en el cuerpo de la funcion"); }
break;
case 197:
//#line 608 "gramatica.y"
{ logger.logError("[Parser] Se esperaba un simbolo '{' en el cuerpo de la funcion"); }
break;
case 198:
//#line 612 "gramatica.y"
{ logger.logError("[Parser] Codigo inalcanzable luego del RETURN, se ignorara"); }
break;
case 199:
//#line 613 "gramatica.y"
{ logger.logError("[Parser] Codigo inalcanzable luego del RETURN, se ignorara"); }
break;
case 206:
//#line 629 "gramatica.y"
{ 
		yyval.sval = val_peek(0).sval;
		TS.agregarAtributo(val_peek(0).sval, Constantes.USE, "nombre_parametro");
		TS.agregarAtributo(val_peek(0).sval, Constantes.COMPROBACION_USO, false);
		/* Agrego tipo a parametro de funcion*/
		TS.agregarAtributo(val_peek(0).sval, Constantes.TYPE, val_peek(1).sval);
	}
break;
case 207:
//#line 639 "gramatica.y"
{ 
		if (!genCodigoIntermedio.variableRedeclarada(val_peek(0).sval)) {
			genCodigoIntermedio.agregarVariableADeclarar(val_peek(0).sval);
		} else {
			logger.logError("[Codigo intermedio] Se intento volver a declarar el identificador " + val_peek(0).sval);
		}
	}
break;
case 208:
//#line 646 "gramatica.y"
{ 
		if (!genCodigoIntermedio.variableRedeclarada(val_peek(0).sval)) {
			genCodigoIntermedio.agregarVariableADeclarar(val_peek(0).sval);
		} else {
			logger.logError("[Codigo intermedio] Se intento volver a declarar el identificador " + val_peek(0).sval);
		}
	}
break;
case 212:
//#line 659 "gramatica.y"
{
		if (!genCodigoIntermedio.existeIdentificadorEnAlgunAmbitoContenedor(val_peek(0).sval).isEmpty()) {
			logger.logSuccess("[Codigo Intermedio] El identificador " + val_peek(0).sval + " esta declarado");
		} else {
			logger.logError("[Codigo Intermedio] El identificador " + val_peek(0).sval + " no esta declarado");
		}
	}
break;
case 213:
//#line 669 "gramatica.y"
{
		polaca.agregarElemento(val_peek(1).sval);
		polaca.generarPasoIncompleto("BF");
		polaca.apilar(polaca.polacaSize() - 1);
	}
break;
case 214:
//#line 674 "gramatica.y"
{ logger.logError("[Parser] Se esperaba una expresion del lado derecho de la comparacion"); }
break;
case 215:
//#line 675 "gramatica.y"
{ logger.logError("[Parser] Se esperaba una expresion del lado izquierdo de la comparacion"); }
break;
case 216:
//#line 676 "gramatica.y"
{ logger.logError("[Parser] Se esperaba un comparador valido en la comparacion"); }
break;
case 223:
//#line 689 "gramatica.y"
{ 
		polaca.agregarElemento(val_peek(1).sval);}
break;
case 224:
//#line 691 "gramatica.y"
{ 
		polaca.agregarElemento(val_peek(1).sval);}
break;
case 226:
//#line 697 "gramatica.y"
{ polaca.agregarElemento(val_peek(1).sval); }
break;
case 227:
//#line 698 "gramatica.y"
{ polaca.agregarElemento(val_peek(1).sval); }
break;
case 229:
//#line 703 "gramatica.y"
{
		if (!genCodigoIntermedio.existeIdentificadorEnAlgunAmbitoContenedor(val_peek(0).sval).isEmpty()) {
			logger.logSuccess("[Codigo Intermedio] El identificador " + val_peek(0).sval + " esta declarado");
			TS.removeLexema(val_peek(0).sval);
			polaca.agregarElemento(val_peek(0).sval + genCodigoIntermedio.existeIdentificadorEnAlgunAmbitoContenedor(val_peek(0).sval));
		} else {
			logger.logError("[Codigo Intermedio] El identificador " + val_peek(0).sval + " no esta declarado");
		}
	}
break;
case 230:
//#line 712 "gramatica.y"
{
		if (!genCodigoIntermedio.existeIdentificadorEnAlgunAmbitoContenedor(val_peek(1).sval).isEmpty()) {
			logger.logSuccess("[Codigo Intermedio] El identificador " + val_peek(1).sval + " esta declarado");
			polaca.agregarElemento(val_peek(1).sval + genCodigoIntermedio.existeIdentificadorEnAlgunAmbitoContenedor(val_peek(1).sval));
			polaca.agregarElemento("1");
			polaca.agregarElemento("-");

		} else {
			logger.logError("[Codigo Intermedio] El identificador " + val_peek(1).sval + " no esta declarado");
		}
	}
break;
case 231:
//#line 723 "gramatica.y"
{ polaca.agregarElemento(val_peek(0).sval);}
break;
case 232:
//#line 724 "gramatica.y"
{ logger.logError("[Parser] No se admiten expresiones entre parentesis"); }
break;
case 233:
//#line 728 "gramatica.y"
{ corregirConstantePositivaEntera(val_peek(0).sval); }
break;
case 234:
//#line 729 "gramatica.y"
{ constanteConSigno(val_peek(0).sval); }
break;
//#line 2283 "Parser.java"
//########## END OF USER-SUPPLIED ACTIONS ##########
    }//switch
    //#### Now let's reduce... ####
    if (yydebug) debug("reduce");
    state_drop(yym);             //we just reduced yylen states
    yystate = state_peek(0);     //get new state
    val_drop(yym);               //corresponding value drop
    yym = yylhs[yyn];            //select next TERMINAL(on lhs)
    if (yystate == 0 && yym == 0)//done? 'rest' state and at first TERMINAL
      {
      if (yydebug) debug("After reduction, shifting from state 0 to state "+YYFINAL+"");
      yystate = YYFINAL;         //explicitly say we're done
      state_push(YYFINAL);       //and save it
      val_push(yyval);           //also save the semantic value of parsing
      if (yychar < 0)            //we want another character?
        {
        yychar = yylex();        //get next character
        if (yychar<0) yychar=0;  //clean, if necessary
        if (yydebug)
          yylexdebug(yystate,yychar);
        }
      if (yychar == 0)          //Good exit (if lex returns 0 ;-)
         break;                 //quit the loop--all DONE
      }//if yystate
    else                        //else not done yet
      {                         //get next state and push, for next yydefred[]
      yyn = yygindex[yym];      //find out where to go
      if ((yyn != 0) && (yyn += yystate) >= 0 &&
            yyn <= YYTABLESIZE && yycheck[yyn] == yystate)
        yystate = yytable[yyn]; //get new state
      else
        yystate = yydgoto[yym]; //else go to new defred
      if (yydebug) debug("after reduction, shifting from state "+state_peek(0)+" to state "+yystate+"");
      state_push(yystate);     //going again, so push state & val...
      val_push(yyval);         //for next action
      }
    }//main loop
  return 0;//yyaccept!!
}
//## end of method parse() ######################################



//## run() --- for Thread #######################################
/**
 * A default run method, used for operating this parser
 * object in the background.  It is intended for extending Thread
 * or implementing Runnable.  Turn off with -Jnorun .
 */
public void run()
{
  yyparse();
}
//## end of method run() ########################################



//## Constructors ###############################################
/**
 * Default constructor.  Turn off with -Jnoconstruct .

 */
public Parser()
{
  //nothing to do
}


/**
 * Create a parser, setting the debug to true or false.
 * @param debugMe true for debugging, false for no debug.
 */
public Parser(boolean debugMe)
{
  yydebug=debugMe;
}
//###############################################################



}
//################### END OF CLASS ##############################
