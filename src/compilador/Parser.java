//### This file created by BYACC 1.8(/Java extension  1.15)
//### Java capabilities added 7 Jan 97, Bob Jamison
//### Updated : 27 Nov 97  -- Bob Jamison, Joe Nieten
//###           01 Jan 98  -- Bob Jamison -- fixed generic semantic constructor
//###           01 Jun 99  -- Bob Jamison -- added Runnable support
//###           06 Aug 00  -- Bob Jamison -- made state variables class-global
//###           03 Jan 01  -- Bob Jamison -- improved flags, tracing
//###           16 May 01  -- Bob Jamison -- added custom stack sizing
//###           04 Mar 02  -- Yuval Oren  -- improved java performance, added options
//###           14 Mar 02  -- Tomas Hurka -- -d support, static initializer workaround
//### Please send bug reports to tom@hukatronic.cz
//### static char yysccsid[] = "@(#)yaccpar	1.8 (Berkeley) 01/20/90";






//#line 2 ".\gramatica.y"
package compilador;
import java.io.File;
import java.util.ArrayList;
import java.util.Iterator;
//#line 22 "Parser.java"




public class Parser
{

boolean yydebug;        //do I want debug output?
int yynerrs;            //number of errors so far
int yyerrflag;          //was there an error?
int yychar;             //the current working character

//########## MESSAGES ##########
//###############################################################
// method: debug
//###############################################################
void debug(String msg)
{
  if (yydebug)
    System.out.println(msg);
}

//########## STATE STACK ##########
final static int YYSTACKSIZE = 500;  //maximum stack size
int statestk[] = new int[YYSTACKSIZE]; //state stack
int stateptr;
int stateptrmax;                     //highest index of stackptr
int statemax;                        //state when highest index reached
//###############################################################
// methods: state stack push,pop,drop,peek
//###############################################################
final void state_push(int state)
{
  try {
		stateptr++;
		statestk[stateptr]=state;
	 }
	 catch (ArrayIndexOutOfBoundsException e) {
     int oldsize = statestk.length;
     int newsize = oldsize * 2;
     int[] newstack = new int[newsize];
     System.arraycopy(statestk,0,newstack,0,oldsize);
     statestk = newstack;
     statestk[stateptr]=state;
  }
}
final int state_pop()
{
  return statestk[stateptr--];
}
final void state_drop(int cnt)
{
  stateptr -= cnt; 
}
final int state_peek(int relative)
{
  return statestk[stateptr-relative];
}
//###############################################################
// method: init_stacks : allocate and prepare stacks
//###############################################################
final boolean init_stacks()
{
  stateptr = -1;
  val_init();
  return true;
}
//###############################################################
// method: dump_stacks : show n levels of the stacks
//###############################################################
void dump_stacks(int count)
{
int i;
  System.out.println("=index==state====value=     s:"+stateptr+"  v:"+valptr);
  for (i=0;i<count;i++)
    System.out.println(" "+i+"    "+statestk[i]+"      "+valstk[i]);
  System.out.println("======================");
}


//########## SEMANTIC VALUES ##########
//public class ParserVal is defined in ParserVal.java


String   yytext;//user variable to return contextual strings
ParserVal yyval; //used to return semantic vals from action routines
ParserVal yylval;//the 'lval' (result) I got from yylex()
ParserVal valstk[];
int valptr;
//###############################################################
// methods: value stack push,pop,drop,peek.
//###############################################################
void val_init()
{
  valstk=new ParserVal[YYSTACKSIZE];
  yyval=new ParserVal();
  yylval=new ParserVal();
  valptr=-1;
}
void val_push(ParserVal val)
{
  if (valptr>=YYSTACKSIZE)
    return;
  valstk[++valptr]=val;
}
ParserVal val_pop()
{
  if (valptr<0)
    return new ParserVal();
  return valstk[valptr--];
}
void val_drop(int cnt)
{
int ptr;
  ptr=valptr-cnt;
  if (ptr<0)
    return;
  valptr = ptr;
}
ParserVal val_peek(int relative)
{
int ptr;
  ptr=valptr-relative;
  if (ptr<0)
    return new ParserVal();
  return valstk[ptr];
}
final ParserVal dup_yyval(ParserVal val)
{
  ParserVal dup = new ParserVal();
  dup.ival = val.ival;
  dup.dval = val.dval;
  dup.sval = val.sval;
  dup.obj = val.obj;
  return dup;
}
//#### end semantic value section ####
public final static short ID=257;
public final static short CTE=258;
public final static short CADENA=259;
public final static short IF=260;
public final static short THEN=261;
public final static short ELSE=262;
public final static short ENDIF=263;
public final static short OUT=264;
public final static short FUN=265;
public final static short RETURN=266;
public final static short BREAK=267;
public final static short ASIGNACION=268;
public final static short COMP_MAYOR_IGUAL=269;
public final static short COMP_MENOR_IGUAL=270;
public final static short COMP_DISTINTO=271;
public final static short WHEN=272;
public final static short DO=273;
public final static short UNTIL=274;
public final static short CONTINUE=275;
public final static short DOUBLE64=276;
public final static short UINT16=277;
public final static short DEFER=278;
public final static short CONST=279;
public final static short YYERRCODE=256;
final static short yylhs[] = {                           -1,
    0,    0,    0,    0,    0,    0,    1,    2,    2,    3,
    3,    4,    4,    4,    4,    6,    6,    6,    6,   11,
   11,    7,    7,    7,   14,   14,   15,   15,   16,   16,
   16,   16,   16,   16,   16,   16,   16,   16,   22,   22,
    8,    8,   23,   23,   23,   23,   23,   23,   23,   23,
   23,   23,   23,   23,   23,   23,   25,   25,   25,   21,
   21,   21,   21,   21,   21,   21,   21,   21,   21,   21,
   21,   21,   21,   19,   19,   19,   19,   19,   19,   19,
   19,   19,   19,   20,   20,   20,   20,   26,   26,   26,
   26,   26,   26,   26,   26,   26,   26,   26,   26,   26,
   28,   28,   29,   29,   29,   12,   12,   12,   12,   12,
   12,   12,   12,   12,   12,   12,   13,   13,   13,   13,
   13,   32,   32,   32,   35,   35,   34,   34,   36,   34,
    9,    9,    9,   37,   37,   38,   38,   38,   38,   38,
    5,    5,   40,   39,   39,   39,   39,   39,   44,   44,
   44,   30,   30,   30,   30,   30,   31,   31,   43,   43,
   46,   45,   45,   47,   27,   48,   48,   48,   48,   49,
   49,   17,   17,   17,   17,   17,   42,   42,   42,   42,
   42,   50,   50,   41,   41,   41,   41,   41,   41,   41,
   41,   53,   53,   53,   53,   53,   54,   54,   51,   52,
   24,   24,   24,   24,   24,   24,   55,   55,   55,   55,
   55,   55,   33,   33,   33,   56,   56,   56,   57,   57,
   57,   59,   59,   60,   60,   61,   61,   18,   18,   18,
   18,   18,   18,   18,   18,   18,   58,   58,   10,   10,
};
final static short yylen[] = {                            2,
    4,    3,    3,    3,    3,    0,    1,    1,    2,    1,
    1,    1,    1,    1,    1,    3,    2,    2,    2,    3,
    1,    4,    5,    3,    1,    2,    1,    1,    1,    2,
    1,    2,    1,    2,    1,    2,    1,    2,    1,    2,
    4,    5,    8,   11,   11,   11,   11,   14,   14,    7,
   10,   10,   10,   10,   13,   13,    1,    1,    2,    6,
    6,    6,    9,    9,   13,   11,   11,   13,   13,   13,
   11,   11,   12,    7,    8,    8,    6,    7,    7,    6,
    6,    7,    7,    5,    7,    4,    6,    1,    1,    1,
    4,    4,    3,    2,    3,    3,    3,    3,    2,    2,
    1,    2,    1,    1,    1,    6,    7,    6,    5,    5,
    5,    5,    6,    6,    6,    6,    5,    4,    3,    3,
    4,    1,    3,    5,    1,    3,    2,    1,    0,    2,
    3,    2,    2,    1,    3,    3,    2,    2,    1,    3,
    1,    2,    1,    1,    1,    1,    1,    1,    1,    1,
    1,    2,    4,    1,    3,    3,    2,    1,    1,    3,
    1,    5,    4,    1,    1,    1,    3,    2,    2,    1,
    2,    4,    3,    3,    4,    3,    7,    6,    6,    5,
    4,    1,    2,    6,    8,    5,    7,    5,    5,    7,
    6,    1,    3,    2,    2,    2,    1,    2,    1,    1,
    5,    4,    4,    4,    4,    2,    1,    1,    1,    1,
    1,    1,    3,    3,    1,    3,    3,    1,    1,    1,
    1,    3,    4,    1,    3,    1,    1,    5,    5,    4,
    4,    4,    4,    4,    4,    4,    1,    2,    1,    1,
};
final static short yydefred[] = {                         0,
    7,    0,    0,    0,    0,    0,    0,    0,    0,  164,
  240,  239,  143,    0,    0,    8,   10,   11,   12,   13,
   14,   15,    0,    0,    0,  144,  146,  161,  141,    0,
  145,  147,  148,  159,    0,    0,    0,    0,    0,    0,
    0,    0,  237,    0,    0,    0,    0,    0,  218,  220,
  221,    0,    0,    0,    0,    0,    0,    0,  133,    0,
    0,    2,    9,    0,   19,    0,   18,    0,    0,  142,
    0,    0,    0,    0,  149,  150,  151,    0,    0,    0,
    5,    0,    3,  173,    0,   20,    0,    0,  238,  207,
  208,  209,  206,  212,  210,  211,    0,    0,    0,    0,
    0,    0,  199,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,  138,    0,    0,  131,    0,   16,
    0,    0,    0,    0,    0,   24,   27,    0,    0,   25,
   28,   29,   31,   33,   35,   37,    0,    0,  160,  152,
    0,  157,  170,    0,    0,  169,  171,    1,  172,  175,
  226,  222,  227,    0,  224,    0,    0,    0,    0,    0,
  194,  197,    0,    0,    0,  196,  198,    0,    0,    0,
  216,  217,  233,  231,  234,    0,  232,    0,  230,    0,
    0,    0,    0,  127,    0,    0,  130,    0,    0,    0,
  181,    0,    0,  136,  140,  135,    0,    0,    0,    0,
    0,   88,  103,   89,    0,    0,  101,  104,  105,    0,
   30,   32,   34,   36,   38,   22,    0,   26,    0,   41,
    0,  165,  156,    0,  167,    0,    0,  223,  202,    0,
  203,    0,  188,    0,    0,  193,    0,  200,  189,  204,
  229,  228,  112,    0,    0,    0,  111,    0,    0,  110,
    0,    0,  183,    0,    0,    0,    0,  119,    0,    0,
   94,    0,    0,  100,    0,    0,  102,    0,   23,   42,
    0,  153,  162,  225,  201,  191,    0,  184,    0,  106,
  116,    0,  108,  115,    0,  114,    0,  178,    0,    0,
    0,    0,    0,    0,  121,    0,    0,    0,   93,    0,
    0,    0,   96,   98,    0,    0,    0,  190,  107,    0,
  124,  177,   59,   39,    0,    0,    0,    0,    0,    0,
  117,    0,    0,    0,    0,    0,    0,   91,   92,   84,
    0,    0,    0,    0,  185,    0,    0,    0,   40,    0,
   60,    0,   62,   61,    0,    0,   57,   58,    0,   80,
    0,    0,    0,    0,   81,    0,    0,    0,    0,  126,
    0,    0,    0,    0,    0,    0,   74,    0,    0,    0,
   82,   83,    0,    0,   85,    0,    0,    0,    0,    0,
    0,    0,    0,    0,   43,   75,   76,    0,    0,    0,
    0,    0,    0,    0,   63,    0,    0,    0,   64,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,   66,   44,
    0,    0,   67,   45,   71,   72,   46,   47,    0,    0,
    0,    0,   73,    0,    0,    0,    0,    0,    0,    0,
    0,   69,   70,   65,    0,   68,    0,    0,    0,   48,
   49,    0,    0,
};
final static short yydgoto[] = {                          3,
    4,   15,   16,   17,   18,   19,   20,   21,   22,   23,
   24,   25,  357,  139,  140,  324,  142,  143,  144,  145,
  146,  325,  358,   46,  304,  215,  148,  216,  217,  218,
  219,  118,   47,  119,  321,  120,   60,   61,   29,   30,
   31,   32,   33,  157,   34,   35,   36,   79,   80,  203,
  102,  247,  103,  104,   98,   48,   49,   50,   51,  164,
  165,
};
final static short yysindex[] = {                       -88,
    0, 1608,    0,  852,  -40,  -16,  -24,    2,  -16,    0,
    0,    0,    0,  -49, 1173,    0,    0,    0,    0,    0,
    0,    0,  -48,  -10,  -46,    0,    0,    0,    0,  562,
    0,    0,    0,    0,   27,  897, 1197, 1222,    6, -199,
   14,   87,    0, -147,  122,  854,  -15,   67,    0,    0,
    0,   93,  113,  -27,  -32,  -28,  -83,    9,    0,   99,
  127,    0,    0,  141,    0,  139,    0, 1163,  -56,    0,
  -59,   79,  177, -128,    0,    0,    0,    0,   -8, 1426,
    0, 1232,    0,    0,   56,    0,   60,   16,    0,    0,
    0,    0,    0,    0,    0,    0,  -15,   14,  138,  -84,
    0, -122,    0,  762,   14,   14,   14,   14,   14,  187,
  217,   19,   21,  222,  -39,  220,   34,  247,  255,   47,
  258,  281,  212, 1257,    0,   96,  102,    0,   86,    0,
  -16,   -6,  -16,  878,  564,    0,    0,  242, 1598,    0,
    0,    0,    0,    0,    0,    0,  244,  287,    0,    0,
  -47,    0,    0, 1443,  -16,    0,    0,    0,    0,    0,
    0,    0,    0,   69,    0,   22,   90,  125,  331,  112,
    0,    0, 1551,  996,  338,    0,    0,   67,   67,  116,
    0,    0,    0,    0,    0,  340,    0,  349,    0,  -81,
  336,   38,  -81,    0,  354,  -81,    0,  -81,  356, 1608,
    0, 1608,  294,    0,    0,    0,  160,   71,  289,  -71,
 1462,    0,    0,    0,  152, 1366,    0,    0,    0,  -16,
    0,    0,    0,    0,    0,    0,  303,    0,  308,    0,
  172,    0,    0,  388,    0,  392,  104,    0,    0,  325,
    0,  398,    0,  996,  401,    0,  214,    0,    0,    0,
    0,    0,    0,  -81,  -81,  -51,    0,  -81,  436,    0,
  -81,  365,    0,  445,  924,  447,  344,    0,  421, 1631,
    0, 1388,  -16,    0,  386,  396,    0,  288,    0,    0,
  878,    0,    0,    0,    0,    0,  285,    0,  491,    0,
    0,  -81,    0,    0,  -81,    0,  492,    0,  721,  676,
  290,  169,  292,  315,    0,  497, 1280,   35,    0,  453,
  455,  522,    0,    0,  943,  311,  523,    0,    0,  542,
    0,    0,    0,    0, 1282,  536,  474,  549,  550,  -92,
    0,  552,   45,  -16,  553,  473,  489,    0,    0,    0,
  676,  290,  292,  -16,    0,  -81,  359,  498,    0,  510,
    0,  676,    0,    0,  362,  676,    0,    0,  373,    0,
  578,  513,  515,  380,    0,  591,  603, 1282,  604,    0,
  543,  175,  201,  189,  189,  608,    0,  609,  610,  -55,
    0,    0,  546,  547,    0,  676,  965,  622,  985,  635,
  571,  573,  574,  576,    0,    0,    0,  676,  203,  206,
 1503,  676,  448,  457,    0,  676,  458,  459,    0,  460,
  462,  464,  466,  189, 1013, 1023,  467,  585,  616, 1522,
  683,  693, 1532,  694,  696,  698,  701,  708,  709,  644,
  645,  676,  676,  722,  517,  519,  520,  659,    0,    0,
  524,  661,    0,    0,    0,    0,    0,    0,  526,  527,
 1562, 1581,    0,  732,  733,  734,  531,  736,  535,   42,
  170,    0,    0,    0,  741,    0,  746,  676,  676,    0,
    0,  914,  914,
};
final static short yyrindex[] = {                       808,
    0,    0,    0,    0,  429,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,  382,    0,    0,    0,    0,    0,  253,    0,    0,
    0,    0,    0,    0,  566,  566,    0,  665,    0,  779,
  726,    0,    0,  751,    0,  807,    0,    0,  767,    0,
    0, 1306, 1328,    0,    0,    0,    0, 1407,    0,    0,
    0,  809,    0,    0,  219,    0,  353,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
 1484,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,  566,    0,   32,    0,   63,    0,
    0,    0,    0,    0,    0,  695,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,  555,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,  240,    0,    0,    0,    0,  297,  413,    0,
    0,    0,    0,    0,    0,  440,    0,  471,    0,    0,
    0,    0,    0,    0,    0,  566,    0,    0,    0,    0,
    0,  707,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,  559,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0, 1347,    0,  499,    0,    0,    0,  327,
    0,    0,    0,    0,  539,    0,    0,    0,    0,    0,
    0,    0,    0,  715,    0,    0,    0,    0,   65,    0,
    0,    0,    0,  583,    0,    0,  144,    0,    0,    0,
    0,  565,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,  718,    0,    0,  566,    0,  607,    0,    0,    0,
  582,    0,  587,    0,    0,  238,    0,    0,    0,  579,
  580, 1042,    0,    0,    0,    0,  633,    0,    0,   66,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,  566,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
 1066,    0,    0,    0,    0,    0,    0,    0, 1089,    0,
    0,    0,    0,    0,    0,  271,    0, 1114, 1137,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,  278,    0,    0,  568,    0,    0,  615,  640,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,  672,    0,  702,    0,    0,    0,
    0,    0,    0,
};
final static short yygindex[] = {                         0,
    0,   46,   82,  -67,  933,    0,    0,    0,    0,   31,
   85,    0,  -50,    0, -114,  -68,   18,  335, -120, -118,
 -112, 1450,  -65,   -3, 1305,  584, 1059,  641, -178,    1,
    8,  -20,  882, -169,  529,    0,  737,    0,  833,    0,
    0,    0,    0,   17,  797,    0,    0,    0,  799,   -1,
  789,  647, -142,  792,   -4,  437,  438,  -62,    0,    0,
  657,
};
final static int YYTABLESIZE=1919;
static short yytable[];
static { yytable();}
static void yytable(){
yytable = new short[]{                        141,
  137,  191,  147,   40,   41,   57,  292,  115,  116,   59,
   65,  233,  121,  114,  223,   54,  224,  138,  190,   26,
   41,   26,  225,   45,  228,  163,  259,  105,   44,  106,
  356,  248,   26,  208,    2,  122,   76,  277,   44,  124,
  171,   56,  107,   77,   96,   94,   95,   26,   67,   38,
   44,  270,   78,   26,   26,   26,  162,   64,   44,  186,
   44,  188,  239,   26,   84,  213,   44,  398,  214,  127,
  141,  137,  128,  229,   76,  128,   68,  185,  256,  187,
   76,   77,   82,  212,   71,  117,  117,   77,  227,  128,
  153,   26,  166,  277,  192,  255,   63,   26,  105,   26,
  106,  248,  105,  122,  106,  123,  125,   66,  108,  238,
   89,  266,  237,  109,  159,   44,   26,   26,  160,   63,
  122,   26,  123,  125,   86,  320,   88,  207,   69,  210,
  241,    6,  105,  110,  106,    7,  151,  150,   72,  174,
  175,   26,  213,    9,   10,  117,   73,  213,   44,   13,
  276,  236,  221,  111,   76,  308,  250,  128,  105,  335,
  106,   77,   93,   63,  468,  275,   44,  334,    1,  361,
  129,   26,   69,  132,  163,    6,  320,  123,  223,    7,
  224,   96,   94,   95,   40,  355,  225,    9,   10,  269,
   26,   26,  333,   13,   11,   12,  302,  130,  262,  303,
  263,  141,  137,  213,  334,  202,  311,   58,   64,  232,
  132,   39,  213,   10,  301,  214,  278,   26,  174,   26,
  253,  310,  355,  257,   11,   12,  117,   39,  260,  112,
  212,  113,   52,  323,   53,  152,   11,   12,  141,  137,
   42,   43,  337,   11,   12,  183,  302,   11,   12,  343,
   42,   43,  215,   90,   91,   92,  349,  336,   55,  350,
  100,   26,   42,   43,  342,  155,  125,  363,  120,  312,
   42,   43,  161,   43,  348,  184,  126,  193,   42,   43,
  189,  202,  362,  202,  290,  291,  293,  195,  294,  323,
  194,  296,  469,  215,  334,  215,  213,  215,  196,  349,
  132,  334,  384,  197,  334,  349,  349,  132,  392,  394,
  132,  215,  215,  215,  215,  198,  221,  383,  403,  355,
  407,  199,  319,  391,  393,  117,  205,   42,   43,  268,
  364,  105,  349,  106,  200,  419,   27,  213,   27,  213,
  369,  213,   58,  174,  231,  349,  403,  407,  431,   27,
  418,  349,  176,  204,  349,  213,  213,  213,  213,  205,
  161,   43,  118,  430,   27,  285,  226,  105,  230,  106,
   27,   27,   27,  244,  245,  215,  117,  215,   42,   43,
   27,  219,  349,  349,  306,  205,  105,  242,  106,  243,
   90,   91,   92,  254,   69,   50,  249,    6,  251,  168,
  169,    7,   51,  349,  349,  120,  120,  252,   27,    9,
   10,  258,  214,  261,   27,   13,   27,  120,  264,  213,
  265,  213,  219,  219,  219,  273,  219,  279,  219,  334,
  327,  328,  280,   27,   27,  132,  387,  388,   27,  236,
  219,  219,  219,  219,  281,   69,  282,  355,  131,  205,
  283,  205,    7,  214,  132,  214,  286,  214,   27,  288,
  133,  134,  389,  390,  415,  388,  135,  416,  390,  222,
  235,  214,  214,  214,  214,  174,  289,  176,  174,  295,
  174,  174,  174,  174,  174,  174,  165,   21,   27,  297,
  174,  174,  174,  174,  174,  174,  174,  174,  163,  118,
  118,  195,  195,  298,  219,  305,  219,   27,   27,  215,
  313,  118,  215,  215,  215,  215,  215,  215,  215,  215,
  314,  215,  215,  215,  215,  215,  215,  215,  215,  215,
  215,  215,   50,   50,   27,  214,   27,  214,  186,   51,
   51,  178,  179,  307,   50,  181,  182,  317,  315,  318,
  322,   51,  326,  213,  329,  331,  213,  213,  213,  213,
  213,  213,  213,  213,  236,  213,  213,  213,  213,  213,
  213,  213,  213,  213,  213,  213,  330,  338,   27,  339,
  340,  345,  180,  205,  344,  346,  205,  205,  205,  205,
  205,  205,  205,  205,  351,  235,  352,  366,  205,  205,
  205,  205,  205,  205,  205,  205,  179,  353,  354,  176,
  360,  365,  176,  367,  176,  176,  176,  176,  176,  176,
  371,  334,  372,  163,  176,  176,  176,  176,  176,  176,
  176,  176,  187,  222,  373,  376,  377,  378,  219,  379,
  380,  219,  219,  219,  219,  219,  219,  219,  219,  381,
  219,  219,  219,  219,  219,  219,  219,  219,  219,  219,
  219,  382,  385,  186,  139,  386,  395,  396,  397,  214,
  399,  400,  214,  214,  214,  214,  214,  214,  214,  214,
  405,  214,  214,  214,  214,  214,  214,  214,  214,  214,
  214,  214,   52,  409,  137,  410,  236,  411,  412,  236,
  413,  236,  236,  236,  236,  236,  236,  180,  139,  435,
  421,  236,  236,  236,  236,  236,  236,  236,  236,  422,
  424,  425,  426,  139,  427,  134,  428,  235,  429,  434,
  235,  179,  235,  235,  235,  235,  235,  235,  137,   53,
  436,  439,  235,  235,  235,  235,  235,  235,  235,  235,
   21,  440,  443,  137,  444,  163,  445,  187,  163,  446,
  163,  163,  163,  163,   54,  163,  447,  448,  449,  450,
  163,  163,  163,  163,  163,  163,  163,  163,  132,  454,
  453,  455,  456,  457,  134,  459,  458,  460,  461,  139,
  462,  463,  464,  465,  466,  186,   55,  467,  186,  470,
  186,  186,  186,  186,  471,  186,   17,    6,    4,   21,
  186,  186,  186,  186,  186,  186,  186,  186,   69,  137,
   69,    6,  129,  220,  165,    7,   56,    7,  168,   52,
   52,  182,   90,    9,   10,  133,  134,  109,   99,  180,
  113,   52,  180,   57,  180,  180,  180,  180,   58,  180,
  134,  272,   95,   97,  180,  180,  180,  180,  180,  180,
  180,  180,   70,  179,  316,  206,  179,  149,  179,  179,
  179,  179,  154,  179,  370,   21,   53,   53,  179,  179,
  179,  179,  179,  179,  179,  179,  176,  170,   53,  187,
  287,  173,  187,  284,  187,  187,  187,  187,    0,  187,
    0,   54,   54,  132,  187,  187,  187,  187,  187,  187,
  187,  187,    0,   54,    0,    0,    0,    0,    0,    0,
   85,  139,   87,    0,  139,    0,   97,    0,  139,  139,
  139,   17,   69,   55,   55,  220,  139,  139,    0,    7,
  139,  139,  139,  139,    0,   55,    0,  133,  134,    0,
    0,  137,    0,  135,  137,    0,    0,    0,  137,  137,
  137,    0,    0,   56,   56,    0,  137,  137,   75,    0,
  137,  137,  137,  137,   37,   56,  100,   69,  101,  167,
  131,    0,  134,    0,    7,  134,    0,    0,  180,  134,
  134,  134,  133,  134,    0,    0,    0,  134,  134,    0,
  211,  134,  134,  134,  134,    0,   75,   21,    0,    0,
   21,    0,   75,  209,   21,   21,   21,    0,   69,   74,
    0,    6,   21,   21,    0,    7,   21,   21,   21,   21,
    0,  101,  172,    9,   10,  132,  177,    0,  132,   13,
    0,    0,  132,  132,  132,    0,  300,  240,    0,    0,
  132,  132,    0,    0,  132,  132,  132,  132,    0,    0,
   28,    0,   28,   17,    0,  341,   17,    0,    0,    0,
   17,   17,   17,   28,    0,    0,    0,    0,   17,   17,
    0,    0,   17,   17,   17,   17,   75,  402,   28,  267,
    0,    0,    0,    0,   28,   28,   28,    0,    0,    0,
    0,    0,    0,    0,   28,  177,  101,  406,    5,    0,
   69,    6,    0,    6,   99,    7,    8,    7,  100,    0,
    0,    0,    0,    9,   10,    9,   10,   11,   12,   13,
   14,   13,   28,    0,   69,  432,    0,  131,   28,    0,
   28,    7,    0,  132,   72,  433,    0,    0,    0,  133,
  134,    0,   73,   69,    0,  135,    6,   28,   28,    0,
    7,    0,   28,   72,    0,    0,   86,    0,    9,   10,
   69,   73,    0,  131,   13,    0,  101,    7,    0,  132,
   69,    0,   28,  131,    0,  133,  134,    7,    0,  132,
   77,  299,    0,    0,    0,  133,  134,    0,    0,   69,
    0,  299,  131,    0,    0,    0,    7,    0,  132,  234,
    0,    0,   28,   87,  133,  134,    0,    0,    0,    0,
  135,   69,    0,    0,  131,    0,    0,    0,    7,    0,
  132,   28,   28,    0,    0,    0,  133,  134,   78,    0,
    0,   69,  299,    0,  131,    0,    0,    0,    7,    0,
  132,    0,   69,    0,    0,    6,  133,  134,   28,    7,
   28,   79,  299,    0,    0,    0,    0,    9,   10,   69,
    0,    0,  220,   13,    0,    0,    7,    0,    0,   69,
    0,    0,  220,    0,  133,  134,    7,  136,    0,    0,
  135,    0,    0,    0,  133,  134,    0,   62,   86,    0,
  135,   86,   28,   86,   86,   86,   86,   86,   86,    0,
    0,    0,    0,   86,   86,   86,   86,   86,   86,   86,
   86,   81,   77,    0,    0,   77,    0,   77,   77,   77,
   77,   77,   77,    0,    0,    0,    0,   77,   77,   77,
   77,   77,   77,   77,   77,   87,   83,    0,   87,    0,
   87,   87,   87,   87,   87,   87,  158,    0,    0,    0,
   87,   87,   87,   87,   87,   87,   87,   87,    0,    0,
   78,    0,    0,   78,    0,   78,   78,   78,   78,   78,
   78,  201,    0,    0,    0,   78,   78,   78,   78,   78,
   78,   78,   78,   79,    0,    0,   79,    0,   79,   79,
   79,   79,   79,   79,  332,    0,  347,    0,   79,   79,
   79,   79,   79,   79,   79,   79,    0,    0,    0,    5,
    0,    0,  131,    0,    0,    0,    7,    8,  132,    5,
  154,    0,    6,    0,  133,  134,    7,    8,   11,   12,
  135,   14,    0,    0,    9,   10,    0,    0,   11,   12,
   13,   14,  158,    5,    0,    0,    6,    0,    0,    0,
    7,    8,    0,    0,    0,    0,    0,    0,    9,   10,
    0,  155,   11,   12,   13,   14,    0,    0,    5,    0,
    0,    6,    0,    0,    0,    7,    8,    0,    5,    0,
  274,    6,    0,    9,   10,    7,    8,   11,   12,   13,
   14,    0,    0,    9,   10,    0,    0,   11,   12,   13,
   14,    0,  309,    5,    0,    0,    6,    0,    0,    0,
    7,    8,    0,    0,    0,    0,    0,    0,    9,   10,
    0,  170,   11,   12,   13,   14,    5,    0,   69,  220,
    0,  131,    0,    7,    8,    7,    0,  132,    0,    0,
  156,  133,  134,  133,  134,   11,   12,  135,   14,  135,
    0,    0,  154,    0,    0,  154,    0,  235,    0,  154,
    0,  154,  154,    0,    0,    0,    0,  154,  154,  154,
  154,    0,    0,  154,  158,    0,  271,  158,    0,    0,
    0,  158,    0,  158,  158,    0,    0,    0,    0,  158,
  158,  158,  158,  155,    0,  158,  155,    0,  197,    0,
  155,    0,  155,  155,    0,    0,    0,    0,  155,  155,
  155,  155,   69,    0,  155,  131,    0,  417,    0,    7,
    0,  132,   72,    0,  359,    0,    0,  133,  134,    0,
   73,    0,    0,  135,   69,    0,  437,  131,    0,    0,
    0,    7,    0,  132,   72,    0,  441,    0,    0,  133,
  134,    0,   73,  170,    0,  135,  170,    0,    0,    0,
  170,    0,    0,  170,    0,  246,    0,    0,  170,  170,
  166,  170,   69,    0,  170,    6,  437,    0,    0,    7,
    0,  404,   72,  408,    0,    0,    0,    9,   10,   69,
   73,    0,    6,   13,    0,  441,    7,    0,    0,   72,
    0,    0,    0,    0,    9,   10,    0,   73,   69,    0,
   13,  220,    0,    0,  438,    7,    0,  442,   72,    0,
    0,    0,    0,  133,  134,    0,   73,    0,    0,  135,
  197,    0,    0,  197,    0,  192,  192,  197,    0,    0,
    0,    0,    0,    0,    0,  197,  197,    0,    0,   69,
    0,  197,  131,    0,  404,  408,    7,    0,  132,    0,
    0,    0,    0,    0,  133,  134,  438,  442,   69,    0,
  135,  131,    0,    0,    0,    7,    0,  132,   69,    0,
  368,  131,    0,  133,  134,    7,    0,  132,    0,  299,
    0,  374,    0,  133,  134,  375,    0,   69,    0,  299,
    6,    0,    0,    0,    7,    0,    0,    0,   69,    0,
    0,  220,    9,   10,    0,    7,    0,    0,   13,    0,
    0,    0,    0,  133,  134,  401,    0,   69,    0,  135,
  220,    0,    0,    0,    7,    0,    0,  414,    0,    0,
    0,  420,  133,  134,    5,  423,    0,  131,  135,    0,
    0,    7,    8,  132,    5,    0,    0,    6,    0,  133,
  134,    7,    8,   11,   12,  135,   14,    0,    0,    9,
   10,  451,  452,   11,   12,   13,   14,    5,    0,    0,
  220,    0,    0,    0,    7,    8,    0,    0,    0,    0,
    0,    0,  133,  134,    0,    0,   11,   12,  135,   14,
    0,    0,    0,    0,    0,    0,    0,  472,  473,
};
}
static short yycheck[];
static { yycheck(); }
static void yycheck() {
yycheck = new short[] {                         68,
   68,   41,   68,   44,   61,    9,   58,   40,   41,   59,
   59,   59,   41,   41,  135,   40,  135,   68,   58,    2,
   61,    4,  135,   40,  139,   88,  196,   43,   45,   45,
  123,  174,   15,   40,  123,   56,   36,  216,   45,  123,
  125,   40,   47,   36,   60,   61,   62,   30,   59,    4,
   45,  123,   36,   36,   37,   38,   41,  257,   45,   41,
   45,   41,   41,   46,   59,  134,   45,  123,  134,   61,
  139,  139,   41,  139,   74,   44,  123,   59,   41,   59,
   80,   74,   37,  134,   58,   55,   56,   80,  139,   58,
   74,   74,   97,  272,  115,   58,   15,   80,   43,   82,
   45,  244,   43,   41,   45,   41,   41,   23,   42,   41,
  258,   41,   44,   47,   59,   45,   99,  100,   59,   38,
   58,  104,   58,   58,   40,  295,   40,  131,  257,  133,
   41,  260,   43,   41,   45,  264,   58,   59,  267,  262,
  263,  124,  211,  272,  273,  115,  275,  216,   45,  278,
  216,  155,  135,   41,  154,  270,   41,   59,   43,  125,
   45,  154,   41,   82,  123,  216,   45,  260,  257,  125,
   44,  154,  257,  266,  237,  260,  346,  261,  299,  264,
  299,   60,   61,   62,   44,  278,  299,  272,  273,  261,
  173,  174,  307,  278,  276,  277,  265,   59,  200,  265,
  202,  270,  270,  272,  260,  124,  272,  257,  257,  257,
  266,  268,  281,  273,  265,  281,  220,  200,    0,  202,
  190,  272,  278,  193,  276,  277,  196,  268,  198,  257,
  281,  259,  257,  299,  259,   59,  276,  277,  307,  307,
  257,  258,  308,  276,  277,   59,  315,  276,  277,  315,
  257,  258,    0,  269,  270,  271,  325,  308,  257,  325,
  123,  244,  257,  258,  315,  274,  258,  333,  125,  273,
  257,  258,  257,  258,  325,   59,  268,   58,  257,  258,
   59,  200,  333,  202,  254,  255,  256,   41,  258,  355,
  257,  261,  123,   41,  260,   43,    0,   45,   44,  368,
  266,  260,  368,  257,  260,  374,  375,  266,  374,  375,
  266,   59,   60,   61,   62,   58,  299,  368,  387,  278,
  389,   41,  292,  374,  375,  295,    0,  257,  258,   41,
  334,   43,  401,   45,  123,  401,    2,   41,    4,   43,
  344,   45,  257,  125,   58,  414,  415,  416,  414,   15,
  401,  420,    0,  258,  423,   59,   60,   61,   62,  258,
  257,  258,  125,  414,   30,   41,  125,   43,  125,   45,
   36,   37,   38,  262,  263,  123,  346,  125,  257,  258,
   46,    0,  451,  452,   41,   59,   43,  263,   45,   59,
  269,  270,  271,   58,  257,  125,   59,  260,   59,  262,
  263,  264,  125,  472,  473,  262,  263,   59,   74,  272,
  273,   58,    0,   58,   80,  278,   82,  274,  125,  123,
  261,  125,   41,   42,   43,  274,   45,  125,   47,  260,
  262,  263,  125,   99,  100,  266,  262,  263,  104,    0,
   59,   60,   61,   62,  273,  257,   59,  278,  260,  123,
   59,  125,  264,   41,  266,   43,   59,   45,  124,   59,
  272,  273,  262,  263,  262,  263,  278,  262,  263,  135,
    0,   59,   60,   61,   62,  257,  263,  125,  260,   44,
  262,  263,  264,  265,  266,  267,   58,   59,  154,  125,
  272,  273,  274,  275,  276,  277,  278,  279,    0,  262,
  263,  262,  263,   59,  123,   59,  125,  173,  174,  257,
  125,  274,  260,  261,  262,  263,  264,  265,  266,  267,
  125,  269,  270,  271,  272,  273,  274,  275,  276,  277,
  278,  279,  262,  263,  200,  123,  202,  125,    0,  262,
  263,  105,  106,  123,  274,  108,  109,  263,  261,   59,
   59,  274,  263,  257,  263,   59,  260,  261,  262,  263,
  264,  265,  266,  267,  125,  269,  270,  271,  272,  273,
  274,  275,  276,  277,  278,  279,  262,  125,  244,  125,
   59,   59,    0,  257,  274,   44,  260,  261,  262,  263,
  264,  265,  266,  267,   59,  125,  123,  125,  272,  273,
  274,  275,  276,  277,  278,  279,    0,   59,   59,  257,
   59,   59,  260,  125,  262,  263,  264,  265,  266,  267,
  262,  260,  125,  125,  272,  273,  274,  275,  276,  277,
  278,  279,    0,  299,  125,  263,   59,  125,  257,  125,
  261,  260,  261,  262,  263,  264,  265,  266,  267,   59,
  269,  270,  271,  272,  273,  274,  275,  276,  277,  278,
  279,   59,   59,  125,    0,  123,   59,   59,   59,  257,
  125,  125,  260,  261,  262,  263,  264,  265,  266,  267,
   59,  269,  270,  271,  272,  273,  274,  275,  276,  277,
  278,  279,  125,   59,    0,  125,  257,  125,  125,  260,
  125,  262,  263,  264,  265,  266,  267,  125,   44,  125,
  263,  272,  273,  274,  275,  276,  277,  278,  279,  263,
  263,  263,  263,   59,  263,    0,  263,  257,  263,  263,
  260,  125,  262,  263,  264,  265,  266,  267,   44,  125,
  125,   59,  272,  273,  274,  275,  276,  277,  278,  279,
    0,   59,   59,   59,   59,  257,   59,  125,  260,   59,
  262,  263,  264,  265,  125,  267,   59,   59,  125,  125,
  272,  273,  274,  275,  276,  277,  278,  279,    0,  263,
   59,  263,  263,  125,   59,  125,  263,  262,  262,  125,
   59,   59,   59,  263,   59,  257,  125,  263,  260,   59,
  262,  263,  264,  265,   59,  267,    0,    0,    0,   59,
  272,  273,  274,  275,  276,  277,  278,  279,  257,  125,
  257,  260,  257,  260,   58,  264,  125,  264,  274,  262,
  263,  125,  274,  272,  273,  272,  273,  123,  274,  257,
  123,  274,  260,  262,  262,  263,  264,  265,  262,  267,
  125,  211,  274,  274,  272,  273,  274,  275,  276,  277,
  278,  279,   30,  257,  281,  129,  260,   71,  262,  263,
  264,  265,   74,  267,  346,  125,  262,  263,  272,  273,
  274,  275,  276,  277,  278,  279,  125,   99,  274,  257,
  244,  100,  260,  237,  262,  263,  264,  265,   -1,  267,
   -1,  262,  263,  125,  272,  273,  274,  275,  276,  277,
  278,  279,   -1,  274,   -1,   -1,   -1,   -1,   -1,   -1,
   39,  257,   41,   -1,  260,   -1,   45,   -1,  264,  265,
  266,  125,  257,  262,  263,  260,  272,  273,   -1,  264,
  276,  277,  278,  279,   -1,  274,   -1,  272,  273,   -1,
   -1,  257,   -1,  278,  260,   -1,   -1,   -1,  264,  265,
  266,   -1,   -1,  262,  263,   -1,  272,  273,   36,   -1,
  276,  277,  278,  279,  123,  274,  123,  257,   46,   98,
  260,   -1,  257,   -1,  264,  260,   -1,   -1,  107,  264,
  265,  266,  272,  273,   -1,   -1,   -1,  272,  273,   -1,
  123,  276,  277,  278,  279,   -1,   74,  257,   -1,   -1,
  260,   -1,   80,  132,  264,  265,  266,   -1,  257,  123,
   -1,  260,  272,  273,   -1,  264,  276,  277,  278,  279,
   -1,   99,  100,  272,  273,  257,  104,   -1,  260,  278,
   -1,   -1,  264,  265,  266,   -1,  123,  166,   -1,   -1,
  272,  273,   -1,   -1,  276,  277,  278,  279,   -1,   -1,
    2,   -1,    4,  257,   -1,  123,  260,   -1,   -1,   -1,
  264,  265,  266,   15,   -1,   -1,   -1,   -1,  272,  273,
   -1,   -1,  276,  277,  278,  279,  154,  123,   30,  208,
   -1,   -1,   -1,   -1,   36,   37,   38,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   46,  173,  174,  123,  257,   -1,
  257,  260,   -1,  260,  261,  264,  265,  264,  123,   -1,
   -1,   -1,   -1,  272,  273,  272,  273,  276,  277,  278,
  279,  278,   74,   -1,  257,  123,   -1,  260,   80,   -1,
   82,  264,   -1,  266,  267,  123,   -1,   -1,   -1,  272,
  273,   -1,  275,  257,   -1,  278,  260,   99,  100,   -1,
  264,   -1,  104,  267,   -1,   -1,  125,   -1,  272,  273,
  257,  275,   -1,  260,  278,   -1,  244,  264,   -1,  266,
  257,   -1,  124,  260,   -1,  272,  273,  264,   -1,  266,
  125,  278,   -1,   -1,   -1,  272,  273,   -1,   -1,  257,
   -1,  278,  260,   -1,   -1,   -1,  264,   -1,  266,  151,
   -1,   -1,  154,  125,  272,  273,   -1,   -1,   -1,   -1,
  278,  257,   -1,   -1,  260,   -1,   -1,   -1,  264,   -1,
  266,  173,  174,   -1,   -1,   -1,  272,  273,  125,   -1,
   -1,  257,  278,   -1,  260,   -1,   -1,   -1,  264,   -1,
  266,   -1,  257,   -1,   -1,  260,  272,  273,  200,  264,
  202,  125,  278,   -1,   -1,   -1,   -1,  272,  273,  257,
   -1,   -1,  260,  278,   -1,   -1,  264,   -1,   -1,  257,
   -1,   -1,  260,   -1,  272,  273,  264,  125,   -1,   -1,
  278,   -1,   -1,   -1,  272,  273,   -1,  125,  257,   -1,
  278,  260,  244,  262,  263,  264,  265,  266,  267,   -1,
   -1,   -1,   -1,  272,  273,  274,  275,  276,  277,  278,
  279,  125,  257,   -1,   -1,  260,   -1,  262,  263,  264,
  265,  266,  267,   -1,   -1,   -1,   -1,  272,  273,  274,
  275,  276,  277,  278,  279,  257,  125,   -1,  260,   -1,
  262,  263,  264,  265,  266,  267,  125,   -1,   -1,   -1,
  272,  273,  274,  275,  276,  277,  278,  279,   -1,   -1,
  257,   -1,   -1,  260,   -1,  262,  263,  264,  265,  266,
  267,  125,   -1,   -1,   -1,  272,  273,  274,  275,  276,
  277,  278,  279,  257,   -1,   -1,  260,   -1,  262,  263,
  264,  265,  266,  267,  125,   -1,  125,   -1,  272,  273,
  274,  275,  276,  277,  278,  279,   -1,   -1,   -1,  257,
   -1,   -1,  260,   -1,   -1,   -1,  264,  265,  266,  257,
  125,   -1,  260,   -1,  272,  273,  264,  265,  276,  277,
  278,  279,   -1,   -1,  272,  273,   -1,   -1,  276,  277,
  278,  279,  125,  257,   -1,   -1,  260,   -1,   -1,   -1,
  264,  265,   -1,   -1,   -1,   -1,   -1,   -1,  272,  273,
   -1,  125,  276,  277,  278,  279,   -1,   -1,  257,   -1,
   -1,  260,   -1,   -1,   -1,  264,  265,   -1,  257,   -1,
  125,  260,   -1,  272,  273,  264,  265,  276,  277,  278,
  279,   -1,   -1,  272,  273,   -1,   -1,  276,  277,  278,
  279,   -1,  125,  257,   -1,   -1,  260,   -1,   -1,   -1,
  264,  265,   -1,   -1,   -1,   -1,   -1,   -1,  272,  273,
   -1,  125,  276,  277,  278,  279,  257,   -1,  257,  260,
   -1,  260,   -1,  264,  265,  264,   -1,  266,   -1,   -1,
  125,  272,  273,  272,  273,  276,  277,  278,  279,  278,
   -1,   -1,  257,   -1,   -1,  260,   -1,  125,   -1,  264,
   -1,  266,  267,   -1,   -1,   -1,   -1,  272,  273,  274,
  275,   -1,   -1,  278,  257,   -1,  125,  260,   -1,   -1,
   -1,  264,   -1,  266,  267,   -1,   -1,   -1,   -1,  272,
  273,  274,  275,  257,   -1,  278,  260,   -1,  125,   -1,
  264,   -1,  266,  267,   -1,   -1,   -1,   -1,  272,  273,
  274,  275,  257,   -1,  278,  260,   -1,  125,   -1,  264,
   -1,  266,  267,   -1,  330,   -1,   -1,  272,  273,   -1,
  275,   -1,   -1,  278,  257,   -1,  125,  260,   -1,   -1,
   -1,  264,   -1,  266,  267,   -1,  125,   -1,   -1,  272,
  273,   -1,  275,  257,   -1,  278,  260,   -1,   -1,   -1,
  264,   -1,   -1,  267,   -1,  125,   -1,   -1,  272,  273,
  274,  275,  257,   -1,  278,  260,  125,   -1,   -1,  264,
   -1,  387,  267,  389,   -1,   -1,   -1,  272,  273,  257,
  275,   -1,  260,  278,   -1,  125,  264,   -1,   -1,  267,
   -1,   -1,   -1,   -1,  272,  273,   -1,  275,  257,   -1,
  278,  260,   -1,   -1,  420,  264,   -1,  423,  267,   -1,
   -1,   -1,   -1,  272,  273,   -1,  275,   -1,   -1,  278,
  257,   -1,   -1,  260,   -1,  262,  263,  264,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,  272,  273,   -1,   -1,  257,
   -1,  278,  260,   -1,  460,  461,  264,   -1,  266,   -1,
   -1,   -1,   -1,   -1,  272,  273,  472,  473,  257,   -1,
  278,  260,   -1,   -1,   -1,  264,   -1,  266,  257,   -1,
  341,  260,   -1,  272,  273,  264,   -1,  266,   -1,  278,
   -1,  352,   -1,  272,  273,  356,   -1,  257,   -1,  278,
  260,   -1,   -1,   -1,  264,   -1,   -1,   -1,  257,   -1,
   -1,  260,  272,  273,   -1,  264,   -1,   -1,  278,   -1,
   -1,   -1,   -1,  272,  273,  386,   -1,  257,   -1,  278,
  260,   -1,   -1,   -1,  264,   -1,   -1,  398,   -1,   -1,
   -1,  402,  272,  273,  257,  406,   -1,  260,  278,   -1,
   -1,  264,  265,  266,  257,   -1,   -1,  260,   -1,  272,
  273,  264,  265,  276,  277,  278,  279,   -1,   -1,  272,
  273,  432,  433,  276,  277,  278,  279,  257,   -1,   -1,
  260,   -1,   -1,   -1,  264,  265,   -1,   -1,   -1,   -1,
   -1,   -1,  272,  273,   -1,   -1,  276,  277,  278,  279,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,  468,  469,
};
}
final static short YYFINAL=3;
final static short YYMAXTOKEN=279;
final static String yyname[] = {
"end-of-file",null,null,null,null,null,null,null,null,null,null,null,null,null,
null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,
null,null,null,null,null,null,null,null,null,null,"'('","')'","'*'","'+'","','",
"'-'",null,"'/'",null,null,null,null,null,null,null,null,null,null,"':'","';'",
"'<'","'='","'>'",null,null,null,null,null,null,null,null,null,null,null,null,
null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,
null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,
null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,
"'{'",null,"'}'",null,null,null,null,null,null,null,null,null,null,null,null,
null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,
null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,
null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,
null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,
null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,
null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,
null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,
null,null,null,null,null,null,null,"ID","CTE","CADENA","IF","THEN","ELSE",
"ENDIF","OUT","FUN","RETURN","BREAK","ASIGNACION","COMP_MAYOR_IGUAL",
"COMP_MENOR_IGUAL","COMP_DISTINTO","WHEN","DO","UNTIL","CONTINUE","DOUBLE64",
"UINT16","DEFER","CONST",
};
final static String yyrule[] = {
"$accept : programa",
"programa : nombre_programa '{' sentencias '}'",
"programa : '{' sentencias '}'",
"programa : nombre_programa sentencias '}'",
"programa : nombre_programa '{' sentencias",
"programa : nombre_programa '{' '}'",
"programa :",
"nombre_programa : ID",
"sentencias : sentencia",
"sentencias : sentencias sentencia",
"sentencia : sentencia_declarativa",
"sentencia : sentencia_ejecutable",
"sentencia_declarativa : sentencia_declarativa_variables",
"sentencia_declarativa : funcion_con_return",
"sentencia_declarativa : funcion_sin_return",
"sentencia_declarativa : declaracion_constantes",
"sentencia_declarativa_variables : tipo lista_de_variables ';'",
"sentencia_declarativa_variables : tipo lista_de_variables",
"sentencia_declarativa_variables : lista_de_variables ';'",
"sentencia_declarativa_variables : tipo ';'",
"lista_de_variables : ID ',' lista_de_variables",
"lista_de_variables : ID",
"funcion_con_return : encabezado_funcion '{' sentencia_return '}'",
"funcion_con_return : encabezado_funcion '{' sentencias_funcion sentencia_return '}'",
"funcion_con_return : encabezado_funcion '{' '}'",
"sentencias_funcion : sentencia_funcion",
"sentencias_funcion : sentencias_funcion sentencia_funcion",
"sentencia_funcion : sentencia_declarativa",
"sentencia_funcion : sentencia_ejecutable_funcion",
"sentencia_ejecutable_funcion : asignacion",
"sentencia_ejecutable_funcion : DEFER asignacion",
"sentencia_ejecutable_funcion : imprimir",
"sentencia_ejecutable_funcion : DEFER imprimir",
"sentencia_ejecutable_funcion : sentencia_when_con_return",
"sentencia_ejecutable_funcion : DEFER sentencia_when_con_return",
"sentencia_ejecutable_funcion : sentencia_do_con_return",
"sentencia_ejecutable_funcion : DEFER sentencia_do_con_return",
"sentencia_ejecutable_funcion : sentencia_seleccion_simple_con_return",
"sentencia_ejecutable_funcion : DEFER sentencia_seleccion_simple_con_return",
"sentencias_ejecutables_funcion : sentencia_ejecutable_funcion",
"sentencias_ejecutables_funcion : sentencias_ejecutables_funcion sentencia_ejecutable_funcion",
"funcion_sin_return : encabezado_funcion '{' sentencia_seleccion_compuesta_con_return '}'",
"funcion_sin_return : encabezado_funcion '{' sentencias_funcion sentencia_seleccion_compuesta_con_return '}'",
"sentencia_seleccion_compuesta_con_return : IF condicion THEN sentencia_seleccion_compuesta_con_return_simple ELSE sentencia_seleccion_compuesta_con_return_simple ENDIF ';'",
"sentencia_seleccion_compuesta_con_return : IF condicion THEN '{' sentencias_ejecutables_funcion sentencia_return '}' ELSE sentencia_seleccion_compuesta_con_return_simple ENDIF ';'",
"sentencia_seleccion_compuesta_con_return : IF condicion THEN '{' sentencias_ejecutables_funcion sentencia_seleccion_compuesta_con_return '}' ELSE sentencia_seleccion_compuesta_con_return_simple ENDIF ';'",
"sentencia_seleccion_compuesta_con_return : IF condicion THEN sentencia_seleccion_compuesta_con_return_simple ELSE '{' sentencias_ejecutables_funcion sentencia_return '}' ENDIF ';'",
"sentencia_seleccion_compuesta_con_return : IF condicion THEN sentencia_seleccion_compuesta_con_return_simple ELSE '{' sentencias_ejecutables_funcion sentencia_seleccion_compuesta_con_return '}' ENDIF ';'",
"sentencia_seleccion_compuesta_con_return : IF condicion THEN '{' sentencias_ejecutables_funcion sentencia_return '}' ELSE '{' sentencias_ejecutables_funcion sentencia_seleccion_compuesta_con_return_simple '}' ENDIF ';'",
"sentencia_seleccion_compuesta_con_return : IF condicion THEN '{' sentencias_ejecutables_funcion sentencia_seleccion_compuesta_con_return '}' ELSE '{' sentencias_ejecutables_funcion sentencia_seleccion_compuesta_con_return_simple '}' ENDIF ';'",
"sentencia_seleccion_compuesta_con_return : IF condicion THEN sentencia_seleccion_compuesta_con_return_simple ELSE sentencia_seleccion_compuesta_con_return_simple ENDIF",
"sentencia_seleccion_compuesta_con_return : IF condicion THEN '{' sentencias_ejecutables_funcion sentencia_return '}' ELSE sentencia_seleccion_compuesta_con_return_simple ENDIF",
"sentencia_seleccion_compuesta_con_return : IF condicion THEN '{' sentencias_ejecutables_funcion sentencia_seleccion_compuesta_con_return '}' ELSE sentencia_seleccion_compuesta_con_return_simple ENDIF",
"sentencia_seleccion_compuesta_con_return : IF condicion THEN sentencia_seleccion_compuesta_con_return_simple ELSE '{' sentencias_ejecutables_funcion sentencia_return '}' ENDIF",
"sentencia_seleccion_compuesta_con_return : IF condicion THEN sentencia_seleccion_compuesta_con_return_simple ELSE '{' sentencias_ejecutables_funcion sentencia_seleccion_compuesta_con_return '}' ENDIF",
"sentencia_seleccion_compuesta_con_return : IF condicion THEN '{' sentencias_ejecutables_funcion sentencia_return '}' ELSE '{' sentencias_ejecutables_funcion sentencia_seleccion_compuesta_con_return_simple '}' ENDIF",
"sentencia_seleccion_compuesta_con_return : IF condicion THEN '{' sentencias_ejecutables_funcion sentencia_seleccion_compuesta_con_return '}' ELSE '{' sentencias_ejecutables_funcion sentencia_seleccion_compuesta_con_return_simple '}' ENDIF",
"sentencia_seleccion_compuesta_con_return_simple : sentencia_return",
"sentencia_seleccion_compuesta_con_return_simple : sentencia_seleccion_compuesta_con_return",
"sentencia_seleccion_compuesta_con_return_simple : DEFER sentencia_seleccion_compuesta_con_return",
"sentencia_seleccion_simple_con_return : IF condicion THEN sentencia_return ENDIF ';'",
"sentencia_seleccion_simple_con_return : IF condicion THEN sentencia_seleccion_compuesta_con_return ENDIF ';'",
"sentencia_seleccion_simple_con_return : IF condicion THEN sentencia_ejecutable_funcion ENDIF ';'",
"sentencia_seleccion_simple_con_return : IF condicion THEN '{' sentencias_ejecutables_funcion sentencia_return '}' ENDIF ';'",
"sentencia_seleccion_simple_con_return : IF condicion THEN '{' sentencias_ejecutables_funcion sentencia_seleccion_compuesta_con_return '}' ENDIF ';'",
"sentencia_seleccion_simple_con_return : IF condicion THEN '{' sentencias_ejecutables_funcion sentencia_return '}' ELSE '{' sentencias_ejecutables_funcion '}' ENDIF ';'",
"sentencia_seleccion_simple_con_return : IF condicion THEN '{' sentencias_ejecutables_funcion sentencia_return '}' ELSE sentencia_ejecutable_funcion ENDIF ';'",
"sentencia_seleccion_simple_con_return : IF condicion THEN '{' sentencias_ejecutables_funcion sentencia_seleccion_compuesta_con_return '}' ELSE sentencia_ejecutable_funcion ENDIF ';'",
"sentencia_seleccion_simple_con_return : IF condicion THEN '{' sentencias_ejecutables_funcion sentencia_seleccion_compuesta_con_return '}' ELSE '{' sentencias_ejecutables_funcion '}' ENDIF ';'",
"sentencia_seleccion_simple_con_return : IF condicion THEN '{' sentencias_ejecutables_funcion '}' ELSE '{' sentencias_ejecutables_funcion sentencia_return '}' ENDIF ';'",
"sentencia_seleccion_simple_con_return : IF condicion THEN '{' sentencias_ejecutables_funcion '}' ELSE '{' sentencias_ejecutables_funcion sentencia_seleccion_compuesta_con_return '}' ENDIF ';'",
"sentencia_seleccion_simple_con_return : IF condicion THEN sentencia_ejecutable_funcion ELSE '{' sentencias_ejecutables_funcion sentencia_return '}' ENDIF ';'",
"sentencia_seleccion_simple_con_return : IF condicion THEN sentencia_ejecutable_funcion ELSE '{' sentencias_ejecutables_funcion sentencia_seleccion_compuesta_con_return '}' ENDIF ';'",
"sentencia_seleccion_simple_con_return : IF condicion THEN '{' sentencias_ejecutables_funcion '}' ELSE '{' sentencias_ejecutables_funcion '}' ENDIF ';'",
"sentencia_when_con_return : WHEN condicion THEN '{' sentencia_funcion '}' ';'",
"sentencia_when_con_return : WHEN condicion THEN '{' sentencia_funcion sentencia_return '}' ';'",
"sentencia_when_con_return : WHEN condicion THEN '{' sentencia_funcion sentencia_seleccion_compuesta_con_return '}' ';'",
"sentencia_when_con_return : WHEN condicion THEN '{' sentencia_funcion '}'",
"sentencia_when_con_return : WHEN condicion THEN '{' sentencia_funcion sentencia_return '}'",
"sentencia_when_con_return : WHEN condicion THEN '{' sentencia_funcion sentencia_seleccion_compuesta_con_return '}'",
"sentencia_when_con_return : WHEN condicion THEN '{' '}' ';'",
"sentencia_when_con_return : WHEN condicion '{' sentencia_funcion '}' ';'",
"sentencia_when_con_return : WHEN condicion '{' sentencia_funcion sentencia_return '}' ';'",
"sentencia_when_con_return : WHEN condicion '{' sentencia_funcion sentencia_seleccion_compuesta_con_return '}' ';'",
"sentencia_do_con_return : DO bloque_sentencias_ejecutables_do_con_return UNTIL condicion ';'",
"sentencia_do_con_return : etiqueta ':' DO bloque_sentencias_ejecutables_do_con_return UNTIL condicion ';'",
"sentencia_do_con_return : DO bloque_sentencias_ejecutables_do_con_return UNTIL condicion",
"sentencia_do_con_return : etiqueta ':' DO bloque_sentencias_ejecutables_do_con_return UNTIL condicion",
"bloque_sentencias_ejecutables_do_con_return : sentencia_return",
"bloque_sentencias_ejecutables_do_con_return : sentencia_seleccion_compuesta_con_return",
"bloque_sentencias_ejecutables_do_con_return : sentencias_ejecutables_do_funcion",
"bloque_sentencias_ejecutables_do_con_return : '{' sentencias_ejecutables_do_funcion sentencia_return '}'",
"bloque_sentencias_ejecutables_do_con_return : '{' sentencias_ejecutables_do_funcion sentencia_seleccion_compuesta_con_return '}'",
"bloque_sentencias_ejecutables_do_con_return : '{' sentencias_ejecutables_do_funcion '}'",
"bloque_sentencias_ejecutables_do_con_return : '{' '}'",
"bloque_sentencias_ejecutables_do_con_return : '{' sentencias_ejecutables_do_funcion sentencia_return",
"bloque_sentencias_ejecutables_do_con_return : sentencias_ejecutables_do_funcion sentencia_return '}'",
"bloque_sentencias_ejecutables_do_con_return : '{' sentencias_ejecutables_do_funcion sentencia_seleccion_compuesta_con_return",
"bloque_sentencias_ejecutables_do_con_return : sentencias_ejecutables_do_funcion sentencia_seleccion_compuesta_con_return '}'",
"bloque_sentencias_ejecutables_do_con_return : '{' sentencias_ejecutables_do_funcion",
"bloque_sentencias_ejecutables_do_con_return : sentencias_ejecutables_do_funcion '}'",
"sentencias_ejecutables_do_funcion : sentencia_ejecutable_do_funcion",
"sentencias_ejecutables_do_funcion : sentencias_ejecutables_do_funcion sentencia_ejecutable_do_funcion",
"sentencia_ejecutable_do_funcion : sentencia_ejecutable_funcion",
"sentencia_ejecutable_do_funcion : sentencia_break",
"sentencia_ejecutable_do_funcion : sentencia_continue",
"encabezado_funcion : FUN ID '(' ')' ':' tipo",
"encabezado_funcion : FUN ID '(' lista_de_parametros ')' ':' tipo",
"encabezado_funcion : FUN ID '(' lista_de_parametros ')' tipo",
"encabezado_funcion : FUN ID '(' ')' ':'",
"encabezado_funcion : FUN '(' ')' ':' tipo",
"encabezado_funcion : FUN ID ')' ':' tipo",
"encabezado_funcion : FUN ID '(' ':' tipo",
"encabezado_funcion : FUN ID '(' lista_de_parametros ')' ':'",
"encabezado_funcion : FUN '(' lista_de_parametros ')' ':' tipo",
"encabezado_funcion : FUN ID lista_de_parametros ')' ':' tipo",
"encabezado_funcion : FUN ID '(' lista_de_parametros ':' tipo",
"sentencia_return : RETURN '(' expresion ')' ';'",
"sentencia_return : RETURN '(' expresion ')'",
"sentencia_return : RETURN expresion ')'",
"sentencia_return : RETURN '(' expresion",
"sentencia_return : RETURN '(' ')' ';'",
"lista_de_parametros : parametro",
"lista_de_parametros : parametro ',' parametro",
"lista_de_parametros : parametro ',' parametro ',' lista_parametros_exceso",
"lista_parametros_exceso : parametro",
"lista_parametros_exceso : parametro ',' lista_parametros_exceso",
"parametro : tipo ID",
"parametro : tipo",
"$$1 :",
"parametro : $$1 ID",
"declaracion_constantes : CONST lista_declaracion_constantes ';'",
"declaracion_constantes : CONST lista_declaracion_constantes",
"declaracion_constantes : CONST ';'",
"lista_declaracion_constantes : declaracion_constante",
"lista_declaracion_constantes : declaracion_constante ',' lista_declaracion_constantes",
"declaracion_constante : ID ASIGNACION CTE",
"declaracion_constante : ID ASIGNACION",
"declaracion_constante : ID CTE",
"declaracion_constante : ID",
"declaracion_constante : ID '=' CTE",
"sentencia_ejecutable : sentencia_ejecutable_simple",
"sentencia_ejecutable : keyword_defer sentencia_ejecutable_simple",
"keyword_defer : DEFER",
"sentencia_ejecutable_simple : asignacion",
"sentencia_ejecutable_simple : seleccion",
"sentencia_ejecutable_simple : imprimir",
"sentencia_ejecutable_simple : sentencia_when",
"sentencia_ejecutable_simple : sentencia_do",
"sentencia_ejecutable_do : sentencia_ejecutable",
"sentencia_ejecutable_do : sentencia_break",
"sentencia_ejecutable_do : sentencia_continue",
"sentencia_break : BREAK ';'",
"sentencia_break : BREAK ':' etiqueta ';'",
"sentencia_break : BREAK",
"sentencia_break : BREAK ':' etiqueta",
"sentencia_break : BREAK ':' ';'",
"sentencia_continue : CONTINUE ';'",
"sentencia_continue : CONTINUE",
"sentencia_do : sentencia_do_simple",
"sentencia_do : sentencia_do_etiqueta ':' sentencia_do_simple",
"sentencia_do_etiqueta : etiqueta",
"sentencia_do_simple : keyword_do bloque_sentencias_ejecutables_do UNTIL condicion ';'",
"sentencia_do_simple : keyword_do bloque_sentencias_ejecutables_do UNTIL condicion",
"keyword_do : DO",
"etiqueta : ID",
"bloque_sentencias_ejecutables_do : sentencia_ejecutable_do",
"bloque_sentencias_ejecutables_do : '{' sentencias_ejecutables_do '}'",
"bloque_sentencias_ejecutables_do : '{' sentencias_ejecutables_do",
"bloque_sentencias_ejecutables_do : sentencias_ejecutables_do '}'",
"sentencias_ejecutables_do : sentencia_ejecutable_do",
"sentencias_ejecutables_do : sentencias_ejecutables_do sentencia_ejecutable_do",
"asignacion : ID ASIGNACION expresion ';'",
"asignacion : ID ASIGNACION ';'",
"asignacion : ID ASIGNACION expresion",
"asignacion : ID '=' expresion ';'",
"asignacion : ID '=' expresion",
"sentencia_when : WHEN condicion THEN '{' sentencias_when '}' ';'",
"sentencia_when : WHEN condicion '{' sentencias_when '}' ';'",
"sentencia_when : WHEN condicion THEN '{' sentencias_when '}'",
"sentencia_when : WHEN condicion '{' sentencias_when '}'",
"sentencia_when : WHEN condicion '{' '}'",
"sentencias_when : sentencia",
"sentencias_when : sentencia sentencias_when",
"seleccion : IF condicion THEN bloque_sentencias_ejecutables_seleccion_then ENDIF ';'",
"seleccion : IF condicion THEN bloque_sentencias_ejecutables_seleccion_then ELSE bloque_sentencias_ejecutables_seleccion_else ENDIF ';'",
"seleccion : IF condicion THEN bloque_sentencias_ejecutables_seleccion_then ENDIF",
"seleccion : IF condicion THEN bloque_sentencias_ejecutables_seleccion_then ELSE bloque_sentencias_ejecutables_seleccion_else ENDIF",
"seleccion : IF condicion THEN ENDIF ';'",
"seleccion : IF condicion bloque_sentencias_ejecutables_seleccion_then ENDIF ';'",
"seleccion : IF condicion bloque_sentencias_ejecutables_seleccion_then ELSE bloque_sentencias_ejecutables_seleccion_else ENDIF ';'",
"seleccion : IF condicion THEN ELSE ENDIF ';'",
"bloque_sentencias_ejecutables_seleccion : sentencia_ejecutable",
"bloque_sentencias_ejecutables_seleccion : '{' sentencias_ejecutables '}'",
"bloque_sentencias_ejecutables_seleccion : '{' '}'",
"bloque_sentencias_ejecutables_seleccion : '{' sentencias_ejecutables",
"bloque_sentencias_ejecutables_seleccion : sentencias_ejecutables '}'",
"sentencias_ejecutables : sentencia_ejecutable",
"sentencias_ejecutables : sentencias_ejecutables sentencia_ejecutable",
"bloque_sentencias_ejecutables_seleccion_then : bloque_sentencias_ejecutables_seleccion",
"bloque_sentencias_ejecutables_seleccion_else : bloque_sentencias_ejecutables_seleccion",
"condicion : '(' expresion comparador expresion ')'",
"condicion : '(' expresion comparador ')'",
"condicion : '(' comparador expresion ')'",
"condicion : expresion comparador expresion ')'",
"condicion : '(' expresion comparador expresion",
"condicion : '(' ')'",
"comparador : COMP_MAYOR_IGUAL",
"comparador : COMP_MENOR_IGUAL",
"comparador : COMP_DISTINTO",
"comparador : '>'",
"comparador : '<'",
"comparador : '='",
"expresion : expresion '+' termino",
"expresion : expresion '-' termino",
"expresion : termino",
"termino : termino '*' factor",
"termino : termino '/' factor",
"termino : factor",
"factor : ID",
"factor : constante",
"factor : invocacion_funcion",
"invocacion_funcion : ID '(' ')'",
"invocacion_funcion : ID '(' lista_de_parametros_reales ')'",
"lista_de_parametros_reales : parametro_real",
"lista_de_parametros_reales : lista_de_parametros_reales ',' parametro_real",
"parametro_real : ID",
"parametro_real : constante",
"imprimir : OUT '(' CADENA ')' ';'",
"imprimir : OUT '(' ID ')' ';'",
"imprimir : OUT '(' ')' ';'",
"imprimir : OUT CADENA ')' ';'",
"imprimir : OUT '(' CADENA ';'",
"imprimir : OUT ID ')' ';'",
"imprimir : OUT '(' ID ';'",
"imprimir : OUT '(' CADENA ')'",
"imprimir : OUT '(' ID ')'",
"constante : CTE",
"constante : '-' CTE",
"tipo : UINT16",
"tipo : DOUBLE64",
};

//#line 670 ".\gramatica.y"

public static AnalizadorLexico lexico = null;
public static Logger logger = Logger.getInstance();
public static TablaDeSimbolos ts = TablaDeSimbolos.getInstance();
public static Parser parser = null;

public static StringBuilder negConstante = new StringBuilder();

public void constanteConSigno(String constante) {
	if (constante.contains(".")) {

		negConstante.setLength(0);
		negConstante.append("-");
		negConstante.append(constante);
		
		Double parsedDouble = Double.parseDouble(negConstante.toString().replace('D', 'E'));
		
		if (parsedDouble < -2.2250738585072014E-308 && -1.7976931348623157E+308 > parsedDouble) {
			logger.logWarning("[Parser] Rango invalido para la constante: " + negConstante + ", se trunca al rango permitido");
			
			if (-1.7976931348623157E+308 < parsedDouble) {
				negConstante.setLength(0);
				negConstante.append("-1.7976931348623157D+308");
			} else {
				negConstante.setLength(0);
				negConstante.append("-2.2250738585072014D-308");
			}
		}
		
		ts.swapLexemas(constante, negConstante.toString());
	} else {
		//se recibio un uint que fue aceptado por el lexico pero resulta ser negativo
		logger.logWarning("[Parser] No se admiten ui16 con obj[0]es negativos: " + "-"+constante + ", se trunca a 0");
		
		ts.swapLexemas(constante, "0");
	}
}	

public int yylex() {
	return lexico.yylex(parser);
}

public void yyerror(String error) {
	logger.logError(error);
}

public static void main(String[] args) {
	if (args.length == 0) {
		System.err.println("No se especifico ningun archivo de codigo");
	} else {
		String archivo_a_leer = args[0];
		System.out.println("Se va a leer archivo " + archivo_a_leer);
		
		FileReaderHelper fileHelper = new FileReaderHelper();
		
		boolean fileOpenSuccess = fileHelper.open(archivo_a_leer);
		
		if (fileOpenSuccess) {
			parser = new Parser();
			lexico = new AnalizadorLexico(fileHelper);
			
	        parser.run();
	
			String path = new File(archivo_a_leer).getAbsolutePath();
	        
	        Output out = new Output(path);
	        
	        String printTs = ts.print();
	        
	        out.saveFile("codigo-lexico.txt", logger.getLexico());
			out.saveFile("codigo-sintetico.txt", logger.getSintactico());
			out.saveFile("tabla-de-simbolos.txt", printTs);
	        
			System.out.println(printTs);

			GeneracionCodigoIntermedio instance = GeneracionCodigoIntermedio.getInstance();

			instance.printTercetos();
		}
	}
}
//#line 1082 "Parser.java"
//###############################################################
// method: yylexdebug : check lexer state
//###############################################################
void yylexdebug(int state,int ch)
{
String s=null;
  if (ch < 0) ch=0;
  if (ch <= YYMAXTOKEN) //check index bounds
     s = yyname[ch];    //now get it
  if (s==null)
    s = "illegal-symbol";
  debug("state "+state+", reading "+ch+" ("+s+")");
}





//The following are now global, to aid in error reporting
int yyn;       //next next thing to do
int yym;       //
int yystate;   //current parsing state from state table
String yys;    //current token string


//###############################################################
// method: yyparse : parse input and execute indicated items
//###############################################################
int yyparse()
{
boolean doaction;
  init_stacks();
  yynerrs = 0;
  yyerrflag = 0;
  yychar = -1;          //impossible char forces a read
  yystate=0;            //initial state
  state_push(yystate);  //save it
  val_push(yylval);     //save empty value
  while (true) //until parsing is done, either correctly, or w/error
    {
    doaction=true;
    if (yydebug) debug("loop"); 
    //#### NEXT ACTION (from reduction table)
    for (yyn=yydefred[yystate];yyn==0;yyn=yydefred[yystate])
      {
      if (yydebug) debug("yyn:"+yyn+"  state:"+yystate+"  yychar:"+yychar);
      if (yychar < 0)      //we want a char?
        {
        yychar = yylex();  //get next token
        if (yydebug) debug(" next yychar:"+yychar);
        //#### ERROR CHECK ####
        if (yychar < 0)    //it it didn't work/error
          {
          yychar = 0;      //change it to default string (no -1!)
          if (yydebug)
            yylexdebug(yystate,yychar);
          }
        }//yychar<0
      yyn = yysindex[yystate];  //get amount to shift by (shift index)
      if ((yyn != 0) && (yyn += yychar) >= 0 &&
          yyn <= YYTABLESIZE && yycheck[yyn] == yychar)
        {
        if (yydebug)
          debug("state "+yystate+", shifting to state "+yytable[yyn]);
        //#### NEXT STATE ####
        yystate = yytable[yyn];//we are in a new state
        state_push(yystate);   //save it
        val_push(yylval);      //push our lval as the input for next rule
        yychar = -1;           //since we have 'eaten' a token, say we need another
        if (yyerrflag > 0)     //have we recovered an error?
           --yyerrflag;        //give ourselves credit
        doaction=false;        //but don't process yet
        break;   //quit the yyn=0 loop
        }

    yyn = yyrindex[yystate];  //reduce
    if ((yyn !=0 ) && (yyn += yychar) >= 0 &&
            yyn <= YYTABLESIZE && yycheck[yyn] == yychar)
      {   //we reduced!
      if (yydebug) debug("reduce");
      yyn = yytable[yyn];
      doaction=true; //get ready to execute
      break;         //drop down to actions
      }
    else //ERROR RECOVERY
      {
      if (yyerrflag==0)
        {
        yyerror("syntax error");
        yynerrs++;
        }
      if (yyerrflag < 3) //low error count?
        {
        yyerrflag = 3;
        while (true)   //do until break
          {
          if (stateptr<0)   //check for under & overflow here
            {
            yyerror("stack underflow. aborting...");  //note lower case 's'
            return 1;
            }
          yyn = yysindex[state_peek(0)];
          if ((yyn != 0) && (yyn += YYERRCODE) >= 0 &&
                    yyn <= YYTABLESIZE && yycheck[yyn] == YYERRCODE)
            {
            if (yydebug)
              debug("state "+state_peek(0)+", error recovery shifting to state "+yytable[yyn]+" ");
            yystate = yytable[yyn];
            state_push(yystate);
            val_push(yylval);
            doaction=false;
            break;
            }
          else
            {
            if (yydebug)
              debug("error recovery discarding state "+state_peek(0)+" ");
            if (stateptr<0)   //check for under & overflow here
              {
              yyerror("Stack underflow. aborting...");  //capital 'S'
              return 1;
              }
            state_pop();
            val_pop();
            }
          }
        }
      else            //discard this token
        {
        if (yychar == 0)
          return 1; //yyabort
        if (yydebug)
          {
          yys = null;
          if (yychar <= YYMAXTOKEN) yys = yyname[yychar];
          if (yys == null) yys = "illegal-symbol";
          debug("state "+yystate+", error recovery discards token "+yychar+" ("+yys+")");
          }
        yychar = -1;  //read another
        }
      }//end error recovery
    }//yyn=0 loop
    if (!doaction)   //any reason not to proceed?
      continue;      //skip action
    yym = yylen[yyn];          //get count of terminals on rhs
    if (yydebug)
      debug("state "+yystate+", reducing "+yym+" by rule "+yyn+" ("+yyrule[yyn]+")");
    if (yym>0)                 //if count of rhs not 'nil'
      yyval = val_peek(yym-1); //get current semantic value
    yyval = dup_yyval(yyval); //duplicate yyval if ParserVal is used as semantic value
    switch(yyn)
      {
//########## USER-SUPPLIED ACTIONS ##########
case 1:
//#line 20 ".\gramatica.y"
{ 
		logger.logSuccess("[Parser] Programa correcto detectado");
		GeneracionCodigoIntermedio instance = GeneracionCodigoIntermedio.getInstance();
		ArrayList<Terceto> deferTercetosAmbitoPrograma = instance.desapilarAmbitoParaDefer();
		Iterator<Terceto> it = deferTercetosAmbitoPrograma.listIterator();

		while(it.hasNext()) {
			Terceto tercetoDeferPrograma = it.next();
			instance.agregarTerceto(tercetoDeferPrograma);
		}
	}
break;
case 2:
//#line 31 ".\gramatica.y"
{ logger.logError("[Parser] Se esperaba un identificador nombre del programa"); }
break;
case 3:
//#line 32 ".\gramatica.y"
{ logger.logError("[Parser] Se esperaba un { antes de las sentencias del programa"); }
break;
case 4:
//#line 33 ".\gramatica.y"
{ logger.logError("[Parser] Se esperaba un } al final de las sentencias del programa"); }
break;
case 5:
//#line 34 ".\gramatica.y"
{ logger.logError("[Parser] Se esperaban sentencias del programa"); }
break;
case 6:
//#line 35 ".\gramatica.y"
{ logger.logError("[Parser] Se esperaban sentencias del programa"); }
break;
case 7:
//#line 39 ".\gramatica.y"
{
		GeneracionCodigoIntermedio instance = GeneracionCodigoIntermedio.getInstance();
		instance.agregarUsoAIdentificador(val_peek(0).obj[0], "nombre_programa");
		instance.apilarAmbitoParaDefer();
	}
break;
case 16:
//#line 64 ".\gramatica.y"
{ 
		logger.logSuccess("[Parser] Declaracion de lista de variables detectado"); 
		GeneracionCodigoIntermedio instance = GeneracionCodigoIntermedio.getInstance(); 
		instance.agregarTipoAListaDeVariables(val_peek(2).obj[0]);
	}
break;
case 17:
//#line 69 ".\gramatica.y"
{ logger.logError("[Parser] Se esperaba un ; al final de la lista de variables"); }
break;
case 18:
//#line 70 ".\gramatica.y"
{ logger.logError("[Parser] Se esperaba un tipo para la lista de variables"); }
break;
case 19:
//#line 71 ".\gramatica.y"
{ logger.logError("[Parser] Se esperaba una variable o lista de variables"); }
break;
case 20:
//#line 75 ".\gramatica.y"
{ 
		GeneracionCodigoIntermedio instance = GeneracionCodigoIntermedio.getInstance(); 
		instance.agregarVariableADeclarar(val_peek(2).obj[0]);
	}
break;
case 21:
//#line 79 ".\gramatica.y"
{
		GeneracionCodigoIntermedio instance = GeneracionCodigoIntermedio.getInstance(); 
		instance.agregarVariableADeclarar(val_peek(0).obj[0]);
	}
break;
case 22:
//#line 86 ".\gramatica.y"
{ logger.logSuccess("[Parser] Declaracion de funcion detectado"); }
break;
case 23:
//#line 87 ".\gramatica.y"
{ logger.logSuccess("[Parser] Declaracion de funcion detectado"); }
break;
case 24:
//#line 88 ".\gramatica.y"
{ logger.logError("[Parser] Se esperaban sentencias en la funcion"); }
break;
case 41:
//#line 120 ".\gramatica.y"
{ logger.logSuccess("[Parser] Declaracion de funcion detectado"); }
break;
case 42:
//#line 121 ".\gramatica.y"
{ logger.logSuccess("[Parser] Declaracion de funcion detectado"); }
break;
case 43:
//#line 125 ".\gramatica.y"
{ logger.logSuccess("[Parser] Sentencia seleccion detectada"); }
break;
case 44:
//#line 126 ".\gramatica.y"
{ logger.logSuccess("[Parser] Sentencia seleccion detectada"); }
break;
case 45:
//#line 127 ".\gramatica.y"
{ logger.logSuccess("[Parser] Sentencia seleccion detectada"); }
break;
case 46:
//#line 128 ".\gramatica.y"
{ logger.logSuccess("[Parser] Sentencia seleccion detectada"); }
break;
case 47:
//#line 129 ".\gramatica.y"
{ logger.logSuccess("[Parser] Sentencia seleccion detectada"); }
break;
case 48:
//#line 130 ".\gramatica.y"
{ logger.logSuccess("[Parser] Sentencia seleccion detectada"); }
break;
case 49:
//#line 131 ".\gramatica.y"
{ logger.logSuccess("[Parser] Sentencia seleccion detectada"); }
break;
case 50:
//#line 132 ".\gramatica.y"
{ logger.logError("[Parser] Se esperaba un ; al final de la sentencia de seleccion"); }
break;
case 51:
//#line 133 ".\gramatica.y"
{ logger.logError("[Parser] Se esperaba un ; al final de la sentencia de seleccion"); }
break;
case 52:
//#line 134 ".\gramatica.y"
{ logger.logError("[Parser] Se esperaba un ; al final de la sentencia de seleccion"); }
break;
case 53:
//#line 135 ".\gramatica.y"
{ logger.logError("[Parser] Se esperaba un ; al final de la sentencia de seleccion"); }
break;
case 54:
//#line 136 ".\gramatica.y"
{ logger.logError("[Parser] Se esperaba un ; al final de la sentencia de seleccion"); }
break;
case 55:
//#line 137 ".\gramatica.y"
{ logger.logError("[Parser] Se esperaba un ; al final de la sentencia de seleccion"); }
break;
case 56:
//#line 138 ".\gramatica.y"
{ logger.logError("[Parser] Se esperaba un ; al final de la sentencia de seleccion"); }
break;
case 60:
//#line 148 ".\gramatica.y"
{ logger.logSuccess("[Parser] Sentencia de seleccion detectada"); }
break;
case 61:
//#line 149 ".\gramatica.y"
{ logger.logSuccess("[Parser] Sentencia de seleccion detectada"); }
break;
case 62:
//#line 150 ".\gramatica.y"
{ logger.logSuccess("[Parser] Sentencia de seleccion detectada"); }
break;
case 63:
//#line 151 ".\gramatica.y"
{ logger.logSuccess("[Parser] Sentencia de seleccion detectada"); }
break;
case 64:
//#line 152 ".\gramatica.y"
{ logger.logSuccess("[Parser] Sentencia de seleccion detectada"); }
break;
case 65:
//#line 153 ".\gramatica.y"
{ logger.logSuccess("[Parser] Sentencia de seleccion detectada"); }
break;
case 66:
//#line 154 ".\gramatica.y"
{ logger.logSuccess("[Parser] Sentencia de seleccion detectada"); }
break;
case 67:
//#line 155 ".\gramatica.y"
{ logger.logSuccess("[Parser] Sentencia de seleccion detectada"); }
break;
case 68:
//#line 156 ".\gramatica.y"
{ logger.logSuccess("[Parser] Sentencia de seleccion detectada"); }
break;
case 69:
//#line 157 ".\gramatica.y"
{ logger.logSuccess("[Parser] Sentencia de seleccion detectada"); }
break;
case 70:
//#line 158 ".\gramatica.y"
{ logger.logSuccess("[Parser] Sentencia de seleccion detectada"); }
break;
case 71:
//#line 159 ".\gramatica.y"
{ logger.logSuccess("[Parser] Sentencia de seleccion detectada"); }
break;
case 72:
//#line 160 ".\gramatica.y"
{ logger.logSuccess("[Parser] Sentencia de seleccion detectada"); }
break;
case 73:
//#line 161 ".\gramatica.y"
{ logger.logSuccess("[Parser] Sentencia de seleccion detectada"); }
break;
case 74:
//#line 165 ".\gramatica.y"
{ logger.logSuccess("[Parser] Sentencia when detectada"); }
break;
case 75:
//#line 166 ".\gramatica.y"
{ logger.logSuccess("[Parser] Sentencia when detectada"); }
break;
case 76:
//#line 167 ".\gramatica.y"
{ logger.logSuccess("[Parser] Sentencia when detectada"); }
break;
case 77:
//#line 168 ".\gramatica.y"
{ logger.logError("[Parser] Se esperaba ; al final de la sentencia when"); }
break;
case 78:
//#line 169 ".\gramatica.y"
{ logger.logError("[Parser] Se esperaba ; al final de la sentencia when"); }
break;
case 79:
//#line 170 ".\gramatica.y"
{ logger.logError("[Parser] Se esperaba ; al final de la sentencia when"); }
break;
case 80:
//#line 171 ".\gramatica.y"
{ logger.logError("[Parser] Se esperaban sentencias en la sentencia when"); }
break;
case 81:
//#line 172 ".\gramatica.y"
{ logger.logError("[Parser] Se esperaba la palabra reservada then en la sentencia when"); }
break;
case 82:
//#line 173 ".\gramatica.y"
{ logger.logError("[Parser] Se esperaba la palabra reservada then en la sentencia when"); }
break;
case 83:
//#line 174 ".\gramatica.y"
{ logger.logError("[Parser] Se esperaba la palabra reservada then en la sentencia when"); }
break;
case 84:
//#line 178 ".\gramatica.y"
{ logger.logSuccess("[Parser] Sentencia do until detectada"); }
break;
case 85:
//#line 179 ".\gramatica.y"
{ logger.logSuccess("[Parser] Sentencia do until detectada"); }
break;
case 86:
//#line 180 ".\gramatica.y"
{ logger.logError("[Parser] Se esperaba un ; al final de la sentencia do"); }
break;
case 87:
//#line 181 ".\gramatica.y"
{ logger.logError("[Parser] Se esperaba un ; al final de la sentencia do"); }
break;
case 94:
//#line 191 ".\gramatica.y"
{ logger.logError("[Parser] Se esperaban sentencias en la sentencia do"); }
break;
case 95:
//#line 192 ".\gramatica.y"
{ logger.logError("[Parser] Se esperaba un } al final de la sentencia do"); }
break;
case 96:
//#line 193 ".\gramatica.y"
{ logger.logError("[Parser] Se esperaba un } al final de la sentencia do"); }
break;
case 97:
//#line 194 ".\gramatica.y"
{ logger.logError("[Parser] Se esperaba un } al final de la sentencia do"); }
break;
case 98:
//#line 195 ".\gramatica.y"
{ logger.logError("[Parser] Se esperaba un } al final de la sentencia do"); }
break;
case 99:
//#line 196 ".\gramatica.y"
{ logger.logError("[Parser] Se esperaba un } al final de la sentencia do"); }
break;
case 100:
//#line 197 ".\gramatica.y"
{ logger.logError("[Parser] Se esperaba un } al final de la sentencia do"); }
break;
case 106:
//#line 212 ".\gramatica.y"
{
		GeneracionCodigoIntermedio instance = GeneracionCodigoIntermedio.getInstance();
		instance.agregarUsoAIdentificador(val_peek(4).obj[0], "nombre_funcion");
	}
break;
case 107:
//#line 216 ".\gramatica.y"
{
		GeneracionCodigoIntermedio instance = GeneracionCodigoIntermedio.getInstance();
		instance.agregarUsoAIdentificador(val_peek(5).obj[0], "nombre_funcion");
	}
break;
case 108:
//#line 220 ".\gramatica.y"
{ logger.logError("[Parser] Se esperaba un : antes del tipo para la funcion"); }
break;
case 109:
//#line 221 ".\gramatica.y"
{ logger.logError("[Parser] Se esperaba un tipo de return para la funcion"); }
break;
case 110:
//#line 222 ".\gramatica.y"
{ logger.logError("[Parser] Se esperaba un identificador nombre para la funcion"); }
break;
case 111:
//#line 223 ".\gramatica.y"
{ logger.logError("[Parser] Se esperaba un ( luego del nombre de la funcion"); }
break;
case 112:
//#line 224 ".\gramatica.y"
{ logger.logError("[Parser] Se esperaba un ) luego del nombre para la funcion"); }
break;
case 113:
//#line 225 ".\gramatica.y"
{ logger.logError("[Parser] Se esperaba un tipo de return para la funcion"); }
break;
case 114:
//#line 226 ".\gramatica.y"
{ logger.logError("[Parser] Se esperaba un identificador nombre para la funcion"); }
break;
case 115:
//#line 227 ".\gramatica.y"
{ logger.logError("[Parser] Se esperaba un ( luego del nombre de la funcion"); }
break;
case 116:
//#line 228 ".\gramatica.y"
{ logger.logError("[Parser] Se esperaba un ) luego del nombre para la funcion"); }
break;
case 118:
//#line 233 ".\gramatica.y"
{ logger.logError("[Parser] Se esperaba un ; al final de la sentencia return"); }
break;
case 119:
//#line 234 ".\gramatica.y"
{ logger.logError("[Parser] Se esperaba un ( en la sentencia return"); }
break;
case 120:
//#line 235 ".\gramatica.y"
{ logger.logError("[Parser] Se esperaba un ) en la sentencia return"); }
break;
case 121:
//#line 236 ".\gramatica.y"
{ logger.logError("[Parser] Se esperaba una expresion en la sentencia return"); }
break;
case 124:
//#line 242 ".\gramatica.y"
{ logger.logError("[Parser] Hay mas de 2 parametros en la funcion"); }
break;
case 127:
//#line 251 ".\gramatica.y"
{
		GeneracionCodigoIntermedio instance = GeneracionCodigoIntermedio.getInstance();
		instance.agregarTipoAParametro(val_peek(0).obj[0], val_peek(1).obj[0]);
	}
break;
case 129:
//#line 255 ".\gramatica.y"
{ logger.logError("[Parser] Se esperaba un identificador nombre para el parametro"); }
break;
case 130:
//#line 256 ".\gramatica.y"
{ logger.logError("[Parser] Se esperaba un tipo valido para el parametro"); }
break;
case 131:
//#line 260 ".\gramatica.y"
{ logger.logSuccess("[Parser] Declaracion de constantes detectado"); }
break;
case 132:
//#line 261 ".\gramatica.y"
{ logger.logError("[Parser] Se esperaba ; al final de la declaracion de constantes"); }
break;
case 133:
//#line 262 ".\gramatica.y"
{ logger.logError("[Parser] Se esperaba una lista de declaracion de constantes"); }
break;
case 137:
//#line 272 ".\gramatica.y"
{ logger.logError("[Parser] Se esperaba una constante del lado derecho de la asignacion"); }
break;
case 138:
//#line 273 ".\gramatica.y"
{ logger.logError("[Parser] Se esperaba el simbolo asignacion en la declaracion de constantes"); }
break;
case 139:
//#line 274 ".\gramatica.y"
{ logger.logError("[Parser] Se esperaba una asignacion en la declaracion de constantes"); }
break;
case 142:
//#line 280 ".\gramatica.y"
{
		GeneracionCodigoIntermedio instance = GeneracionCodigoIntermedio.getInstance();
		instance.setApilarTercetoDefer(false);
	}
break;
case 143:
//#line 287 ".\gramatica.y"
{
		GeneracionCodigoIntermedio instance = GeneracionCodigoIntermedio.getInstance();
		instance.setApilarTercetoDefer(true);
	}
break;
case 152:
//#line 308 ".\gramatica.y"
{ 
		logger.logSuccess("[Parser] Sentencia break detectada"); 
		Terceto tercetoBreak = new Terceto("BI", "-", "-");

		GeneracionCodigoIntermedio instance = GeneracionCodigoIntermedio.getInstance();
		instance.agregarTercetoBreakAListaTercetosBreakDo(tercetoBreak);
		instance.agregarTerceto(tercetoBreak);
	}
break;
case 153:
//#line 316 ".\gramatica.y"
{ 
		logger.logSuccess("[Parser] Sentencia break con etiqueta detectada"); 

		Terceto tercetoBreak = new Terceto("BI", "-", "-");

		GeneracionCodigoIntermedio instance = GeneracionCodigoIntermedio.getInstance();
		instance.agregarTerceto(tercetoBreak);
		instance.agregarTercetoBreakAEtiquetaDo(val_peek(1).obj[0], tercetoBreak);
	}
break;
case 154:
//#line 325 ".\gramatica.y"
{ logger.logError("[Parser] Se esperaba un ; luego de la sentencia break"); }
break;
case 155:
//#line 326 ".\gramatica.y"
{ logger.logError("[Parser] Se esperaba un ; luego de la sentencia break"); }
break;
case 156:
//#line 327 ".\gramatica.y"
{ logger.logError("[Parser] Se esperaba una etiqueta en la sentencia break"); }
break;
case 157:
//#line 331 ".\gramatica.y"
{ 
		logger.logSuccess("[Parser] Sentencia continue detectada"); 

		GeneracionCodigoIntermedio instance = GeneracionCodigoIntermedio.getInstance();
		int posPrimeraInstruccionDo = instance.getUltimaPosicionTerceto();

		Terceto tercetoContinue = new Terceto("BI", "[" + String.valueOf(posPrimeraInstruccionDo) + "]", "-");
		instance.agregarTerceto(tercetoContinue);
	}
break;
case 158:
//#line 340 ".\gramatica.y"
{ logger.logError("[Parser] Se esperaba un ; al final de la sentencia continue"); }
break;
case 160:
//#line 345 ".\gramatica.y"
{
		GeneracionCodigoIntermedio instance = GeneracionCodigoIntermedio.getInstance();
		ArrayList<Terceto> tercetos_etiqueta_break = instance.getTercetosBreakDeEtiquetaDo(val_peek(2).obj[0]);
		Iterator<Terceto> it = tercetos_etiqueta_break.listIterator();

		while(it.hasNext()) {
			Terceto tercetoBreakConEtiqueta = it.next();
			tercetoBreakConEtiqueta.setOperando1("[" + instance.getTamanioListaTercetos() + "]");
		}

		instance.borrarEtiquetaDo(val_peek(2).obj[0]);
	}
break;
case 161:
//#line 360 ".\gramatica.y"
{
		GeneracionCodigoIntermedio instance = GeneracionCodigoIntermedio.getInstance();
		instance.agregarDoConEtiqueta(val_peek(0).obj[0]);
		yyval.obj[0] = val_peek(0).obj[0];
	}
break;
case 162:
//#line 368 ".\gramatica.y"
{ 
		logger.logSuccess("[Parser] Sentencia do until detectada"); 
		GeneracionCodigoIntermedio instance = GeneracionCodigoIntermedio.getInstance();
		Terceto tercetoDo = instance.desapilarTerceto();
		int posPrimerTerceto = instance.desapilarPosicionTerceto();

		tercetoDo.setOperando2("[" + posPrimerTerceto + "]");

		ArrayList<Terceto> lista_breaks_do = instance.getListaTercetosBreakDo();
		Iterator<Terceto> it = lista_breaks_do.listIterator();

		while (it.hasNext()) {
			Terceto breakTerceto = it.next();
			breakTerceto.setOperando1("[" + instance.getTamanioListaTercetos() + "]");
		}
	}
break;
case 163:
//#line 384 ".\gramatica.y"
{ logger.logError("[Parser] Se esperaba un ; al final de la sentencia do"); }
break;
case 164:
//#line 388 ".\gramatica.y"
{
		GeneracionCodigoIntermedio instance = GeneracionCodigoIntermedio.getInstance();
		instance.apilarPosicionTerceto(instance.getTamanioListaTercetos());
		instance.iniciarListaTercetosBreakDo();
	}
break;
case 165:
//#line 396 ".\gramatica.y"
{
		GeneracionCodigoIntermedio instance = GeneracionCodigoIntermedio.getInstance();
		instance.agregarUsoAIdentificador(val_peek(0).obj[0], "nombre_etiqueta");
	}
break;
case 168:
//#line 405 ".\gramatica.y"
{ logger.logError("[Parser] Se esperaba un } al final de la sentencia do"); }
break;
case 169:
//#line 406 ".\gramatica.y"
{ logger.logError("[Parser] Se esperaba un { en la sentencia do"); }
break;
case 172:
//#line 416 ".\gramatica.y"
{ 
		logger.logSuccess("[Parser] Asignacion detectada"); 

		GeneracionCodigoIntermedio instance = GeneracionCodigoIntermedio.getInstance();

		Terceto terceto = new Terceto(":=", val_peek(3).obj[0], val_peek(1).obj[0]);

		val_peek(3).obj[1] = ts.getTipo(val_peek(3).obj[0]);
		
		if (val_peek(3).obj[1].contains("ui16") && val_peek(1).obj[1].contains("ui16")){
			instance.agregarTerceto(terceto);
			yyval.obj[1] = "ui16";
		}
		else if (val_peek(3).obj[1].contains("f64") && val_peek(1).obj[1].contains("f64")){
			instance.agregarTerceto(terceto);
			yyval.obj[1] = "f64";
		}
		else if (val_peek(3).obj[1].contains("ui16") && val_peek(1).obj[1].contains("f64")){
			logger.logError("[Generacion de codigo] Incompatibilidad de tipos");
		}
		else if (val_peek(3).obj[1].contains("f64") && val_peek(1).obj[1].contains("ui16")){
			Terceto aux = new Terceto("itof", val_peek(1).obj[0], "-");
			terceto.setOperando1("[" + String.valueOf(instance.getTamanioListaTercetos() + "]"));
			instance.agregarTerceto(aux);
			instance.agregarTerceto(terceto);
			yyval.obj[1] = "f64";
		}
		yyval.obj[0] = val_peek(3).obj[0];
	}
break;
case 173:
//#line 445 ".\gramatica.y"
{logger.logError("[Parser] Se espera una expresion del lado derecho de la asignacion");}
break;
case 174:
//#line 446 ".\gramatica.y"
{ logger.logError("[Parser] Se espera un ; al final de la asignacion"); }
break;
case 175:
//#line 447 ".\gramatica.y"
{ logger.logError("[Parser] Se espera el simbolo =: en lugar de = para la asignacion"); }
break;
case 176:
//#line 448 ".\gramatica.y"
{ logger.logError("[Parser] Se espera el simbolo =: en lugar de = para la asignacion"); }
break;
case 177:
//#line 452 ".\gramatica.y"
{ logger.logSuccess("[Parser] Sentencia when detectada"); }
break;
case 178:
//#line 453 ".\gramatica.y"
{ logger.logError("[Parser] Se esperaba la palabra reservada then en la sentencia when"); }
break;
case 179:
//#line 454 ".\gramatica.y"
{ logger.logError("[Parser] Se esperaba un ; al final de la sentencia when"); }
break;
case 180:
//#line 455 ".\gramatica.y"
{ logger.logError("[Parser] Se esperaba la palabra reservada then en la sentencia when"); }
break;
case 181:
//#line 456 ".\gramatica.y"
{ logger.logError("[Parser] Se esperaban sentencias dentro del when"); }
break;
case 184:
//#line 466 ".\gramatica.y"
{ 
		logger.logSuccess("[Parser] Sentencia if then detectada");

		GeneracionCodigoIntermedio instance = GeneracionCodigoIntermedio.getInstance();

		Terceto bi = instance.desapilarTerceto();
		bi.setOperando1("[" + String.valueOf(instance.getTamanioListaTercetos()) + "]");
	}
break;
case 185:
//#line 474 ".\gramatica.y"
{ 
		logger.logSuccess("[Parser] Sentencia if then else detectada"); 
		GeneracionCodigoIntermedio instance = GeneracionCodigoIntermedio.getInstance();
		Terceto bi = instance.desapilarTerceto();
		bi.setOperando1("[" + String.valueOf(instance.getTamanioListaTercetos()) + "]");
	}
break;
case 186:
//#line 480 ".\gramatica.y"
{ logger.logError("[Parser] Se esperaba un ; al final de la sentencia seleccion"); }
break;
case 187:
//#line 481 ".\gramatica.y"
{ logger.logError("[Parser] Se esperaba un ; al final de la sentencia seleccion"); }
break;
case 188:
//#line 482 ".\gramatica.y"
{ logger.logError("[Parser] Se esperaban sentencias en la sentencia seleccion"); }
break;
case 189:
//#line 483 ".\gramatica.y"
{ logger.logError("[Parser] Se esperaban la palabra reservada then en la sentencia seleccion"); }
break;
case 190:
//#line 484 ".\gramatica.y"
{ logger.logError("[Parser] Se esperaban la palabra reservada then en la sentencia seleccion"); }
break;
case 191:
//#line 485 ".\gramatica.y"
{ logger.logError("[Parser] Se esperaban sentencias en la sentencia seleccion"); }
break;
case 194:
//#line 491 ".\gramatica.y"
{ logger.logError("[Parser] Se esperaban sentencias dentro de la seleccion"); }
break;
case 195:
//#line 492 ".\gramatica.y"
{ logger.logError("[Parser] Se esperaba un } al final de la seleccion"); }
break;
case 196:
//#line 493 ".\gramatica.y"
{ logger.logError("[Parser] Se esperaba un { en la seleccion"); }
break;
case 199:
//#line 502 ".\gramatica.y"
{

		GeneracionCodigoIntermedio instance = GeneracionCodigoIntermedio.getInstance();

		Terceto t = instance.desapilarTerceto();

		t.setOperando2("[" + String.valueOf(instance.getTamanioListaTercetos() + 1) + "]");

		Terceto bi = new Terceto("BI", "-", "-");

		instance.agregarTerceto(bi);
		instance.apilarTerceto(bi);
	}
break;
case 201:
//#line 523 ".\gramatica.y"
{
		GeneracionCodigoIntermedio instance = GeneracionCodigoIntermedio.getInstance();
		int tercetoPosicion = 0;

		Terceto terceto = new Terceto(val_peek(2).obj[0], val_peek(3).obj[0], val_peek(1).obj[0]);

		tercetoPosicion = instance.getTamanioListaTercetos();

		instance.agregarTerceto(terceto);
		
		yyval.obj[0] = "[" + tercetoPosicion + "]";

		terceto = new Terceto("BF", "[" + tercetoPosicion + "]", "-");

		instance.agregarTerceto(terceto);
		instance.apilarTerceto(terceto);

		yyval.obj[0] = "[" + tercetoPosicion + "]";
	}
break;
case 202:
//#line 542 ".\gramatica.y"
{ logger.logError("[Parser] Se esperaba un expresion del lado derecho de la comparacion"); }
break;
case 203:
//#line 543 ".\gramatica.y"
{ logger.logError("[Parser] Se esperaba un expresion del lado izquierdo de la comparacion"); }
break;
case 204:
//#line 544 ".\gramatica.y"
{ logger.logError("[Parser] Se esperaba un ( al comienzo de la comparacion"); }
break;
case 205:
//#line 545 ".\gramatica.y"
{ logger.logError("[Parser] Se esperaba un ) al final de la comparacion"); }
break;
case 206:
//#line 546 ".\gramatica.y"
{ logger.logError("[Parser] Se esperaba una comparacion"); }
break;
case 207:
//#line 550 ".\gramatica.y"
{yyval.obj[0] = ">=";}
break;
case 208:
//#line 551 ".\gramatica.y"
{yyval.obj[0] = "<=";}
break;
case 209:
//#line 552 ".\gramatica.y"
{yyval.obj[0] = "=!";}
break;
case 210:
//#line 553 ".\gramatica.y"
{yyval.obj[0] = ">";}
break;
case 211:
//#line 554 ".\gramatica.y"
{yyval.obj[0] = "<";}
break;
case 212:
//#line 555 ".\gramatica.y"
{yyval.obj[0] = "=";}
break;
case 213:
//#line 559 ".\gramatica.y"
{
		GeneracionCodigoIntermedio instance = GeneracionCodigoIntermedio.getInstance();

		yyval.obj = instance.AgregarTercetoExpresiones(yyval.obj[0], yyval.obj[1], val_peek(2).obj[0], val_peek(2).obj[1], val_peek(0).obj[0], val_peek(0).obj[1], "+");

	}
break;
case 214:
//#line 565 ".\gramatica.y"
{

		GeneracionCodigoIntermedio instance = GeneracionCodigoIntermedio.getInstance();

		yyval.obj = instance.AgregarTercetoExpresiones(yyval.obj[0], yyval.obj[1], val_peek(2).obj[0], val_peek(2).obj[1], val_peek(0).obj[0], val_peek(0).obj[1], "-");
	}
break;
case 215:
//#line 571 ".\gramatica.y"
{
		
		yyval.obj[0] = val_peek(0).obj[0];
		yyval.obj[1] = val_peek(0).obj[1];
	}
break;
case 216:
//#line 579 ".\gramatica.y"
{
		GeneracionCodigoIntermedio instance = GeneracionCodigoIntermedio.getInstance();

		
		yyval.obj = instance.AgregarTercetoExpresiones(yyval.obj[0], yyval.obj[1], val_peek(2).obj[0], val_peek(2).obj[1], val_peek(0).obj[0], val_peek(0).obj[1], "*");

	}
break;
case 217:
//#line 586 ".\gramatica.y"
{

		GeneracionCodigoIntermedio instance = GeneracionCodigoIntermedio.getInstance();
		yyval.obj = instance.AgregarTercetoExpresiones(yyval.obj[0], yyval.obj[1], val_peek(2).obj[0], val_peek(2).obj[1], val_peek(0).obj[0], val_peek(0).obj[1], "/");
	}
break;
case 218:
//#line 591 ".\gramatica.y"
{
		yyval.obj[0] = val_peek(0).obj[0];
		yyval.obj[1] = val_peek(0).obj[1];
	}
break;
case 219:
//#line 598 ".\gramatica.y"
{
		yyval.obj[0] = val_peek(0).obj[0];
		yyval.obj[1] = ts.getTipo(val_peek(0).obj[0]);
	}
break;
case 220:
//#line 602 ".\gramatica.y"
{
		
		yyval.obj[0] = val_peek(0).obj[0];
		yyval.obj[1] = ts.getTipo(val_peek(0).obj[0]);
	}
break;
case 228:
//#line 626 ".\gramatica.y"
{ 
		logger.logSuccess("[Parser] Sentencia out detectada"); 
		GeneracionCodigoIntermedio instance = GeneracionCodigoIntermedio.getInstance();

		Terceto out = new Terceto("out", val_peek(2).obj[0], "-");

		if (instance.debeApilarTercetoDefer()) {
			instance.agregarTercetoParaDeferAmbitoActual(out);
		} else {
			instance.agregarTerceto(out);
		}
	}
break;
case 229:
//#line 638 ".\gramatica.y"
{ 
		logger.logSuccess("[Parser] Sentencia out detectada"); 
		GeneracionCodigoIntermedio instance = GeneracionCodigoIntermedio.getInstance();

		Terceto out = new Terceto("out", val_peek(2).obj[0], "-");

		if (instance.debeApilarTercetoDefer()) {
			instance.agregarTercetoParaDeferAmbitoActual(out);
		} else {
			instance.agregarTerceto(out);
		}
	}
break;
case 230:
//#line 650 ".\gramatica.y"
{ logger.logError("[Parser] Se esperaba una cadena o identificador en la sentencia out"); }
break;
case 231:
//#line 651 ".\gramatica.y"
{ logger.logError("[Parser] Se esperaba un ( en la sentencia out"); }
break;
case 232:
//#line 652 ".\gramatica.y"
{ logger.logError("[Parser] Se esperaba un ) en la sentencia out"); }
break;
case 233:
//#line 653 ".\gramatica.y"
{ logger.logError("[Parser] Se esperaba un ( en la sentencia out"); }
break;
case 234:
//#line 654 ".\gramatica.y"
{ logger.logError("[Parser] Se esperaba un ) en la sentencia out"); }
break;
case 235:
//#line 655 ".\gramatica.y"
{ logger.logError("[Parser] Se espera un ; al final de la sentencia out"); }
break;
case 236:
//#line 656 ".\gramatica.y"
{ logger.logError("[Parser] Se espera un ; al final de la sentencia out"); }
break;
case 238:
//#line 661 ".\gramatica.y"
{ constanteConSigno(val_peek(0).obj[0]); }
break;
//#line 2100 "Parser.java"
//########## END OF USER-SUPPLIED ACTIONS ##########
    }//switch
    //#### Now let's reduce... ####
    if (yydebug) debug("reduce");
    state_drop(yym);             //we just reduced yylen states
    yystate = state_peek(0);     //get new state
    val_drop(yym);               //corresponding value drop
    yym = yylhs[yyn];            //select next TERMINAL(on lhs)
    if (yystate == 0 && yym == 0)//done? 'rest' state and at first TERMINAL
      {
      if (yydebug) debug("After reduction, shifting from state 0 to state "+YYFINAL+"");
      yystate = YYFINAL;         //explicitly say we're done
      state_push(YYFINAL);       //and save it
      val_push(yyval);           //also save the semantic value of parsing
      if (yychar < 0)            //we want another character?
        {
        yychar = yylex();        //get next character
        if (yychar<0) yychar=0;  //clean, if necessary
        if (yydebug)
          yylexdebug(yystate,yychar);
        }
      if (yychar == 0)          //Good exit (if lex returns 0 ;-)
         break;                 //quit the loop--all DONE
      }//if yystate
    else                        //else not done yet
      {                         //get next state and push, for next yydefred[]
      yyn = yygindex[yym];      //find out where to go
      if ((yyn != 0) && (yyn += yystate) >= 0 &&
            yyn <= YYTABLESIZE && yycheck[yyn] == yystate)
        yystate = yytable[yyn]; //get new state
      else
        yystate = yydgoto[yym]; //else go to new defred
      if (yydebug) debug("after reduction, shifting from state "+state_peek(0)+" to state "+yystate+"");
      state_push(yystate);     //going again, so push state & val...
      val_push(yyval);         //for next action
      }
    }//main loop
  return 0;//yyaccept!!
}
//## end of method parse() ######################################



//## run() --- for Thread #######################################
/**
 * A default run method, used for operating this parser
 * object in the background.  It is intended for extending Thread
 * or implementing Runnable.  Turn off with -Jnorun .
 */
public void run()
{
  yyparse();
}
//## end of method run() ########################################



//## Constructors ###############################################
/**
 * Default constructor.  Turn off with -Jnoconstruct .

 */
public Parser()
{
  //nothing to do
}


/**
 * Create a parser, setting the debug to true or false.
 * @param debugMe true for debugging, false for no debug.
 */
public Parser(boolean debugMe)
{
  yydebug=debugMe;
}
//###############################################################



}
//################### END OF CLASS ##############################
