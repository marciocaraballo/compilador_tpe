//### This file created by BYACC 1.8(/Java extension  1.15)
//### Java capabilities added 7 Jan 97, Bob Jamison
//### Updated : 27 Nov 97  -- Bob Jamison, Joe Nieten
//###           01 Jan 98  -- Bob Jamison -- fixed generic semantic constructor
//###           01 Jun 99  -- Bob Jamison -- added Runnable support
//###           06 Aug 00  -- Bob Jamison -- made state variables class-global
//###           03 Jan 01  -- Bob Jamison -- improved flags, tracing
//###           16 May 01  -- Bob Jamison -- added custom stack sizing
//###           04 Mar 02  -- Yuval Oren  -- improved java performance, added options
//###           14 Mar 02  -- Tomas Hurka -- -d support, static initializer workaround
//### Please send bug reports to tom@hukatronic.cz
//### static char yysccsid[] = "@(#)yaccpar	1.8 (Berkeley) 01/20/90";



package compilador;



//#line 2 "gramatica.y"
import java.io.File;
//#line 19 "Parser.java"




public class Parser
{

boolean yydebug;        //do I want debug output?
int yynerrs;            //number of errors so far
int yyerrflag;          //was there an error?
int yychar;             //the current working character

//########## MESSAGES ##########
//###############################################################
// method: debug
//###############################################################
void debug(String msg)
{
  if (yydebug)
    System.out.println(msg);
}

//########## STATE STACK ##########
final static int YYSTACKSIZE = 500;  //maximum stack size
int statestk[] = new int[YYSTACKSIZE]; //state stack
int stateptr;
int stateptrmax;                     //highest index of stackptr
int statemax;                        //state when highest index reached
//###############################################################
// methods: state stack push,pop,drop,peek
//###############################################################
final void state_push(int state)
{
  try {
		stateptr++;
		statestk[stateptr]=state;
	 }
	 catch (ArrayIndexOutOfBoundsException e) {
     int oldsize = statestk.length;
     int newsize = oldsize * 2;
     int[] newstack = new int[newsize];
     System.arraycopy(statestk,0,newstack,0,oldsize);
     statestk = newstack;
     statestk[stateptr]=state;
  }
}
final int state_pop()
{
  return statestk[stateptr--];
}
final void state_drop(int cnt)
{
  stateptr -= cnt; 
}
final int state_peek(int relative)
{
  return statestk[stateptr-relative];
}
//###############################################################
// method: init_stacks : allocate and prepare stacks
//###############################################################
final boolean init_stacks()
{
  stateptr = -1;
  val_init();
  return true;
}
//###############################################################
// method: dump_stacks : show n levels of the stacks
//###############################################################
void dump_stacks(int count)
{
int i;
  System.out.println("=index==state====value=     s:"+stateptr+"  v:"+valptr);
  for (i=0;i<count;i++)
    System.out.println(" "+i+"    "+statestk[i]+"      "+valstk[i]);
  System.out.println("======================");
}


//########## SEMANTIC VALUES ##########
//public class ParserVal is defined in ParserVal.java


String   yytext;//user variable to return contextual strings
ParserVal yyval; //used to return semantic vals from action routines
ParserVal yylval;//the 'lval' (result) I got from yylex()
ParserVal valstk[];
int valptr;
//###############################################################
// methods: value stack push,pop,drop,peek.
//###############################################################
void val_init()
{
  valstk=new ParserVal[YYSTACKSIZE];
  yyval=new ParserVal();
  yylval=new ParserVal();
  valptr=-1;
}
void val_push(ParserVal val)
{
  if (valptr>=YYSTACKSIZE)
    return;
  valstk[++valptr]=val;
}
ParserVal val_pop()
{
  if (valptr<0)
    return new ParserVal();
  return valstk[valptr--];
}
void val_drop(int cnt)
{
int ptr;
  ptr=valptr-cnt;
  if (ptr<0)
    return;
  valptr = ptr;
}
ParserVal val_peek(int relative)
{
int ptr;
  ptr=valptr-relative;
  if (ptr<0)
    return new ParserVal();
  return valstk[ptr];
}
final ParserVal dup_yyval(ParserVal val)
{
  ParserVal dup = new ParserVal();
  dup.ival = val.ival;
  dup.dval = val.dval;
  dup.sval = val.sval;
  dup.obj = val.obj;
  return dup;
}
//#### end semantic value section ####
public final static short ID=257;
public final static short CTE=258;
public final static short CADENA=259;
public final static short IF=260;
public final static short ELSE=261;
public final static short ENDIF=262;
public final static short PRINT=263;
public final static short VOID=264;
public final static short RETURN=265;
public final static short COMP_MAYOR_IGUAL=266;
public final static short COMP_MENOR_IGUAL=267;
public final static short COMP_IGUAL=268;
public final static short COMP_DISTINTO=269;
public final static short CLASS=270;
public final static short WHILE=271;
public final static short DO=272;
public final static short INTERFACE=273;
public final static short IMPLEMENT=274;
public final static short INT=275;
public final static short ULONG=276;
public final static short FLOAT=277;
public final static short OPERADOR_MENOS=278;
public final static short YYERRCODE=256;
final static short yylhs[] = {                           -1,
    0,    0,    0,    0,    0,    1,    1,    2,    2,    2,
    4,    4,    4,    4,    4,    4,   11,   11,   12,   12,
   13,   13,   13,   13,   13,   10,   10,    9,    9,    9,
    9,    9,    9,    9,    9,    9,    9,    9,   15,   19,
   15,   15,   15,   15,   15,   15,   15,   15,   15,    8,
    8,    8,    8,    8,    8,    8,    8,    8,   14,   14,
   14,   22,   14,   14,   14,   14,   14,   20,   20,   20,
   20,   20,   20,   16,   16,   16,   16,   16,   16,   24,
   21,   21,   21,   21,   21,   21,   18,   18,   18,   18,
   18,   18,   18,   18,   18,   18,   18,   26,   26,   27,
   27,   23,   23,   23,   23,   25,   25,   25,   25,    7,
    7,    7,    7,    7,    7,    7,    6,    6,    6,    6,
    6,    6,   31,   31,    5,    5,    5,   29,   29,    3,
    3,    3,    3,   32,   32,   32,   38,   38,   35,   35,
   39,   39,   40,   40,   42,   42,   42,   42,   43,   43,
   43,   43,   43,   43,   34,   44,   44,   33,   45,   45,
   45,   45,   45,   47,   47,   41,   41,   41,   41,   41,
   41,   41,   41,   46,   46,   46,   46,   46,   46,   46,
   46,   46,   46,   46,   46,   50,   50,   51,   51,   51,
   49,   49,   49,   48,   37,   37,   36,   36,   36,   36,
   17,   17,   17,   17,   52,   52,   52,   52,   52,   52,
   30,   30,   30,   53,   53,   53,   54,   54,   54,   54,
   28,   28,
};
final static short yylen[] = {                            2,
    3,    2,    2,    2,    0,    1,    2,    1,    1,    2,
    1,    1,    1,    1,    1,    1,    1,    2,    1,    1,
    1,    1,    1,    1,    1,    2,    1,    7,    6,    6,
    6,    6,    3,    4,    2,    5,    4,    3,    7,    0,
   13,    6,    6,    3,    4,    2,    5,    4,    3,    9,
    7,    8,    6,    8,    6,    8,    8,    6,    9,    7,
    8,    0,   15,    6,    8,    8,    6,    1,    3,    2,
    2,    2,    1,    3,    4,    3,    3,    2,    1,    1,
    1,    4,    3,    3,    2,    1,    1,    1,    1,    3,
    4,    5,    2,    3,    2,    3,    2,    1,    2,    1,
    1,    1,    2,    1,    2,    1,    2,    1,    2,    3,
    2,    2,    3,    2,    3,    2,    5,    4,    7,    4,
    3,    6,    1,    3,    4,    3,    3,    1,    3,    1,
    1,    1,    1,    3,    2,    2,    2,    1,    4,    2,
    1,    2,    2,    1,    3,    2,    1,    2,    2,    4,
    1,    3,    3,    2,    4,    1,    2,    2,    4,    3,
    6,    5,    2,    2,    1,    5,    4,    7,    6,    4,
    3,    4,    3,    4,    3,    5,    4,    3,    2,    3,
    2,    4,    3,    2,    1,    1,    2,    1,    1,    1,
    1,    3,    2,    2,    1,    3,    1,    1,    1,    1,
    3,    2,    2,    3,    1,    1,    1,    1,    1,    1,
    3,    3,    1,    3,    3,    1,    1,    2,    1,    3,
    1,    2,
};
final static short yydefred[] = {                         0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,  197,
  198,  199,    0,    0,    0,    6,    8,    9,   11,   12,
   13,   14,   15,   16,    0,  130,  131,  132,  133,    0,
    0,    0,    0,    0,   10,    0,    0,  221,    0,    0,
  112,    0,  164,   26,    0,    0,    0,    0,   35,    0,
   79,   80,    0,    0,  137,    4,    0,    2,    7,    0,
    0,    0,  195,  136,    0,    0,  140,    0,    0,    0,
    0,  185,   19,   21,   22,   23,    0,    0,   17,   20,
   24,   25,  158,    0,  163,    0,  205,  206,  207,  208,
    0,    0,  209,  210,    0,  219,    0,    0,    0,  216,
  113,  110,  222,  115,    0,  152,   33,    0,  128,   78,
    0,    0,    0,    0,    0,  104,  102,    0,    1,    0,
    0,  127,    0,  129,  134,    0,    0,    0,  141,    0,
    0,  147,    0,  156,    0,    0,    0,    0,   46,    0,
    0,   88,    0,    0,    0,  179,    0,    0,  181,  188,
  189,  190,    0,  186,  184,    0,   18,  200,  160,    0,
    0,  218,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,  150,    0,   74,    0,
   37,    0,   34,    0,    0,   77,  105,  103,  118,    0,
    0,  125,  196,    0,    0,  139,  142,  143,  148,    0,
  155,  157,    0,    0,   44,   97,  108,  106,    0,    0,
    0,    0,    0,   93,  109,    0,  107,  175,    0,  178,
    0,  183,  187,  180,    0,  194,    0,  159,  191,    0,
  220,   72,    0,    0,    0,   71,    0,    0,    0,    0,
    0,    0,    0,  214,  215,    0,   75,   36,    0,    0,
    0,    0,    0,  117,    0,  173,    0,  171,    0,  145,
    0,    0,   90,    0,   48,    0,   45,    0,    0,   94,
  177,  174,    0,  182,    0,    0,  162,  193,   69,    0,
   86,    0,    0,   55,    0,   58,    0,    0,   30,   31,
    0,   32,    0,    0,  167,    0,  172,  170,    0,    0,
    0,    0,   91,  100,  101,    0,   98,   47,    0,    0,
    0,  176,  161,  192,   85,    0,    0,    0,    0,    0,
    0,   51,   28,    0,  119,    0,  166,    0,   64,    0,
   67,    0,    0,   92,   99,   42,    0,   43,    0,   84,
   54,   56,   57,    0,    0,  169,    0,    0,    0,   60,
    0,   39,    0,   82,   50,  168,   65,   66,    0,    0,
    0,   59,    0,    0,    0,    0,    0,    0,    0,    0,
    0,   41,    0,   63,
};
final static short yydgoto[] = {                         14,
   15,   16,  150,  188,   74,   75,   76,   22,   23,   24,
   78,   79,  152,   81,   82,   53,   95,  144,  353,  167,
  283,  351,  168,   54,  145,  306,  307,   96,   25,   97,
  253,   26,   27,   28,   29,   30,   65,   31,  128,  129,
  130,  134,   32,  135,   33,   83,   34,  229,  230,  153,
  154,   98,   99,  100,
};
final static short yysindex[] = {                      1114,
  -22,    0,    8,  127, -216,   22, -200,  982, -172,    0,
    0,    0, 1425,    0, 1448,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    6,    0,    0,    0,    0,  -42,
   53,  -21, 1146,   13,    0, 1203,   88,    0,  103, -144,
    0,  118,    0,    0, -138,  -91,   61,  242,    0, 1221,
    0,    0,  -40, 1964,    0,    0, 1470,    0,    0,   66,
   -1,  -70,    0,    0,  -17,  -74,    0, -226,  154, 1066,
 1491,    0,    0,    0,    0,    0, 1512, 1533,    0,    0,
    0,    0,    0,   80,    0,  -75,    0,    0,    0,    0,
   24, 1312,    0,    0,  167,    0,  570,   24,   40,    0,
    0,    0,    0,    0,  -46,    0,    0, 1273,    0,    0,
 1555,  183,  189,   64, 1273,    0,    0, 1578,    0,  193,
   55,    0,  139,    0,    0,  -10,  -37, -113,    0,  196,
  207,    0,   -8,    0,  205, 1227,  209, 1943,    0, 1234,
    0,    0,    0,  -35, 1603,    0, 1624, 1645,    0,    0,
    0,    0, 1666,    0,    0, 1688,    0,    0,    0,    4,
   19,    0,   92, 1709,    0,    0, -135, 1731,  648,   24,
   24,   24,   24,  150,   24,   24,    0,  223,    0, 1752,
    0,  229,    0, 1250,  234,    0,    0,    0,    0,   24,
  233,    0,    0,   -5,  158,    0,    0,    0,    0,   17,
    0,    0, 1333,  246,    0,    0,    0,    0, 1773,  245,
  251,  104, 1273,    0,    0,  172,    0,    0, 1794,    0,
 1815,    0,    0,    0, 1837,    0, -247,    0,    0,   29,
    0,    0, 1858, 1354,  255,    0, 1354,  263, -120,   40,
   40,  150,  150,    0,    0,  265,    0,    0,  282,  290,
  292,  150,   51,    0,  188,    0,  293,    0,  297,    0,
   79, 1087,    0,  697,    0,  298,    0, 1257,  304,    0,
    0,    0, 1880,    0,  148, -247,    0,    0,    0, 1135,
    0, 1964,   90,    0,   91,    0, 1169,  316,    0,    0,
  318,    0,   24,  321,    0,  165,    0,    0,  324, 1333,
  325,  -88,    0,    0,    0, 1190,    0,    0,  328,  332,
  333,    0,    0,    0,    0, 1964, 1901,  334,  338,  339,
  117,    0,    0,  150,    0, -247,    0,  175,    0,  126,
    0, 1289,  345,    0,    0,    0,  347,    0, 1922,    0,
    0,    0,    0,  351,  269,    0,  352,  354,  137,    0,
  141,    0,  130,    0,    0,    0,    0,    0,  360,  366,
  138,    0,  367,  370, 1333, 1273,  151,  372, 1333,  374,
  152,    0,  376,    0,
};
final static short yyrindex[] = {                       416,
    0,   94,    0,    0,  173,  335,  306,    0,   82,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,  381,    0,  407,    0,
    0,  548,    0,    0,  307,  313,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,  437,    0,    0,    0,
    0,    0,    0,    0,  584,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,  431,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,  468,    0,
    0,    0,    0,    0,  320,    0,    0,    0,    0,    0,
    0,  621,    0,    0,    0,    0,    0,    0,    0,  674,
    0,    0,  710,    0,    0,    0,    0,    0,    0, -110,
  182,    0,    0,    0,    0,    0,    0,    0,    0,    0,
  743,    0,  908,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0, 1379, 1402,    0,    0,    0,    0,
    0,    0,  403,  412,    0,    0,    0,    0,    0,  -32,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
  775,    0,    0,    0,    0,    0,    0,    0,    0,  286,
    0,    0,    0,    0,    0,    0,    0,    0,   -3,  936,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,  -38,    0,    0,    0,    0,    0,    0,  497,
  525,  413,  415,    0,    0,    0,    0,    0,    0,    0,
    0,  115,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,   54,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,  197,    0,    0,    0,    0,    0,  803,    0,    0,
  827,    0,    0,  863,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,  119,    0,    0,    0,    0,    0,    0,
    0,    0,  198,    0,    0,    0,  194,    0,  208,    0,
    0,    0,    0,  887,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,  957,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,
};
final static short yygindex[] = {                         0,
  454,    5,    1,  346,   11,   32,  110,    0,    0,  155,
  406,  -71,  184,    0,    0,    0,  -27, -147,    0,  310,
 -204,    0,  -36,  435,  348,    0,  179,  484,    0,   70,
    0,    0,  -51,    0,    0,  960,  356,    0,    0,  368,
    0,  359,    0,    0,    0,    0,    0,  -78, -206, -143,
 -128,  398,  114,  145,
};
final static int YYTABLESIZE=2241;
static short yytable[];
static { yytable();}
static void yytable(){
yytable = new short[]{                        115,
   17,   64,  195,  219,  213,  161,  157,   76,   51,  158,
   19,  196,  225,   17,  144,   17,  132,  118,   19,   59,
  275,   35,  113,   19,  223,   19,  125,   10,   11,   12,
  131,   20,  285,   73,  255,  256,   95,    5,   91,   20,
   43,  126,  122,   40,   20,   60,   20,   36,   10,   11,
   12,   62,   84,   85,  116,  261,   45,   17,   19,  228,
  260,   59,  227,   91,   19,   44,   61,   19,   40,  277,
  141,   73,  276,   46,  180,  126,  157,  273,   73,   20,
  178,  175,  321,  132,   55,   20,  176,  185,   20,  328,
  223,  294,  165,   96,  293,  191,  223,  170,  190,  171,
  108,   68,   19,  184,  107,   91,  120,  183,  204,   21,
   40,  116,  211,  103,  302,  257,  259,   21,  187,  345,
  159,   19,   21,   20,   21,  234,  235,  233,   19,  121,
  123,  101,  231,  128,  170,  105,  171,  200,  207,  128,
  287,  288,   20,  268,  223,  215,  102,  267,   73,   20,
  127,  278,  330,  144,  128,  123,  250,   21,  123,  124,
  163,  104,  124,   21,  116,  106,   21,  174,  187,  165,
   41,   40,  332,  333,   19,   66,  296,   67,   19,   19,
  187,  170,  192,  171,  349,  269,  124,   77,  313,  127,
   19,  276,  170,  136,  171,   20,  278,  314,  258,   20,
   20,   21,  162,  141,  138,  327,  138,  169,  326,  215,
  177,   20,  165,  165,   63,  346,   80,  367,  276,  194,
   21,  371,   70,   70,  142,  147,  181,   21,  295,  182,
  114,  151,  156,  187,  281,  212,  189,  281,   76,  198,
  310,  242,  243,   19,   19,  317,  193,   19,   63,  278,
  199,  158,  205,  143,   80,   86,   38,   95,   95,  252,
  226,   80,  141,  246,   20,   20,  278,   95,   20,   10,
   11,   12,  248,   21,  251,  158,  254,   21,   21,  339,
   86,   38,  116,  240,  241,  158,  262,  281,  265,   21,
   19,  266,   19,   10,   11,   12,  270,   19,  284,  216,
  141,  151,  221,   10,   11,   12,  286,  151,  289,  356,
  151,   20,  276,   20,   96,   96,  116,  187,   20,  244,
  245,  208,   86,   38,   96,  290,   19,   19,  217,  201,
  291,   80,  141,  297,   27,  292,  158,  298,  368,  187,
  299,  308,   21,   21,  311,   18,   21,   20,   20,   19,
  200,  318,  319,   52,   10,   11,   12,  142,   18,  322,
   18,  323,  324,  264,  325,  141,  110,  329,  331,  141,
   20,  336,  337,  151,   27,  151,  338,  341,  344,  151,
  114,  342,  343,   37,   38,   39,  143,  347,  350,   21,
  352,   21,  217,   52,  355,  357,   21,  358,  359,  117,
  360,  361,   18,  362,  158,  363,  111,  365,  364,  366,
  146,  369,  370,  373,  158,    5,  142,  372,  304,  374,
  114,  158,   10,   11,   12,   21,   21,  151,  151,  149,
  217,  158,   10,   11,   12,  154,    3,  166,  200,   10,
   11,   12,  153,  202,  158,  143,  111,  305,   21,   10,
   11,   12,  203,  204,  142,  201,  117,   62,   81,   27,
  304,  131,   10,   11,   12,   40,   57,  213,    5,   83,
  217,  217,  217,  217,  217,  217,  148,  217,  239,   10,
   11,   12,  111,  143,  335,  209,  142,   42,  200,  305,
  217,  217,  217,  202,  173,  197,  211,    0,  109,    0,
    0,    3,    0,    0,    4,  114,    6,  213,  213,  117,
  213,  213,  213,    8,  166,  143,    0,    0,    0,  142,
    0,    0,    0,  142,  212,  158,    0,  213,  213,  213,
    0,  111,    0,    0,    0,    0,  211,  211,    0,  211,
  211,  211,  146,   10,   11,   12,    0,  116,  143,  146,
    0,    0,  143,    0,    0,  217,  211,  211,  211,    0,
  146,  146,  146,    0,  212,  212,    0,  212,  212,  212,
    0,    0,    0,    0,    0,    0,    0,    0,    0,  282,
    0,    0,  282,  135,  212,  212,  212,  116,    0,    0,
   27,   27,  213,    0,   27,   27,   27,   27,   27,   27,
    0,    0,    0,    0,   27,   27,   27,   27,    0,   27,
   27,   27,  170,    0,  171,    0,    0,    0,    0,    0,
   38,  211,    0,  135,    0,  316,    0,  117,    0,   94,
  172,   93,  282,    0,    0,    0,  114,  114,    0,    0,
  114,  114,  114,  114,  114,  114,    0,    0,    0,  212,
  114,  114,  114,  114,    0,  114,  114,  114,    0,    0,
   38,  117,  111,  111,    0,    0,  111,  111,  111,  111,
  111,  111,  116,  121,    0,    0,  111,  111,  111,  111,
    0,  111,  111,  111,    0,    0,  217,  217,    0,    0,
  217,  217,  217,  217,  217,  217,  217,  217,  217,  217,
  217,  217,  217,  217,    0,  217,  217,  217,  135,  126,
    0,    0,    0,  121,    0,    0,    0,    0,    0,    0,
    0,    0,    0,  213,  213,    0,    0,  213,  213,  213,
  213,  213,  213,  213,  213,  213,  213,  213,  213,  213,
  213,    0,  213,  213,  213,   38,    0,    0,    0,  126,
    0,    0,  211,  211,    0,    0,  211,  211,  211,  211,
  211,  211,  211,  211,  211,  211,  211,  211,  211,  211,
  164,  211,  211,  211,  120,    0,    0,    0,    0,    0,
  212,  212,   89,    0,  212,  212,  212,  212,  212,  212,
  212,  212,  212,  212,  212,  212,  212,  212,  121,  212,
  212,  212,   53,  116,  116,    0,    0,  116,  116,  116,
  116,  116,  116,    0,  120,    0,    0,  116,  116,  116,
  116,  303,  116,  116,  116,    0,   29,    0,    0,    0,
    0,    0,    0,    0,  126,   87,   88,   89,   90,  135,
  135,    0,   53,  135,  135,  135,  135,  135,  135,    0,
    0,    0,    0,  135,  135,  135,  135,    0,  135,  135,
  135,    0,  122,    0,    0,    0,   29,  108,    0,    0,
    0,    0,    0,    0,    0,    0,   38,   38,    0,    0,
   38,   38,   38,   38,   38,   38,   52,    0,    0,    0,
   38,   38,   38,   38,    0,   38,   38,   38,    0,  120,
    0,    0,  122,    0,    2,    0,    0,    3,  237,  238,
    4,    5,    6,    0,    0,    0,    0,    7,    0,    8,
    9,    0,   10,   11,   12,    0,   52,   53,    0,  121,
  121,    0,    0,  121,  121,  121,  121,  121,  121,    0,
    0,    0,    0,  121,  121,  121,  121,   87,  121,  121,
  121,   29,    0,  109,    0,    0,   69,    0,    0,    4,
    0,    6,    0,    0,    0,  126,  126,    0,   70,  126,
  126,  126,  126,  126,  126,   49,    0,    0,    0,  126,
  126,  126,  126,    0,  126,  126,  126,  122,    0,    0,
    0,    0,    0,    0,    0,    0,   61,    0,    0,  108,
    0,    0,  108,   89,   89,  108,  108,  108,    0,    0,
    0,   52,  108,   89,  108,  108,    0,  108,  108,  108,
    0,   50,    0,    0,    0,   49,    0,  133,    0,    0,
  120,  120,  106,    0,  120,  120,  120,  120,  120,  120,
    0,    0,    0,  160,  120,  120,  120,  120,    0,  120,
  120,  120,    0,    0,    0,    0,    0,    0,   53,   53,
   49,    0,   53,   53,   53,   53,   53,   53,    0,    0,
    0,    0,   53,   53,   53,   53,    0,   53,   53,   53,
    0,   61,   29,   29,    0,    0,   29,   29,   29,   29,
   29,   29,    0,    0,  133,    0,   29,   29,   29,   29,
    0,   29,   29,   29,   48,  140,    0,    0,    0,  139,
    0,    0,    0,    0,    0,    0,    0,    0,  122,  122,
  160,    0,  122,  122,  122,  122,  122,  122,    0,    0,
    0,    0,  122,  122,  122,  122,    0,  122,  122,  122,
    0,    0,   52,   52,    0,    0,   52,   52,   52,   52,
   52,   52,    0,  160,  160,    0,   52,   52,   52,   52,
    0,   52,   52,   52,  106,    0,    0,  106,   87,   87,
  106,  106,  106,    0,    0,    0,    0,  106,   87,  106,
  106,    0,  106,  106,  106,    0,  160,    0,  138,  160,
    0,    0,   49,    0,    0,   49,   49,   49,   49,   49,
   49,    0,    0,    0,    0,   49,   49,   49,   49,  138,
   49,   49,   49,   61,  160,    0,   61,   61,   61,   61,
   61,   61,    0,    0,    0,    0,   61,   61,   61,   61,
    0,   61,   61,   61,  160,  160,   13,    0,    2,    0,
    0,    3,   91,   92,    4,    5,    6,   40,    0,    0,
    0,    7,   47,    8,    9,  160,   10,   11,   12,  315,
   91,  112,   94,    0,   93,   40,   91,  203,   71,    0,
   72,   40,    0,   91,  210,    0,    0,    0,   40,    0,
   94,    0,   93,    0,    0,  160,   94,  160,   93,   91,
  249,  280,    0,   94,   40,   93,   91,  309,    0,    0,
    0,   40,    0,    0,  160,    0,    0,    0,    0,   94,
    0,   93,   91,    0,  334,    0,   94,   40,   93,    0,
    0,    0,    2,    0,    0,   69,    0,    0,    4,    5,
    6,    0,   94,    0,   93,    7,  137,   70,    9,    0,
   10,   11,   12,    2,    0,    0,   69,  300,  301,    4,
    5,    6,    0,    0,    0,    0,    7,    0,   70,    9,
    0,   10,   11,   12,    0,    0,    0,    0,    0,    1,
    2,    0,    0,    3,    0,    0,    4,    5,    6,    0,
    0,    0,    0,    7,    0,    8,    9,    0,   10,   11,
   12,  109,    0,    0,    3,    0,    0,    4,    0,    6,
    0,    0,    2,    0,    0,   69,    8,    0,    4,    5,
    6,  138,    0,    0,    0,    7,    0,   70,    9,    0,
   10,   11,   12,    0,    0,    2,    0,    0,    3,    0,
  320,    4,    5,    6,  164,    0,    0,    0,    7,    0,
    8,    9,    0,   10,   11,   12,  109,    0,    0,   69,
    0,    0,    4,    0,    6,  138,    0,    0,    0,   86,
   38,   70,    0,    0,    0,    0,    0,    0,   87,   88,
   89,   90,    0,    0,    0,    0,  280,   86,   38,    0,
    0,    0,    0,   86,   38,    0,   87,   88,   89,   90,
   86,   38,   87,   88,   89,   90,    0,    0,    0,   87,
   88,   89,   90,  104,    0,    0,   86,   38,    0,    0,
    0,    0,    0,   86,   38,   87,   88,   89,   90,    0,
    0,    0,   87,   88,   89,   90,  102,    0,    0,   86,
   38,    0,    0,    0,    0,    0,    0,    0,   87,   88,
   89,   90,    0,    0,    0,    2,    0,    0,   69,   56,
  348,    4,    5,    6,    0,    0,    0,    0,    7,    0,
   70,    9,    0,   10,   11,   12,    0,    0,    2,    0,
    0,    3,   58,    0,    4,    5,    6,    0,    0,    0,
    0,    7,    0,    8,    9,    0,   10,   11,   12,    2,
    0,    0,   69,    0,  119,    4,    5,    6,    0,    0,
    0,    0,    7,    0,   70,    9,    0,   10,   11,   12,
    2,    0,    0,    3,    0,  146,    4,    5,    6,    0,
    0,    0,    0,    7,    0,    8,    9,    0,   10,   11,
   12,    0,    0,    0,    0,  104,  149,    0,  104,   73,
   73,  104,  104,  104,    0,    0,    0,    0,  104,    0,
  104,  104,    0,  104,  104,  104,    0,  155,  102,    0,
    0,  102,   68,   68,  102,  102,  102,    0,    0,    0,
    0,  102,    0,  102,  102,    0,  102,  102,  102,  179,
    1,    2,    0,    0,    3,    0,    0,    4,    5,    6,
    0,    0,    0,    0,    7,    0,    8,    9,    0,   10,
   11,   12,  186,    1,    2,    0,    0,    3,    0,    0,
    4,    5,    6,    0,    0,    0,    0,    7,    0,    8,
    9,    0,   10,   11,   12,    1,    2,  214,    0,    3,
    0,    0,    4,    5,    6,    0,    0,    0,    0,    7,
    0,    8,    9,    0,   10,   11,   12,    2,  218,    0,
   69,    0,    0,    4,    5,    6,    0,    0,    0,    0,
    7,    0,   70,    9,    0,   10,   11,   12,    2,  220,
    0,   69,    0,    0,    4,    5,    6,    0,    0,    0,
    0,    7,    0,   70,    9,    0,   10,   11,   12,    2,
  222,    0,   69,    0,    0,    4,    5,    6,    0,    0,
    0,    0,    7,    0,   70,    9,    0,   10,   11,   12,
    0,    2,  224,    0,    3,    0,    0,    4,    5,    6,
    0,    0,    0,    0,    7,    0,    8,    9,    0,   10,
   11,   12,    0,  232,    2,    0,    0,    3,    0,    0,
    4,    5,    6,    0,    0,    0,    0,    7,    0,    8,
    9,    0,   10,   11,   12,  236,    0,    0,    0,    2,
    0,    0,   69,    0,    0,    4,    5,    6,    0,    0,
    0,    0,    7,    0,   70,    9,  247,   10,   11,   12,
    2,    0,    0,   69,    0,    0,    4,    5,    6,    0,
    0,    0,    0,    7,    0,   70,    9,  263,   10,   11,
   12,    2,    0,    0,   69,    0,    0,    4,    5,    6,
    0,    0,    0,    0,    7,    0,   70,    9,  271,   10,
   11,   12,    2,    0,    0,   69,    0,    0,    4,    5,
    6,    0,    0,    0,    0,    7,    0,   70,    9,  272,
   10,   11,   12,    0,    2,    0,    0,   69,    0,    0,
    4,    5,    6,    0,    0,    0,    0,    7,    0,   70,
    9,  274,   10,   11,   12,    2,    0,    0,    3,    0,
    0,    4,    5,    6,    0,    0,    0,    0,    7,    0,
    8,    9,  279,   10,   11,   12,    0,    2,    0,    0,
    3,    0,    0,    4,    5,    6,    0,    0,    0,    0,
    7,    0,    8,    9,  312,   10,   11,   12,    2,    0,
    0,    3,    0,    0,    4,    5,    6,    0,    0,    0,
    0,    7,    0,    8,    9,  340,   10,   11,   12,    2,
    0,    0,   69,    0,    0,    4,    5,    6,    0,    0,
    0,    0,    7,    0,   70,    9,  354,   10,   11,   12,
    2,    0,    0,   69,    0,    0,    4,    5,    6,    0,
    0,    0,    0,    7,    0,   70,    9,  206,   10,   11,
   12,    2,    0,    0,   69,    0,    0,    4,    5,    6,
    0,    0,    0,    0,    7,    0,   70,    9,    0,   10,
   11,   12,    0,    2,    0,    0,   69,    0,    0,    4,
    5,    6,    0,    0,    0,    0,    7,    0,   70,    9,
    0,   10,   11,   12,    2,    0,    0,    3,    0,    0,
    4,    5,    6,    0,    0,    0,    0,    7,    0,    8,
    9,    0,   10,   11,   12,    0,    2,    0,    0,   69,
    0,    0,    4,    5,    6,    0,    0,    0,    0,    7,
    0,   70,    9,    0,   10,   11,   12,    2,    0,    0,
    3,    0,    0,    4,    5,    6,    0,    0,    0,    0,
    7,    0,    8,    9,    0,   10,   11,   12,    2,    0,
    0,    3,    0,    0,    4,    5,    6,    0,    0,    0,
    0,    7,    0,    8,    9,    0,   10,   11,   12,    2,
    0,    0,   69,    0,    0,    4,    5,    0,    0,    0,
    0,    0,    7,    0,   70,    9,    0,   10,   11,   12,
    2,    0,    0,    3,    0,    0,    4,    5,    6,    0,
    0,    0,    0,    7,    0,    8,    9,    0,   10,   11,
   12,
};
}
static short yycheck[];
static { yycheck(); }
static void yycheck() {
yycheck = new short[] {                         40,
    0,   44,   40,  147,   40,   84,   78,   40,    8,  257,
    0,  125,  156,   13,  125,   15,   68,   54,    8,   15,
  227,   44,   50,   13,  153,   15,   44,  275,  276,  277,
  257,    0,  237,   33,   40,   41,   40,  264,   40,    8,
  257,   59,   44,   45,   13,   40,   15,   40,  275,  276,
  277,   46,   40,   41,   54,  203,  257,   57,   48,   41,
   44,   57,   44,   40,   54,   44,   61,   57,   45,   41,
   70,   71,   44,  274,  111,   59,  148,  221,   78,   48,
  108,   42,  287,  135,  257,   54,   47,  115,   57,  296,
  219,   41,   92,   40,   44,   41,  225,   43,   44,   45,
   40,  123,   92,   40,   44,   40,   41,   44,  136,    0,
   45,  111,  140,  258,  262,  194,  195,    8,  118,  326,
   41,  111,   13,   92,   15,  261,  262,  164,  118,   60,
   61,   44,   41,   40,   43,  274,   45,   44,  138,   46,
  261,  262,  111,   40,  273,  145,   44,   44,  148,  118,
  264,  230,  300,  264,   61,   41,  184,   48,   44,   41,
   91,   44,   44,   54,  164,  257,   57,   98,  168,  169,
   44,   45,  261,  262,  164,  123,  255,  125,  168,  169,
  180,   43,   44,   45,  332,  213,  257,   33,   41,  264,
  180,   44,   43,   40,   45,  164,  275,  276,   41,  168,
  169,   92,  278,  203,  123,   41,  125,   41,   44,  209,
  257,  180,   40,   41,  257,   41,   33,  365,   44,  257,
  111,  369,  261,  262,   70,   71,   44,  118,   41,   41,
  271,   77,   78,  233,  234,  271,   44,  237,  271,   44,
  268,  172,  173,  233,  234,  282,  257,  237,  257,  328,
   44,  257,   44,   70,   71,  257,  258,  261,  262,  190,
  257,   78,  262,   41,  233,  234,  345,  271,  237,  275,
  276,  277,   44,  164,   41,  257,   44,  168,  169,  316,
  257,  258,  282,  170,  171,  257,   41,  287,   44,  180,
  280,   41,  282,  275,  276,  277,  125,  287,   44,  145,
  300,  147,  148,  275,  276,  277,   44,  153,   44,   41,
  156,  280,   44,  282,  261,  262,  316,  317,  287,  175,
  176,  138,  257,  258,  271,   44,  316,  317,  145,  125,
   41,  148,  332,   41,    0,   44,  257,   41,  366,  339,
  262,   44,  233,  234,   41,    0,  237,  316,  317,  339,
  257,  262,  262,    8,  275,  276,  277,  203,   13,   44,
   15,   44,  293,  209,   44,  365,  125,   44,   44,  369,
  339,   44,   41,  219,   40,  221,   44,   44,  262,  225,
    0,   44,   44,  257,  258,  259,  203,  262,   44,  280,
   44,  282,  209,   48,   44,   44,  287,   44,  262,   54,
  260,  272,   57,   44,  257,   40,    0,   41,  271,   40,
  125,  261,   41,  262,  257,    0,  262,   44,  264,   44,
   40,  257,  275,  276,  277,  316,  317,  273,  123,  123,
    0,  257,  275,  276,  277,  123,    0,   92,  257,  275,
  276,  277,  123,   41,  257,  262,   40,  264,  339,  275,
  276,  277,   41,   41,  300,   41,  111,  260,  262,  125,
  306,  257,  275,  276,  277,  272,   13,    0,  264,  262,
   40,   41,   42,   43,   44,   45,   71,   47,  169,  275,
  276,  277,   48,  300,  306,  138,  332,    4,  133,  306,
   60,   61,   62,  135,   97,  128,    0,   -1,  257,   -1,
   -1,  260,   -1,   -1,  263,  125,  265,   40,   41,  164,
   43,   44,   45,  272,  169,  332,   -1,   -1,   -1,  365,
   -1,   -1,   -1,  369,    0,  257,   -1,   60,   61,   62,
   -1,  125,   -1,   -1,   -1,   -1,   40,   41,   -1,   43,
   44,   45,  257,  275,  276,  277,   -1,    0,  365,  264,
   -1,   -1,  369,   -1,   -1,  125,   60,   61,   62,   -1,
  275,  276,  277,   -1,   40,   41,   -1,   43,   44,   45,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,  234,
   -1,   -1,  237,    0,   60,   61,   62,   40,   -1,   -1,
  256,  257,  125,   -1,  260,  261,  262,  263,  264,  265,
   -1,   -1,   -1,   -1,  270,  271,  272,  273,   -1,  275,
  276,  277,   43,   -1,   45,   -1,   -1,   -1,   -1,   -1,
    0,  125,   -1,   40,   -1,  280,   -1,  282,   -1,   60,
   61,   62,  287,   -1,   -1,   -1,  256,  257,   -1,   -1,
  260,  261,  262,  263,  264,  265,   -1,   -1,   -1,  125,
  270,  271,  272,  273,   -1,  275,  276,  277,   -1,   -1,
   40,  316,  256,  257,   -1,   -1,  260,  261,  262,  263,
  264,  265,  125,    0,   -1,   -1,  270,  271,  272,  273,
   -1,  275,  276,  277,   -1,   -1,  256,  257,   -1,   -1,
  260,  261,  262,  263,  264,  265,  266,  267,  268,  269,
  270,  271,  272,  273,   -1,  275,  276,  277,  125,    0,
   -1,   -1,   -1,   40,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,  256,  257,   -1,   -1,  260,  261,  262,
  263,  264,  265,  266,  267,  268,  269,  270,  271,  272,
  273,   -1,  275,  276,  277,  125,   -1,   -1,   -1,   40,
   -1,   -1,  256,  257,   -1,   -1,  260,  261,  262,  263,
  264,  265,  266,  267,  268,  269,  270,  271,  272,  273,
  123,  275,  276,  277,    0,   -1,   -1,   -1,   -1,   -1,
  256,  257,   40,   -1,  260,  261,  262,  263,  264,  265,
  266,  267,  268,  269,  270,  271,  272,  273,  125,  275,
  276,  277,    0,  256,  257,   -1,   -1,  260,  261,  262,
  263,  264,  265,   -1,   40,   -1,   -1,  270,  271,  272,
  273,  125,  275,  276,  277,   -1,    0,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,  125,  266,  267,  268,  269,  256,
  257,   -1,   40,  260,  261,  262,  263,  264,  265,   -1,
   -1,   -1,   -1,  270,  271,  272,  273,   -1,  275,  276,
  277,   -1,    0,   -1,   -1,   -1,   40,  125,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,  256,  257,   -1,   -1,
  260,  261,  262,  263,  264,  265,    0,   -1,   -1,   -1,
  270,  271,  272,  273,   -1,  275,  276,  277,   -1,  125,
   -1,   -1,   40,   -1,  257,   -1,   -1,  260,  261,  262,
  263,  264,  265,   -1,   -1,   -1,   -1,  270,   -1,  272,
  273,   -1,  275,  276,  277,   -1,   40,  125,   -1,  256,
  257,   -1,   -1,  260,  261,  262,  263,  264,  265,   -1,
   -1,   -1,   -1,  270,  271,  272,  273,   40,  275,  276,
  277,  125,   -1,  257,   -1,   -1,  260,   -1,   -1,  263,
   -1,  265,   -1,   -1,   -1,  256,  257,   -1,  272,  260,
  261,  262,  263,  264,  265,   40,   -1,   -1,   -1,  270,
  271,  272,  273,   -1,  275,  276,  277,  125,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   40,   -1,   -1,  257,
   -1,   -1,  260,  261,  262,  263,  264,  265,   -1,   -1,
   -1,  125,  270,  271,  272,  273,   -1,  275,  276,  277,
   -1,   40,   -1,   -1,   -1,   44,   -1,   68,   -1,   -1,
  256,  257,  125,   -1,  260,  261,  262,  263,  264,  265,
   -1,   -1,   -1,   84,  270,  271,  272,  273,   -1,  275,
  276,  277,   -1,   -1,   -1,   -1,   -1,   -1,  256,  257,
  125,   -1,  260,  261,  262,  263,  264,  265,   -1,   -1,
   -1,   -1,  270,  271,  272,  273,   -1,  275,  276,  277,
   -1,  125,  256,  257,   -1,   -1,  260,  261,  262,  263,
  264,  265,   -1,   -1,  135,   -1,  270,  271,  272,  273,
   -1,  275,  276,  277,  123,   40,   -1,   -1,   -1,   44,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,  256,  257,
  161,   -1,  260,  261,  262,  263,  264,  265,   -1,   -1,
   -1,   -1,  270,  271,  272,  273,   -1,  275,  276,  277,
   -1,   -1,  256,  257,   -1,   -1,  260,  261,  262,  263,
  264,  265,   -1,  194,  195,   -1,  270,  271,  272,  273,
   -1,  275,  276,  277,  257,   -1,   -1,  260,  261,  262,
  263,  264,  265,   -1,   -1,   -1,   -1,  270,  271,  272,
  273,   -1,  275,  276,  277,   -1,  227,   -1,  123,  230,
   -1,   -1,  257,   -1,   -1,  260,  261,  262,  263,  264,
  265,   -1,   -1,   -1,   -1,  270,  271,  272,  273,  123,
  275,  276,  277,  257,  255,   -1,  260,  261,  262,  263,
  264,  265,   -1,   -1,   -1,   -1,  270,  271,  272,  273,
   -1,  275,  276,  277,  275,  276,  123,   -1,  257,   -1,
   -1,  260,   40,   41,  263,  264,  265,   45,   -1,   -1,
   -1,  270,  271,  272,  273,  296,  275,  276,  277,  125,
   40,   41,   60,   -1,   62,   45,   40,   41,  123,   -1,
  125,   45,   -1,   40,   41,   -1,   -1,   -1,   45,   -1,
   60,   -1,   62,   -1,   -1,  326,   60,  328,   62,   40,
   41,  123,   -1,   60,   45,   62,   40,   41,   -1,   -1,
   -1,   45,   -1,   -1,  345,   -1,   -1,   -1,   -1,   60,
   -1,   62,   40,   -1,  125,   -1,   60,   45,   62,   -1,
   -1,   -1,  257,   -1,   -1,  260,   -1,   -1,  263,  264,
  265,   -1,   60,   -1,   62,  270,  271,  272,  273,   -1,
  275,  276,  277,  257,   -1,   -1,  260,  261,  262,  263,
  264,  265,   -1,   -1,   -1,   -1,  270,   -1,  272,  273,
   -1,  275,  276,  277,   -1,   -1,   -1,   -1,   -1,  256,
  257,   -1,   -1,  260,   -1,   -1,  263,  264,  265,   -1,
   -1,   -1,   -1,  270,   -1,  272,  273,   -1,  275,  276,
  277,  257,   -1,   -1,  260,   -1,   -1,  263,   -1,  265,
   -1,   -1,  257,   -1,   -1,  260,  272,   -1,  263,  264,
  265,  123,   -1,   -1,   -1,  270,   -1,  272,  273,   -1,
  275,  276,  277,   -1,   -1,  257,   -1,   -1,  260,   -1,
  262,  263,  264,  265,  123,   -1,   -1,   -1,  270,   -1,
  272,  273,   -1,  275,  276,  277,  257,   -1,   -1,  260,
   -1,   -1,  263,   -1,  265,  123,   -1,   -1,   -1,  257,
  258,  272,   -1,   -1,   -1,   -1,   -1,   -1,  266,  267,
  268,  269,   -1,   -1,   -1,   -1,  123,  257,  258,   -1,
   -1,   -1,   -1,  257,  258,   -1,  266,  267,  268,  269,
  257,  258,  266,  267,  268,  269,   -1,   -1,   -1,  266,
  267,  268,  269,  125,   -1,   -1,  257,  258,   -1,   -1,
   -1,   -1,   -1,  257,  258,  266,  267,  268,  269,   -1,
   -1,   -1,  266,  267,  268,  269,  125,   -1,   -1,  257,
  258,   -1,   -1,   -1,   -1,   -1,   -1,   -1,  266,  267,
  268,  269,   -1,   -1,   -1,  257,   -1,   -1,  260,  125,
  262,  263,  264,  265,   -1,   -1,   -1,   -1,  270,   -1,
  272,  273,   -1,  275,  276,  277,   -1,   -1,  257,   -1,
   -1,  260,  125,   -1,  263,  264,  265,   -1,   -1,   -1,
   -1,  270,   -1,  272,  273,   -1,  275,  276,  277,  257,
   -1,   -1,  260,   -1,  125,  263,  264,  265,   -1,   -1,
   -1,   -1,  270,   -1,  272,  273,   -1,  275,  276,  277,
  257,   -1,   -1,  260,   -1,  125,  263,  264,  265,   -1,
   -1,   -1,   -1,  270,   -1,  272,  273,   -1,  275,  276,
  277,   -1,   -1,   -1,   -1,  257,  125,   -1,  260,  261,
  262,  263,  264,  265,   -1,   -1,   -1,   -1,  270,   -1,
  272,  273,   -1,  275,  276,  277,   -1,  125,  257,   -1,
   -1,  260,  261,  262,  263,  264,  265,   -1,   -1,   -1,
   -1,  270,   -1,  272,  273,   -1,  275,  276,  277,  125,
  256,  257,   -1,   -1,  260,   -1,   -1,  263,  264,  265,
   -1,   -1,   -1,   -1,  270,   -1,  272,  273,   -1,  275,
  276,  277,  125,  256,  257,   -1,   -1,  260,   -1,   -1,
  263,  264,  265,   -1,   -1,   -1,   -1,  270,   -1,  272,
  273,   -1,  275,  276,  277,  256,  257,  125,   -1,  260,
   -1,   -1,  263,  264,  265,   -1,   -1,   -1,   -1,  270,
   -1,  272,  273,   -1,  275,  276,  277,  257,  125,   -1,
  260,   -1,   -1,  263,  264,  265,   -1,   -1,   -1,   -1,
  270,   -1,  272,  273,   -1,  275,  276,  277,  257,  125,
   -1,  260,   -1,   -1,  263,  264,  265,   -1,   -1,   -1,
   -1,  270,   -1,  272,  273,   -1,  275,  276,  277,  257,
  125,   -1,  260,   -1,   -1,  263,  264,  265,   -1,   -1,
   -1,   -1,  270,   -1,  272,  273,   -1,  275,  276,  277,
   -1,  257,  125,   -1,  260,   -1,   -1,  263,  264,  265,
   -1,   -1,   -1,   -1,  270,   -1,  272,  273,   -1,  275,
  276,  277,   -1,  125,  257,   -1,   -1,  260,   -1,   -1,
  263,  264,  265,   -1,   -1,   -1,   -1,  270,   -1,  272,
  273,   -1,  275,  276,  277,  125,   -1,   -1,   -1,  257,
   -1,   -1,  260,   -1,   -1,  263,  264,  265,   -1,   -1,
   -1,   -1,  270,   -1,  272,  273,  125,  275,  276,  277,
  257,   -1,   -1,  260,   -1,   -1,  263,  264,  265,   -1,
   -1,   -1,   -1,  270,   -1,  272,  273,  125,  275,  276,
  277,  257,   -1,   -1,  260,   -1,   -1,  263,  264,  265,
   -1,   -1,   -1,   -1,  270,   -1,  272,  273,  125,  275,
  276,  277,  257,   -1,   -1,  260,   -1,   -1,  263,  264,
  265,   -1,   -1,   -1,   -1,  270,   -1,  272,  273,  125,
  275,  276,  277,   -1,  257,   -1,   -1,  260,   -1,   -1,
  263,  264,  265,   -1,   -1,   -1,   -1,  270,   -1,  272,
  273,  125,  275,  276,  277,  257,   -1,   -1,  260,   -1,
   -1,  263,  264,  265,   -1,   -1,   -1,   -1,  270,   -1,
  272,  273,  125,  275,  276,  277,   -1,  257,   -1,   -1,
  260,   -1,   -1,  263,  264,  265,   -1,   -1,   -1,   -1,
  270,   -1,  272,  273,  125,  275,  276,  277,  257,   -1,
   -1,  260,   -1,   -1,  263,  264,  265,   -1,   -1,   -1,
   -1,  270,   -1,  272,  273,  125,  275,  276,  277,  257,
   -1,   -1,  260,   -1,   -1,  263,  264,  265,   -1,   -1,
   -1,   -1,  270,   -1,  272,  273,  125,  275,  276,  277,
  257,   -1,   -1,  260,   -1,   -1,  263,  264,  265,   -1,
   -1,   -1,   -1,  270,   -1,  272,  273,  125,  275,  276,
  277,  257,   -1,   -1,  260,   -1,   -1,  263,  264,  265,
   -1,   -1,   -1,   -1,  270,   -1,  272,  273,   -1,  275,
  276,  277,   -1,  257,   -1,   -1,  260,   -1,   -1,  263,
  264,  265,   -1,   -1,   -1,   -1,  270,   -1,  272,  273,
   -1,  275,  276,  277,  257,   -1,   -1,  260,   -1,   -1,
  263,  264,  265,   -1,   -1,   -1,   -1,  270,   -1,  272,
  273,   -1,  275,  276,  277,   -1,  257,   -1,   -1,  260,
   -1,   -1,  263,  264,  265,   -1,   -1,   -1,   -1,  270,
   -1,  272,  273,   -1,  275,  276,  277,  257,   -1,   -1,
  260,   -1,   -1,  263,  264,  265,   -1,   -1,   -1,   -1,
  270,   -1,  272,  273,   -1,  275,  276,  277,  257,   -1,
   -1,  260,   -1,   -1,  263,  264,  265,   -1,   -1,   -1,
   -1,  270,   -1,  272,  273,   -1,  275,  276,  277,  257,
   -1,   -1,  260,   -1,   -1,  263,  264,   -1,   -1,   -1,
   -1,   -1,  270,   -1,  272,  273,   -1,  275,  276,  277,
  257,   -1,   -1,  260,   -1,   -1,  263,  264,  265,   -1,
   -1,   -1,   -1,  270,   -1,  272,  273,   -1,  275,  276,
  277,
};
}
final static short YYFINAL=14;
final static short YYMAXTOKEN=278;
final static String yyname[] = {
"end-of-file",null,null,null,null,null,null,null,null,null,null,null,null,null,
null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,
null,null,null,null,null,null,null,null,null,null,"'('","')'","'*'","'+'","','",
"'-'","'.'","'/'",null,null,null,null,null,null,null,null,null,null,null,"';'",
"'<'","'='","'>'",null,null,null,null,null,null,null,null,null,null,null,null,
null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,
null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,
null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,
"'{'",null,"'}'",null,null,null,null,null,null,null,null,null,null,null,null,
null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,
null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,
null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,
null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,
null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,
null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,
null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,
null,null,null,null,null,null,null,"ID","CTE","CADENA","IF","ELSE","ENDIF",
"PRINT","VOID","RETURN","COMP_MAYOR_IGUAL","COMP_MENOR_IGUAL","COMP_IGUAL",
"COMP_DISTINTO","CLASS","WHILE","DO","INTERFACE","IMPLEMENT","INT","ULONG",
"FLOAT","OPERADOR_MENOS",
};
final static String yyrule[] = {
"$accept : programa",
"programa : '{' sentencias '}'",
"programa : sentencias '}'",
"programa : '{' sentencias",
"programa : '{' '}'",
"programa :",
"sentencias : sentencia",
"sentencias : sentencias sentencia",
"sentencia : sentencia_declarativa",
"sentencia : sentencia_ejecutable",
"sentencia : error ','",
"sentencia_ejecutable : sentencia_asignacion",
"sentencia_ejecutable : sentencia_invocacion_funcion",
"sentencia_ejecutable : sentencia_imprimir",
"sentencia_ejecutable : sentencia_seleccion",
"sentencia_ejecutable : sentencia_iterativa_do_while",
"sentencia_ejecutable : sentencia_return",
"sentencias_funcion : sentencia_funcion",
"sentencias_funcion : sentencias_funcion sentencia_funcion",
"sentencia_funcion : sentencia_declarativa",
"sentencia_funcion : sentencia_ejecutable_funcion",
"sentencia_ejecutable_funcion : sentencia_asignacion",
"sentencia_ejecutable_funcion : sentencia_invocacion_funcion",
"sentencia_ejecutable_funcion : sentencia_imprimir",
"sentencia_ejecutable_funcion : sentencia_seleccion_funcion",
"sentencia_ejecutable_funcion : sentencia_iterativa_do_while_funcion",
"sentencia_return : RETURN ','",
"sentencia_return : RETURN",
"sentencia_iterativa_do_while : DO bloque_sentencias_ejecutables_while WHILE '(' condicion ')' ','",
"sentencia_iterativa_do_while : DO bloque_sentencias_ejecutables_while WHILE '(' condicion ')'",
"sentencia_iterativa_do_while : DO WHILE '(' condicion ')' ','",
"sentencia_iterativa_do_while : DO bloque_sentencias_ejecutables_while WHILE '(' ')' ','",
"sentencia_iterativa_do_while : DO bloque_sentencias_ejecutables_while '(' condicion ')' ','",
"sentencia_iterativa_do_while : DO WHILE ','",
"sentencia_iterativa_do_while : DO bloque_sentencias_ejecutables_while WHILE ','",
"sentencia_iterativa_do_while : DO ','",
"sentencia_iterativa_do_while : DO '(' condicion ')' ','",
"sentencia_iterativa_do_while : DO '(' ')' ','",
"sentencia_iterativa_do_while : DO '(' ')'",
"sentencia_iterativa_do_while_funcion : DO bloque_sentencias_ejecutables_funcion WHILE '(' condicion ')' ','",
"$$1 :",
"sentencia_iterativa_do_while_funcion : DO bloque_sentencias_ejecutables_funcion WHILE '(' condicion ')' $$1 DO WHILE '(' condicion ')' ','",
"sentencia_iterativa_do_while_funcion : DO bloque_sentencias_ejecutables_funcion WHILE '(' ')' ','",
"sentencia_iterativa_do_while_funcion : DO bloque_sentencias_ejecutables_funcion '(' condicion ')' ','",
"sentencia_iterativa_do_while_funcion : DO WHILE ','",
"sentencia_iterativa_do_while_funcion : DO bloque_sentencias_ejecutables_funcion WHILE ','",
"sentencia_iterativa_do_while_funcion : DO ','",
"sentencia_iterativa_do_while_funcion : DO '(' condicion ')' ','",
"sentencia_iterativa_do_while_funcion : DO '(' ')' ','",
"sentencia_iterativa_do_while_funcion : DO '(' ')'",
"sentencia_seleccion : IF '(' condicion ')' bloque_sentencias_ejecutables_then ELSE bloque_sentencias_ejecutables ENDIF ','",
"sentencia_seleccion : IF '(' condicion ')' bloque_sentencias_ejecutables_then ENDIF ','",
"sentencia_seleccion : IF '(' condicion ')' bloque_sentencias_ejecutables_then ELSE bloque_sentencias_ejecutables ENDIF",
"sentencia_seleccion : IF '(' condicion ')' bloque_sentencias_ejecutables_then ENDIF",
"sentencia_seleccion : IF '(' ')' bloque_sentencias_ejecutables_then ELSE bloque_sentencias_ejecutables ENDIF ','",
"sentencia_seleccion : IF '(' ')' bloque_sentencias_ejecutables_then ENDIF ','",
"sentencia_seleccion : IF '(' condicion ')' ELSE bloque_sentencias_ejecutables ENDIF ','",
"sentencia_seleccion : IF '(' condicion ')' bloque_sentencias_ejecutables_then ELSE ENDIF ','",
"sentencia_seleccion : IF '(' condicion ')' ENDIF ','",
"sentencia_seleccion_funcion : IF '(' condicion ')' bloque_sentencias_ejecutables_funcion ELSE bloque_sentencias_ejecutables_funcion ENDIF ','",
"sentencia_seleccion_funcion : IF '(' condicion ')' bloque_sentencias_ejecutables_funcion ENDIF ','",
"sentencia_seleccion_funcion : IF '(' condicion ')' bloque_sentencias_ejecutables_funcion ELSE bloque_sentencias_ejecutables_funcion ENDIF",
"$$2 :",
"sentencia_seleccion_funcion : IF '(' condicion ')' bloque_sentencias_ejecutables_funcion ENDIF $$2 IF '(' ')' bloque_sentencias_ejecutables_funcion ELSE bloque_sentencias_ejecutables_funcion ENDIF ','",
"sentencia_seleccion_funcion : IF '(' ')' bloque_sentencias_ejecutables_funcion ENDIF ','",
"sentencia_seleccion_funcion : IF '(' condicion ')' ELSE bloque_sentencias_ejecutables_funcion ENDIF ','",
"sentencia_seleccion_funcion : IF '(' condicion ')' bloque_sentencias_ejecutables_funcion ELSE ENDIF ','",
"sentencia_seleccion_funcion : IF '(' condicion ')' ENDIF ','",
"bloque_sentencias_ejecutables_then : sentencia_ejecutable",
"bloque_sentencias_ejecutables_then : '{' sentencias_ejecutables '}'",
"bloque_sentencias_ejecutables_then : '{' sentencias_ejecutables",
"bloque_sentencias_ejecutables_then : sentencias_ejecutables '}'",
"bloque_sentencias_ejecutables_then : '{' '}'",
"bloque_sentencias_ejecutables_then : sentencia_declarativa",
"bloque_sentencias_ejecutables_while : '{' primer_sentencia '}'",
"bloque_sentencias_ejecutables_while : '{' primer_sentencia sentencias_ejecutables '}'",
"bloque_sentencias_ejecutables_while : '{' primer_sentencia sentencias_ejecutables",
"bloque_sentencias_ejecutables_while : primer_sentencia sentencias_ejecutables '}'",
"bloque_sentencias_ejecutables_while : '{' '}'",
"bloque_sentencias_ejecutables_while : sentencia_declarativa",
"primer_sentencia : sentencia_ejecutable",
"bloque_sentencias_ejecutables : sentencia_ejecutable",
"bloque_sentencias_ejecutables : '{' sentencia_ejecutable sentencias_ejecutables '}'",
"bloque_sentencias_ejecutables : '{' sentencia_ejecutable sentencias_ejecutables",
"bloque_sentencias_ejecutables : sentencia_ejecutable sentencias_ejecutables '}'",
"bloque_sentencias_ejecutables : '{' '}'",
"bloque_sentencias_ejecutables : sentencia_declarativa",
"bloque_sentencias_ejecutables_funcion : sentencia_ejecutable_funcion",
"bloque_sentencias_ejecutables_funcion : sentencia_return",
"bloque_sentencias_ejecutables_funcion : sentencia_declarativa",
"bloque_sentencias_ejecutables_funcion : '{' sentencias_ejecutables_funcion '}'",
"bloque_sentencias_ejecutables_funcion : '{' sentencias_ejecutables_funcion sentencia_return '}'",
"bloque_sentencias_ejecutables_funcion : '{' sentencias_ejecutables_funcion sentencia_return sentencias_ejecutables_funcion_inalcanzable '}'",
"bloque_sentencias_ejecutables_funcion : sentencias_ejecutables_funcion '}'",
"bloque_sentencias_ejecutables_funcion : sentencias_ejecutables_funcion sentencia_return '}'",
"bloque_sentencias_ejecutables_funcion : '{' sentencias_ejecutables_funcion",
"bloque_sentencias_ejecutables_funcion : '{' sentencias_ejecutables_funcion sentencia_return",
"bloque_sentencias_ejecutables_funcion : '{' '}'",
"sentencias_ejecutables_funcion_inalcanzable : sentencia_ejecutable_funcion_inalcanzable",
"sentencias_ejecutables_funcion_inalcanzable : sentencias_ejecutables_funcion_inalcanzable sentencia_ejecutable_funcion_inalcanzable",
"sentencia_ejecutable_funcion_inalcanzable : sentencia_return",
"sentencia_ejecutable_funcion_inalcanzable : sentencia_ejecutable_funcion",
"sentencias_ejecutables : sentencia_ejecutable",
"sentencias_ejecutables : sentencias_ejecutables sentencia_ejecutable",
"sentencias_ejecutables : sentencia_declarativa",
"sentencias_ejecutables : sentencias_ejecutables sentencia_declarativa",
"sentencias_ejecutables_funcion : sentencia_ejecutable_funcion",
"sentencias_ejecutables_funcion : sentencias_ejecutables_funcion sentencia_ejecutable_funcion",
"sentencias_ejecutables_funcion : sentencia_declarativa",
"sentencias_ejecutables_funcion : sentencias_ejecutables_funcion sentencia_declarativa",
"sentencia_imprimir : PRINT CADENA ','",
"sentencia_imprimir : PRINT CADENA",
"sentencia_imprimir : PRINT ','",
"sentencia_imprimir : PRINT ID ','",
"sentencia_imprimir : PRINT ID",
"sentencia_imprimir : PRINT constante ','",
"sentencia_imprimir : PRINT constante",
"sentencia_invocacion_funcion : sentencia_objeto_identificador '(' expresion ')' ','",
"sentencia_invocacion_funcion : sentencia_objeto_identificador '(' ')' ','",
"sentencia_invocacion_funcion : sentencia_objeto_identificador '(' expresion ',' lista_expresiones_invocacion_funcion_exceso ')' ','",
"sentencia_invocacion_funcion : sentencia_objeto_identificador '(' expresion ')'",
"sentencia_invocacion_funcion : sentencia_objeto_identificador '(' ')'",
"sentencia_invocacion_funcion : sentencia_objeto_identificador '(' expresion ',' lista_expresiones_invocacion_funcion_exceso ')'",
"lista_expresiones_invocacion_funcion_exceso : expresion",
"lista_expresiones_invocacion_funcion_exceso : lista_expresiones_invocacion_funcion_exceso ',' expresion",
"sentencia_asignacion : sentencia_objeto_identificador '=' expresion ','",
"sentencia_asignacion : sentencia_objeto_identificador '=' expresion",
"sentencia_asignacion : sentencia_objeto_identificador '=' ','",
"sentencia_objeto_identificador : ID",
"sentencia_objeto_identificador : sentencia_objeto_identificador '.' ID",
"sentencia_declarativa : declaracion_variable",
"sentencia_declarativa : declaracion_funcion",
"sentencia_declarativa : declaracion_clase",
"sentencia_declarativa : declaracion_interfaz",
"declaracion_variable : tipo lista_de_variables ','",
"declaracion_variable : tipo lista_de_variables",
"declaracion_variable : tipo ','",
"declaracion_interfaz_encabezado : INTERFACE ID",
"declaracion_interfaz_encabezado : INTERFACE",
"declaracion_interfaz : declaracion_interfaz_encabezado '{' bloque_encabezado_funcion_declaracion_interfaz '}'",
"declaracion_interfaz : declaracion_interfaz_encabezado '}'",
"bloque_encabezado_funcion_declaracion_interfaz : encabezado_funcion_declaracion_interfaz",
"bloque_encabezado_funcion_declaracion_interfaz : bloque_encabezado_funcion_declaracion_interfaz encabezado_funcion_declaracion_interfaz",
"encabezado_funcion_declaracion_interfaz : encabezado_funcion_interfaz ','",
"encabezado_funcion_declaracion_interfaz : encabezado_funcion_interfaz",
"sentencia_declarativa_clase : tipo lista_de_variables ','",
"sentencia_declarativa_clase : tipo lista_de_variables",
"sentencia_declarativa_clase : declaracion_funcion",
"sentencia_declarativa_clase : ID ','",
"declaracion_clase_encabezado : CLASS ID",
"declaracion_clase_encabezado : CLASS ID IMPLEMENT ID",
"declaracion_clase_encabezado : CLASS",
"declaracion_clase_encabezado : CLASS IMPLEMENT ID",
"declaracion_clase_encabezado : CLASS ID IMPLEMENT",
"declaracion_clase_encabezado : CLASS IMPLEMENT",
"declaracion_clase : declaracion_clase_encabezado '{' bloque_sentencias_declarativas_clase '}'",
"bloque_sentencias_declarativas_clase : sentencia_declarativa_clase",
"bloque_sentencias_declarativas_clase : bloque_sentencias_declarativas_clase sentencia_declarativa_clase",
"declaracion_funcion : encabezado_funcion cuerpo_funcion",
"encabezado_funcion : encabezado_funcion_nombre '(' parametro_funcion ')'",
"encabezado_funcion : encabezado_funcion_nombre '(' ')'",
"encabezado_funcion : encabezado_funcion_nombre '(' parametro_funcion ',' lista_parametros_funcion_exceso ')'",
"encabezado_funcion : encabezado_funcion_nombre '(' parametro_funcion lista_parametros_funcion_exceso ')'",
"encabezado_funcion : encabezado_funcion_nombre ')'",
"encabezado_funcion_nombre : VOID ID",
"encabezado_funcion_nombre : VOID",
"encabezado_funcion_interfaz : VOID ID '(' parametro_funcion ')'",
"encabezado_funcion_interfaz : VOID ID '(' ')'",
"encabezado_funcion_interfaz : VOID ID '(' parametro_funcion ',' lista_parametros_funcion_exceso ')'",
"encabezado_funcion_interfaz : VOID ID '(' parametro_funcion lista_parametros_funcion_exceso ')'",
"encabezado_funcion_interfaz : VOID '(' parametro_funcion ')'",
"encabezado_funcion_interfaz : VOID '(' ')'",
"encabezado_funcion_interfaz : VOID ID parametro_funcion ')'",
"encabezado_funcion_interfaz : VOID ID ')'",
"cuerpo_funcion : '{' sentencias_funcion sentencia_return '}'",
"cuerpo_funcion : '{' sentencia_return '}'",
"cuerpo_funcion : '{' sentencias_funcion sentencia_return sentencias_funcion_inalcanzable '}'",
"cuerpo_funcion : '{' sentencia_return sentencias_funcion_inalcanzable '}'",
"cuerpo_funcion : '{' sentencias_funcion '}'",
"cuerpo_funcion : '{' '}'",
"cuerpo_funcion : sentencias_funcion sentencia_return '}'",
"cuerpo_funcion : sentencia_return '}'",
"cuerpo_funcion : sentencias_funcion sentencia_return sentencias_funcion_inalcanzable '}'",
"cuerpo_funcion : sentencia_return sentencias_funcion_inalcanzable '}'",
"cuerpo_funcion : sentencias_funcion '}'",
"cuerpo_funcion : '}'",
"sentencias_funcion_inalcanzable : sentencia_funcion_inalcanzable",
"sentencias_funcion_inalcanzable : sentencias_funcion_inalcanzable sentencia_funcion_inalcanzable",
"sentencia_funcion_inalcanzable : sentencia_declarativa",
"sentencia_funcion_inalcanzable : sentencia_return",
"sentencia_funcion_inalcanzable : sentencia_ejecutable_funcion",
"lista_parametros_funcion_exceso : parametro_funcion",
"lista_parametros_funcion_exceso : lista_parametros_funcion_exceso ',' parametro_funcion",
"lista_parametros_funcion_exceso : lista_parametros_funcion_exceso parametro_funcion",
"parametro_funcion : tipo ID",
"lista_de_variables : ID",
"lista_de_variables : lista_de_variables ';' ID",
"tipo : INT",
"tipo : ULONG",
"tipo : FLOAT",
"tipo : ID",
"condicion : expresion comparador expresion",
"condicion : expresion comparador",
"condicion : comparador expresion",
"condicion : expresion '=' expresion",
"comparador : COMP_MAYOR_IGUAL",
"comparador : COMP_MENOR_IGUAL",
"comparador : COMP_IGUAL",
"comparador : COMP_DISTINTO",
"comparador : '>'",
"comparador : '<'",
"expresion : expresion '+' termino",
"expresion : expresion '-' termino",
"expresion : termino",
"termino : termino '*' factor",
"termino : termino '/' factor",
"termino : factor",
"factor : ID",
"factor : ID OPERADOR_MENOS",
"factor : constante",
"factor : '(' expresion ')'",
"constante : CTE",
"constante : '-' CTE",
};

//#line 522 "gramatica.y"

public static AnalizadorLexico lexico = null;
public static GeneracionCodigoIntermedio genCodigoIntermedio = GeneracionCodigoIntermedio.getInstance();
public static Logger logger = Logger.getInstance();
public static TablaDeSimbolos ts = TablaDeSimbolos.getInstance();
public static Parser parser = null;
public static int MAX_INT_VALUE = (int) (Math.pow(2, 15) - 1);

/** Chequea, para los INT, que el valor positivo no supere el valor maximo */
public void corregirConstantePositivaEntera(String constante) {
	if (constante.contains("_i")) {
		//se recibio un INT con signo positivo
		boolean exceptionOutOfRange = false;
		int cte = 0;
		String constanteValue = constante.toString().split("_")[0];

		try {
			cte = Integer.parseInt(constanteValue);
		} catch (NumberFormatException e) {
			exceptionOutOfRange = true;
		}

		if (cte > MAX_INT_VALUE || exceptionOutOfRange) {
			logger.logWarning("[Parser] Rango invalido para la constante: " + constante + ", se trunca al valor " + MAX_INT_VALUE + "_i");

			ts.swapLexemas(constante, MAX_INT_VALUE + "_i");
		}
	}
}

public void constanteConSigno(String constante) {
	/** Check de float negativos */
	if (constante.contains(".")) {
		String negConstante = "-"+constante;
		ts.swapLexemas(constante, negConstante);
	} else {

		if (constante.contains("_ul")) {
			//se recibio un ULONG con signo negativo
			logger.logWarning("[Parser] No se admiten ULONG con valores negativos: " + "-"+constante + ", se trunca a 0_ul");
		
			ts.swapLexemas(constante, "0_ul");
		} else {
			// se recibio un INT negativo
			String negConstante = "-"+constante;
			ts.swapLexemas(constante, negConstante);
		}
	}
}	

public int yylex() {
	return lexico.yylex(parser);
}

public void yyerror(String error) {
	logger.logError(error);
}

public static void main(String[] args) {
	if (args.length == 0) {
		System.err.println("No se especifico ningun archivo de codigo");
	} else {
		String archivo_a_leer = args[0];
		System.out.println("Se va a leer archivo " + archivo_a_leer);
		
		FileReaderHelper fileHelper = new FileReaderHelper();
		
		boolean fileOpenSuccess = fileHelper.open(archivo_a_leer);
		
		if (fileOpenSuccess) {
			parser = new Parser();
			lexico = new AnalizadorLexico(fileHelper);
			
	        parser.run();
	
			String path = new File(archivo_a_leer).getAbsolutePath();
	        
	        Output out = new Output(path);
	        
	        out.saveFile("codigo-lexico.txt", logger.getLexico());
			out.saveFile("codigo-sintactico.txt", logger.getSintactico());
			out.saveFile("tabla-de-simbolos.txt", ts.print());

			genCodigoIntermedio.showPolaca();
		}
	}
}
//#line 1098 "Parser.java"
//###############################################################
// method: yylexdebug : check lexer state
//###############################################################
void yylexdebug(int state,int ch)
{
String s=null;
  if (ch < 0) ch=0;
  if (ch <= YYMAXTOKEN) //check index bounds
     s = yyname[ch];    //now get it
  if (s==null)
    s = "illegal-symbol";
  debug("state "+state+", reading "+ch+" ("+s+")");
}





//The following are now global, to aid in error reporting
int yyn;       //next next thing to do
int yym;       //
int yystate;   //current parsing state from state table
String yys;    //current token string


//###############################################################
// method: yyparse : parse input and execute indicated items
//###############################################################
int yyparse()
{
boolean doaction;
  init_stacks();
  yynerrs = 0;
  yyerrflag = 0;
  yychar = -1;          //impossible char forces a read
  yystate=0;            //initial state
  state_push(yystate);  //save it
  val_push(yylval);     //save empty value
  while (true) //until parsing is done, either correctly, or w/error
    {
    doaction=true;
    if (yydebug) debug("loop"); 
    //#### NEXT ACTION (from reduction table)
    for (yyn=yydefred[yystate];yyn==0;yyn=yydefred[yystate])
      {
      if (yydebug) debug("yyn:"+yyn+"  state:"+yystate+"  yychar:"+yychar);
      if (yychar < 0)      //we want a char?
        {
        yychar = yylex();  //get next token
        if (yydebug) debug(" next yychar:"+yychar);
        //#### ERROR CHECK ####
        if (yychar < 0)    //it it didn't work/error
          {
          yychar = 0;      //change it to default string (no -1!)
          if (yydebug)
            yylexdebug(yystate,yychar);
          }
        }//yychar<0
      yyn = yysindex[yystate];  //get amount to shift by (shift index)
      if ((yyn != 0) && (yyn += yychar) >= 0 &&
          yyn <= YYTABLESIZE && yycheck[yyn] == yychar)
        {
        if (yydebug)
          debug("state "+yystate+", shifting to state "+yytable[yyn]);
        //#### NEXT STATE ####
        yystate = yytable[yyn];//we are in a new state
        state_push(yystate);   //save it
        val_push(yylval);      //push our lval as the input for next rule
        yychar = -1;           //since we have 'eaten' a token, say we need another
        if (yyerrflag > 0)     //have we recovered an error?
           --yyerrflag;        //give ourselves credit
        doaction=false;        //but don't process yet
        break;   //quit the yyn=0 loop
        }

    yyn = yyrindex[yystate];  //reduce
    if ((yyn !=0 ) && (yyn += yychar) >= 0 &&
            yyn <= YYTABLESIZE && yycheck[yyn] == yychar)
      {   //we reduced!
      if (yydebug) debug("reduce");
      yyn = yytable[yyn];
      doaction=true; //get ready to execute
      break;         //drop down to actions
      }
    else //ERROR RECOVERY
      {
      if (yyerrflag==0)
        {
        yyerror("syntax error");
        yynerrs++;
        }
      if (yyerrflag < 3) //low error count?
        {
        yyerrflag = 3;
        while (true)   //do until break
          {
          if (stateptr<0)   //check for under & overflow here
            {
            yyerror("stack underflow. aborting...");  //note lower case 's'
            return 1;
            }
          yyn = yysindex[state_peek(0)];
          if ((yyn != 0) && (yyn += YYERRCODE) >= 0 &&
                    yyn <= YYTABLESIZE && yycheck[yyn] == YYERRCODE)
            {
            if (yydebug)
              debug("state "+state_peek(0)+", error recovery shifting to state "+yytable[yyn]+" ");
            yystate = yytable[yyn];
            state_push(yystate);
            val_push(yylval);
            doaction=false;
            break;
            }
          else
            {
            if (yydebug)
              debug("error recovery discarding state "+state_peek(0)+" ");
            if (stateptr<0)   //check for under & overflow here
              {
              yyerror("Stack underflow. aborting...");  //capital 'S'
              return 1;
              }
            state_pop();
            val_pop();
            }
          }
        }
      else            //discard this token
        {
        if (yychar == 0)
          return 1; //yyabort
        if (yydebug)
          {
          yys = null;
          if (yychar <= YYMAXTOKEN) yys = yyname[yychar];
          if (yys == null) yys = "illegal-symbol";
          debug("state "+yystate+", error recovery discards token "+yychar+" ("+yys+")");
          }
        yychar = -1;  //read another
        }
      }//end error recovery
    }//yyn=0 loop
    if (!doaction)   //any reason not to proceed?
      continue;      //skip action
    yym = yylen[yyn];          //get count of terminals on rhs
    if (yydebug)
      debug("state "+yystate+", reducing "+yym+" by rule "+yyn+" ("+yyrule[yyn]+")");
    if (yym>0)                 //if count of rhs not 'nil'
      yyval = val_peek(yym-1); //get current semantic value
    yyval = dup_yyval(yyval); //duplicate yyval if ParserVal is used as semantic value
    switch(yyn)
      {
//########## USER-SUPPLIED ACTIONS ##########
case 1:
//#line 17 "gramatica.y"
{ logger.logSuccess("[Parser] Programa correcto detectado"); }
break;
case 2:
//#line 18 "gramatica.y"
{ logger.logError("[Parser] Se esperaba simbolo '{' al principio del programa"); }
break;
case 3:
//#line 19 "gramatica.y"
{ logger.logError("[Parser] Se esperaba simbolo '}' al final del programa"); }
break;
case 4:
//#line 20 "gramatica.y"
{ logger.logError("[Parser] Programa vacio"); }
break;
case 5:
//#line 21 "gramatica.y"
{ logger.logError("[Parser] Programa vacio"); }
break;
case 9:
//#line 31 "gramatica.y"
{ genCodigoIntermedio.resetContador(); }
break;
case 10:
//#line 32 "gramatica.y"
{ logger.logError("[Parser] Error de sintaxis en la sentencia"); }
break;
case 16:
//#line 41 "gramatica.y"
{ logger.logError("[Parser] Sentencia RETURN fuera de funcion"); }
break;
case 27:
//#line 64 "gramatica.y"
{ logger.logError("[Parser] Se esperaba un simbolo ',' luego del RETURN"); }
break;
case 28:
//#line 68 "gramatica.y"
{ 
		logger.logSuccess("[Parser] Sentencia iterativa DO WHILE detectada"); 
		genCodigoIntermedio.generarPasoIncompleto("BI");
		genCodigoIntermedio.completarPasoIncompleto();
		genCodigoIntermedio.completarPasoIncompletoIteracion();
		}
break;
case 29:
//#line 74 "gramatica.y"
{ logger.logError("[Parser] Se esperaba ',' luego de sentencia DO WHILE"); }
break;
case 30:
//#line 75 "gramatica.y"
{ logger.logError("[Parser] Se esperaban sentencias ejecutables en sentencia DO WHILE"); }
break;
case 31:
//#line 76 "gramatica.y"
{ logger.logError("[Parser] Se esperaba condicion en sentencia DO WHILE"); }
break;
case 32:
//#line 77 "gramatica.y"
{ logger.logError("[Parser] Se esperaba WHILE en sentencia DO WHILE"); }
break;
case 33:
//#line 78 "gramatica.y"
{ logger.logError("[Parser] Se esperaban sentencias ejecutables en sentencia DO WHILE"); }
break;
case 34:
//#line 79 "gramatica.y"
{ logger.logError("[Parser] Se esperaba condicion en sentencia DO WHILE"); }
break;
case 35:
//#line 80 "gramatica.y"
{ logger.logError("[Parser] Se esperaban sentencias ejecutables en sentencia DO WHILE"); }
break;
case 36:
//#line 81 "gramatica.y"
{ logger.logError("[Parser] Se esperaban sentencias ejecutables en sentencia DO WHILE"); }
break;
case 37:
//#line 82 "gramatica.y"
{ logger.logError("[Parser] Se esperaban sentencias ejecutables en sentencia DO WHILE"); }
break;
case 38:
//#line 83 "gramatica.y"
{ logger.logError("[Parser] Se esperaban sentencias ejecutables en sentencia DO WHILE"); }
break;
case 39:
//#line 87 "gramatica.y"
{ logger.logSuccess("[Parser] Sentencia iterativa DO WHILE detectada"); }
break;
case 40:
//#line 88 "gramatica.y"
{ logger.logError("[Parser] Se esperaba ',' luego de sentencia DO WHILE"); }
break;
case 41:
//#line 89 "gramatica.y"
{ logger.logError("[Parser] Se esperaban sentencias ejecutables en sentencia DO WHILE"); }
break;
case 42:
//#line 90 "gramatica.y"
{ logger.logError("[Parser] Se esperaba condicion en sentencia DO WHILE"); }
break;
case 43:
//#line 91 "gramatica.y"
{ logger.logError("[Parser] Se esperaba WHILE en sentencia DO WHILE"); }
break;
case 44:
//#line 92 "gramatica.y"
{ logger.logError("[Parser] Se esperaban sentencias ejecutables en sentencia DO WHILE"); }
break;
case 45:
//#line 93 "gramatica.y"
{ logger.logError("[Parser] Se esperaba condicion en sentencia DO WHILE"); }
break;
case 46:
//#line 94 "gramatica.y"
{ logger.logError("[Parser] Se esperaban sentencias ejecutables en sentencia DO WHILE"); }
break;
case 47:
//#line 95 "gramatica.y"
{ logger.logError("[Parser] Se esperaban sentencias ejecutables en sentencia DO WHILE"); }
break;
case 48:
//#line 96 "gramatica.y"
{ logger.logError("[Parser] Se esperaban sentencias ejecutables en sentencia DO WHILE"); }
break;
case 49:
//#line 97 "gramatica.y"
{ logger.logError("[Parser] Se esperaban sentencias ejecutables en sentencia DO WHILE"); }
break;
case 50:
//#line 101 "gramatica.y"
{ 
		logger.logSuccess("[Parser] Sentencia seleccion IF ELSE detectada"); 
		genCodigoIntermedio.completarPasoIncompleto();
	}
break;
case 51:
//#line 105 "gramatica.y"
{ 
		logger.logSuccess("[Parser] Sentencia seleccion IF sin ELSE detectada"); 
		genCodigoIntermedio.completarPasoIncompleto(); /* ESTA BIEN QUE APAREZCA BIFURCACION INCONDICIONAL ACA?*/
	}
break;
case 52:
//#line 109 "gramatica.y"
{ logger.logError("[Parser] Se esperaba ',' luego de sentencia IF ELSE"); }
break;
case 53:
//#line 110 "gramatica.y"
{ logger.logError("[Parser] Se esperaba ',' luego de sentencia IF sin ELSE"); }
break;
case 54:
//#line 111 "gramatica.y"
{ logger.logError("[Parser] Se esperaba condicion en sentencia IF ELSE"); }
break;
case 55:
//#line 112 "gramatica.y"
{ logger.logError("[Parser] Se esperaba condicion en sentencia IF"); }
break;
case 56:
//#line 113 "gramatica.y"
{ logger.logError("[Parser] Se esperaban sentencias ejecutables en sentencia IF ELSE"); }
break;
case 57:
//#line 114 "gramatica.y"
{ logger.logError("[Parser] Se esperaban sentencias ejecutables en sentencia IF ELSE"); }
break;
case 58:
//#line 115 "gramatica.y"
{ logger.logError("[Parser] Se esperaban sentencias ejecutables en sentencia IF"); }
break;
case 59:
//#line 119 "gramatica.y"
{ logger.logSuccess("[Parser] Sentencia seleccion IF ELSE detectada"); }
break;
case 60:
//#line 120 "gramatica.y"
{ logger.logSuccess("[Parser] Sentencia seleccion IF sin ELSE detectada"); }
break;
case 61:
//#line 121 "gramatica.y"
{ logger.logError("[Parser] Se esperaba ',' luego de sentencia IF ELSE"); }
break;
case 62:
//#line 122 "gramatica.y"
{ logger.logError("[Parser] Se esperaba ',' luego de sentencia IF sin ELSE"); }
break;
case 63:
//#line 123 "gramatica.y"
{ logger.logError("[Parser] Se esperaba condicion en sentencia IF ELSE"); }
break;
case 64:
//#line 124 "gramatica.y"
{ logger.logError("[Parser] Se esperaba condicion en sentencia IF"); }
break;
case 65:
//#line 125 "gramatica.y"
{ logger.logError("[Parser] Se esperaban sentencias ejecutables en sentencia IF ELSE"); }
break;
case 66:
//#line 126 "gramatica.y"
{ logger.logError("[Parser] Se esperaban sentencias ejecutables en sentencia IF ELSE"); }
break;
case 67:
//#line 127 "gramatica.y"
{ logger.logError("[Parser] Se esperaban sentencias ejecutables en sentencia IF"); }
break;
case 68:
//#line 131 "gramatica.y"
{
		/* EN LAS FILMINAS ESTA INVERTIDO ... */
		genCodigoIntermedio.generarPasoIncompleto("BI");
		genCodigoIntermedio.completarPasoIncompleto();
		genCodigoIntermedio.apilar(genCodigoIntermedio.polacaSize() - 1);
	}
break;
case 69:
//#line 137 "gramatica.y"
{
		genCodigoIntermedio.generarPasoIncompleto("BI");
		genCodigoIntermedio.completarPasoIncompleto();
		genCodigoIntermedio.apilar(genCodigoIntermedio.polacaSize() - 1);
	}
break;
case 70:
//#line 142 "gramatica.y"
{ logger.logError("[Parser] Se esperaban un simbolo '}' en el bloque"); }
break;
case 71:
//#line 143 "gramatica.y"
{ logger.logError("[Parser] Se esperaban un simbolo '{' en el bloque"); }
break;
case 72:
//#line 144 "gramatica.y"
{ logger.logError("[Parser] Se esperaban sentencias ejecutables dentro del bloque"); }
break;
case 73:
//#line 145 "gramatica.y"
{ logger.logError("[Parser] No se permiten declaraciones de variables dentro de bloque de sentencias ejecutables"); }
break;
case 76:
//#line 151 "gramatica.y"
{ logger.logError("[Parser] Se esperaban un simbolo '}' en el bloque"); }
break;
case 77:
//#line 152 "gramatica.y"
{ logger.logError("[Parser] Se esperaban un simbolo '{' en el bloque"); }
break;
case 78:
//#line 153 "gramatica.y"
{ logger.logError("[Parser] Se esperaban sentencias ejecutables dentro del bloque"); }
break;
case 79:
//#line 154 "gramatica.y"
{ logger.logError("[Parser] No se permiten declaraciones de variables dentro de bloque de sentencias ejecutables"); }
break;
case 80:
//#line 158 "gramatica.y"
{
		genCodigoIntermedio.apilar(genCodigoIntermedio.polacaSize() - genCodigoIntermedio.getContador() + 1);
		genCodigoIntermedio.resetContador();
	}
break;
case 83:
//#line 166 "gramatica.y"
{ logger.logError("[Parser] Se esperaban un simbolo '}' en el bloque"); }
break;
case 84:
//#line 167 "gramatica.y"
{ logger.logError("[Parser] Se esperaban un simbolo '{' en el bloque"); }
break;
case 85:
//#line 168 "gramatica.y"
{ logger.logError("[Parser] Se esperaban sentencias ejecutables dentro del bloque"); }
break;
case 86:
//#line 169 "gramatica.y"
{ logger.logError("[Parser] No se permiten declaraciones de variables dentro de bloque de sentencias ejecutables"); }
break;
case 89:
//#line 175 "gramatica.y"
{ logger.logError("[Parser] No se permiten declaraciones de variables dentro de bloque de sentencias ejecutables"); }
break;
case 93:
//#line 179 "gramatica.y"
{ logger.logError("[Parser] Se esperaban un simbolo '{' en el bloque"); }
break;
case 94:
//#line 180 "gramatica.y"
{ logger.logError("[Parser] Se esperaban un simbolo '{' en el bloque"); }
break;
case 95:
//#line 181 "gramatica.y"
{ logger.logError("[Parser] Se esperaban un simbolo '}' en el bloque"); }
break;
case 96:
//#line 182 "gramatica.y"
{ logger.logError("[Parser] Se esperaban un simbolo '}' en el bloque"); }
break;
case 97:
//#line 183 "gramatica.y"
{ logger.logError("[Parser] Se esperaban sentencias ejecutables en bloque de sentencias ejecutables"); }
break;
case 98:
//#line 187 "gramatica.y"
{ logger.logError("[Parser] Codigo inalcanzable luego del RETURN, se ignorara"); }
break;
case 99:
//#line 188 "gramatica.y"
{ logger.logError("[Parser] Codigo inalcanzable luego del RETURN, se ignorara"); }
break;
case 102:
//#line 197 "gramatica.y"
{ genCodigoIntermedio.resetContador(); }
break;
case 104:
//#line 199 "gramatica.y"
{ logger.logError("[Parser] No se aceptan declaraciones de variables en sentencias ejecutables"); }
break;
case 105:
//#line 200 "gramatica.y"
{ logger.logError("[Parser] No se aceptan declaraciones de variables en sentencias ejecutables"); }
break;
case 108:
//#line 206 "gramatica.y"
{ logger.logError("[Parser] No se aceptan declaraciones de variables en sentencias ejecutables"); }
break;
case 109:
//#line 207 "gramatica.y"
{ logger.logError("[Parser] No se aceptan declaraciones de variables en sentencias ejecutables"); }
break;
case 110:
//#line 211 "gramatica.y"
{ logger.logSuccess("[Parser] Sentencia PRINT detectada"); }
break;
case 111:
//#line 212 "gramatica.y"
{ logger.logError("[Parser] Se esperaba un simbolo ',' en Sentencia PRINT"); }
break;
case 112:
//#line 213 "gramatica.y"
{ logger.logError("[Parser] Se esperaba CADENA en Sentencia PRINT"); }
break;
case 113:
//#line 214 "gramatica.y"
{ logger.logError("[Parser] Se esperaba una CADENA y se encontro un IDENTIFICADOR en sentencia PRINT"); }
break;
case 114:
//#line 215 "gramatica.y"
{ logger.logError("[Parser] Se esperaba un simbolo ',' en sentencia PRINT"); }
break;
case 115:
//#line 216 "gramatica.y"
{ logger.logError("[Parser] Se esperaba una CADENA y se encontro una constante en sentencia PRINT"); }
break;
case 116:
//#line 217 "gramatica.y"
{ logger.logError("[Parser] Se esperaba un simbolo ',' en sentencia PRINT"); }
break;
case 117:
//#line 221 "gramatica.y"
{ logger.logSuccess("[Parser] Invocacion de funcion con expresion detectada"); }
break;
case 118:
//#line 222 "gramatica.y"
{ logger.logSuccess("[Parser] Invocacion de funcion sin expresion detectada"); }
break;
case 119:
//#line 223 "gramatica.y"
{ logger.logError("[Parser] Invocacion de funcion con multiples expresiones detectada, se preserva solo la primera expresion"); }
break;
case 120:
//#line 224 "gramatica.y"
{ logger.logError("[Parser] Se esperaba un simbolo ',' en invocacion de funcion"); }
break;
case 121:
//#line 225 "gramatica.y"
{ logger.logError("[Parser] Se esperaba un simbolo ',' en invocacion de funcion"); }
break;
case 122:
//#line 226 "gramatica.y"
{ logger.logError("[Parser] Se esperaba un simbolo ',' en invocacion de funcion"); }
break;
case 125:
//#line 235 "gramatica.y"
{ 
		logger.logSuccess("[Parser] Asignacion detectada");
		genCodigoIntermedio.agregarElemento(val_peek(3).sval);
		genCodigoIntermedio.agregarElemento(val_peek(2).sval);
		genCodigoIntermedio.incrementarContador();	
		genCodigoIntermedio.incrementarContador();
	}
break;
case 126:
//#line 242 "gramatica.y"
{ logger.logError("[Parser] Se esperaba un simbolo ',' en sentencia asignacion"); }
break;
case 127:
//#line 243 "gramatica.y"
{ logger.logError("[Parser] Se esperaba expresion del lado derecho en sentencia asignacion"); }
break;
case 128:
//#line 247 "gramatica.y"
{
		if (genCodigoIntermedio.existeIdentificadorEnAmbito(val_peek(0).sval)) {
			logger.logSuccess("[Gen Codigo Intermedio] El identificador " + val_peek(0).sval + " existe en el ambito");
		} else {
			logger.logError("[Gen Codigo Intermedio] El identificador " + val_peek(0).sval + " no esta declarado en el ambito");
		}
	}
break;
case 134:
//#line 265 "gramatica.y"
{ 
		logger.logSuccess("[Parser] Declaracion de lista de variables detectado");
		genCodigoIntermedio.agregarTipoAListaDeVariables(val_peek(2).sval);
		genCodigoIntermedio.agregarUsoAListaDeVariables("variable");
		genCodigoIntermedio.agregarAmbitoAListaDeVariables();
		genCodigoIntermedio.removerListaVariablesADeclarar();
	}
break;
case 135:
//#line 272 "gramatica.y"
{ logger.logError("[Parser] Se esperaba un simbolo ',' en sentencia declaracion de variables"); }
break;
case 136:
//#line 273 "gramatica.y"
{ logger.logError("[Parser] Se esperaba una lista de variables en sentencia declaracion de variables"); }
break;
case 137:
//#line 277 "gramatica.y"
{
		genCodigoIntermedio.agregarUsoAIdentificador(val_peek(0).sval, "nombre_interfaz");
		genCodigoIntermedio.agregarAmbitoAIdentificador(val_peek(0).sval);
		genCodigoIntermedio.setAmbitoClaseInterfaz(val_peek(0).sval);
	}
break;
case 138:
//#line 282 "gramatica.y"
{ logger.logError("[Parser] Se esperaba un identificador en declaracion de INTERFACE"); }
break;
case 139:
//#line 286 "gramatica.y"
{ 
		logger.logSuccess("[Parser] Declaracion de INTERFACE detectada");
		genCodigoIntermedio.clearAmbitoClaseInterfaz();
	}
break;
case 140:
//#line 290 "gramatica.y"
{ logger.logError("[Parser] Se esperaba un simbolo '{' en declaracion de INTERFACE"); }
break;
case 144:
//#line 300 "gramatica.y"
{ logger.logError("[Parser] Se esperaba un simbolo ',' en declaracion de metodo en CLASS"); }
break;
case 145:
//#line 304 "gramatica.y"
{ 
		logger.logSuccess("[Parser] Declaracion de lista de variables en CLASS detectado"); 
		genCodigoIntermedio.agregarTipoAListaDeVariables(val_peek(2).sval);
		genCodigoIntermedio.agregarUsoAListaDeVariables("atributo");
		genCodigoIntermedio.agregarAmbitoAListaDeAtributos();
		genCodigoIntermedio.removerListaVariablesADeclarar();
	}
break;
case 146:
//#line 311 "gramatica.y"
{ logger.logError("[Parser] Se esperaba un simbolo ',' en declaracion de lista de variables en CLASS"); }
break;
case 149:
//#line 317 "gramatica.y"
{  
		genCodigoIntermedio.agregarUsoAIdentificador(val_peek(0).sval, "nombre_clase");
		genCodigoIntermedio.agregarAmbitoAIdentificador(val_peek(0).sval);
		genCodigoIntermedio.setAmbitoClaseInterfaz(val_peek(0).sval);
		genCodigoIntermedio.apilarAmbito(val_peek(0).sval);
	}
break;
case 150:
//#line 323 "gramatica.y"
{
		genCodigoIntermedio.agregarUsoAIdentificador(val_peek(2).sval, "nombre_clase");
		genCodigoIntermedio.agregarAmbitoAIdentificador(val_peek(2).sval);
		genCodigoIntermedio.setAmbitoClaseInterfaz(val_peek(2).sval);
		genCodigoIntermedio.apilarAmbito(val_peek(2).sval);
	}
break;
case 151:
//#line 329 "gramatica.y"
{ logger.logError("[Parser] Se esperaba un identificador en declaracion de clase"); }
break;
case 152:
//#line 330 "gramatica.y"
{ logger.logError("[Parser] Se esperaba un identificador en declaracion de clase"); }
break;
case 153:
//#line 331 "gramatica.y"
{ logger.logError("[Parser] Se esperaba un identificador en IMPLEMENT de clase"); }
break;
case 154:
//#line 332 "gramatica.y"
{ logger.logError("[Parser] Se esperaba un identificador en declaracion de clase"); }
break;
case 155:
//#line 336 "gramatica.y"
{ 
		logger.logSuccess("[Parser] Declaracion de clase CLASS detectado"); 
		genCodigoIntermedio.clearAmbitoClaseInterfaz();
	}
break;
case 158:
//#line 348 "gramatica.y"
{ 
		logger.logSuccess("[Parser] Declaracion de funcion detectado");
		genCodigoIntermedio.desapilarAmbito(); 
	}
break;
case 161:
//#line 357 "gramatica.y"
{ logger.logError("[Parser] Encabezado de funcion con mas de 1 parametro detectado, se preserva solo el primer parametro"); }
break;
case 162:
//#line 358 "gramatica.y"
{ logger.logError("[Parser] Encabezado de funcion con mas de 1 parametro detectado, se preserva solo el primer parametro"); }
break;
case 163:
//#line 359 "gramatica.y"
{ logger.logError("[Parser] Se esperaba un simbolo '(' en el encabezado de la funcion"); }
break;
case 164:
//#line 363 "gramatica.y"
{
		if (genCodigoIntermedio.esDefinicionDeClase()) {
			genCodigoIntermedio.agregarUsoAIdentificador(val_peek(0).sval, "nombre_metodo");
			genCodigoIntermedio.agregarAmbitoAIdentificadorMetodo(val_peek(0).sval);
		} else {
			genCodigoIntermedio.agregarUsoAIdentificador(val_peek(0).sval, "nombre_funcion");
			genCodigoIntermedio.agregarAmbitoAIdentificador(val_peek(0).sval);
		}
		genCodigoIntermedio.apilarAmbito(val_peek(0).sval); 
	}
break;
case 165:
//#line 373 "gramatica.y"
{
		logger.logError("[Parser] Se esperaba un identificador en el encabezado de la funcion"); 
	}
break;
case 166:
//#line 379 "gramatica.y"
{ 
		genCodigoIntermedio.agregarUsoAIdentificador(val_peek(3).sval, "nombre_metodo");
		genCodigoIntermedio.agregarAmbitoAIdentificadorMetodo(val_peek(3).sval);
	}
break;
case 167:
//#line 383 "gramatica.y"
{ 
		genCodigoIntermedio.agregarUsoAIdentificador(val_peek(2).sval, "nombre_metodo");
		genCodigoIntermedio.agregarAmbitoAIdentificadorMetodo(val_peek(2).sval);
	}
break;
case 168:
//#line 387 "gramatica.y"
{ logger.logError("[Parser] Encabezado de funcion con mas de 1 parametro detectado, se preserva solo el primer parametro"); }
break;
case 169:
//#line 388 "gramatica.y"
{ logger.logError("[Parser] Encabezado de funcion con mas de 1 parametro detectado, se preserva solo el primer parametro"); }
break;
case 170:
//#line 389 "gramatica.y"
{ logger.logError("[Parser] Se esperaba un identificador en el encabezado de la funcion"); }
break;
case 171:
//#line 390 "gramatica.y"
{ logger.logError("[Parser] Se esperaba un identificador en el encabezado de la funcion"); }
break;
case 172:
//#line 391 "gramatica.y"
{ logger.logError("[Parser] Se esperaba un simbolo '(' en el encabezado de la funcion"); }
break;
case 173:
//#line 392 "gramatica.y"
{ logger.logError("[Parser] Se esperaba un simbolo '(' en el encabezado de la funcion"); }
break;
case 178:
//#line 400 "gramatica.y"
{ logger.logError("[Parser] Se esperaba una sentencia RETURN al final de la funcion"); }
break;
case 179:
//#line 401 "gramatica.y"
{ logger.logError("[Parser] Se esperaba una sentencia RETURN al final de la funcion"); }
break;
case 180:
//#line 402 "gramatica.y"
{ logger.logError("[Parser] Se esperaba un simbolo '{' en el cuerpo de la funcion"); }
break;
case 181:
//#line 403 "gramatica.y"
{ logger.logError("[Parser] Se esperaba un simbolo '{' en el cuerpo de la funcion"); }
break;
case 182:
//#line 404 "gramatica.y"
{ logger.logError("[Parser] Se esperaba un simbolo '{' en el cuerpo de la funcion"); }
break;
case 183:
//#line 405 "gramatica.y"
{ logger.logError("[Parser] Se esperaba un simbolo '{' en el cuerpo de la funcion"); }
break;
case 184:
//#line 406 "gramatica.y"
{ logger.logError("[Parser] Se esperaba un simbolo '{' en el cuerpo de la funcion"); }
break;
case 185:
//#line 407 "gramatica.y"
{ logger.logError("[Parser] Se esperaba un simbolo '{' en el cuerpo de la funcion"); }
break;
case 186:
//#line 411 "gramatica.y"
{ logger.logError("[Parser] Codigo inalcanzable luego del RETURN, se ignorara"); }
break;
case 187:
//#line 412 "gramatica.y"
{ logger.logError("[Parser] Codigo inalcanzable luego del RETURN, se ignorara"); }
break;
case 194:
//#line 428 "gramatica.y"
{ 
		genCodigoIntermedio.agregarUsoAIdentificador(val_peek(0).sval, "nombre_parametro");
		genCodigoIntermedio.agregarTipoAParametroDeFuncion(val_peek(0).sval, val_peek(1).sval);
		genCodigoIntermedio.agregarAmbitoAIdentificador(val_peek(0).sval);
	}
break;
case 195:
//#line 436 "gramatica.y"
{ 
		genCodigoIntermedio.agregarVariableADeclarar(val_peek(0).sval);
	}
break;
case 196:
//#line 439 "gramatica.y"
{ 
		genCodigoIntermedio.agregarVariableADeclarar(val_peek(0).sval);
	}
break;
case 200:
//#line 448 "gramatica.y"
{
		if (genCodigoIntermedio.existeIdentificadorEnAmbito(val_peek(0).sval)) {
			logger.logSuccess("[Gen Codigo Intermedio] El identificador " + val_peek(0).sval + " existe en el ambito");
		} else {
			logger.logError("[Gen Codigo Intermedio] El identificador " + val_peek(0).sval + " no esta declarado en el ambito");
		}
	}
break;
case 201:
//#line 458 "gramatica.y"
{
		genCodigoIntermedio.agregarElemento(val_peek(1).sval);
		genCodigoIntermedio.generarPasoIncompleto("BF");
		genCodigoIntermedio.apilar(genCodigoIntermedio.polacaSize() - 1);
	}
break;
case 202:
//#line 463 "gramatica.y"
{ logger.logError("[Parser] Se esperaba una expresion del lado derecho de la comparacion"); }
break;
case 203:
//#line 464 "gramatica.y"
{ logger.logError("[Parser] Se esperaba una expresion del lado izquierdo de la comparacion"); }
break;
case 204:
//#line 465 "gramatica.y"
{ logger.logError("[Parser] Se esperaba un comparador valido en la comparacion"); }
break;
case 211:
//#line 478 "gramatica.y"
{ 
		genCodigoIntermedio.agregarElemento(val_peek(1).sval); genCodigoIntermedio.incrementarContador(); }
break;
case 212:
//#line 480 "gramatica.y"
{ 
		genCodigoIntermedio.agregarElemento(val_peek(1).sval); genCodigoIntermedio.incrementarContador(); }
break;
case 214:
//#line 486 "gramatica.y"
{ genCodigoIntermedio.agregarElemento(val_peek(1).sval); genCodigoIntermedio.incrementarContador();}
break;
case 215:
//#line 487 "gramatica.y"
{ genCodigoIntermedio.agregarElemento(val_peek(1).sval); genCodigoIntermedio.incrementarContador();}
break;
case 217:
//#line 492 "gramatica.y"
{
		if (genCodigoIntermedio.existeIdentificadorEnAmbito(val_peek(0).sval)) {
			logger.logSuccess("[Gen Codigo Intermedio] El identificador " + val_peek(0).sval + " existe en el ambito");
			genCodigoIntermedio.agregarElemento(val_peek(0).sval); genCodigoIntermedio.incrementarContador();
		} else {
			logger.logError("[Gen Codigo Intermedio] El identificador " + val_peek(0).sval + " no esta declarado en el ambito");
		}
	}
break;
case 218:
//#line 500 "gramatica.y"
{
		if (genCodigoIntermedio.existeIdentificadorEnAmbito(val_peek(1).sval)) {
			logger.logSuccess("[Gen Codigo Intermedio] El identificador " + val_peek(1).sval + " existe en el ambito");
			genCodigoIntermedio.agregarElemento(val_peek(1).sval);
			genCodigoIntermedio.agregarElemento("1");
			genCodigoIntermedio.agregarElemento("-");
			genCodigoIntermedio.agregarElemento(val_peek(1).sval);
			genCodigoIntermedio.agregarElemento("=");
		} else {
			logger.logError("[Gen Codigo Intermedio] El identificador " + val_peek(1).sval + " no esta declarado en el ambito");
		}
	}
break;
case 219:
//#line 512 "gramatica.y"
{ genCodigoIntermedio.agregarElemento(val_peek(0).sval); genCodigoIntermedio.incrementarContador(); }
break;
case 220:
//#line 513 "gramatica.y"
{ logger.logError("[Parser] No se admiten expresiones entre parentesis"); }
break;
case 221:
//#line 517 "gramatica.y"
{ corregirConstantePositivaEntera(val_peek(0).sval); }
break;
case 222:
//#line 518 "gramatica.y"
{ constanteConSigno(val_peek(0).sval); }
break;
//#line 1984 "Parser.java"
//########## END OF USER-SUPPLIED ACTIONS ##########
    }//switch
    //#### Now let's reduce... ####
    if (yydebug) debug("reduce");
    state_drop(yym);             //we just reduced yylen states
    yystate = state_peek(0);     //get new state
    val_drop(yym);               //corresponding value drop
    yym = yylhs[yyn];            //select next TERMINAL(on lhs)
    if (yystate == 0 && yym == 0)//done? 'rest' state and at first TERMINAL
      {
      if (yydebug) debug("After reduction, shifting from state 0 to state "+YYFINAL+"");
      yystate = YYFINAL;         //explicitly say we're done
      state_push(YYFINAL);       //and save it
      val_push(yyval);           //also save the semantic value of parsing
      if (yychar < 0)            //we want another character?
        {
        yychar = yylex();        //get next character
        if (yychar<0) yychar=0;  //clean, if necessary
        if (yydebug)
          yylexdebug(yystate,yychar);
        }
      if (yychar == 0)          //Good exit (if lex returns 0 ;-)
         break;                 //quit the loop--all DONE
      }//if yystate
    else                        //else not done yet
      {                         //get next state and push, for next yydefred[]
      yyn = yygindex[yym];      //find out where to go
      if ((yyn != 0) && (yyn += yystate) >= 0 &&
            yyn <= YYTABLESIZE && yycheck[yyn] == yystate)
        yystate = yytable[yyn]; //get new state
      else
        yystate = yydgoto[yym]; //else go to new defred
      if (yydebug) debug("after reduction, shifting from state "+state_peek(0)+" to state "+yystate+"");
      state_push(yystate);     //going again, so push state & val...
      val_push(yyval);         //for next action
      }
    }//main loop
  return 0;//yyaccept!!
}
//## end of method parse() ######################################



//## run() --- for Thread #######################################
/**
 * A default run method, used for operating this parser
 * object in the background.  It is intended for extending Thread
 * or implementing Runnable.  Turn off with -Jnorun .
 */
public void run()
{
  yyparse();
}
//## end of method run() ########################################



//## Constructors ###############################################
/**
 * Default constructor.  Turn off with -Jnoconstruct .

 */
public Parser()
{
  //nothing to do
}


/**
 * Create a parser, setting the debug to true or false.
 * @param debugMe true for debugging, false for no debug.
 */
public Parser(boolean debugMe)
{
  yydebug=debugMe;
}
//###############################################################



}
//################### END OF CLASS ##############################
