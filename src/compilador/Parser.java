//### This file created by BYACC 1.8(/Java extension  1.15)
//### Java capabilities added 7 Jan 97, Bob Jamison
//### Updated : 27 Nov 97  -- Bob Jamison, Joe Nieten
//###           01 Jan 98  -- Bob Jamison -- fixed generic semantic constructor
//###           01 Jun 99  -- Bob Jamison -- added Runnable support
//###           06 Aug 00  -- Bob Jamison -- made state variables class-global
//###           03 Jan 01  -- Bob Jamison -- improved flags, tracing
//###           16 May 01  -- Bob Jamison -- added custom stack sizing
//###           04 Mar 02  -- Yuval Oren  -- improved java performance, added options
//###           14 Mar 02  -- Tomas Hurka -- -d support, static initializer workaround
//### Please send bug reports to tom@hukatronic.cz
//### static char yysccsid[] = "@(#)yaccpar	1.8 (Berkeley) 01/20/90";






//#line 2 ".\gramatica.y"
package compilador;
import java.io.File;
//#line 20 "Parser.java"




public class Parser
{

boolean yydebug;        //do I want debug output?
int yynerrs;            //number of errors so far
int yyerrflag;          //was there an error?
int yychar;             //the current working character

//########## MESSAGES ##########
//###############################################################
// method: debug
//###############################################################
void debug(String msg)
{
  if (yydebug)
    System.out.println(msg);
}

//########## STATE STACK ##########
final static int YYSTACKSIZE = 500;  //maximum stack size
int statestk[] = new int[YYSTACKSIZE]; //state stack
int stateptr;
int stateptrmax;                     //highest index of stackptr
int statemax;                        //state when highest index reached
//###############################################################
// methods: state stack push,pop,drop,peek
//###############################################################
final void state_push(int state)
{
  try {
		stateptr++;
		statestk[stateptr]=state;
	 }
	 catch (ArrayIndexOutOfBoundsException e) {
     int oldsize = statestk.length;
     int newsize = oldsize * 2;
     int[] newstack = new int[newsize];
     System.arraycopy(statestk,0,newstack,0,oldsize);
     statestk = newstack;
     statestk[stateptr]=state;
  }
}
final int state_pop()
{
  return statestk[stateptr--];
}
final void state_drop(int cnt)
{
  stateptr -= cnt; 
}
final int state_peek(int relative)
{
  return statestk[stateptr-relative];
}
//###############################################################
// method: init_stacks : allocate and prepare stacks
//###############################################################
final boolean init_stacks()
{
  stateptr = -1;
  val_init();
  return true;
}
//###############################################################
// method: dump_stacks : show n levels of the stacks
//###############################################################
void dump_stacks(int count)
{
int i;
  System.out.println("=index==state====value=     s:"+stateptr+"  v:"+valptr);
  for (i=0;i<count;i++)
    System.out.println(" "+i+"    "+statestk[i]+"      "+valstk[i]);
  System.out.println("======================");
}


//########## SEMANTIC VALUES ##########
//public class ParserVal is defined in ParserVal.java


String   yytext;//user variable to return contextual strings
ParserVal yyval; //used to return semantic vals from action routines
ParserVal yylval;//the 'lval' (result) I got from yylex()
ParserVal valstk[];
int valptr;
//###############################################################
// methods: value stack push,pop,drop,peek.
//###############################################################
void val_init()
{
  valstk=new ParserVal[YYSTACKSIZE];
  yyval=new ParserVal();
  yylval=new ParserVal();
  valptr=-1;
}
void val_push(ParserVal val)
{
  if (valptr>=YYSTACKSIZE)
    return;
  valstk[++valptr]=val;
}
ParserVal val_pop()
{
  if (valptr<0)
    return new ParserVal();
  return valstk[valptr--];
}
void val_drop(int cnt)
{
int ptr;
  ptr=valptr-cnt;
  if (ptr<0)
    return;
  valptr = ptr;
}
ParserVal val_peek(int relative)
{
int ptr;
  ptr=valptr-relative;
  if (ptr<0)
    return new ParserVal();
  return valstk[ptr];
}
final ParserVal dup_yyval(ParserVal val)
{
  ParserVal dup = new ParserVal();
  dup.ival = val.ival;
  dup.dval = val.dval;
  dup.sval = val.sval;
  dup.obj = val.obj;
  return dup;
}
//#### end semantic value section ####
public final static short ID=257;
public final static short CTE=258;
public final static short CADENA=259;
public final static short IF=260;
public final static short THEN=261;
public final static short ELSE=262;
public final static short ENDIF=263;
public final static short OUT=264;
public final static short FUN=265;
public final static short RETURN=266;
public final static short BREAK=267;
public final static short ASIGNACION=268;
public final static short COMP_MAYOR_IGUAL=269;
public final static short COMP_MENOR_IGUAL=270;
public final static short COMP_DISTINTO=271;
public final static short WHEN=272;
public final static short DO=273;
public final static short UNTIL=274;
public final static short CONTINUE=275;
public final static short DOUBLE64=276;
public final static short UINT16=277;
public final static short DEFER=278;
public final static short CONST=279;
public final static short YYERRCODE=256;
final static short yylhs[] = {                           -1,
    0,    0,    0,    0,    0,    1,    2,    2,    3,    3,
    4,    4,    4,    4,    6,    6,    6,    6,   11,   11,
    7,    7,    7,   14,   14,   15,   15,   16,   16,   16,
   16,   16,   16,   16,   16,   16,   16,   22,   22,    8,
    8,   23,   23,   23,   23,   25,   25,   25,   21,   21,
   21,   21,   21,   21,   21,   21,   21,   21,   21,   21,
   21,   21,   19,   19,   19,   19,   19,   19,   19,   20,
   20,   26,   26,   26,   26,   26,   26,   26,   28,   28,
   29,   29,   29,   12,   12,   12,   12,   12,   12,   12,
   12,   12,   12,   13,   13,   13,   13,   13,   32,   32,
   32,   35,   35,   34,   34,   36,   34,    9,    9,    9,
   37,   37,   38,   38,   38,   38,    5,    5,    5,    5,
    5,    5,    5,    5,    5,    5,   42,   42,   42,   30,
   30,   30,   30,   30,   31,   31,   41,   41,   43,   43,
   43,   43,   43,   27,   44,   44,   45,   45,   17,   17,
   17,   40,   40,   47,   40,   40,   40,   46,   46,   39,
   39,   48,   48,   49,   49,   24,   24,   24,   50,   50,
   50,   50,   50,   50,   33,   33,   33,   51,   51,   51,
   52,   52,   52,   54,   54,   55,   55,   56,   56,   18,
   18,   18,   18,   18,   18,   18,   18,   18,   53,   53,
   10,   10,
};
final static short yylen[] = {                            2,
    4,    3,    3,    3,    3,    1,    1,    2,    1,    1,
    1,    1,    1,    1,    3,    2,    2,    2,    3,    1,
    4,    5,    3,    1,    2,    1,    1,    1,    2,    1,
    2,    1,    2,    1,    2,    1,    2,    1,    2,    4,
    5,   10,   13,   13,   16,    1,    1,    2,    8,    8,
    8,   11,   11,   15,   13,   13,   15,   15,   15,   13,
   13,   14,    9,   10,   10,    8,    9,    9,    8,    7,
    9,    1,    1,    1,    4,    4,    3,    2,    1,    2,
    1,    1,    1,    6,    7,    5,    5,    5,    5,    6,
    6,    6,    6,    5,    4,    3,    3,    4,    1,    3,
    5,    1,    3,    2,    1,    0,    2,    3,    2,    2,
    1,    3,    3,    2,    2,    1,    1,    2,    1,    2,
    1,    2,    1,    2,    1,    2,    1,    1,    1,    2,
    4,    1,    3,    3,    2,    1,    1,    3,    7,    6,
    6,    6,    6,    1,    1,    3,    1,    2,    4,    3,
    3,    9,    8,    0,   17,    7,    6,    1,    2,    8,
   10,    1,    3,    1,    2,    3,    2,    2,    1,    1,
    1,    1,    1,    1,    3,    3,    1,    3,    3,    1,
    1,    1,    1,    3,    4,    1,    3,    1,    1,    5,
    5,    4,    4,    4,    4,    4,    4,    4,    1,    2,
    1,    1,
};
final static short yydefred[] = {                         0,
    6,    0,    0,    0,    0,    0,    0,    0,    0,    0,
  202,  201,    0,    0,    0,    7,    9,   10,   11,   12,
   13,   14,    0,    0,    0,  117,  121,    0,  119,  123,
  125,  137,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,  127,  128,  129,
  145,    0,  118,  122,  120,  124,  126,    0,  110,    0,
    0,    2,    8,    0,   18,    0,   17,    0,    0,    5,
    0,    3,    0,  199,    0,  150,    0,    0,  180,  182,
  183,   19,  169,  170,  171,  172,  173,  174,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,  130,    0,  135,  147,
    0,    0,  115,    0,  108,    0,   15,    0,    0,    0,
    0,    0,   23,   26,    0,    0,   24,   27,   28,   30,
   32,   34,   36,    0,    0,  138,    1,    0,  200,    0,
    0,  149,    0,    0,    0,    0,    0,  195,  193,  196,
    0,  194,    0,  192,    0,    0,    0,    0,  104,    0,
    0,  107,    0,    0,    0,    0,  144,  134,    0,  146,
  148,    0,    0,  113,  112,    0,    0,    0,    0,    0,
   72,   81,   73,    0,    0,   79,   82,   83,    0,   29,
   31,   33,   35,   37,   21,    0,   25,    0,   40,    0,
  188,  184,  189,    0,  186,    0,    0,  178,  179,    0,
    0,  191,  190,    0,   89,    0,    0,   88,    0,    0,
   87,    0,    0,    0,    0,  131,    0,    0,    0,    0,
    0,    0,   96,    0,   78,    0,    0,   80,    0,   22,
   41,    0,    0,  185,    0,  162,    0,   84,    0,   93,
   92,    0,   91,    0,    0,    0,  157,    0,  141,  143,
    0,  142,    0,   98,    0,    0,   77,    0,    0,    0,
    0,    0,  187,  164,    0,    0,    0,   85,    0,  101,
  159,    0,    0,    0,  139,    0,   94,    0,   75,   76,
    0,    0,    0,  163,  165,    0,  160,    0,  154,    0,
  153,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,  103,    0,  152,   48,   38,    0,    0,    0,
    0,    0,    0,    0,    0,   70,    0,    0,    0,    0,
  161,    0,    0,    0,   39,    0,   49,    0,   51,   50,
    0,    0,    0,   46,   47,    0,   69,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
   63,    0,    0,    0,   71,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,   42,   64,   65,    0,    0,
    0,    0,    0,    0,   52,    0,    0,   53,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,   55,   43,    0,   56,   60,   61,    0,
   44,    0,    0,   62,    0,    0,    0,    0,    0,    0,
  155,   58,   59,   54,    0,   57,    0,   45,    0,    0,
    0,    0,
};
final static short yydgoto[] = {                          3,
    4,   15,  254,   17,   18,   19,   20,   21,   22,   23,
   24,   25,  344,  126,  127,  317,  129,  130,  131,  132,
  133,  318,  345,   89,  307,  184,  135,  185,  186,  187,
  188,  100,   90,  101,  280,  102,   60,   61,   29,   30,
   31,   51,   32,   52,  111,  255,  314,  247,  275,   91,
   78,   79,   80,   81,  204,  205,
};
final static short yysindex[] = {                       -82,
    0, 1197,    0,  -95,  -37,   22,   -6,  -19,   37,  653,
    0,    0,  251,  -50,  860,    0,    0,    0,    0,    0,
    0,    0,  -40,   20,   -7,    0,    0,   70,    0,    0,
    0,    0,  884,  907,   60, -103,  636,  122,  125,  -15,
   -1,    5,  665,  -96,  109,  115, 1220,    0,    0,    0,
    0,  -88,    0,    0,    0,    0,    0, -131,    0,  136,
  154,    0,    0,  162,    0,  163,    0,  836,  -32,    0,
  917,    0,  206,    0,  -45,    0,  105,  113,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,  207,   39,
  108,  229,  242,   17,   24,  247,  -16,  254,    8,  273,
  275,   64,  267,  286,   76,  310,    0,   -8,    0,    0,
 1073,   26,    0,   96,    0,  107,    0,  328,   58,  334,
  148,  447,    0,    0,  252, 1187,    0,    0,    0,    0,
    0,    0,    0,  256,  325,    0,    0,   91,    0,  108,
  108,    0,  108,  108,  127,  108,   25,    0,    0,    0,
  336,    0,  338,    0,  335,  -97,   23,  -97,    0,  340,
  -97,    0,  -97,  342,  278,  -90,    0,    0,  344,    0,
    0,  683,  363,    0,    0,  636,   99,  291,  636, 1090,
    0,    0,    0,  133, 1237,    0,    0,    0,  369,    0,
    0,    0,    0,    0,    0,  294,    0,  302,    0,  143,
    0,    0,    0,   97,    0,  113,  113,    0,    0,  623,
   25,    0,    0,  -97,    0,  367,  -97,    0,  -97,  384,
    0,  -97, 1197,  308,  940,    0,  373,   52,  375,  400,
  394,  300,    0,  418,    0, 1053,  420,    0,  636,    0,
    0,  148,  112,    0,  560,    0,  -70,    0,  -97,    0,
    0,  -97,    0, 1197,  337, 1197,    0,  359,    0,    0,
  404,    0,  225,    0,  406,  236,    0,  364,  374,  636,
  468,  224,    0,    0, 1148,  623,  453,    0,  469,    0,
    0,  455,  392,  459,    0,  673,    0,  397,    0,    0,
  481,  266,  488,    0,    0,  276,    0,  -97,    0,  471,
    0,  507,  739,  287,  -60,  288,  290,  969,  494,  700,
  636,  495,    0,  295,    0,    0,    0, 1107,  499,  456,
  522,  524,  -69,  526, -115,    0,  739,  287,  288,  545,
    0,  548,  327,  466,    0,  473,    0,  739,    0,    0,
  570,  351,  739,    0,    0,  350,    0,  555,  490,  492,
 1107,  559,  636,  497,  -33,   30, 1254,  636, 1264,  564,
    0,  571,  572,  508,    0,  591,  739,  711,  592,  722,
  594,  529,  530,  615,  540,    0,    0,    0,   40,  405,
 1118,  739,  409,  430,    0,  739,  432,    0,  436,  438,
  407,  440,  741,  544,  442,  583,  588, 1129,  610,  656,
 1158,  657,  659,  672,  259,  679,  739, 1197,  680,  477,
  478,  479,  607,    0,    0,  484,    0,    0,    0,  739,
    0, 1177,  624,    0,  689,  691,  695,  500,  696, 1264,
    0,    0,    0,    0,  698,    0,  633,    0,  503,  434,
  739, 1264,
};
final static short yyrindex[] = {                         0,
    0,    0,    0,    0,  227,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
  502,  502,    0,  708,  993, 1015,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,  496,    0,  549,
  457,    0,    0,  521,    0,  612,    0,    0,    0,    0,
  770,    0,  173,    0,    0,    0,  204,  299,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,  502,    0,   77,    0,
   65,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,  584,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,   67,   71,    0,    0,    0,
  228,    0,  269,    0,    0,    0,    0,    0,    0,    0,
  502,    0,    0,    0,    0,    0,    0,    0, 1034,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,  509,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,  330,  413,    0,    0,    0,
   74,    0,    0,  654,    0,    0,    0,    0,    0,   73,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,  -75,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,  661,    0,
    0,  502,    0,  663,    0,    0,    0,    0,    0,    0,
  362,    0,    0,    0,  155,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,   88,    0,
    0,    0,    0,  385,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,  502,    0,    0,
    0,    0,    0,  520,    0,  527,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,  761,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,  784,  813,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,
};
final static short yygindex[] = {                         0,
    0,   63, 1095,  -63,   -9,    0,    0,    0,    0,  710,
   55,    0,  -31,    0, -123,  -46,   -2,    2, -108, -102,
  -92,  768,   21,  -20, -264,  550,   14,  611, -129,   47,
   50,   13,  525, -109,  504,    0,  674,    0,  782,  788,
  790,    6,  735,    0,    0, -182,    0,  532,    0,  715,
  239,  243,  -94,    0,    0,  567,
};
final static int YYTABLESIZE=1542;
static short yytable[];
static { yytable();}
static void yytable(){
yytable = new short[]{                         26,
   48,   26,  197,   27,  124,   27,   36,   26,   59,  348,
   53,   27,   26,  192,   54,   28,   27,   28,   65,  193,
   42,  128,  106,   28,  155,   96,   28,   33,   28,  194,
   26,   26,  225,   40,   27,   27,  125,   48,   97,   98,
    2,  156,  258,  203,   26,  103,   28,   28,   27,   97,
  168,  220,  110,  343,  104,  238,   49,  151,  346,   50,
   28,   37,  124,  216,  153,  172,   34,  140,   26,  141,
   75,  281,   27,  283,  182,  150,   43,   66,   67,  128,
  217,  140,  152,  141,   28,   87,   88,   86,  134,  181,
   82,  173,  261,   49,  196,   71,   50,  177,   87,   88,
   86,   48,   75,  384,   75,   99,  238,  167,   26,  157,
  260,  168,   27,  100,  166,   68,  171,  105,   76,  190,
  105,  169,   99,  191,   28,  167,  113,   69,  102,  168,
  100,  202,  166,  182,  105,   75,  114,  244,  182,  231,
  243,  183,  279,   75,  341,  102,  198,  140,  203,  141,
  119,  228,   75,   64,  143,  230,   75,   49,  234,  144,
   50,    5,   92,  142,    6,   93,  108,  107,    7,    8,
  224,   35,  181,  109,    1,  384,    9,   10,   11,   12,
   11,   12,   13,   14,  325,  112,   97,   97,  279,  182,
  341,  276,  277,  192,  115,  182,  119,  116,   97,  193,
  246,  320,  321,  151,  268,   36,   58,   26,  342,  194,
  181,   27,  139,  181,  181,  181,   64,  181,  271,  181,
   26,  117,   26,   28,   27,  423,   27,  198,  368,  369,
   35,  181,  181,  181,  181,  274,   28,   41,   28,  305,
   10,   94,   26,   95,  124,  138,   27,  145,  167,  291,
   38,   26,   39,   26,  304,   27,  269,   27,   28,   11,
   12,  128,  183,  305,  159,  295,  246,   28,  197,   28,
  180,  335,   26,   26,   11,   12,   27,   27,  328,   95,
   11,   12,   73,   74,  144,   20,  334,  148,   28,   28,
  330,  370,  371,  349,   83,   84,   85,  181,  177,  190,
  149,  393,  369,  191,  335,  154,  306,   83,   84,   85,
  335,  158,  335,  160,   73,   74,   73,   74,  161,  364,
  162,  383,  316,  387,  163,  372,  164,  375,  151,  175,
  329,  233,  366,  140,  335,  141,  165,  374,  336,  177,
  265,  177,  140,  177,  141,  350,  383,  201,   74,  396,
  166,  335,  198,  174,  335,   73,   74,  177,  177,  177,
  177,  140,  316,   58,   73,   74,  413,  176,  201,   74,
  175,  336,  175,  179,  175,  335,  195,  373,  206,  207,
  199,  420,  200,  335,  156,  208,  209,  210,  175,  175,
  175,  175,  214,  197,  212,  335,  213,  219,  437,  222,
  223,  397,  226,  229,   44,   26,  237,  118,  239,   27,
  413,    7,  176,  119,   45,  242,   95,   95,  240,  120,
  121,   28,   46,  177,  249,  122,  241,  252,   95,  181,
  256,  259,  181,  262,  181,  181,  181,  181,  181,  181,
  263,  181,  181,  181,  181,  181,  181,  181,  181,  181,
  181,  181,  264,  176,  175,  176,  111,  176,  266,  270,
  151,  282,  285,  151,  287,  151,  151,  151,  151,  151,
  151,  176,  176,  176,  176,  151,  151,  151,  151,  151,
  151,  151,  151,  284,  198,  286,  140,  198,  289,  198,
  198,  198,  198,  198,  198,  116,  288,  293,  290,  198,
  198,  198,  198,  198,  198,  198,  198,   44,  292,  156,
    6,  297,  298,  299,    7,  111,  300,  301,  341,  308,
   20,  309,    9,   10,  119,  197,  310,  311,  197,  315,
  197,  197,  197,  197,  197,  197,  342,  176,  312,  116,
  197,  197,  197,  197,  197,  197,  197,  197,  109,  319,
  322,  323,  326,  331,  116,  177,  441,  337,  177,   77,
  177,  177,  177,  177,  177,  177,  332,  177,  177,  177,
  177,  177,  177,  177,  177,  177,  177,  177,  338,   20,
  339,  111,  340,  114,  347,  352,  175,  353,  354,  175,
  355,  175,  175,  175,  175,  175,  175,  356,  175,  175,
  175,  175,  175,  175,  175,  175,  175,  175,  175,  358,
  341,   16,  360,  361,  362,  147,  363,  365,  140,  367,
  116,  140,  376,  140,  140,  140,  140,  114,  140,  377,
  378,  380,  379,  140,  140,  140,  140,  140,  140,  140,
  140,  156,  114,  178,  156,   20,  156,  156,  156,  156,
  385,  156,  388,  389,  390,  391,  156,  156,  156,  156,
  156,  156,  156,  156,  392,  394,  408,  405,  414,  176,
  211,  399,  176,  109,  176,  176,  176,  176,  176,  176,
   75,  176,  176,  176,  176,  176,  176,  176,  176,  176,
  176,  176,  400,  341,  402,   87,   88,   86,  403,  119,
  404,  232,  406,   44,  409,  105,  189,  410,  114,   75,
    7,  342,  411,  111,  415,  417,  111,  418,  120,  121,
  111,  111,  111,  227,   87,   88,   86,   75,  111,  111,
  419,  428,  111,  111,  111,  111,   16,  421,  424,  425,
  426,  427,   87,   88,   86,  245,  429,  432,  431,  433,
   99,   99,  116,  434,  436,  116,  438,  439,  106,  116,
  116,  116,  435,   44,  440,  144,  118,  116,  116,    4,
    7,  116,  116,  116,  116,   47,   86,   20,  120,  121,
   20,   46,   74,   90,   20,   20,   20,  158,   47,  175,
  236,  272,   20,   20,   55,  303,   20,   20,   20,   20,
   56,  313,   57,  136,  146,  109,   99,  296,  109,  273,
    0,    0,  109,  109,  109,    0,   44,    0,    0,    6,
  109,  109,  327,    7,  109,  109,  109,  109,    0,    0,
    0,    9,   10,  382,    0,    0,    0,   13,    0,    0,
  114,    0,    0,  114,  386,    0,    0,  114,  114,  114,
    0,    0,    0,    0,    0,  114,  114,    0,    0,  114,
  114,  114,  114,  407,    0,  215,    0,  218,   16,    0,
   99,   16,  221,    0,    0,   16,   16,   16,    0,   44,
    0,    0,    6,   16,   16,   66,    7,   16,   16,   16,
   16,    0,   73,   74,    9,   10,    0,    0,    0,    0,
   13,    0,    0,    0,   83,   84,   85,    0,   67,   44,
    0,    0,    6,    0,    0,    0,    7,    0,    0,   45,
    0,   73,   74,  248,    9,   10,  250,   46,  251,   44,
   13,  253,  118,   83,   84,   85,    7,   68,  119,   73,
   74,    0,    0,    0,  120,  121,    0,    0,    0,    0,
  302,   83,   84,   85,    0,    0,   44,    0,  278,  118,
  123,   99,    0,    7,    0,  119,    0,   44,    0,    0,
  118,  120,  121,    0,    7,    0,  119,  122,   44,    0,
    0,  189,  120,  121,   62,    7,    0,    0,  302,    0,
    0,    0,    0,  120,  121,   44,    0,   44,  189,  122,
  189,    0,    7,    0,    7,    0,    0,   99,   70,    0,
  120,  121,  120,  121,    0,    0,  122,   66,  122,    0,
   66,    0,   66,   66,   66,   66,   66,   66,    0,    0,
    0,   72,   66,   66,   66,   66,   66,   66,   66,   66,
   67,  137,    0,   67,    0,   67,   67,   67,   67,   67,
   67,    0,    0,    0,    0,   67,   67,   67,   67,   67,
   67,   67,   67,    0,  257,    0,    0,    0,    0,   68,
    0,    0,   68,    0,   68,   68,   68,   68,   68,   68,
    0,    0,    0,    0,   68,   68,   68,   68,   68,   68,
   68,   68,    5,  324,  351,  118,   16,    0,   16,    7,
    8,  119,    0,    0,    0,  357,    0,  120,  121,   63,
  359,   11,   12,  122,   14,    0,    5,  132,    0,    6,
    0,    0,    0,    7,    8,    0,    0,   16,   63,    0,
    0,    9,   10,    0,  381,   11,   12,   13,   14,  136,
    5,    0,    0,    6,    0,    0,    0,    7,    8,  398,
    0,    0,    0,  401,    0,    9,   10,    0,  133,   11,
   12,   13,   14,    5,    0,   63,    6,    0,    0,    0,
    7,    8,    0,    5,  422,    0,    6,  267,    9,   10,
    7,    8,   11,   12,   13,   14,    0,  430,    9,   10,
    0,    0,   11,   12,   13,   14,    5,  170,    0,    6,
    0,    0,    0,    7,    8,    0,    0,    0,  442,    0,
    0,    9,   10,    0,  235,   11,   12,   13,   14,    0,
    0,    0,    0,    0,    0,    5,    0,    0,  189,    0,
    0,  333,    7,    8,    0,    0,    0,    0,    0,    0,
  120,  121,  395,    0,   11,   12,  122,   14,    0,  132,
    0,    0,  132,  412,    0,    0,  132,    0,  132,  132,
    0,    0,    0,    0,  132,  132,  132,  132,    0,    0,
  132,  136,  294,    0,  136,    0,    0,    0,  136,    0,
  136,  136,  416,    0,    0,    0,  136,  136,  136,  136,
  133,    0,  136,  133,    0,    0,    0,  133,    0,  133,
  133,  412,    0,    0,    0,  133,  133,  133,  133,   44,
    0,  133,  118,    0,    0,    0,    7,    0,  119,   45,
    0,    0,    0,    0,  120,  121,    0,   46,    0,   44,
  122,    0,    6,    0,    0,    0,    7,    0,    0,   45,
    0,    0,    0,    0,    9,   10,   44,   46,    0,  189,
   13,    0,    0,    7,    0,    0,   45,    0,    0,    0,
    0,  120,  121,   44,   46,    0,  118,  122,    0,    0,
    7,    0,  119,    0,   44,    0,    0,  118,  120,  121,
    0,    7,    0,  119,  122,   44,    0,    0,  189,  120,
  121,    0,    7,    0,  119,  122,    0,    0,    0,    0,
  120,  121,    0,    0,   44,    0,  122,    6,    0,    0,
    0,    7,    0,    0,   44,    0,    0,  189,    0,    9,
   10,    7,    0,    0,    0,   13,    0,    0,    0,  120,
  121,    0,    0,   44,    0,  122,  189,    0,    0,    0,
    7,    0,    0,    5,    0,    0,  118,    0,  120,  121,
    7,    8,  119,    5,  122,    0,    6,    0,  120,  121,
    7,    8,   11,   12,  122,   14,    0,    0,    9,   10,
    0,    0,   11,   12,   13,   14,   44,    0,    0,    6,
    0,    0,    0,    7,    0,    0,   45,    0,    0,    0,
    0,    9,   10,   44,   46,    0,  189,   13,    0,    0,
    7,    0,    0,   45,    0,    0,    0,    0,  120,  121,
   44,   46,    0,  118,  122,    0,    0,    7,    0,  119,
   44,    0,    0,  189,    0,  120,  121,    7,    0,  119,
    0,  122,    0,    0,    0,  120,  121,    0,    0,    0,
    0,  122,
};
}
static short yycheck[];
static { yycheck(); }
static void yycheck() {
yycheck = new short[] {                          2,
   10,    4,  126,    2,   68,    4,   44,   10,   59,  125,
   13,   10,   15,  122,   13,    2,   15,    4,   59,  122,
   40,   68,   43,   10,   41,   41,   13,  123,   15,  122,
   33,   34,  123,   40,   33,   34,   68,   47,   40,   41,
  123,   58,  225,  138,   47,   41,   33,   34,   47,  125,
   59,  161,   47,  123,   42,  185,   10,   41,  323,   10,
   47,   40,  126,   41,   41,   40,    4,   43,   71,   45,
   45,  254,   71,  256,  121,   59,   40,   23,   59,  126,
   58,   43,   59,   45,   71,   60,   61,   62,   68,  121,
   36,  112,   41,   47,  126,   33,   47,   40,   60,   61,
   62,  111,   45,  368,   45,   41,  236,   41,  111,   97,
   59,   41,  111,   41,   41,  123,  111,   41,   59,  122,
   44,  108,   58,  122,  111,   59,  258,   58,   41,   59,
   58,   41,   59,  180,   58,   45,  268,   41,  185,   41,
   44,  121,  252,   45,  260,   58,  126,   43,  243,   45,
  266,  172,   45,  257,   42,  176,   45,  111,  179,   47,
  111,  257,   41,   59,  260,   41,   58,   59,  264,  265,
  261,  268,    0,   59,  257,  440,  272,  273,  276,  277,
  276,  277,  278,  279,  308,  274,  262,  263,  298,  236,
  260,  262,  263,  302,   59,  242,  266,   44,  274,  302,
  210,  262,  263,    0,  236,   44,  257,  210,  278,  302,
  242,  210,  258,   41,   42,   43,  257,   45,  239,   47,
  223,   59,  225,  210,  223,  408,  225,    0,  262,  263,
  268,   59,   60,   61,   62,  245,  223,  257,  225,  286,
  273,  257,  245,  259,  308,   40,  245,   41,  257,  270,
  257,  254,  259,  256,  286,  254,  236,  256,  245,  276,
  277,  308,  242,  310,  257,  275,  276,  254,    0,  256,
  123,  318,  275,  276,  276,  277,  275,  276,  310,  125,
  276,  277,  257,  258,   58,   59,  318,   59,  275,  276,
  311,  262,  263,  325,  269,  270,  271,  125,    0,  302,
   59,  262,  263,  302,  351,   59,  286,  269,  270,  271,
  357,   58,  359,   41,  257,  258,  257,  258,   44,  351,
  257,  368,  302,  370,   58,  357,   41,  359,  125,    0,
  310,   41,  353,   43,  381,   45,  261,  358,  318,   41,
   41,   43,   43,   45,   45,  325,  393,  257,  258,  381,
   41,  398,  125,  258,  401,  257,  258,   59,   60,   61,
   62,    0,  342,  257,  257,  258,  398,   40,  257,  258,
   41,  351,   43,   40,   45,  422,  125,  357,  140,  141,
  125,  123,   58,  430,    0,  143,  144,  261,   59,   60,
   61,   62,   58,  125,   59,  442,   59,   58,  430,   58,
  123,  381,   59,   41,  257,  408,  274,  260,   40,  408,
  442,  264,    0,  266,  267,  273,  262,  263,  125,  272,
  273,  408,  275,  125,   58,  278,  125,   44,  274,  257,
  123,   59,  260,   59,  262,  263,  264,  265,  266,  267,
   41,  269,  270,  271,  272,  273,  274,  275,  276,  277,
  278,  279,   59,   41,  125,   43,    0,   45,   41,   40,
  257,  125,   59,  260,   59,  262,  263,  264,  265,  266,
  267,   59,   60,   61,   62,  272,  273,  274,  275,  276,
  277,  278,  279,  125,  257,  261,  125,  260,  125,  262,
  263,  264,  265,  266,  267,    0,  261,  274,  125,  272,
  273,  274,  275,  276,  277,  278,  279,  257,   41,  125,
  260,   59,   44,   59,  264,   59,  125,   59,  260,  123,
    0,   41,  272,  273,  266,  257,  261,   40,  260,   59,
  262,  263,  264,  265,  266,  267,  278,  125,  263,   44,
  272,  273,  274,  275,  276,  277,  278,  279,    0,  263,
  263,  262,   59,   59,   59,  257,  123,   59,  260,   35,
  262,  263,  264,  265,  266,  267,  272,  269,  270,  271,
  272,  273,  274,  275,  276,  277,  278,  279,  123,   59,
   59,  125,   59,    0,   59,   41,  257,   40,  262,  260,
  125,  262,  263,  264,  265,  266,  267,  125,  269,  270,
  271,  272,  273,  274,  275,  276,  277,  278,  279,   40,
  260,    0,  263,   59,  125,   91,  125,   59,  257,  123,
  125,  260,   59,  262,  263,  264,  265,   44,  267,   59,
   59,   41,  125,  272,  273,  274,  275,  276,  277,  278,
  279,  257,   59,  119,  260,  125,  262,  263,  264,  265,
   59,  267,   59,  125,  125,   41,  272,  273,  274,  275,
  276,  277,  278,  279,  125,  261,  123,  261,   59,  257,
  146,  263,  260,  125,  262,  263,  264,  265,  266,  267,
   45,  269,  270,  271,  272,  273,  274,  275,  276,  277,
  278,  279,  263,  260,  263,   60,   61,   62,  263,  266,
  263,  177,  263,  257,  263,   41,  260,  125,  125,   45,
  264,  278,  125,  257,   59,   59,  260,   59,  272,  273,
  264,  265,  266,   41,   60,   61,   62,   45,  272,  273,
   59,  125,  276,  277,  278,  279,  125,   59,   59,  263,
  263,  263,   60,   61,   62,  123,  263,   59,  125,   59,
   41,   42,  257,   59,   59,  260,   59,  125,  257,  264,
  265,  266,  263,  257,  262,   58,  260,  272,  273,    0,
  264,  276,  277,  278,  279,  123,  123,  257,  272,  273,
  260,  262,  274,  123,  264,  265,  266,  125,  262,  116,
  180,  242,  272,  273,   13,  123,  276,  277,  278,  279,
   13,  298,   13,   69,   90,  257,   97,  276,  260,  243,
   -1,   -1,  264,  265,  266,   -1,  257,   -1,   -1,  260,
  272,  273,  123,  264,  276,  277,  278,  279,   -1,   -1,
   -1,  272,  273,  123,   -1,   -1,   -1,  278,   -1,   -1,
  257,   -1,   -1,  260,  123,   -1,   -1,  264,  265,  266,
   -1,   -1,   -1,   -1,   -1,  272,  273,   -1,   -1,  276,
  277,  278,  279,  123,   -1,  156,   -1,  158,  257,   -1,
  161,  260,  163,   -1,   -1,  264,  265,  266,   -1,  257,
   -1,   -1,  260,  272,  273,  125,  264,  276,  277,  278,
  279,   -1,  257,  258,  272,  273,   -1,   -1,   -1,   -1,
  278,   -1,   -1,   -1,  269,  270,  271,   -1,  125,  257,
   -1,   -1,  260,   -1,   -1,   -1,  264,   -1,   -1,  267,
   -1,  257,  258,  214,  272,  273,  217,  275,  219,  257,
  278,  222,  260,  269,  270,  271,  264,  125,  266,  257,
  258,   -1,   -1,   -1,  272,  273,   -1,   -1,   -1,   -1,
  278,  269,  270,  271,   -1,   -1,  257,   -1,  249,  260,
  125,  252,   -1,  264,   -1,  266,   -1,  257,   -1,   -1,
  260,  272,  273,   -1,  264,   -1,  266,  278,  257,   -1,
   -1,  260,  272,  273,  125,  264,   -1,   -1,  278,   -1,
   -1,   -1,   -1,  272,  273,  257,   -1,  257,  260,  278,
  260,   -1,  264,   -1,  264,   -1,   -1,  298,  125,   -1,
  272,  273,  272,  273,   -1,   -1,  278,  257,  278,   -1,
  260,   -1,  262,  263,  264,  265,  266,  267,   -1,   -1,
   -1,  125,  272,  273,  274,  275,  276,  277,  278,  279,
  257,  125,   -1,  260,   -1,  262,  263,  264,  265,  266,
  267,   -1,   -1,   -1,   -1,  272,  273,  274,  275,  276,
  277,  278,  279,   -1,  125,   -1,   -1,   -1,   -1,  257,
   -1,   -1,  260,   -1,  262,  263,  264,  265,  266,  267,
   -1,   -1,   -1,   -1,  272,  273,  274,  275,  276,  277,
  278,  279,  257,  125,  327,  260,    2,   -1,    4,  264,
  265,  266,   -1,   -1,   -1,  338,   -1,  272,  273,   15,
  343,  276,  277,  278,  279,   -1,  257,  125,   -1,  260,
   -1,   -1,   -1,  264,  265,   -1,   -1,   33,   34,   -1,
   -1,  272,  273,   -1,  367,  276,  277,  278,  279,  125,
  257,   -1,   -1,  260,   -1,   -1,   -1,  264,  265,  382,
   -1,   -1,   -1,  386,   -1,  272,  273,   -1,  125,  276,
  277,  278,  279,  257,   -1,   71,  260,   -1,   -1,   -1,
  264,  265,   -1,  257,  407,   -1,  260,  125,  272,  273,
  264,  265,  276,  277,  278,  279,   -1,  420,  272,  273,
   -1,   -1,  276,  277,  278,  279,  257,  125,   -1,  260,
   -1,   -1,   -1,  264,  265,   -1,   -1,   -1,  441,   -1,
   -1,  272,  273,   -1,  125,  276,  277,  278,  279,   -1,
   -1,   -1,   -1,   -1,   -1,  257,   -1,   -1,  260,   -1,
   -1,  125,  264,  265,   -1,   -1,   -1,   -1,   -1,   -1,
  272,  273,  125,   -1,  276,  277,  278,  279,   -1,  257,
   -1,   -1,  260,  125,   -1,   -1,  264,   -1,  266,  267,
   -1,   -1,   -1,   -1,  272,  273,  274,  275,   -1,   -1,
  278,  257,  125,   -1,  260,   -1,   -1,   -1,  264,   -1,
  266,  267,  125,   -1,   -1,   -1,  272,  273,  274,  275,
  257,   -1,  278,  260,   -1,   -1,   -1,  264,   -1,  266,
  267,  125,   -1,   -1,   -1,  272,  273,  274,  275,  257,
   -1,  278,  260,   -1,   -1,   -1,  264,   -1,  266,  267,
   -1,   -1,   -1,   -1,  272,  273,   -1,  275,   -1,  257,
  278,   -1,  260,   -1,   -1,   -1,  264,   -1,   -1,  267,
   -1,   -1,   -1,   -1,  272,  273,  257,  275,   -1,  260,
  278,   -1,   -1,  264,   -1,   -1,  267,   -1,   -1,   -1,
   -1,  272,  273,  257,  275,   -1,  260,  278,   -1,   -1,
  264,   -1,  266,   -1,  257,   -1,   -1,  260,  272,  273,
   -1,  264,   -1,  266,  278,  257,   -1,   -1,  260,  272,
  273,   -1,  264,   -1,  266,  278,   -1,   -1,   -1,   -1,
  272,  273,   -1,   -1,  257,   -1,  278,  260,   -1,   -1,
   -1,  264,   -1,   -1,  257,   -1,   -1,  260,   -1,  272,
  273,  264,   -1,   -1,   -1,  278,   -1,   -1,   -1,  272,
  273,   -1,   -1,  257,   -1,  278,  260,   -1,   -1,   -1,
  264,   -1,   -1,  257,   -1,   -1,  260,   -1,  272,  273,
  264,  265,  266,  257,  278,   -1,  260,   -1,  272,  273,
  264,  265,  276,  277,  278,  279,   -1,   -1,  272,  273,
   -1,   -1,  276,  277,  278,  279,  257,   -1,   -1,  260,
   -1,   -1,   -1,  264,   -1,   -1,  267,   -1,   -1,   -1,
   -1,  272,  273,  257,  275,   -1,  260,  278,   -1,   -1,
  264,   -1,   -1,  267,   -1,   -1,   -1,   -1,  272,  273,
  257,  275,   -1,  260,  278,   -1,   -1,  264,   -1,  266,
  257,   -1,   -1,  260,   -1,  272,  273,  264,   -1,  266,
   -1,  278,   -1,   -1,   -1,  272,  273,   -1,   -1,   -1,
   -1,  278,
};
}
final static short YYFINAL=3;
final static short YYMAXTOKEN=279;
final static String yyname[] = {
"end-of-file",null,null,null,null,null,null,null,null,null,null,null,null,null,
null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,
null,null,null,null,null,null,null,null,null,null,"'('","')'","'*'","'+'","','",
"'-'",null,"'/'",null,null,null,null,null,null,null,null,null,null,"':'","';'",
"'<'","'='","'>'",null,null,null,null,null,null,null,null,null,null,null,null,
null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,
null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,
null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,
"'{'",null,"'}'",null,null,null,null,null,null,null,null,null,null,null,null,
null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,
null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,
null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,
null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,
null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,
null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,
null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,
null,null,null,null,null,null,null,"ID","CTE","CADENA","IF","THEN","ELSE",
"ENDIF","OUT","FUN","RETURN","BREAK","ASIGNACION","COMP_MAYOR_IGUAL",
"COMP_MENOR_IGUAL","COMP_DISTINTO","WHEN","DO","UNTIL","CONTINUE","DOUBLE64",
"UINT16","DEFER","CONST",
};
final static String yyrule[] = {
"$accept : programa",
"programa : nombre_programa '{' sentencias '}'",
"programa : '{' sentencias '}'",
"programa : nombre_programa sentencias '}'",
"programa : nombre_programa '{' sentencias",
"programa : nombre_programa '{' '}'",
"nombre_programa : ID",
"sentencias : sentencia",
"sentencias : sentencias sentencia",
"sentencia : sentencia_declarativa",
"sentencia : sentencia_ejecutable",
"sentencia_declarativa : sentencia_declarativa_variables",
"sentencia_declarativa : funcion_con_return",
"sentencia_declarativa : funcion_sin_return",
"sentencia_declarativa : declaracion_constantes",
"sentencia_declarativa_variables : tipo lista_de_variables ';'",
"sentencia_declarativa_variables : tipo lista_de_variables",
"sentencia_declarativa_variables : lista_de_variables ';'",
"sentencia_declarativa_variables : tipo ';'",
"lista_de_variables : ID ',' lista_de_variables",
"lista_de_variables : ID",
"funcion_con_return : encabezado_funcion '{' sentencia_return '}'",
"funcion_con_return : encabezado_funcion '{' sentencias_funcion sentencia_return '}'",
"funcion_con_return : encabezado_funcion '{' '}'",
"sentencias_funcion : sentencia_funcion",
"sentencias_funcion : sentencias_funcion sentencia_funcion",
"sentencia_funcion : sentencia_declarativa",
"sentencia_funcion : sentencia_ejecutable_funcion",
"sentencia_ejecutable_funcion : asignacion",
"sentencia_ejecutable_funcion : DEFER asignacion",
"sentencia_ejecutable_funcion : imprimir",
"sentencia_ejecutable_funcion : DEFER imprimir",
"sentencia_ejecutable_funcion : sentencia_when_con_return",
"sentencia_ejecutable_funcion : DEFER sentencia_when_con_return",
"sentencia_ejecutable_funcion : sentencia_do_con_return",
"sentencia_ejecutable_funcion : DEFER sentencia_do_con_return",
"sentencia_ejecutable_funcion : sentencia_seleccion_simple_con_return",
"sentencia_ejecutable_funcion : DEFER sentencia_seleccion_simple_con_return",
"sentencias_ejecutables_funcion : sentencia_ejecutable_funcion",
"sentencias_ejecutables_funcion : sentencias_ejecutables_funcion sentencia_ejecutable_funcion",
"funcion_sin_return : encabezado_funcion '{' sentencia_seleccion_compuesta_con_return '}'",
"funcion_sin_return : encabezado_funcion '{' sentencias_funcion sentencia_seleccion_compuesta_con_return '}'",
"sentencia_seleccion_compuesta_con_return : IF '(' condicion ')' THEN sentencia_seleccion_compuesta_con_return_simple ELSE sentencia_seleccion_compuesta_con_return_simple ENDIF ';'",
"sentencia_seleccion_compuesta_con_return : IF '(' condicion ')' THEN '{' sentencias_ejecutables_funcion sentencia_return '}' ELSE sentencia_seleccion_compuesta_con_return_simple ENDIF ';'",
"sentencia_seleccion_compuesta_con_return : IF '(' condicion ')' THEN sentencia_seleccion_compuesta_con_return_simple ELSE '{' sentencias_ejecutables_funcion sentencia_return '}' ENDIF ';'",
"sentencia_seleccion_compuesta_con_return : IF '(' condicion ')' THEN '{' sentencias_ejecutables_funcion sentencia_return '}' ELSE '{' sentencias_ejecutables_funcion sentencia_return '}' ENDIF ';'",
"sentencia_seleccion_compuesta_con_return_simple : sentencia_return",
"sentencia_seleccion_compuesta_con_return_simple : sentencia_seleccion_compuesta_con_return",
"sentencia_seleccion_compuesta_con_return_simple : DEFER sentencia_seleccion_compuesta_con_return",
"sentencia_seleccion_simple_con_return : IF '(' condicion ')' THEN sentencia_return ENDIF ';'",
"sentencia_seleccion_simple_con_return : IF '(' condicion ')' THEN sentencia_seleccion_compuesta_con_return ENDIF ';'",
"sentencia_seleccion_simple_con_return : IF '(' condicion ')' THEN sentencia_ejecutable_funcion ENDIF ';'",
"sentencia_seleccion_simple_con_return : IF '(' condicion ')' THEN '{' sentencias_ejecutables_funcion sentencia_return '}' ENDIF ';'",
"sentencia_seleccion_simple_con_return : IF '(' condicion ')' THEN '{' sentencias_ejecutables_funcion sentencia_seleccion_compuesta_con_return '}' ENDIF ';'",
"sentencia_seleccion_simple_con_return : IF '(' condicion ')' THEN '{' sentencias_ejecutables_funcion sentencia_return '}' ELSE '{' sentencias_ejecutables_funcion '}' ENDIF ';'",
"sentencia_seleccion_simple_con_return : IF '(' condicion ')' THEN '{' sentencias_ejecutables_funcion sentencia_return '}' ELSE sentencia_ejecutable_funcion ENDIF ';'",
"sentencia_seleccion_simple_con_return : IF '(' condicion ')' THEN '{' sentencias_ejecutables_funcion sentencia_seleccion_compuesta_con_return '}' ELSE sentencia_ejecutable_funcion ENDIF ';'",
"sentencia_seleccion_simple_con_return : IF '(' condicion ')' THEN '{' sentencias_ejecutables_funcion sentencia_seleccion_compuesta_con_return '}' ELSE '{' sentencias_ejecutables_funcion '}' ENDIF ';'",
"sentencia_seleccion_simple_con_return : IF '(' condicion ')' THEN '{' sentencias_ejecutables_funcion '}' ELSE '{' sentencias_ejecutables_funcion sentencia_return '}' ENDIF ';'",
"sentencia_seleccion_simple_con_return : IF '(' condicion ')' THEN '{' sentencias_ejecutables_funcion '}' ELSE '{' sentencias_ejecutables_funcion sentencia_seleccion_compuesta_con_return '}' ENDIF ';'",
"sentencia_seleccion_simple_con_return : IF '(' condicion ')' THEN sentencia_ejecutable_funcion ELSE '{' sentencias_ejecutables_funcion sentencia_return '}' ENDIF ';'",
"sentencia_seleccion_simple_con_return : IF '(' condicion ')' THEN sentencia_ejecutable_funcion ELSE '{' sentencias_ejecutables_funcion sentencia_seleccion_compuesta_con_return '}' ENDIF ';'",
"sentencia_seleccion_simple_con_return : IF '(' condicion ')' THEN '{' sentencias_ejecutables_funcion '}' ELSE '{' sentencias_ejecutables_funcion '}' ENDIF ';'",
"sentencia_when_con_return : WHEN '(' condicion ')' THEN '{' sentencia_funcion '}' ';'",
"sentencia_when_con_return : WHEN '(' condicion ')' THEN '{' sentencia_funcion sentencia_return '}' ';'",
"sentencia_when_con_return : WHEN '(' condicion ')' THEN '{' sentencia_funcion sentencia_seleccion_compuesta_con_return '}' ';'",
"sentencia_when_con_return : WHEN '(' condicion ')' THEN '{' sentencia_funcion '}'",
"sentencia_when_con_return : WHEN '(' condicion ')' THEN '{' sentencia_funcion sentencia_return '}'",
"sentencia_when_con_return : WHEN '(' condicion ')' THEN '{' sentencia_funcion sentencia_seleccion_compuesta_con_return '}'",
"sentencia_when_con_return : WHEN '(' condicion ')' THEN '{' '}' ';'",
"sentencia_do_con_return : DO bloque_sentencias_ejecutables_do_con_return UNTIL '(' condicion ')' ';'",
"sentencia_do_con_return : etiqueta ':' DO bloque_sentencias_ejecutables_do_con_return UNTIL '(' condicion ')' ';'",
"bloque_sentencias_ejecutables_do_con_return : sentencia_return",
"bloque_sentencias_ejecutables_do_con_return : sentencia_seleccion_compuesta_con_return",
"bloque_sentencias_ejecutables_do_con_return : sentencias_ejecutables_do_funcion",
"bloque_sentencias_ejecutables_do_con_return : '{' sentencias_ejecutables_do_funcion sentencia_return '}'",
"bloque_sentencias_ejecutables_do_con_return : '{' sentencias_ejecutables_do_funcion sentencia_seleccion_compuesta_con_return '}'",
"bloque_sentencias_ejecutables_do_con_return : '{' sentencias_ejecutables_do_funcion '}'",
"bloque_sentencias_ejecutables_do_con_return : '{' '}'",
"sentencias_ejecutables_do_funcion : sentencia_ejecutable_do_funcion",
"sentencias_ejecutables_do_funcion : sentencias_ejecutables_do_funcion sentencia_ejecutable_do_funcion",
"sentencia_ejecutable_do_funcion : sentencia_ejecutable_funcion",
"sentencia_ejecutable_do_funcion : sentencia_break",
"sentencia_ejecutable_do_funcion : sentencia_continue",
"encabezado_funcion : FUN ID '(' ')' ':' tipo",
"encabezado_funcion : FUN ID '(' lista_de_parametros ')' ':' tipo",
"encabezado_funcion : FUN ID '(' ')' ':'",
"encabezado_funcion : FUN '(' ')' ':' tipo",
"encabezado_funcion : FUN ID ')' ':' tipo",
"encabezado_funcion : FUN ID '(' ':' tipo",
"encabezado_funcion : FUN ID '(' lista_de_parametros ')' ':'",
"encabezado_funcion : FUN '(' lista_de_parametros ')' ':' tipo",
"encabezado_funcion : FUN ID lista_de_parametros ')' ':' tipo",
"encabezado_funcion : FUN ID '(' lista_de_parametros ':' tipo",
"sentencia_return : RETURN '(' expresion ')' ';'",
"sentencia_return : RETURN '(' expresion ')'",
"sentencia_return : RETURN expresion ')'",
"sentencia_return : RETURN '(' expresion",
"sentencia_return : RETURN '(' ')' ';'",
"lista_de_parametros : parametro",
"lista_de_parametros : parametro ',' parametro",
"lista_de_parametros : parametro ',' parametro ',' lista_parametros_exceso",
"lista_parametros_exceso : parametro",
"lista_parametros_exceso : parametro ',' lista_parametros_exceso",
"parametro : tipo ID",
"parametro : tipo",
"$$1 :",
"parametro : $$1 ID",
"declaracion_constantes : CONST lista_declaracion_constantes ';'",
"declaracion_constantes : CONST lista_declaracion_constantes",
"declaracion_constantes : CONST ';'",
"lista_declaracion_constantes : declaracion_constante",
"lista_declaracion_constantes : declaracion_constante ',' lista_declaracion_constantes",
"declaracion_constante : ID ASIGNACION CTE",
"declaracion_constante : ID ASIGNACION",
"declaracion_constante : ID CTE",
"declaracion_constante : ID",
"sentencia_ejecutable : asignacion",
"sentencia_ejecutable : DEFER asignacion",
"sentencia_ejecutable : seleccion",
"sentencia_ejecutable : DEFER seleccion",
"sentencia_ejecutable : imprimir",
"sentencia_ejecutable : DEFER imprimir",
"sentencia_ejecutable : sentencia_when",
"sentencia_ejecutable : DEFER sentencia_when",
"sentencia_ejecutable : sentencia_do",
"sentencia_ejecutable : DEFER sentencia_do",
"sentencia_ejecutable_do : sentencia_ejecutable",
"sentencia_ejecutable_do : sentencia_break",
"sentencia_ejecutable_do : sentencia_continue",
"sentencia_break : BREAK ';'",
"sentencia_break : BREAK ':' etiqueta ';'",
"sentencia_break : BREAK",
"sentencia_break : BREAK ':' etiqueta",
"sentencia_break : BREAK ':' ';'",
"sentencia_continue : CONTINUE ';'",
"sentencia_continue : CONTINUE",
"sentencia_do : sentencia_do_simple",
"sentencia_do : etiqueta ':' sentencia_do_simple",
"sentencia_do_simple : DO bloque_sentencias_ejecutables_do UNTIL '(' condicion ')' ';'",
"sentencia_do_simple : DO bloque_sentencias_ejecutables_do UNTIL '(' condicion ')'",
"sentencia_do_simple : DO bloque_sentencias_ejecutables_do UNTIL '(' ')' ';'",
"sentencia_do_simple : DO bloque_sentencias_ejecutables_do UNTIL condicion ')' ';'",
"sentencia_do_simple : DO bloque_sentencias_ejecutables_do UNTIL '(' condicion ';'",
"etiqueta : ID",
"bloque_sentencias_ejecutables_do : sentencia_ejecutable_do",
"bloque_sentencias_ejecutables_do : '{' sentencias_ejecutables_do '}'",
"sentencias_ejecutables_do : sentencia_ejecutable_do",
"sentencias_ejecutables_do : sentencias_ejecutables_do sentencia_ejecutable_do",
"asignacion : ID ASIGNACION expresion ';'",
"asignacion : ID ASIGNACION ';'",
"asignacion : ID ASIGNACION expresion",
"sentencia_when : WHEN '(' condicion ')' THEN '{' sentencias_when '}' ';'",
"sentencia_when : WHEN '(' condicion ')' '{' sentencias_when '}' ';'",
"$$2 :",
"sentencia_when : WHEN '(' ')' THEN '{' sentencias_when '}' ';' $$2 WHEN '(' condicion ')' THEN '{' sentencias_when '}'",
"sentencia_when : WHEN '(' condicion ')' '{' sentencias_when '}'",
"sentencia_when : WHEN '(' condicion ')' '{' '}'",
"sentencias_when : sentencia",
"sentencias_when : sentencia sentencias_when",
"seleccion : IF '(' condicion ')' THEN bloque_sentencias_ejecutables_seleccion ENDIF ';'",
"seleccion : IF '(' condicion ')' THEN bloque_sentencias_ejecutables_seleccion ELSE bloque_sentencias_ejecutables_seleccion ENDIF ';'",
"bloque_sentencias_ejecutables_seleccion : sentencia_ejecutable",
"bloque_sentencias_ejecutables_seleccion : '{' sentencias_ejecutables '}'",
"sentencias_ejecutables : sentencia_ejecutable",
"sentencias_ejecutables : sentencias_ejecutables sentencia_ejecutable",
"condicion : expresion comparador expresion",
"condicion : expresion comparador",
"condicion : comparador expresion",
"comparador : COMP_MAYOR_IGUAL",
"comparador : COMP_MENOR_IGUAL",
"comparador : COMP_DISTINTO",
"comparador : '>'",
"comparador : '<'",
"comparador : '='",
"expresion : expresion '+' termino",
"expresion : expresion '-' termino",
"expresion : termino",
"termino : termino '*' factor",
"termino : termino '/' factor",
"termino : factor",
"factor : ID",
"factor : constante",
"factor : invocacion_funcion",
"invocacion_funcion : ID '(' ')'",
"invocacion_funcion : ID '(' lista_de_parametros_reales ')'",
"lista_de_parametros_reales : parametro_real",
"lista_de_parametros_reales : lista_de_parametros_reales ',' parametro_real",
"parametro_real : ID",
"parametro_real : constante",
"imprimir : OUT '(' CADENA ')' ';'",
"imprimir : OUT '(' ID ')' ';'",
"imprimir : OUT '(' ')' ';'",
"imprimir : OUT CADENA ')' ';'",
"imprimir : OUT '(' CADENA ';'",
"imprimir : OUT ID ')' ';'",
"imprimir : OUT '(' ID ';'",
"imprimir : OUT '(' CADENA ')'",
"imprimir : OUT '(' ID ')'",
"constante : CTE",
"constante : '-' CTE",
"tipo : UINT16",
"tipo : DOUBLE64",
};

//#line 384 ".\gramatica.y"

public static AnalizadorLexico lexico = null;
public static Logger logger = null;
public static TablaDeSimbolos ts = null;

public void constanteConSigno(String constante) {
	if (constante.contains(".")) {
		
		String negConstante = "-"+constante;
		
		Double parsedDouble = Double.parseDouble(negConstante.replace('D', 'E'));
		
		if (parsedDouble < -2.2250738585072014E-308 && -1.7976931348623157E+308 > parsedDouble) {
			logger.logWarning("[Parser] Rango invalido para la constante: " + negConstante + ", se trunca al rango permitido");
			
			if (-1.7976931348623157E+308 < parsedDouble) {
				negConstante = new String("-1.7976931348623157D+308");
			} else {
				negConstante =  new String("-2.2250738585072014D-308");
			}
		}
		
		ts.swapLexemas(constante, negConstante);
	} else {
		//se recibio un uint que fue aceptado por el lexico pero resulta ser negativo
		logger.logWarning("[Parser] No se admiten ui16 con valores negativos: " + "-"+constante + ", se trunca a 0");
		
		ts.swapLexemas(constante, "0");
	}
}	

public int yylex() {
	return lexico.yylex(yylval);
}

public void yyerror(String error) {
	logger.logError(error);
}

public static void main(String[] args) {
	if (args.length == 0) {
		System.err.println("No se especifico ningun archivo de codigo");
	} else {
		String archivo_a_leer = args[0];
		System.out.println("Se va a leer archivo " + archivo_a_leer);
		
		FileReaderHelper fileHelper = new FileReaderHelper();
		
		fileHelper.open(archivo_a_leer);
		
		Parser parser = new Parser();
		logger = new Logger();
		ts = new TablaDeSimbolos();
		lexico = new AnalizadorLexico(fileHelper, ts, logger);
		
        parser.run();

		String path = new File(archivo_a_leer).getAbsolutePath().replaceAll(args[0],"");
        
        Output out = new Output(path);
        
        String printTs = ts.print();
        
        
        out.saveFile("codigo-lexico.txt", logger.getLexico());
		out.saveFile("codigo-sintetico.txt", logger.getSintactico());
		out.saveFile("tabla-de-simbolos.txt", printTs);
        
		System.out.println(printTs);
	}
}
//#line 941 "Parser.java"
//###############################################################
// method: yylexdebug : check lexer state
//###############################################################
void yylexdebug(int state,int ch)
{
String s=null;
  if (ch < 0) ch=0;
  if (ch <= YYMAXTOKEN) //check index bounds
     s = yyname[ch];    //now get it
  if (s==null)
    s = "illegal-symbol";
  debug("state "+state+", reading "+ch+" ("+s+")");
}





//The following are now global, to aid in error reporting
int yyn;       //next next thing to do
int yym;       //
int yystate;   //current parsing state from state table
String yys;    //current token string


//###############################################################
// method: yyparse : parse input and execute indicated items
//###############################################################
int yyparse()
{
boolean doaction;
  init_stacks();
  yynerrs = 0;
  yyerrflag = 0;
  yychar = -1;          //impossible char forces a read
  yystate=0;            //initial state
  state_push(yystate);  //save it
  val_push(yylval);     //save empty value
  while (true) //until parsing is done, either correctly, or w/error
    {
    doaction=true;
    if (yydebug) debug("loop"); 
    //#### NEXT ACTION (from reduction table)
    for (yyn=yydefred[yystate];yyn==0;yyn=yydefred[yystate])
      {
      if (yydebug) debug("yyn:"+yyn+"  state:"+yystate+"  yychar:"+yychar);
      if (yychar < 0)      //we want a char?
        {
        yychar = yylex();  //get next token
        if (yydebug) debug(" next yychar:"+yychar);
        //#### ERROR CHECK ####
        if (yychar < 0)    //it it didn't work/error
          {
          yychar = 0;      //change it to default string (no -1!)
          if (yydebug)
            yylexdebug(yystate,yychar);
          }
        }//yychar<0
      yyn = yysindex[yystate];  //get amount to shift by (shift index)
      if ((yyn != 0) && (yyn += yychar) >= 0 &&
          yyn <= YYTABLESIZE && yycheck[yyn] == yychar)
        {
        if (yydebug)
          debug("state "+yystate+", shifting to state "+yytable[yyn]);
        //#### NEXT STATE ####
        yystate = yytable[yyn];//we are in a new state
        state_push(yystate);   //save it
        val_push(yylval);      //push our lval as the input for next rule
        yychar = -1;           //since we have 'eaten' a token, say we need another
        if (yyerrflag > 0)     //have we recovered an error?
           --yyerrflag;        //give ourselves credit
        doaction=false;        //but don't process yet
        break;   //quit the yyn=0 loop
        }

    yyn = yyrindex[yystate];  //reduce
    if ((yyn !=0 ) && (yyn += yychar) >= 0 &&
            yyn <= YYTABLESIZE && yycheck[yyn] == yychar)
      {   //we reduced!
      if (yydebug) debug("reduce");
      yyn = yytable[yyn];
      doaction=true; //get ready to execute
      break;         //drop down to actions
      }
    else //ERROR RECOVERY
      {
      if (yyerrflag==0)
        {
        yyerror("syntax error");
        yynerrs++;
        }
      if (yyerrflag < 3) //low error count?
        {
        yyerrflag = 3;
        while (true)   //do until break
          {
          if (stateptr<0)   //check for under & overflow here
            {
            yyerror("stack underflow. aborting...");  //note lower case 's'
            return 1;
            }
          yyn = yysindex[state_peek(0)];
          if ((yyn != 0) && (yyn += YYERRCODE) >= 0 &&
                    yyn <= YYTABLESIZE && yycheck[yyn] == YYERRCODE)
            {
            if (yydebug)
              debug("state "+state_peek(0)+", error recovery shifting to state "+yytable[yyn]+" ");
            yystate = yytable[yyn];
            state_push(yystate);
            val_push(yylval);
            doaction=false;
            break;
            }
          else
            {
            if (yydebug)
              debug("error recovery discarding state "+state_peek(0)+" ");
            if (stateptr<0)   //check for under & overflow here
              {
              yyerror("Stack underflow. aborting...");  //capital 'S'
              return 1;
              }
            state_pop();
            val_pop();
            }
          }
        }
      else            //discard this token
        {
        if (yychar == 0)
          return 1; //yyabort
        if (yydebug)
          {
          yys = null;
          if (yychar <= YYMAXTOKEN) yys = yyname[yychar];
          if (yys == null) yys = "illegal-symbol";
          debug("state "+yystate+", error recovery discards token "+yychar+" ("+yys+")");
          }
        yychar = -1;  //read another
        }
      }//end error recovery
    }//yyn=0 loop
    if (!doaction)   //any reason not to proceed?
      continue;      //skip action
    yym = yylen[yyn];          //get count of terminals on rhs
    if (yydebug)
      debug("state "+yystate+", reducing "+yym+" by rule "+yyn+" ("+yyrule[yyn]+")");
    if (yym>0)                 //if count of rhs not 'nil'
      yyval = val_peek(yym-1); //get current semantic value
    yyval = dup_yyval(yyval); //duplicate yyval if ParserVal is used as semantic value
    switch(yyn)
      {
//########## USER-SUPPLIED ACTIONS ##########
case 1:
//#line 17 ".\gramatica.y"
{ logger.logSuccess("[Parser] Programa correcto detectado"); }
break;
case 2:
//#line 18 ".\gramatica.y"
{ logger.logError("[Parser] Se esperaba un identificador nombre del programa"); }
break;
case 3:
//#line 19 ".\gramatica.y"
{ logger.logError("[Parser] Se esperaba un { antes de las sentencias del programa"); }
break;
case 4:
//#line 20 ".\gramatica.y"
{ logger.logError("[Parser] Se esperaba un } al final de las sentencias del programa"); }
break;
case 5:
//#line 21 ".\gramatica.y"
{ logger.logError("[Parser] Se esperaban sentencias del programa"); }
break;
case 15:
//#line 46 ".\gramatica.y"
{ logger.logSuccess("[Parser] Declaracion de lista de variables detectado"); }
break;
case 16:
//#line 47 ".\gramatica.y"
{ logger.logError("[Parser] Se esperaba un ; al final de la lista de variables"); }
break;
case 17:
//#line 48 ".\gramatica.y"
{ logger.logError("[Parser] Se esperaba un tipo para la lista de variables"); }
break;
case 18:
//#line 49 ".\gramatica.y"
{ logger.logError("[Parser] Se esperaba una variable o lista de variables"); }
break;
case 21:
//#line 58 ".\gramatica.y"
{ logger.logSuccess("[Parser] Declaracion de funcion detectado"); }
break;
case 22:
//#line 59 ".\gramatica.y"
{ logger.logSuccess("[Parser] Declaracion de funcion detectado"); }
break;
case 23:
//#line 60 ".\gramatica.y"
{ logger.logError("[Parser] Se esperaban sentencias en la funcion"); }
break;
case 40:
//#line 92 ".\gramatica.y"
{ logger.logSuccess("[Parser] Declaracion de funcion detectado"); }
break;
case 41:
//#line 93 ".\gramatica.y"
{ logger.logSuccess("[Parser] Declaracion de funcion detectado"); }
break;
case 42:
//#line 97 ".\gramatica.y"
{ logger.logSuccess("[Parser] Sentencia de seleccion detectada"); }
break;
case 43:
//#line 98 ".\gramatica.y"
{ logger.logSuccess("[Parser] Sentencia de seleccion detectada"); }
break;
case 44:
//#line 99 ".\gramatica.y"
{ logger.logSuccess("[Parser] Sentencia de seleccion detectada"); }
break;
case 45:
//#line 100 ".\gramatica.y"
{ logger.logSuccess("[Parser] Sentencia de seleccion detectada"); }
break;
case 49:
//#line 110 ".\gramatica.y"
{ logger.logSuccess("[Parser] Sentencia de seleccion detectada"); }
break;
case 50:
//#line 111 ".\gramatica.y"
{ logger.logSuccess("[Parser] Sentencia de seleccion detectada"); }
break;
case 51:
//#line 112 ".\gramatica.y"
{ logger.logSuccess("[Parser] Sentencia de seleccion detectada"); }
break;
case 52:
//#line 113 ".\gramatica.y"
{ logger.logSuccess("[Parser] Sentencia de seleccion detectada"); }
break;
case 53:
//#line 114 ".\gramatica.y"
{ logger.logSuccess("[Parser] Sentencia de seleccion detectada"); }
break;
case 54:
//#line 115 ".\gramatica.y"
{ logger.logSuccess("[Parser] Sentencia de seleccion detectada"); }
break;
case 55:
//#line 116 ".\gramatica.y"
{ logger.logSuccess("[Parser] Sentencia de seleccion detectada"); }
break;
case 56:
//#line 117 ".\gramatica.y"
{ logger.logSuccess("[Parser] Sentencia de seleccion detectada"); }
break;
case 57:
//#line 118 ".\gramatica.y"
{ logger.logSuccess("[Parser] Sentencia de seleccion detectada"); }
break;
case 58:
//#line 119 ".\gramatica.y"
{ logger.logSuccess("[Parser] Sentencia de seleccion detectada"); }
break;
case 59:
//#line 120 ".\gramatica.y"
{ logger.logSuccess("[Parser] Sentencia de seleccion detectada"); }
break;
case 60:
//#line 121 ".\gramatica.y"
{ logger.logSuccess("[Parser] Sentencia de seleccion detectada"); }
break;
case 61:
//#line 122 ".\gramatica.y"
{ logger.logSuccess("[Parser] Sentencia de seleccion detectada"); }
break;
case 62:
//#line 123 ".\gramatica.y"
{ logger.logSuccess("[Parser] Sentencia de seleccion detectada"); }
break;
case 63:
//#line 127 ".\gramatica.y"
{ logger.logSuccess("[Parser] Sentencia when detectada"); }
break;
case 64:
//#line 128 ".\gramatica.y"
{ logger.logSuccess("[Parser] Sentencia when detectada"); }
break;
case 65:
//#line 129 ".\gramatica.y"
{ logger.logSuccess("[Parser] Sentencia when detectada"); }
break;
case 66:
//#line 130 ".\gramatica.y"
{ logger.logError("[Parser] Se esperaba ; al final de la sentencia when"); }
break;
case 67:
//#line 131 ".\gramatica.y"
{ logger.logError("[Parser] Se esperaba ; al final de la sentencia when"); }
break;
case 68:
//#line 132 ".\gramatica.y"
{ logger.logError("[Parser] Se esperaba ; al final de la sentencia when"); }
break;
case 69:
//#line 133 ".\gramatica.y"
{ logger.logError("[Parser] Se esperaban sentencias en la sentencia when"); }
break;
case 70:
//#line 137 ".\gramatica.y"
{ logger.logSuccess("[Parser] Sentencia do until detectada"); }
break;
case 71:
//#line 138 ".\gramatica.y"
{ logger.logSuccess("[Parser] Sentencia do until detectada"); }
break;
case 78:
//#line 148 ".\gramatica.y"
{ logger.logError("[Parser] Se esperaban sentencias en la sentencia do"); }
break;
case 86:
//#line 166 ".\gramatica.y"
{ logger.logError("[Parser] Se esperaba un tipo de return para la funcion"); }
break;
case 87:
//#line 167 ".\gramatica.y"
{ logger.logError("[Parser] Se esperaba un identificador nombre para la funcion"); }
break;
case 88:
//#line 168 ".\gramatica.y"
{ logger.logError("[Parser] Se esperaba un ( luego del nombre de la funcion"); }
break;
case 89:
//#line 169 ".\gramatica.y"
{ logger.logError("[Parser] Se esperaba un ) luego del nombre para la funcion"); }
break;
case 90:
//#line 170 ".\gramatica.y"
{ logger.logError("[Parser] Se esperaba un tipo de return para la funcion"); }
break;
case 91:
//#line 171 ".\gramatica.y"
{ logger.logError("[Parser] Se esperaba un identificador nombre para la funcion"); }
break;
case 92:
//#line 172 ".\gramatica.y"
{ logger.logError("[Parser] Se esperaba un ( luego del nombre de la funcion"); }
break;
case 93:
//#line 173 ".\gramatica.y"
{ logger.logError("[Parser] Se esperaba un ) luego del nombre para la funcion"); }
break;
case 95:
//#line 178 ".\gramatica.y"
{ logger.logError("[Parser] Se esperaba un ; al final de la sentencia return"); }
break;
case 96:
//#line 179 ".\gramatica.y"
{ logger.logError("[Parser] Se esperaba un ( en la sentencia return"); }
break;
case 97:
//#line 180 ".\gramatica.y"
{ logger.logError("[Parser] Se esperaba un ) en la sentencia return"); }
break;
case 98:
//#line 181 ".\gramatica.y"
{ logger.logError("[Parser] Se esperaba una expresion en la sentencia return"); }
break;
case 101:
//#line 187 ".\gramatica.y"
{ logger.logError("[Parser] Hay mas de 2 parametros en la funcion"); }
break;
case 106:
//#line 197 ".\gramatica.y"
{ logger.logError("[Parser] Se esperaba un identificador nombre para el parametro"); }
break;
case 107:
//#line 198 ".\gramatica.y"
{ logger.logError("[Parser] Se esperaba un tipo valido para el parametro"); }
break;
case 108:
//#line 202 ".\gramatica.y"
{ logger.logSuccess("[Parser] Declaracion de constantes detectado"); }
break;
case 109:
//#line 203 ".\gramatica.y"
{ logger.logError("[Parser] Se esperaba ; al final de la declaracion de constantes"); }
break;
case 110:
//#line 204 ".\gramatica.y"
{ logger.logError("[Parser] Se esperaba una lista de declaracion de constantes"); }
break;
case 114:
//#line 214 ".\gramatica.y"
{ logger.logError("[Parser] Se esperaba una constante del lado derecho de la asignacion"); }
break;
case 115:
//#line 215 ".\gramatica.y"
{ logger.logError("[Parser] Se esperaba el simbolo asignacion en la declaracion de constantes"); }
break;
case 116:
//#line 216 ".\gramatica.y"
{ logger.logError("[Parser] Se esperaba una asignacion en la declaracion de constantes"); }
break;
case 130:
//#line 239 ".\gramatica.y"
{ logger.logSuccess("[Parser] Sentencia break detectada"); }
break;
case 131:
//#line 240 ".\gramatica.y"
{ logger.logSuccess("[Parser] Sentencia break con etiqueta detectada"); }
break;
case 132:
//#line 241 ".\gramatica.y"
{ logger.logError("[Parser] Se esperaba un ; luego de la sentencia break"); }
break;
case 133:
//#line 242 ".\gramatica.y"
{ logger.logError("[Parser] Se esperaba un ; luego de la sentencia break"); }
break;
case 134:
//#line 243 ".\gramatica.y"
{ logger.logError("[Parser] Se esperaba una etiqueta en la sentencia break"); }
break;
case 135:
//#line 247 ".\gramatica.y"
{ logger.logSuccess("[Parser] Sentencia continue detectada"); }
break;
case 136:
//#line 248 ".\gramatica.y"
{ logger.logError("[Parser] Se esperaba un ; al final de la sentencia continue"); }
break;
case 139:
//#line 257 ".\gramatica.y"
{ logger.logSuccess("[Parser] Sentencia do until detectada"); }
break;
case 140:
//#line 258 ".\gramatica.y"
{ logger.logError("[Parser] Se esperaba un ; al final de la sentencia do"); }
break;
case 141:
//#line 259 ".\gramatica.y"
{ logger.logError("[Parser] Se esperaba una condicion para la sentencia do"); }
break;
case 142:
//#line 260 ".\gramatica.y"
{ logger.logSuccess("[Parser] Se esperaba un ( en la condicion para la sentencia do"); }
break;
case 143:
//#line 261 ".\gramatica.y"
{ logger.logSuccess("[Parser] Se esperaba un ) en la condicion para la sentencia do"); }
break;
case 149:
//#line 279 ".\gramatica.y"
{ logger.logSuccess("[Parser] Asignacion detectada"); }
break;
case 150:
//#line 280 ".\gramatica.y"
{logger.logError("[Parser] Se espera una expresion del lado derecho de la asignacion");}
break;
case 151:
//#line 281 ".\gramatica.y"
{ logger.logError("[Parser] Se espera un ; al final de la asignacion"); }
break;
case 152:
//#line 285 ".\gramatica.y"
{ logger.logSuccess("[Parser] Sentencia when detectada"); }
break;
case 153:
//#line 286 ".\gramatica.y"
{ logger.logError("[Parser] Se esperaba la palabra reservada then en la sentencia when"); }
break;
case 154:
//#line 287 ".\gramatica.y"
{ logger.logError("[Parser] Se esperaba una condicion en la sentencia when"); }
break;
case 155:
//#line 288 ".\gramatica.y"
{ logger.logError("[Parser] Se esperaba un ; al final de la sentencia when"); }
break;
case 156:
//#line 289 ".\gramatica.y"
{ logger.logError("[Parser] Se esperaba la palabra reservada then en la sentencia when"); }
break;
case 157:
//#line 290 ".\gramatica.y"
{ logger.logError("[Parser] Se esperaban sentencias dentro del when"); }
break;
case 160:
//#line 299 ".\gramatica.y"
{ logger.logSuccess("[Parser] Sentencia if then detectada"); }
break;
case 161:
//#line 300 ".\gramatica.y"
{ logger.logSuccess("[Parser] Sentencia if then else detectada"); }
break;
case 167:
//#line 315 ".\gramatica.y"
{ logger.logError("[Parser] Se esperaba un expresion del lado derecho de la comparacion"); }
break;
case 168:
//#line 316 ".\gramatica.y"
{ logger.logError("[Parser] Se esperaba un expresion del lado izquierdo de la comparacion"); }
break;
case 190:
//#line 362 ".\gramatica.y"
{ logger.logSuccess("[Parser] Sentencia out detectada"); }
break;
case 191:
//#line 363 ".\gramatica.y"
{ logger.logSuccess("[Parser] Sentencia out detectada"); }
break;
case 192:
//#line 364 ".\gramatica.y"
{ logger.logError("[Parser] Se esperaba una cadena o identificador en la sentencia out"); }
break;
case 193:
//#line 365 ".\gramatica.y"
{ logger.logError("[Parser] Se esperaba un ( en la sentencia out"); }
break;
case 194:
//#line 366 ".\gramatica.y"
{ logger.logError("[Parser] Se esperaba un ) en la sentencia out"); }
break;
case 195:
//#line 367 ".\gramatica.y"
{ logger.logError("[Parser] Se esperaba un ( en la sentencia out"); }
break;
case 196:
//#line 368 ".\gramatica.y"
{ logger.logError("[Parser] Se esperaba un ) en la sentencia out"); }
break;
case 197:
//#line 369 ".\gramatica.y"
{ logger.logError("[Parser] Se espera un ; al final de la sentencia out"); }
break;
case 198:
//#line 370 ".\gramatica.y"
{ logger.logError("[Parser] Se espera un ; al final de la sentencia out"); }
break;
case 200:
//#line 375 ".\gramatica.y"
{ constanteConSigno(val_peek(0).sval); }
break;
//#line 1482 "Parser.java"
//########## END OF USER-SUPPLIED ACTIONS ##########
    }//switch
    //#### Now let's reduce... ####
    if (yydebug) debug("reduce");
    state_drop(yym);             //we just reduced yylen states
    yystate = state_peek(0);     //get new state
    val_drop(yym);               //corresponding value drop
    yym = yylhs[yyn];            //select next TERMINAL(on lhs)
    if (yystate == 0 && yym == 0)//done? 'rest' state and at first TERMINAL
      {
      if (yydebug) debug("After reduction, shifting from state 0 to state "+YYFINAL+"");
      yystate = YYFINAL;         //explicitly say we're done
      state_push(YYFINAL);       //and save it
      val_push(yyval);           //also save the semantic value of parsing
      if (yychar < 0)            //we want another character?
        {
        yychar = yylex();        //get next character
        if (yychar<0) yychar=0;  //clean, if necessary
        if (yydebug)
          yylexdebug(yystate,yychar);
        }
      if (yychar == 0)          //Good exit (if lex returns 0 ;-)
         break;                 //quit the loop--all DONE
      }//if yystate
    else                        //else not done yet
      {                         //get next state and push, for next yydefred[]
      yyn = yygindex[yym];      //find out where to go
      if ((yyn != 0) && (yyn += yystate) >= 0 &&
            yyn <= YYTABLESIZE && yycheck[yyn] == yystate)
        yystate = yytable[yyn]; //get new state
      else
        yystate = yydgoto[yym]; //else go to new defred
      if (yydebug) debug("after reduction, shifting from state "+state_peek(0)+" to state "+yystate+"");
      state_push(yystate);     //going again, so push state & val...
      val_push(yyval);         //for next action
      }
    }//main loop
  return 0;//yyaccept!!
}
//## end of method parse() ######################################



//## run() --- for Thread #######################################
/**
 * A default run method, used for operating this parser
 * object in the background.  It is intended for extending Thread
 * or implementing Runnable.  Turn off with -Jnorun .
 */
public void run()
{
  yyparse();
}
//## end of method run() ########################################



//## Constructors ###############################################
/**
 * Default constructor.  Turn off with -Jnoconstruct .

 */
public Parser()
{
  //nothing to do
}


/**
 * Create a parser, setting the debug to true or false.
 * @param debugMe true for debugging, false for no debug.
 */
public Parser(boolean debugMe)
{
  yydebug=debugMe;
}
//###############################################################



}
//################### END OF CLASS ##############################
