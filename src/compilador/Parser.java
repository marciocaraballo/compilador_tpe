//### This file created by BYACC 1.8(/Java extension  1.15)
//### Java capabilities added 7 Jan 97, Bob Jamison
//### Updated : 27 Nov 97  -- Bob Jamison, Joe Nieten
//###           01 Jan 98  -- Bob Jamison -- fixed generic semantic constructor
//###           01 Jun 99  -- Bob Jamison -- added Runnable support
//###           06 Aug 00  -- Bob Jamison -- made state variables class-global
//###           03 Jan 01  -- Bob Jamison -- improved flags, tracing
//###           16 May 01  -- Bob Jamison -- added custom stack sizing
//###           04 Mar 02  -- Yuval Oren  -- improved java performance, added options
//###           14 Mar 02  -- Tomas Hurka -- -d support, static initializer workaround
//### Please send bug reports to tom@hukatronic.cz
//### static char yysccsid[] = "@(#)yaccpar	1.8 (Berkeley) 01/20/90";



package compilador;



//#line 2 "./src/compilador/gramatica.y"
import java.io.File;
//#line 19 "Parser.java"




public class Parser
{

boolean yydebug;        //do I want debug output?
int yynerrs;            //number of errors so far
int yyerrflag;          //was there an error?
int yychar;             //the current working character

//########## MESSAGES ##########
//###############################################################
// method: debug
//###############################################################
void debug(String msg)
{
  if (yydebug)
    System.out.println(msg);
}

//########## STATE STACK ##########
final static int YYSTACKSIZE = 500;  //maximum stack size
int statestk[] = new int[YYSTACKSIZE]; //state stack
int stateptr;
int stateptrmax;                     //highest index of stackptr
int statemax;                        //state when highest index reached
//###############################################################
// methods: state stack push,pop,drop,peek
//###############################################################
final void state_push(int state)
{
  try {
		stateptr++;
		statestk[stateptr]=state;
	 }
	 catch (ArrayIndexOutOfBoundsException e) {
     int oldsize = statestk.length;
     int newsize = oldsize * 2;
     int[] newstack = new int[newsize];
     System.arraycopy(statestk,0,newstack,0,oldsize);
     statestk = newstack;
     statestk[stateptr]=state;
  }
}
final int state_pop()
{
  return statestk[stateptr--];
}
final void state_drop(int cnt)
{
  stateptr -= cnt; 
}
final int state_peek(int relative)
{
  return statestk[stateptr-relative];
}
//###############################################################
// method: init_stacks : allocate and prepare stacks
//###############################################################
final boolean init_stacks()
{
  stateptr = -1;
  val_init();
  return true;
}
//###############################################################
// method: dump_stacks : show n levels of the stacks
//###############################################################
void dump_stacks(int count)
{
int i;
  System.out.println("=index==state====value=     s:"+stateptr+"  v:"+valptr);
  for (i=0;i<count;i++)
    System.out.println(" "+i+"    "+statestk[i]+"      "+valstk[i]);
  System.out.println("======================");
}


//########## SEMANTIC VALUES ##########
//public class ParserVal is defined in ParserVal.java


String   yytext;//user variable to return contextual strings
ParserVal yyval; //used to return semantic vals from action routines
ParserVal yylval;//the 'lval' (result) I got from yylex()
ParserVal valstk[];
int valptr;
//###############################################################
// methods: value stack push,pop,drop,peek.
//###############################################################
void val_init()
{
  valstk=new ParserVal[YYSTACKSIZE];
  yyval=new ParserVal();
  yylval=new ParserVal();
  valptr=-1;
}
void val_push(ParserVal val)
{
  if (valptr>=YYSTACKSIZE)
    return;
  valstk[++valptr]=val;
}
ParserVal val_pop()
{
  if (valptr<0)
    return new ParserVal();
  return valstk[valptr--];
}
void val_drop(int cnt)
{
int ptr;
  ptr=valptr-cnt;
  if (ptr<0)
    return;
  valptr = ptr;
}
ParserVal val_peek(int relative)
{
int ptr;
  ptr=valptr-relative;
  if (ptr<0)
    return new ParserVal();
  return valstk[ptr];
}
final ParserVal dup_yyval(ParserVal val)
{
  ParserVal dup = new ParserVal();
  dup.ival = val.ival;
  dup.dval = val.dval;
  dup.sval = val.sval;
  dup.obj = val.obj;
  return dup;
}
//#### end semantic value section ####
public final static short ID=257;
public final static short CTE=258;
public final static short CADENA=259;
public final static short IF=260;
public final static short ELSE=261;
public final static short ENDIF=262;
public final static short PRINT=263;
public final static short VOID=264;
public final static short RETURN=265;
public final static short COMP_MAYOR_IGUAL=266;
public final static short COMP_MENOR_IGUAL=267;
public final static short COMP_IGUAL=268;
public final static short COMP_DISTINTO=269;
public final static short CLASS=270;
public final static short WHILE=271;
public final static short DO=272;
public final static short INTERFACE=273;
public final static short IMPLEMENT=274;
public final static short INT=275;
public final static short ULONG=276;
public final static short FLOAT=277;
public final static short OPERADOR_MENOS=278;
public final static short YYERRCODE=256;
final static short yylhs[] = {                           -1,
    0,    0,    0,    0,    0,    1,    1,    2,    2,    2,
    4,    4,    4,    4,    4,    4,   11,   11,   12,   12,
   13,   13,   13,   13,   13,   10,   10,    9,    9,    9,
    9,    9,    9,    9,    9,    9,    9,    9,   15,   19,
   15,   15,   15,   15,   15,   15,   15,   15,   15,    8,
    8,    8,    8,    8,    8,    8,    8,    8,   14,   14,
   14,   22,   14,   14,   14,   14,   14,   20,   20,   20,
   20,   20,   20,   16,   16,   16,   16,   16,   16,   24,
   21,   21,   21,   21,   21,   21,   18,   18,   18,   18,
   18,   18,   18,   18,   18,   18,   18,   26,   26,   27,
   27,   23,   23,   23,   23,   25,   25,   25,   25,    7,
    7,    7,    7,    7,    7,    7,    6,    6,    6,    6,
    6,    6,   31,   31,    5,    5,    5,   29,   29,    3,
    3,    3,    3,   32,   32,   32,   38,   38,   35,   35,
   39,   39,   40,   40,   42,   42,   42,   42,   42,   43,
   43,   43,   43,   43,   43,   34,   44,   44,   33,   45,
   45,   45,   45,   45,   47,   47,   41,   41,   41,   41,
   41,   41,   41,   41,   46,   46,   46,   46,   46,   46,
   46,   46,   46,   46,   46,   46,   50,   50,   51,   51,
   51,   49,   49,   49,   48,   37,   37,   36,   36,   36,
   36,   17,   17,   17,   17,   52,   52,   52,   52,   52,
   52,   30,   30,   30,   53,   53,   53,   54,   54,   54,
   54,   28,   28,
};
final static short yylen[] = {                            2,
    3,    2,    2,    2,    0,    1,    2,    1,    1,    2,
    1,    1,    1,    1,    1,    1,    1,    2,    1,    1,
    1,    1,    1,    1,    1,    2,    1,    7,    6,    6,
    6,    6,    3,    4,    2,    5,    4,    3,    7,    0,
   13,    6,    6,    3,    4,    2,    5,    4,    3,    9,
    7,    8,    6,    8,    6,    8,    8,    6,    9,    7,
    8,    0,   15,    6,    8,    8,    6,    1,    3,    2,
    2,    2,    1,    3,    4,    3,    3,    2,    1,    1,
    1,    4,    3,    3,    2,    1,    1,    1,    1,    3,
    4,    5,    2,    3,    2,    3,    2,    1,    2,    1,
    1,    1,    2,    1,    2,    1,    2,    1,    2,    3,
    2,    2,    3,    2,    3,    2,    5,    4,    7,    4,
    3,    6,    1,    3,    4,    3,    3,    1,    3,    1,
    1,    1,    1,    3,    2,    2,    2,    1,    4,    2,
    1,    2,    2,    1,    3,    2,    1,    2,    2,    2,
    4,    1,    3,    3,    2,    4,    1,    2,    2,    4,
    3,    6,    5,    2,    2,    1,    5,    4,    7,    6,
    4,    3,    4,    3,    4,    3,    5,    4,    3,    2,
    3,    2,    4,    3,    2,    1,    1,    2,    1,    1,
    1,    1,    3,    2,    2,    1,    3,    1,    1,    1,
    1,    3,    2,    2,    3,    1,    1,    1,    1,    1,
    1,    3,    3,    1,    3,    3,    1,    1,    2,    1,
    3,    1,    2,
};
final static short yydefred[] = {                         0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,  198,
  199,  200,    0,    0,    0,    6,    8,    9,   11,   12,
   13,   14,   15,   16,    0,  130,  131,  132,  133,    0,
    0,    0,    0,    0,   10,    0,    0,  222,    0,    0,
  112,    0,  165,   26,    0,    0,    0,    0,   35,    0,
   79,   80,    0,    0,  137,    4,    0,    2,    7,    0,
    0,    0,  196,  136,    0,    0,  140,    0,    0,    0,
    0,  186,   19,   21,   22,   23,    0,    0,   17,   20,
   24,   25,  159,    0,  164,    0,  206,  207,  208,  209,
    0,    0,  210,  211,    0,  220,    0,    0,    0,  217,
  113,  110,  223,  115,    0,  153,   33,    0,  128,   78,
    0,    0,    0,    0,    0,  104,  102,    0,    1,    0,
    0,  127,    0,  129,  134,    0,    0,    0,  141,    0,
    0,    0,    0,  157,    0,    0,    0,    0,   46,    0,
    0,   88,    0,    0,    0,  180,    0,    0,  182,  189,
  190,  191,    0,  187,  185,    0,   18,  201,  161,    0,
    0,  219,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,  151,    0,   74,    0,
   37,    0,   34,    0,    0,   77,  105,  103,  118,    0,
    0,  125,  197,    0,    0,  139,  142,  143,  149,  148,
    0,  156,  158,    0,    0,   44,   97,  108,  106,    0,
    0,    0,    0,    0,   93,  109,    0,  107,  176,    0,
  179,    0,  184,  188,  181,    0,  195,    0,  160,  192,
    0,  221,   72,    0,    0,    0,   71,    0,    0,    0,
    0,    0,    0,    0,  215,  216,    0,   75,   36,    0,
    0,    0,    0,    0,  117,    0,  174,    0,  172,    0,
  145,    0,    0,   90,    0,   48,    0,   45,    0,    0,
   94,  178,  175,    0,  183,    0,    0,  163,  194,   69,
    0,   86,    0,    0,   55,    0,   58,    0,    0,   30,
   31,    0,   32,    0,    0,  168,    0,  173,  171,    0,
    0,    0,    0,   91,  100,  101,    0,   98,   47,    0,
    0,    0,  177,  162,  193,   85,    0,    0,    0,    0,
    0,    0,   51,   28,    0,  119,    0,  167,    0,   64,
    0,   67,    0,    0,   92,   99,   42,    0,   43,    0,
   84,   54,   56,   57,    0,    0,  170,    0,    0,    0,
   60,    0,   39,    0,   82,   50,  169,   65,   66,    0,
    0,    0,   59,    0,    0,    0,    0,    0,    0,    0,
    0,    0,   41,    0,   63,
};
final static short yydgoto[] = {                         14,
   15,   16,  150,  188,   74,   75,   76,   22,   23,   24,
   78,   79,  152,   81,   82,   53,   95,  144,  354,  167,
  284,  352,  168,   54,  145,  307,  308,   96,   25,   97,
  254,   26,   27,   28,   29,   30,   65,   31,  128,  129,
  130,  134,   32,  135,   33,   83,   34,  230,  231,  153,
  154,   98,   99,  100,
};
final static short yysindex[] = {                      1132,
   31,    0,  -23,  133, -175,   50, -230,  969, -156,    0,
    0,    0, 1431,    0, 1453,    0,    0,    0,    0,    0,
    0,    0,    0,    0,  -10,    0,    0,    0,    0,  -40,
  -63,   -2, 1188,    2,    0,  158,   62,    0,   91, -101,
    0,  117,    0,    0, -143,  -93,   37,  722,    0, 1048,
    0,    0,  -28, 1981,    0,    0, 1477,    0,    0,   87,
   97,  -91,    0,    0,   -6,  -74,    0, -179,  164, 1006,
 1498,    0,    0,    0,    0,    0, 1519, 1540,    0,    0,
    0,    0,    0,   49,    0,  -72,    0,    0,    0,    0,
  111, 1323,    0,    0,  167,    0,  875,  111,   -1,    0,
    0,    0,    0,    0,  -47,    0,    0, 1118,    0,    0,
 1564,  178,  174,   47, 1118,    0,    0, 1586,    0,  180,
  424,    0,   72,    0,    0,    8,  -38, -120,    0,  181,
  196,  211,   15,    0,  -90, 1175,  224, 1960,    0, 1212,
    0,    0,    0,  -27, 1607,    0, 1631, 1652,    0,    0,
    0,    0, 1673,    0,    0, 1694,    0,    0,    0,   18,
  -16,    0,   66, 1717,    0,    0, -212, 1740, 1067,  111,
  111,  111,  111,   93,  111,  111,    0,  206,    0, 1761,
    0,  232,    0, 1247,  237,    0,    0,    0,    0,  111,
  235,    0,    0,  -19,  270,    0,    0,    0,    0,    0,
    4,    0,    0, 1344,  241,    0,    0,    0,    0, 1785,
  246,  252,   48, 1118,    0,    0,  173,    0,    0, 1806,
    0, 1827,    0,    0,    0, 1848,    0,  171,    0,    0,
   20,    0,    0, 1870, 1365,  256,    0, 1365,  264, -192,
   -1,   -1,   93,   93,    0,    0,  272,    0,    0,  279,
  273,  286,   93,   58,    0,  276,    0,  291,    0,  292,
    0,   74, 1088,    0, 1159,    0,  298,    0, 1263,  305,
    0,    0,    0, 1894,    0,  104,  171,    0,    0,    0,
 1211,    0, 1981,   86,    0,   90,    0, 1276,  312,    0,
    0,  313,    0,  111,  315,    0,  127,    0,    0,  318,
 1344,  321, -107,    0,    0,    0, 1229,    0,    0,  326,
  333,  331,    0,    0,    0,    0, 1981, 1915,  339,  341,
  343,  134,    0,    0,   93,    0,  171,    0,  239,    0,
  137,    0, 1297,  345,    0,    0,    0,  350,    0, 1939,
    0,    0,    0,    0,  351,  266,    0,  356,  357,  145,
    0,  149,    0,  138,    0,    0,    0,    0,    0,  361,
  372,  146,    0,  377,  374, 1344, 1118,  159,  392, 1344,
  395,  179,    0,  396,    0,
};
final static short yyrindex[] = {                       436,
    0,   -7,    0,    0,  132,  337,  319,    0,   35,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,  373,    0,  466,    0,
    0,  540,    0,    0,  338,  347,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,  449,    0,    0,    0,
    0,    0,    0,    0,  564,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,  411,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,  443,    0,
    0,    0,    0,    0,  355,    0,    0,    0,    0,    0,
    0,  592,    0,    0,    0,    0,    0,    0,    0,  615,
    0,    0,  651,    0,    0,    0,    0,    0,    0, -117,
  207,  310,    0,    0,    0,    0,    0,    0,    0,    0,
  863,    0,  889,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0, 1386, 1409,    0,    0,    0,    0,
    0,    0,  419,  440,    0,    0,    0,    0,    0,  -17,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
  693,    0,    0,    0,    0,    0,    0,    0,    0,    0,
  383,    0,    0,    0,    0,    0,    0,    0,    0,   -9,
  911,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,  -78,    0,    0,    0,    0,    0,    0,
  494,  517,  444,  450,    0,    0,    0,    0,    0,    0,
    0,    0,   82,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,   60,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,  228,    0,    0,    0,    0,    0,  735,    0,
    0,  768,    0,    0,  806,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,   89,    0,    0,    0,    0,    0,
    0,    0,    0,  233,    0,    0,    0,  220,    0,  240,
    0,    0,    0,    0,  842,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,  932,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,
};
final static short yygindex[] = {                         0,
  482,   -5,    1,  194,   11,   32,  105,    0,    0,  156,
  426,  -75,  143,    0,    0,    0,  -32, -138,    0,  332,
 -232,    0,  -54,  459,  380,    0,  205,  506,    0,  883,
    0,    0,  -61,    0,    0,  203,  388,    0,    0,  397,
    0,  389,    0,    0,    0,    0,    0,  243, -213, -127,
  -86,  431,   22,   55,
};
final static int YYTABLESIZE=2258;
static short yytable[];
static { yytable();}
static void yytable(){
yytable = new short[]{                        118,
   17,  195,  157,   64,  196,  286,  132,  144,   51,   59,
   19,  115,  214,   17,  276,   17,   36,  113,   19,  220,
  256,  257,   76,   19,  229,   19,   45,  228,  226,   60,
   95,   20,  128,   73,  202,   62,  201,  125,  128,   20,
  175,   84,   85,   46,   20,  176,   20,  261,  235,  236,
   61,   59,  126,  128,  116,  322,  180,   17,   19,   66,
  278,   67,  126,  277,   19,  262,  224,   19,  288,  289,
  141,   73,  157,  132,   35,  178,  108,  131,   73,   20,
  107,   43,  185,  329,    5,   20,  184,  269,   20,  159,
  183,  268,  165,   44,  274,   10,   11,   12,  295,   96,
   55,  294,   19,  205,   21,  101,  232,  212,  170,  234,
  171,  116,   21,  346,  170,  192,  171,   21,  187,   21,
   68,   19,  123,   20,  303,  123,   91,  120,   19,  124,
  105,   40,  124,  224,  102,  170,   91,  171,  208,  224,
  122,   40,   20,  127,  314,  216,  144,  277,   73,   20,
   91,  251,   21,  333,  334,   40,  103,  138,   21,  138,
  104,   21,  331,  106,  116,  124,  131,  328,  187,  165,
  327,  166,  166,    5,   19,   80,   41,   40,   19,   19,
  187,  270,   70,   70,   10,   11,   12,  224,   77,  127,
   19,  241,  242,   18,  350,   20,   21,   91,   92,   20,
   20,   52,   40,  136,  141,  162,   18,  169,   18,  177,
  216,   20,  143,   80,  182,   21,   63,   94,  194,   93,
   80,  181,   21,  189,  198,  142,  147,  368,  318,  245,
  246,  372,  151,  156,  187,  282,  311,  158,  282,  199,
  158,   52,  114,  213,   19,   19,  247,  117,   19,  201,
   18,   95,   95,   76,  200,   10,   11,   12,   10,   11,
   12,   95,  340,  141,  193,   20,   20,  206,   21,   20,
  133,   63,   21,   21,  227,  249,  158,  252,  255,  347,
  209,  263,  277,  116,   21,  166,  160,  218,  282,  266,
   80,   19,  267,   19,   10,   11,   12,  271,   19,  285,
  217,  141,  151,  222,  117,  158,  357,  287,  151,  277,
  259,  151,   20,  292,   20,  290,  296,  116,  187,   20,
   96,   96,  291,   10,   11,   12,  161,   19,   19,  293,
   96,  298,  299,  141,  369,  300,   27,  133,   21,   21,
  187,  309,   21,   86,   38,  312,  143,  319,   20,   20,
   19,  320,  218,   86,   38,  323,  324,  117,  326,  142,
  158,  330,  166,  160,  332,  265,  141,   86,   38,  337,
  141,   20,  114,  338,  339,  151,   27,  151,   10,   11,
   12,  151,  342,  158,  343,   21,  344,   21,  351,   37,
   38,   39,   21,  353,  356,  345,  160,  160,  348,  358,
  359,   10,   11,   12,  363,  143,  360,  306,  361,  362,
  218,  364,  114,  367,   86,   38,  365,  366,  142,  370,
  305,   21,   21,   87,   88,   89,   90,  158,  283,  151,
  160,  283,  371,  160,  147,    5,  258,  260,  373,  375,
  374,  152,  214,  143,   21,   10,   11,   12,    3,  306,
  218,  218,  218,  218,  218,  218,  142,  218,  160,  203,
  150,   27,  305,  201,  191,  111,  170,  190,  171,  155,
  218,  218,  218,  279,  317,  143,  117,  154,  160,  160,
  204,  283,  214,  214,  205,  214,  214,  214,  142,   81,
  202,   40,   62,  212,   57,  158,  148,  114,  297,  160,
  240,   83,  214,  214,  214,  111,  111,  146,  143,   42,
  117,  336,  143,   10,   11,   12,  213,  210,  279,  315,
  201,  142,  158,  203,  197,  142,  158,  173,    0,  160,
    0,  160,  158,  212,  212,  218,  212,  212,  212,  116,
   10,   11,   12,    0,   10,   11,   12,    0,  160,    0,
   10,   11,   12,  212,  212,  212,  213,  213,    0,  213,
  213,  213,    0,  135,    0,    0,  147,  214,    0,    0,
    0,  279,    0,  147,    0,    0,  213,  213,  213,  116,
    0,    0,    0,    0,  147,  147,  147,    0,  279,    0,
  111,   38,   27,   27,    0,    0,   27,   27,   27,   27,
   27,   27,    0,  135,    0,    0,   27,   27,   27,   27,
    0,   27,   27,   27,  121,    0,    0,    0,  212,    0,
    0,    0,    0,    0,    0,    0,    0,    0,  114,  114,
    0,   38,  114,  114,  114,  114,  114,  114,    0,  146,
    0,  213,  114,  114,  114,  114,  146,  114,  114,  114,
  126,    0,    0,    0,  121,    0,    0,  146,  146,  146,
    0,    0,    0,    0,  116,    0,  218,  218,    0,    0,
  218,  218,  218,  218,  218,  218,  218,  218,  218,  218,
  218,  218,  218,  218,    0,  218,  218,  218,  135,    0,
  126,    0,  120,    0,    0,    0,    0,    0,  214,  214,
    0,    0,  214,  214,  214,  214,  214,  214,  214,  214,
  214,  214,  214,  214,  214,  214,   38,  214,  214,  214,
    0,  111,  111,    0,    0,  111,  111,  111,  111,  111,
  111,    0,  120,    0,   53,  111,  111,  111,  111,  121,
  111,  111,  111,    0,    0,    0,    0,    0,    0,  212,
  212,    0,    0,  212,  212,  212,  212,  212,  212,  212,
  212,  212,  212,  212,  212,  212,  212,   29,  212,  212,
  212,    0,  213,  213,   53,  126,  213,  213,  213,  213,
  213,  213,  213,  213,  213,  213,  213,  213,  213,  213,
    0,  213,  213,  213,    0,  116,  116,    0,    0,  116,
  116,  116,  116,  116,  116,  122,    0,   29,    0,  116,
  116,  116,  116,    0,  116,  116,  116,  120,    0,  135,
  135,    0,    0,  135,  135,  135,  135,  135,  135,    0,
    0,    0,    0,  135,  135,  135,  135,    0,  135,  135,
  135,   52,    0,    0,    0,  122,  110,   38,   38,    0,
    0,   38,   38,   38,   38,   38,   38,    0,    0,   53,
    0,   38,   38,   38,   38,    0,   38,   38,   38,    0,
  121,  121,    0,    0,  121,  121,  121,  121,  121,  121,
    0,   52,    0,    0,  121,  121,  121,  121,    0,  121,
  121,  121,   29,    0,    0,    0,    0,    0,    0,    0,
    0,    0,   89,    0,    0,    0,  126,  126,    0,    0,
  126,  126,  126,  126,  126,  126,    0,  170,    0,  171,
  126,  126,  126,  126,    0,  126,  126,  126,   87,    0,
  122,    0,    0,    0,   94,  172,   93,    0,    0,    0,
    0,    0,  121,  123,    0,    0,    0,    0,  120,  120,
   49,    0,  120,  120,  120,  120,  120,  120,    0,    0,
    0,    0,  120,  120,  120,  120,   52,  120,  120,  120,
    0,   61,    0,  163,    0,    0,    0,    0,  109,    0,
  174,    3,    0,    0,    4,    0,    6,  108,    0,    0,
   53,   53,    0,    8,   53,   53,   53,   53,   53,   53,
    0,    0,    0,    0,   53,   53,   53,   53,   50,   53,
   53,   53,   49,  106,    0,    0,    0,    0,    0,    0,
    0,    0,    0,   29,   29,    0,    0,   29,   29,   29,
   29,   29,   29,    0,    0,   49,    0,   29,   29,   29,
   29,    0,   29,   29,   29,  140,    0,    0,    0,  139,
    0,    0,    0,    0,  243,  244,   61,    0,    0,    0,
    0,  122,  122,    0,    0,  122,  122,  122,  122,  122,
  122,    0,  253,    0,    0,  122,  122,  122,  122,    0,
  122,  122,  122,    0,    0,    0,    0,   91,  112,    0,
    0,   48,   40,    0,    0,    0,    0,   52,   52,    0,
    0,   52,   52,   52,   52,   52,   52,   94,    0,   93,
    0,   52,   52,   52,   52,    0,   52,   52,   52,  108,
    0,    0,  108,   89,   89,  108,  108,  108,  138,    0,
    0,    0,  108,   89,  108,  108,    0,  108,  108,  108,
   87,   88,   89,   90,    0,  106,    0,    0,  106,   87,
   87,  106,  106,  106,    0,    0,    0,   91,  106,   87,
  106,  106,   40,  106,  106,  106,    0,   49,    0,    0,
   49,   49,   49,   49,   49,   49,  325,   94,    0,   93,
   49,   49,   49,   49,    0,   49,   49,   49,   61,  164,
    0,   61,   61,   61,   61,   61,   61,    0,    0,    0,
    0,   61,   61,   61,   61,    0,   61,   61,   61,    0,
  138,    0,    0,    0,   91,  204,    0,    0,    0,   40,
    0,    0,    0,    0,    0,    2,    0,    0,    3,    0,
    0,    4,    5,    6,   94,    0,   93,    0,    7,   47,
    8,    9,    0,   10,   11,   12,    0,    0,    0,    0,
    0,   91,  211,    0,   13,    0,   40,    0,    0,    0,
    0,    0,    2,    0,    0,   69,    0,    0,    4,    5,
    6,   94,    0,   93,    0,    7,  137,   70,    9,    0,
   10,   11,   12,  304,    0,    0,   91,  250,    0,    0,
    0,   40,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,   91,  310,   86,   38,   94,   40,   93,    0,
   71,    0,   72,   87,   88,   89,   90,    0,    0,    0,
    0,    0,   94,    2,   93,    0,    3,  238,  239,    4,
    5,    6,    0,    0,    0,  316,    7,    0,    8,    9,
    0,   10,   11,   12,    2,    0,    0,   69,  301,  302,
    4,    5,    6,  335,    0,    0,    0,    7,    0,   70,
    9,    0,   10,   11,   12,    0,    0,    0,    0,    0,
    0,    0,    0,    0,   86,   38,    0,    0,    0,    0,
    0,    0,    0,   87,   88,   89,   90,    1,    2,    0,
    0,    3,    0,    0,    4,    5,    6,    0,  281,    0,
    0,    7,    0,    8,    9,    0,   10,   11,   12,    0,
    0,    0,    0,    0,    0,  109,    0,    0,   69,  138,
    0,    4,    0,    6,    0,    0,    0,    0,    0,    0,
   70,   86,   38,    0,    0,    0,    0,    0,    0,    0,
   87,   88,   89,   90,    2,  164,    0,   69,    0,    0,
    4,    5,    6,    0,    0,    0,    0,    7,    0,   70,
    9,    0,   10,   11,   12,    0,  138,  109,   86,   38,
    3,    0,    0,    4,    0,    6,    0,   87,   88,   89,
   90,    0,    8,    0,    0,  109,    0,  281,   69,    0,
    0,    4,    0,    6,    0,    0,    0,    0,    0,    0,
   70,    0,    0,   86,   38,    0,    0,    0,    0,    0,
  104,    0,   87,   88,   89,   90,    0,    0,    0,   86,
   38,    0,    0,    0,    0,    0,    0,    0,   87,   88,
   89,   90,    2,  102,    0,    3,    0,  321,    4,    5,
    6,    0,    0,    0,    0,    7,    0,    8,    9,    0,
   10,   11,   12,    2,    0,   56,   69,    0,  349,    4,
    5,    6,    0,    0,    0,    0,    7,    0,   70,    9,
    0,   10,   11,   12,    0,    0,    0,   58,    0,    2,
    0,    0,    3,    0,    0,    4,    5,    6,    0,    0,
    0,    0,    7,    0,    8,    9,    0,   10,   11,   12,
    2,  119,    0,   69,    0,    0,    4,    5,    6,    0,
    0,    0,    0,    7,    0,   70,    9,    0,   10,   11,
   12,    2,  146,    0,    3,    0,    0,    4,    5,    6,
    0,    0,    0,    0,    7,    0,    8,    9,    0,   10,
   11,   12,  104,  149,    0,  104,   73,   73,  104,  104,
  104,    0,    0,    0,    0,  104,    0,  104,  104,    0,
  104,  104,  104,    0,  155,  102,    0,    0,  102,   68,
   68,  102,  102,  102,    0,    0,    0,    0,  102,    0,
  102,  102,    0,  102,  102,  102,    1,    2,  179,    0,
    3,    0,    0,    4,    5,    6,    0,    0,    0,    0,
    7,    0,    8,    9,    0,   10,   11,   12,    1,    2,
  186,    0,    3,    0,    0,    4,    5,    6,    0,    0,
    0,    0,    7,    0,    8,    9,    0,   10,   11,   12,
    0,  215,    1,    2,    0,    0,    3,    0,    0,    4,
    5,    6,    0,    0,    0,    0,    7,    0,    8,    9,
    0,   10,   11,   12,    2,  219,    0,   69,    0,    0,
    4,    5,    6,    0,    0,    0,    0,    7,    0,   70,
    9,    0,   10,   11,   12,    2,  221,    0,   69,    0,
    0,    4,    5,    6,    0,    0,    0,    0,    7,    0,
   70,    9,    0,   10,   11,   12,    2,  223,    0,   69,
    0,    0,    4,    5,    6,    0,    0,    0,    0,    7,
    0,   70,    9,    0,   10,   11,   12,    0,  225,    0,
    2,    0,    0,    3,    0,    0,    4,    5,    6,    0,
    0,    0,    0,    7,    0,    8,    9,    0,   10,   11,
   12,  233,    2,    0,    0,    3,    0,    0,    4,    5,
    6,    0,    0,    0,    0,    7,    0,    8,    9,    0,
   10,   11,   12,    2,  237,    0,   69,    0,    0,    4,
    5,    6,    0,    0,    0,    0,    7,    0,   70,    9,
    0,   10,   11,   12,    0,  248,    0,    2,    0,    0,
   69,    0,    0,    4,    5,    6,    0,    0,    0,    0,
    7,    0,   70,    9,    0,   10,   11,   12,    2,  264,
    0,   69,    0,    0,    4,    5,    6,    0,    0,    0,
    0,    7,    0,   70,    9,    0,   10,   11,   12,    2,
  272,    0,   69,    0,    0,    4,    5,    6,    0,    0,
    0,    0,    7,    0,   70,    9,    0,   10,   11,   12,
    2,  273,    0,   69,    0,    0,    4,    5,    6,    0,
    0,    0,    0,    7,    0,   70,    9,    0,   10,   11,
   12,    0,  275,    2,    0,    0,    3,    0,    0,    4,
    5,    6,    0,    0,    0,    0,    7,    0,    8,    9,
    0,   10,   11,   12,  280,    0,    2,    0,    0,    3,
    0,    0,    4,    5,    6,    0,    0,    0,    0,    7,
    0,    8,    9,    0,   10,   11,   12,    2,  313,    0,
    3,    0,    0,    4,    5,    6,    0,    0,    0,    0,
    7,    0,    8,    9,    0,   10,   11,   12,    0,  341,
    0,    2,    0,    0,   69,    0,    0,    4,    5,    6,
    0,    0,    0,    0,    7,    0,   70,    9,    0,   10,
   11,   12,    2,  355,    0,   69,    0,    0,    4,    5,
    6,    0,    0,    0,    0,    7,    0,   70,    9,    0,
   10,   11,   12,    2,  207,    0,   69,    0,    0,    4,
    5,    6,    0,    0,    0,    0,    7,    0,   70,    9,
    0,   10,   11,   12,    2,    0,    0,   69,    0,    0,
    4,    5,    6,    0,    0,    0,    0,    7,    0,   70,
    9,    0,   10,   11,   12,    0,    2,    0,    0,    3,
    0,    0,    4,    5,    6,    0,    0,    0,    0,    7,
    0,    8,    9,    0,   10,   11,   12,    0,    0,    0,
    2,    0,    0,   69,    0,    0,    4,    5,    6,    0,
    0,    0,    0,    7,    0,   70,    9,    0,   10,   11,
   12,    2,    0,    0,    3,    0,    0,    4,    5,    6,
    0,    0,    0,    0,    7,    0,    8,    9,    0,   10,
   11,   12,    0,    0,    0,    2,    0,    0,    3,    0,
    0,    4,    5,    6,    0,    0,    0,    0,    7,    0,
    8,    9,    0,   10,   11,   12,    2,    0,    0,   69,
    0,    0,    4,    5,    0,    0,    0,    0,    0,    7,
    0,   70,    9,    0,   10,   11,   12,    2,    0,    0,
    3,    0,    0,    4,    5,    6,    0,    0,    0,    0,
    7,    0,    8,    9,    0,   10,   11,   12,
};
}
static short yycheck[];
static { yycheck(); }
static void yycheck() {
yycheck = new short[] {                         54,
    0,   40,   78,   44,  125,  238,   68,  125,    8,   15,
    0,   40,   40,   13,  228,   15,   40,   50,    8,  147,
   40,   41,   40,   13,   41,   15,  257,   44,  156,   40,
   40,    0,   40,   33,  125,   46,   44,   44,   46,    8,
   42,   40,   41,  274,   13,   47,   15,   44,  261,  262,
   61,   57,   59,   61,   54,  288,  111,   57,   48,  123,
   41,  125,   59,   44,   54,  204,  153,   57,  261,  262,
   70,   71,  148,  135,   44,  108,   40,  257,   78,   48,
   44,  257,  115,  297,  264,   54,   40,   40,   57,   41,
   44,   44,   92,   44,  222,  275,  276,  277,   41,   40,
  257,   44,   92,  136,    0,   44,   41,  140,   43,  164,
   45,  111,    8,  327,   43,   44,   45,   13,  118,   15,
  123,  111,   41,   92,  263,   44,   40,   41,  118,   41,
  274,   45,   44,  220,   44,   43,   40,   45,  138,  226,
   44,   45,  111,  264,   41,  145,  264,   44,  148,  118,
   40,  184,   48,  261,  262,   45,  258,  123,   54,  125,
   44,   57,  301,  257,  164,  257,  257,   41,  168,  169,
   44,   40,   41,  264,  164,   33,   44,   45,  168,  169,
  180,  214,  261,  262,  275,  276,  277,  274,   33,  264,
  180,  170,  171,    0,  333,  164,   92,   40,   41,  168,
  169,    8,   45,   40,  204,  278,   13,   41,   15,  257,
  210,  180,   70,   71,   41,  111,  257,   60,  257,   62,
   78,   44,  118,   44,   44,   70,   71,  366,  283,  175,
  176,  370,   77,   78,  234,  235,  269,  257,  238,   44,
  257,   48,  271,  271,  234,  235,   41,   54,  238,  257,
   57,  261,  262,  271,   44,  275,  276,  277,  275,  276,
  277,  271,  317,  263,  257,  234,  235,   44,  164,  238,
   68,  257,  168,  169,  257,   44,  257,   41,   44,   41,
  138,   41,   44,  283,  180,   92,   84,  145,  288,   44,
  148,  281,   41,  283,  275,  276,  277,  125,  288,   44,
  145,  301,  147,  148,  111,  257,   41,   44,  153,   44,
   41,  156,  281,   41,  283,   44,   41,  317,  318,  288,
  261,  262,   44,  275,  276,  277,   84,  317,  318,   44,
  271,   41,   41,  333,  367,  262,    0,  135,  234,  235,
  340,   44,  238,  257,  258,   41,  204,  262,  317,  318,
  340,  262,  210,  257,  258,   44,   44,  164,   44,  204,
  257,   44,  169,  161,   44,  210,  366,  257,  258,   44,
  370,  340,    0,   41,   44,  220,   40,  222,  275,  276,
  277,  226,   44,  257,   44,  281,   44,  283,   44,  257,
  258,  259,  288,   44,   44,  262,  194,  195,  262,   44,
   44,  275,  276,  277,   44,  263,  262,  265,  260,  272,
    0,   40,   40,   40,  257,  258,  271,   41,  263,  261,
  265,  317,  318,  266,  267,  268,  269,  257,  235,  274,
  228,  238,   41,  231,  125,    0,  194,  195,   44,   44,
  262,  123,    0,  301,  340,  275,  276,  277,    0,  307,
   40,   41,   42,   43,   44,   45,  301,   47,  256,   41,
  123,  125,  307,  257,   41,    0,   43,   44,   45,  123,
   60,   61,   62,  231,  281,  333,  283,  123,  276,  277,
   41,  288,   40,   41,   41,   43,   44,   45,  333,  262,
   41,  272,  260,    0,   13,  257,   71,  125,  256,  297,
  169,  262,   60,   61,   62,   40,   48,  125,  366,    4,
  317,  307,  370,  275,  276,  277,    0,  138,  276,  277,
  133,  366,  257,  135,  128,  370,  257,   97,   -1,  327,
   -1,  329,  257,   40,   41,  125,   43,   44,   45,    0,
  275,  276,  277,   -1,  275,  276,  277,   -1,  346,   -1,
  275,  276,  277,   60,   61,   62,   40,   41,   -1,   43,
   44,   45,   -1,    0,   -1,   -1,  257,  125,   -1,   -1,
   -1,  329,   -1,  264,   -1,   -1,   60,   61,   62,   40,
   -1,   -1,   -1,   -1,  275,  276,  277,   -1,  346,   -1,
  125,    0,  256,  257,   -1,   -1,  260,  261,  262,  263,
  264,  265,   -1,   40,   -1,   -1,  270,  271,  272,  273,
   -1,  275,  276,  277,    0,   -1,   -1,   -1,  125,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,  256,  257,
   -1,   40,  260,  261,  262,  263,  264,  265,   -1,  257,
   -1,  125,  270,  271,  272,  273,  264,  275,  276,  277,
    0,   -1,   -1,   -1,   40,   -1,   -1,  275,  276,  277,
   -1,   -1,   -1,   -1,  125,   -1,  256,  257,   -1,   -1,
  260,  261,  262,  263,  264,  265,  266,  267,  268,  269,
  270,  271,  272,  273,   -1,  275,  276,  277,  125,   -1,
   40,   -1,    0,   -1,   -1,   -1,   -1,   -1,  256,  257,
   -1,   -1,  260,  261,  262,  263,  264,  265,  266,  267,
  268,  269,  270,  271,  272,  273,  125,  275,  276,  277,
   -1,  256,  257,   -1,   -1,  260,  261,  262,  263,  264,
  265,   -1,   40,   -1,    0,  270,  271,  272,  273,  125,
  275,  276,  277,   -1,   -1,   -1,   -1,   -1,   -1,  256,
  257,   -1,   -1,  260,  261,  262,  263,  264,  265,  266,
  267,  268,  269,  270,  271,  272,  273,    0,  275,  276,
  277,   -1,  256,  257,   40,  125,  260,  261,  262,  263,
  264,  265,  266,  267,  268,  269,  270,  271,  272,  273,
   -1,  275,  276,  277,   -1,  256,  257,   -1,   -1,  260,
  261,  262,  263,  264,  265,    0,   -1,   40,   -1,  270,
  271,  272,  273,   -1,  275,  276,  277,  125,   -1,  256,
  257,   -1,   -1,  260,  261,  262,  263,  264,  265,   -1,
   -1,   -1,   -1,  270,  271,  272,  273,   -1,  275,  276,
  277,    0,   -1,   -1,   -1,   40,  125,  256,  257,   -1,
   -1,  260,  261,  262,  263,  264,  265,   -1,   -1,  125,
   -1,  270,  271,  272,  273,   -1,  275,  276,  277,   -1,
  256,  257,   -1,   -1,  260,  261,  262,  263,  264,  265,
   -1,   40,   -1,   -1,  270,  271,  272,  273,   -1,  275,
  276,  277,  125,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   40,   -1,   -1,   -1,  256,  257,   -1,   -1,
  260,  261,  262,  263,  264,  265,   -1,   43,   -1,   45,
  270,  271,  272,  273,   -1,  275,  276,  277,   40,   -1,
  125,   -1,   -1,   -1,   60,   61,   62,   -1,   -1,   -1,
   -1,   -1,   60,   61,   -1,   -1,   -1,   -1,  256,  257,
   40,   -1,  260,  261,  262,  263,  264,  265,   -1,   -1,
   -1,   -1,  270,  271,  272,  273,  125,  275,  276,  277,
   -1,   40,   -1,   91,   -1,   -1,   -1,   -1,  257,   -1,
   98,  260,   -1,   -1,  263,   -1,  265,  125,   -1,   -1,
  256,  257,   -1,  272,  260,  261,  262,  263,  264,  265,
   -1,   -1,   -1,   -1,  270,  271,  272,  273,   40,  275,
  276,  277,   44,  125,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,  256,  257,   -1,   -1,  260,  261,  262,
  263,  264,  265,   -1,   -1,  125,   -1,  270,  271,  272,
  273,   -1,  275,  276,  277,   40,   -1,   -1,   -1,   44,
   -1,   -1,   -1,   -1,  172,  173,  125,   -1,   -1,   -1,
   -1,  256,  257,   -1,   -1,  260,  261,  262,  263,  264,
  265,   -1,  190,   -1,   -1,  270,  271,  272,  273,   -1,
  275,  276,  277,   -1,   -1,   -1,   -1,   40,   41,   -1,
   -1,  123,   45,   -1,   -1,   -1,   -1,  256,  257,   -1,
   -1,  260,  261,  262,  263,  264,  265,   60,   -1,   62,
   -1,  270,  271,  272,  273,   -1,  275,  276,  277,  257,
   -1,   -1,  260,  261,  262,  263,  264,  265,  123,   -1,
   -1,   -1,  270,  271,  272,  273,   -1,  275,  276,  277,
  266,  267,  268,  269,   -1,  257,   -1,   -1,  260,  261,
  262,  263,  264,  265,   -1,   -1,   -1,   40,  270,  271,
  272,  273,   45,  275,  276,  277,   -1,  257,   -1,   -1,
  260,  261,  262,  263,  264,  265,  294,   60,   -1,   62,
  270,  271,  272,  273,   -1,  275,  276,  277,  257,  123,
   -1,  260,  261,  262,  263,  264,  265,   -1,   -1,   -1,
   -1,  270,  271,  272,  273,   -1,  275,  276,  277,   -1,
  123,   -1,   -1,   -1,   40,   41,   -1,   -1,   -1,   45,
   -1,   -1,   -1,   -1,   -1,  257,   -1,   -1,  260,   -1,
   -1,  263,  264,  265,   60,   -1,   62,   -1,  270,  271,
  272,  273,   -1,  275,  276,  277,   -1,   -1,   -1,   -1,
   -1,   40,   41,   -1,  123,   -1,   45,   -1,   -1,   -1,
   -1,   -1,  257,   -1,   -1,  260,   -1,   -1,  263,  264,
  265,   60,   -1,   62,   -1,  270,  271,  272,  273,   -1,
  275,  276,  277,  125,   -1,   -1,   40,   41,   -1,   -1,
   -1,   45,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   40,   41,  257,  258,   60,   45,   62,   -1,
  123,   -1,  125,  266,  267,  268,  269,   -1,   -1,   -1,
   -1,   -1,   60,  257,   62,   -1,  260,  261,  262,  263,
  264,  265,   -1,   -1,   -1,  125,  270,   -1,  272,  273,
   -1,  275,  276,  277,  257,   -1,   -1,  260,  261,  262,
  263,  264,  265,  125,   -1,   -1,   -1,  270,   -1,  272,
  273,   -1,  275,  276,  277,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,  257,  258,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,  266,  267,  268,  269,  256,  257,   -1,
   -1,  260,   -1,   -1,  263,  264,  265,   -1,  123,   -1,
   -1,  270,   -1,  272,  273,   -1,  275,  276,  277,   -1,
   -1,   -1,   -1,   -1,   -1,  257,   -1,   -1,  260,  123,
   -1,  263,   -1,  265,   -1,   -1,   -1,   -1,   -1,   -1,
  272,  257,  258,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
  266,  267,  268,  269,  257,  123,   -1,  260,   -1,   -1,
  263,  264,  265,   -1,   -1,   -1,   -1,  270,   -1,  272,
  273,   -1,  275,  276,  277,   -1,  123,  257,  257,  258,
  260,   -1,   -1,  263,   -1,  265,   -1,  266,  267,  268,
  269,   -1,  272,   -1,   -1,  257,   -1,  123,  260,   -1,
   -1,  263,   -1,  265,   -1,   -1,   -1,   -1,   -1,   -1,
  272,   -1,   -1,  257,  258,   -1,   -1,   -1,   -1,   -1,
  125,   -1,  266,  267,  268,  269,   -1,   -1,   -1,  257,
  258,   -1,   -1,   -1,   -1,   -1,   -1,   -1,  266,  267,
  268,  269,  257,  125,   -1,  260,   -1,  262,  263,  264,
  265,   -1,   -1,   -1,   -1,  270,   -1,  272,  273,   -1,
  275,  276,  277,  257,   -1,  125,  260,   -1,  262,  263,
  264,  265,   -1,   -1,   -1,   -1,  270,   -1,  272,  273,
   -1,  275,  276,  277,   -1,   -1,   -1,  125,   -1,  257,
   -1,   -1,  260,   -1,   -1,  263,  264,  265,   -1,   -1,
   -1,   -1,  270,   -1,  272,  273,   -1,  275,  276,  277,
  257,  125,   -1,  260,   -1,   -1,  263,  264,  265,   -1,
   -1,   -1,   -1,  270,   -1,  272,  273,   -1,  275,  276,
  277,  257,  125,   -1,  260,   -1,   -1,  263,  264,  265,
   -1,   -1,   -1,   -1,  270,   -1,  272,  273,   -1,  275,
  276,  277,  257,  125,   -1,  260,  261,  262,  263,  264,
  265,   -1,   -1,   -1,   -1,  270,   -1,  272,  273,   -1,
  275,  276,  277,   -1,  125,  257,   -1,   -1,  260,  261,
  262,  263,  264,  265,   -1,   -1,   -1,   -1,  270,   -1,
  272,  273,   -1,  275,  276,  277,  256,  257,  125,   -1,
  260,   -1,   -1,  263,  264,  265,   -1,   -1,   -1,   -1,
  270,   -1,  272,  273,   -1,  275,  276,  277,  256,  257,
  125,   -1,  260,   -1,   -1,  263,  264,  265,   -1,   -1,
   -1,   -1,  270,   -1,  272,  273,   -1,  275,  276,  277,
   -1,  125,  256,  257,   -1,   -1,  260,   -1,   -1,  263,
  264,  265,   -1,   -1,   -1,   -1,  270,   -1,  272,  273,
   -1,  275,  276,  277,  257,  125,   -1,  260,   -1,   -1,
  263,  264,  265,   -1,   -1,   -1,   -1,  270,   -1,  272,
  273,   -1,  275,  276,  277,  257,  125,   -1,  260,   -1,
   -1,  263,  264,  265,   -1,   -1,   -1,   -1,  270,   -1,
  272,  273,   -1,  275,  276,  277,  257,  125,   -1,  260,
   -1,   -1,  263,  264,  265,   -1,   -1,   -1,   -1,  270,
   -1,  272,  273,   -1,  275,  276,  277,   -1,  125,   -1,
  257,   -1,   -1,  260,   -1,   -1,  263,  264,  265,   -1,
   -1,   -1,   -1,  270,   -1,  272,  273,   -1,  275,  276,
  277,  125,  257,   -1,   -1,  260,   -1,   -1,  263,  264,
  265,   -1,   -1,   -1,   -1,  270,   -1,  272,  273,   -1,
  275,  276,  277,  257,  125,   -1,  260,   -1,   -1,  263,
  264,  265,   -1,   -1,   -1,   -1,  270,   -1,  272,  273,
   -1,  275,  276,  277,   -1,  125,   -1,  257,   -1,   -1,
  260,   -1,   -1,  263,  264,  265,   -1,   -1,   -1,   -1,
  270,   -1,  272,  273,   -1,  275,  276,  277,  257,  125,
   -1,  260,   -1,   -1,  263,  264,  265,   -1,   -1,   -1,
   -1,  270,   -1,  272,  273,   -1,  275,  276,  277,  257,
  125,   -1,  260,   -1,   -1,  263,  264,  265,   -1,   -1,
   -1,   -1,  270,   -1,  272,  273,   -1,  275,  276,  277,
  257,  125,   -1,  260,   -1,   -1,  263,  264,  265,   -1,
   -1,   -1,   -1,  270,   -1,  272,  273,   -1,  275,  276,
  277,   -1,  125,  257,   -1,   -1,  260,   -1,   -1,  263,
  264,  265,   -1,   -1,   -1,   -1,  270,   -1,  272,  273,
   -1,  275,  276,  277,  125,   -1,  257,   -1,   -1,  260,
   -1,   -1,  263,  264,  265,   -1,   -1,   -1,   -1,  270,
   -1,  272,  273,   -1,  275,  276,  277,  257,  125,   -1,
  260,   -1,   -1,  263,  264,  265,   -1,   -1,   -1,   -1,
  270,   -1,  272,  273,   -1,  275,  276,  277,   -1,  125,
   -1,  257,   -1,   -1,  260,   -1,   -1,  263,  264,  265,
   -1,   -1,   -1,   -1,  270,   -1,  272,  273,   -1,  275,
  276,  277,  257,  125,   -1,  260,   -1,   -1,  263,  264,
  265,   -1,   -1,   -1,   -1,  270,   -1,  272,  273,   -1,
  275,  276,  277,  257,  125,   -1,  260,   -1,   -1,  263,
  264,  265,   -1,   -1,   -1,   -1,  270,   -1,  272,  273,
   -1,  275,  276,  277,  257,   -1,   -1,  260,   -1,   -1,
  263,  264,  265,   -1,   -1,   -1,   -1,  270,   -1,  272,
  273,   -1,  275,  276,  277,   -1,  257,   -1,   -1,  260,
   -1,   -1,  263,  264,  265,   -1,   -1,   -1,   -1,  270,
   -1,  272,  273,   -1,  275,  276,  277,   -1,   -1,   -1,
  257,   -1,   -1,  260,   -1,   -1,  263,  264,  265,   -1,
   -1,   -1,   -1,  270,   -1,  272,  273,   -1,  275,  276,
  277,  257,   -1,   -1,  260,   -1,   -1,  263,  264,  265,
   -1,   -1,   -1,   -1,  270,   -1,  272,  273,   -1,  275,
  276,  277,   -1,   -1,   -1,  257,   -1,   -1,  260,   -1,
   -1,  263,  264,  265,   -1,   -1,   -1,   -1,  270,   -1,
  272,  273,   -1,  275,  276,  277,  257,   -1,   -1,  260,
   -1,   -1,  263,  264,   -1,   -1,   -1,   -1,   -1,  270,
   -1,  272,  273,   -1,  275,  276,  277,  257,   -1,   -1,
  260,   -1,   -1,  263,  264,  265,   -1,   -1,   -1,   -1,
  270,   -1,  272,  273,   -1,  275,  276,  277,
};
}
final static short YYFINAL=14;
final static short YYMAXTOKEN=278;
final static String yyname[] = {
"end-of-file",null,null,null,null,null,null,null,null,null,null,null,null,null,
null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,
null,null,null,null,null,null,null,null,null,null,"'('","')'","'*'","'+'","','",
"'-'","'.'","'/'",null,null,null,null,null,null,null,null,null,null,null,"';'",
"'<'","'='","'>'",null,null,null,null,null,null,null,null,null,null,null,null,
null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,
null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,
null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,
"'{'",null,"'}'",null,null,null,null,null,null,null,null,null,null,null,null,
null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,
null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,
null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,
null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,
null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,
null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,
null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,
null,null,null,null,null,null,null,"ID","CTE","CADENA","IF","ELSE","ENDIF",
"PRINT","VOID","RETURN","COMP_MAYOR_IGUAL","COMP_MENOR_IGUAL","COMP_IGUAL",
"COMP_DISTINTO","CLASS","WHILE","DO","INTERFACE","IMPLEMENT","INT","ULONG",
"FLOAT","OPERADOR_MENOS",
};
final static String yyrule[] = {
"$accept : programa",
"programa : '{' sentencias '}'",
"programa : sentencias '}'",
"programa : '{' sentencias",
"programa : '{' '}'",
"programa :",
"sentencias : sentencia",
"sentencias : sentencias sentencia",
"sentencia : sentencia_declarativa",
"sentencia : sentencia_ejecutable",
"sentencia : error ','",
"sentencia_ejecutable : sentencia_asignacion",
"sentencia_ejecutable : sentencia_invocacion_funcion",
"sentencia_ejecutable : sentencia_imprimir",
"sentencia_ejecutable : sentencia_seleccion",
"sentencia_ejecutable : sentencia_iterativa_do_while",
"sentencia_ejecutable : sentencia_return",
"sentencias_funcion : sentencia_funcion",
"sentencias_funcion : sentencias_funcion sentencia_funcion",
"sentencia_funcion : sentencia_declarativa",
"sentencia_funcion : sentencia_ejecutable_funcion",
"sentencia_ejecutable_funcion : sentencia_asignacion",
"sentencia_ejecutable_funcion : sentencia_invocacion_funcion",
"sentencia_ejecutable_funcion : sentencia_imprimir",
"sentencia_ejecutable_funcion : sentencia_seleccion_funcion",
"sentencia_ejecutable_funcion : sentencia_iterativa_do_while_funcion",
"sentencia_return : RETURN ','",
"sentencia_return : RETURN",
"sentencia_iterativa_do_while : DO bloque_sentencias_ejecutables_while WHILE '(' condicion ')' ','",
"sentencia_iterativa_do_while : DO bloque_sentencias_ejecutables_while WHILE '(' condicion ')'",
"sentencia_iterativa_do_while : DO WHILE '(' condicion ')' ','",
"sentencia_iterativa_do_while : DO bloque_sentencias_ejecutables_while WHILE '(' ')' ','",
"sentencia_iterativa_do_while : DO bloque_sentencias_ejecutables_while '(' condicion ')' ','",
"sentencia_iterativa_do_while : DO WHILE ','",
"sentencia_iterativa_do_while : DO bloque_sentencias_ejecutables_while WHILE ','",
"sentencia_iterativa_do_while : DO ','",
"sentencia_iterativa_do_while : DO '(' condicion ')' ','",
"sentencia_iterativa_do_while : DO '(' ')' ','",
"sentencia_iterativa_do_while : DO '(' ')'",
"sentencia_iterativa_do_while_funcion : DO bloque_sentencias_ejecutables_funcion WHILE '(' condicion ')' ','",
"$$1 :",
"sentencia_iterativa_do_while_funcion : DO bloque_sentencias_ejecutables_funcion WHILE '(' condicion ')' $$1 DO WHILE '(' condicion ')' ','",
"sentencia_iterativa_do_while_funcion : DO bloque_sentencias_ejecutables_funcion WHILE '(' ')' ','",
"sentencia_iterativa_do_while_funcion : DO bloque_sentencias_ejecutables_funcion '(' condicion ')' ','",
"sentencia_iterativa_do_while_funcion : DO WHILE ','",
"sentencia_iterativa_do_while_funcion : DO bloque_sentencias_ejecutables_funcion WHILE ','",
"sentencia_iterativa_do_while_funcion : DO ','",
"sentencia_iterativa_do_while_funcion : DO '(' condicion ')' ','",
"sentencia_iterativa_do_while_funcion : DO '(' ')' ','",
"sentencia_iterativa_do_while_funcion : DO '(' ')'",
"sentencia_seleccion : IF '(' condicion ')' bloque_sentencias_ejecutables_then ELSE bloque_sentencias_ejecutables ENDIF ','",
"sentencia_seleccion : IF '(' condicion ')' bloque_sentencias_ejecutables_then ENDIF ','",
"sentencia_seleccion : IF '(' condicion ')' bloque_sentencias_ejecutables_then ELSE bloque_sentencias_ejecutables ENDIF",
"sentencia_seleccion : IF '(' condicion ')' bloque_sentencias_ejecutables_then ENDIF",
"sentencia_seleccion : IF '(' ')' bloque_sentencias_ejecutables_then ELSE bloque_sentencias_ejecutables ENDIF ','",
"sentencia_seleccion : IF '(' ')' bloque_sentencias_ejecutables_then ENDIF ','",
"sentencia_seleccion : IF '(' condicion ')' ELSE bloque_sentencias_ejecutables ENDIF ','",
"sentencia_seleccion : IF '(' condicion ')' bloque_sentencias_ejecutables_then ELSE ENDIF ','",
"sentencia_seleccion : IF '(' condicion ')' ENDIF ','",
"sentencia_seleccion_funcion : IF '(' condicion ')' bloque_sentencias_ejecutables_funcion ELSE bloque_sentencias_ejecutables_funcion ENDIF ','",
"sentencia_seleccion_funcion : IF '(' condicion ')' bloque_sentencias_ejecutables_funcion ENDIF ','",
"sentencia_seleccion_funcion : IF '(' condicion ')' bloque_sentencias_ejecutables_funcion ELSE bloque_sentencias_ejecutables_funcion ENDIF",
"$$2 :",
"sentencia_seleccion_funcion : IF '(' condicion ')' bloque_sentencias_ejecutables_funcion ENDIF $$2 IF '(' ')' bloque_sentencias_ejecutables_funcion ELSE bloque_sentencias_ejecutables_funcion ENDIF ','",
"sentencia_seleccion_funcion : IF '(' ')' bloque_sentencias_ejecutables_funcion ENDIF ','",
"sentencia_seleccion_funcion : IF '(' condicion ')' ELSE bloque_sentencias_ejecutables_funcion ENDIF ','",
"sentencia_seleccion_funcion : IF '(' condicion ')' bloque_sentencias_ejecutables_funcion ELSE ENDIF ','",
"sentencia_seleccion_funcion : IF '(' condicion ')' ENDIF ','",
"bloque_sentencias_ejecutables_then : sentencia_ejecutable",
"bloque_sentencias_ejecutables_then : '{' sentencias_ejecutables '}'",
"bloque_sentencias_ejecutables_then : '{' sentencias_ejecutables",
"bloque_sentencias_ejecutables_then : sentencias_ejecutables '}'",
"bloque_sentencias_ejecutables_then : '{' '}'",
"bloque_sentencias_ejecutables_then : sentencia_declarativa",
"bloque_sentencias_ejecutables_while : '{' primer_sentencia '}'",
"bloque_sentencias_ejecutables_while : '{' primer_sentencia sentencias_ejecutables '}'",
"bloque_sentencias_ejecutables_while : '{' primer_sentencia sentencias_ejecutables",
"bloque_sentencias_ejecutables_while : primer_sentencia sentencias_ejecutables '}'",
"bloque_sentencias_ejecutables_while : '{' '}'",
"bloque_sentencias_ejecutables_while : sentencia_declarativa",
"primer_sentencia : sentencia_ejecutable",
"bloque_sentencias_ejecutables : sentencia_ejecutable",
"bloque_sentencias_ejecutables : '{' sentencia_ejecutable sentencias_ejecutables '}'",
"bloque_sentencias_ejecutables : '{' sentencia_ejecutable sentencias_ejecutables",
"bloque_sentencias_ejecutables : sentencia_ejecutable sentencias_ejecutables '}'",
"bloque_sentencias_ejecutables : '{' '}'",
"bloque_sentencias_ejecutables : sentencia_declarativa",
"bloque_sentencias_ejecutables_funcion : sentencia_ejecutable_funcion",
"bloque_sentencias_ejecutables_funcion : sentencia_return",
"bloque_sentencias_ejecutables_funcion : sentencia_declarativa",
"bloque_sentencias_ejecutables_funcion : '{' sentencias_ejecutables_funcion '}'",
"bloque_sentencias_ejecutables_funcion : '{' sentencias_ejecutables_funcion sentencia_return '}'",
"bloque_sentencias_ejecutables_funcion : '{' sentencias_ejecutables_funcion sentencia_return sentencias_ejecutables_funcion_inalcanzable '}'",
"bloque_sentencias_ejecutables_funcion : sentencias_ejecutables_funcion '}'",
"bloque_sentencias_ejecutables_funcion : sentencias_ejecutables_funcion sentencia_return '}'",
"bloque_sentencias_ejecutables_funcion : '{' sentencias_ejecutables_funcion",
"bloque_sentencias_ejecutables_funcion : '{' sentencias_ejecutables_funcion sentencia_return",
"bloque_sentencias_ejecutables_funcion : '{' '}'",
"sentencias_ejecutables_funcion_inalcanzable : sentencia_ejecutable_funcion_inalcanzable",
"sentencias_ejecutables_funcion_inalcanzable : sentencias_ejecutables_funcion_inalcanzable sentencia_ejecutable_funcion_inalcanzable",
"sentencia_ejecutable_funcion_inalcanzable : sentencia_return",
"sentencia_ejecutable_funcion_inalcanzable : sentencia_ejecutable_funcion",
"sentencias_ejecutables : sentencia_ejecutable",
"sentencias_ejecutables : sentencias_ejecutables sentencia_ejecutable",
"sentencias_ejecutables : sentencia_declarativa",
"sentencias_ejecutables : sentencias_ejecutables sentencia_declarativa",
"sentencias_ejecutables_funcion : sentencia_ejecutable_funcion",
"sentencias_ejecutables_funcion : sentencias_ejecutables_funcion sentencia_ejecutable_funcion",
"sentencias_ejecutables_funcion : sentencia_declarativa",
"sentencias_ejecutables_funcion : sentencias_ejecutables_funcion sentencia_declarativa",
"sentencia_imprimir : PRINT CADENA ','",
"sentencia_imprimir : PRINT CADENA",
"sentencia_imprimir : PRINT ','",
"sentencia_imprimir : PRINT ID ','",
"sentencia_imprimir : PRINT ID",
"sentencia_imprimir : PRINT constante ','",
"sentencia_imprimir : PRINT constante",
"sentencia_invocacion_funcion : sentencia_objeto_identificador '(' expresion ')' ','",
"sentencia_invocacion_funcion : sentencia_objeto_identificador '(' ')' ','",
"sentencia_invocacion_funcion : sentencia_objeto_identificador '(' expresion ',' lista_expresiones_invocacion_funcion_exceso ')' ','",
"sentencia_invocacion_funcion : sentencia_objeto_identificador '(' expresion ')'",
"sentencia_invocacion_funcion : sentencia_objeto_identificador '(' ')'",
"sentencia_invocacion_funcion : sentencia_objeto_identificador '(' expresion ',' lista_expresiones_invocacion_funcion_exceso ')'",
"lista_expresiones_invocacion_funcion_exceso : expresion",
"lista_expresiones_invocacion_funcion_exceso : lista_expresiones_invocacion_funcion_exceso ',' expresion",
"sentencia_asignacion : sentencia_objeto_identificador '=' expresion ','",
"sentencia_asignacion : sentencia_objeto_identificador '=' expresion",
"sentencia_asignacion : sentencia_objeto_identificador '=' ','",
"sentencia_objeto_identificador : ID",
"sentencia_objeto_identificador : sentencia_objeto_identificador '.' ID",
"sentencia_declarativa : declaracion_variable",
"sentencia_declarativa : declaracion_funcion",
"sentencia_declarativa : declaracion_clase",
"sentencia_declarativa : declaracion_interfaz",
"declaracion_variable : tipo lista_de_variables ','",
"declaracion_variable : tipo lista_de_variables",
"declaracion_variable : tipo ','",
"declaracion_interfaz_encabezado : INTERFACE ID",
"declaracion_interfaz_encabezado : INTERFACE",
"declaracion_interfaz : declaracion_interfaz_encabezado '{' bloque_encabezado_funcion_declaracion_interfaz '}'",
"declaracion_interfaz : declaracion_interfaz_encabezado '}'",
"bloque_encabezado_funcion_declaracion_interfaz : encabezado_funcion_declaracion_interfaz",
"bloque_encabezado_funcion_declaracion_interfaz : bloque_encabezado_funcion_declaracion_interfaz encabezado_funcion_declaracion_interfaz",
"encabezado_funcion_declaracion_interfaz : encabezado_funcion_interfaz ','",
"encabezado_funcion_declaracion_interfaz : encabezado_funcion_interfaz",
"sentencia_declarativa_clase : tipo lista_de_variables ','",
"sentencia_declarativa_clase : tipo lista_de_variables",
"sentencia_declarativa_clase : declaracion_funcion",
"sentencia_declarativa_clase : declaracion_funcion ','",
"sentencia_declarativa_clase : ID ','",
"declaracion_clase_encabezado : CLASS ID",
"declaracion_clase_encabezado : CLASS ID IMPLEMENT ID",
"declaracion_clase_encabezado : CLASS",
"declaracion_clase_encabezado : CLASS IMPLEMENT ID",
"declaracion_clase_encabezado : CLASS ID IMPLEMENT",
"declaracion_clase_encabezado : CLASS IMPLEMENT",
"declaracion_clase : declaracion_clase_encabezado '{' bloque_sentencias_declarativas_clase '}'",
"bloque_sentencias_declarativas_clase : sentencia_declarativa_clase",
"bloque_sentencias_declarativas_clase : bloque_sentencias_declarativas_clase sentencia_declarativa_clase",
"declaracion_funcion : encabezado_funcion cuerpo_funcion",
"encabezado_funcion : encabezado_funcion_nombre '(' parametro_funcion ')'",
"encabezado_funcion : encabezado_funcion_nombre '(' ')'",
"encabezado_funcion : encabezado_funcion_nombre '(' parametro_funcion ',' lista_parametros_funcion_exceso ')'",
"encabezado_funcion : encabezado_funcion_nombre '(' parametro_funcion lista_parametros_funcion_exceso ')'",
"encabezado_funcion : encabezado_funcion_nombre ')'",
"encabezado_funcion_nombre : VOID ID",
"encabezado_funcion_nombre : VOID",
"encabezado_funcion_interfaz : VOID ID '(' parametro_funcion ')'",
"encabezado_funcion_interfaz : VOID ID '(' ')'",
"encabezado_funcion_interfaz : VOID ID '(' parametro_funcion ',' lista_parametros_funcion_exceso ')'",
"encabezado_funcion_interfaz : VOID ID '(' parametro_funcion lista_parametros_funcion_exceso ')'",
"encabezado_funcion_interfaz : VOID '(' parametro_funcion ')'",
"encabezado_funcion_interfaz : VOID '(' ')'",
"encabezado_funcion_interfaz : VOID ID parametro_funcion ')'",
"encabezado_funcion_interfaz : VOID ID ')'",
"cuerpo_funcion : '{' sentencias_funcion sentencia_return '}'",
"cuerpo_funcion : '{' sentencia_return '}'",
"cuerpo_funcion : '{' sentencias_funcion sentencia_return sentencias_funcion_inalcanzable '}'",
"cuerpo_funcion : '{' sentencia_return sentencias_funcion_inalcanzable '}'",
"cuerpo_funcion : '{' sentencias_funcion '}'",
"cuerpo_funcion : '{' '}'",
"cuerpo_funcion : sentencias_funcion sentencia_return '}'",
"cuerpo_funcion : sentencia_return '}'",
"cuerpo_funcion : sentencias_funcion sentencia_return sentencias_funcion_inalcanzable '}'",
"cuerpo_funcion : sentencia_return sentencias_funcion_inalcanzable '}'",
"cuerpo_funcion : sentencias_funcion '}'",
"cuerpo_funcion : '}'",
"sentencias_funcion_inalcanzable : sentencia_funcion_inalcanzable",
"sentencias_funcion_inalcanzable : sentencias_funcion_inalcanzable sentencia_funcion_inalcanzable",
"sentencia_funcion_inalcanzable : sentencia_declarativa",
"sentencia_funcion_inalcanzable : sentencia_return",
"sentencia_funcion_inalcanzable : sentencia_ejecutable_funcion",
"lista_parametros_funcion_exceso : parametro_funcion",
"lista_parametros_funcion_exceso : lista_parametros_funcion_exceso ',' parametro_funcion",
"lista_parametros_funcion_exceso : lista_parametros_funcion_exceso parametro_funcion",
"parametro_funcion : tipo ID",
"lista_de_variables : ID",
"lista_de_variables : lista_de_variables ';' ID",
"tipo : INT",
"tipo : ULONG",
"tipo : FLOAT",
"tipo : ID",
"condicion : expresion comparador expresion",
"condicion : expresion comparador",
"condicion : comparador expresion",
"condicion : expresion '=' expresion",
"comparador : COMP_MAYOR_IGUAL",
"comparador : COMP_MENOR_IGUAL",
"comparador : COMP_IGUAL",
"comparador : COMP_DISTINTO",
"comparador : '>'",
"comparador : '<'",
"expresion : expresion '+' termino",
"expresion : expresion '-' termino",
"expresion : termino",
"termino : termino '*' factor",
"termino : termino '/' factor",
"termino : factor",
"factor : ID",
"factor : ID OPERADOR_MENOS",
"factor : constante",
"factor : '(' expresion ')'",
"constante : CTE",
"constante : '-' CTE",
};

//#line 663 "./src/compilador/gramatica.y"

public static AnalizadorLexico lexico = null;
public static GeneracionCodigoIntermedio genCodigoIntermedio = GeneracionCodigoIntermedio.getInstance();
public static Logger logger = Logger.getInstance();
public static TablaDeSimbolos ts = TablaDeSimbolos.getInstance();
public static Parser parser = null;
public static int MAX_INT_VALUE = (int) (Math.pow(2, 15) - 1);

/** Chequea, para los INT, que el valor positivo no supere el valor maximo */
public void corregirConstantePositivaEntera(String constante) {
	if (constante.contains("_i")) {
		//se recibio un INT con signo positivo
		boolean exceptionOutOfRange = false;
		int cte = 0;
		String constanteValue = constante.toString().split("_")[0];

		try {
			cte = Integer.parseInt(constanteValue);
		} catch (NumberFormatException e) {
			exceptionOutOfRange = true;
		}

		if (cte > MAX_INT_VALUE || exceptionOutOfRange) {
			logger.logWarning("[Parser] Rango invalido para la constante: " + constante + ", se trunca al valor " + MAX_INT_VALUE + "_i");

			ts.swapLexemas(constante, MAX_INT_VALUE + "_i");
		}
	}
}

public void constanteConSigno(String constante) {
	/** Check de float negativos */
	if (constante.contains(".")) {
		String negConstante = "-"+constante;
		ts.swapLexemas(constante, negConstante);
	} else {

		if (constante.contains("_ul")) {
			//se recibio un ULONG con signo negativo
			logger.logWarning("[Parser] No se admiten ULONG con valores negativos: " + "-"+constante + ", se trunca a 0_ul");
		
			ts.swapLexemas(constante, "0_ul");
		} else {
			// se recibio un INT negativo
			String negConstante = "-"+constante;
			ts.swapLexemas(constante, negConstante);
		}
	}
}	

public int yylex() {
	return lexico.yylex(parser);
}

public void yyerror(String error) {
	logger.logError(error);
}

public static void main(String[] args) {
	if (args.length == 0) {
		System.err.println("No se especifico ningun archivo de codigo");
	} else {
		String archivo_a_leer = args[0];
		System.out.println("Se va a leer archivo " + archivo_a_leer);
		
		FileReaderHelper fileHelper = new FileReaderHelper();
		
		boolean fileOpenSuccess = fileHelper.open(archivo_a_leer);
		
		if (fileOpenSuccess) {
			parser = new Parser();
			lexico = new AnalizadorLexico(fileHelper);
			
	        parser.run();
	
			String path = new File(archivo_a_leer).getAbsolutePath();
	        
	        Output out = new Output(path);
	        
	        out.saveFile("codigo-lexico.txt", logger.getLexico());
			out.saveFile("codigo-sintactico.txt", logger.getSintactico());
			out.saveFile("tabla-de-simbolos.txt", ts.print());

			genCodigoIntermedio.showPolaca();
		}
	}
}
//#line 1101 "Parser.java"
//###############################################################
// method: yylexdebug : check lexer state
//###############################################################
void yylexdebug(int state,int ch)
{
String s=null;
  if (ch < 0) ch=0;
  if (ch <= YYMAXTOKEN) //check index bounds
     s = yyname[ch];    //now get it
  if (s==null)
    s = "illegal-symbol";
  debug("state "+state+", reading "+ch+" ("+s+")");
}





//The following are now global, to aid in error reporting
int yyn;       //next next thing to do
int yym;       //
int yystate;   //current parsing state from state table
String yys;    //current token string


//###############################################################
// method: yyparse : parse input and execute indicated items
//###############################################################
int yyparse()
{
boolean doaction;
  init_stacks();
  yynerrs = 0;
  yyerrflag = 0;
  yychar = -1;          //impossible char forces a read
  yystate=0;            //initial state
  state_push(yystate);  //save it
  val_push(yylval);     //save empty value
  while (true) //until parsing is done, either correctly, or w/error
    {
    doaction=true;
    if (yydebug) debug("loop"); 
    //#### NEXT ACTION (from reduction table)
    for (yyn=yydefred[yystate];yyn==0;yyn=yydefred[yystate])
      {
      if (yydebug) debug("yyn:"+yyn+"  state:"+yystate+"  yychar:"+yychar);
      if (yychar < 0)      //we want a char?
        {
        yychar = yylex();  //get next token
        if (yydebug) debug(" next yychar:"+yychar);
        //#### ERROR CHECK ####
        if (yychar < 0)    //it it didn't work/error
          {
          yychar = 0;      //change it to default string (no -1!)
          if (yydebug)
            yylexdebug(yystate,yychar);
          }
        }//yychar<0
      yyn = yysindex[yystate];  //get amount to shift by (shift index)
      if ((yyn != 0) && (yyn += yychar) >= 0 &&
          yyn <= YYTABLESIZE && yycheck[yyn] == yychar)
        {
        if (yydebug)
          debug("state "+yystate+", shifting to state "+yytable[yyn]);
        //#### NEXT STATE ####
        yystate = yytable[yyn];//we are in a new state
        state_push(yystate);   //save it
        val_push(yylval);      //push our lval as the input for next rule
        yychar = -1;           //since we have 'eaten' a token, say we need another
        if (yyerrflag > 0)     //have we recovered an error?
           --yyerrflag;        //give ourselves credit
        doaction=false;        //but don't process yet
        break;   //quit the yyn=0 loop
        }

    yyn = yyrindex[yystate];  //reduce
    if ((yyn !=0 ) && (yyn += yychar) >= 0 &&
            yyn <= YYTABLESIZE && yycheck[yyn] == yychar)
      {   //we reduced!
      if (yydebug) debug("reduce");
      yyn = yytable[yyn];
      doaction=true; //get ready to execute
      break;         //drop down to actions
      }
    else //ERROR RECOVERY
      {
      if (yyerrflag==0)
        {
        yyerror("syntax error");
        yynerrs++;
        }
      if (yyerrflag < 3) //low error count?
        {
        yyerrflag = 3;
        while (true)   //do until break
          {
          if (stateptr<0)   //check for under & overflow here
            {
            yyerror("stack underflow. aborting...");  //note lower case 's'
            return 1;
            }
          yyn = yysindex[state_peek(0)];
          if ((yyn != 0) && (yyn += YYERRCODE) >= 0 &&
                    yyn <= YYTABLESIZE && yycheck[yyn] == YYERRCODE)
            {
            if (yydebug)
              debug("state "+state_peek(0)+", error recovery shifting to state "+yytable[yyn]+" ");
            yystate = yytable[yyn];
            state_push(yystate);
            val_push(yylval);
            doaction=false;
            break;
            }
          else
            {
            if (yydebug)
              debug("error recovery discarding state "+state_peek(0)+" ");
            if (stateptr<0)   //check for under & overflow here
              {
              yyerror("Stack underflow. aborting...");  //capital 'S'
              return 1;
              }
            state_pop();
            val_pop();
            }
          }
        }
      else            //discard this token
        {
        if (yychar == 0)
          return 1; //yyabort
        if (yydebug)
          {
          yys = null;
          if (yychar <= YYMAXTOKEN) yys = yyname[yychar];
          if (yys == null) yys = "illegal-symbol";
          debug("state "+yystate+", error recovery discards token "+yychar+" ("+yys+")");
          }
        yychar = -1;  //read another
        }
      }//end error recovery
    }//yyn=0 loop
    if (!doaction)   //any reason not to proceed?
      continue;      //skip action
    yym = yylen[yyn];          //get count of terminals on rhs
    if (yydebug)
      debug("state "+yystate+", reducing "+yym+" by rule "+yyn+" ("+yyrule[yyn]+")");
    if (yym>0)                 //if count of rhs not 'nil'
      yyval = val_peek(yym-1); //get current semantic value
    yyval = dup_yyval(yyval); //duplicate yyval if ParserVal is used as semantic value
    switch(yyn)
      {
//########## USER-SUPPLIED ACTIONS ##########
case 1:
//#line 17 "./src/compilador/gramatica.y"
{ logger.logSuccess("[Parser] Programa correcto detectado"); }
break;
case 2:
//#line 18 "./src/compilador/gramatica.y"
{ logger.logError("[Parser] Se esperaba simbolo '{' al principio del programa"); }
break;
case 3:
//#line 19 "./src/compilador/gramatica.y"
{ logger.logError("[Parser] Se esperaba simbolo '}' al final del programa"); }
break;
case 4:
//#line 20 "./src/compilador/gramatica.y"
{ logger.logError("[Parser] Programa vacio"); }
break;
case 5:
//#line 21 "./src/compilador/gramatica.y"
{ logger.logError("[Parser] Programa vacio"); }
break;
case 9:
//#line 31 "./src/compilador/gramatica.y"
{ genCodigoIntermedio.resetContador(); }
break;
case 10:
//#line 32 "./src/compilador/gramatica.y"
{ logger.logError("[Parser] Error de sintaxis en la sentencia"); }
break;
case 16:
//#line 41 "./src/compilador/gramatica.y"
{ logger.logError("[Parser] Sentencia RETURN fuera de funcion"); }
break;
case 27:
//#line 64 "./src/compilador/gramatica.y"
{ logger.logError("[Parser] Se esperaba un simbolo ',' luego del RETURN"); }
break;
case 28:
//#line 68 "./src/compilador/gramatica.y"
{ 
		logger.logSuccess("[Parser] Sentencia iterativa DO WHILE detectada"); 
		genCodigoIntermedio.generarPasoIncompleto("BI");
		genCodigoIntermedio.completarPasoIncompleto();
		genCodigoIntermedio.completarPasoIncompletoIteracion();
		}
break;
case 29:
//#line 74 "./src/compilador/gramatica.y"
{ logger.logError("[Parser] Se esperaba ',' luego de sentencia DO WHILE"); }
break;
case 30:
//#line 75 "./src/compilador/gramatica.y"
{ logger.logError("[Parser] Se esperaban sentencias ejecutables en sentencia DO WHILE"); }
break;
case 31:
//#line 76 "./src/compilador/gramatica.y"
{ logger.logError("[Parser] Se esperaba condicion en sentencia DO WHILE"); }
break;
case 32:
//#line 77 "./src/compilador/gramatica.y"
{ logger.logError("[Parser] Se esperaba WHILE en sentencia DO WHILE"); }
break;
case 33:
//#line 78 "./src/compilador/gramatica.y"
{ logger.logError("[Parser] Se esperaban sentencias ejecutables en sentencia DO WHILE"); }
break;
case 34:
//#line 79 "./src/compilador/gramatica.y"
{ logger.logError("[Parser] Se esperaba condicion en sentencia DO WHILE"); }
break;
case 35:
//#line 80 "./src/compilador/gramatica.y"
{ logger.logError("[Parser] Se esperaban sentencias ejecutables en sentencia DO WHILE"); }
break;
case 36:
//#line 81 "./src/compilador/gramatica.y"
{ logger.logError("[Parser] Se esperaban sentencias ejecutables en sentencia DO WHILE"); }
break;
case 37:
//#line 82 "./src/compilador/gramatica.y"
{ logger.logError("[Parser] Se esperaban sentencias ejecutables en sentencia DO WHILE"); }
break;
case 38:
//#line 83 "./src/compilador/gramatica.y"
{ logger.logError("[Parser] Se esperaban sentencias ejecutables en sentencia DO WHILE"); }
break;
case 39:
//#line 87 "./src/compilador/gramatica.y"
{ logger.logSuccess("[Parser] Sentencia iterativa DO WHILE detectada"); }
break;
case 40:
//#line 88 "./src/compilador/gramatica.y"
{ logger.logError("[Parser] Se esperaba ',' luego de sentencia DO WHILE"); }
break;
case 41:
//#line 89 "./src/compilador/gramatica.y"
{ logger.logError("[Parser] Se esperaban sentencias ejecutables en sentencia DO WHILE"); }
break;
case 42:
//#line 90 "./src/compilador/gramatica.y"
{ logger.logError("[Parser] Se esperaba condicion en sentencia DO WHILE"); }
break;
case 43:
//#line 91 "./src/compilador/gramatica.y"
{ logger.logError("[Parser] Se esperaba WHILE en sentencia DO WHILE"); }
break;
case 44:
//#line 92 "./src/compilador/gramatica.y"
{ logger.logError("[Parser] Se esperaban sentencias ejecutables en sentencia DO WHILE"); }
break;
case 45:
//#line 93 "./src/compilador/gramatica.y"
{ logger.logError("[Parser] Se esperaba condicion en sentencia DO WHILE"); }
break;
case 46:
//#line 94 "./src/compilador/gramatica.y"
{ logger.logError("[Parser] Se esperaban sentencias ejecutables en sentencia DO WHILE"); }
break;
case 47:
//#line 95 "./src/compilador/gramatica.y"
{ logger.logError("[Parser] Se esperaban sentencias ejecutables en sentencia DO WHILE"); }
break;
case 48:
//#line 96 "./src/compilador/gramatica.y"
{ logger.logError("[Parser] Se esperaban sentencias ejecutables en sentencia DO WHILE"); }
break;
case 49:
//#line 97 "./src/compilador/gramatica.y"
{ logger.logError("[Parser] Se esperaban sentencias ejecutables en sentencia DO WHILE"); }
break;
case 50:
//#line 101 "./src/compilador/gramatica.y"
{ 
		logger.logSuccess("[Parser] Sentencia seleccion IF ELSE detectada"); 
		genCodigoIntermedio.completarPasoIncompleto();
	}
break;
case 51:
//#line 105 "./src/compilador/gramatica.y"
{ 
		logger.logSuccess("[Parser] Sentencia seleccion IF sin ELSE detectada"); 
		genCodigoIntermedio.completarPasoIncompleto(); /* ESTA BIEN QUE APAREZCA BIFURCACION INCONDICIONAL ACA?*/
	}
break;
case 52:
//#line 109 "./src/compilador/gramatica.y"
{ logger.logError("[Parser] Se esperaba ',' luego de sentencia IF ELSE"); }
break;
case 53:
//#line 110 "./src/compilador/gramatica.y"
{ logger.logError("[Parser] Se esperaba ',' luego de sentencia IF sin ELSE"); }
break;
case 54:
//#line 111 "./src/compilador/gramatica.y"
{ logger.logError("[Parser] Se esperaba condicion en sentencia IF ELSE"); }
break;
case 55:
//#line 112 "./src/compilador/gramatica.y"
{ logger.logError("[Parser] Se esperaba condicion en sentencia IF"); }
break;
case 56:
//#line 113 "./src/compilador/gramatica.y"
{ logger.logError("[Parser] Se esperaban sentencias ejecutables en sentencia IF ELSE"); }
break;
case 57:
//#line 114 "./src/compilador/gramatica.y"
{ logger.logError("[Parser] Se esperaban sentencias ejecutables en sentencia IF ELSE"); }
break;
case 58:
//#line 115 "./src/compilador/gramatica.y"
{ logger.logError("[Parser] Se esperaban sentencias ejecutables en sentencia IF"); }
break;
case 59:
//#line 119 "./src/compilador/gramatica.y"
{ logger.logSuccess("[Parser] Sentencia seleccion IF ELSE detectada"); }
break;
case 60:
//#line 120 "./src/compilador/gramatica.y"
{ logger.logSuccess("[Parser] Sentencia seleccion IF sin ELSE detectada"); }
break;
case 61:
//#line 121 "./src/compilador/gramatica.y"
{ logger.logError("[Parser] Se esperaba ',' luego de sentencia IF ELSE"); }
break;
case 62:
//#line 122 "./src/compilador/gramatica.y"
{ logger.logError("[Parser] Se esperaba ',' luego de sentencia IF sin ELSE"); }
break;
case 63:
//#line 123 "./src/compilador/gramatica.y"
{ logger.logError("[Parser] Se esperaba condicion en sentencia IF ELSE"); }
break;
case 64:
//#line 124 "./src/compilador/gramatica.y"
{ logger.logError("[Parser] Se esperaba condicion en sentencia IF"); }
break;
case 65:
//#line 125 "./src/compilador/gramatica.y"
{ logger.logError("[Parser] Se esperaban sentencias ejecutables en sentencia IF ELSE"); }
break;
case 66:
//#line 126 "./src/compilador/gramatica.y"
{ logger.logError("[Parser] Se esperaban sentencias ejecutables en sentencia IF ELSE"); }
break;
case 67:
//#line 127 "./src/compilador/gramatica.y"
{ logger.logError("[Parser] Se esperaban sentencias ejecutables en sentencia IF"); }
break;
case 68:
//#line 131 "./src/compilador/gramatica.y"
{
		/* EN LAS FILMINAS ESTA INVERTIDO ... */
		genCodigoIntermedio.generarPasoIncompleto("BI");
		genCodigoIntermedio.completarPasoIncompleto();
		genCodigoIntermedio.apilar(genCodigoIntermedio.polacaSize() - 1);
	}
break;
case 69:
//#line 137 "./src/compilador/gramatica.y"
{
		genCodigoIntermedio.generarPasoIncompleto("BI");
		genCodigoIntermedio.completarPasoIncompleto();
		genCodigoIntermedio.apilar(genCodigoIntermedio.polacaSize() - 1);
	}
break;
case 70:
//#line 142 "./src/compilador/gramatica.y"
{ logger.logError("[Parser] Se esperaban un simbolo '}' en el bloque"); }
break;
case 71:
//#line 143 "./src/compilador/gramatica.y"
{ logger.logError("[Parser] Se esperaban un simbolo '{' en el bloque"); }
break;
case 72:
//#line 144 "./src/compilador/gramatica.y"
{ logger.logError("[Parser] Se esperaban sentencias ejecutables dentro del bloque"); }
break;
case 73:
//#line 145 "./src/compilador/gramatica.y"
{ logger.logError("[Parser] No se permiten declaraciones de variables dentro de bloque de sentencias ejecutables"); }
break;
case 76:
//#line 151 "./src/compilador/gramatica.y"
{ logger.logError("[Parser] Se esperaban un simbolo '}' en el bloque"); }
break;
case 77:
//#line 152 "./src/compilador/gramatica.y"
{ logger.logError("[Parser] Se esperaban un simbolo '{' en el bloque"); }
break;
case 78:
//#line 153 "./src/compilador/gramatica.y"
{ logger.logError("[Parser] Se esperaban sentencias ejecutables dentro del bloque"); }
break;
case 79:
//#line 154 "./src/compilador/gramatica.y"
{ logger.logError("[Parser] No se permiten declaraciones de variables dentro de bloque de sentencias ejecutables"); }
break;
case 80:
//#line 158 "./src/compilador/gramatica.y"
{
		genCodigoIntermedio.apilar(genCodigoIntermedio.polacaSize() - genCodigoIntermedio.getContador() + 1);
		genCodigoIntermedio.resetContador();
	}
break;
case 83:
//#line 166 "./src/compilador/gramatica.y"
{ logger.logError("[Parser] Se esperaban un simbolo '}' en el bloque"); }
break;
case 84:
//#line 167 "./src/compilador/gramatica.y"
{ logger.logError("[Parser] Se esperaban un simbolo '{' en el bloque"); }
break;
case 85:
//#line 168 "./src/compilador/gramatica.y"
{ logger.logError("[Parser] Se esperaban sentencias ejecutables dentro del bloque"); }
break;
case 86:
//#line 169 "./src/compilador/gramatica.y"
{ logger.logError("[Parser] No se permiten declaraciones de variables dentro de bloque de sentencias ejecutables"); }
break;
case 89:
//#line 175 "./src/compilador/gramatica.y"
{ logger.logError("[Parser] No se permiten declaraciones de variables dentro de bloque de sentencias ejecutables"); }
break;
case 93:
//#line 179 "./src/compilador/gramatica.y"
{ logger.logError("[Parser] Se esperaban un simbolo '{' en el bloque"); }
break;
case 94:
//#line 180 "./src/compilador/gramatica.y"
{ logger.logError("[Parser] Se esperaban un simbolo '{' en el bloque"); }
break;
case 95:
//#line 181 "./src/compilador/gramatica.y"
{ logger.logError("[Parser] Se esperaban un simbolo '}' en el bloque"); }
break;
case 96:
//#line 182 "./src/compilador/gramatica.y"
{ logger.logError("[Parser] Se esperaban un simbolo '}' en el bloque"); }
break;
case 97:
//#line 183 "./src/compilador/gramatica.y"
{ logger.logError("[Parser] Se esperaban sentencias ejecutables en bloque de sentencias ejecutables"); }
break;
case 98:
//#line 187 "./src/compilador/gramatica.y"
{ logger.logError("[Parser] Codigo inalcanzable luego del RETURN, se ignorara"); }
break;
case 99:
//#line 188 "./src/compilador/gramatica.y"
{ logger.logError("[Parser] Codigo inalcanzable luego del RETURN, se ignorara"); }
break;
case 102:
//#line 197 "./src/compilador/gramatica.y"
{ genCodigoIntermedio.resetContador(); }
break;
case 104:
//#line 199 "./src/compilador/gramatica.y"
{ logger.logError("[Parser] No se aceptan declaraciones de variables en sentencias ejecutables"); }
break;
case 105:
//#line 200 "./src/compilador/gramatica.y"
{ logger.logError("[Parser] No se aceptan declaraciones de variables en sentencias ejecutables"); }
break;
case 108:
//#line 206 "./src/compilador/gramatica.y"
{ logger.logError("[Parser] No se aceptan declaraciones de variables en sentencias ejecutables"); }
break;
case 109:
//#line 207 "./src/compilador/gramatica.y"
{ logger.logError("[Parser] No se aceptan declaraciones de variables en sentencias ejecutables"); }
break;
case 110:
//#line 211 "./src/compilador/gramatica.y"
{ logger.logSuccess("[Parser] Sentencia PRINT detectada"); }
break;
case 111:
//#line 212 "./src/compilador/gramatica.y"
{ logger.logError("[Parser] Se esperaba un simbolo ',' en Sentencia PRINT"); }
break;
case 112:
//#line 213 "./src/compilador/gramatica.y"
{ logger.logError("[Parser] Se esperaba CADENA en Sentencia PRINT"); }
break;
case 113:
//#line 214 "./src/compilador/gramatica.y"
{ logger.logError("[Parser] Se esperaba una CADENA y se encontro un IDENTIFICADOR en sentencia PRINT"); }
break;
case 114:
//#line 215 "./src/compilador/gramatica.y"
{ logger.logError("[Parser] Se esperaba un simbolo ',' en sentencia PRINT"); }
break;
case 115:
//#line 216 "./src/compilador/gramatica.y"
{ logger.logError("[Parser] Se esperaba una CADENA y se encontro una constante en sentencia PRINT"); }
break;
case 116:
//#line 217 "./src/compilador/gramatica.y"
{ logger.logError("[Parser] Se esperaba un simbolo ',' en sentencia PRINT"); }
break;
case 117:
//#line 222 "./src/compilador/gramatica.y"
{ 

		if (val_peek(4).sval.contains(".")) {

			String[] splittedIdentificador = val_peek(4).sval.split("\\.");
			String nombreVariable = splittedIdentificador[0];
			String nombreMiembro = splittedIdentificador[1];

			if (!genCodigoIntermedio.existeIdentificadorEnAlgunAmbitoContenedor(nombreVariable).equals("")){

				String tipoInstancia = genCodigoIntermedio.tipoInstanceDeClase(nombreVariable);

				if (genCodigoIntermedio.perteneceMiembroAClase(nombreMiembro, tipoInstancia)) {
					if (genCodigoIntermedio.verificarParametrosDeMetodo(nombreMiembro + ":" + tipoInstancia)){
						logger.logSuccess("[Codigo Intermedio] El identificador " + nombreMiembro + " esta declarado dentro de la clase " + tipoInstancia);
					} else {
						logger.logError("[Codigo Intermedio] Cantidad de parametros incorrecta");
					}
				} else {
					logger.logError("[Codigo Intermedio] El identificador " + nombreMiembro + " no esta declarado dentro de la clase " + tipoInstancia);
				}
			}
		} else {
			if (!genCodigoIntermedio.existeIdentificadorEnAlgunAmbitoContenedor(val_peek(4).sval).equals("")){
				if (!genCodigoIntermedio.verificarParametros(val_peek(4).sval)){
					logger.logError("Cantidad de parametros incorrecta");
				}
			}
		}
	}
break;
case 118:
//#line 252 "./src/compilador/gramatica.y"
{ 
		logger.logSuccess("[Parser] Invocacion de funcion sin expresion detectada");

		if (val_peek(3).sval.contains(".")) {

			String[] splittedIdentificador = val_peek(3).sval.split("\\.");
			String nombreVariable = splittedIdentificador[0];
			String nombreMiembro = splittedIdentificador[1];

			if (!genCodigoIntermedio.existeIdentificadorEnAlgunAmbitoContenedor(nombreVariable).equals("")){

				String tipoInstancia = genCodigoIntermedio.tipoInstanceDeClase(nombreVariable);

				if (genCodigoIntermedio.perteneceMiembroAClase(nombreMiembro, tipoInstancia)) {
					if (!genCodigoIntermedio.verificarParametrosDeMetodo(nombreMiembro + ":" + tipoInstancia)){
						logger.logSuccess("[Codigo Intermedio] El identificador " + nombreMiembro + " esta declarado dentro de la clase " + tipoInstancia);
					} else {
						logger.logError("[Codigo Intermedio] Cantidad de parametros incorrecta");
					}
				} else {
					logger.logError("[Codigo Intermedio] El identificador " + nombreMiembro + " no esta declarado dentro de la clase " + tipoInstancia);
				}
			}
		} else {
			if (!genCodigoIntermedio.existeIdentificadorEnAlgunAmbitoContenedor(val_peek(3).sval).equals("")){
				logger.logError("jejje " + val_peek(3).sval);
				if (genCodigoIntermedio.verificarParametros(val_peek(3).sval)) {
					logger.logError("Cantidad de parametros incorrecta");
				}
			}
		}
	}
break;
case 119:
//#line 284 "./src/compilador/gramatica.y"
{ logger.logError("[Parser] Invocacion de funcion con multiples expresiones detectada, se preserva solo la primera expresion"); }
break;
case 120:
//#line 285 "./src/compilador/gramatica.y"
{ logger.logError("[Parser] Se esperaba un simbolo ',' en invocacion de funcion"); }
break;
case 121:
//#line 286 "./src/compilador/gramatica.y"
{ logger.logError("[Parser] Se esperaba un simbolo ',' en invocacion de funcion"); }
break;
case 122:
//#line 287 "./src/compilador/gramatica.y"
{ logger.logError("[Parser] Se esperaba un simbolo ',' en invocacion de funcion"); }
break;
case 125:
//#line 296 "./src/compilador/gramatica.y"
{ 
		logger.logSuccess("[Parser] Asignacion detectada");
		genCodigoIntermedio.agregarElemento(val_peek(3).sval);
		genCodigoIntermedio.agregarElemento(val_peek(2).sval);
		genCodigoIntermedio.incrementarContador();	
		genCodigoIntermedio.incrementarContador();
		String variable = genCodigoIntermedio.existeIdentificadorEnAlgunAmbitoContenedor(val_peek(3).sval);
		if (!variable.equals(""))
			genCodigoIntermedio.comprobacionUso(val_peek(3).sval + variable);
	}
break;
case 126:
//#line 306 "./src/compilador/gramatica.y"
{ logger.logError("[Parser] Se esperaba un simbolo ',' en sentencia asignacion"); }
break;
case 127:
//#line 307 "./src/compilador/gramatica.y"
{ logger.logError("[Parser] Se esperaba expresion del lado derecho en sentencia asignacion"); }
break;
case 128:
//#line 311 "./src/compilador/gramatica.y"
{
		yyval.sval = val_peek(0).sval;
		/* if (!genCodigoIntermedio.existeIdentificadorEnAlgunAmbitoContenedor($1.sval).equals("")) {*/
		/* 	logger.logSuccess("[Codigo Intermedio] El identificador " + $1.sval + " esta declarado");*/
		/* 	genCodigoIntermedio.borrarLexemaDeclarado($1.sval);*/
		/* } else {*/
		/* 	logger.logError("[Codigo Intermedio] El identificador " + $1.sval + " no esta declarado");*/
		/* }*/
	}
break;
case 129:
//#line 320 "./src/compilador/gramatica.y"
{

		yyval.sval = val_peek(2).sval + "." + val_peek(0).sval;

		/* if (!genCodigoIntermedio.existeIdentificadorEnAlgunAmbitoContenedor($1.sval).equals("")){*/

		/* 	String tipoInstancia = genCodigoIntermedio.tipoInstanceDeClase($1.sval);*/

		/* 	if (genCodigoIntermedio.perteneceMiembroAClase($3.sval, tipoInstancia)) {*/
		/* 		logger.logError($3.sval + ":" + tipoInstancia);*/
		/* 		if (genCodigoIntermedio.verificarParametrosDeMetodo($3.sval + ":" + tipoInstancia)){*/
		/* 			logger.logError("Cantidad de parametros incorrecta");*/
		/* 		} else {*/
		/* 			logger.logSuccess("[Codigo Intermedio] El identificador " + $3.sval + " esta declarado dentro de la clase " + tipoInstancia);*/
		/* 		}*/
		/* 	} else {*/
		/* 		logger.logError("[Codigo Intermedio] El identificador " + $3.sval + " no esta declarado dentro de la clase " + tipoInstancia);*/
		/* 	}*/
		/* }*/
	}
break;
case 134:
//#line 350 "./src/compilador/gramatica.y"
{ 
		logger.logSuccess("[Parser] Declaracion de lista de variables detectado");
		genCodigoIntermedio.agregarTipoAListaDeVariables(val_peek(2).sval);
		genCodigoIntermedio.agregarUsoAListaDeVariables("variable");
		genCodigoIntermedio.agregarAmbitoAListaDeVariables();
		genCodigoIntermedio.removerListaVariablesADeclarar();
	}
break;
case 135:
//#line 357 "./src/compilador/gramatica.y"
{ logger.logError("[Parser] Se esperaba un simbolo ',' en sentencia declaracion de variables"); }
break;
case 136:
//#line 358 "./src/compilador/gramatica.y"
{ logger.logError("[Parser] Se esperaba una lista de variables en sentencia declaracion de variables"); }
break;
case 137:
//#line 362 "./src/compilador/gramatica.y"
{
		genCodigoIntermedio.agregarUsoAIdentificador(val_peek(0).sval, "nombre_interfaz");
		genCodigoIntermedio.agregarAmbitoAIdentificador(val_peek(0).sval);
		genCodigoIntermedio.setAmbitoClaseInterfaz(val_peek(0).sval);
	}
break;
case 138:
//#line 367 "./src/compilador/gramatica.y"
{ logger.logError("[Parser] Se esperaba un identificador en declaracion de INTERFACE"); }
break;
case 139:
//#line 371 "./src/compilador/gramatica.y"
{ 
		logger.logSuccess("[Parser] Declaracion de INTERFACE detectada");
		genCodigoIntermedio.clearAmbitoClaseInterfaz();
	}
break;
case 140:
//#line 375 "./src/compilador/gramatica.y"
{ logger.logError("[Parser] Se esperaba un simbolo '{' en declaracion de INTERFACE"); }
break;
case 144:
//#line 385 "./src/compilador/gramatica.y"
{ logger.logError("[Parser] Se esperaba un simbolo ',' en declaracion de metodo en CLASS"); }
break;
case 145:
//#line 389 "./src/compilador/gramatica.y"
{ 
		logger.logSuccess("[Parser] Declaracion de lista de variables en CLASS detectado"); 
		genCodigoIntermedio.agregarTipoAListaDeVariables(val_peek(2).sval);
		genCodigoIntermedio.agregarUsoAListaDeVariables("atributo");
		genCodigoIntermedio.agregarAmbitoAListaDeAtributos();
		genCodigoIntermedio.removerListaVariablesADeclarar();
	}
break;
case 146:
//#line 396 "./src/compilador/gramatica.y"
{ logger.logError("[Parser] Se esperaba un simbolo ',' en declaracion de lista de variables en CLASS"); }
break;
case 148:
//#line 398 "./src/compilador/gramatica.y"
{ logger.logError("[Parser] Se encontro un simbolo inesperado ',' en declaracion de funcion en CLASS"); }
break;
case 149:
//#line 399 "./src/compilador/gramatica.y"
{
		if (!genCodigoIntermedio.existeIdentificadorEnAlgunAmbitoContenedor(val_peek(1).sval).equals("")) {
			logger.logSuccess("[Codigo Intermedio] El identificador " + val_peek(1).sval + " esta declarado");
		} else {
			logger.logError("[Codigo Intermedio] El identificador " + val_peek(1).sval + " no esta declarado");
		}
	}
break;
case 150:
//#line 409 "./src/compilador/gramatica.y"
{ 
		if (!genCodigoIntermedio.claseRedeclarada(val_peek(0).sval)) {
			genCodigoIntermedio.agregarUsoAIdentificador(val_peek(0).sval, "nombre_clase");
			genCodigoIntermedio.agregarAmbitoAIdentificador(val_peek(0).sval);
			genCodigoIntermedio.setAmbitoClaseInterfaz(val_peek(0).sval);
			genCodigoIntermedio.apilarAmbito(val_peek(0).sval);
		} else {
			logger.logError("[Codigo intermedio] Se intento volver a declarar el identificador " + val_peek(0).sval);
		}
	}
break;
case 151:
//#line 419 "./src/compilador/gramatica.y"
{
		if (!genCodigoIntermedio.claseRedeclarada(val_peek(2).sval)) {
			if (!genCodigoIntermedio.existeIdentificadorEnAlgunAmbitoContenedor(val_peek(0).sval).equals("")) {
				logger.logSuccess("[Codigo Intermedio] El identificador " + val_peek(0).sval + " esta declarado");
				genCodigoIntermedio.agregarUsoAIdentificador(val_peek(2).sval, "nombre_clase");
				genCodigoIntermedio.putImplementa(val_peek(2).sval, val_peek(0).sval);
				genCodigoIntermedio.agregarAmbitoAIdentificador(val_peek(2).sval);
				genCodigoIntermedio.setAmbitoClaseInterfaz(val_peek(2).sval);
				genCodigoIntermedio.apilarAmbito(val_peek(2).sval);
			} else {
				logger.logError("[Codigo Intermedio] El identificador " + val_peek(0).sval + " no esta declarado");
			}
		} else {
			logger.logError("[Codigo intermedio] Se intento volver a declarar el identificador " + val_peek(2).sval);
		}
	}
break;
case 152:
//#line 435 "./src/compilador/gramatica.y"
{ logger.logError("[Parser] Se esperaba un identificador en declaracion de clase"); }
break;
case 153:
//#line 436 "./src/compilador/gramatica.y"
{ logger.logError("[Parser] Se esperaba un identificador en declaracion de clase"); }
break;
case 154:
//#line 437 "./src/compilador/gramatica.y"
{ logger.logError("[Parser] Se esperaba un identificador en IMPLEMENT de clase"); }
break;
case 155:
//#line 438 "./src/compilador/gramatica.y"
{ logger.logError("[Parser] Se esperaba un identificador en declaracion de clase"); }
break;
case 156:
//#line 442 "./src/compilador/gramatica.y"
{ 
		logger.logSuccess("[Parser] Declaracion de clase CLASS detectado"); 
		logger.logError("CACA " + genCodigoIntermedio.getAmbitoClaseInterfaz());
		genCodigoIntermedio.clearAmbitoClaseInterfaz();
	}
break;
case 159:
//#line 455 "./src/compilador/gramatica.y"
{ 
		logger.logSuccess("[Parser] Declaracion de funcion detectado");
		if (genCodigoIntermedio.isPuedoDesapilar())
			genCodigoIntermedio.desapilarAmbito();
		else 
			genCodigoIntermedio.setPuedoDesapilar();
	}
break;
case 160:
//#line 465 "./src/compilador/gramatica.y"
{
		if (!genCodigoIntermedio.functionRedeclarada(val_peek(3).sval)) {
			if (genCodigoIntermedio.esDefinicionDeClase()) {
				genCodigoIntermedio.agregarUsoAIdentificador(val_peek(3).sval, "nombre_metodo");
				genCodigoIntermedio.agregarAmbitoAIdentificadorMetodo(val_peek(3).sval);	
			} else {
				genCodigoIntermedio.agregarUsoAIdentificador(val_peek(3).sval, "nombre_funcion");
				genCodigoIntermedio.agregarAmbitoAIdentificador(val_peek(3).sval);
			}
			genCodigoIntermedio.modificarCantidadParametros(val_peek(3).sval);
			genCodigoIntermedio.apilarAmbito(val_peek(3).sval);
			genCodigoIntermedio.agregarAmbitoAIdentificador(val_peek(1).sval);
		} else {
			logger.logError("[Codigo intermedio] Se intento volver a declarar el identificador " + val_peek(3).sval);
			genCodigoIntermedio.setPuedoDesapilar();
		}
	}
break;
case 161:
//#line 482 "./src/compilador/gramatica.y"
{
		if (!genCodigoIntermedio.functionRedeclarada(val_peek(2).sval)) {
			if (genCodigoIntermedio.esDefinicionDeClase()) {
				genCodigoIntermedio.agregarUsoAIdentificador(val_peek(2).sval, "nombre_metodo");
				genCodigoIntermedio.agregarAmbitoAIdentificadorMetodo(val_peek(2).sval);	
			} else {
				genCodigoIntermedio.agregarUsoAIdentificador(val_peek(2).sval, "nombre_funcion");
				genCodigoIntermedio.agregarAmbitoAIdentificador(val_peek(2).sval);
			}
			genCodigoIntermedio.apilarAmbito(val_peek(2).sval);
		} else {
			logger.logError("[Codigo intermedio] Se intento volver a declarar el identificador " + val_peek(2).sval);
			genCodigoIntermedio.setPuedoDesapilar();
		}
	}
break;
case 162:
//#line 497 "./src/compilador/gramatica.y"
{ logger.logError("[Parser] Encabezado de funcion con mas de 1 parametro detectado, se preserva solo el primer parametro"); }
break;
case 163:
//#line 498 "./src/compilador/gramatica.y"
{ logger.logError("[Parser] Encabezado de funcion con mas de 1 parametro detectado, se preserva solo el primer parametro"); }
break;
case 164:
//#line 499 "./src/compilador/gramatica.y"
{ logger.logError("[Parser] Se esperaba un simbolo '(' en el encabezado de la funcion"); }
break;
case 165:
//#line 503 "./src/compilador/gramatica.y"
{
		yyval.sval = val_peek(0).sval;
	}
break;
case 166:
//#line 506 "./src/compilador/gramatica.y"
{
		logger.logError("[Parser] Se esperaba un identificador en el encabezado de la funcion"); 
	}
break;
case 167:
//#line 512 "./src/compilador/gramatica.y"
{ 
		genCodigoIntermedio.agregarUsoAIdentificador(val_peek(3).sval, "nombre_metodo");
		genCodigoIntermedio.agregarAmbitoAIdentificadorMetodo(val_peek(3).sval);
	}
break;
case 168:
//#line 516 "./src/compilador/gramatica.y"
{ 
		genCodigoIntermedio.agregarUsoAIdentificador(val_peek(2).sval, "nombre_metodo");
		genCodigoIntermedio.agregarAmbitoAIdentificadorMetodo(val_peek(2).sval);
	}
break;
case 169:
//#line 520 "./src/compilador/gramatica.y"
{ logger.logError("[Parser] Encabezado de funcion con mas de 1 parametro detectado, se preserva solo el primer parametro"); }
break;
case 170:
//#line 521 "./src/compilador/gramatica.y"
{ logger.logError("[Parser] Encabezado de funcion con mas de 1 parametro detectado, se preserva solo el primer parametro"); }
break;
case 171:
//#line 522 "./src/compilador/gramatica.y"
{ logger.logError("[Parser] Se esperaba un identificador en el encabezado de la funcion"); }
break;
case 172:
//#line 523 "./src/compilador/gramatica.y"
{ logger.logError("[Parser] Se esperaba un identificador en el encabezado de la funcion"); }
break;
case 173:
//#line 524 "./src/compilador/gramatica.y"
{ logger.logError("[Parser] Se esperaba un simbolo '(' en el encabezado de la funcion"); }
break;
case 174:
//#line 525 "./src/compilador/gramatica.y"
{ logger.logError("[Parser] Se esperaba un simbolo '(' en el encabezado de la funcion"); }
break;
case 179:
//#line 533 "./src/compilador/gramatica.y"
{ logger.logError("[Parser] Se esperaba una sentencia RETURN al final de la funcion"); }
break;
case 180:
//#line 534 "./src/compilador/gramatica.y"
{ logger.logError("[Parser] Se esperaba una sentencia RETURN al final de la funcion"); }
break;
case 181:
//#line 535 "./src/compilador/gramatica.y"
{ logger.logError("[Parser] Se esperaba un simbolo '{' en el cuerpo de la funcion"); }
break;
case 182:
//#line 536 "./src/compilador/gramatica.y"
{ logger.logError("[Parser] Se esperaba un simbolo '{' en el cuerpo de la funcion"); }
break;
case 183:
//#line 537 "./src/compilador/gramatica.y"
{ logger.logError("[Parser] Se esperaba un simbolo '{' en el cuerpo de la funcion"); }
break;
case 184:
//#line 538 "./src/compilador/gramatica.y"
{ logger.logError("[Parser] Se esperaba un simbolo '{' en el cuerpo de la funcion"); }
break;
case 185:
//#line 539 "./src/compilador/gramatica.y"
{ logger.logError("[Parser] Se esperaba un simbolo '{' en el cuerpo de la funcion"); }
break;
case 186:
//#line 540 "./src/compilador/gramatica.y"
{ logger.logError("[Parser] Se esperaba un simbolo '{' en el cuerpo de la funcion"); }
break;
case 187:
//#line 544 "./src/compilador/gramatica.y"
{ logger.logError("[Parser] Codigo inalcanzable luego del RETURN, se ignorara"); }
break;
case 188:
//#line 545 "./src/compilador/gramatica.y"
{ logger.logError("[Parser] Codigo inalcanzable luego del RETURN, se ignorara"); }
break;
case 195:
//#line 561 "./src/compilador/gramatica.y"
{ 
		yyval.sval = val_peek(0).sval;
		genCodigoIntermedio.agregarUsoAIdentificador(val_peek(0).sval, "nombre_parametro");
		genCodigoIntermedio.agregarTipoAParametroDeFuncion(val_peek(0).sval, val_peek(1).sval);
	}
break;
case 196:
//#line 569 "./src/compilador/gramatica.y"
{ 
		if (!genCodigoIntermedio.variableRedeclarada(val_peek(0).sval)) {
			genCodigoIntermedio.agregarVariableADeclarar(val_peek(0).sval);
		} else {
			logger.logError("[Codigo intermedio] Se intento volver a declarar el identificador " + val_peek(0).sval);
		}
	}
break;
case 197:
//#line 576 "./src/compilador/gramatica.y"
{ 
		if (!genCodigoIntermedio.variableRedeclarada(val_peek(0).sval)) {
			genCodigoIntermedio.agregarVariableADeclarar(val_peek(0).sval);
		} else {
			logger.logError("[Codigo intermedio] Se intento volver a declarar el identificador " + val_peek(0).sval);
		}
	}
break;
case 201:
//#line 589 "./src/compilador/gramatica.y"
{
		if (!genCodigoIntermedio.existeIdentificadorEnAlgunAmbitoContenedor(val_peek(0).sval).equals("")) {
			logger.logSuccess("[Codigo Intermedio] El identificador " + val_peek(0).sval + " esta declarado");
		} else {
			logger.logError("[Codigo Intermedio] El identificador " + val_peek(0).sval + " no esta declarado");
		}
	}
break;
case 202:
//#line 599 "./src/compilador/gramatica.y"
{
		genCodigoIntermedio.agregarElemento(val_peek(1).sval);
		genCodigoIntermedio.generarPasoIncompleto("BF");
		genCodigoIntermedio.apilar(genCodigoIntermedio.polacaSize() - 1);
	}
break;
case 203:
//#line 604 "./src/compilador/gramatica.y"
{ logger.logError("[Parser] Se esperaba una expresion del lado derecho de la comparacion"); }
break;
case 204:
//#line 605 "./src/compilador/gramatica.y"
{ logger.logError("[Parser] Se esperaba una expresion del lado izquierdo de la comparacion"); }
break;
case 205:
//#line 606 "./src/compilador/gramatica.y"
{ logger.logError("[Parser] Se esperaba un comparador valido en la comparacion"); }
break;
case 212:
//#line 619 "./src/compilador/gramatica.y"
{ 
		genCodigoIntermedio.agregarElemento(val_peek(1).sval); genCodigoIntermedio.incrementarContador(); }
break;
case 213:
//#line 621 "./src/compilador/gramatica.y"
{ 
		genCodigoIntermedio.agregarElemento(val_peek(1).sval); genCodigoIntermedio.incrementarContador(); }
break;
case 215:
//#line 627 "./src/compilador/gramatica.y"
{ genCodigoIntermedio.agregarElemento(val_peek(1).sval); genCodigoIntermedio.incrementarContador();}
break;
case 216:
//#line 628 "./src/compilador/gramatica.y"
{ genCodigoIntermedio.agregarElemento(val_peek(1).sval); genCodigoIntermedio.incrementarContador();}
break;
case 218:
//#line 633 "./src/compilador/gramatica.y"
{
		if (!genCodigoIntermedio.existeIdentificadorEnAlgunAmbitoContenedor(val_peek(0).sval).equals("")) {
			logger.logSuccess("[Codigo Intermedio] El identificador " + val_peek(0).sval + " esta declarado");
			genCodigoIntermedio.borrarLexemaDeclarado(val_peek(0).sval);
			genCodigoIntermedio.agregarElemento(val_peek(0).sval); genCodigoIntermedio.incrementarContador();
		} else {
			logger.logError("[Codigo Intermedio] El identificador " + val_peek(0).sval + " no esta declarado");
		}
	}
break;
case 219:
//#line 642 "./src/compilador/gramatica.y"
{
		if (!genCodigoIntermedio.existeIdentificadorEnAlgunAmbitoContenedor(val_peek(1).sval).equals("")) {
			logger.logSuccess("[Codigo Intermedio] El identificador " + val_peek(1).sval + " esta declarado");
			genCodigoIntermedio.agregarElemento(val_peek(1).sval);
			genCodigoIntermedio.agregarElemento("1");
			genCodigoIntermedio.agregarElemento("-");

		} else {
			logger.logError("[Codigo Intermedio] El identificador " + val_peek(1).sval + " no esta declarado");
		}
	}
break;
case 220:
//#line 653 "./src/compilador/gramatica.y"
{ genCodigoIntermedio.agregarElemento(val_peek(0).sval); genCodigoIntermedio.incrementarContador(); }
break;
case 221:
//#line 654 "./src/compilador/gramatica.y"
{ logger.logError("[Parser] No se admiten expresiones entre parentesis"); }
break;
case 222:
//#line 658 "./src/compilador/gramatica.y"
{ corregirConstantePositivaEntera(val_peek(0).sval); }
break;
case 223:
//#line 659 "./src/compilador/gramatica.y"
{ constanteConSigno(val_peek(0).sval); }
break;
//#line 2146 "Parser.java"
//########## END OF USER-SUPPLIED ACTIONS ##########
    }//switch
    //#### Now let's reduce... ####
    if (yydebug) debug("reduce");
    state_drop(yym);             //we just reduced yylen states
    yystate = state_peek(0);     //get new state
    val_drop(yym);               //corresponding value drop
    yym = yylhs[yyn];            //select next TERMINAL(on lhs)
    if (yystate == 0 && yym == 0)//done? 'rest' state and at first TERMINAL
      {
      if (yydebug) debug("After reduction, shifting from state 0 to state "+YYFINAL+"");
      yystate = YYFINAL;         //explicitly say we're done
      state_push(YYFINAL);       //and save it
      val_push(yyval);           //also save the semantic value of parsing
      if (yychar < 0)            //we want another character?
        {
        yychar = yylex();        //get next character
        if (yychar<0) yychar=0;  //clean, if necessary
        if (yydebug)
          yylexdebug(yystate,yychar);
        }
      if (yychar == 0)          //Good exit (if lex returns 0 ;-)
         break;                 //quit the loop--all DONE
      }//if yystate
    else                        //else not done yet
      {                         //get next state and push, for next yydefred[]
      yyn = yygindex[yym];      //find out where to go
      if ((yyn != 0) && (yyn += yystate) >= 0 &&
            yyn <= YYTABLESIZE && yycheck[yyn] == yystate)
        yystate = yytable[yyn]; //get new state
      else
        yystate = yydgoto[yym]; //else go to new defred
      if (yydebug) debug("after reduction, shifting from state "+state_peek(0)+" to state "+yystate+"");
      state_push(yystate);     //going again, so push state & val...
      val_push(yyval);         //for next action
      }
    }//main loop
  return 0;//yyaccept!!
}
//## end of method parse() ######################################



//## run() --- for Thread #######################################
/**
 * A default run method, used for operating this parser
 * object in the background.  It is intended for extending Thread
 * or implementing Runnable.  Turn off with -Jnorun .
 */
public void run()
{
  yyparse();
}
//## end of method run() ########################################



//## Constructors ###############################################
/**
 * Default constructor.  Turn off with -Jnoconstruct .

 */
public Parser()
{
  //nothing to do
}


/**
 * Create a parser, setting the debug to true or false.
 * @param debugMe true for debugging, false for no debug.
 */
public Parser(boolean debugMe)
{
  yydebug=debugMe;
}
//###############################################################



}
//################### END OF CLASS ##############################
