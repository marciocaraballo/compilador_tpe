//### This file created by BYACC 1.8(/Java extension  1.15)
//### Java capabilities added 7 Jan 97, Bob Jamison
//### Updated : 27 Nov 97  -- Bob Jamison, Joe Nieten
//###           01 Jan 98  -- Bob Jamison -- fixed generic semantic constructor
//###           01 Jun 99  -- Bob Jamison -- added Runnable support
//###           06 Aug 00  -- Bob Jamison -- made state variables class-global
//###           03 Jan 01  -- Bob Jamison -- improved flags, tracing
//###           16 May 01  -- Bob Jamison -- added custom stack sizing
//###           04 Mar 02  -- Yuval Oren  -- improved java performance, added options
//###           14 Mar 02  -- Tomas Hurka -- -d support, static initializer workaround
//### Please send bug reports to tom@hukatronic.cz
//### static char yysccsid[] = "@(#)yaccpar	1.8 (Berkeley) 01/20/90";






//#line 2 ".\gramatica.y"
package compilador;
import java.io.File;
//#line 20 "Parser.java"




public class Parser
{

boolean yydebug;        //do I want debug output?
int yynerrs;            //number of errors so far
int yyerrflag;          //was there an error?
int yychar;             //the current working character

//########## MESSAGES ##########
//###############################################################
// method: debug
//###############################################################
void debug(String msg)
{
  if (yydebug)
    System.out.println(msg);
}

//########## STATE STACK ##########
final static int YYSTACKSIZE = 500;  //maximum stack size
int statestk[] = new int[YYSTACKSIZE]; //state stack
int stateptr;
int stateptrmax;                     //highest index of stackptr
int statemax;                        //state when highest index reached
//###############################################################
// methods: state stack push,pop,drop,peek
//###############################################################
final void state_push(int state)
{
  try {
		stateptr++;
		statestk[stateptr]=state;
	 }
	 catch (ArrayIndexOutOfBoundsException e) {
     int oldsize = statestk.length;
     int newsize = oldsize * 2;
     int[] newstack = new int[newsize];
     System.arraycopy(statestk,0,newstack,0,oldsize);
     statestk = newstack;
     statestk[stateptr]=state;
  }
}
final int state_pop()
{
  return statestk[stateptr--];
}
final void state_drop(int cnt)
{
  stateptr -= cnt; 
}
final int state_peek(int relative)
{
  return statestk[stateptr-relative];
}
//###############################################################
// method: init_stacks : allocate and prepare stacks
//###############################################################
final boolean init_stacks()
{
  stateptr = -1;
  val_init();
  return true;
}
//###############################################################
// method: dump_stacks : show n levels of the stacks
//###############################################################
void dump_stacks(int count)
{
int i;
  System.out.println("=index==state====value=     s:"+stateptr+"  v:"+valptr);
  for (i=0;i<count;i++)
    System.out.println(" "+i+"    "+statestk[i]+"      "+valstk[i]);
  System.out.println("======================");
}


//########## SEMANTIC VALUES ##########
//public class ParserVal is defined in ParserVal.java


String   yytext;//user variable to return contextual strings
ParserVal yyval; //used to return semantic vals from action routines
ParserVal yylval;//the 'lval' (result) I got from yylex()
ParserVal valstk[];
int valptr;
//###############################################################
// methods: value stack push,pop,drop,peek.
//###############################################################
void val_init()
{
  valstk=new ParserVal[YYSTACKSIZE];
  yyval=new ParserVal();
  yylval=new ParserVal();
  valptr=-1;
}
void val_push(ParserVal val)
{
  if (valptr>=YYSTACKSIZE)
    return;
  valstk[++valptr]=val;
}
ParserVal val_pop()
{
  if (valptr<0)
    return new ParserVal();
  return valstk[valptr--];
}
void val_drop(int cnt)
{
int ptr;
  ptr=valptr-cnt;
  if (ptr<0)
    return;
  valptr = ptr;
}
ParserVal val_peek(int relative)
{
int ptr;
  ptr=valptr-relative;
  if (ptr<0)
    return new ParserVal();
  return valstk[ptr];
}
final ParserVal dup_yyval(ParserVal val)
{
  ParserVal dup = new ParserVal();
  dup.ival = val.ival;
  dup.dval = val.dval;
  dup.sval = val.sval;
  dup.obj = val.obj;
  return dup;
}
//#### end semantic value section ####
public final static short ID=257;
public final static short CTE=258;
public final static short CADENA=259;
public final static short IF=260;
public final static short THEN=261;
public final static short ELSE=262;
public final static short ENDIF=263;
public final static short OUT=264;
public final static short FUN=265;
public final static short RETURN=266;
public final static short BREAK=267;
public final static short ASIGNACION=268;
public final static short COMP_MAYOR_IGUAL=269;
public final static short COMP_MENOR_IGUAL=270;
public final static short COMP_DISTINTO=271;
public final static short WHEN=272;
public final static short DO=273;
public final static short UNTIL=274;
public final static short CONTINUE=275;
public final static short DOUBLE64=276;
public final static short UINT16=277;
public final static short DEFER=278;
public final static short CONST=279;
public final static short YYERRCODE=256;
final static short yylhs[] = {                           -1,
    0,    0,    0,    0,    0,    0,    1,    2,    2,    3,
    3,    4,    4,    4,    4,    6,    6,    6,    6,   11,
   11,    7,    7,    7,   14,   14,   15,   15,   16,   16,
   16,   16,   16,   16,   16,   16,   16,   16,   22,   22,
    8,    8,   23,   23,   23,   23,   23,   23,   23,   23,
   23,   23,   23,   23,   23,   23,   25,   25,   25,   21,
   21,   21,   21,   21,   21,   21,   21,   21,   21,   21,
   21,   21,   21,   19,   19,   19,   19,   19,   19,   19,
   19,   19,   19,   20,   20,   20,   20,   26,   26,   26,
   26,   26,   26,   26,   26,   26,   26,   26,   26,   26,
   28,   28,   29,   29,   29,   12,   12,   12,   12,   12,
   12,   12,   12,   12,   12,   12,   13,   13,   13,   13,
   13,   32,   32,   32,   35,   35,   34,   34,   36,   34,
    9,    9,    9,   37,   37,   38,   38,   38,   38,   38,
    5,    5,    5,    5,    5,    5,    5,    5,    5,    5,
   42,   42,   42,   30,   30,   30,   30,   30,   31,   31,
   41,   41,   43,   43,   27,   44,   44,   44,   44,   45,
   45,   17,   17,   17,   17,   17,   40,   40,   40,   40,
   40,   46,   46,   39,   39,   39,   39,   39,   39,   39,
   39,   47,   47,   47,   47,   47,   48,   48,   24,   24,
   24,   24,   24,   24,   49,   49,   49,   49,   49,   49,
   33,   33,   33,   50,   50,   50,   51,   51,   51,   53,
   53,   54,   54,   55,   55,   18,   18,   18,   18,   18,
   18,   18,   18,   18,   52,   52,   10,   10,
};
final static short yylen[] = {                            2,
    4,    3,    3,    3,    3,    0,    1,    1,    2,    1,
    1,    1,    1,    1,    1,    3,    2,    2,    2,    3,
    1,    4,    5,    3,    1,    2,    1,    1,    1,    2,
    1,    2,    1,    2,    1,    2,    1,    2,    1,    2,
    4,    5,    8,   11,   11,   11,   11,   14,   14,    7,
   10,   10,   10,   10,   13,   13,    1,    1,    2,    6,
    6,    6,    9,    9,   13,   11,   11,   13,   13,   13,
   11,   11,   12,    7,    8,    8,    6,    7,    7,    6,
    6,    7,    7,    5,    7,    4,    6,    1,    1,    1,
    4,    4,    3,    2,    3,    3,    3,    3,    2,    2,
    1,    2,    1,    1,    1,    6,    7,    6,    5,    5,
    5,    5,    6,    6,    6,    6,    5,    4,    3,    3,
    4,    1,    3,    5,    1,    3,    2,    1,    0,    2,
    3,    2,    2,    1,    3,    3,    2,    2,    1,    3,
    1,    2,    1,    2,    1,    2,    1,    2,    1,    2,
    1,    1,    1,    2,    4,    1,    3,    3,    2,    1,
    1,    3,    5,    4,    1,    1,    3,    2,    2,    1,
    2,    4,    3,    3,    4,    3,    7,    6,    6,    5,
    4,    1,    2,    6,    8,    5,    7,    5,    5,    7,
    6,    1,    3,    2,    2,    2,    1,    2,    5,    4,
    4,    4,    4,    2,    1,    1,    1,    1,    1,    1,
    3,    3,    1,    3,    3,    1,    1,    1,    1,    3,
    4,    1,    3,    1,    1,    5,    5,    4,    4,    4,
    4,    4,    4,    4,    1,    2,    1,    1,
};
final static short yydefred[] = {                         0,
    7,    0,    0,    0,    0,    0,    0,    0,    0,    0,
  238,  237,    0,    0,    0,    8,   10,   11,   12,   13,
   14,   15,    0,    0,    0,  141,  145,    0,  143,  147,
  149,  161,    0,    0,    0,    0,    0,    0,  235,    0,
    0,    0,    0,    0,  216,  218,  219,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,  151,  152,  153,
    0,    0,    0,  142,  146,  144,  148,  150,    0,  133,
    0,    0,    2,    9,    0,   19,    0,   18,    0,    0,
    5,    0,    3,  173,    0,   20,    0,    0,  236,  205,
  206,  207,  204,  210,  208,  209,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,  154,    0,  159,  170,    0,    0,  169,
  171,  138,    0,    0,  131,    0,   16,    0,    0,    0,
    0,    0,   24,   27,    0,    0,   25,   28,   29,   31,
   33,   35,   37,    0,    0,  162,    1,  172,  175,  224,
  220,  225,    0,  222,    0,    0,    0,    0,    0,  194,
  197,    0,    0,    0,  196,  198,    0,    0,    0,  214,
  215,  231,  229,  232,    0,  230,    0,  228,    0,    0,
    0,    0,  127,    0,    0,  130,    0,    0,    0,  181,
    0,    0,  165,  158,    0,  167,    0,  136,  140,  135,
    0,    0,    0,    0,    0,   88,  103,   89,    0,    0,
  101,  104,  105,    0,   30,   32,   34,   36,   38,   22,
    0,   26,    0,   41,    0,    0,  221,  200,    0,  201,
    0,  188,    0,    0,  193,    0,  189,  202,  227,  226,
  112,    0,    0,    0,  111,    0,    0,  110,    0,    0,
  183,    0,  155,  163,    0,    0,    0,  119,    0,    0,
   94,    0,    0,  100,    0,    0,  102,    0,   23,   42,
    0,  223,  199,  191,    0,  184,    0,  106,  116,    0,
  108,  115,    0,  114,    0,  178,    0,    0,    0,    0,
    0,    0,  121,    0,    0,    0,   93,    0,    0,    0,
   96,   98,    0,    0,    0,  190,  107,    0,  124,  177,
   59,   39,    0,    0,    0,    0,    0,    0,  117,    0,
    0,    0,    0,    0,    0,   91,   92,   84,    0,    0,
    0,    0,  185,    0,    0,    0,   40,    0,   60,    0,
   62,   61,    0,    0,   57,   58,    0,   80,    0,    0,
    0,    0,   81,    0,    0,    0,    0,  126,    0,    0,
    0,    0,    0,    0,   74,    0,    0,    0,   82,   83,
    0,    0,   85,    0,    0,    0,    0,    0,    0,    0,
    0,    0,   43,   75,   76,    0,    0,    0,    0,    0,
    0,    0,   63,    0,    0,    0,   64,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,   66,   44,    0,    0,
   67,   45,   71,   72,   46,   47,    0,    0,    0,    0,
   73,    0,    0,    0,    0,    0,    0,    0,    0,   69,
   70,   65,    0,   68,    0,    0,    0,   48,   49,    0,
    0,
};
final static short yydgoto[] = {                          3,
    4,   15,   16,   17,   18,   19,   20,   21,   22,   23,
   24,   25,  355,  146,  147,  322,  149,  150,  151,  152,
  153,  323,  356,   42,  302,  219,  155,  220,  221,  222,
  223,  117,   43,  118,  319,  119,   71,   72,   29,   30,
   31,  131,   32,   62,   63,  202,  102,  103,   98,   44,
   45,   46,   47,  163,  164,
};
final static short yysindex[] = {                      -101,
    0, 1699,    0,  832,  -36,   23,   15,  -39,   23,  942,
    0,    0,  298,  -50, 1271,    0,    0,    0,    0,    0,
    0,    0,  -47,  -25,  -85,    0,    0,   24,    0,    0,
    0,    0, 1294, 1318,  -43, -203,  -34,   71,    0, -199,
   -4,  764,  -10,   31,    0,    0,    0,   36,   60,   19,
  -35,  -26,  -87,  -37,   58,   72,  530,    0,    0,    0,
    0, -140, 1510,    0,    0,    0,    0,    0,  -12,    0,
   78,   96,    0,    0,   99,    0,   91,    0, 1244, -120,
    0, 1341,    0,    0,   61,    0,   62,  -22,    0,    0,
    0,    0,    0,    0,    0,    0,  -10,  -34,  971,  891,
    0, -124, 1625,  -34,  -34,  -34,  -34,  -34,  103,  133,
    5,   12,  136,  -28,   97,  -99,  160,  162,  -32,  151,
  181,  117, 1364,    0,  -45,    0,    0, 1529,   23,    0,
    0,    0,  -15,   27,    0,   16,    0,   23,   41,   23,
  -96,  651,    0,    0,  179, 1676,    0,    0,    0,    0,
    0,    0,    0,  185,  261,    0,    0,    0,    0,    0,
    0,    0,   81,    0,   34,   87,   54,  266,  -63,    0,
    0, 1635, 1071,  270,    0,    0,   31,   31,  106,    0,
    0,    0,    0,    0,  272,    0,  282,    0,    6,  285,
    3,    6,    0,  294,    6,    0,    6,  325, 1699,    0,
 1699,  264,    0,    0,  327,    0,  361,    0,    0,    0,
  161,   43,  357,  -83, 1546,    0,    0,    0,  153, 1000,
    0,    0,    0,   23,    0,    0,    0,    0,    0,    0,
  307,    0,  313,    0,  167,   45,    0,    0,  363,    0,
  377,    0, 1071,  383,    0,  191,    0,    0,    0,    0,
    0,    6,    6,  -48,    0,    6,  412,    0,    6,  337,
    0,  406,    0,    0,  990,  408,  364,    0,  348, 1722,
    0, 1474,   23,    0,  349,  374,    0,  246,    0,    0,
  -96,    0,    0,    0,  254,    0,  463,    0,    0,    6,
    0,    0,    6,    0,  464,    0,  795,  112,  262,  102,
  263,  267,    0,  465, 1387,  230,    0,  426,  431,  498,
    0,    0, 1017,  286,  504,    0,    0,  517,    0,    0,
    0,    0, 1389,  509,  449,  514,  527, -106,    0,  541,
  248,   23,  542,  451,  477,    0,    0,    0,  112,  262,
  263,   23,    0,    6,  343,  478,    0,  481,    0,  112,
    0,    0,  356,  112,    0,    0,  352,    0,  573,  508,
  510,  373,    0,  577,  578, 1389,  579,    0,  516,  104,
  150,  222,  222,  581,    0,  582,  584, -103,    0,    0,
  519,  521,    0,  112, 1042,  588, 1061,  597,  544,  545,
  546,  547,    0,    0,    0,  112,  183,  229, 1585,  112,
  433,  434,    0,  112,  435,  437,    0,  440,  466,  468,
  469,  222, 1081, 1106,  471,  549,  550, 1595,  653,  667,
 1605,  669,  682,  683,  684,  685,  696,  602,  632,  112,
  112,  701,  500,  507,  520,  636,    0,    0,  522,  646,
    0,    0,    0,    0,    0,    0,  511,  524, 1654, 1665,
    0,  713,  723,  729,  528,  736,  533,   29,   80,    0,
    0,    0,  740,    0,  741,  112,  112,    0,    0, 1108,
 1108,
};
final static short yyrindex[] = {                       801,
    0,    0,    0,    0,  291,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,  388,    0,    0,
    0,    0,    0,  318,    0,    0,    0,    0,    0,    0,
  553,  553,    0,  746, 1412, 1431,    0,    0,    0,    0,
 1491,    0,    0,    0,    0,    0,    0,    0,  754,    0,
  881,  809,    0,    0,  858,    0,  910,    0,    0,    0,
    0,  806,    0,    0,  347,    0,  473,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
 1568,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,  553,    0,   25,    0,   51,    0,    0,
    0,    0,    0,    0,    0,    0,    0,  537,    0,    0,
    0,    0,  784,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,  235,    0,    0,    0,    0,  416,  444,    0,    0,
    0,    0,    0,    0,  502,    0,  559,    0,    0,    0,
    0,    0,    0,    0,  553,    0,    0,    0,    0,    0,
  687,    0,    0,    0, 1451,    0,  599,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,  540,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,  271,    0,
    0,    0,    0,  628,    0,    0,    0,    0,    0,    0,
    0,  692,    0,    0,    0,    0,   55,    0,    0,    0,
    0,  668,    0,    0,    0,    0,    1,    0,    0,    0,
    0,  543,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,  695,
    0,    0,  553,    0,  702,    0,    0,    0,  558,    0,
  583,    0,    0,  163,    0,    0,    0,  565,  566, 1128,
    0,    0,    0,    0,  725,    0,    0,   56,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,  553,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0, 1151,    0,
    0,    0,    0,    0,    0,    0, 1175,    0,    0,    0,
    0,    0,    0,  189,    0, 1198, 1221,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,  207,
    0,    0,  256,    0,    0,  290,  303,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,  355,    0,  368,    0,    0,    0,    0,    0,
    0,
};
final static short yygindex[] = {                         0,
    0,   39,  341,  -72,   66,    0,    0,    0,    0,  165,
   79,    0,  -61,    0, -125,  -79,   85,  311, -116, -114,
 -110, 1500,  -76,   -5,  371,  526, 1188,  629, -181,  259,
  338,  -21,  362, -147,  503,    0,  710,    0,  835,  836,
  838,   37,  772,    0,  796,  -89,  -70,  755,    2,  411,
  413,  -46,    0,    0,  618,
};
final static int YYTABLESIZE=2001;
static short yytable[];
static { yytable();}
static void yytable(){
yytable = new short[]{                        148,
   52,   40,  154,   53,  114,  115,  144,   36,   70,  290,
   40,   76,  190,  204,  120,   84,  354,  145,  161,  396,
  232,    2,   40,   37,   37,  227,  215,  228,  169,  189,
  121,  229,  104,   78,  105,  123,   93,   79,  277,  270,
   40,  162,   34,  254,  106,  185,   61,  257,  134,   96,
   94,   95,  187,   75,   50,   96,   94,   95,   89,  113,
  253,  217,   41,  184,  218,  128,  148,   40,  128,  233,
  186,   82,  107,  144,  238,   58,  109,  108,   40,  216,
  212,   80,  128,  266,  231,   40,   26,   40,   26,   40,
  277,  122,  191,  127,   26,  123,  125,   64,  165,   26,
  110,   77,  246,  104,  104,  105,  105,  101,  122,  260,
   88,  261,  123,  125,   86,  125,  124,   26,   26,  158,
  159,  237,   58,  207,  236,  120,   26,  240,   58,  104,
  126,  105,  211,  129,  214,  217,  135,  173,  174,  136,
  217,   26,   36,  276,  306,  318,  248,   26,  104,  137,
  105,  466,   10,  332,  192,    1,  332,  193,  275,  139,
   54,  182,  139,  138,  101,  171,   26,    7,  176,  139,
   55,  353,  285,  122,  353,  140,  141,  269,   56,  331,
  227,  142,  228,   26,   26,  300,  229,   26,  301,  162,
  148,  183,  217,   58,  188,  309,  318,  144,  243,  244,
  194,  217,  467,  299,  218,  195,   69,   26,  197,   75,
  308,  203,   26,   38,   39,  116,  116,   51,  278,  216,
  321,  198,   38,   39,  196,  148,  225,   11,   12,  335,
   35,   35,  144,  300,  160,   39,  341,  176,  101,  199,
   11,   12,  208,  347,  334,  132,  348,   11,   12,   11,
   12,  340,   38,   39,  361,  133,   26,   26,   90,   91,
   92,  346,  120,  120,   90,   91,   92,  310,   59,  360,
  203,   48,   69,   49,  120,  111,  321,  112,  116,   38,
   39,   11,   12,   26,  209,   26,  347,  118,  332,  382,
   38,   39,  347,  347,  139,  390,  392,   38,   39,   38,
   39,  160,   39,  230,  381,  401,  353,  405,  101,  234,
  389,  391,   27,   50,   27,   59,  241,  213,  235,  347,
   27,   59,  417,   65,  242,   27,  362,   26,  247,  203,
  249,   51,  347,  401,  405,  429,  367,  416,  347,  332,
  250,  347,  252,   27,   27,  139,  174,   60,  165,   21,
  428,  256,   27,  251,  333,   74,  255,  353,  213,  116,
  213,  258,  213,  325,  326,  385,  386,   27,   54,  347,
  347,  224,  359,   27,   74,    7,  213,  213,  213,  213,
   52,  225,  259,  140,  141,  263,   59,  217,  262,  142,
  347,  347,   27,  203,   60,  203,   85,  268,   87,  104,
   60,  105,   97,  283,  304,  104,  104,  105,  105,   27,
   27,  387,  388,   27,   53,  211,  288,  289,  291,  264,
  292,  265,   74,  294,  118,  118,  273,   54,  217,  217,
  217,  279,  217,   27,  217,  284,  118,  280,   27,  281,
  213,  286,  213,  212,  413,  386,  217,  217,  217,  217,
   50,   50,  226,  287,  317,  293,  211,  116,  211,  166,
  211,  295,   50,  201,  296,   60,  303,  179,   51,   51,
  305,  174,  176,  311,  211,  211,  211,  211,   54,   55,
   51,  138,   27,   27,  212,    7,  212,  139,  212,  332,
  414,  388,   56,  140,  141,  139,  195,  195,  312,  142,
  213,  234,  212,  212,  212,  212,  313,  332,  116,   27,
  217,   27,  217,  139,  177,  178,  315,   52,   52,  180,
  181,  316,  320,  329,  324,  327,  239,  203,  328,   52,
  203,  203,  203,  203,  203,  203,  203,  203,  211,  201,
  211,  201,  203,  203,  203,  203,  203,  203,  203,  203,
  336,   53,   53,   27,   54,  337,  338,    6,  233,  342,
  344,    7,  343,   53,   54,   54,  212,  349,  212,    9,
   10,  350,  351,  267,  213,  364,   54,  213,  213,  213,
  213,  213,  213,  213,  213,  352,  213,  213,  213,  213,
  213,  213,  213,  213,  213,  213,  213,  176,  164,  358,
  363,  365,  370,  174,  369,  371,  174,  226,  174,  174,
  174,  174,  174,  174,  374,  332,   55,   55,  174,  174,
  174,  174,  174,  174,  174,  174,  234,  186,   55,   56,
   56,  375,  376,  378,  377,  379,  380,  383,  384,  393,
  394,   56,  395,  397,  217,  398,  403,  217,  217,  217,
  217,  217,  217,  217,  217,  407,  217,  217,  217,  217,
  217,  217,  217,  217,  217,  217,  217,  180,  408,  409,
  410,  411,  211,  433,  434,  211,  211,  211,  211,  211,
  211,  211,  211,  233,  211,  211,  211,  211,  211,  211,
  211,  211,  211,  211,  211,  419,  420,  422,  357,  423,
  212,  179,  424,  212,  212,  212,  212,  212,  212,  212,
  212,  437,  212,  212,  212,  212,  212,  212,  212,  212,
  212,  212,  212,  164,  187,  438,  447,  441,  425,  176,
  426,  427,  176,  432,  176,  176,  176,  176,  176,  176,
  442,  443,  444,  445,  176,  176,  176,  176,  176,  176,
  176,  176,  186,  139,  446,  402,  448,  406,  234,  451,
  455,  234,  452,  234,  234,  234,  234,  234,  234,  453,
  457,  460,  458,  234,  234,  234,  234,  234,  234,  234,
  234,  461,  454,  137,  456,  459,   54,  462,  436,    6,
  463,  440,  180,    7,  464,  465,   55,  139,  468,  469,
    6,    9,   10,  165,   56,    4,  314,   13,  134,  129,
  168,  182,  139,   90,  109,  233,   99,  113,  233,   57,
  233,  233,  233,  233,  233,  233,  179,  137,  402,  406,
  233,  233,  233,  233,  233,  233,  233,  233,   95,   97,
  436,  440,  137,  272,   58,  210,  368,   66,   67,  187,
   68,  156,  128,  282,  172,  164,    0,   21,  164,    0,
  164,  164,  164,  164,    0,  164,    0,  134,    0,    0,
  164,  164,  164,  164,  164,  164,  164,  164,  139,    0,
  132,    0,    0,    0,  186,    0,  100,  186,    0,  186,
  186,  186,  186,    0,  186,    0,    0,    0,    0,  186,
  186,  186,  186,  186,  186,  186,  186,   54,  137,   17,
  224,    0,    0,    0,    7,    0,   21,    0,    0,    0,
    0,    0,  140,  141,  180,    0,    0,  180,    0,  180,
  180,  180,  180,  134,  180,    0,    0,    0,    0,  180,
  180,  180,  180,  180,  180,  180,  180,    0,    0,    0,
    0,    0,    0,    0,   33,    0,    0,    0,  179,    0,
    0,  179,    0,  179,  179,  179,  179,    0,  179,    0,
    0,    0,    0,  179,  179,  179,  179,  179,  179,  179,
  179,  187,   21,    0,  187,    0,  187,  187,  187,  187,
    0,  187,    0,    0,    0,    0,  187,  187,  187,  187,
  187,  187,  187,  187,    0,  132,    0,    0,    0,    0,
  139,    0,    0,  139,    0,  170,    0,  139,  139,  139,
   54,    0,    0,    6,   99,  139,  139,    7,    0,  139,
  139,  139,  139,    0,   17,    9,   10,    0,    0,    0,
  137,   13,    0,  137,    0,    0,    0,  137,  137,  137,
    0,   54,    0,    0,  138,  137,  137,    0,    7,  137,
  137,  137,  137,    0,   57,  134,  140,  141,  134,    0,
    0,    0,  134,  134,  134,    0,    0,    0,    0,    0,
  134,  134,    0,    0,  134,  134,  134,  134,    5,    0,
    0,    6,    0,  100,    0,    7,    8,    0,    0,    0,
    0,    0,    0,    9,   10,    0,    0,   11,   12,   13,
   14,    0,  298,    0,   21,    0,    0,   21,    0,    0,
    0,   21,   21,   21,  274,    0,    0,    0,    0,   21,
   21,    0,    0,   21,   21,   21,   21,  132,    0,  339,
  132,    0,    0,    0,  132,  132,  132,   54,    0,    0,
    6,    0,  132,  132,    7,    0,  132,  132,  132,  132,
    0,    0,    9,   10,  400,    0,   17,    0,   13,   17,
    0,    0,    0,   17,   17,   17,    0,    0,    0,    0,
    0,   17,   17,  404,    0,   17,   17,   17,   17,   28,
    0,   28,    0,  100,    0,    0,    0,   28,   54,    0,
   28,    6,   28,  430,    0,    7,    0,    0,   55,    0,
    0,    0,    0,    9,   10,    0,   56,    0,    0,   13,
   28,   28,    0,    0,    0,    0,    0,   54,  431,   28,
    6,    0,  167,  168,    7,    0,    0,    0,    0,    0,
    0,    0,    9,   10,   28,    0,   54,    0,   13,  138,
   28,    0,   86,    7,    0,  139,   54,    0,    0,  138,
    0,  140,  141,    7,    0,  139,   55,  297,    0,   28,
    0,  140,  141,   54,   56,   77,  138,  142,    0,    0,
    7,    0,  139,    0,    0,    0,   28,   28,  140,  141,
   28,    0,    0,    0,  142,    0,    0,    0,   54,   87,
    0,  138,    0,    0,    0,    7,    0,  139,    0,    0,
   28,    0,  205,  140,  141,   28,    0,   54,    0,  297,
  138,    0,   78,    0,    7,    0,  139,   54,    0,    0,
    6,    0,  140,  141,    7,    0,    0,   54,  297,    0,
  224,    0,    9,   10,    7,   79,    0,    0,   13,    0,
    0,    0,  140,  141,    0,    0,    0,    0,  142,   28,
   28,    0,   54,    0,   54,  224,    0,  138,  143,    7,
    0,    7,    0,  139,    0,    0,    0,  140,  141,  140,
  141,    0,    0,  142,   86,  297,   28,   86,   28,   86,
   86,   86,   86,   86,   86,   73,    0,    0,    0,   86,
   86,   86,   86,   86,   86,   86,   86,   77,    0,    0,
   77,    0,   77,   77,   77,   77,   77,   77,   81,    0,
    0,    0,   77,   77,   77,   77,   77,   77,   77,   77,
   28,   87,    0,    0,   87,    0,   87,   87,   87,   87,
   87,   87,   83,    0,    0,    0,   87,   87,   87,   87,
   87,   87,   87,   87,   78,    0,    0,   78,    0,   78,
   78,   78,   78,   78,   78,  157,    0,    0,    0,   78,
   78,   78,   78,   78,   78,   78,   78,   79,    0,    0,
   79,    0,   79,   79,   79,   79,   79,   79,  200,    0,
    0,    0,   79,   79,   79,   79,   79,   79,   79,   79,
    5,    0,    0,  138,    0,    0,    0,    7,    8,  139,
    0,  330,    0,  345,    0,  140,  141,    0,    0,   11,
   12,  142,   14,    0,    0,    0,    0,    5,    0,    0,
    6,    0,    0,    0,    7,    8,  156,    0,    0,    0,
    0,    0,    9,   10,    0,    0,   11,   12,   13,   14,
    5,    0,    0,    6,    0,  160,    0,    7,    8,    0,
    0,    0,    0,    0,    0,    9,   10,    0,    0,   11,
   12,   13,   14,    0,    5,  157,    0,    6,    0,    0,
    0,    7,    8,    0,    0,    0,    0,    0,    0,    9,
   10,    0,    0,   11,   12,   13,   14,    5,  307,    0,
    6,    0,    0,    0,    7,    8,    0,    0,    0,    0,
    0,    0,    9,   10,    0,  170,   11,   12,   13,   14,
    5,    0,    0,    6,    0,    0,    0,    7,    8,    0,
    0,    0,    0,    0,  130,    9,   10,    0,    0,   11,
   12,   13,   14,    5,    0,   54,  224,    0,  138,    0,
    7,    8,    7,  206,  139,    0,    0,    0,  140,  141,
  140,  141,   11,   12,  142,   14,  142,    0,  156,    0,
  271,  156,    0,    0,    0,  156,    0,  156,  156,    0,
    0,    0,    0,  156,  156,  156,  156,  160,    0,  156,
  160,    0,  197,    0,  160,    0,  160,  160,    0,    0,
    0,    0,  160,  160,  160,  160,    0,  157,  160,  415,
  157,    0,    0,    0,  157,    0,  157,  157,    0,  435,
    0,    0,  157,  157,  157,  157,    0,    0,  157,  439,
   54,    0,    0,  138,    0,    0,    0,    7,    0,  139,
   55,    0,    0,    0,    0,  140,  141,  170,   56,  175,
  170,  142,    0,    0,  170,    0,    0,  170,    0,  245,
    0,    0,  170,  170,  166,  170,   54,    0,  170,    6,
    0,    0,    0,    7,    0,    0,   55,    0,  435,    0,
    0,    9,   10,    0,   56,   54,    0,   13,    6,  439,
    0,    0,    7,    0,    0,   55,    0,    0,    0,    0,
    9,   10,   54,   56,    0,  224,   13,    0,    0,    7,
    0,    0,   55,    0,    0,    0,    0,  140,  141,    0,
   56,    0,    0,  142,  197,    0,    0,  197,    0,  192,
  192,  197,    0,    0,    0,    0,    0,    0,  366,  197,
  197,   54,    0,    0,  138,  197,    0,    0,    7,  372,
  139,   54,    0,  373,  138,    0,  140,  141,    7,    0,
  139,   54,  142,    0,  138,    0,  140,  141,    7,    0,
  139,    0,  297,    0,    0,    0,  140,  141,    0,    0,
    0,   54,  297,  399,    6,    0,    0,    0,    7,    0,
    0,   54,    0,    0,    6,  412,    9,   10,    7,  418,
    0,    0,   13,  421,    0,    0,    9,   10,    0,    0,
   54,    0,   13,  224,    0,    0,    0,    7,    0,    0,
    0,   54,    0,    0,  224,  140,  141,    0,    7,  449,
  450,  142,    5,    0,    0,  138,  140,  141,    0,    7,
    8,  139,  142,    0,    0,    0,    0,  140,  141,    0,
    0,   11,   12,  142,   14,    5,    0,    0,    6,    0,
    0,    0,    7,    8,    0,  470,  471,    0,    0,    0,
    9,   10,    0,    0,   11,   12,   13,   14,    5,    0,
    0,  224,    0,    0,    0,    7,    8,    0,    0,    0,
    0,    0,    0,  140,  141,    0,    0,   11,   12,  142,
   14,
};
}
static short yycheck[];
static { yycheck(); }
static void yycheck() {
yycheck = new short[] {                         79,
   40,   45,   79,    9,   40,   41,   79,   44,   59,   58,
   45,   59,   41,   59,   41,   59,  123,   79,   41,  123,
  146,  123,   45,   61,   61,  142,  123,  142,   99,   58,
   52,  142,   43,   59,   45,  123,   41,  123,  220,  123,
   45,   88,    4,   41,   43,   41,   10,  195,   61,   60,
   61,   62,   41,  257,   40,   60,   61,   62,  258,   41,
   58,  141,   40,   59,  141,   41,  146,   45,   44,  146,
   59,   33,   42,  146,   41,   10,   41,   47,   45,  141,
   40,   58,   58,   41,  146,   45,    2,   45,    4,   45,
  272,   41,  114,   57,   10,   41,   41,   13,   97,   15,
   41,   23,  173,   43,   43,   45,   45,   42,   58,  199,
   40,  201,   58,   58,   36,   58,   59,   33,   34,   59,
   59,   41,   57,  129,   44,  125,   42,   41,   63,   43,
   59,   45,  138,  274,  140,  215,   59,  262,  263,   44,
  220,   57,   44,  220,  270,  293,   41,   63,   43,   59,
   45,  123,  273,  260,   58,  257,  260,  257,  220,  266,
  257,   59,  266,  260,   99,  100,   82,  264,  103,  266,
  267,  278,  243,  261,  278,  272,  273,  261,  275,  305,
  297,  278,  297,   99,  100,  265,  297,  103,  265,  236,
  270,   59,  272,  128,   59,  272,  344,  270,  262,  263,
   41,  281,  123,  265,  281,   44,  257,  123,   58,  257,
  272,  257,  128,  257,  258,   51,   52,  257,  224,  281,
  297,   41,  257,  258,  257,  305,  142,  276,  277,  306,
  268,  268,  305,  313,  257,  258,  313,  172,  173,  123,
  276,  277,  258,  323,  306,  258,  323,  276,  277,  276,
  277,  313,  257,  258,  331,  268,  172,  173,  269,  270,
  271,  323,  262,  263,  269,  270,  271,  273,   10,  331,
    0,  257,  257,  259,  274,  257,  353,  259,  114,  257,
  258,  276,  277,  199,  258,  201,  366,  125,  260,  366,
  257,  258,  372,  373,  266,  372,  373,  257,  258,  257,
  258,  257,  258,  125,  366,  385,  278,  387,  243,  125,
  372,  373,    2,  125,    4,   57,  263,    0,   58,  399,
   10,   63,  399,   13,   59,   15,  332,  243,   59,   59,
   59,  125,  412,  413,  414,  412,  342,  399,  418,  260,
   59,  421,   58,   33,   34,  266,    0,   10,   58,   59,
  412,   58,   42,  189,  125,   15,  192,  278,   41,  195,
   43,  197,   45,  262,  263,  262,  263,   57,  257,  449,
  450,  260,  125,   63,   34,  264,   59,   60,   61,   62,
  125,  297,   58,  272,  273,   59,  128,    0,  125,  278,
  470,  471,   82,  123,   57,  125,   35,   41,   37,   43,
   63,   45,   41,   41,   41,   43,   43,   45,   45,   99,
  100,  262,  263,  103,  125,    0,  252,  253,  254,   59,
  256,  261,   82,  259,  262,  263,  274,  125,   41,   42,
   43,  125,   45,  123,   47,   59,  274,  125,  128,  273,
  123,   59,  125,    0,  262,  263,   59,   60,   61,   62,
  262,  263,  142,  263,  290,   44,   41,  293,   43,   98,
   45,  125,  274,  123,   59,  128,   59,  106,  262,  263,
  123,  125,    0,  125,   59,   60,   61,   62,  257,  125,
  274,  260,  172,  173,   41,  264,   43,  266,   45,  260,
  262,  263,  125,  272,  273,  266,  262,  263,  125,  278,
  139,    0,   59,   60,   61,   62,  261,  260,  344,  199,
  123,  201,  125,  266,  104,  105,  263,  262,  263,  107,
  108,   59,   59,   59,  263,  263,  165,  257,  262,  274,
  260,  261,  262,  263,  264,  265,  266,  267,  123,  199,
  125,  201,  272,  273,  274,  275,  276,  277,  278,  279,
  125,  262,  263,  243,  257,  125,   59,  260,    0,  274,
   44,  264,   59,  274,  262,  263,  123,   59,  125,  272,
  273,  123,   59,  212,  257,  125,  274,  260,  261,  262,
  263,  264,  265,  266,  267,   59,  269,  270,  271,  272,
  273,  274,  275,  276,  277,  278,  279,  125,    0,   59,
   59,  125,  125,  257,  262,  125,  260,  297,  262,  263,
  264,  265,  266,  267,  263,  260,  262,  263,  272,  273,
  274,  275,  276,  277,  278,  279,  125,    0,  274,  262,
  263,   59,  125,  261,  125,   59,   59,   59,  123,   59,
   59,  274,   59,  125,  257,  125,   59,  260,  261,  262,
  263,  264,  265,  266,  267,   59,  269,  270,  271,  272,
  273,  274,  275,  276,  277,  278,  279,    0,  125,  125,
  125,  125,  257,  125,  125,  260,  261,  262,  263,  264,
  265,  266,  267,  125,  269,  270,  271,  272,  273,  274,
  275,  276,  277,  278,  279,  263,  263,  263,  328,  263,
  257,    0,  263,  260,  261,  262,  263,  264,  265,  266,
  267,   59,  269,  270,  271,  272,  273,  274,  275,  276,
  277,  278,  279,  125,    0,   59,  125,   59,  263,  257,
  263,  263,  260,  263,  262,  263,  264,  265,  266,  267,
   59,   59,   59,   59,  272,  273,  274,  275,  276,  277,
  278,  279,  125,    0,   59,  385,  125,  387,  257,   59,
  125,  260,  263,  262,  263,  264,  265,  266,  267,  263,
  125,   59,  262,  272,  273,  274,  275,  276,  277,  278,
  279,   59,  263,    0,  263,  262,  257,   59,  418,  260,
  263,  421,  125,  264,   59,  263,  267,   44,   59,   59,
    0,  272,  273,   58,  275,    0,  281,  278,    0,  257,
  274,  125,   59,  274,  123,  257,  274,  123,  260,  262,
  262,  263,  264,  265,  266,  267,  125,   44,  458,  459,
  272,  273,  274,  275,  276,  277,  278,  279,  274,  274,
  470,  471,   59,  215,  262,  136,  344,   13,   13,  125,
   13,   80,   57,  236,  100,  257,   -1,    0,  260,   -1,
  262,  263,  264,  265,   -1,  267,   -1,   59,   -1,   -1,
  272,  273,  274,  275,  276,  277,  278,  279,  125,   -1,
    0,   -1,   -1,   -1,  257,   -1,  123,  260,   -1,  262,
  263,  264,  265,   -1,  267,   -1,   -1,   -1,   -1,  272,
  273,  274,  275,  276,  277,  278,  279,  257,  125,    0,
  260,   -1,   -1,   -1,  264,   -1,   59,   -1,   -1,   -1,
   -1,   -1,  272,  273,  257,   -1,   -1,  260,   -1,  262,
  263,  264,  265,  125,  267,   -1,   -1,   -1,   -1,  272,
  273,  274,  275,  276,  277,  278,  279,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,  123,   -1,   -1,   -1,  257,   -1,
   -1,  260,   -1,  262,  263,  264,  265,   -1,  267,   -1,
   -1,   -1,   -1,  272,  273,  274,  275,  276,  277,  278,
  279,  257,  125,   -1,  260,   -1,  262,  263,  264,  265,
   -1,  267,   -1,   -1,   -1,   -1,  272,  273,  274,  275,
  276,  277,  278,  279,   -1,  125,   -1,   -1,   -1,   -1,
  257,   -1,   -1,  260,   -1,  125,   -1,  264,  265,  266,
  257,   -1,   -1,  260,  261,  272,  273,  264,   -1,  276,
  277,  278,  279,   -1,  125,  272,  273,   -1,   -1,   -1,
  257,  278,   -1,  260,   -1,   -1,   -1,  264,  265,  266,
   -1,  257,   -1,   -1,  260,  272,  273,   -1,  264,  276,
  277,  278,  279,   -1,  123,  257,  272,  273,  260,   -1,
   -1,   -1,  264,  265,  266,   -1,   -1,   -1,   -1,   -1,
  272,  273,   -1,   -1,  276,  277,  278,  279,  257,   -1,
   -1,  260,   -1,  123,   -1,  264,  265,   -1,   -1,   -1,
   -1,   -1,   -1,  272,  273,   -1,   -1,  276,  277,  278,
  279,   -1,  123,   -1,  257,   -1,   -1,  260,   -1,   -1,
   -1,  264,  265,  266,  125,   -1,   -1,   -1,   -1,  272,
  273,   -1,   -1,  276,  277,  278,  279,  257,   -1,  123,
  260,   -1,   -1,   -1,  264,  265,  266,  257,   -1,   -1,
  260,   -1,  272,  273,  264,   -1,  276,  277,  278,  279,
   -1,   -1,  272,  273,  123,   -1,  257,   -1,  278,  260,
   -1,   -1,   -1,  264,  265,  266,   -1,   -1,   -1,   -1,
   -1,  272,  273,  123,   -1,  276,  277,  278,  279,    2,
   -1,    4,   -1,  123,   -1,   -1,   -1,   10,  257,   -1,
   13,  260,   15,  123,   -1,  264,   -1,   -1,  267,   -1,
   -1,   -1,   -1,  272,  273,   -1,  275,   -1,   -1,  278,
   33,   34,   -1,   -1,   -1,   -1,   -1,  257,  123,   42,
  260,   -1,  262,  263,  264,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,  272,  273,   57,   -1,  257,   -1,  278,  260,
   63,   -1,  125,  264,   -1,  266,  257,   -1,   -1,  260,
   -1,  272,  273,  264,   -1,  266,  267,  278,   -1,   82,
   -1,  272,  273,  257,  275,  125,  260,  278,   -1,   -1,
  264,   -1,  266,   -1,   -1,   -1,   99,  100,  272,  273,
  103,   -1,   -1,   -1,  278,   -1,   -1,   -1,  257,  125,
   -1,  260,   -1,   -1,   -1,  264,   -1,  266,   -1,   -1,
  123,   -1,  125,  272,  273,  128,   -1,  257,   -1,  278,
  260,   -1,  125,   -1,  264,   -1,  266,  257,   -1,   -1,
  260,   -1,  272,  273,  264,   -1,   -1,  257,  278,   -1,
  260,   -1,  272,  273,  264,  125,   -1,   -1,  278,   -1,
   -1,   -1,  272,  273,   -1,   -1,   -1,   -1,  278,  172,
  173,   -1,  257,   -1,  257,  260,   -1,  260,  125,  264,
   -1,  264,   -1,  266,   -1,   -1,   -1,  272,  273,  272,
  273,   -1,   -1,  278,  257,  278,  199,  260,  201,  262,
  263,  264,  265,  266,  267,  125,   -1,   -1,   -1,  272,
  273,  274,  275,  276,  277,  278,  279,  257,   -1,   -1,
  260,   -1,  262,  263,  264,  265,  266,  267,  125,   -1,
   -1,   -1,  272,  273,  274,  275,  276,  277,  278,  279,
  243,  257,   -1,   -1,  260,   -1,  262,  263,  264,  265,
  266,  267,  125,   -1,   -1,   -1,  272,  273,  274,  275,
  276,  277,  278,  279,  257,   -1,   -1,  260,   -1,  262,
  263,  264,  265,  266,  267,  125,   -1,   -1,   -1,  272,
  273,  274,  275,  276,  277,  278,  279,  257,   -1,   -1,
  260,   -1,  262,  263,  264,  265,  266,  267,  125,   -1,
   -1,   -1,  272,  273,  274,  275,  276,  277,  278,  279,
  257,   -1,   -1,  260,   -1,   -1,   -1,  264,  265,  266,
   -1,  125,   -1,  125,   -1,  272,  273,   -1,   -1,  276,
  277,  278,  279,   -1,   -1,   -1,   -1,  257,   -1,   -1,
  260,   -1,   -1,   -1,  264,  265,  125,   -1,   -1,   -1,
   -1,   -1,  272,  273,   -1,   -1,  276,  277,  278,  279,
  257,   -1,   -1,  260,   -1,  125,   -1,  264,  265,   -1,
   -1,   -1,   -1,   -1,   -1,  272,  273,   -1,   -1,  276,
  277,  278,  279,   -1,  257,  125,   -1,  260,   -1,   -1,
   -1,  264,  265,   -1,   -1,   -1,   -1,   -1,   -1,  272,
  273,   -1,   -1,  276,  277,  278,  279,  257,  125,   -1,
  260,   -1,   -1,   -1,  264,  265,   -1,   -1,   -1,   -1,
   -1,   -1,  272,  273,   -1,  125,  276,  277,  278,  279,
  257,   -1,   -1,  260,   -1,   -1,   -1,  264,  265,   -1,
   -1,   -1,   -1,   -1,  125,  272,  273,   -1,   -1,  276,
  277,  278,  279,  257,   -1,  257,  260,   -1,  260,   -1,
  264,  265,  264,  125,  266,   -1,   -1,   -1,  272,  273,
  272,  273,  276,  277,  278,  279,  278,   -1,  257,   -1,
  125,  260,   -1,   -1,   -1,  264,   -1,  266,  267,   -1,
   -1,   -1,   -1,  272,  273,  274,  275,  257,   -1,  278,
  260,   -1,  125,   -1,  264,   -1,  266,  267,   -1,   -1,
   -1,   -1,  272,  273,  274,  275,   -1,  257,  278,  125,
  260,   -1,   -1,   -1,  264,   -1,  266,  267,   -1,  125,
   -1,   -1,  272,  273,  274,  275,   -1,   -1,  278,  125,
  257,   -1,   -1,  260,   -1,   -1,   -1,  264,   -1,  266,
  267,   -1,   -1,   -1,   -1,  272,  273,  257,  275,  125,
  260,  278,   -1,   -1,  264,   -1,   -1,  267,   -1,  125,
   -1,   -1,  272,  273,  274,  275,  257,   -1,  278,  260,
   -1,   -1,   -1,  264,   -1,   -1,  267,   -1,  125,   -1,
   -1,  272,  273,   -1,  275,  257,   -1,  278,  260,  125,
   -1,   -1,  264,   -1,   -1,  267,   -1,   -1,   -1,   -1,
  272,  273,  257,  275,   -1,  260,  278,   -1,   -1,  264,
   -1,   -1,  267,   -1,   -1,   -1,   -1,  272,  273,   -1,
  275,   -1,   -1,  278,  257,   -1,   -1,  260,   -1,  262,
  263,  264,   -1,   -1,   -1,   -1,   -1,   -1,  339,  272,
  273,  257,   -1,   -1,  260,  278,   -1,   -1,  264,  350,
  266,  257,   -1,  354,  260,   -1,  272,  273,  264,   -1,
  266,  257,  278,   -1,  260,   -1,  272,  273,  264,   -1,
  266,   -1,  278,   -1,   -1,   -1,  272,  273,   -1,   -1,
   -1,  257,  278,  384,  260,   -1,   -1,   -1,  264,   -1,
   -1,  257,   -1,   -1,  260,  396,  272,  273,  264,  400,
   -1,   -1,  278,  404,   -1,   -1,  272,  273,   -1,   -1,
  257,   -1,  278,  260,   -1,   -1,   -1,  264,   -1,   -1,
   -1,  257,   -1,   -1,  260,  272,  273,   -1,  264,  430,
  431,  278,  257,   -1,   -1,  260,  272,  273,   -1,  264,
  265,  266,  278,   -1,   -1,   -1,   -1,  272,  273,   -1,
   -1,  276,  277,  278,  279,  257,   -1,   -1,  260,   -1,
   -1,   -1,  264,  265,   -1,  466,  467,   -1,   -1,   -1,
  272,  273,   -1,   -1,  276,  277,  278,  279,  257,   -1,
   -1,  260,   -1,   -1,   -1,  264,  265,   -1,   -1,   -1,
   -1,   -1,   -1,  272,  273,   -1,   -1,  276,  277,  278,
  279,
};
}
final static short YYFINAL=3;
final static short YYMAXTOKEN=279;
final static String yyname[] = {
"end-of-file",null,null,null,null,null,null,null,null,null,null,null,null,null,
null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,
null,null,null,null,null,null,null,null,null,null,"'('","')'","'*'","'+'","','",
"'-'",null,"'/'",null,null,null,null,null,null,null,null,null,null,"':'","';'",
"'<'","'='","'>'",null,null,null,null,null,null,null,null,null,null,null,null,
null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,
null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,
null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,
"'{'",null,"'}'",null,null,null,null,null,null,null,null,null,null,null,null,
null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,
null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,
null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,
null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,
null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,
null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,
null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,
null,null,null,null,null,null,null,"ID","CTE","CADENA","IF","THEN","ELSE",
"ENDIF","OUT","FUN","RETURN","BREAK","ASIGNACION","COMP_MAYOR_IGUAL",
"COMP_MENOR_IGUAL","COMP_DISTINTO","WHEN","DO","UNTIL","CONTINUE","DOUBLE64",
"UINT16","DEFER","CONST",
};
final static String yyrule[] = {
"$accept : programa",
"programa : nombre_programa '{' sentencias '}'",
"programa : '{' sentencias '}'",
"programa : nombre_programa sentencias '}'",
"programa : nombre_programa '{' sentencias",
"programa : nombre_programa '{' '}'",
"programa :",
"nombre_programa : ID",
"sentencias : sentencia",
"sentencias : sentencias sentencia",
"sentencia : sentencia_declarativa",
"sentencia : sentencia_ejecutable",
"sentencia_declarativa : sentencia_declarativa_variables",
"sentencia_declarativa : funcion_con_return",
"sentencia_declarativa : funcion_sin_return",
"sentencia_declarativa : declaracion_constantes",
"sentencia_declarativa_variables : tipo lista_de_variables ';'",
"sentencia_declarativa_variables : tipo lista_de_variables",
"sentencia_declarativa_variables : lista_de_variables ';'",
"sentencia_declarativa_variables : tipo ';'",
"lista_de_variables : ID ',' lista_de_variables",
"lista_de_variables : ID",
"funcion_con_return : encabezado_funcion '{' sentencia_return '}'",
"funcion_con_return : encabezado_funcion '{' sentencias_funcion sentencia_return '}'",
"funcion_con_return : encabezado_funcion '{' '}'",
"sentencias_funcion : sentencia_funcion",
"sentencias_funcion : sentencias_funcion sentencia_funcion",
"sentencia_funcion : sentencia_declarativa",
"sentencia_funcion : sentencia_ejecutable_funcion",
"sentencia_ejecutable_funcion : asignacion",
"sentencia_ejecutable_funcion : DEFER asignacion",
"sentencia_ejecutable_funcion : imprimir",
"sentencia_ejecutable_funcion : DEFER imprimir",
"sentencia_ejecutable_funcion : sentencia_when_con_return",
"sentencia_ejecutable_funcion : DEFER sentencia_when_con_return",
"sentencia_ejecutable_funcion : sentencia_do_con_return",
"sentencia_ejecutable_funcion : DEFER sentencia_do_con_return",
"sentencia_ejecutable_funcion : sentencia_seleccion_simple_con_return",
"sentencia_ejecutable_funcion : DEFER sentencia_seleccion_simple_con_return",
"sentencias_ejecutables_funcion : sentencia_ejecutable_funcion",
"sentencias_ejecutables_funcion : sentencias_ejecutables_funcion sentencia_ejecutable_funcion",
"funcion_sin_return : encabezado_funcion '{' sentencia_seleccion_compuesta_con_return '}'",
"funcion_sin_return : encabezado_funcion '{' sentencias_funcion sentencia_seleccion_compuesta_con_return '}'",
"sentencia_seleccion_compuesta_con_return : IF condicion THEN sentencia_seleccion_compuesta_con_return_simple ELSE sentencia_seleccion_compuesta_con_return_simple ENDIF ';'",
"sentencia_seleccion_compuesta_con_return : IF condicion THEN '{' sentencias_ejecutables_funcion sentencia_return '}' ELSE sentencia_seleccion_compuesta_con_return_simple ENDIF ';'",
"sentencia_seleccion_compuesta_con_return : IF condicion THEN '{' sentencias_ejecutables_funcion sentencia_seleccion_compuesta_con_return '}' ELSE sentencia_seleccion_compuesta_con_return_simple ENDIF ';'",
"sentencia_seleccion_compuesta_con_return : IF condicion THEN sentencia_seleccion_compuesta_con_return_simple ELSE '{' sentencias_ejecutables_funcion sentencia_return '}' ENDIF ';'",
"sentencia_seleccion_compuesta_con_return : IF condicion THEN sentencia_seleccion_compuesta_con_return_simple ELSE '{' sentencias_ejecutables_funcion sentencia_seleccion_compuesta_con_return '}' ENDIF ';'",
"sentencia_seleccion_compuesta_con_return : IF condicion THEN '{' sentencias_ejecutables_funcion sentencia_return '}' ELSE '{' sentencias_ejecutables_funcion sentencia_seleccion_compuesta_con_return_simple '}' ENDIF ';'",
"sentencia_seleccion_compuesta_con_return : IF condicion THEN '{' sentencias_ejecutables_funcion sentencia_seleccion_compuesta_con_return '}' ELSE '{' sentencias_ejecutables_funcion sentencia_seleccion_compuesta_con_return_simple '}' ENDIF ';'",
"sentencia_seleccion_compuesta_con_return : IF condicion THEN sentencia_seleccion_compuesta_con_return_simple ELSE sentencia_seleccion_compuesta_con_return_simple ENDIF",
"sentencia_seleccion_compuesta_con_return : IF condicion THEN '{' sentencias_ejecutables_funcion sentencia_return '}' ELSE sentencia_seleccion_compuesta_con_return_simple ENDIF",
"sentencia_seleccion_compuesta_con_return : IF condicion THEN '{' sentencias_ejecutables_funcion sentencia_seleccion_compuesta_con_return '}' ELSE sentencia_seleccion_compuesta_con_return_simple ENDIF",
"sentencia_seleccion_compuesta_con_return : IF condicion THEN sentencia_seleccion_compuesta_con_return_simple ELSE '{' sentencias_ejecutables_funcion sentencia_return '}' ENDIF",
"sentencia_seleccion_compuesta_con_return : IF condicion THEN sentencia_seleccion_compuesta_con_return_simple ELSE '{' sentencias_ejecutables_funcion sentencia_seleccion_compuesta_con_return '}' ENDIF",
"sentencia_seleccion_compuesta_con_return : IF condicion THEN '{' sentencias_ejecutables_funcion sentencia_return '}' ELSE '{' sentencias_ejecutables_funcion sentencia_seleccion_compuesta_con_return_simple '}' ENDIF",
"sentencia_seleccion_compuesta_con_return : IF condicion THEN '{' sentencias_ejecutables_funcion sentencia_seleccion_compuesta_con_return '}' ELSE '{' sentencias_ejecutables_funcion sentencia_seleccion_compuesta_con_return_simple '}' ENDIF",
"sentencia_seleccion_compuesta_con_return_simple : sentencia_return",
"sentencia_seleccion_compuesta_con_return_simple : sentencia_seleccion_compuesta_con_return",
"sentencia_seleccion_compuesta_con_return_simple : DEFER sentencia_seleccion_compuesta_con_return",
"sentencia_seleccion_simple_con_return : IF condicion THEN sentencia_return ENDIF ';'",
"sentencia_seleccion_simple_con_return : IF condicion THEN sentencia_seleccion_compuesta_con_return ENDIF ';'",
"sentencia_seleccion_simple_con_return : IF condicion THEN sentencia_ejecutable_funcion ENDIF ';'",
"sentencia_seleccion_simple_con_return : IF condicion THEN '{' sentencias_ejecutables_funcion sentencia_return '}' ENDIF ';'",
"sentencia_seleccion_simple_con_return : IF condicion THEN '{' sentencias_ejecutables_funcion sentencia_seleccion_compuesta_con_return '}' ENDIF ';'",
"sentencia_seleccion_simple_con_return : IF condicion THEN '{' sentencias_ejecutables_funcion sentencia_return '}' ELSE '{' sentencias_ejecutables_funcion '}' ENDIF ';'",
"sentencia_seleccion_simple_con_return : IF condicion THEN '{' sentencias_ejecutables_funcion sentencia_return '}' ELSE sentencia_ejecutable_funcion ENDIF ';'",
"sentencia_seleccion_simple_con_return : IF condicion THEN '{' sentencias_ejecutables_funcion sentencia_seleccion_compuesta_con_return '}' ELSE sentencia_ejecutable_funcion ENDIF ';'",
"sentencia_seleccion_simple_con_return : IF condicion THEN '{' sentencias_ejecutables_funcion sentencia_seleccion_compuesta_con_return '}' ELSE '{' sentencias_ejecutables_funcion '}' ENDIF ';'",
"sentencia_seleccion_simple_con_return : IF condicion THEN '{' sentencias_ejecutables_funcion '}' ELSE '{' sentencias_ejecutables_funcion sentencia_return '}' ENDIF ';'",
"sentencia_seleccion_simple_con_return : IF condicion THEN '{' sentencias_ejecutables_funcion '}' ELSE '{' sentencias_ejecutables_funcion sentencia_seleccion_compuesta_con_return '}' ENDIF ';'",
"sentencia_seleccion_simple_con_return : IF condicion THEN sentencia_ejecutable_funcion ELSE '{' sentencias_ejecutables_funcion sentencia_return '}' ENDIF ';'",
"sentencia_seleccion_simple_con_return : IF condicion THEN sentencia_ejecutable_funcion ELSE '{' sentencias_ejecutables_funcion sentencia_seleccion_compuesta_con_return '}' ENDIF ';'",
"sentencia_seleccion_simple_con_return : IF condicion THEN '{' sentencias_ejecutables_funcion '}' ELSE '{' sentencias_ejecutables_funcion '}' ENDIF ';'",
"sentencia_when_con_return : WHEN condicion THEN '{' sentencia_funcion '}' ';'",
"sentencia_when_con_return : WHEN condicion THEN '{' sentencia_funcion sentencia_return '}' ';'",
"sentencia_when_con_return : WHEN condicion THEN '{' sentencia_funcion sentencia_seleccion_compuesta_con_return '}' ';'",
"sentencia_when_con_return : WHEN condicion THEN '{' sentencia_funcion '}'",
"sentencia_when_con_return : WHEN condicion THEN '{' sentencia_funcion sentencia_return '}'",
"sentencia_when_con_return : WHEN condicion THEN '{' sentencia_funcion sentencia_seleccion_compuesta_con_return '}'",
"sentencia_when_con_return : WHEN condicion THEN '{' '}' ';'",
"sentencia_when_con_return : WHEN condicion '{' sentencia_funcion '}' ';'",
"sentencia_when_con_return : WHEN condicion '{' sentencia_funcion sentencia_return '}' ';'",
"sentencia_when_con_return : WHEN condicion '{' sentencia_funcion sentencia_seleccion_compuesta_con_return '}' ';'",
"sentencia_do_con_return : DO bloque_sentencias_ejecutables_do_con_return UNTIL condicion ';'",
"sentencia_do_con_return : etiqueta ':' DO bloque_sentencias_ejecutables_do_con_return UNTIL condicion ';'",
"sentencia_do_con_return : DO bloque_sentencias_ejecutables_do_con_return UNTIL condicion",
"sentencia_do_con_return : etiqueta ':' DO bloque_sentencias_ejecutables_do_con_return UNTIL condicion",
"bloque_sentencias_ejecutables_do_con_return : sentencia_return",
"bloque_sentencias_ejecutables_do_con_return : sentencia_seleccion_compuesta_con_return",
"bloque_sentencias_ejecutables_do_con_return : sentencias_ejecutables_do_funcion",
"bloque_sentencias_ejecutables_do_con_return : '{' sentencias_ejecutables_do_funcion sentencia_return '}'",
"bloque_sentencias_ejecutables_do_con_return : '{' sentencias_ejecutables_do_funcion sentencia_seleccion_compuesta_con_return '}'",
"bloque_sentencias_ejecutables_do_con_return : '{' sentencias_ejecutables_do_funcion '}'",
"bloque_sentencias_ejecutables_do_con_return : '{' '}'",
"bloque_sentencias_ejecutables_do_con_return : '{' sentencias_ejecutables_do_funcion sentencia_return",
"bloque_sentencias_ejecutables_do_con_return : sentencias_ejecutables_do_funcion sentencia_return '}'",
"bloque_sentencias_ejecutables_do_con_return : '{' sentencias_ejecutables_do_funcion sentencia_seleccion_compuesta_con_return",
"bloque_sentencias_ejecutables_do_con_return : sentencias_ejecutables_do_funcion sentencia_seleccion_compuesta_con_return '}'",
"bloque_sentencias_ejecutables_do_con_return : '{' sentencias_ejecutables_do_funcion",
"bloque_sentencias_ejecutables_do_con_return : sentencias_ejecutables_do_funcion '}'",
"sentencias_ejecutables_do_funcion : sentencia_ejecutable_do_funcion",
"sentencias_ejecutables_do_funcion : sentencias_ejecutables_do_funcion sentencia_ejecutable_do_funcion",
"sentencia_ejecutable_do_funcion : sentencia_ejecutable_funcion",
"sentencia_ejecutable_do_funcion : sentencia_break",
"sentencia_ejecutable_do_funcion : sentencia_continue",
"encabezado_funcion : FUN ID '(' ')' ':' tipo",
"encabezado_funcion : FUN ID '(' lista_de_parametros ')' ':' tipo",
"encabezado_funcion : FUN ID '(' lista_de_parametros ')' tipo",
"encabezado_funcion : FUN ID '(' ')' ':'",
"encabezado_funcion : FUN '(' ')' ':' tipo",
"encabezado_funcion : FUN ID ')' ':' tipo",
"encabezado_funcion : FUN ID '(' ':' tipo",
"encabezado_funcion : FUN ID '(' lista_de_parametros ')' ':'",
"encabezado_funcion : FUN '(' lista_de_parametros ')' ':' tipo",
"encabezado_funcion : FUN ID lista_de_parametros ')' ':' tipo",
"encabezado_funcion : FUN ID '(' lista_de_parametros ':' tipo",
"sentencia_return : RETURN '(' expresion ')' ';'",
"sentencia_return : RETURN '(' expresion ')'",
"sentencia_return : RETURN expresion ')'",
"sentencia_return : RETURN '(' expresion",
"sentencia_return : RETURN '(' ')' ';'",
"lista_de_parametros : parametro",
"lista_de_parametros : parametro ',' parametro",
"lista_de_parametros : parametro ',' parametro ',' lista_parametros_exceso",
"lista_parametros_exceso : parametro",
"lista_parametros_exceso : parametro ',' lista_parametros_exceso",
"parametro : tipo ID",
"parametro : tipo",
"$$1 :",
"parametro : $$1 ID",
"declaracion_constantes : CONST lista_declaracion_constantes ';'",
"declaracion_constantes : CONST lista_declaracion_constantes",
"declaracion_constantes : CONST ';'",
"lista_declaracion_constantes : declaracion_constante",
"lista_declaracion_constantes : declaracion_constante ',' lista_declaracion_constantes",
"declaracion_constante : ID ASIGNACION CTE",
"declaracion_constante : ID ASIGNACION",
"declaracion_constante : ID CTE",
"declaracion_constante : ID",
"declaracion_constante : ID '=' CTE",
"sentencia_ejecutable : asignacion",
"sentencia_ejecutable : DEFER asignacion",
"sentencia_ejecutable : seleccion",
"sentencia_ejecutable : DEFER seleccion",
"sentencia_ejecutable : imprimir",
"sentencia_ejecutable : DEFER imprimir",
"sentencia_ejecutable : sentencia_when",
"sentencia_ejecutable : DEFER sentencia_when",
"sentencia_ejecutable : sentencia_do",
"sentencia_ejecutable : DEFER sentencia_do",
"sentencia_ejecutable_do : sentencia_ejecutable",
"sentencia_ejecutable_do : sentencia_break",
"sentencia_ejecutable_do : sentencia_continue",
"sentencia_break : BREAK ';'",
"sentencia_break : BREAK ':' etiqueta ';'",
"sentencia_break : BREAK",
"sentencia_break : BREAK ':' etiqueta",
"sentencia_break : BREAK ':' ';'",
"sentencia_continue : CONTINUE ';'",
"sentencia_continue : CONTINUE",
"sentencia_do : sentencia_do_simple",
"sentencia_do : etiqueta ':' sentencia_do_simple",
"sentencia_do_simple : DO bloque_sentencias_ejecutables_do UNTIL condicion ';'",
"sentencia_do_simple : DO bloque_sentencias_ejecutables_do UNTIL condicion",
"etiqueta : ID",
"bloque_sentencias_ejecutables_do : sentencia_ejecutable_do",
"bloque_sentencias_ejecutables_do : '{' sentencias_ejecutables_do '}'",
"bloque_sentencias_ejecutables_do : '{' sentencias_ejecutables_do",
"bloque_sentencias_ejecutables_do : sentencias_ejecutables_do '}'",
"sentencias_ejecutables_do : sentencia_ejecutable_do",
"sentencias_ejecutables_do : sentencias_ejecutables_do sentencia_ejecutable_do",
"asignacion : ID ASIGNACION expresion ';'",
"asignacion : ID ASIGNACION ';'",
"asignacion : ID ASIGNACION expresion",
"asignacion : ID '=' expresion ';'",
"asignacion : ID '=' expresion",
"sentencia_when : WHEN condicion THEN '{' sentencias_when '}' ';'",
"sentencia_when : WHEN condicion '{' sentencias_when '}' ';'",
"sentencia_when : WHEN condicion THEN '{' sentencias_when '}'",
"sentencia_when : WHEN condicion '{' sentencias_when '}'",
"sentencia_when : WHEN condicion '{' '}'",
"sentencias_when : sentencia",
"sentencias_when : sentencia sentencias_when",
"seleccion : IF condicion THEN bloque_sentencias_ejecutables_seleccion ENDIF ';'",
"seleccion : IF condicion THEN bloque_sentencias_ejecutables_seleccion ELSE bloque_sentencias_ejecutables_seleccion ENDIF ';'",
"seleccion : IF condicion THEN bloque_sentencias_ejecutables_seleccion ENDIF",
"seleccion : IF condicion THEN bloque_sentencias_ejecutables_seleccion ELSE bloque_sentencias_ejecutables_seleccion ENDIF",
"seleccion : IF condicion THEN ENDIF ';'",
"seleccion : IF condicion bloque_sentencias_ejecutables_seleccion ENDIF ';'",
"seleccion : IF condicion bloque_sentencias_ejecutables_seleccion ELSE bloque_sentencias_ejecutables_seleccion ENDIF ';'",
"seleccion : IF condicion THEN ELSE ENDIF ';'",
"bloque_sentencias_ejecutables_seleccion : sentencia_ejecutable",
"bloque_sentencias_ejecutables_seleccion : '{' sentencias_ejecutables '}'",
"bloque_sentencias_ejecutables_seleccion : '{' '}'",
"bloque_sentencias_ejecutables_seleccion : '{' sentencias_ejecutables",
"bloque_sentencias_ejecutables_seleccion : sentencias_ejecutables '}'",
"sentencias_ejecutables : sentencia_ejecutable",
"sentencias_ejecutables : sentencias_ejecutables sentencia_ejecutable",
"condicion : '(' expresion comparador expresion ')'",
"condicion : '(' expresion comparador ')'",
"condicion : '(' comparador expresion ')'",
"condicion : expresion comparador expresion ')'",
"condicion : '(' expresion comparador expresion",
"condicion : '(' ')'",
"comparador : COMP_MAYOR_IGUAL",
"comparador : COMP_MENOR_IGUAL",
"comparador : COMP_DISTINTO",
"comparador : '>'",
"comparador : '<'",
"comparador : '='",
"expresion : expresion '+' termino",
"expresion : expresion '-' termino",
"expresion : termino",
"termino : termino '*' factor",
"termino : termino '/' factor",
"termino : factor",
"factor : ID",
"factor : constante",
"factor : invocacion_funcion",
"invocacion_funcion : ID '(' ')'",
"invocacion_funcion : ID '(' lista_de_parametros_reales ')'",
"lista_de_parametros_reales : parametro_real",
"lista_de_parametros_reales : lista_de_parametros_reales ',' parametro_real",
"parametro_real : ID",
"parametro_real : constante",
"imprimir : OUT '(' CADENA ')' ';'",
"imprimir : OUT '(' ID ')' ';'",
"imprimir : OUT '(' ')' ';'",
"imprimir : OUT CADENA ')' ';'",
"imprimir : OUT '(' CADENA ';'",
"imprimir : OUT ID ')' ';'",
"imprimir : OUT '(' ID ';'",
"imprimir : OUT '(' CADENA ')'",
"imprimir : OUT '(' ID ')'",
"constante : CTE",
"constante : '-' CTE",
"tipo : UINT16",
"tipo : DOUBLE64",
};

//#line 442 ".\gramatica.y"

public static AnalizadorLexico lexico = null;
public static Logger logger = Logger.getInstance();
public static TablaDeSimbolos ts = TablaDeSimbolos.getInstance();
public static Parser parser = null;

public static StringBuilder negConstante = new StringBuilder();

public void constanteConSigno(String constante) {
	if (constante.contains(".")) {

		negConstante.setLength(0);
		negConstante.append("-");
		negConstante.append(constante);
		
		Double parsedDouble = Double.parseDouble(negConstante.toString().replace('D', 'E'));
		
		if (parsedDouble < -2.2250738585072014E-308 && -1.7976931348623157E+308 > parsedDouble) {
			logger.logWarning("[Parser] Rango invalido para la constante: " + negConstante + ", se trunca al rango permitido");
			
			if (-1.7976931348623157E+308 < parsedDouble) {
				negConstante.setLength(0);
				negConstante.append("-1.7976931348623157D+308");
			} else {
				negConstante.setLength(0);
				negConstante.append("-2.2250738585072014D-308");
			}
		}
		
		ts.swapLexemas(constante, negConstante.toString());
	} else {
		//se recibio un uint que fue aceptado por el lexico pero resulta ser negativo
		logger.logWarning("[Parser] No se admiten ui16 con valores negativos: " + "-"+constante + ", se trunca a 0");
		
		ts.swapLexemas(constante, "0");
	}
}	

public int yylex() {
	return lexico.yylex(parser);
}

public void yyerror(String error) {
	logger.logError(error);
}

public static void main(String[] args) {
	if (args.length == 0) {
		System.err.println("No se especifico ningun archivo de codigo");
	} else {
		String archivo_a_leer = args[0];
		System.out.println("Se va a leer archivo " + archivo_a_leer);
		
		FileReaderHelper fileHelper = new FileReaderHelper();
		
		boolean fileOpenSuccess = fileHelper.open(archivo_a_leer);
		
		if (fileOpenSuccess) {
			parser = new Parser();
			lexico = new AnalizadorLexico(fileHelper);
			
	        parser.run();
	
			String path = new File(archivo_a_leer).getAbsolutePath();
	        
	        Output out = new Output(path);
	        
	        String printTs = ts.print();
	        
	        out.saveFile("codigo-lexico.txt", logger.getLexico());
			out.saveFile("codigo-sintetico.txt", logger.getSintactico());
			out.saveFile("tabla-de-simbolos.txt", printTs);
	        
			System.out.println(printTs);
		}
	}
}
//#line 1090 "Parser.java"
//###############################################################
// method: yylexdebug : check lexer state
//###############################################################
void yylexdebug(int state,int ch)
{
String s=null;
  if (ch < 0) ch=0;
  if (ch <= YYMAXTOKEN) //check index bounds
     s = yyname[ch];    //now get it
  if (s==null)
    s = "illegal-symbol";
  debug("state "+state+", reading "+ch+" ("+s+")");
}





//The following are now global, to aid in error reporting
int yyn;       //next next thing to do
int yym;       //
int yystate;   //current parsing state from state table
String yys;    //current token string


//###############################################################
// method: yyparse : parse input and execute indicated items
//###############################################################
int yyparse()
{
boolean doaction;
  init_stacks();
  yynerrs = 0;
  yyerrflag = 0;
  yychar = -1;          //impossible char forces a read
  yystate=0;            //initial state
  state_push(yystate);  //save it
  val_push(yylval);     //save empty value
  while (true) //until parsing is done, either correctly, or w/error
    {
    doaction=true;
    if (yydebug) debug("loop"); 
    //#### NEXT ACTION (from reduction table)
    for (yyn=yydefred[yystate];yyn==0;yyn=yydefred[yystate])
      {
      if (yydebug) debug("yyn:"+yyn+"  state:"+yystate+"  yychar:"+yychar);
      if (yychar < 0)      //we want a char?
        {
        yychar = yylex();  //get next token
        if (yydebug) debug(" next yychar:"+yychar);
        //#### ERROR CHECK ####
        if (yychar < 0)    //it it didn't work/error
          {
          yychar = 0;      //change it to default string (no -1!)
          if (yydebug)
            yylexdebug(yystate,yychar);
          }
        }//yychar<0
      yyn = yysindex[yystate];  //get amount to shift by (shift index)
      if ((yyn != 0) && (yyn += yychar) >= 0 &&
          yyn <= YYTABLESIZE && yycheck[yyn] == yychar)
        {
        if (yydebug)
          debug("state "+yystate+", shifting to state "+yytable[yyn]);
        //#### NEXT STATE ####
        yystate = yytable[yyn];//we are in a new state
        state_push(yystate);   //save it
        val_push(yylval);      //push our lval as the input for next rule
        yychar = -1;           //since we have 'eaten' a token, say we need another
        if (yyerrflag > 0)     //have we recovered an error?
           --yyerrflag;        //give ourselves credit
        doaction=false;        //but don't process yet
        break;   //quit the yyn=0 loop
        }

    yyn = yyrindex[yystate];  //reduce
    if ((yyn !=0 ) && (yyn += yychar) >= 0 &&
            yyn <= YYTABLESIZE && yycheck[yyn] == yychar)
      {   //we reduced!
      if (yydebug) debug("reduce");
      yyn = yytable[yyn];
      doaction=true; //get ready to execute
      break;         //drop down to actions
      }
    else //ERROR RECOVERY
      {
      if (yyerrflag==0)
        {
        yyerror("syntax error");
        yynerrs++;
        }
      if (yyerrflag < 3) //low error count?
        {
        yyerrflag = 3;
        while (true)   //do until break
          {
          if (stateptr<0)   //check for under & overflow here
            {
            yyerror("stack underflow. aborting...");  //note lower case 's'
            return 1;
            }
          yyn = yysindex[state_peek(0)];
          if ((yyn != 0) && (yyn += YYERRCODE) >= 0 &&
                    yyn <= YYTABLESIZE && yycheck[yyn] == YYERRCODE)
            {
            if (yydebug)
              debug("state "+state_peek(0)+", error recovery shifting to state "+yytable[yyn]+" ");
            yystate = yytable[yyn];
            state_push(yystate);
            val_push(yylval);
            doaction=false;
            break;
            }
          else
            {
            if (yydebug)
              debug("error recovery discarding state "+state_peek(0)+" ");
            if (stateptr<0)   //check for under & overflow here
              {
              yyerror("Stack underflow. aborting...");  //capital 'S'
              return 1;
              }
            state_pop();
            val_pop();
            }
          }
        }
      else            //discard this token
        {
        if (yychar == 0)
          return 1; //yyabort
        if (yydebug)
          {
          yys = null;
          if (yychar <= YYMAXTOKEN) yys = yyname[yychar];
          if (yys == null) yys = "illegal-symbol";
          debug("state "+yystate+", error recovery discards token "+yychar+" ("+yys+")");
          }
        yychar = -1;  //read another
        }
      }//end error recovery
    }//yyn=0 loop
    if (!doaction)   //any reason not to proceed?
      continue;      //skip action
    yym = yylen[yyn];          //get count of terminals on rhs
    if (yydebug)
      debug("state "+yystate+", reducing "+yym+" by rule "+yyn+" ("+yyrule[yyn]+")");
    if (yym>0)                 //if count of rhs not 'nil'
      yyval = val_peek(yym-1); //get current semantic value
    yyval = dup_yyval(yyval); //duplicate yyval if ParserVal is used as semantic value
    switch(yyn)
      {
//########## USER-SUPPLIED ACTIONS ##########
case 1:
//#line 17 ".\gramatica.y"
{ 
		logger.logSuccess("[Parser] Programa correcto detectado");
		GeneracionCodigoIntermedio instance = GeneracionCodigoIntermedio.getInstance();
		instance.agregarUsoAIdentificador(val_peek(3).sval, "nombre_programa");
	}
break;
case 2:
//#line 22 ".\gramatica.y"
{ logger.logError("[Parser] Se esperaba un identificador nombre del programa"); }
break;
case 3:
//#line 23 ".\gramatica.y"
{ logger.logError("[Parser] Se esperaba un { antes de las sentencias del programa"); }
break;
case 4:
//#line 24 ".\gramatica.y"
{ logger.logError("[Parser] Se esperaba un } al final de las sentencias del programa"); }
break;
case 5:
//#line 25 ".\gramatica.y"
{ logger.logError("[Parser] Se esperaban sentencias del programa"); }
break;
case 6:
//#line 26 ".\gramatica.y"
{ logger.logError("[Parser] Se esperaban sentencias del programa"); }
break;
case 16:
//#line 51 ".\gramatica.y"
{ 
		logger.logSuccess("[Parser] Declaracion de lista de variables detectado"); 
		GeneracionCodigoIntermedio instance = GeneracionCodigoIntermedio.getInstance(); 
		instance.agregarTipoAListaDeVariables(val_peek(2).sval);
	}
break;
case 17:
//#line 56 ".\gramatica.y"
{ logger.logError("[Parser] Se esperaba un ; al final de la lista de variables"); }
break;
case 18:
//#line 57 ".\gramatica.y"
{ logger.logError("[Parser] Se esperaba un tipo para la lista de variables"); }
break;
case 19:
//#line 58 ".\gramatica.y"
{ logger.logError("[Parser] Se esperaba una variable o lista de variables"); }
break;
case 20:
//#line 62 ".\gramatica.y"
{ 
		GeneracionCodigoIntermedio instance = GeneracionCodigoIntermedio.getInstance(); 
		instance.agregarVariableADeclarar(val_peek(2).sval);
	}
break;
case 21:
//#line 66 ".\gramatica.y"
{
		GeneracionCodigoIntermedio instance = GeneracionCodigoIntermedio.getInstance(); 
		instance.agregarVariableADeclarar(val_peek(0).sval);
	}
break;
case 22:
//#line 73 ".\gramatica.y"
{ logger.logSuccess("[Parser] Declaracion de funcion detectado"); }
break;
case 23:
//#line 74 ".\gramatica.y"
{ logger.logSuccess("[Parser] Declaracion de funcion detectado"); }
break;
case 24:
//#line 75 ".\gramatica.y"
{ logger.logError("[Parser] Se esperaban sentencias en la funcion"); }
break;
case 41:
//#line 107 ".\gramatica.y"
{ logger.logSuccess("[Parser] Declaracion de funcion detectado"); }
break;
case 42:
//#line 108 ".\gramatica.y"
{ logger.logSuccess("[Parser] Declaracion de funcion detectado"); }
break;
case 43:
//#line 112 ".\gramatica.y"
{ logger.logSuccess("[Parser] Sentencia seleccion detectada"); }
break;
case 44:
//#line 113 ".\gramatica.y"
{ logger.logSuccess("[Parser] Sentencia seleccion detectada"); }
break;
case 45:
//#line 114 ".\gramatica.y"
{ logger.logSuccess("[Parser] Sentencia seleccion detectada"); }
break;
case 46:
//#line 115 ".\gramatica.y"
{ logger.logSuccess("[Parser] Sentencia seleccion detectada"); }
break;
case 47:
//#line 116 ".\gramatica.y"
{ logger.logSuccess("[Parser] Sentencia seleccion detectada"); }
break;
case 48:
//#line 117 ".\gramatica.y"
{ logger.logSuccess("[Parser] Sentencia seleccion detectada"); }
break;
case 49:
//#line 118 ".\gramatica.y"
{ logger.logSuccess("[Parser] Sentencia seleccion detectada"); }
break;
case 50:
//#line 119 ".\gramatica.y"
{ logger.logError("[Parser] Se esperaba un ; al final de la sentencia de seleccion"); }
break;
case 51:
//#line 120 ".\gramatica.y"
{ logger.logError("[Parser] Se esperaba un ; al final de la sentencia de seleccion"); }
break;
case 52:
//#line 121 ".\gramatica.y"
{ logger.logError("[Parser] Se esperaba un ; al final de la sentencia de seleccion"); }
break;
case 53:
//#line 122 ".\gramatica.y"
{ logger.logError("[Parser] Se esperaba un ; al final de la sentencia de seleccion"); }
break;
case 54:
//#line 123 ".\gramatica.y"
{ logger.logError("[Parser] Se esperaba un ; al final de la sentencia de seleccion"); }
break;
case 55:
//#line 124 ".\gramatica.y"
{ logger.logError("[Parser] Se esperaba un ; al final de la sentencia de seleccion"); }
break;
case 56:
//#line 125 ".\gramatica.y"
{ logger.logError("[Parser] Se esperaba un ; al final de la sentencia de seleccion"); }
break;
case 60:
//#line 135 ".\gramatica.y"
{ logger.logSuccess("[Parser] Sentencia de seleccion detectada"); }
break;
case 61:
//#line 136 ".\gramatica.y"
{ logger.logSuccess("[Parser] Sentencia de seleccion detectada"); }
break;
case 62:
//#line 137 ".\gramatica.y"
{ logger.logSuccess("[Parser] Sentencia de seleccion detectada"); }
break;
case 63:
//#line 138 ".\gramatica.y"
{ logger.logSuccess("[Parser] Sentencia de seleccion detectada"); }
break;
case 64:
//#line 139 ".\gramatica.y"
{ logger.logSuccess("[Parser] Sentencia de seleccion detectada"); }
break;
case 65:
//#line 140 ".\gramatica.y"
{ logger.logSuccess("[Parser] Sentencia de seleccion detectada"); }
break;
case 66:
//#line 141 ".\gramatica.y"
{ logger.logSuccess("[Parser] Sentencia de seleccion detectada"); }
break;
case 67:
//#line 142 ".\gramatica.y"
{ logger.logSuccess("[Parser] Sentencia de seleccion detectada"); }
break;
case 68:
//#line 143 ".\gramatica.y"
{ logger.logSuccess("[Parser] Sentencia de seleccion detectada"); }
break;
case 69:
//#line 144 ".\gramatica.y"
{ logger.logSuccess("[Parser] Sentencia de seleccion detectada"); }
break;
case 70:
//#line 145 ".\gramatica.y"
{ logger.logSuccess("[Parser] Sentencia de seleccion detectada"); }
break;
case 71:
//#line 146 ".\gramatica.y"
{ logger.logSuccess("[Parser] Sentencia de seleccion detectada"); }
break;
case 72:
//#line 147 ".\gramatica.y"
{ logger.logSuccess("[Parser] Sentencia de seleccion detectada"); }
break;
case 73:
//#line 148 ".\gramatica.y"
{ logger.logSuccess("[Parser] Sentencia de seleccion detectada"); }
break;
case 74:
//#line 152 ".\gramatica.y"
{ logger.logSuccess("[Parser] Sentencia when detectada"); }
break;
case 75:
//#line 153 ".\gramatica.y"
{ logger.logSuccess("[Parser] Sentencia when detectada"); }
break;
case 76:
//#line 154 ".\gramatica.y"
{ logger.logSuccess("[Parser] Sentencia when detectada"); }
break;
case 77:
//#line 155 ".\gramatica.y"
{ logger.logError("[Parser] Se esperaba ; al final de la sentencia when"); }
break;
case 78:
//#line 156 ".\gramatica.y"
{ logger.logError("[Parser] Se esperaba ; al final de la sentencia when"); }
break;
case 79:
//#line 157 ".\gramatica.y"
{ logger.logError("[Parser] Se esperaba ; al final de la sentencia when"); }
break;
case 80:
//#line 158 ".\gramatica.y"
{ logger.logError("[Parser] Se esperaban sentencias en la sentencia when"); }
break;
case 81:
//#line 159 ".\gramatica.y"
{ logger.logError("[Parser] Se esperaba la palabra reservada then en la sentencia when"); }
break;
case 82:
//#line 160 ".\gramatica.y"
{ logger.logError("[Parser] Se esperaba la palabra reservada then en la sentencia when"); }
break;
case 83:
//#line 161 ".\gramatica.y"
{ logger.logError("[Parser] Se esperaba la palabra reservada then en la sentencia when"); }
break;
case 84:
//#line 165 ".\gramatica.y"
{ logger.logSuccess("[Parser] Sentencia do until detectada"); }
break;
case 85:
//#line 166 ".\gramatica.y"
{ logger.logSuccess("[Parser] Sentencia do until detectada"); }
break;
case 86:
//#line 167 ".\gramatica.y"
{ logger.logError("[Parser] Se esperaba un ; al final de la sentencia do"); }
break;
case 87:
//#line 168 ".\gramatica.y"
{ logger.logError("[Parser] Se esperaba un ; al final de la sentencia do"); }
break;
case 94:
//#line 178 ".\gramatica.y"
{ logger.logError("[Parser] Se esperaban sentencias en la sentencia do"); }
break;
case 95:
//#line 179 ".\gramatica.y"
{ logger.logError("[Parser] Se esperaba un } al final de la sentencia do"); }
break;
case 96:
//#line 180 ".\gramatica.y"
{ logger.logError("[Parser] Se esperaba un } al final de la sentencia do"); }
break;
case 97:
//#line 181 ".\gramatica.y"
{ logger.logError("[Parser] Se esperaba un } al final de la sentencia do"); }
break;
case 98:
//#line 182 ".\gramatica.y"
{ logger.logError("[Parser] Se esperaba un } al final de la sentencia do"); }
break;
case 99:
//#line 183 ".\gramatica.y"
{ logger.logError("[Parser] Se esperaba un } al final de la sentencia do"); }
break;
case 100:
//#line 184 ".\gramatica.y"
{ logger.logError("[Parser] Se esperaba un } al final de la sentencia do"); }
break;
case 106:
//#line 199 ".\gramatica.y"
{
		GeneracionCodigoIntermedio instance = GeneracionCodigoIntermedio.getInstance();
		instance.agregarUsoAIdentificador(val_peek(4).sval, "nombre_funcion");
	}
break;
case 107:
//#line 203 ".\gramatica.y"
{
		GeneracionCodigoIntermedio instance = GeneracionCodigoIntermedio.getInstance();
		instance.agregarUsoAIdentificador(val_peek(5).sval, "nombre_funcion");
	}
break;
case 108:
//#line 207 ".\gramatica.y"
{ logger.logError("[Parser] Se esperaba un : antes del tipo para la funcion"); }
break;
case 109:
//#line 208 ".\gramatica.y"
{ logger.logError("[Parser] Se esperaba un tipo de return para la funcion"); }
break;
case 110:
//#line 209 ".\gramatica.y"
{ logger.logError("[Parser] Se esperaba un identificador nombre para la funcion"); }
break;
case 111:
//#line 210 ".\gramatica.y"
{ logger.logError("[Parser] Se esperaba un ( luego del nombre de la funcion"); }
break;
case 112:
//#line 211 ".\gramatica.y"
{ logger.logError("[Parser] Se esperaba un ) luego del nombre para la funcion"); }
break;
case 113:
//#line 212 ".\gramatica.y"
{ logger.logError("[Parser] Se esperaba un tipo de return para la funcion"); }
break;
case 114:
//#line 213 ".\gramatica.y"
{ logger.logError("[Parser] Se esperaba un identificador nombre para la funcion"); }
break;
case 115:
//#line 214 ".\gramatica.y"
{ logger.logError("[Parser] Se esperaba un ( luego del nombre de la funcion"); }
break;
case 116:
//#line 215 ".\gramatica.y"
{ logger.logError("[Parser] Se esperaba un ) luego del nombre para la funcion"); }
break;
case 118:
//#line 220 ".\gramatica.y"
{ logger.logError("[Parser] Se esperaba un ; al final de la sentencia return"); }
break;
case 119:
//#line 221 ".\gramatica.y"
{ logger.logError("[Parser] Se esperaba un ( en la sentencia return"); }
break;
case 120:
//#line 222 ".\gramatica.y"
{ logger.logError("[Parser] Se esperaba un ) en la sentencia return"); }
break;
case 121:
//#line 223 ".\gramatica.y"
{ logger.logError("[Parser] Se esperaba una expresion en la sentencia return"); }
break;
case 124:
//#line 229 ".\gramatica.y"
{ logger.logError("[Parser] Hay mas de 2 parametros en la funcion"); }
break;
case 127:
//#line 238 ".\gramatica.y"
{
		GeneracionCodigoIntermedio instance = GeneracionCodigoIntermedio.getInstance();
		instance.agregarTipoAParametro(val_peek(0).sval, val_peek(1).sval);
	}
break;
case 129:
//#line 242 ".\gramatica.y"
{ logger.logError("[Parser] Se esperaba un identificador nombre para el parametro"); }
break;
case 130:
//#line 243 ".\gramatica.y"
{ logger.logError("[Parser] Se esperaba un tipo valido para el parametro"); }
break;
case 131:
//#line 247 ".\gramatica.y"
{ logger.logSuccess("[Parser] Declaracion de constantes detectado"); }
break;
case 132:
//#line 248 ".\gramatica.y"
{ logger.logError("[Parser] Se esperaba ; al final de la declaracion de constantes"); }
break;
case 133:
//#line 249 ".\gramatica.y"
{ logger.logError("[Parser] Se esperaba una lista de declaracion de constantes"); }
break;
case 137:
//#line 259 ".\gramatica.y"
{ logger.logError("[Parser] Se esperaba una constante del lado derecho de la asignacion"); }
break;
case 138:
//#line 260 ".\gramatica.y"
{ logger.logError("[Parser] Se esperaba el simbolo asignacion en la declaracion de constantes"); }
break;
case 139:
//#line 261 ".\gramatica.y"
{ logger.logError("[Parser] Se esperaba una asignacion en la declaracion de constantes"); }
break;
case 154:
//#line 285 ".\gramatica.y"
{ logger.logSuccess("[Parser] Sentencia break detectada"); }
break;
case 155:
//#line 286 ".\gramatica.y"
{ logger.logSuccess("[Parser] Sentencia break con etiqueta detectada"); }
break;
case 156:
//#line 287 ".\gramatica.y"
{ logger.logError("[Parser] Se esperaba un ; luego de la sentencia break"); }
break;
case 157:
//#line 288 ".\gramatica.y"
{ logger.logError("[Parser] Se esperaba un ; luego de la sentencia break"); }
break;
case 158:
//#line 289 ".\gramatica.y"
{ logger.logError("[Parser] Se esperaba una etiqueta en la sentencia break"); }
break;
case 159:
//#line 293 ".\gramatica.y"
{ logger.logSuccess("[Parser] Sentencia continue detectada"); }
break;
case 160:
//#line 294 ".\gramatica.y"
{ logger.logError("[Parser] Se esperaba un ; al final de la sentencia continue"); }
break;
case 163:
//#line 303 ".\gramatica.y"
{ logger.logSuccess("[Parser] Sentencia do until detectada"); }
break;
case 164:
//#line 304 ".\gramatica.y"
{ logger.logError("[Parser] Se esperaba un ; al final de la sentencia do"); }
break;
case 168:
//#line 314 ".\gramatica.y"
{ logger.logError("[Parser] Se esperaba un } al final de la sentencia do"); }
break;
case 169:
//#line 315 ".\gramatica.y"
{ logger.logError("[Parser] Se esperaba un { en la sentencia do"); }
break;
case 172:
//#line 324 ".\gramatica.y"
{ logger.logSuccess("[Parser] Asignacion detectada"); }
break;
case 173:
//#line 325 ".\gramatica.y"
{logger.logError("[Parser] Se espera una expresion del lado derecho de la asignacion");}
break;
case 174:
//#line 326 ".\gramatica.y"
{ logger.logError("[Parser] Se espera un ; al final de la asignacion"); }
break;
case 175:
//#line 327 ".\gramatica.y"
{ logger.logError("[Parser] Se espera el simbolo =: en lugar de = para la asignacion"); }
break;
case 176:
//#line 328 ".\gramatica.y"
{ logger.logError("[Parser] Se espera el simbolo =: en lugar de = para la asignacion"); }
break;
case 177:
//#line 332 ".\gramatica.y"
{ logger.logSuccess("[Parser] Sentencia when detectada"); }
break;
case 178:
//#line 333 ".\gramatica.y"
{ logger.logError("[Parser] Se esperaba la palabra reservada then en la sentencia when"); }
break;
case 179:
//#line 334 ".\gramatica.y"
{ logger.logError("[Parser] Se esperaba un ; al final de la sentencia when"); }
break;
case 180:
//#line 335 ".\gramatica.y"
{ logger.logError("[Parser] Se esperaba la palabra reservada then en la sentencia when"); }
break;
case 181:
//#line 336 ".\gramatica.y"
{ logger.logError("[Parser] Se esperaban sentencias dentro del when"); }
break;
case 184:
//#line 345 ".\gramatica.y"
{ logger.logSuccess("[Parser] Sentencia if then detectada"); }
break;
case 185:
//#line 346 ".\gramatica.y"
{ logger.logSuccess("[Parser] Sentencia if then else detectada"); }
break;
case 186:
//#line 347 ".\gramatica.y"
{ logger.logError("[Parser] Se esperaba un ; al final de la sentencia seleccion"); }
break;
case 187:
//#line 348 ".\gramatica.y"
{ logger.logError("[Parser] Se esperaba un ; al final de la sentencia seleccion"); }
break;
case 188:
//#line 349 ".\gramatica.y"
{ logger.logError("[Parser] Se esperaban sentencias en la sentencia seleccion"); }
break;
case 189:
//#line 350 ".\gramatica.y"
{ logger.logError("[Parser] Se esperaban la palabra reservada then en la sentencia seleccion"); }
break;
case 190:
//#line 351 ".\gramatica.y"
{ logger.logError("[Parser] Se esperaban la palabra reservada then en la sentencia seleccion"); }
break;
case 191:
//#line 352 ".\gramatica.y"
{ logger.logError("[Parser] Se esperaban sentencias en la sentencia seleccion"); }
break;
case 194:
//#line 358 ".\gramatica.y"
{ logger.logError("[Parser] Se esperaban sentencias dentro de la seleccion"); }
break;
case 195:
//#line 359 ".\gramatica.y"
{ logger.logError("[Parser] Se esperaba un } al final de la seleccion"); }
break;
case 196:
//#line 360 ".\gramatica.y"
{ logger.logError("[Parser] Se esperaba un { en la seleccion"); }
break;
case 200:
//#line 370 ".\gramatica.y"
{ logger.logError("[Parser] Se esperaba un expresion del lado derecho de la comparacion"); }
break;
case 201:
//#line 371 ".\gramatica.y"
{ logger.logError("[Parser] Se esperaba un expresion del lado izquierdo de la comparacion"); }
break;
case 202:
//#line 372 ".\gramatica.y"
{ logger.logError("[Parser] Se esperaba un ( al comienzo de la comparacion"); }
break;
case 203:
//#line 373 ".\gramatica.y"
{ logger.logError("[Parser] Se esperaba un ) al final de la comparacion"); }
break;
case 204:
//#line 374 ".\gramatica.y"
{ logger.logError("[Parser] Se esperaba una comparacion"); }
break;
case 226:
//#line 420 ".\gramatica.y"
{ logger.logSuccess("[Parser] Sentencia out detectada"); }
break;
case 227:
//#line 421 ".\gramatica.y"
{ logger.logSuccess("[Parser] Sentencia out detectada"); }
break;
case 228:
//#line 422 ".\gramatica.y"
{ logger.logError("[Parser] Se esperaba una cadena o identificador en la sentencia out"); }
break;
case 229:
//#line 423 ".\gramatica.y"
{ logger.logError("[Parser] Se esperaba un ( en la sentencia out"); }
break;
case 230:
//#line 424 ".\gramatica.y"
{ logger.logError("[Parser] Se esperaba un ) en la sentencia out"); }
break;
case 231:
//#line 425 ".\gramatica.y"
{ logger.logError("[Parser] Se esperaba un ( en la sentencia out"); }
break;
case 232:
//#line 426 ".\gramatica.y"
{ logger.logError("[Parser] Se esperaba un ) en la sentencia out"); }
break;
case 233:
//#line 427 ".\gramatica.y"
{ logger.logError("[Parser] Se espera un ; al final de la sentencia out"); }
break;
case 234:
//#line 428 ".\gramatica.y"
{ logger.logError("[Parser] Se espera un ; al final de la sentencia out"); }
break;
case 236:
//#line 433 ".\gramatica.y"
{ constanteConSigno(val_peek(0).sval); }
break;
//#line 1814 "Parser.java"
//########## END OF USER-SUPPLIED ACTIONS ##########
    }//switch
    //#### Now let's reduce... ####
    if (yydebug) debug("reduce");
    state_drop(yym);             //we just reduced yylen states
    yystate = state_peek(0);     //get new state
    val_drop(yym);               //corresponding value drop
    yym = yylhs[yyn];            //select next TERMINAL(on lhs)
    if (yystate == 0 && yym == 0)//done? 'rest' state and at first TERMINAL
      {
      if (yydebug) debug("After reduction, shifting from state 0 to state "+YYFINAL+"");
      yystate = YYFINAL;         //explicitly say we're done
      state_push(YYFINAL);       //and save it
      val_push(yyval);           //also save the semantic value of parsing
      if (yychar < 0)            //we want another character?
        {
        yychar = yylex();        //get next character
        if (yychar<0) yychar=0;  //clean, if necessary
        if (yydebug)
          yylexdebug(yystate,yychar);
        }
      if (yychar == 0)          //Good exit (if lex returns 0 ;-)
         break;                 //quit the loop--all DONE
      }//if yystate
    else                        //else not done yet
      {                         //get next state and push, for next yydefred[]
      yyn = yygindex[yym];      //find out where to go
      if ((yyn != 0) && (yyn += yystate) >= 0 &&
            yyn <= YYTABLESIZE && yycheck[yyn] == yystate)
        yystate = yytable[yyn]; //get new state
      else
        yystate = yydgoto[yym]; //else go to new defred
      if (yydebug) debug("after reduction, shifting from state "+state_peek(0)+" to state "+yystate+"");
      state_push(yystate);     //going again, so push state & val...
      val_push(yyval);         //for next action
      }
    }//main loop
  return 0;//yyaccept!!
}
//## end of method parse() ######################################



//## run() --- for Thread #######################################
/**
 * A default run method, used for operating this parser
 * object in the background.  It is intended for extending Thread
 * or implementing Runnable.  Turn off with -Jnorun .
 */
public void run()
{
  yyparse();
}
//## end of method run() ########################################



//## Constructors ###############################################
/**
 * Default constructor.  Turn off with -Jnoconstruct .

 */
public Parser()
{
  //nothing to do
}


/**
 * Create a parser, setting the debug to true or false.
 * @param debugMe true for debugging, false for no debug.
 */
public Parser(boolean debugMe)
{
  yydebug=debugMe;
}
//###############################################################



}
//################### END OF CLASS ##############################
