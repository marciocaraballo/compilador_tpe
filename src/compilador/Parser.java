//### This file created by BYACC 1.8(/Java extension  1.15)
//### Java capabilities added 7 Jan 97, Bob Jamison
//### Updated : 27 Nov 97  -- Bob Jamison, Joe Nieten
//###           01 Jan 98  -- Bob Jamison -- fixed generic semantic constructor
//###           01 Jun 99  -- Bob Jamison -- added Runnable support
//###           06 Aug 00  -- Bob Jamison -- made state variables class-global
//###           03 Jan 01  -- Bob Jamison -- improved flags, tracing
//###           16 May 01  -- Bob Jamison -- added custom stack sizing
//###           04 Mar 02  -- Yuval Oren  -- improved java performance, added options
//###           14 Mar 02  -- Tomas Hurka -- -d support, static initializer workaround
//### Please send bug reports to tom@hukatronic.cz
//### static char yysccsid[] = "@(#)yaccpar	1.8 (Berkeley) 01/20/90";






//#line 2 ".\gramatica.y"
package compilador;
import java.io.File;
//#line 20 "Parser.java"




public class Parser
{

boolean yydebug;        //do I want debug output?
int yynerrs;            //number of errors so far
int yyerrflag;          //was there an error?
int yychar;             //the current working character

//########## MESSAGES ##########
//###############################################################
// method: debug
//###############################################################
void debug(String msg)
{
  if (yydebug)
    System.out.println(msg);
}

//########## STATE STACK ##########
final static int YYSTACKSIZE = 500;  //maximum stack size
int statestk[] = new int[YYSTACKSIZE]; //state stack
int stateptr;
int stateptrmax;                     //highest index of stackptr
int statemax;                        //state when highest index reached
//###############################################################
// methods: state stack push,pop,drop,peek
//###############################################################
final void state_push(int state)
{
  try {
		stateptr++;
		statestk[stateptr]=state;
	 }
	 catch (ArrayIndexOutOfBoundsException e) {
     int oldsize = statestk.length;
     int newsize = oldsize * 2;
     int[] newstack = new int[newsize];
     System.arraycopy(statestk,0,newstack,0,oldsize);
     statestk = newstack;
     statestk[stateptr]=state;
  }
}
final int state_pop()
{
  return statestk[stateptr--];
}
final void state_drop(int cnt)
{
  stateptr -= cnt; 
}
final int state_peek(int relative)
{
  return statestk[stateptr-relative];
}
//###############################################################
// method: init_stacks : allocate and prepare stacks
//###############################################################
final boolean init_stacks()
{
  stateptr = -1;
  val_init();
  return true;
}
//###############################################################
// method: dump_stacks : show n levels of the stacks
//###############################################################
void dump_stacks(int count)
{
int i;
  System.out.println("=index==state====value=     s:"+stateptr+"  v:"+valptr);
  for (i=0;i<count;i++)
    System.out.println(" "+i+"    "+statestk[i]+"      "+valstk[i]);
  System.out.println("======================");
}


//########## SEMANTIC VALUES ##########
//public class ParserVal is defined in ParserVal.java


String   yytext;//user variable to return contextual strings
ParserVal yyval; //used to return semantic vals from action routines
ParserVal yylval;//the 'lval' (result) I got from yylex()
ParserVal valstk[];
int valptr;
//###############################################################
// methods: value stack push,pop,drop,peek.
//###############################################################
void val_init()
{
  valstk=new ParserVal[YYSTACKSIZE];
  yyval=new ParserVal();
  yylval=new ParserVal();
  valptr=-1;
}
void val_push(ParserVal val)
{
  if (valptr>=YYSTACKSIZE)
    return;
  valstk[++valptr]=val;
}
ParserVal val_pop()
{
  if (valptr<0)
    return new ParserVal();
  return valstk[valptr--];
}
void val_drop(int cnt)
{
int ptr;
  ptr=valptr-cnt;
  if (ptr<0)
    return;
  valptr = ptr;
}
ParserVal val_peek(int relative)
{
int ptr;
  ptr=valptr-relative;
  if (ptr<0)
    return new ParserVal();
  return valstk[ptr];
}
final ParserVal dup_yyval(ParserVal val)
{
  ParserVal dup = new ParserVal();
  dup.ival = val.ival;
  dup.dval = val.dval;
  dup.sval = val.sval;
  dup.obj = val.obj;
  return dup;
}
//#### end semantic value section ####
public final static short ID=257;
public final static short CTE=258;
public final static short CADENA=259;
public final static short IF=260;
public final static short THEN=261;
public final static short ELSE=262;
public final static short ENDIF=263;
public final static short OUT=264;
public final static short FUN=265;
public final static short RETURN=266;
public final static short BREAK=267;
public final static short ASIGNACION=268;
public final static short COMP_MAYOR_IGUAL=269;
public final static short COMP_MENOR_IGUAL=270;
public final static short COMP_DISTINTO=271;
public final static short WHEN=272;
public final static short DO=273;
public final static short UNTIL=274;
public final static short CONTINUE=275;
public final static short DOUBLE64=276;
public final static short UINT16=277;
public final static short DEFER=278;
public final static short CONST=279;
public final static short YYERRCODE=256;
final static short yylhs[] = {                           -1,
    0,    0,    0,    0,    0,    0,    1,    2,    2,    3,
    3,    4,    4,    4,    4,    6,    6,    6,    6,   11,
   11,    7,    7,    7,   14,   14,   15,   15,   16,   16,
   16,   16,   16,   16,   16,   16,   16,   16,   22,   22,
    8,    8,   23,   23,   23,   23,   23,   23,   23,   23,
   23,   23,   23,   23,   23,   23,   25,   25,   25,   21,
   21,   21,   21,   21,   21,   21,   21,   21,   21,   21,
   21,   21,   21,   19,   19,   19,   19,   19,   19,   19,
   19,   19,   19,   20,   20,   20,   20,   26,   26,   26,
   26,   26,   26,   26,   26,   26,   26,   26,   26,   26,
   28,   28,   29,   29,   29,   12,   12,   12,   12,   12,
   12,   12,   12,   12,   12,   12,   13,   13,   13,   13,
   13,   32,   32,   32,   35,   35,   34,   34,   36,   34,
    9,    9,    9,   37,   37,   38,   38,   38,   38,   38,
    5,    5,    5,    5,    5,    5,    5,    5,    5,    5,
   42,   42,   42,   30,   30,   30,   30,   30,   31,   31,
   41,   41,   43,   43,   27,   44,   44,   44,   44,   45,
   45,   17,   17,   17,   17,   17,   40,   40,   40,   40,
   40,   46,   46,   39,   39,   39,   39,   39,   39,   39,
   39,   49,   49,   49,   49,   49,   50,   50,   47,   48,
   24,   24,   24,   24,   24,   24,   51,   51,   51,   51,
   51,   51,   33,   33,   33,   52,   52,   52,   53,   53,
   53,   55,   55,   56,   56,   57,   57,   18,   18,   18,
   18,   18,   18,   18,   18,   18,   54,   54,   10,   10,
};
final static short yylen[] = {                            2,
    4,    3,    3,    3,    3,    0,    1,    1,    2,    1,
    1,    1,    1,    1,    1,    3,    2,    2,    2,    3,
    1,    4,    5,    3,    1,    2,    1,    1,    1,    2,
    1,    2,    1,    2,    1,    2,    1,    2,    1,    2,
    4,    5,    8,   11,   11,   11,   11,   14,   14,    7,
   10,   10,   10,   10,   13,   13,    1,    1,    2,    6,
    6,    6,    9,    9,   13,   11,   11,   13,   13,   13,
   11,   11,   12,    7,    8,    8,    6,    7,    7,    6,
    6,    7,    7,    5,    7,    4,    6,    1,    1,    1,
    4,    4,    3,    2,    3,    3,    3,    3,    2,    2,
    1,    2,    1,    1,    1,    6,    7,    6,    5,    5,
    5,    5,    6,    6,    6,    6,    5,    4,    3,    3,
    4,    1,    3,    5,    1,    3,    2,    1,    0,    2,
    3,    2,    2,    1,    3,    3,    2,    2,    1,    3,
    1,    2,    1,    2,    1,    2,    1,    2,    1,    2,
    1,    1,    1,    2,    4,    1,    3,    3,    2,    1,
    1,    3,    5,    4,    1,    1,    3,    2,    2,    1,
    2,    4,    3,    3,    4,    3,    7,    6,    6,    5,
    4,    1,    2,    6,    8,    5,    7,    5,    5,    7,
    6,    1,    3,    2,    2,    2,    1,    2,    1,    1,
    5,    4,    4,    4,    4,    2,    1,    1,    1,    1,
    1,    1,    3,    3,    1,    3,    3,    1,    1,    1,
    1,    3,    4,    1,    3,    1,    1,    5,    5,    4,
    4,    4,    4,    4,    4,    4,    1,    2,    1,    1,
};
final static short yydefred[] = {                         0,
    7,    0,    0,    0,    0,    0,    0,    0,    0,    0,
  240,  239,    0,    0,    0,    8,   10,   11,   12,   13,
   14,   15,    0,    0,    0,  141,  145,    0,  143,  147,
  149,  161,    0,    0,    0,    0,    0,    0,  237,    0,
    0,    0,    0,    0,  218,  220,  221,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,  151,  152,  153,
    0,    0,    0,  142,  146,  144,  148,  150,    0,  133,
    0,    0,    2,    9,    0,   19,    0,   18,    0,    0,
    5,    0,    3,  173,    0,   20,    0,    0,  238,  207,
  208,  209,  206,  212,  210,  211,    0,    0,    0,    0,
    0,    0,  199,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,  154,    0,  159,  170,    0,    0,
  169,  171,  138,    0,    0,  131,    0,   16,    0,    0,
    0,    0,    0,   24,   27,    0,    0,   25,   28,   29,
   31,   33,   35,   37,    0,    0,  162,    1,  172,  175,
  226,  222,  227,    0,  224,    0,    0,    0,    0,    0,
  194,  197,    0,    0,    0,  196,  198,    0,    0,    0,
  216,  217,  233,  231,  234,    0,  232,    0,  230,    0,
    0,    0,    0,  127,    0,    0,  130,    0,    0,    0,
  181,    0,    0,  165,  158,    0,  167,    0,  136,  140,
  135,    0,    0,    0,    0,    0,   88,  103,   89,    0,
    0,  101,  104,  105,    0,   30,   32,   34,   36,   38,
   22,    0,   26,    0,   41,    0,    0,  223,  202,    0,
  203,    0,  188,    0,    0,  193,    0,  200,  189,  204,
  229,  228,  112,    0,    0,    0,  111,    0,    0,  110,
    0,    0,  183,    0,  155,  163,    0,    0,    0,  119,
    0,    0,   94,    0,    0,  100,    0,    0,  102,    0,
   23,   42,    0,  225,  201,  191,    0,  184,    0,  106,
  116,    0,  108,  115,    0,  114,    0,  178,    0,    0,
    0,    0,    0,    0,  121,    0,    0,    0,   93,    0,
    0,    0,   96,   98,    0,    0,    0,  190,  107,    0,
  124,  177,   59,   39,    0,    0,    0,    0,    0,    0,
  117,    0,    0,    0,    0,    0,    0,   91,   92,   84,
    0,    0,    0,    0,  185,    0,    0,    0,   40,    0,
   60,    0,   62,   61,    0,    0,   57,   58,    0,   80,
    0,    0,    0,    0,   81,    0,    0,    0,    0,  126,
    0,    0,    0,    0,    0,    0,   74,    0,    0,    0,
   82,   83,    0,    0,   85,    0,    0,    0,    0,    0,
    0,    0,    0,    0,   43,   75,   76,    0,    0,    0,
    0,    0,    0,    0,   63,    0,    0,    0,   64,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,   66,   44,
    0,    0,   67,   45,   71,   72,   46,   47,    0,    0,
    0,    0,   73,    0,    0,    0,    0,    0,    0,    0,
    0,   69,   70,   65,    0,   68,    0,    0,    0,   48,
   49,    0,    0,
};
final static short yydgoto[] = {                          3,
    4,   15,   16,   17,   18,   19,   20,   21,   22,   23,
   24,   25,  357,  147,  148,  324,  150,  151,  152,  153,
  154,  325,  358,   42,  304,  220,  156,  221,  222,  223,
  224,  118,   43,  119,  321,  120,   71,   72,   29,   30,
   31,  132,   32,   62,   63,  203,  102,  247,  103,  104,
   98,   44,   45,   46,   47,  164,  165,
};
final static short yysindex[] = {                       -90,
    0, 1575,    0,  490,  -17,   10,  -26,  -31,   10,  268,
    0,    0,  792,  -49, 1122,    0,    0,    0,    0,    0,
    0,    0,  -42,   30,  -69,    0,    0,   55,    0,    0,
    0,    0, 1149, 1177,   76, -129,   98,  101,    0, -111,
   33,  -95,   -9,   72,    0,    0,    0,  113,  144,   26,
  -39,  -33,  -97,  -54,   81,  137, 1623,    0,    0,    0,
    0,  -71, 1378,    0,    0,    0,    0,    0,  -56,    0,
  140,  161,    0,    0,  165,    0,  159,    0,  956,  -57,
    0, 1187,    0,    0,  210,    0,  241,   58,    0,    0,
    0,    0,    0,    0,    0,    0,   -9,   98,  334,  202,
    0, -110,    0,  831,   98,   98,   98,   98,   98,  162,
  189,   18,   24,  197,  -35,  192,    6,  217,  229,   21,
  224,  252,  174, 1213,    0,  -27,    0,    0, 1398,   10,
    0,    0,    0,   47,   59,    0,   64,    0,   10,   17,
   10,  878, 1147,    0,    0,  206, 1552,    0,    0,    0,
    0,    0,    0,    0,  232,  294,    0,    0,    0,    0,
    0,    0,    0,   32,    0,   61,  103,   96,  309, -104,
    0,    0, 1124,  703,  316,    0,    0,   72,   72,  357,
    0,    0,    0,    0,    0,  326,    0,  333,    0,   88,
  320,   38,   88,    0,  351,   88,    0,   88,  367, 1575,
    0, 1575,  305,    0,    0,  373,    0,  379,    0,    0,
    0,  199,   66,  362,  -75, 1421,    0,    0,    0,  171,
 1323,    0,    0,    0,   10,    0,    0,    0,    0,    0,
    0,  328,    0,  353,    0,  208,  104,    0,    0,  363,
    0,  428,    0,  703,  432,    0,  230,    0,    0,    0,
    0,    0,    0,   88,   88,  -11,    0,   88,  459,    0,
   88,  391,    0,  461,    0,    0,  898,  464,  443,    0,
  408, 1600,    0, 1342,   10,    0,  401,  412,    0,  278,
    0,    0,  878,    0,    0,    0,  282,    0,  496,    0,
    0,   88,    0,    0,   88,    0,  511,    0, 1237,  191,
  330,   80,  332,  310,    0,  540, 1242, -105,    0,  479,
  485,  563,    0,    0,  918,  365,  578,    0,    0,  605,
    0,    0,    0,    0, 1215,  603,  541,  606,  607,  -84,
    0,  608, -103,   10,  610,  545,  554,    0,    0,    0,
  191,  330,  332,   10,    0,   88,  429,  569,    0,  570,
    0,  191,    0,    0,  436,  191,    0,    0,  434,    0,
  643,  574,  580,  442,    0,  653,  654, 1215,  655,    0,
  612,  127,  227,  110,  110,  669,    0,  677,  679,  157,
    0,    0,  623,  624,    0,  191,  928,  694,  945,  697,
  632,  633,  636,  639,    0,    0,    0,  191,  317,  319,
 1450,  191,  508,  510,    0,  191,  513,  520,    0,  521,
  533,  536,  543,  110,  736,  770,  544,  649,  683, 1460,
  745,  750, 1479,  762,  763,  764,  766,  769,  774,  725,
  728,  191,  191,  795,  598,  617,  618,  730,    0,    0,
  619,  741,    0,    0,    0,    0,    0,    0,  609,  621,
 1496, 1515,    0,  809,  810,  825,  627,  827,  629,  264,
  592,    0,    0,    0,  828,    0,  836,  191,  191,    0,
    0, 1577, 1577,
};
final static short yyrindex[] = {                       904,
    0,    0,    0,    0,  361,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,  354,    0,    0,
    0,    0,    0,  287,    0,    0,    0,    0,    0,    0,
  648,  648,    0,  857, 1265, 1285,    0,    0,    0,    0,
 1359,    0,    0,    0,    0,    0,    0,    0,  693,    0,
  820,  760,    0,    0,  797,    0,  848,    0,    0,    0,
    0,  916,    0,    0,  311,    0,  444,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
 1440,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,  648,    0,   74,    0,   39,    0,
    0,    0,    0,    0,    0,    0,    0,    0,  645,    0,
    0,    0,    0,  726,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,  339,    0,    0,    0,    0,  381,  411,    0,
    0,    0,    0,    0,    0,  467,    0,  515,    0,    0,
    0,    0,    0,    0,    0,  648,    0,    0,    0,    0,
    0,  802,    0,    0,    0, 1304,    0,  538,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
  646,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,  235,
    0,    0,    0,    0,  567,    0,    0,    0,    0,    0,
    0,    0,    0,  794,    0,    0,    0,    0,   46,    0,
    0,    0,    0,  600,    0,    0,    0,    0,  184,    0,
    0,    0,    0,  656,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,  806,    0,    0,  648,    0,  634,    0,    0,    0,
  670,    0,  680,    0,    0,  187,    0,    0,    0,  657,
  667,  994,    0,    0,    0,    0,  661,    0,    0,   75,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,  648,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
 1018,    0,    0,    0,    0,    0,    0,    0, 1041,    0,
    0,    0,    0,    0,    0,  220,    0, 1070, 1099,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,  255,    0,    0,  259,    0,    0,  573,  575,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,  626,    0,  640,    0,    0,    0,
    0,    0,    0,
};
final static short yygindex[] = {                         0,
    0,   42,  403,  -55,    1,    0,    0,    0,    0,  173,
   49,    0,  -61,    0, -134,  -79,   27,  177, -131, -128,
 -127, 1394,  -76,   -5, 1338,  660, 1126,  731, -176,   60,
  376,   -3,  -16, -166,  602,    0,  807,    0,  933,  936,
  938,   31,  872,    0,  897,  -80,  856,  717, -136,  862,
   13,  503,  527,  -53,    0,    0,  727,
};
final static int YYTABLESIZE=1901;
static short yytable[];
static { yytable();}
static void yytable(){
yytable = new short[]{                        149,
  115,  116,  155,   53,  135,  191,   37,  121,   52,   70,
   58,  228,  233,   50,  229,  230,   76,  146,   85,  335,
   87,  361,  190,  145,   97,  124,   36,  100,   26,  259,
   26,  205,    2,  105,  163,  106,   26,  248,  356,   64,
   61,   26,  101,   37,  279,   34,  292,  272,  122,   41,
   96,   94,   95,   79,   40,  107,  213,   58,  186,   26,
   26,   40,  218,   58,  188,  219,  114,  149,   26,   59,
  234,   77,  238,   93,   82,  237,  185,   40,  256,  122,
  217,  167,  187,   26,   86,  232,  123,  128,   78,   26,
  180,  145,   96,   94,   95,  255,  122,  279,  162,  101,
  172,  239,   40,  123,  177,   40,  268,  248,   26,  166,
   40,  192,   80,  108,  128,  125,   59,  128,  109,  262,
   40,  263,   59,  214,  208,   26,   26,   75,  320,   58,
   26,  128,  125,  212,   84,  215,  218,  308,  126,  125,
   88,  218,   40,  241,  278,  105,   89,  106,   40,  240,
   26,  174,  175,  110,  334,   26,  334,  244,  245,  277,
  140,   54,  140,  123,    6,   99,    1,  228,    7,  226,
  229,  230,  333,  177,  101,  334,    9,   10,   27,  320,
   27,  140,   13,  163,  111,  271,   27,  302,   59,   65,
  303,   27,  149,  355,  218,  127,  269,  311,  136,   26,
   26,  133,  130,  218,  137,  301,  219,   69,   36,   27,
   27,  134,  310,   35,   75,   10,  145,  138,   27,  280,
  183,  217,  323,  117,  117,   51,   26,  149,   26,  204,
   48,  337,   49,   27,  205,  302,   11,   12,  343,   27,
   11,   12,   11,   12,  101,  349,  336,  184,  350,  193,
   35,  145,  105,  342,  106,  189,  363,  195,   27,   90,
   91,   92,  194,  348,   11,   12,   38,   39,  159,  312,
   26,  362,  196,   38,   39,   27,   27,  197,  323,  398,
   27,  198,  112,  105,  113,  106,  215,  117,  349,   38,
   39,  384,  199,  205,  349,  349,  200,  392,  394,  160,
   27,   90,   91,   92,  209,   27,  383,  403,  120,  407,
  174,  118,  391,  393,  161,   39,  210,   38,   39,  227,
   69,  349,   38,   39,  419,  226,  171,  215,  364,  215,
  231,  215,   38,   39,  349,  403,  407,  431,  369,  418,
  349,  327,  328,  349,   50,  215,  215,  215,  215,   27,
   27,  236,  430,  219,   38,   39,  235,  205,  242,  205,
  161,   39,  253,   11,   12,  257,   54,  243,  117,  139,
  260,  349,  349,    7,  249,  140,   27,  254,   27,   51,
  213,  141,  142,   52,  251,   60,  468,  143,  387,  388,
   57,  252,  349,  349,  219,  219,  219,  250,  219,  105,
  219,  106,  270,  285,  105,  105,  106,  106,  258,  215,
  214,  215,  219,  219,  219,  219,  334,   74,  165,   21,
   27,  213,  140,  213,  261,  213,  290,  291,  293,  264,
  294,  265,   60,  296,  355,  174,   74,  266,   60,  213,
  213,  213,  213,  176,  275,  120,  120,   54,  118,  118,
  225,  214,  281,  214,    7,  214,  100,  120,   54,  267,
  118,    6,  141,  142,  319,    7,  236,  117,  143,  214,
  214,  214,  214,    9,   10,  227,  219,  282,  219,   13,
  283,   50,   50,  306,   74,  105,  286,  106,  389,  390,
  288,  205,  289,   50,  205,  205,  205,  205,  205,  205,
  205,  205,  295,  213,   60,  213,  205,  205,  205,  205,
  205,  205,  205,  205,  235,  297,   51,   51,  117,  298,
   52,   52,  305,  334,   54,  313,  202,    6,   51,  140,
  307,    7,   52,  214,   55,  214,  314,  164,  315,    9,
   10,  355,   56,  215,  317,   13,  215,  215,  215,  215,
  215,  215,  215,  215,  318,  215,  215,  215,  215,  215,
  215,  215,  215,  215,  215,  215,  186,  174,  176,  322,
  174,  330,  174,  174,  174,  174,  174,  174,  415,  388,
  416,  390,  174,  174,  174,  174,  174,  174,  174,  174,
   54,  236,  326,    6,  329,  168,  169,    7,  331,  180,
  195,  195,  202,  338,  202,    9,   10,  178,  179,  339,
  219,   13,   33,  219,  219,  219,  219,  219,  219,  219,
  219,  340,  219,  219,  219,  219,  219,  219,  219,  219,
  219,  219,  219,  179,  181,  182,  345,  213,  344,  235,
  213,  213,  213,  213,  213,  213,  213,  213,  346,  213,
  213,  213,  213,  213,  213,  213,  213,  213,  213,  213,
  187,  351,  164,  352,  353,  354,  360,  214,  365,  366,
  214,  214,  214,  214,  214,  214,  214,  214,  367,  214,
  214,  214,  214,  214,  214,  214,  214,  214,  214,  214,
  371,  186,  139,  372,  373,  334,  376,   53,  378,   54,
  176,  377,  380,  176,  379,  176,  176,  176,  176,  176,
  176,  381,  382,  385,  469,  176,  176,  176,  176,  176,
  176,  176,  176,  236,  180,  137,  236,  395,  236,  236,
  236,  236,  236,  236,  386,  396,  139,  397,  236,  236,
  236,  236,  236,  236,  236,  236,    5,  399,  400,    6,
   55,  139,  405,    7,    8,  409,  410,  411,  179,  134,
  412,    9,   10,  413,   56,   11,   12,   13,   14,  137,
  421,  235,  422,  435,  235,  424,  235,  235,  235,  235,
  235,  235,  425,  426,  137,  187,  235,  235,  235,  235,
  235,  235,  235,  235,  164,  427,   21,  164,  428,  164,
  164,  164,  164,  439,  164,  429,  434,  436,  440,  164,
  164,  164,  164,  164,  164,  164,  164,  139,  134,  132,
  443,  444,  445,  186,  446,  100,  186,  447,  186,  186,
  186,  186,  448,  186,   53,   53,   54,   54,  186,  186,
  186,  186,  186,  186,  186,  186,   53,   17,   54,  449,
  137,  334,  450,  453,  457,   21,  180,  140,  432,  180,
  454,  180,  180,  180,  180,  459,  180,  462,  463,  355,
  460,  180,  180,  180,  180,  180,  180,  180,  180,  455,
  456,  458,  461,  464,  134,  466,  470,   55,   55,  465,
  179,  467,  433,  179,  471,  179,  179,  179,  179,   55,
  179,   56,   56,    6,  129,  179,  179,  179,  179,  179,
  179,  179,  179,   56,  165,    4,  109,  187,  168,   90,
  187,   21,  187,  187,  187,  187,  182,  187,  113,   99,
   95,   57,  187,  187,  187,  187,  187,  187,  187,  187,
   97,   58,  316,  211,  132,   66,  274,  370,   67,  139,
   68,  157,  139,  129,  170,  176,  139,  139,  139,   54,
  287,  173,    6,  284,  139,  139,    7,    0,  139,  139,
  139,  139,   17,    0,    9,   10,    0,    0,    0,    0,
   13,    0,  137,    0,    0,  137,    0,    0,    0,  137,
  137,  137,   54,    0,    0,  225,    0,  137,  137,    7,
  216,  137,  137,  137,  137,    0,    0,  141,  142,    0,
    0,    0,    0,  143,    0,    0,  134,    0,    0,  134,
  300,    0,    0,  134,  134,  134,   54,    0,    0,  225,
    0,  134,  134,    7,    0,  134,  134,  134,  134,    0,
  341,  141,  142,    0,    0,    0,    0,  143,   54,    0,
  402,    6,    0,   21,    0,    7,   21,    0,    0,    0,
   21,   21,   21,    9,   10,    0,    0,  406,   21,   21,
    0,    0,   21,   21,   21,   21,  132,    0,    0,  132,
  144,    0,    0,  132,  132,  132,    0,   54,    0,    0,
    6,  132,  132,    0,    7,  132,  132,  132,  132,    0,
    0,    0,    9,   10,   17,    0,    0,   17,   13,    0,
    0,   17,   17,   17,    0,    0,    0,    0,   86,   17,
   17,    0,    0,   17,   17,   17,   17,   28,    0,   28,
    0,    0,    0,    0,   54,   28,    0,  139,   28,    0,
   28,    7,   77,  140,   55,    0,    0,    0,    0,  141,
  142,    0,   56,    0,   54,  143,    0,  139,   28,   28,
    0,    7,    0,  140,    0,   87,    0,   28,    0,  141,
  142,    0,    0,    0,   54,  299,    0,  139,    0,    0,
    0,    7,   28,  140,   54,    0,    0,  139,   28,  141,
  142,    7,    0,  140,   78,  143,    0,    0,    0,  141,
  142,   54,    0,    0,  139,  299,    0,   28,    7,    0,
  140,    0,    5,    0,    0,  139,  141,  142,    0,    7,
    8,  140,  299,   79,   28,   28,    0,  141,  142,   28,
    0,   11,   12,  143,   14,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,   73,    0,  246,   28,
   86,  206,    0,   86,   28,   86,   86,   86,   86,   86,
   86,    0,    0,    0,    0,   86,   86,   86,   86,   86,
   86,   86,   86,   81,   77,    0,    0,   77,    0,   77,
   77,   77,   77,   77,   77,    0,    0,    0,    0,   77,
   77,   77,   77,   77,   77,   77,   77,   87,   28,   28,
   87,   83,   87,   87,   87,   87,   87,   87,    0,    0,
    0,  158,   87,   87,   87,   87,   87,   87,   87,   87,
    0,    0,    0,    0,    0,   28,   78,   28,    0,   78,
    0,   78,   78,   78,   78,   78,   78,  201,    0,  347,
    0,   78,   78,   78,   78,   78,   78,   78,   78,    0,
    0,    0,    0,    0,    0,   79,    0,    0,   79,    0,
   79,   79,   79,   79,   79,   79,  332,    0,    0,   28,
   79,   79,   79,   79,   79,   79,   79,   79,    5,    0,
   54,    6,    0,    6,    0,    7,    8,    7,    0,  156,
    0,    0,    0,    9,   10,    9,   10,   11,   12,   13,
   14,   13,    0,   54,    0,    5,  225,    0,    6,  160,
    7,    0,    7,    8,    0,    0,    0,    0,  141,  142,
    9,   10,    0,    0,   11,   12,   13,   14,  157,    0,
    0,    0,    0,    5,    0,    0,    6,    0,    0,    0,
    7,    8,    0,    5,    0,    0,    6,  276,    9,   10,
    7,    8,   11,   12,   13,   14,    0,    0,    9,   10,
    0,    0,   11,   12,   13,   14,  309,    0,    0,    5,
    0,   54,    6,    0,  139,    0,    7,    8,    7,    0,
  140,    0,    0,  170,    9,   10,  141,  142,   11,   12,
   13,   14,  143,   54,    0,    0,  139,    0,    5,    0,
    7,  225,  131,    0,    0,    7,    8,    0,  141,  142,
    0,    0,    0,  141,  142,    0,    0,   11,   12,  143,
   14,  156,  207,    0,  156,    0,    0,    0,  156,    0,
  156,  156,    0,    0,    0,    0,  156,  156,  156,  156,
    0,  160,  156,    0,  160,  273,    0,    0,  160,    0,
  160,  160,    0,    0,    0,    0,  160,  160,  160,  160,
  157,    0,  160,  157,  197,    0,    0,  157,    0,  157,
  157,    0,    0,    0,  417,  157,  157,  157,  157,   54,
    0,  157,  139,    0,  437,    0,    7,    0,  140,   55,
    0,    0,    0,    0,  141,  142,    0,   56,   54,    0,
  143,  139,    0,  441,    0,    7,    0,  140,   55,    0,
    0,    0,    0,  141,  142,  170,   56,    0,  170,  143,
  437,    0,  170,    0,    0,  170,    0,    0,    0,    0,
  170,  170,  166,  170,   54,    0,  170,    6,    0,  441,
    0,    7,    0,    0,   55,    0,    0,    0,    0,    9,
   10,    0,   56,    0,   54,   13,    0,    6,    0,    0,
    0,    7,    0,    0,   55,    0,    0,  359,    0,    9,
   10,    0,   56,    0,    0,   13,    0,   54,    0,    0,
  225,    0,    0,    0,    7,    0,    0,   55,    0,    0,
    0,    0,  141,  142,    0,   56,  197,    0,  143,  197,
    0,  192,  192,  197,    0,    0,   54,    0,    0,  139,
    0,  197,  197,    7,    0,  140,   54,  197,    0,  139,
    0,  141,  142,    7,  404,  140,  408,  143,    0,    0,
    0,  141,  142,    0,  368,   54,    0,  299,  139,    0,
    0,    0,    7,    0,  140,  374,    0,    0,    0,  375,
  141,  142,   54,    0,    0,  225,  299,  438,    0,    7,
  442,    0,    0,    0,    0,    0,    0,  141,  142,    0,
    0,   54,    0,  143,  225,    0,    0,    0,    7,  401,
    0,    0,    0,    0,    0,    0,  141,  142,    0,    0,
    0,  414,  143,    0,    0,  420,    0,  404,  408,  423,
    0,    0,    0,    0,    0,    0,    0,    0,    5,  438,
  442,  139,    0,    0,    0,    7,    8,  140,    0,    0,
    0,    0,    0,  141,  142,  451,  452,   11,   12,  143,
   14,    5,    0,   54,    6,    0,  139,    0,    7,    8,
    7,    0,  140,    0,    0,    0,    9,   10,  141,  142,
   11,   12,   13,   14,  299,    0,    5,    0,    0,  225,
    0,  472,  473,    7,    8,    0,    0,    0,    0,    0,
    0,  141,  142,    0,    0,   11,   12,  143,   14,   54,
    0,    0,    6,    0,    0,    0,    7,    0,    0,   55,
    0,    0,    0,    0,    9,   10,    0,   56,    0,    0,
   13,
};
}
static short yycheck[];
static { yycheck(); }
static void yycheck() {
yycheck = new short[] {                         79,
   40,   41,   79,    9,   61,   41,   61,   41,   40,   59,
   10,  143,  147,   40,  143,  143,   59,   79,   35,  125,
   37,  125,   58,   79,   41,  123,   44,  123,    2,  196,
    4,   59,  123,   43,   88,   45,   10,  174,  123,   13,
   10,   15,   42,   61,  221,    4,   58,  123,   52,   40,
   60,   61,   62,  123,   45,   43,   40,   57,   41,   33,
   34,   45,  142,   63,   41,  142,   41,  147,   42,   10,
  147,   23,   41,   41,   33,   44,   59,   45,   41,   41,
  142,   98,   59,   57,   36,  147,   41,   57,   59,   63,
  107,  147,   60,   61,   62,   58,   58,  274,   41,   99,
  100,   41,   45,   58,  104,   45,   41,  244,   82,   97,
   45,  115,   58,   42,   41,   41,   57,   44,   47,  200,
   45,  202,   63,  140,  130,   99,  100,  257,  295,  129,
  104,   58,   58,  139,   59,  141,  216,  272,   58,   59,
   40,  221,   45,   41,  221,   43,  258,   45,   45,  166,
  124,  262,  263,   41,  260,  129,  260,  262,  263,  221,
  266,  257,  266,  261,  260,  261,  257,  299,  264,  143,
  299,  299,  307,  173,  174,  260,  272,  273,    2,  346,
    4,  266,  278,  237,   41,  261,   10,  267,  129,   13,
  267,   15,  272,  278,  274,   59,  213,  274,   59,  173,
  174,  258,  274,  283,   44,  267,  283,  257,   44,   33,
   34,  268,  274,  268,  257,  273,  272,   59,   42,  225,
   59,  283,  299,   51,   52,  257,  200,  307,  202,  257,
  257,  308,  259,   57,    0,  315,  276,  277,  315,   63,
  276,  277,  276,  277,  244,  325,  308,   59,  325,   58,
  268,  307,   43,  315,   45,   59,  333,   41,   82,  269,
  270,  271,  257,  325,  276,  277,  257,  258,   59,  275,
  244,  333,   44,  257,  258,   99,  100,  257,  355,  123,
  104,   58,  257,   43,  259,   45,    0,  115,  368,  257,
  258,  368,   41,   59,  374,  375,  123,  374,  375,   59,
  124,  269,  270,  271,  258,  129,  368,  387,  125,  389,
    0,  125,  374,  375,  257,  258,  258,  257,  258,  143,
  257,  401,  257,  258,  401,  299,  125,   41,  334,   43,
  125,   45,  257,  258,  414,  415,  416,  414,  344,  401,
  420,  262,  263,  423,  125,   59,   60,   61,   62,  173,
  174,   58,  414,    0,  257,  258,  125,  123,  263,  125,
  257,  258,  190,  276,  277,  193,  257,   59,  196,  260,
  198,  451,  452,  264,   59,  266,  200,   58,  202,  125,
    0,  272,  273,  125,   59,   10,  123,  278,  262,  263,
  123,   59,  472,  473,   41,   42,   43,   41,   45,   43,
   47,   45,   41,   41,   43,   43,   45,   45,   58,  123,
    0,  125,   59,   60,   61,   62,  260,   15,   58,   59,
  244,   41,  266,   43,   58,   45,  254,  255,  256,  125,
  258,   59,   57,  261,  278,  125,   34,   59,   63,   59,
   60,   61,   62,    0,  274,  262,  263,  257,  262,  263,
  260,   41,  125,   43,  264,   45,  123,  274,  257,  261,
  274,  260,  272,  273,  292,  264,    0,  295,  278,   59,
   60,   61,   62,  272,  273,  299,  123,  125,  125,  278,
  273,  262,  263,   41,   82,   43,   59,   45,  262,  263,
   59,  257,  263,  274,  260,  261,  262,  263,  264,  265,
  266,  267,   44,  123,  129,  125,  272,  273,  274,  275,
  276,  277,  278,  279,    0,  125,  262,  263,  346,   59,
  262,  263,   59,  260,  257,  125,  124,  260,  274,  266,
  123,  264,  274,  123,  267,  125,  125,    0,  261,  272,
  273,  278,  275,  257,  263,  278,  260,  261,  262,  263,
  264,  265,  266,  267,   59,  269,  270,  271,  272,  273,
  274,  275,  276,  277,  278,  279,    0,  257,  125,   59,
  260,  262,  262,  263,  264,  265,  266,  267,  262,  263,
  262,  263,  272,  273,  274,  275,  276,  277,  278,  279,
  257,  125,  263,  260,  263,  262,  263,  264,   59,    0,
  262,  263,  200,  125,  202,  272,  273,  105,  106,  125,
  257,  278,  123,  260,  261,  262,  263,  264,  265,  266,
  267,   59,  269,  270,  271,  272,  273,  274,  275,  276,
  277,  278,  279,    0,  108,  109,   59,  257,  274,  125,
  260,  261,  262,  263,  264,  265,  266,  267,   44,  269,
  270,  271,  272,  273,  274,  275,  276,  277,  278,  279,
    0,   59,  125,  123,   59,   59,   59,  257,   59,  125,
  260,  261,  262,  263,  264,  265,  266,  267,  125,  269,
  270,  271,  272,  273,  274,  275,  276,  277,  278,  279,
  262,  125,    0,  125,  125,  260,  263,  125,  125,  125,
  257,   59,  261,  260,  125,  262,  263,  264,  265,  266,
  267,   59,   59,   59,  123,  272,  273,  274,  275,  276,
  277,  278,  279,  257,  125,    0,  260,   59,  262,  263,
  264,  265,  266,  267,  123,   59,   44,   59,  272,  273,
  274,  275,  276,  277,  278,  279,  257,  125,  125,  260,
  125,   59,   59,  264,  265,   59,  125,  125,  125,    0,
  125,  272,  273,  125,  125,  276,  277,  278,  279,   44,
  263,  257,  263,  125,  260,  263,  262,  263,  264,  265,
  266,  267,  263,  263,   59,  125,  272,  273,  274,  275,
  276,  277,  278,  279,  257,  263,    0,  260,  263,  262,
  263,  264,  265,   59,  267,  263,  263,  125,   59,  272,
  273,  274,  275,  276,  277,  278,  279,  125,   59,    0,
   59,   59,   59,  257,   59,  123,  260,   59,  262,  263,
  264,  265,   59,  267,  262,  263,  262,  263,  272,  273,
  274,  275,  276,  277,  278,  279,  274,    0,  274,  125,
  125,  260,  125,   59,  125,   59,  257,  266,  123,  260,
  263,  262,  263,  264,  265,  125,  267,   59,   59,  278,
  262,  272,  273,  274,  275,  276,  277,  278,  279,  263,
  263,  263,  262,   59,  125,   59,   59,  262,  263,  263,
  257,  263,  123,  260,   59,  262,  263,  264,  265,  274,
  267,  262,  263,    0,  257,  272,  273,  274,  275,  276,
  277,  278,  279,  274,   58,    0,  123,  257,  274,  274,
  260,  125,  262,  263,  264,  265,  125,  267,  123,  274,
  274,  262,  272,  273,  274,  275,  276,  277,  278,  279,
  274,  262,  283,  137,  125,   13,  216,  346,   13,  257,
   13,   80,  260,   57,   99,  125,  264,  265,  266,  257,
  244,  100,  260,  237,  272,  273,  264,   -1,  276,  277,
  278,  279,  125,   -1,  272,  273,   -1,   -1,   -1,   -1,
  278,   -1,  257,   -1,   -1,  260,   -1,   -1,   -1,  264,
  265,  266,  257,   -1,   -1,  260,   -1,  272,  273,  264,
  123,  276,  277,  278,  279,   -1,   -1,  272,  273,   -1,
   -1,   -1,   -1,  278,   -1,   -1,  257,   -1,   -1,  260,
  123,   -1,   -1,  264,  265,  266,  257,   -1,   -1,  260,
   -1,  272,  273,  264,   -1,  276,  277,  278,  279,   -1,
  123,  272,  273,   -1,   -1,   -1,   -1,  278,  257,   -1,
  123,  260,   -1,  257,   -1,  264,  260,   -1,   -1,   -1,
  264,  265,  266,  272,  273,   -1,   -1,  123,  272,  273,
   -1,   -1,  276,  277,  278,  279,  257,   -1,   -1,  260,
  125,   -1,   -1,  264,  265,  266,   -1,  257,   -1,   -1,
  260,  272,  273,   -1,  264,  276,  277,  278,  279,   -1,
   -1,   -1,  272,  273,  257,   -1,   -1,  260,  278,   -1,
   -1,  264,  265,  266,   -1,   -1,   -1,   -1,  125,  272,
  273,   -1,   -1,  276,  277,  278,  279,    2,   -1,    4,
   -1,   -1,   -1,   -1,  257,   10,   -1,  260,   13,   -1,
   15,  264,  125,  266,  267,   -1,   -1,   -1,   -1,  272,
  273,   -1,  275,   -1,  257,  278,   -1,  260,   33,   34,
   -1,  264,   -1,  266,   -1,  125,   -1,   42,   -1,  272,
  273,   -1,   -1,   -1,  257,  278,   -1,  260,   -1,   -1,
   -1,  264,   57,  266,  257,   -1,   -1,  260,   63,  272,
  273,  264,   -1,  266,  125,  278,   -1,   -1,   -1,  272,
  273,  257,   -1,   -1,  260,  278,   -1,   82,  264,   -1,
  266,   -1,  257,   -1,   -1,  260,  272,  273,   -1,  264,
  265,  266,  278,  125,   99,  100,   -1,  272,  273,  104,
   -1,  276,  277,  278,  279,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,  125,   -1,  125,  124,
  257,  126,   -1,  260,  129,  262,  263,  264,  265,  266,
  267,   -1,   -1,   -1,   -1,  272,  273,  274,  275,  276,
  277,  278,  279,  125,  257,   -1,   -1,  260,   -1,  262,
  263,  264,  265,  266,  267,   -1,   -1,   -1,   -1,  272,
  273,  274,  275,  276,  277,  278,  279,  257,  173,  174,
  260,  125,  262,  263,  264,  265,  266,  267,   -1,   -1,
   -1,  125,  272,  273,  274,  275,  276,  277,  278,  279,
   -1,   -1,   -1,   -1,   -1,  200,  257,  202,   -1,  260,
   -1,  262,  263,  264,  265,  266,  267,  125,   -1,  125,
   -1,  272,  273,  274,  275,  276,  277,  278,  279,   -1,
   -1,   -1,   -1,   -1,   -1,  257,   -1,   -1,  260,   -1,
  262,  263,  264,  265,  266,  267,  125,   -1,   -1,  244,
  272,  273,  274,  275,  276,  277,  278,  279,  257,   -1,
  257,  260,   -1,  260,   -1,  264,  265,  264,   -1,  125,
   -1,   -1,   -1,  272,  273,  272,  273,  276,  277,  278,
  279,  278,   -1,  257,   -1,  257,  260,   -1,  260,  125,
  264,   -1,  264,  265,   -1,   -1,   -1,   -1,  272,  273,
  272,  273,   -1,   -1,  276,  277,  278,  279,  125,   -1,
   -1,   -1,   -1,  257,   -1,   -1,  260,   -1,   -1,   -1,
  264,  265,   -1,  257,   -1,   -1,  260,  125,  272,  273,
  264,  265,  276,  277,  278,  279,   -1,   -1,  272,  273,
   -1,   -1,  276,  277,  278,  279,  125,   -1,   -1,  257,
   -1,  257,  260,   -1,  260,   -1,  264,  265,  264,   -1,
  266,   -1,   -1,  125,  272,  273,  272,  273,  276,  277,
  278,  279,  278,  257,   -1,   -1,  260,   -1,  257,   -1,
  264,  260,  125,   -1,   -1,  264,  265,   -1,  272,  273,
   -1,   -1,   -1,  272,  273,   -1,   -1,  276,  277,  278,
  279,  257,  125,   -1,  260,   -1,   -1,   -1,  264,   -1,
  266,  267,   -1,   -1,   -1,   -1,  272,  273,  274,  275,
   -1,  257,  278,   -1,  260,  125,   -1,   -1,  264,   -1,
  266,  267,   -1,   -1,   -1,   -1,  272,  273,  274,  275,
  257,   -1,  278,  260,  125,   -1,   -1,  264,   -1,  266,
  267,   -1,   -1,   -1,  125,  272,  273,  274,  275,  257,
   -1,  278,  260,   -1,  125,   -1,  264,   -1,  266,  267,
   -1,   -1,   -1,   -1,  272,  273,   -1,  275,  257,   -1,
  278,  260,   -1,  125,   -1,  264,   -1,  266,  267,   -1,
   -1,   -1,   -1,  272,  273,  257,  275,   -1,  260,  278,
  125,   -1,  264,   -1,   -1,  267,   -1,   -1,   -1,   -1,
  272,  273,  274,  275,  257,   -1,  278,  260,   -1,  125,
   -1,  264,   -1,   -1,  267,   -1,   -1,   -1,   -1,  272,
  273,   -1,  275,   -1,  257,  278,   -1,  260,   -1,   -1,
   -1,  264,   -1,   -1,  267,   -1,   -1,  330,   -1,  272,
  273,   -1,  275,   -1,   -1,  278,   -1,  257,   -1,   -1,
  260,   -1,   -1,   -1,  264,   -1,   -1,  267,   -1,   -1,
   -1,   -1,  272,  273,   -1,  275,  257,   -1,  278,  260,
   -1,  262,  263,  264,   -1,   -1,  257,   -1,   -1,  260,
   -1,  272,  273,  264,   -1,  266,  257,  278,   -1,  260,
   -1,  272,  273,  264,  387,  266,  389,  278,   -1,   -1,
   -1,  272,  273,   -1,  341,  257,   -1,  278,  260,   -1,
   -1,   -1,  264,   -1,  266,  352,   -1,   -1,   -1,  356,
  272,  273,  257,   -1,   -1,  260,  278,  420,   -1,  264,
  423,   -1,   -1,   -1,   -1,   -1,   -1,  272,  273,   -1,
   -1,  257,   -1,  278,  260,   -1,   -1,   -1,  264,  386,
   -1,   -1,   -1,   -1,   -1,   -1,  272,  273,   -1,   -1,
   -1,  398,  278,   -1,   -1,  402,   -1,  460,  461,  406,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,  257,  472,
  473,  260,   -1,   -1,   -1,  264,  265,  266,   -1,   -1,
   -1,   -1,   -1,  272,  273,  432,  433,  276,  277,  278,
  279,  257,   -1,  257,  260,   -1,  260,   -1,  264,  265,
  264,   -1,  266,   -1,   -1,   -1,  272,  273,  272,  273,
  276,  277,  278,  279,  278,   -1,  257,   -1,   -1,  260,
   -1,  468,  469,  264,  265,   -1,   -1,   -1,   -1,   -1,
   -1,  272,  273,   -1,   -1,  276,  277,  278,  279,  257,
   -1,   -1,  260,   -1,   -1,   -1,  264,   -1,   -1,  267,
   -1,   -1,   -1,   -1,  272,  273,   -1,  275,   -1,   -1,
  278,
};
}
final static short YYFINAL=3;
final static short YYMAXTOKEN=279;
final static String yyname[] = {
"end-of-file",null,null,null,null,null,null,null,null,null,null,null,null,null,
null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,
null,null,null,null,null,null,null,null,null,null,"'('","')'","'*'","'+'","','",
"'-'",null,"'/'",null,null,null,null,null,null,null,null,null,null,"':'","';'",
"'<'","'='","'>'",null,null,null,null,null,null,null,null,null,null,null,null,
null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,
null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,
null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,
"'{'",null,"'}'",null,null,null,null,null,null,null,null,null,null,null,null,
null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,
null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,
null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,
null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,
null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,
null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,
null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,
null,null,null,null,null,null,null,"ID","CTE","CADENA","IF","THEN","ELSE",
"ENDIF","OUT","FUN","RETURN","BREAK","ASIGNACION","COMP_MAYOR_IGUAL",
"COMP_MENOR_IGUAL","COMP_DISTINTO","WHEN","DO","UNTIL","CONTINUE","DOUBLE64",
"UINT16","DEFER","CONST",
};
final static String yyrule[] = {
"$accept : programa",
"programa : nombre_programa '{' sentencias '}'",
"programa : '{' sentencias '}'",
"programa : nombre_programa sentencias '}'",
"programa : nombre_programa '{' sentencias",
"programa : nombre_programa '{' '}'",
"programa :",
"nombre_programa : ID",
"sentencias : sentencia",
"sentencias : sentencias sentencia",
"sentencia : sentencia_declarativa",
"sentencia : sentencia_ejecutable",
"sentencia_declarativa : sentencia_declarativa_variables",
"sentencia_declarativa : funcion_con_return",
"sentencia_declarativa : funcion_sin_return",
"sentencia_declarativa : declaracion_constantes",
"sentencia_declarativa_variables : tipo lista_de_variables ';'",
"sentencia_declarativa_variables : tipo lista_de_variables",
"sentencia_declarativa_variables : lista_de_variables ';'",
"sentencia_declarativa_variables : tipo ';'",
"lista_de_variables : ID ',' lista_de_variables",
"lista_de_variables : ID",
"funcion_con_return : encabezado_funcion '{' sentencia_return '}'",
"funcion_con_return : encabezado_funcion '{' sentencias_funcion sentencia_return '}'",
"funcion_con_return : encabezado_funcion '{' '}'",
"sentencias_funcion : sentencia_funcion",
"sentencias_funcion : sentencias_funcion sentencia_funcion",
"sentencia_funcion : sentencia_declarativa",
"sentencia_funcion : sentencia_ejecutable_funcion",
"sentencia_ejecutable_funcion : asignacion",
"sentencia_ejecutable_funcion : DEFER asignacion",
"sentencia_ejecutable_funcion : imprimir",
"sentencia_ejecutable_funcion : DEFER imprimir",
"sentencia_ejecutable_funcion : sentencia_when_con_return",
"sentencia_ejecutable_funcion : DEFER sentencia_when_con_return",
"sentencia_ejecutable_funcion : sentencia_do_con_return",
"sentencia_ejecutable_funcion : DEFER sentencia_do_con_return",
"sentencia_ejecutable_funcion : sentencia_seleccion_simple_con_return",
"sentencia_ejecutable_funcion : DEFER sentencia_seleccion_simple_con_return",
"sentencias_ejecutables_funcion : sentencia_ejecutable_funcion",
"sentencias_ejecutables_funcion : sentencias_ejecutables_funcion sentencia_ejecutable_funcion",
"funcion_sin_return : encabezado_funcion '{' sentencia_seleccion_compuesta_con_return '}'",
"funcion_sin_return : encabezado_funcion '{' sentencias_funcion sentencia_seleccion_compuesta_con_return '}'",
"sentencia_seleccion_compuesta_con_return : IF condicion THEN sentencia_seleccion_compuesta_con_return_simple ELSE sentencia_seleccion_compuesta_con_return_simple ENDIF ';'",
"sentencia_seleccion_compuesta_con_return : IF condicion THEN '{' sentencias_ejecutables_funcion sentencia_return '}' ELSE sentencia_seleccion_compuesta_con_return_simple ENDIF ';'",
"sentencia_seleccion_compuesta_con_return : IF condicion THEN '{' sentencias_ejecutables_funcion sentencia_seleccion_compuesta_con_return '}' ELSE sentencia_seleccion_compuesta_con_return_simple ENDIF ';'",
"sentencia_seleccion_compuesta_con_return : IF condicion THEN sentencia_seleccion_compuesta_con_return_simple ELSE '{' sentencias_ejecutables_funcion sentencia_return '}' ENDIF ';'",
"sentencia_seleccion_compuesta_con_return : IF condicion THEN sentencia_seleccion_compuesta_con_return_simple ELSE '{' sentencias_ejecutables_funcion sentencia_seleccion_compuesta_con_return '}' ENDIF ';'",
"sentencia_seleccion_compuesta_con_return : IF condicion THEN '{' sentencias_ejecutables_funcion sentencia_return '}' ELSE '{' sentencias_ejecutables_funcion sentencia_seleccion_compuesta_con_return_simple '}' ENDIF ';'",
"sentencia_seleccion_compuesta_con_return : IF condicion THEN '{' sentencias_ejecutables_funcion sentencia_seleccion_compuesta_con_return '}' ELSE '{' sentencias_ejecutables_funcion sentencia_seleccion_compuesta_con_return_simple '}' ENDIF ';'",
"sentencia_seleccion_compuesta_con_return : IF condicion THEN sentencia_seleccion_compuesta_con_return_simple ELSE sentencia_seleccion_compuesta_con_return_simple ENDIF",
"sentencia_seleccion_compuesta_con_return : IF condicion THEN '{' sentencias_ejecutables_funcion sentencia_return '}' ELSE sentencia_seleccion_compuesta_con_return_simple ENDIF",
"sentencia_seleccion_compuesta_con_return : IF condicion THEN '{' sentencias_ejecutables_funcion sentencia_seleccion_compuesta_con_return '}' ELSE sentencia_seleccion_compuesta_con_return_simple ENDIF",
"sentencia_seleccion_compuesta_con_return : IF condicion THEN sentencia_seleccion_compuesta_con_return_simple ELSE '{' sentencias_ejecutables_funcion sentencia_return '}' ENDIF",
"sentencia_seleccion_compuesta_con_return : IF condicion THEN sentencia_seleccion_compuesta_con_return_simple ELSE '{' sentencias_ejecutables_funcion sentencia_seleccion_compuesta_con_return '}' ENDIF",
"sentencia_seleccion_compuesta_con_return : IF condicion THEN '{' sentencias_ejecutables_funcion sentencia_return '}' ELSE '{' sentencias_ejecutables_funcion sentencia_seleccion_compuesta_con_return_simple '}' ENDIF",
"sentencia_seleccion_compuesta_con_return : IF condicion THEN '{' sentencias_ejecutables_funcion sentencia_seleccion_compuesta_con_return '}' ELSE '{' sentencias_ejecutables_funcion sentencia_seleccion_compuesta_con_return_simple '}' ENDIF",
"sentencia_seleccion_compuesta_con_return_simple : sentencia_return",
"sentencia_seleccion_compuesta_con_return_simple : sentencia_seleccion_compuesta_con_return",
"sentencia_seleccion_compuesta_con_return_simple : DEFER sentencia_seleccion_compuesta_con_return",
"sentencia_seleccion_simple_con_return : IF condicion THEN sentencia_return ENDIF ';'",
"sentencia_seleccion_simple_con_return : IF condicion THEN sentencia_seleccion_compuesta_con_return ENDIF ';'",
"sentencia_seleccion_simple_con_return : IF condicion THEN sentencia_ejecutable_funcion ENDIF ';'",
"sentencia_seleccion_simple_con_return : IF condicion THEN '{' sentencias_ejecutables_funcion sentencia_return '}' ENDIF ';'",
"sentencia_seleccion_simple_con_return : IF condicion THEN '{' sentencias_ejecutables_funcion sentencia_seleccion_compuesta_con_return '}' ENDIF ';'",
"sentencia_seleccion_simple_con_return : IF condicion THEN '{' sentencias_ejecutables_funcion sentencia_return '}' ELSE '{' sentencias_ejecutables_funcion '}' ENDIF ';'",
"sentencia_seleccion_simple_con_return : IF condicion THEN '{' sentencias_ejecutables_funcion sentencia_return '}' ELSE sentencia_ejecutable_funcion ENDIF ';'",
"sentencia_seleccion_simple_con_return : IF condicion THEN '{' sentencias_ejecutables_funcion sentencia_seleccion_compuesta_con_return '}' ELSE sentencia_ejecutable_funcion ENDIF ';'",
"sentencia_seleccion_simple_con_return : IF condicion THEN '{' sentencias_ejecutables_funcion sentencia_seleccion_compuesta_con_return '}' ELSE '{' sentencias_ejecutables_funcion '}' ENDIF ';'",
"sentencia_seleccion_simple_con_return : IF condicion THEN '{' sentencias_ejecutables_funcion '}' ELSE '{' sentencias_ejecutables_funcion sentencia_return '}' ENDIF ';'",
"sentencia_seleccion_simple_con_return : IF condicion THEN '{' sentencias_ejecutables_funcion '}' ELSE '{' sentencias_ejecutables_funcion sentencia_seleccion_compuesta_con_return '}' ENDIF ';'",
"sentencia_seleccion_simple_con_return : IF condicion THEN sentencia_ejecutable_funcion ELSE '{' sentencias_ejecutables_funcion sentencia_return '}' ENDIF ';'",
"sentencia_seleccion_simple_con_return : IF condicion THEN sentencia_ejecutable_funcion ELSE '{' sentencias_ejecutables_funcion sentencia_seleccion_compuesta_con_return '}' ENDIF ';'",
"sentencia_seleccion_simple_con_return : IF condicion THEN '{' sentencias_ejecutables_funcion '}' ELSE '{' sentencias_ejecutables_funcion '}' ENDIF ';'",
"sentencia_when_con_return : WHEN condicion THEN '{' sentencia_funcion '}' ';'",
"sentencia_when_con_return : WHEN condicion THEN '{' sentencia_funcion sentencia_return '}' ';'",
"sentencia_when_con_return : WHEN condicion THEN '{' sentencia_funcion sentencia_seleccion_compuesta_con_return '}' ';'",
"sentencia_when_con_return : WHEN condicion THEN '{' sentencia_funcion '}'",
"sentencia_when_con_return : WHEN condicion THEN '{' sentencia_funcion sentencia_return '}'",
"sentencia_when_con_return : WHEN condicion THEN '{' sentencia_funcion sentencia_seleccion_compuesta_con_return '}'",
"sentencia_when_con_return : WHEN condicion THEN '{' '}' ';'",
"sentencia_when_con_return : WHEN condicion '{' sentencia_funcion '}' ';'",
"sentencia_when_con_return : WHEN condicion '{' sentencia_funcion sentencia_return '}' ';'",
"sentencia_when_con_return : WHEN condicion '{' sentencia_funcion sentencia_seleccion_compuesta_con_return '}' ';'",
"sentencia_do_con_return : DO bloque_sentencias_ejecutables_do_con_return UNTIL condicion ';'",
"sentencia_do_con_return : etiqueta ':' DO bloque_sentencias_ejecutables_do_con_return UNTIL condicion ';'",
"sentencia_do_con_return : DO bloque_sentencias_ejecutables_do_con_return UNTIL condicion",
"sentencia_do_con_return : etiqueta ':' DO bloque_sentencias_ejecutables_do_con_return UNTIL condicion",
"bloque_sentencias_ejecutables_do_con_return : sentencia_return",
"bloque_sentencias_ejecutables_do_con_return : sentencia_seleccion_compuesta_con_return",
"bloque_sentencias_ejecutables_do_con_return : sentencias_ejecutables_do_funcion",
"bloque_sentencias_ejecutables_do_con_return : '{' sentencias_ejecutables_do_funcion sentencia_return '}'",
"bloque_sentencias_ejecutables_do_con_return : '{' sentencias_ejecutables_do_funcion sentencia_seleccion_compuesta_con_return '}'",
"bloque_sentencias_ejecutables_do_con_return : '{' sentencias_ejecutables_do_funcion '}'",
"bloque_sentencias_ejecutables_do_con_return : '{' '}'",
"bloque_sentencias_ejecutables_do_con_return : '{' sentencias_ejecutables_do_funcion sentencia_return",
"bloque_sentencias_ejecutables_do_con_return : sentencias_ejecutables_do_funcion sentencia_return '}'",
"bloque_sentencias_ejecutables_do_con_return : '{' sentencias_ejecutables_do_funcion sentencia_seleccion_compuesta_con_return",
"bloque_sentencias_ejecutables_do_con_return : sentencias_ejecutables_do_funcion sentencia_seleccion_compuesta_con_return '}'",
"bloque_sentencias_ejecutables_do_con_return : '{' sentencias_ejecutables_do_funcion",
"bloque_sentencias_ejecutables_do_con_return : sentencias_ejecutables_do_funcion '}'",
"sentencias_ejecutables_do_funcion : sentencia_ejecutable_do_funcion",
"sentencias_ejecutables_do_funcion : sentencias_ejecutables_do_funcion sentencia_ejecutable_do_funcion",
"sentencia_ejecutable_do_funcion : sentencia_ejecutable_funcion",
"sentencia_ejecutable_do_funcion : sentencia_break",
"sentencia_ejecutable_do_funcion : sentencia_continue",
"encabezado_funcion : FUN ID '(' ')' ':' tipo",
"encabezado_funcion : FUN ID '(' lista_de_parametros ')' ':' tipo",
"encabezado_funcion : FUN ID '(' lista_de_parametros ')' tipo",
"encabezado_funcion : FUN ID '(' ')' ':'",
"encabezado_funcion : FUN '(' ')' ':' tipo",
"encabezado_funcion : FUN ID ')' ':' tipo",
"encabezado_funcion : FUN ID '(' ':' tipo",
"encabezado_funcion : FUN ID '(' lista_de_parametros ')' ':'",
"encabezado_funcion : FUN '(' lista_de_parametros ')' ':' tipo",
"encabezado_funcion : FUN ID lista_de_parametros ')' ':' tipo",
"encabezado_funcion : FUN ID '(' lista_de_parametros ':' tipo",
"sentencia_return : RETURN '(' expresion ')' ';'",
"sentencia_return : RETURN '(' expresion ')'",
"sentencia_return : RETURN expresion ')'",
"sentencia_return : RETURN '(' expresion",
"sentencia_return : RETURN '(' ')' ';'",
"lista_de_parametros : parametro",
"lista_de_parametros : parametro ',' parametro",
"lista_de_parametros : parametro ',' parametro ',' lista_parametros_exceso",
"lista_parametros_exceso : parametro",
"lista_parametros_exceso : parametro ',' lista_parametros_exceso",
"parametro : tipo ID",
"parametro : tipo",
"$$1 :",
"parametro : $$1 ID",
"declaracion_constantes : CONST lista_declaracion_constantes ';'",
"declaracion_constantes : CONST lista_declaracion_constantes",
"declaracion_constantes : CONST ';'",
"lista_declaracion_constantes : declaracion_constante",
"lista_declaracion_constantes : declaracion_constante ',' lista_declaracion_constantes",
"declaracion_constante : ID ASIGNACION CTE",
"declaracion_constante : ID ASIGNACION",
"declaracion_constante : ID CTE",
"declaracion_constante : ID",
"declaracion_constante : ID '=' CTE",
"sentencia_ejecutable : asignacion",
"sentencia_ejecutable : DEFER asignacion",
"sentencia_ejecutable : seleccion",
"sentencia_ejecutable : DEFER seleccion",
"sentencia_ejecutable : imprimir",
"sentencia_ejecutable : DEFER imprimir",
"sentencia_ejecutable : sentencia_when",
"sentencia_ejecutable : DEFER sentencia_when",
"sentencia_ejecutable : sentencia_do",
"sentencia_ejecutable : DEFER sentencia_do",
"sentencia_ejecutable_do : sentencia_ejecutable",
"sentencia_ejecutable_do : sentencia_break",
"sentencia_ejecutable_do : sentencia_continue",
"sentencia_break : BREAK ';'",
"sentencia_break : BREAK ':' etiqueta ';'",
"sentencia_break : BREAK",
"sentencia_break : BREAK ':' etiqueta",
"sentencia_break : BREAK ':' ';'",
"sentencia_continue : CONTINUE ';'",
"sentencia_continue : CONTINUE",
"sentencia_do : sentencia_do_simple",
"sentencia_do : etiqueta ':' sentencia_do_simple",
"sentencia_do_simple : DO bloque_sentencias_ejecutables_do UNTIL condicion ';'",
"sentencia_do_simple : DO bloque_sentencias_ejecutables_do UNTIL condicion",
"etiqueta : ID",
"bloque_sentencias_ejecutables_do : sentencia_ejecutable_do",
"bloque_sentencias_ejecutables_do : '{' sentencias_ejecutables_do '}'",
"bloque_sentencias_ejecutables_do : '{' sentencias_ejecutables_do",
"bloque_sentencias_ejecutables_do : sentencias_ejecutables_do '}'",
"sentencias_ejecutables_do : sentencia_ejecutable_do",
"sentencias_ejecutables_do : sentencias_ejecutables_do sentencia_ejecutable_do",
"asignacion : ID ASIGNACION expresion ';'",
"asignacion : ID ASIGNACION ';'",
"asignacion : ID ASIGNACION expresion",
"asignacion : ID '=' expresion ';'",
"asignacion : ID '=' expresion",
"sentencia_when : WHEN condicion THEN '{' sentencias_when '}' ';'",
"sentencia_when : WHEN condicion '{' sentencias_when '}' ';'",
"sentencia_when : WHEN condicion THEN '{' sentencias_when '}'",
"sentencia_when : WHEN condicion '{' sentencias_when '}'",
"sentencia_when : WHEN condicion '{' '}'",
"sentencias_when : sentencia",
"sentencias_when : sentencia sentencias_when",
"seleccion : IF condicion THEN bloque_sentencias_ejecutables_seleccion_then ENDIF ';'",
"seleccion : IF condicion THEN bloque_sentencias_ejecutables_seleccion_then ELSE bloque_sentencias_ejecutables_seleccion_else ENDIF ';'",
"seleccion : IF condicion THEN bloque_sentencias_ejecutables_seleccion_then ENDIF",
"seleccion : IF condicion THEN bloque_sentencias_ejecutables_seleccion_then ELSE bloque_sentencias_ejecutables_seleccion_else ENDIF",
"seleccion : IF condicion THEN ENDIF ';'",
"seleccion : IF condicion bloque_sentencias_ejecutables_seleccion_then ENDIF ';'",
"seleccion : IF condicion bloque_sentencias_ejecutables_seleccion_then ELSE bloque_sentencias_ejecutables_seleccion_else ENDIF ';'",
"seleccion : IF condicion THEN ELSE ENDIF ';'",
"bloque_sentencias_ejecutables_seleccion : sentencia_ejecutable",
"bloque_sentencias_ejecutables_seleccion : '{' sentencias_ejecutables '}'",
"bloque_sentencias_ejecutables_seleccion : '{' '}'",
"bloque_sentencias_ejecutables_seleccion : '{' sentencias_ejecutables",
"bloque_sentencias_ejecutables_seleccion : sentencias_ejecutables '}'",
"sentencias_ejecutables : sentencia_ejecutable",
"sentencias_ejecutables : sentencias_ejecutables sentencia_ejecutable",
"bloque_sentencias_ejecutables_seleccion_then : bloque_sentencias_ejecutables_seleccion",
"bloque_sentencias_ejecutables_seleccion_else : bloque_sentencias_ejecutables_seleccion",
"condicion : '(' expresion comparador expresion ')'",
"condicion : '(' expresion comparador ')'",
"condicion : '(' comparador expresion ')'",
"condicion : expresion comparador expresion ')'",
"condicion : '(' expresion comparador expresion",
"condicion : '(' ')'",
"comparador : COMP_MAYOR_IGUAL",
"comparador : COMP_MENOR_IGUAL",
"comparador : COMP_DISTINTO",
"comparador : '>'",
"comparador : '<'",
"comparador : '='",
"expresion : expresion '+' termino",
"expresion : expresion '-' termino",
"expresion : termino",
"termino : termino '*' factor",
"termino : termino '/' factor",
"termino : factor",
"factor : ID",
"factor : constante",
"factor : invocacion_funcion",
"invocacion_funcion : ID '(' ')'",
"invocacion_funcion : ID '(' lista_de_parametros_reales ')'",
"lista_de_parametros_reales : parametro_real",
"lista_de_parametros_reales : lista_de_parametros_reales ',' parametro_real",
"parametro_real : ID",
"parametro_real : constante",
"imprimir : OUT '(' CADENA ')' ';'",
"imprimir : OUT '(' ID ')' ';'",
"imprimir : OUT '(' ')' ';'",
"imprimir : OUT CADENA ')' ';'",
"imprimir : OUT '(' CADENA ';'",
"imprimir : OUT ID ')' ';'",
"imprimir : OUT '(' ID ';'",
"imprimir : OUT '(' CADENA ')'",
"imprimir : OUT '(' ID ')'",
"constante : CTE",
"constante : '-' CTE",
"tipo : UINT16",
"tipo : DOUBLE64",
};

//#line 588 ".\gramatica.y"

public static AnalizadorLexico lexico = null;
public static Logger logger = Logger.getInstance();
public static TablaDeSimbolos ts = TablaDeSimbolos.getInstance();
public static Parser parser = null;

public static StringBuilder negConstante = new StringBuilder();

public void constanteConSigno(String constante) {
	if (constante.contains(".")) {

		negConstante.setLength(0);
		negConstante.append("-");
		negConstante.append(constante);
		
		Double parsedDouble = Double.parseDouble(negConstante.toString().replace('D', 'E'));
		
		if (parsedDouble < -2.2250738585072014E-308 && -1.7976931348623157E+308 > parsedDouble) {
			logger.logWarning("[Parser] Rango invalido para la constante: " + negConstante + ", se trunca al rango permitido");
			
			if (-1.7976931348623157E+308 < parsedDouble) {
				negConstante.setLength(0);
				negConstante.append("-1.7976931348623157D+308");
			} else {
				negConstante.setLength(0);
				negConstante.append("-2.2250738585072014D-308");
			}
		}
		
		ts.swapLexemas(constante, negConstante.toString());
	} else {
		//se recibio un uint que fue aceptado por el lexico pero resulta ser negativo
		logger.logWarning("[Parser] No se admiten ui16 con valores negativos: " + "-"+constante + ", se trunca a 0");
		
		ts.swapLexemas(constante, "0");
	}
}	

public int yylex() {
	return lexico.yylex(parser);
}

public void yyerror(String error) {
	logger.logError(error);
}

public static void main(String[] args) {
	if (args.length == 0) {
		System.err.println("No se especifico ningun archivo de codigo");
	} else {
		String archivo_a_leer = args[0];
		System.out.println("Se va a leer archivo " + archivo_a_leer);
		
		FileReaderHelper fileHelper = new FileReaderHelper();
		
		boolean fileOpenSuccess = fileHelper.open(archivo_a_leer);
		
		if (fileOpenSuccess) {
			parser = new Parser();
			lexico = new AnalizadorLexico(fileHelper);
			
	        parser.run();
	
			String path = new File(archivo_a_leer).getAbsolutePath();
	        
	        Output out = new Output(path);
	        
	        String printTs = ts.print();
	        
	        out.saveFile("codigo-lexico.txt", logger.getLexico());
			out.saveFile("codigo-sintetico.txt", logger.getSintactico());
			out.saveFile("tabla-de-simbolos.txt", printTs);
	        
			System.out.println(printTs);

			GeneracionCodigoIntermedio instance = GeneracionCodigoIntermedio.getInstance();

			instance.printTercetos();
		}
	}
}
//#line 1076 "Parser.java"
//###############################################################
// method: yylexdebug : check lexer state
//###############################################################
void yylexdebug(int state,int ch)
{
String s=null;
  if (ch < 0) ch=0;
  if (ch <= YYMAXTOKEN) //check index bounds
     s = yyname[ch];    //now get it
  if (s==null)
    s = "illegal-symbol";
  debug("state "+state+", reading "+ch+" ("+s+")");
}





//The following are now global, to aid in error reporting
int yyn;       //next next thing to do
int yym;       //
int yystate;   //current parsing state from state table
String yys;    //current token string


//###############################################################
// method: yyparse : parse input and execute indicated items
//###############################################################
int yyparse()
{
boolean doaction;
  init_stacks();
  yynerrs = 0;
  yyerrflag = 0;
  yychar = -1;          //impossible char forces a read
  yystate=0;            //initial state
  state_push(yystate);  //save it
  val_push(yylval);     //save empty value
  while (true) //until parsing is done, either correctly, or w/error
    {
    doaction=true;
    if (yydebug) debug("loop"); 
    //#### NEXT ACTION (from reduction table)
    for (yyn=yydefred[yystate];yyn==0;yyn=yydefred[yystate])
      {
      if (yydebug) debug("yyn:"+yyn+"  state:"+yystate+"  yychar:"+yychar);
      if (yychar < 0)      //we want a char?
        {
        yychar = yylex();  //get next token
        if (yydebug) debug(" next yychar:"+yychar);
        //#### ERROR CHECK ####
        if (yychar < 0)    //it it didn't work/error
          {
          yychar = 0;      //change it to default string (no -1!)
          if (yydebug)
            yylexdebug(yystate,yychar);
          }
        }//yychar<0
      yyn = yysindex[yystate];  //get amount to shift by (shift index)
      if ((yyn != 0) && (yyn += yychar) >= 0 &&
          yyn <= YYTABLESIZE && yycheck[yyn] == yychar)
        {
        if (yydebug)
          debug("state "+yystate+", shifting to state "+yytable[yyn]);
        //#### NEXT STATE ####
        yystate = yytable[yyn];//we are in a new state
        state_push(yystate);   //save it
        val_push(yylval);      //push our lval as the input for next rule
        yychar = -1;           //since we have 'eaten' a token, say we need another
        if (yyerrflag > 0)     //have we recovered an error?
           --yyerrflag;        //give ourselves credit
        doaction=false;        //but don't process yet
        break;   //quit the yyn=0 loop
        }

    yyn = yyrindex[yystate];  //reduce
    if ((yyn !=0 ) && (yyn += yychar) >= 0 &&
            yyn <= YYTABLESIZE && yycheck[yyn] == yychar)
      {   //we reduced!
      if (yydebug) debug("reduce");
      yyn = yytable[yyn];
      doaction=true; //get ready to execute
      break;         //drop down to actions
      }
    else //ERROR RECOVERY
      {
      if (yyerrflag==0)
        {
        yyerror("syntax error");
        yynerrs++;
        }
      if (yyerrflag < 3) //low error count?
        {
        yyerrflag = 3;
        while (true)   //do until break
          {
          if (stateptr<0)   //check for under & overflow here
            {
            yyerror("stack underflow. aborting...");  //note lower case 's'
            return 1;
            }
          yyn = yysindex[state_peek(0)];
          if ((yyn != 0) && (yyn += YYERRCODE) >= 0 &&
                    yyn <= YYTABLESIZE && yycheck[yyn] == YYERRCODE)
            {
            if (yydebug)
              debug("state "+state_peek(0)+", error recovery shifting to state "+yytable[yyn]+" ");
            yystate = yytable[yyn];
            state_push(yystate);
            val_push(yylval);
            doaction=false;
            break;
            }
          else
            {
            if (yydebug)
              debug("error recovery discarding state "+state_peek(0)+" ");
            if (stateptr<0)   //check for under & overflow here
              {
              yyerror("Stack underflow. aborting...");  //capital 'S'
              return 1;
              }
            state_pop();
            val_pop();
            }
          }
        }
      else            //discard this token
        {
        if (yychar == 0)
          return 1; //yyabort
        if (yydebug)
          {
          yys = null;
          if (yychar <= YYMAXTOKEN) yys = yyname[yychar];
          if (yys == null) yys = "illegal-symbol";
          debug("state "+yystate+", error recovery discards token "+yychar+" ("+yys+")");
          }
        yychar = -1;  //read another
        }
      }//end error recovery
    }//yyn=0 loop
    if (!doaction)   //any reason not to proceed?
      continue;      //skip action
    yym = yylen[yyn];          //get count of terminals on rhs
    if (yydebug)
      debug("state "+yystate+", reducing "+yym+" by rule "+yyn+" ("+yyrule[yyn]+")");
    if (yym>0)                 //if count of rhs not 'nil'
      yyval = val_peek(yym-1); //get current semantic value
    yyval = dup_yyval(yyval); //duplicate yyval if ParserVal is used as semantic value
    switch(yyn)
      {
//########## USER-SUPPLIED ACTIONS ##########
case 1:
//#line 17 ".\gramatica.y"
{ 
		logger.logSuccess("[Parser] Programa correcto detectado");
		GeneracionCodigoIntermedio instance = GeneracionCodigoIntermedio.getInstance();
		instance.agregarUsoAIdentificador(val_peek(3).sval, "nombre_programa");
	}
break;
case 2:
//#line 22 ".\gramatica.y"
{ logger.logError("[Parser] Se esperaba un identificador nombre del programa"); }
break;
case 3:
//#line 23 ".\gramatica.y"
{ logger.logError("[Parser] Se esperaba un { antes de las sentencias del programa"); }
break;
case 4:
//#line 24 ".\gramatica.y"
{ logger.logError("[Parser] Se esperaba un } al final de las sentencias del programa"); }
break;
case 5:
//#line 25 ".\gramatica.y"
{ logger.logError("[Parser] Se esperaban sentencias del programa"); }
break;
case 6:
//#line 26 ".\gramatica.y"
{ logger.logError("[Parser] Se esperaban sentencias del programa"); }
break;
case 16:
//#line 51 ".\gramatica.y"
{ 
		logger.logSuccess("[Parser] Declaracion de lista de variables detectado"); 
		GeneracionCodigoIntermedio instance = GeneracionCodigoIntermedio.getInstance(); 
		instance.agregarTipoAListaDeVariables(val_peek(2).sval);
	}
break;
case 17:
//#line 56 ".\gramatica.y"
{ logger.logError("[Parser] Se esperaba un ; al final de la lista de variables"); }
break;
case 18:
//#line 57 ".\gramatica.y"
{ logger.logError("[Parser] Se esperaba un tipo para la lista de variables"); }
break;
case 19:
//#line 58 ".\gramatica.y"
{ logger.logError("[Parser] Se esperaba una variable o lista de variables"); }
break;
case 20:
//#line 62 ".\gramatica.y"
{ 
		GeneracionCodigoIntermedio instance = GeneracionCodigoIntermedio.getInstance(); 
		instance.agregarVariableADeclarar(val_peek(2).sval);
	}
break;
case 21:
//#line 66 ".\gramatica.y"
{
		GeneracionCodigoIntermedio instance = GeneracionCodigoIntermedio.getInstance(); 
		instance.agregarVariableADeclarar(val_peek(0).sval);
	}
break;
case 22:
//#line 73 ".\gramatica.y"
{ logger.logSuccess("[Parser] Declaracion de funcion detectado"); }
break;
case 23:
//#line 74 ".\gramatica.y"
{ logger.logSuccess("[Parser] Declaracion de funcion detectado"); }
break;
case 24:
//#line 75 ".\gramatica.y"
{ logger.logError("[Parser] Se esperaban sentencias en la funcion"); }
break;
case 41:
//#line 107 ".\gramatica.y"
{ logger.logSuccess("[Parser] Declaracion de funcion detectado"); }
break;
case 42:
//#line 108 ".\gramatica.y"
{ logger.logSuccess("[Parser] Declaracion de funcion detectado"); }
break;
case 43:
//#line 112 ".\gramatica.y"
{ logger.logSuccess("[Parser] Sentencia seleccion detectada"); }
break;
case 44:
//#line 113 ".\gramatica.y"
{ logger.logSuccess("[Parser] Sentencia seleccion detectada"); }
break;
case 45:
//#line 114 ".\gramatica.y"
{ logger.logSuccess("[Parser] Sentencia seleccion detectada"); }
break;
case 46:
//#line 115 ".\gramatica.y"
{ logger.logSuccess("[Parser] Sentencia seleccion detectada"); }
break;
case 47:
//#line 116 ".\gramatica.y"
{ logger.logSuccess("[Parser] Sentencia seleccion detectada"); }
break;
case 48:
//#line 117 ".\gramatica.y"
{ logger.logSuccess("[Parser] Sentencia seleccion detectada"); }
break;
case 49:
//#line 118 ".\gramatica.y"
{ logger.logSuccess("[Parser] Sentencia seleccion detectada"); }
break;
case 50:
//#line 119 ".\gramatica.y"
{ logger.logError("[Parser] Se esperaba un ; al final de la sentencia de seleccion"); }
break;
case 51:
//#line 120 ".\gramatica.y"
{ logger.logError("[Parser] Se esperaba un ; al final de la sentencia de seleccion"); }
break;
case 52:
//#line 121 ".\gramatica.y"
{ logger.logError("[Parser] Se esperaba un ; al final de la sentencia de seleccion"); }
break;
case 53:
//#line 122 ".\gramatica.y"
{ logger.logError("[Parser] Se esperaba un ; al final de la sentencia de seleccion"); }
break;
case 54:
//#line 123 ".\gramatica.y"
{ logger.logError("[Parser] Se esperaba un ; al final de la sentencia de seleccion"); }
break;
case 55:
//#line 124 ".\gramatica.y"
{ logger.logError("[Parser] Se esperaba un ; al final de la sentencia de seleccion"); }
break;
case 56:
//#line 125 ".\gramatica.y"
{ logger.logError("[Parser] Se esperaba un ; al final de la sentencia de seleccion"); }
break;
case 60:
//#line 135 ".\gramatica.y"
{ logger.logSuccess("[Parser] Sentencia de seleccion detectada"); }
break;
case 61:
//#line 136 ".\gramatica.y"
{ logger.logSuccess("[Parser] Sentencia de seleccion detectada"); }
break;
case 62:
//#line 137 ".\gramatica.y"
{ logger.logSuccess("[Parser] Sentencia de seleccion detectada"); }
break;
case 63:
//#line 138 ".\gramatica.y"
{ logger.logSuccess("[Parser] Sentencia de seleccion detectada"); }
break;
case 64:
//#line 139 ".\gramatica.y"
{ logger.logSuccess("[Parser] Sentencia de seleccion detectada"); }
break;
case 65:
//#line 140 ".\gramatica.y"
{ logger.logSuccess("[Parser] Sentencia de seleccion detectada"); }
break;
case 66:
//#line 141 ".\gramatica.y"
{ logger.logSuccess("[Parser] Sentencia de seleccion detectada"); }
break;
case 67:
//#line 142 ".\gramatica.y"
{ logger.logSuccess("[Parser] Sentencia de seleccion detectada"); }
break;
case 68:
//#line 143 ".\gramatica.y"
{ logger.logSuccess("[Parser] Sentencia de seleccion detectada"); }
break;
case 69:
//#line 144 ".\gramatica.y"
{ logger.logSuccess("[Parser] Sentencia de seleccion detectada"); }
break;
case 70:
//#line 145 ".\gramatica.y"
{ logger.logSuccess("[Parser] Sentencia de seleccion detectada"); }
break;
case 71:
//#line 146 ".\gramatica.y"
{ logger.logSuccess("[Parser] Sentencia de seleccion detectada"); }
break;
case 72:
//#line 147 ".\gramatica.y"
{ logger.logSuccess("[Parser] Sentencia de seleccion detectada"); }
break;
case 73:
//#line 148 ".\gramatica.y"
{ logger.logSuccess("[Parser] Sentencia de seleccion detectada"); }
break;
case 74:
//#line 152 ".\gramatica.y"
{ logger.logSuccess("[Parser] Sentencia when detectada"); }
break;
case 75:
//#line 153 ".\gramatica.y"
{ logger.logSuccess("[Parser] Sentencia when detectada"); }
break;
case 76:
//#line 154 ".\gramatica.y"
{ logger.logSuccess("[Parser] Sentencia when detectada"); }
break;
case 77:
//#line 155 ".\gramatica.y"
{ logger.logError("[Parser] Se esperaba ; al final de la sentencia when"); }
break;
case 78:
//#line 156 ".\gramatica.y"
{ logger.logError("[Parser] Se esperaba ; al final de la sentencia when"); }
break;
case 79:
//#line 157 ".\gramatica.y"
{ logger.logError("[Parser] Se esperaba ; al final de la sentencia when"); }
break;
case 80:
//#line 158 ".\gramatica.y"
{ logger.logError("[Parser] Se esperaban sentencias en la sentencia when"); }
break;
case 81:
//#line 159 ".\gramatica.y"
{ logger.logError("[Parser] Se esperaba la palabra reservada then en la sentencia when"); }
break;
case 82:
//#line 160 ".\gramatica.y"
{ logger.logError("[Parser] Se esperaba la palabra reservada then en la sentencia when"); }
break;
case 83:
//#line 161 ".\gramatica.y"
{ logger.logError("[Parser] Se esperaba la palabra reservada then en la sentencia when"); }
break;
case 84:
//#line 165 ".\gramatica.y"
{ logger.logSuccess("[Parser] Sentencia do until detectada"); }
break;
case 85:
//#line 166 ".\gramatica.y"
{ logger.logSuccess("[Parser] Sentencia do until detectada"); }
break;
case 86:
//#line 167 ".\gramatica.y"
{ logger.logError("[Parser] Se esperaba un ; al final de la sentencia do"); }
break;
case 87:
//#line 168 ".\gramatica.y"
{ logger.logError("[Parser] Se esperaba un ; al final de la sentencia do"); }
break;
case 94:
//#line 178 ".\gramatica.y"
{ logger.logError("[Parser] Se esperaban sentencias en la sentencia do"); }
break;
case 95:
//#line 179 ".\gramatica.y"
{ logger.logError("[Parser] Se esperaba un } al final de la sentencia do"); }
break;
case 96:
//#line 180 ".\gramatica.y"
{ logger.logError("[Parser] Se esperaba un } al final de la sentencia do"); }
break;
case 97:
//#line 181 ".\gramatica.y"
{ logger.logError("[Parser] Se esperaba un } al final de la sentencia do"); }
break;
case 98:
//#line 182 ".\gramatica.y"
{ logger.logError("[Parser] Se esperaba un } al final de la sentencia do"); }
break;
case 99:
//#line 183 ".\gramatica.y"
{ logger.logError("[Parser] Se esperaba un } al final de la sentencia do"); }
break;
case 100:
//#line 184 ".\gramatica.y"
{ logger.logError("[Parser] Se esperaba un } al final de la sentencia do"); }
break;
case 106:
//#line 199 ".\gramatica.y"
{
		GeneracionCodigoIntermedio instance = GeneracionCodigoIntermedio.getInstance();
		instance.agregarUsoAIdentificador(val_peek(4).sval, "nombre_funcion");
	}
break;
case 107:
//#line 203 ".\gramatica.y"
{
		GeneracionCodigoIntermedio instance = GeneracionCodigoIntermedio.getInstance();
		instance.agregarUsoAIdentificador(val_peek(5).sval, "nombre_funcion");
	}
break;
case 108:
//#line 207 ".\gramatica.y"
{ logger.logError("[Parser] Se esperaba un : antes del tipo para la funcion"); }
break;
case 109:
//#line 208 ".\gramatica.y"
{ logger.logError("[Parser] Se esperaba un tipo de return para la funcion"); }
break;
case 110:
//#line 209 ".\gramatica.y"
{ logger.logError("[Parser] Se esperaba un identificador nombre para la funcion"); }
break;
case 111:
//#line 210 ".\gramatica.y"
{ logger.logError("[Parser] Se esperaba un ( luego del nombre de la funcion"); }
break;
case 112:
//#line 211 ".\gramatica.y"
{ logger.logError("[Parser] Se esperaba un ) luego del nombre para la funcion"); }
break;
case 113:
//#line 212 ".\gramatica.y"
{ logger.logError("[Parser] Se esperaba un tipo de return para la funcion"); }
break;
case 114:
//#line 213 ".\gramatica.y"
{ logger.logError("[Parser] Se esperaba un identificador nombre para la funcion"); }
break;
case 115:
//#line 214 ".\gramatica.y"
{ logger.logError("[Parser] Se esperaba un ( luego del nombre de la funcion"); }
break;
case 116:
//#line 215 ".\gramatica.y"
{ logger.logError("[Parser] Se esperaba un ) luego del nombre para la funcion"); }
break;
case 118:
//#line 220 ".\gramatica.y"
{ logger.logError("[Parser] Se esperaba un ; al final de la sentencia return"); }
break;
case 119:
//#line 221 ".\gramatica.y"
{ logger.logError("[Parser] Se esperaba un ( en la sentencia return"); }
break;
case 120:
//#line 222 ".\gramatica.y"
{ logger.logError("[Parser] Se esperaba un ) en la sentencia return"); }
break;
case 121:
//#line 223 ".\gramatica.y"
{ logger.logError("[Parser] Se esperaba una expresion en la sentencia return"); }
break;
case 124:
//#line 229 ".\gramatica.y"
{ logger.logError("[Parser] Hay mas de 2 parametros en la funcion"); }
break;
case 127:
//#line 238 ".\gramatica.y"
{
		GeneracionCodigoIntermedio instance = GeneracionCodigoIntermedio.getInstance();
		instance.agregarTipoAParametro(val_peek(0).sval, val_peek(1).sval);
	}
break;
case 129:
//#line 242 ".\gramatica.y"
{ logger.logError("[Parser] Se esperaba un identificador nombre para el parametro"); }
break;
case 130:
//#line 243 ".\gramatica.y"
{ logger.logError("[Parser] Se esperaba un tipo valido para el parametro"); }
break;
case 131:
//#line 247 ".\gramatica.y"
{ logger.logSuccess("[Parser] Declaracion de constantes detectado"); }
break;
case 132:
//#line 248 ".\gramatica.y"
{ logger.logError("[Parser] Se esperaba ; al final de la declaracion de constantes"); }
break;
case 133:
//#line 249 ".\gramatica.y"
{ logger.logError("[Parser] Se esperaba una lista de declaracion de constantes"); }
break;
case 137:
//#line 259 ".\gramatica.y"
{ logger.logError("[Parser] Se esperaba una constante del lado derecho de la asignacion"); }
break;
case 138:
//#line 260 ".\gramatica.y"
{ logger.logError("[Parser] Se esperaba el simbolo asignacion en la declaracion de constantes"); }
break;
case 139:
//#line 261 ".\gramatica.y"
{ logger.logError("[Parser] Se esperaba una asignacion en la declaracion de constantes"); }
break;
case 154:
//#line 285 ".\gramatica.y"
{ logger.logSuccess("[Parser] Sentencia break detectada"); }
break;
case 155:
//#line 286 ".\gramatica.y"
{ logger.logSuccess("[Parser] Sentencia break con etiqueta detectada"); }
break;
case 156:
//#line 287 ".\gramatica.y"
{ logger.logError("[Parser] Se esperaba un ; luego de la sentencia break"); }
break;
case 157:
//#line 288 ".\gramatica.y"
{ logger.logError("[Parser] Se esperaba un ; luego de la sentencia break"); }
break;
case 158:
//#line 289 ".\gramatica.y"
{ logger.logError("[Parser] Se esperaba una etiqueta en la sentencia break"); }
break;
case 159:
//#line 293 ".\gramatica.y"
{ logger.logSuccess("[Parser] Sentencia continue detectada"); }
break;
case 160:
//#line 294 ".\gramatica.y"
{ logger.logError("[Parser] Se esperaba un ; al final de la sentencia continue"); }
break;
case 163:
//#line 303 ".\gramatica.y"
{ logger.logSuccess("[Parser] Sentencia do until detectada"); }
break;
case 164:
//#line 304 ".\gramatica.y"
{ logger.logError("[Parser] Se esperaba un ; al final de la sentencia do"); }
break;
case 165:
//#line 308 ".\gramatica.y"
{
		GeneracionCodigoIntermedio instance = GeneracionCodigoIntermedio.getInstance();
		instance.agregarUsoAIdentificador(val_peek(0).sval, "nombre_etiqueta");
	}
break;
case 168:
//#line 317 ".\gramatica.y"
{ logger.logError("[Parser] Se esperaba un } al final de la sentencia do"); }
break;
case 169:
//#line 318 ".\gramatica.y"
{ logger.logError("[Parser] Se esperaba un { en la sentencia do"); }
break;
case 172:
//#line 328 ".\gramatica.y"
{ 
		logger.logSuccess("[Parser] Asignacion detectada"); 

		GeneracionCodigoIntermedio instance = GeneracionCodigoIntermedio.getInstance();

		int tercetoPosicion = instance.getTamanioListaTercetos(); 

		Terceto terceto = new Terceto("=:", val_peek(3).sval, val_peek(1).sval);

		terceto.setOperacion("=:");
		terceto.setOperando1(val_peek(3).sval);
		terceto.setOperando2(val_peek(1).sval);

		instance.agregarTerceto(terceto);

		yyval.sval = "[" + tercetoPosicion + "]";

	}
break;
case 173:
//#line 346 ".\gramatica.y"
{logger.logError("[Parser] Se espera una expresion del lado derecho de la asignacion");}
break;
case 174:
//#line 347 ".\gramatica.y"
{ logger.logError("[Parser] Se espera un ; al final de la asignacion"); }
break;
case 175:
//#line 348 ".\gramatica.y"
{ logger.logError("[Parser] Se espera el simbolo =: en lugar de = para la asignacion"); }
break;
case 176:
//#line 349 ".\gramatica.y"
{ logger.logError("[Parser] Se espera el simbolo =: en lugar de = para la asignacion"); }
break;
case 177:
//#line 353 ".\gramatica.y"
{ logger.logSuccess("[Parser] Sentencia when detectada"); }
break;
case 178:
//#line 354 ".\gramatica.y"
{ logger.logError("[Parser] Se esperaba la palabra reservada then en la sentencia when"); }
break;
case 179:
//#line 355 ".\gramatica.y"
{ logger.logError("[Parser] Se esperaba un ; al final de la sentencia when"); }
break;
case 180:
//#line 356 ".\gramatica.y"
{ logger.logError("[Parser] Se esperaba la palabra reservada then en la sentencia when"); }
break;
case 181:
//#line 357 ".\gramatica.y"
{ logger.logError("[Parser] Se esperaban sentencias dentro del when"); }
break;
case 184:
//#line 367 ".\gramatica.y"
{ 
		logger.logSuccess("[Parser] Sentencia if then detectada");

		GeneracionCodigoIntermedio instance = GeneracionCodigoIntermedio.getInstance();

		Terceto bi = instance.desapilarTerceto();
		bi.setOperando1("[" + String.valueOf(instance.getTamanioListaTercetos()) + "]");
	}
break;
case 185:
//#line 375 ".\gramatica.y"
{ 
		logger.logSuccess("[Parser] Sentencia if then else detectada"); 
		GeneracionCodigoIntermedio instance = GeneracionCodigoIntermedio.getInstance();
		Terceto bi = instance.desapilarTerceto();
		bi.setOperando1("[" + String.valueOf(instance.getTamanioListaTercetos()) + "]");
	}
break;
case 186:
//#line 381 ".\gramatica.y"
{ logger.logError("[Parser] Se esperaba un ; al final de la sentencia seleccion"); }
break;
case 187:
//#line 382 ".\gramatica.y"
{ logger.logError("[Parser] Se esperaba un ; al final de la sentencia seleccion"); }
break;
case 188:
//#line 383 ".\gramatica.y"
{ logger.logError("[Parser] Se esperaban sentencias en la sentencia seleccion"); }
break;
case 189:
//#line 384 ".\gramatica.y"
{ logger.logError("[Parser] Se esperaban la palabra reservada then en la sentencia seleccion"); }
break;
case 190:
//#line 385 ".\gramatica.y"
{ logger.logError("[Parser] Se esperaban la palabra reservada then en la sentencia seleccion"); }
break;
case 191:
//#line 386 ".\gramatica.y"
{ logger.logError("[Parser] Se esperaban sentencias en la sentencia seleccion"); }
break;
case 194:
//#line 392 ".\gramatica.y"
{ logger.logError("[Parser] Se esperaban sentencias dentro de la seleccion"); }
break;
case 195:
//#line 393 ".\gramatica.y"
{ logger.logError("[Parser] Se esperaba un } al final de la seleccion"); }
break;
case 196:
//#line 394 ".\gramatica.y"
{ logger.logError("[Parser] Se esperaba un { en la seleccion"); }
break;
case 199:
//#line 403 ".\gramatica.y"
{

		GeneracionCodigoIntermedio instance = GeneracionCodigoIntermedio.getInstance();

		Terceto t = instance.desapilarTerceto();

		t.setOperando2("[" + String.valueOf(instance.getTamanioListaTercetos() + 1) + "]");

		Terceto bi = new Terceto("BI", "-", "-");

		instance.agregarTerceto(bi);
		instance.apilarTerceto(bi);
	}
break;
case 201:
//#line 424 ".\gramatica.y"
{
		GeneracionCodigoIntermedio instance = GeneracionCodigoIntermedio.getInstance();

		/*int tercetoPosicion = instance.getTamanioListaTercetos();*/

		int tercetoPosicion = 0;

		Terceto terceto = new Terceto(val_peek(2).sval, val_peek(3).sval, val_peek(1).sval);

		tercetoPosicion = instance.getTamanioListaTercetos();

		instance.agregarTerceto(terceto);
		
		yyval.sval = "[" + tercetoPosicion + "]";

		terceto = new Terceto("BF", "[" + tercetoPosicion + "]", "-");

		instance.agregarTerceto(terceto);
		instance.apilarTerceto(terceto);

		/*$$.sval = "[" + tercetoPosicion + "]";*/

	}
break;
case 202:
//#line 447 ".\gramatica.y"
{ logger.logError("[Parser] Se esperaba un expresion del lado derecho de la comparacion"); }
break;
case 203:
//#line 448 ".\gramatica.y"
{ logger.logError("[Parser] Se esperaba un expresion del lado izquierdo de la comparacion"); }
break;
case 204:
//#line 449 ".\gramatica.y"
{ logger.logError("[Parser] Se esperaba un ( al comienzo de la comparacion"); }
break;
case 205:
//#line 450 ".\gramatica.y"
{ logger.logError("[Parser] Se esperaba un ) al final de la comparacion"); }
break;
case 206:
//#line 451 ".\gramatica.y"
{ logger.logError("[Parser] Se esperaba una comparacion"); }
break;
case 207:
//#line 455 ".\gramatica.y"
{yyval.sval = ">=";}
break;
case 208:
//#line 456 ".\gramatica.y"
{yyval.sval = "<=";}
break;
case 209:
//#line 457 ".\gramatica.y"
{yyval.sval = "=!";}
break;
case 210:
//#line 458 ".\gramatica.y"
{yyval.sval = ">";}
break;
case 211:
//#line 459 ".\gramatica.y"
{yyval.sval = "<";}
break;
case 212:
//#line 460 ".\gramatica.y"
{yyval.sval = "=";}
break;
case 213:
//#line 464 ".\gramatica.y"
{
		
		GeneracionCodigoIntermedio instance = GeneracionCodigoIntermedio.getInstance();

		int tercetoPosicion = instance.getTamanioListaTercetos(); 

		Terceto terceto = new Terceto("+", val_peek(2).sval, val_peek(0).sval);

		instance.agregarTerceto(terceto);

		yyval.sval = "[" + tercetoPosicion + "]";

	}
break;
case 214:
//#line 477 ".\gramatica.y"
{
		
		GeneracionCodigoIntermedio instance = GeneracionCodigoIntermedio.getInstance();

		int tercetoPosicion = instance.getTamanioListaTercetos(); 

		Terceto terceto = new Terceto("-", val_peek(2).sval, val_peek(0).sval);

		instance.agregarTerceto(terceto);

		yyval.sval = "[" + tercetoPosicion + "]";

	}
break;
case 215:
//#line 490 ".\gramatica.y"
{
		yyval.sval = val_peek(0).sval;
	}
break;
case 216:
//#line 496 ".\gramatica.y"
{
		GeneracionCodigoIntermedio instance = GeneracionCodigoIntermedio.getInstance();

		int tercetoPosicion = instance.getTamanioListaTercetos();

		Terceto terceto = new Terceto("*", val_peek(2).sval, val_peek(0).sval);

		instance.agregarTerceto(terceto);

		yyval.sval = "[" + tercetoPosicion + "]";

	}
break;
case 217:
//#line 508 ".\gramatica.y"
{

		GeneracionCodigoIntermedio instance = GeneracionCodigoIntermedio.getInstance();

		int tercetoPosicion = instance.getTamanioListaTercetos();

		Terceto terceto = new Terceto("/", val_peek(2).sval, val_peek(0).sval);

		instance.agregarTerceto(terceto);

		yyval.sval = "[" + tercetoPosicion + "]";
		
	}
break;
case 218:
//#line 521 ".\gramatica.y"
{
		yyval.sval = val_peek(0).sval;
	}
break;
case 219:
//#line 527 ".\gramatica.y"
{
		yyval.sval = val_peek(0).sval;
	}
break;
case 220:
//#line 530 ".\gramatica.y"
{
		yyval.sval = val_peek(0).sval;
	}
break;
case 228:
//#line 552 ".\gramatica.y"
{ 
		logger.logSuccess("[Parser] Sentencia out detectada"); 
		GeneracionCodigoIntermedio instance = GeneracionCodigoIntermedio.getInstance();

		Terceto out = new Terceto("out", val_peek(2).sval, "-");

		instance.agregarTerceto(out);
	}
break;
case 229:
//#line 560 ".\gramatica.y"
{ 
		logger.logSuccess("[Parser] Sentencia out detectada"); 
		GeneracionCodigoIntermedio instance = GeneracionCodigoIntermedio.getInstance();

		Terceto out = new Terceto("out", val_peek(2).sval, "-");

		instance.agregarTerceto(out);
	}
break;
case 230:
//#line 568 ".\gramatica.y"
{ logger.logError("[Parser] Se esperaba una cadena o identificador en la sentencia out"); }
break;
case 231:
//#line 569 ".\gramatica.y"
{ logger.logError("[Parser] Se esperaba un ( en la sentencia out"); }
break;
case 232:
//#line 570 ".\gramatica.y"
{ logger.logError("[Parser] Se esperaba un ) en la sentencia out"); }
break;
case 233:
//#line 571 ".\gramatica.y"
{ logger.logError("[Parser] Se esperaba un ( en la sentencia out"); }
break;
case 234:
//#line 572 ".\gramatica.y"
{ logger.logError("[Parser] Se esperaba un ) en la sentencia out"); }
break;
case 235:
//#line 573 ".\gramatica.y"
{ logger.logError("[Parser] Se espera un ; al final de la sentencia out"); }
break;
case 236:
//#line 574 ".\gramatica.y"
{ logger.logError("[Parser] Se espera un ; al final de la sentencia out"); }
break;
case 238:
//#line 579 ".\gramatica.y"
{ constanteConSigno(val_peek(0).sval); }
break;
//#line 2003 "Parser.java"
//########## END OF USER-SUPPLIED ACTIONS ##########
    }//switch
    //#### Now let's reduce... ####
    if (yydebug) debug("reduce");
    state_drop(yym);             //we just reduced yylen states
    yystate = state_peek(0);     //get new state
    val_drop(yym);               //corresponding value drop
    yym = yylhs[yyn];            //select next TERMINAL(on lhs)
    if (yystate == 0 && yym == 0)//done? 'rest' state and at first TERMINAL
      {
      if (yydebug) debug("After reduction, shifting from state 0 to state "+YYFINAL+"");
      yystate = YYFINAL;         //explicitly say we're done
      state_push(YYFINAL);       //and save it
      val_push(yyval);           //also save the semantic value of parsing
      if (yychar < 0)            //we want another character?
        {
        yychar = yylex();        //get next character
        if (yychar<0) yychar=0;  //clean, if necessary
        if (yydebug)
          yylexdebug(yystate,yychar);
        }
      if (yychar == 0)          //Good exit (if lex returns 0 ;-)
         break;                 //quit the loop--all DONE
      }//if yystate
    else                        //else not done yet
      {                         //get next state and push, for next yydefred[]
      yyn = yygindex[yym];      //find out where to go
      if ((yyn != 0) && (yyn += yystate) >= 0 &&
            yyn <= YYTABLESIZE && yycheck[yyn] == yystate)
        yystate = yytable[yyn]; //get new state
      else
        yystate = yydgoto[yym]; //else go to new defred
      if (yydebug) debug("after reduction, shifting from state "+state_peek(0)+" to state "+yystate+"");
      state_push(yystate);     //going again, so push state & val...
      val_push(yyval);         //for next action
      }
    }//main loop
  return 0;//yyaccept!!
}
//## end of method parse() ######################################



//## run() --- for Thread #######################################
/**
 * A default run method, used for operating this parser
 * object in the background.  It is intended for extending Thread
 * or implementing Runnable.  Turn off with -Jnorun .
 */
public void run()
{
  yyparse();
}
//## end of method run() ########################################



//## Constructors ###############################################
/**
 * Default constructor.  Turn off with -Jnoconstruct .

 */
public Parser()
{
  //nothing to do
}


/**
 * Create a parser, setting the debug to true or false.
 * @param debugMe true for debugging, false for no debug.
 */
public Parser(boolean debugMe)
{
  yydebug=debugMe;
}
//###############################################################



}
//################### END OF CLASS ##############################
