//### This file created by BYACC 1.8(/Java extension  1.15)
//### Java capabilities added 7 Jan 97, Bob Jamison
//### Updated : 27 Nov 97  -- Bob Jamison, Joe Nieten
//###           01 Jan 98  -- Bob Jamison -- fixed generic semantic constructor
//###           01 Jun 99  -- Bob Jamison -- added Runnable support
//###           06 Aug 00  -- Bob Jamison -- made state variables class-global
//###           03 Jan 01  -- Bob Jamison -- improved flags, tracing
//###           16 May 01  -- Bob Jamison -- added custom stack sizing
//###           04 Mar 02  -- Yuval Oren  -- improved java performance, added options
//###           14 Mar 02  -- Tomas Hurka -- -d support, static initializer workaround
//### Please send bug reports to tom@hukatronic.cz
//### static char yysccsid[] = "@(#)yaccpar	1.8 (Berkeley) 01/20/90";



package compilador;



//#line 2 "./src/compilador/gramatica.y"
import java.io.File;
//#line 19 "Parser.java"




public class Parser
{

boolean yydebug;        //do I want debug output?
int yynerrs;            //number of errors so far
int yyerrflag;          //was there an error?
int yychar;             //the current working character

//########## MESSAGES ##########
//###############################################################
// method: debug
//###############################################################
void debug(String msg)
{
  if (yydebug)
    System.out.println(msg);
}

//########## STATE STACK ##########
final static int YYSTACKSIZE = 500;  //maximum stack size
int statestk[] = new int[YYSTACKSIZE]; //state stack
int stateptr;
int stateptrmax;                     //highest index of stackptr
int statemax;                        //state when highest index reached
//###############################################################
// methods: state stack push,pop,drop,peek
//###############################################################
final void state_push(int state)
{
  try {
		stateptr++;
		statestk[stateptr]=state;
	 }
	 catch (ArrayIndexOutOfBoundsException e) {
     int oldsize = statestk.length;
     int newsize = oldsize * 2;
     int[] newstack = new int[newsize];
     System.arraycopy(statestk,0,newstack,0,oldsize);
     statestk = newstack;
     statestk[stateptr]=state;
  }
}
final int state_pop()
{
  return statestk[stateptr--];
}
final void state_drop(int cnt)
{
  stateptr -= cnt; 
}
final int state_peek(int relative)
{
  return statestk[stateptr-relative];
}
//###############################################################
// method: init_stacks : allocate and prepare stacks
//###############################################################
final boolean init_stacks()
{
  stateptr = -1;
  val_init();
  return true;
}
//###############################################################
// method: dump_stacks : show n levels of the stacks
//###############################################################
void dump_stacks(int count)
{
int i;
  System.out.println("=index==state====value=     s:"+stateptr+"  v:"+valptr);
  for (i=0;i<count;i++)
    System.out.println(" "+i+"    "+statestk[i]+"      "+valstk[i]);
  System.out.println("======================");
}


//########## SEMANTIC VALUES ##########
//public class ParserVal is defined in ParserVal.java


String   yytext;//user variable to return contextual strings
ParserVal yyval; //used to return semantic vals from action routines
ParserVal yylval;//the 'lval' (result) I got from yylex()
ParserVal valstk[];
int valptr;
//###############################################################
// methods: value stack push,pop,drop,peek.
//###############################################################
void val_init()
{
  valstk=new ParserVal[YYSTACKSIZE];
  yyval=new ParserVal();
  yylval=new ParserVal();
  valptr=-1;
}
void val_push(ParserVal val)
{
  if (valptr>=YYSTACKSIZE)
    return;
  valstk[++valptr]=val;
}
ParserVal val_pop()
{
  if (valptr<0)
    return new ParserVal();
  return valstk[valptr--];
}
void val_drop(int cnt)
{
int ptr;
  ptr=valptr-cnt;
  if (ptr<0)
    return;
  valptr = ptr;
}
ParserVal val_peek(int relative)
{
int ptr;
  ptr=valptr-relative;
  if (ptr<0)
    return new ParserVal();
  return valstk[ptr];
}
final ParserVal dup_yyval(ParserVal val)
{
  ParserVal dup = new ParserVal();
  dup.ival = val.ival;
  dup.dval = val.dval;
  dup.sval = val.sval;
  dup.obj = val.obj;
  return dup;
}
//#### end semantic value section ####
public final static short ID=257;
public final static short CTE=258;
public final static short CADENA=259;
public final static short IF=260;
public final static short ELSE=261;
public final static short ENDIF=262;
public final static short PRINT=263;
public final static short VOID=264;
public final static short RETURN=265;
public final static short COMP_MAYOR_IGUAL=266;
public final static short COMP_MENOR_IGUAL=267;
public final static short COMP_IGUAL=268;
public final static short COMP_DISTINTO=269;
public final static short CLASS=270;
public final static short WHILE=271;
public final static short DO=272;
public final static short INTERFACE=273;
public final static short IMPLEMENT=274;
public final static short INT=275;
public final static short ULONG=276;
public final static short FLOAT=277;
public final static short OPERADOR_MENOS=278;
public final static short YYERRCODE=256;
final static short yylhs[] = {                           -1,
    0,    0,    0,    0,    0,    1,    1,    2,    2,    4,
    4,    4,    4,    4,    4,   11,   11,   12,   12,   13,
   13,   13,   13,   13,   10,   10,    9,    9,    9,    9,
    9,    9,    9,    9,    9,    9,    9,   15,   19,   15,
   15,   15,   15,   15,   15,   15,   15,   15,    8,    8,
    8,    8,    8,    8,    8,    8,    8,   14,   14,   14,
   20,   14,   14,   14,   14,   14,   16,   16,   16,   16,
   18,   18,   18,   18,   18,   18,   18,   23,   23,   24,
   24,   21,   21,   21,   21,   22,   22,   22,   22,    7,
    7,    7,    7,    7,    6,    6,    6,    6,    6,    6,
   27,   27,    5,    5,    5,   25,   25,    3,    3,    3,
    3,   28,   28,   28,   31,   31,   31,   31,   31,   31,
   34,   34,   35,   37,   37,   37,   37,   30,   30,   30,
   30,   30,   30,   30,   30,   38,   38,   29,   36,   36,
   36,   36,   36,   36,   36,   36,   39,   39,   39,   39,
   39,   39,   39,   39,   39,   39,   39,   39,   42,   42,
   43,   43,   43,   41,   41,   41,   40,   33,   33,   32,
   32,   32,   32,   17,   17,   17,   44,   44,   44,   44,
   44,   44,   26,   26,   26,   45,   45,   45,   46,   46,
   46,   47,   47,
};
final static short yylen[] = {                            2,
    3,    2,    2,    2,    0,    1,    2,    1,    1,    1,
    1,    1,    1,    1,    1,    1,    2,    1,    1,    1,
    1,    1,    1,    1,    2,    1,    7,    6,    6,    6,
    6,    3,    4,    2,    5,    4,    3,    7,    0,   13,
    6,    6,    3,    4,    2,    5,    4,    3,    9,    7,
    8,    6,    8,    6,    8,    8,    6,    9,    7,    8,
    0,   15,    6,    8,    8,    6,    1,    3,    2,    1,
    1,    1,    1,    3,    4,    5,    2,    1,    2,    1,
    1,    1,    2,    1,    2,    1,    2,    1,    2,    3,
    2,    2,    3,    2,    5,    4,    7,    4,    3,    6,
    1,    3,    4,    3,    3,    1,    3,    1,    1,    1,
    1,    3,    2,    2,    5,    4,    3,    2,    4,    3,
    1,    2,    2,    3,    2,    1,    2,    5,    7,    4,
    3,    6,    5,    4,    6,    1,    2,    2,    5,    4,
    7,    6,    4,    3,    4,    3,    4,    3,    5,    4,
    3,    2,    3,    2,    4,    3,    2,    1,    1,    2,
    1,    1,    1,    1,    3,    2,    2,    1,    3,    1,
    1,    1,    1,    3,    2,    2,    1,    1,    1,    1,
    1,    1,    3,    3,    1,    3,    3,    1,    1,    2,
    1,    1,    2,
};
final static short yydefred[] = {                         0,
    0,    0,    0,    0,    0,    0,    0,    0,  170,  171,
  172,    0,    0,    0,    6,    8,    9,   10,   11,   12,
   13,   14,   15,    0,  108,  109,  110,  111,    0,    0,
    0,    0,    0,   92,    0,    0,   25,    0,    0,    0,
    0,    0,   34,    0,   70,   67,    0,    0,    0,  118,
    0,  121,    0,    4,    0,    2,    7,    0,    0,    0,
  168,  114,    0,    0,    0,    0,  158,   18,   20,   21,
   22,    0,    0,   16,   19,   23,   24,  138,    0,  192,
  177,  178,  179,  180,    0,    0,  181,  182,    0,    0,
    0,    0,  188,  191,   93,   90,  173,    0,  146,    0,
    0,  144,    0,    0,    0,    0,  126,    0,  136,    0,
  131,    0,    0,   32,    0,   69,   84,   82,    0,    0,
    0,    0,    0,    0,  120,    0,    0,  117,  122,  123,
    1,    0,    0,  105,    0,  107,  112,    0,    0,    0,
    0,   45,    0,   73,   72,   71,    0,  152,    0,    0,
  154,  161,  162,  163,    0,  159,  157,    0,   17,  190,
  193,    0,    0,    0,    0,    0,    0,    0,    0,  140,
    0,  167,  145,  143,  127,    0,    0,    0,    0,  134,
  137,    0,  130,    0,   68,   85,   83,   36,    0,   33,
    0,    0,    0,  119,  116,   96,    0,    0,  103,  169,
    0,    0,   43,   77,   88,   86,    0,    0,    0,    0,
    0,  148,    0,  151,    0,  156,  160,  153,    0,    0,
    0,    0,    0,    0,    0,    0,    0,  186,  187,    0,
  139,  164,    0,    0,    0,    0,  128,  124,  133,    0,
   35,    0,    0,    0,  115,    0,    0,   95,    0,    0,
   74,   89,    0,   87,   47,    0,   44,    0,    0,  150,
  147,    0,  155,    0,   54,    0,   57,    0,    0,    0,
    0,  142,  166,    0,  135,  132,   29,   30,    0,   31,
    0,    0,    0,    0,    0,    0,  106,   75,   80,   81,
    0,   78,   46,    0,    0,    0,  149,    0,    0,    0,
    0,   50,  141,  165,  129,   27,    0,   97,   63,    0,
   66,    0,    0,   76,   79,   41,    0,   42,   53,   55,
   56,    0,    0,    0,    0,   59,    0,   38,    0,   49,
   64,   65,    0,    0,    0,   58,    0,    0,    0,    0,
    0,    0,    0,    0,    0,   40,    0,   62,
};
final static short yydgoto[] = {                         13,
   14,   15,  152,   46,   69,   70,   71,   21,   22,   23,
   73,   74,  154,   76,   77,   47,   89,  147,  329,  327,
  119,  207,  291,  292,   24,   90,  247,   25,   26,   27,
   28,   29,   63,   51,   52,   30,  109,  110,   78,  232,
  233,  155,  156,   91,   92,   93,   94,
};
final static short yysindex[] = {                      1008,
    0,  -15,  -40,  -33,  -11, -112,  694,   73,    0,    0,
    0, 1075,    0, 1096,    0,    0,    0,    0,    0,    0,
    0,    0,    0,   -4,    0,    0,    0,    0,  -30,  885,
  141,   10,   17,    0,   22,   43,    0,  837, -107,  552,
  -23, 1117,    0,  534,    0,    0,  -35, -101, -212,    0,
 -116,    0,   39,    0, 1138,    0,    0,   32,   14, -171,
    0,    0,   -9,   65,  754, 1162,    0,    0,    0,    0,
    0, 1183, 1204,    0,    0,    0,    0,    0, -167,    0,
    0,    0,    0,    0, -139, 1029,    0,    0,   83,    8,
   47,   18,    0,    0,    0,    0,    0,   66,    0, -105,
   98,    0,  100,  121, -103,  552,    0,  -87,    0,  599,
    0,  552,  890,    0,  358,    0,    0,    0, 1229,  128,
  134,   68,  358, -212,    0, -115,  -95,    0,    0,    0,
    0,  133,  361,    0,  186,    0,    0,  -77,  798,  140,
 1446,    0,  960,    0,    0,    0,  -34,    0, 1250, 1271,
    0,    0,    0,    0, 1292,    0,    0, 1316,    0,    0,
    0, -133,  820,   47,   47,   47,   72,   47,   47,    0,
    5,    0,    0,    0,    0,  -83,  552,  926,   50,    0,
    0,  948,    0,  147,    0,    0,    0,    0,  153,    0,
  987,  159,  -93,    0,    0,    0,   47,  171,    0,    0,
 1050,  197,    0,    0,    0,    0, 1337,  206,  211,   70,
  358,    0, 1358,    0, 1383,    0,    0,    0, 1404, 1029,
  214, 1029,  221, -118,   18,   18,   72,    0,    0, -179,
    0,    0,   31,  552, 1000, 1067,    0,    0,    0,  223,
    0,  224,  237,  239,    0,  368,  252,    0,   -7,  845,
    0,    0,  974,    0,    0,  243,    0,  992,  260,    0,
    0, 1425,    0,   55,    0,   60,    0,  912,  268,   59,
 -179,    0,    0, 1221,    0,    0,    0,    0,  282,    0,
   47,  287,  289, 1050,  294,  -57,    0,    0,    0,    0,
  975,    0,    0,  295,  305,  303,    0,  307,  328,  331,
   87,    0,    0,    0,    0,    0,   72,    0,    0,  132,
    0,  934,  346,    0,    0,    0,  352,    0,    0,    0,
    0,  353,  357,  371,  154,    0,  161,    0,  150,    0,
    0,    0,  375,  385,  173,    0,  404,  407, 1050,  358,
  187,  408, 1050,  406,  189,    0,  409,    0,
};
final static short yyrindex[] = {                       454,
   45,    0,    0,    0,  220,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,  246,  270,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,  455,    0,    0,    0,    0,    0,
    0,    0,  292,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,   93,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,  116,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,  200,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,  327,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,  374,    0,    0,  400,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,  417,  432,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0, 1362,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,  446,    0,    0,
    0,    0,    0,    0,    0,    0,    0,  665,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,  166,  199,  100,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,  437,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,  488,    0,
    0,    0,    0,    0,    0,    0,    0,    0,  561,    0,
    0,  608,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,  438,    0,    0,    0,
    0,    0,  227,    0,    0,    0,  217,    0,    0,    0,
    0,  629,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,  722,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,
};
final static short yygindex[] = {                         0,
  482,    9,    1,   76,   27,  687,  688,    0,    0,  -28,
  434,  -70,  -18,    0,    0,  338,  -44,  697,    0,    0,
    0,    0,    0,  207,    0,   67,    0,    0,  894,    0,
    0,  742,  394,  -20,  -25,  718,  501,  464,    0,  -17,
  275,   99,   90,  422,   48,  160,    0,
};
final static int YYTABLESIZE=1723;
static short yytable[];
static { yytable();}
static void yytable(){
yytable = new short[]{                        121,
   16,   72,  159,   34,  123,  211,   36,   45,  128,  194,
   40,   75,   16,   62,   16,  112,  115,  101,  103,  177,
  114,  124,   57,  125,   31,  129,   18,  126,  127,  195,
   68,  245,   37,   18,  137,   58,  145,  149,   18,  234,
   18,   60,  117,  153,  158,  231,  146,   75,  230,  138,
  164,    4,  165,   95,   75,   16,   59,  134,   85,  168,
   96,   98,   99,   57,  169,  144,   68,   88,   18,   87,
  184,  272,  132,   68,  271,   17,   85,   97,  192,  159,
  171,   18,  130,  102,  106,  136,   45,   17,  173,   17,
  106,   85,  189,  238,  202,    9,   10,   11,  209,  303,
  129,  129,  271,  193,  139,  106,  170,  191,  138,  258,
  160,  190,   18,  257,  164,  185,  165,  118,  161,  186,
  153,  215,  206,  163,  133,  135,  153,  220,  221,  153,
   17,   75,  189,  189,  189,  189,  189,  189,  173,  189,
  174,  205,  268,  269,   38,   18,  243,    4,    4,  111,
   68,  172,  189,  176,  189,  185,  185,  167,  185,  185,
  185,   39,    4,   45,  175,  183,  259,  129,    4,   61,
    4,  188,  145,  104,  189,  185,  196,  185,  253,  200,
    4,   86,  146,  203,  153,   85,  153,  240,  254,   18,
  153,    9,   10,   11,  187,   49,  241,   50,  184,  244,
   88,  144,   87,  312,  313,  183,  183,  252,  183,  183,
  183,  225,  226,  295,  248,  273,   32,  189,   33,   26,
   45,  145,   45,   35,  289,  183,   61,  183,  164,  199,
  165,  146,  227,  153,  290,  122,  210,  250,  184,  184,
  185,  184,  184,  184,  217,   94,   18,  213,   18,  255,
  144,  256,  273,  304,  283,  145,  219,  265,  184,   26,
  184,   97,  289,  246,  267,  146,  277,  278,   45,   91,
   79,   80,  290,   81,   82,   83,   84,  279,   97,    9,
   10,   11,  280,  145,  144,   94,  293,   97,   79,   80,
  183,  113,  282,  146,   18,  342,    9,   10,   11,   97,
  296,  173,  217,   79,   80,    9,   10,   11,  217,   91,
  145,  302,  144,  262,  145,   97,  298,    9,   10,   11,
  146,  299,   97,  184,  146,  306,   37,  228,  229,   48,
  308,  113,  309,    9,   10,   11,    4,  311,  316,  144,
    9,   10,   11,  144,   26,  317,  318,  307,  322,  189,
  319,  217,  189,  189,  189,  189,  189,  189,  189,  189,
  189,  189,  189,  189,  189,  189,   37,  189,  189,  189,
   94,  320,  185,   99,  321,  185,  185,  185,  185,  185,
  185,  185,  185,  185,  185,  185,  185,  185,  185,  326,
  185,  185,  185,  323,   91,  328,  330,   79,   80,  104,
  331,  198,   85,  164,  197,  165,   81,   82,   83,   84,
  164,  281,  165,   99,  332,  333,  113,   88,  336,   87,
  334,  335,  183,  162,  337,  183,  183,  183,  183,  183,
  183,  183,  183,  183,  183,  183,  183,  183,  183,  104,
  183,  183,  183,  338,  339,   98,  340,  343,  344,  346,
  347,   37,  348,    5,    3,  184,  173,  175,  184,  184,
  184,  184,  184,  184,  184,  184,  184,  184,  184,  184,
  184,  184,  176,  184,  184,  184,   26,  101,  102,   26,
   26,   26,   26,   26,   26,   98,   61,   52,   39,   26,
   26,   26,   26,   55,   26,   26,   26,  315,   99,  150,
  224,  179,   94,  113,  270,   94,   94,   94,   94,   94,
   94,  166,    0,    0,    0,   94,   94,   94,   94,    0,
   94,   94,   94,    0,  104,    0,   91,   52,    0,   91,
   91,   91,   91,   91,   91,    0,    0,    0,    0,   91,
   91,   91,   91,    0,   91,   91,   91,    0,  113,    0,
    0,  113,  113,  113,  113,  113,  113,  264,    0,  266,
   28,  113,  113,  113,  113,    0,  113,  113,  113,  178,
   98,    0,    0,    0,  120,  182,    0,    0,   85,    0,
    0,    0,    0,   37,    0,    0,   37,   37,   37,   37,
   37,   37,    0,   88,    0,   87,   37,   37,   37,   37,
   28,   37,   37,   37,    0,  301,    0,  100,    0,    0,
  181,    0,   52,  181,   79,   80,    0,    0,    0,    0,
    0,    0,    0,   81,   82,   83,   84,    0,   51,    0,
   99,    0,    0,   99,   99,   99,   99,   99,   99,  235,
  236,    0,    0,   99,   99,   99,   99,  100,   99,   99,
   99,    0,    0,    0,    0,    0,  104,    0,    0,  104,
  104,  104,  104,  104,  104,    0,    0,    0,   51,  104,
  104,  104,  104,    0,  104,  104,  104,    0,  181,    0,
    0,    0,  181,    0,    0,   28,   19,   20,    0,    0,
    0,    0,    0,   19,   20,    0,    0,  274,   19,   20,
   19,   20,   98,    0,   48,   98,   98,   98,   98,   98,
   98,    0,    0,    0,    0,   98,   98,   98,   98,    0,
   98,   98,   98,  180,    0,   53,    0,    0,   19,   20,
    0,    0,  100,   44,    0,  181,  181,   43,    0,    0,
    0,   19,   20,    0,   52,    0,    0,   52,   52,   52,
   52,   52,   52,   51,    0,    0,    0,   52,   52,   52,
   52,   60,   52,   52,   52,   53,   53,    0,   53,    0,
    0,    0,   19,   20,  181,    0,  100,  100,    0,  108,
    0,  108,    0,    0,    0,    0,    0,    0,    0,   48,
   79,   80,    0,  143,    0,    0,    0,  142,    0,   81,
   82,   83,   84,    0,    0,   19,   20,    0,  104,    0,
    0,    0,    0,    0,    0,    4,   42,   28,    0,    0,
   28,   28,   28,   28,   28,   28,    9,   10,   11,    0,
   28,   28,   28,   28,    0,   28,   28,   28,  201,  100,
    0,   53,   85,   53,   53,    0,   60,  108,    0,   19,
   20,  108,    0,  108,  108,  104,    0,   88,    0,   87,
    0,    0,    4,    0,  100,    0,    0,  100,  100,  100,
  100,  100,  100,    9,   10,   11,  141,  100,  100,  100,
  100,    0,  100,  100,  100,   51,    0,    0,   51,   51,
   51,   51,   51,   51,    0,    0,    0,  249,   51,   51,
   51,   51,    0,   51,   51,   51,   19,   20,   19,   20,
   53,    0,  100,    0,    0,    0,    0,  108,  108,  108,
    0,   48,    0,  108,   48,   48,   48,   48,   48,   48,
    0,  107,    0,  107,   48,   48,   48,   48,    0,   48,
   48,   48,   42,    0,    0,    0,  286,    0,    0,    0,
    1,    0,    0,    2,   19,   20,    3,    4,    5,  106,
    0,    0,    0,    6,   41,    7,    8,  141,    9,   10,
   11,  100,    0,    0,  100,  108,  108,  108,   60,    0,
  310,   60,   60,   60,   60,   60,   60,    0,    0,    0,
    0,   60,   60,   60,   60,    0,   60,   60,   60,  107,
  208,    0,    0,  107,   85,  107,  107,   66,  325,   67,
    1,  100,  100,   64,  183,  108,    3,    4,    5,   88,
    0,   87,    0,    6,  140,   65,    8,  242,    9,   10,
   11,   85,  294,    0,   42,  341,   85,    0,    0,  345,
    0,    0,    0,    0,    0,    0,   88,    0,   87,    0,
  237,   88,    0,   87,   79,   80,  141,    0,    0,    0,
    0,    0,    0,   81,   82,   83,   84,    0,    0,  107,
  107,  107,  239,    0,    0,  107,    1,    0,    0,    2,
  222,  223,    3,    4,    5,    0,    0,    0,    0,    6,
    0,    7,    8,  104,    9,   10,   11,    0,  288,  314,
    4,    1,    0,    0,   64,  284,  285,    3,    4,    5,
  105,    9,   10,   11,    6,    0,   65,    8,    0,    9,
   10,   11,    0,    0,  275,    0,    0,  107,  107,  107,
   12,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    1,    0,    0,   64,    0,  104,    3,    4,    5,
    0,   42,    0,    4,    6,    0,   65,    8,    0,    9,
   10,   11,    0,    0,    9,   10,   11,  107,    1,    0,
    0,    2,  141,  300,    3,    4,    5,    0,    0,    0,
    0,    6,  104,    7,    8,    0,    9,   10,   11,    4,
    1,  276,    0,   64,    0,  324,    3,    4,    5,   54,
    9,   10,   11,    6,  104,   65,    8,    0,    9,   10,
   11,    4,    0,    0,    0,    0,   79,   80,    0,    0,
   56,    0,    9,   10,   11,   81,   82,   83,   84,    0,
  287,  287,    0,   64,   64,    0,    3,    3,    5,    5,
    0,  116,    0,   79,   80,   65,   65,    0,   79,   80,
    0,    0,   81,   82,   83,   84,  104,   81,   82,   83,
   84,    0,  131,    4,    1,    0,    0,    2,    0,    0,
    3,    4,    5,    0,    9,   10,   11,    6,    0,    7,
    8,    0,    9,   10,   11,    1,  148,    0,    2,    0,
    0,    3,    4,    5,    0,    0,    0,    0,    6,    0,
    7,    8,    0,    9,   10,   11,    1,  151,    0,   64,
    0,    0,    3,    4,    5,    0,    0,    0,    0,    6,
    0,   65,    8,  104,    9,   10,   11,    0,  157,    0,
    4,    1,    0,    0,    2,    0,    0,    3,    4,    5,
    0,    9,   10,   11,    6,  305,    7,    8,    0,    9,
   10,   11,    1,  185,    0,    2,    0,    0,    3,    4,
    5,    0,    0,    0,    0,    6,    0,    7,    8,    0,
    9,   10,   11,    1,  212,    0,    2,    0,    0,    3,
    4,    5,    0,    0,    0,    0,    6,    0,    7,    8,
    0,    9,   10,   11,    1,  214,    0,    2,    0,    0,
    3,    4,    5,    0,    0,    0,    0,    6,    0,    7,
    8,    0,    9,   10,   11,    0,  216,    0,    1,    0,
    0,   64,    0,    0,    3,    4,    5,    0,    0,    0,
    0,    6,    0,   65,    8,    0,    9,   10,   11,    1,
  218,    0,   64,    0,    0,    3,    4,    5,    0,    0,
    0,    0,    6,    0,   65,    8,    0,    9,   10,   11,
    1,  251,    0,   64,    0,    0,    3,    4,    5,    0,
    0,    0,    0,    6,    0,   65,    8,  104,    9,   10,
   11,    0,  260,    0,    4,    1,  125,    0,    2,    0,
    0,    3,    4,    5,    0,    9,   10,   11,    6,    0,
    7,    8,    0,    9,   10,   11,    1,  261,    0,   64,
    0,    0,    3,    4,    5,    0,    0,    0,    0,    6,
    0,   65,    8,    0,    9,   10,   11,    1,  263,    0,
   64,    0,    0,    3,    4,    5,    0,    0,    0,    0,
    6,    0,   65,    8,    0,    9,   10,   11,    1,  297,
    0,   64,    0,    0,    3,    4,    5,    0,    0,    0,
    0,    6,    0,   65,    8,    0,    9,   10,   11,    0,
  204,    0,    1,    0,    0,   64,    0,    0,    3,    4,
    5,    0,    0,    0,    0,    6,    0,   65,    8,    0,
    9,   10,   11,    1,    0,    0,   64,    0,    0,    3,
    4,    5,    0,    0,    0,    0,    6,    0,   65,    8,
    0,    9,   10,   11,    1,    0,    0,   64,  125,    0,
    3,    4,    5,    0,    0,  125,    0,    6,    0,   65,
    8,    0,    9,   10,   11,    0,  125,  125,  125,    1,
    0,    0,   64,    0,    0,    3,    4,    5,    0,    0,
    0,    0,    6,    0,   65,    8,    0,    9,   10,   11,
    1,    0,    0,   64,    0,    0,    3,    4,    5,    0,
    0,    0,    0,    6,    0,   65,    8,    0,    9,   10,
   11,    1,    0,    0,   64,    0,    0,    3,    4,    5,
    0,    0,    0,    0,    6,    0,   65,    8,    0,    9,
   10,   11,    1,    0,    0,   64,    0,    0,    3,    4,
    0,    0,    0,    0,    0,    6,    0,   65,    8,    0,
    9,   10,   11,
};
}
static short yycheck[];
static { yycheck(); }
static void yycheck() {
yycheck = new short[] {                         44,
    0,   30,   73,   44,   40,   40,   40,    7,  125,  125,
  123,   30,   12,   44,   14,  123,   40,   35,   36,  123,
   44,  123,   14,  125,   40,   51,    0,   48,   49,  125,
   30,  125,   44,    7,   44,   40,   65,   66,   12,  123,
   14,   46,   42,   72,   73,   41,   65,   66,   44,   59,
   43,  264,   45,   44,   73,   55,   61,   44,   45,   42,
   44,   40,   41,   55,   47,   65,   66,   60,   42,   62,
  115,   41,   41,   73,   44,    0,   45,  257,  123,  150,
   98,   55,   44,   41,   40,  257,   86,   12,   44,   14,
   46,   45,    0,   44,  139,  275,  276,  277,  143,   41,
  126,  127,   44,  124,   40,   61,   41,   40,   59,   40,
  278,   44,   86,   44,   43,    0,   45,   42,  258,  119,
  149,  150,  141,   41,   58,   59,  155,  261,  262,  158,
   55,  150,   40,   41,   42,   43,   44,   45,   41,   47,
   41,  141,  261,  262,  257,  119,  191,  264,  264,  257,
  150,  257,   60,  257,   62,   40,   41,   91,   43,   44,
   45,  274,  264,  163,   44,    0,  211,  193,  264,  257,
  264,   44,  201,  257,   41,   60,   44,   62,  207,  257,
  264,   41,  201,   44,  213,   45,  215,   41,  207,  163,
  219,  275,  276,  277,  119,  123,   44,  125,    0,   41,
   60,  201,   62,  261,  262,   40,   41,  207,   43,   44,
   45,  164,  165,  258,   44,  233,  257,  125,  259,    0,
  220,  250,  222,  257,  253,   60,  257,   62,   43,   44,
   45,  250,  166,  262,  253,  271,  271,   41,   40,   41,
  125,   43,   44,   45,  155,    0,  220,  149,  222,   44,
  250,   41,  270,  271,  262,  284,  158,   44,   60,   40,
   62,  257,  291,  197,   44,  284,   44,   44,  268,    0,
  257,  258,  291,  266,  267,  268,  269,   41,  257,  275,
  276,  277,   44,  312,  284,   40,   44,  257,  257,  258,
  125,    0,   41,  312,  268,  340,  275,  276,  277,  257,
   41,  257,  213,  257,  258,  275,  276,  277,  219,   40,
  339,   44,  312,  215,  343,  257,  262,  275,  276,  277,
  339,  262,  257,  125,  343,   44,    0,  168,  169,  257,
   44,   40,   44,  275,  276,  277,  264,   44,   44,  339,
  275,  276,  277,  343,  125,   41,   44,  281,  262,  257,
   44,  262,  260,  261,  262,  263,  264,  265,  266,  267,
  268,  269,  270,  271,  272,  273,   40,  275,  276,  277,
  125,   44,  257,    0,   44,  260,  261,  262,  263,  264,
  265,  266,  267,  268,  269,  270,  271,  272,  273,   44,
  275,  276,  277,  262,  125,   44,   44,  257,  258,    0,
   44,   41,   45,   43,   44,   45,  266,  267,  268,  269,
   43,   44,   45,   40,   44,  262,  125,   60,   44,   62,
  260,  272,  257,   86,   40,  260,  261,  262,  263,  264,
  265,  266,  267,  268,  269,  270,  271,  272,  273,   40,
  275,  276,  277,  271,   41,    0,   40,  261,   41,   44,
  262,  125,   44,    0,    0,  257,  257,   41,  260,  261,
  262,  263,  264,  265,  266,  267,  268,  269,  270,  271,
  272,  273,   41,  275,  276,  277,  257,   41,   41,  260,
  261,  262,  263,  264,  265,   40,  260,    0,  272,  270,
  271,  272,  273,   12,  275,  276,  277,  291,  125,   66,
  163,  108,  257,   40,  230,  260,  261,  262,  263,  264,
  265,   90,   -1,   -1,   -1,  270,  271,  272,  273,   -1,
  275,  276,  277,   -1,  125,   -1,  257,   40,   -1,  260,
  261,  262,  263,  264,  265,   -1,   -1,   -1,   -1,  270,
  271,  272,  273,   -1,  275,  276,  277,   -1,  257,   -1,
   -1,  260,  261,  262,  263,  264,  265,  220,   -1,  222,
    0,  270,  271,  272,  273,   -1,  275,  276,  277,  106,
  125,   -1,   -1,   -1,   41,  112,   -1,   -1,   45,   -1,
   -1,   -1,   -1,  257,   -1,   -1,  260,  261,  262,  263,
  264,  265,   -1,   60,   -1,   62,  270,  271,  272,  273,
   40,  275,  276,  277,   -1,  268,   -1,    0,   -1,   -1,
  110,   -1,  125,  113,  257,  258,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,  266,  267,  268,  269,   -1,    0,   -1,
  257,   -1,   -1,  260,  261,  262,  263,  264,  265,  176,
  177,   -1,   -1,  270,  271,  272,  273,   40,  275,  276,
  277,   -1,   -1,   -1,   -1,   -1,  257,   -1,   -1,  260,
  261,  262,  263,  264,  265,   -1,   -1,   -1,   40,  270,
  271,  272,  273,   -1,  275,  276,  277,   -1,  178,   -1,
   -1,   -1,  182,   -1,   -1,  125,    0,    0,   -1,   -1,
   -1,   -1,   -1,    7,    7,   -1,   -1,  234,   12,   12,
   14,   14,  257,   -1,   40,  260,  261,  262,  263,  264,
  265,   -1,   -1,   -1,   -1,  270,  271,  272,  273,   -1,
  275,  276,  277,  125,   -1,    8,   -1,   -1,   42,   42,
   -1,   -1,  125,   40,   -1,  235,  236,   44,   -1,   -1,
   -1,   55,   55,   -1,  257,   -1,   -1,  260,  261,  262,
  263,  264,  265,  125,   -1,   -1,   -1,  270,  271,  272,
  273,   40,  275,  276,  277,   48,   49,   -1,   51,   -1,
   -1,   -1,   86,   86,  274,   -1,   35,   36,   -1,   38,
   -1,   40,   -1,   -1,   -1,   -1,   -1,   -1,   -1,  125,
  257,  258,   -1,   40,   -1,   -1,   -1,   44,   -1,  266,
  267,  268,  269,   -1,   -1,  119,  119,   -1,  257,   -1,
   -1,   -1,   -1,   -1,   -1,  264,  123,  257,   -1,   -1,
  260,  261,  262,  263,  264,  265,  275,  276,  277,   -1,
  270,  271,  272,  273,   -1,  275,  276,  277,   41,   98,
   -1,  124,   45,  126,  127,   -1,  125,  106,   -1,  163,
  163,  110,   -1,  112,  113,  257,   -1,   60,   -1,   62,
   -1,   -1,  264,   -1,  257,   -1,   -1,  260,  261,  262,
  263,  264,  265,  275,  276,  277,  123,  270,  271,  272,
  273,   -1,  275,  276,  277,  257,   -1,   -1,  260,  261,
  262,  263,  264,  265,   -1,   -1,   -1,  201,  270,  271,
  272,  273,   -1,  275,  276,  277,  220,  220,  222,  222,
  193,   -1,  171,   -1,   -1,   -1,   -1,  176,  177,  178,
   -1,  257,   -1,  182,  260,  261,  262,  263,  264,  265,
   -1,   38,   -1,   40,  270,  271,  272,  273,   -1,  275,
  276,  277,  123,   -1,   -1,   -1,  250,   -1,   -1,   -1,
  257,   -1,   -1,  260,  268,  268,  263,  264,  265,  123,
   -1,   -1,   -1,  270,  271,  272,  273,  123,  275,  276,
  277,  230,   -1,   -1,  233,  234,  235,  236,  257,   -1,
  284,  260,  261,  262,  263,  264,  265,   -1,   -1,   -1,
   -1,  270,  271,  272,  273,   -1,  275,  276,  277,  106,
   41,   -1,   -1,  110,   45,  112,  113,  123,  312,  125,
  257,  270,  271,  260,  125,  274,  263,  264,  265,   60,
   -1,   62,   -1,  270,  271,  272,  273,   41,  275,  276,
  277,   45,   41,   -1,  123,  339,   45,   -1,   -1,  343,
   -1,   -1,   -1,   -1,   -1,   -1,   60,   -1,   62,   -1,
  125,   60,   -1,   62,  257,  258,  123,   -1,   -1,   -1,
   -1,   -1,   -1,  266,  267,  268,  269,   -1,   -1,  176,
  177,  178,  125,   -1,   -1,  182,  257,   -1,   -1,  260,
  261,  262,  263,  264,  265,   -1,   -1,   -1,   -1,  270,
   -1,  272,  273,  257,  275,  276,  277,   -1,  125,  125,
  264,  257,   -1,   -1,  260,  261,  262,  263,  264,  265,
  274,  275,  276,  277,  270,   -1,  272,  273,   -1,  275,
  276,  277,   -1,   -1,  125,   -1,   -1,  234,  235,  236,
  123,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,  257,   -1,   -1,  260,   -1,  257,  263,  264,  265,
   -1,  123,   -1,  264,  270,   -1,  272,  273,   -1,  275,
  276,  277,   -1,   -1,  275,  276,  277,  274,  257,   -1,
   -1,  260,  123,  262,  263,  264,  265,   -1,   -1,   -1,
   -1,  270,  257,  272,  273,   -1,  275,  276,  277,  264,
  257,  125,   -1,  260,   -1,  262,  263,  264,  265,  125,
  275,  276,  277,  270,  257,  272,  273,   -1,  275,  276,
  277,  264,   -1,   -1,   -1,   -1,  257,  258,   -1,   -1,
  125,   -1,  275,  276,  277,  266,  267,  268,  269,   -1,
  257,  257,   -1,  260,  260,   -1,  263,  263,  265,  265,
   -1,  125,   -1,  257,  258,  272,  272,   -1,  257,  258,
   -1,   -1,  266,  267,  268,  269,  257,  266,  267,  268,
  269,   -1,  125,  264,  257,   -1,   -1,  260,   -1,   -1,
  263,  264,  265,   -1,  275,  276,  277,  270,   -1,  272,
  273,   -1,  275,  276,  277,  257,  125,   -1,  260,   -1,
   -1,  263,  264,  265,   -1,   -1,   -1,   -1,  270,   -1,
  272,  273,   -1,  275,  276,  277,  257,  125,   -1,  260,
   -1,   -1,  263,  264,  265,   -1,   -1,   -1,   -1,  270,
   -1,  272,  273,  257,  275,  276,  277,   -1,  125,   -1,
  264,  257,   -1,   -1,  260,   -1,   -1,  263,  264,  265,
   -1,  275,  276,  277,  270,  125,  272,  273,   -1,  275,
  276,  277,  257,  125,   -1,  260,   -1,   -1,  263,  264,
  265,   -1,   -1,   -1,   -1,  270,   -1,  272,  273,   -1,
  275,  276,  277,  257,  125,   -1,  260,   -1,   -1,  263,
  264,  265,   -1,   -1,   -1,   -1,  270,   -1,  272,  273,
   -1,  275,  276,  277,  257,  125,   -1,  260,   -1,   -1,
  263,  264,  265,   -1,   -1,   -1,   -1,  270,   -1,  272,
  273,   -1,  275,  276,  277,   -1,  125,   -1,  257,   -1,
   -1,  260,   -1,   -1,  263,  264,  265,   -1,   -1,   -1,
   -1,  270,   -1,  272,  273,   -1,  275,  276,  277,  257,
  125,   -1,  260,   -1,   -1,  263,  264,  265,   -1,   -1,
   -1,   -1,  270,   -1,  272,  273,   -1,  275,  276,  277,
  257,  125,   -1,  260,   -1,   -1,  263,  264,  265,   -1,
   -1,   -1,   -1,  270,   -1,  272,  273,  257,  275,  276,
  277,   -1,  125,   -1,  264,  257,  125,   -1,  260,   -1,
   -1,  263,  264,  265,   -1,  275,  276,  277,  270,   -1,
  272,  273,   -1,  275,  276,  277,  257,  125,   -1,  260,
   -1,   -1,  263,  264,  265,   -1,   -1,   -1,   -1,  270,
   -1,  272,  273,   -1,  275,  276,  277,  257,  125,   -1,
  260,   -1,   -1,  263,  264,  265,   -1,   -1,   -1,   -1,
  270,   -1,  272,  273,   -1,  275,  276,  277,  257,  125,
   -1,  260,   -1,   -1,  263,  264,  265,   -1,   -1,   -1,
   -1,  270,   -1,  272,  273,   -1,  275,  276,  277,   -1,
  125,   -1,  257,   -1,   -1,  260,   -1,   -1,  263,  264,
  265,   -1,   -1,   -1,   -1,  270,   -1,  272,  273,   -1,
  275,  276,  277,  257,   -1,   -1,  260,   -1,   -1,  263,
  264,  265,   -1,   -1,   -1,   -1,  270,   -1,  272,  273,
   -1,  275,  276,  277,  257,   -1,   -1,  260,  257,   -1,
  263,  264,  265,   -1,   -1,  264,   -1,  270,   -1,  272,
  273,   -1,  275,  276,  277,   -1,  275,  276,  277,  257,
   -1,   -1,  260,   -1,   -1,  263,  264,  265,   -1,   -1,
   -1,   -1,  270,   -1,  272,  273,   -1,  275,  276,  277,
  257,   -1,   -1,  260,   -1,   -1,  263,  264,  265,   -1,
   -1,   -1,   -1,  270,   -1,  272,  273,   -1,  275,  276,
  277,  257,   -1,   -1,  260,   -1,   -1,  263,  264,  265,
   -1,   -1,   -1,   -1,  270,   -1,  272,  273,   -1,  275,
  276,  277,  257,   -1,   -1,  260,   -1,   -1,  263,  264,
   -1,   -1,   -1,   -1,   -1,  270,   -1,  272,  273,   -1,
  275,  276,  277,
};
}
final static short YYFINAL=13;
final static short YYMAXTOKEN=278;
final static String yyname[] = {
"end-of-file",null,null,null,null,null,null,null,null,null,null,null,null,null,
null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,
null,null,null,null,null,null,null,null,null,null,"'('","')'","'*'","'+'","','",
"'-'","'.'","'/'",null,null,null,null,null,null,null,null,null,null,null,"';'",
"'<'","'='","'>'",null,null,null,null,null,null,null,null,null,null,null,null,
null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,
null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,
null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,
"'{'",null,"'}'",null,null,null,null,null,null,null,null,null,null,null,null,
null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,
null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,
null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,
null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,
null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,
null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,
null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,
null,null,null,null,null,null,null,"ID","CTE","CADENA","IF","ELSE","ENDIF",
"PRINT","VOID","RETURN","COMP_MAYOR_IGUAL","COMP_MENOR_IGUAL","COMP_IGUAL",
"COMP_DISTINTO","CLASS","WHILE","DO","INTERFACE","IMPLEMENT","INT","ULONG",
"FLOAT","OPERADOR_MENOS",
};
final static String yyrule[] = {
"$accept : programa",
"programa : '{' sentencias '}'",
"programa : sentencias '}'",
"programa : '{' sentencias",
"programa : '{' '}'",
"programa :",
"sentencias : sentencia",
"sentencias : sentencias sentencia",
"sentencia : sentencia_declarativa",
"sentencia : sentencia_ejecutable",
"sentencia_ejecutable : sentencia_asignacion",
"sentencia_ejecutable : sentencia_invocacion_funcion",
"sentencia_ejecutable : sentencia_imprimir",
"sentencia_ejecutable : sentencia_seleccion",
"sentencia_ejecutable : sentencia_iterativa_do_while",
"sentencia_ejecutable : sentencia_return",
"sentencias_funcion : sentencia_funcion",
"sentencias_funcion : sentencias_funcion sentencia_funcion",
"sentencia_funcion : sentencia_declarativa",
"sentencia_funcion : sentencia_ejecutable_funcion",
"sentencia_ejecutable_funcion : sentencia_asignacion",
"sentencia_ejecutable_funcion : sentencia_invocacion_funcion",
"sentencia_ejecutable_funcion : sentencia_imprimir",
"sentencia_ejecutable_funcion : sentencia_seleccion_funcion",
"sentencia_ejecutable_funcion : sentencia_iterativa_do_while_funcion",
"sentencia_return : RETURN ','",
"sentencia_return : RETURN",
"sentencia_iterativa_do_while : DO bloque_sentencias_ejecutables WHILE '(' condicion ')' ','",
"sentencia_iterativa_do_while : DO bloque_sentencias_ejecutables WHILE '(' condicion ')'",
"sentencia_iterativa_do_while : DO WHILE '(' condicion ')' ','",
"sentencia_iterativa_do_while : DO bloque_sentencias_ejecutables WHILE '(' ')' ','",
"sentencia_iterativa_do_while : DO bloque_sentencias_ejecutables '(' condicion ')' ','",
"sentencia_iterativa_do_while : DO WHILE ','",
"sentencia_iterativa_do_while : DO bloque_sentencias_ejecutables WHILE ','",
"sentencia_iterativa_do_while : DO ','",
"sentencia_iterativa_do_while : DO '(' condicion ')' ','",
"sentencia_iterativa_do_while : DO '(' ')' ','",
"sentencia_iterativa_do_while : DO '(' ')'",
"sentencia_iterativa_do_while_funcion : DO bloque_sentencias_ejecutables_funcion WHILE '(' condicion ')' ','",
"$$1 :",
"sentencia_iterativa_do_while_funcion : DO bloque_sentencias_ejecutables_funcion WHILE '(' condicion ')' $$1 DO WHILE '(' condicion ')' ','",
"sentencia_iterativa_do_while_funcion : DO bloque_sentencias_ejecutables_funcion WHILE '(' ')' ','",
"sentencia_iterativa_do_while_funcion : DO bloque_sentencias_ejecutables_funcion '(' condicion ')' ','",
"sentencia_iterativa_do_while_funcion : DO WHILE ','",
"sentencia_iterativa_do_while_funcion : DO bloque_sentencias_ejecutables_funcion WHILE ','",
"sentencia_iterativa_do_while_funcion : DO ','",
"sentencia_iterativa_do_while_funcion : DO '(' condicion ')' ','",
"sentencia_iterativa_do_while_funcion : DO '(' ')' ','",
"sentencia_iterativa_do_while_funcion : DO '(' ')'",
"sentencia_seleccion : IF '(' condicion ')' bloque_sentencias_ejecutables ELSE bloque_sentencias_ejecutables ENDIF ','",
"sentencia_seleccion : IF '(' condicion ')' bloque_sentencias_ejecutables ENDIF ','",
"sentencia_seleccion : IF '(' condicion ')' bloque_sentencias_ejecutables ELSE bloque_sentencias_ejecutables ENDIF",
"sentencia_seleccion : IF '(' condicion ')' bloque_sentencias_ejecutables ENDIF",
"sentencia_seleccion : IF '(' ')' bloque_sentencias_ejecutables ELSE bloque_sentencias_ejecutables ENDIF ','",
"sentencia_seleccion : IF '(' ')' bloque_sentencias_ejecutables ENDIF ','",
"sentencia_seleccion : IF '(' condicion ')' ELSE bloque_sentencias_ejecutables ENDIF ','",
"sentencia_seleccion : IF '(' condicion ')' bloque_sentencias_ejecutables ELSE ENDIF ','",
"sentencia_seleccion : IF '(' condicion ')' ENDIF ','",
"sentencia_seleccion_funcion : IF '(' condicion ')' bloque_sentencias_ejecutables_funcion ELSE bloque_sentencias_ejecutables_funcion ENDIF ','",
"sentencia_seleccion_funcion : IF '(' condicion ')' bloque_sentencias_ejecutables_funcion ENDIF ','",
"sentencia_seleccion_funcion : IF '(' condicion ')' bloque_sentencias_ejecutables_funcion ELSE bloque_sentencias_ejecutables_funcion ENDIF",
"$$2 :",
"sentencia_seleccion_funcion : IF '(' condicion ')' bloque_sentencias_ejecutables_funcion ENDIF $$2 IF '(' ')' bloque_sentencias_ejecutables_funcion ELSE bloque_sentencias_ejecutables_funcion ENDIF ','",
"sentencia_seleccion_funcion : IF '(' ')' bloque_sentencias_ejecutables_funcion ENDIF ','",
"sentencia_seleccion_funcion : IF '(' condicion ')' ELSE bloque_sentencias_ejecutables_funcion ENDIF ','",
"sentencia_seleccion_funcion : IF '(' condicion ')' bloque_sentencias_ejecutables_funcion ELSE ENDIF ','",
"sentencia_seleccion_funcion : IF '(' condicion ')' ENDIF ','",
"bloque_sentencias_ejecutables : sentencia_ejecutable",
"bloque_sentencias_ejecutables : '{' sentencias_ejecutables '}'",
"bloque_sentencias_ejecutables : '{' '}'",
"bloque_sentencias_ejecutables : sentencia_declarativa",
"bloque_sentencias_ejecutables_funcion : sentencia_ejecutable_funcion",
"bloque_sentencias_ejecutables_funcion : sentencia_return",
"bloque_sentencias_ejecutables_funcion : sentencia_declarativa",
"bloque_sentencias_ejecutables_funcion : '{' sentencias_ejecutables_funcion '}'",
"bloque_sentencias_ejecutables_funcion : '{' sentencias_ejecutables_funcion sentencia_return '}'",
"bloque_sentencias_ejecutables_funcion : '{' sentencias_ejecutables_funcion sentencia_return sentencias_ejecutables_funcion_inalcanzable '}'",
"bloque_sentencias_ejecutables_funcion : '{' '}'",
"sentencias_ejecutables_funcion_inalcanzable : sentencia_ejecutable_funcion_inalcanzable",
"sentencias_ejecutables_funcion_inalcanzable : sentencias_ejecutables_funcion_inalcanzable sentencia_ejecutable_funcion_inalcanzable",
"sentencia_ejecutable_funcion_inalcanzable : sentencia_return",
"sentencia_ejecutable_funcion_inalcanzable : sentencia_ejecutable_funcion",
"sentencias_ejecutables : sentencia_ejecutable",
"sentencias_ejecutables : sentencias_ejecutables sentencia_ejecutable",
"sentencias_ejecutables : sentencia_declarativa",
"sentencias_ejecutables : sentencias_ejecutables sentencia_declarativa",
"sentencias_ejecutables_funcion : sentencia_ejecutable_funcion",
"sentencias_ejecutables_funcion : sentencias_ejecutables_funcion sentencia_ejecutable_funcion",
"sentencias_ejecutables_funcion : sentencia_declarativa",
"sentencias_ejecutables_funcion : sentencias_ejecutables_funcion sentencia_declarativa",
"sentencia_imprimir : PRINT CADENA ','",
"sentencia_imprimir : PRINT CADENA",
"sentencia_imprimir : PRINT ','",
"sentencia_imprimir : PRINT ID ','",
"sentencia_imprimir : PRINT ID",
"sentencia_invocacion_funcion : sentencia_objeto_identificador '(' expresion ')' ','",
"sentencia_invocacion_funcion : sentencia_objeto_identificador '(' ')' ','",
"sentencia_invocacion_funcion : sentencia_objeto_identificador '(' expresion ',' lista_expresiones_invocacion_funcion_exceso ')' ','",
"sentencia_invocacion_funcion : sentencia_objeto_identificador '(' expresion ')'",
"sentencia_invocacion_funcion : sentencia_objeto_identificador '(' ')'",
"sentencia_invocacion_funcion : sentencia_objeto_identificador '(' expresion ',' lista_expresiones_invocacion_funcion_exceso ')'",
"lista_expresiones_invocacion_funcion_exceso : expresion",
"lista_expresiones_invocacion_funcion_exceso : expresion ',' expresion",
"sentencia_asignacion : sentencia_objeto_identificador '=' expresion ','",
"sentencia_asignacion : sentencia_objeto_identificador '=' expresion",
"sentencia_asignacion : sentencia_objeto_identificador '=' ','",
"sentencia_objeto_identificador : ID",
"sentencia_objeto_identificador : sentencia_objeto_identificador '.' ID",
"sentencia_declarativa : declaracion_variable",
"sentencia_declarativa : declaracion_funcion",
"sentencia_declarativa : declaracion_clase",
"sentencia_declarativa : declaracion_interfaz",
"declaracion_variable : tipo lista_de_variables ','",
"declaracion_variable : tipo lista_de_variables",
"declaracion_variable : tipo ','",
"declaracion_interfaz : INTERFACE ID '{' bloque_encabezado_funcion_declaracion_interfaz '}'",
"declaracion_interfaz : INTERFACE '{' bloque_encabezado_funcion_declaracion_interfaz '}'",
"declaracion_interfaz : INTERFACE bloque_encabezado_funcion_declaracion_interfaz '}'",
"declaracion_interfaz : INTERFACE '}'",
"declaracion_interfaz : INTERFACE ID bloque_encabezado_funcion_declaracion_interfaz '}'",
"declaracion_interfaz : INTERFACE ID '}'",
"bloque_encabezado_funcion_declaracion_interfaz : encabezado_funcion_declaracion_interfaz",
"bloque_encabezado_funcion_declaracion_interfaz : bloque_encabezado_funcion_declaracion_interfaz encabezado_funcion_declaracion_interfaz",
"encabezado_funcion_declaracion_interfaz : encabezado_funcion ','",
"sentencia_declarativa_clase : tipo lista_de_variables ','",
"sentencia_declarativa_clase : tipo lista_de_variables",
"sentencia_declarativa_clase : declaracion_funcion",
"sentencia_declarativa_clase : ID ','",
"declaracion_clase : CLASS ID '{' bloque_sentencias_declarativas_clase '}'",
"declaracion_clase : CLASS ID IMPLEMENT ID '{' bloque_sentencias_declarativas_clase '}'",
"declaracion_clase : CLASS '{' bloque_sentencias_declarativas_clase '}'",
"declaracion_clase : CLASS IMPLEMENT ID",
"declaracion_clase : CLASS ID IMPLEMENT '{' bloque_sentencias_declarativas_clase '}'",
"declaracion_clase : CLASS IMPLEMENT '{' bloque_sentencias_declarativas_clase '}'",
"declaracion_clase : CLASS ID bloque_sentencias_declarativas_clase '}'",
"declaracion_clase : CLASS ID IMPLEMENT ID bloque_sentencias_declarativas_clase '}'",
"bloque_sentencias_declarativas_clase : sentencia_declarativa_clase",
"bloque_sentencias_declarativas_clase : bloque_sentencias_declarativas_clase sentencia_declarativa_clase",
"declaracion_funcion : encabezado_funcion cuerpo_funcion",
"encabezado_funcion : VOID ID '(' parametro_funcion ')'",
"encabezado_funcion : VOID ID '(' ')'",
"encabezado_funcion : VOID ID '(' parametro_funcion ',' lista_parametros_funcion_exceso ')'",
"encabezado_funcion : VOID ID '(' parametro_funcion lista_parametros_funcion_exceso ')'",
"encabezado_funcion : VOID '(' parametro_funcion ')'",
"encabezado_funcion : VOID '(' ')'",
"encabezado_funcion : VOID ID parametro_funcion ')'",
"encabezado_funcion : VOID ID ')'",
"cuerpo_funcion : '{' sentencias_funcion sentencia_return '}'",
"cuerpo_funcion : '{' sentencia_return '}'",
"cuerpo_funcion : '{' sentencias_funcion sentencia_return sentencias_funcion_inalcanzable '}'",
"cuerpo_funcion : '{' sentencia_return sentencias_funcion_inalcanzable '}'",
"cuerpo_funcion : '{' sentencias_funcion '}'",
"cuerpo_funcion : '{' '}'",
"cuerpo_funcion : sentencias_funcion sentencia_return '}'",
"cuerpo_funcion : sentencia_return '}'",
"cuerpo_funcion : sentencias_funcion sentencia_return sentencias_funcion_inalcanzable '}'",
"cuerpo_funcion : sentencia_return sentencias_funcion_inalcanzable '}'",
"cuerpo_funcion : sentencias_funcion '}'",
"cuerpo_funcion : '}'",
"sentencias_funcion_inalcanzable : sentencia_funcion_inalcanzable",
"sentencias_funcion_inalcanzable : sentencias_funcion_inalcanzable sentencia_funcion_inalcanzable",
"sentencia_funcion_inalcanzable : sentencia_declarativa",
"sentencia_funcion_inalcanzable : sentencia_return",
"sentencia_funcion_inalcanzable : sentencia_ejecutable_funcion",
"lista_parametros_funcion_exceso : parametro_funcion",
"lista_parametros_funcion_exceso : lista_parametros_funcion_exceso ',' parametro_funcion",
"lista_parametros_funcion_exceso : lista_parametros_funcion_exceso parametro_funcion",
"parametro_funcion : tipo ID",
"lista_de_variables : ID",
"lista_de_variables : lista_de_variables ';' ID",
"tipo : INT",
"tipo : ULONG",
"tipo : FLOAT",
"tipo : ID",
"condicion : expresion comparador expresion",
"condicion : expresion comparador",
"condicion : comparador expresion",
"comparador : COMP_MAYOR_IGUAL",
"comparador : COMP_MENOR_IGUAL",
"comparador : COMP_IGUAL",
"comparador : COMP_DISTINTO",
"comparador : '>'",
"comparador : '<'",
"expresion : expresion '+' termino",
"expresion : expresion '-' termino",
"expresion : termino",
"termino : termino '*' factor",
"termino : termino '/' factor",
"termino : factor",
"factor : ID",
"factor : ID OPERADOR_MENOS",
"factor : constante",
"constante : CTE",
"constante : '-' CTE",
};

//#line 348 "./src/compilador/gramatica.y"

public static AnalizadorLexico lexico = null;
public static Logger logger = Logger.getInstance();
public static TablaDeSimbolos ts = TablaDeSimbolos.getInstance();
public static Parser parser = null;
public static int MIN_INT_VALUE = -(int) (Math.pow(2, 15));
public static int MAX_INT_VALUE = (int) (Math.pow(2, 15) - 1);

/** Chequea, para los INT, que el valor positivo no supere el valor maximo */
public void corregirConstantePositivaEntera(String constante) {
	if (constante.contains("_i")) {
		//se recibio un INT con signo positivo
		boolean exceptionOutOfRange = false;
		int cte = 0;
		String constanteValue = constante.toString().split("_")[0];

		try {
			cte = Integer.parseInt(constanteValue);
		} catch (NumberFormatException e) {
			exceptionOutOfRange = true;
		}

		if (cte > MAX_INT_VALUE || exceptionOutOfRange) {
			logger.logWarning("[Parser] Rango invalido para la constante: " + constante + ", se trunca al valor " + MAX_INT_VALUE + "_i");

			ts.swapLexemas(constante, MAX_INT_VALUE + "_i");
		}
	}
}

public void constanteConSigno(String constante) {
	/** Check de float negativos */
	if (constante.contains(".")) {
		String negConstante = "-"+constante;
		ts.swapLexemas(constante, negConstante);
	} else {

		if (constante.contains("_ul")) {
			//se recibio un ULONG con signo negativo
			logger.logWarning("[Parser] No se admiten ULONG con valores negativos: " + "-"+constante + ", se trunca a 0_ul");
		
			ts.swapLexemas(constante, "0_ul");
		} else {
			// se recibio un INT negativo
			String negConstante = "-"+constante;
			boolean exceptionOutOfRange = false;
			int cte = 0;

			String negConstanteValue = negConstante.toString().split("_")[0];

			try {
				cte = Integer.parseInt(negConstanteValue);
			} catch (NumberFormatException e) {
				exceptionOutOfRange = true;
			}

			if (cte < MIN_INT_VALUE || exceptionOutOfRange) {
				logger.logWarning("[Parser] Rango invalido para la constante: " + negConstante + ", se trunca al rango permitido");

				ts.swapLexemas(constante, MIN_INT_VALUE + "_i");
			} else {
				ts.swapLexemas(constante, negConstante);
			}
		}
	}
}	

public int yylex() {
	return lexico.yylex(yylval);
}

public void yyerror(String error) {
	logger.logError(error);
}

public static void main(String[] args) {
	if (args.length == 0) {
		System.err.println("No se especifico ningun archivo de codigo");
	} else {
		String archivo_a_leer = args[0];
		System.out.println("Se va a leer archivo " + archivo_a_leer);
		
		FileReaderHelper fileHelper = new FileReaderHelper();
		
		boolean fileOpenSuccess = fileHelper.open(archivo_a_leer);
		
		if (fileOpenSuccess) {
			parser = new Parser();
			lexico = new AnalizadorLexico(fileHelper);
			
	        parser.run();
	
			String path = new File(archivo_a_leer).getAbsolutePath();
	        
	        Output out = new Output(path);
	        
	        out.saveFile("codigo-lexico.txt", logger.getLexico());
			out.saveFile("codigo-sintactico.txt", logger.getSintactico());
			out.saveFile("tabla-de-simbolos.txt", ts.print());
		}
	}
}
//#line 963 "Parser.java"
//###############################################################
// method: yylexdebug : check lexer state
//###############################################################
void yylexdebug(int state,int ch)
{
String s=null;
  if (ch < 0) ch=0;
  if (ch <= YYMAXTOKEN) //check index bounds
     s = yyname[ch];    //now get it
  if (s==null)
    s = "illegal-symbol";
  debug("state "+state+", reading "+ch+" ("+s+")");
}





//The following are now global, to aid in error reporting
int yyn;       //next next thing to do
int yym;       //
int yystate;   //current parsing state from state table
String yys;    //current token string


//###############################################################
// method: yyparse : parse input and execute indicated items
//###############################################################
int yyparse()
{
boolean doaction;
  init_stacks();
  yynerrs = 0;
  yyerrflag = 0;
  yychar = -1;          //impossible char forces a read
  yystate=0;            //initial state
  state_push(yystate);  //save it
  val_push(yylval);     //save empty value
  while (true) //until parsing is done, either correctly, or w/error
    {
    doaction=true;
    if (yydebug) debug("loop"); 
    //#### NEXT ACTION (from reduction table)
    for (yyn=yydefred[yystate];yyn==0;yyn=yydefred[yystate])
      {
      if (yydebug) debug("yyn:"+yyn+"  state:"+yystate+"  yychar:"+yychar);
      if (yychar < 0)      //we want a char?
        {
        yychar = yylex();  //get next token
        if (yydebug) debug(" next yychar:"+yychar);
        //#### ERROR CHECK ####
        if (yychar < 0)    //it it didn't work/error
          {
          yychar = 0;      //change it to default string (no -1!)
          if (yydebug)
            yylexdebug(yystate,yychar);
          }
        }//yychar<0
      yyn = yysindex[yystate];  //get amount to shift by (shift index)
      if ((yyn != 0) && (yyn += yychar) >= 0 &&
          yyn <= YYTABLESIZE && yycheck[yyn] == yychar)
        {
        if (yydebug)
          debug("state "+yystate+", shifting to state "+yytable[yyn]);
        //#### NEXT STATE ####
        yystate = yytable[yyn];//we are in a new state
        state_push(yystate);   //save it
        val_push(yylval);      //push our lval as the input for next rule
        yychar = -1;           //since we have 'eaten' a token, say we need another
        if (yyerrflag > 0)     //have we recovered an error?
           --yyerrflag;        //give ourselves credit
        doaction=false;        //but don't process yet
        break;   //quit the yyn=0 loop
        }

    yyn = yyrindex[yystate];  //reduce
    if ((yyn !=0 ) && (yyn += yychar) >= 0 &&
            yyn <= YYTABLESIZE && yycheck[yyn] == yychar)
      {   //we reduced!
      if (yydebug) debug("reduce");
      yyn = yytable[yyn];
      doaction=true; //get ready to execute
      break;         //drop down to actions
      }
    else //ERROR RECOVERY
      {
      if (yyerrflag==0)
        {
        yyerror("syntax error");
        yynerrs++;
        }
      if (yyerrflag < 3) //low error count?
        {
        yyerrflag = 3;
        while (true)   //do until break
          {
          if (stateptr<0)   //check for under & overflow here
            {
            yyerror("stack underflow. aborting...");  //note lower case 's'
            return 1;
            }
          yyn = yysindex[state_peek(0)];
          if ((yyn != 0) && (yyn += YYERRCODE) >= 0 &&
                    yyn <= YYTABLESIZE && yycheck[yyn] == YYERRCODE)
            {
            if (yydebug)
              debug("state "+state_peek(0)+", error recovery shifting to state "+yytable[yyn]+" ");
            yystate = yytable[yyn];
            state_push(yystate);
            val_push(yylval);
            doaction=false;
            break;
            }
          else
            {
            if (yydebug)
              debug("error recovery discarding state "+state_peek(0)+" ");
            if (stateptr<0)   //check for under & overflow here
              {
              yyerror("Stack underflow. aborting...");  //capital 'S'
              return 1;
              }
            state_pop();
            val_pop();
            }
          }
        }
      else            //discard this token
        {
        if (yychar == 0)
          return 1; //yyabort
        if (yydebug)
          {
          yys = null;
          if (yychar <= YYMAXTOKEN) yys = yyname[yychar];
          if (yys == null) yys = "illegal-symbol";
          debug("state "+yystate+", error recovery discards token "+yychar+" ("+yys+")");
          }
        yychar = -1;  //read another
        }
      }//end error recovery
    }//yyn=0 loop
    if (!doaction)   //any reason not to proceed?
      continue;      //skip action
    yym = yylen[yyn];          //get count of terminals on rhs
    if (yydebug)
      debug("state "+yystate+", reducing "+yym+" by rule "+yyn+" ("+yyrule[yyn]+")");
    if (yym>0)                 //if count of rhs not 'nil'
      yyval = val_peek(yym-1); //get current semantic value
    yyval = dup_yyval(yyval); //duplicate yyval if ParserVal is used as semantic value
    switch(yyn)
      {
//########## USER-SUPPLIED ACTIONS ##########
case 1:
//#line 17 "./src/compilador/gramatica.y"
{ logger.logSuccess("[Parser] Programa correcto detectado"); }
break;
case 2:
//#line 18 "./src/compilador/gramatica.y"
{ logger.logError("[Parser] Se esperaba simbolo '{' al principio del programa"); }
break;
case 3:
//#line 19 "./src/compilador/gramatica.y"
{ logger.logError("[Parser] Se esperaba simbolo '}' al final del programa"); }
break;
case 4:
//#line 20 "./src/compilador/gramatica.y"
{ logger.logError("[Parser] Programa vacio"); }
break;
case 5:
//#line 21 "./src/compilador/gramatica.y"
{ logger.logError("[Parser] Programa vacio"); }
break;
case 15:
//#line 40 "./src/compilador/gramatica.y"
{ logger.logError("[Parser] Sentencia RETURN fuera de funcion"); }
break;
case 26:
//#line 63 "./src/compilador/gramatica.y"
{ logger.logError("[Parser] Se esperaba ',' luego del RETURN"); }
break;
case 27:
//#line 67 "./src/compilador/gramatica.y"
{ logger.logSuccess("[Parser] Sentencia iterativa DO WHILE detectada"); }
break;
case 28:
//#line 68 "./src/compilador/gramatica.y"
{ logger.logError("[Parser] Se esperaba ',' luego de sentencia DO WHILE"); }
break;
case 29:
//#line 69 "./src/compilador/gramatica.y"
{ logger.logError("[Parser] Se esperaban sentencias ejecutables en sentencia DO WHILE"); }
break;
case 30:
//#line 70 "./src/compilador/gramatica.y"
{ logger.logError("[Parser] Se esperaba condicion en sentencia DO WHILE"); }
break;
case 31:
//#line 71 "./src/compilador/gramatica.y"
{ logger.logError("[Parser] Se esperaba WHILE en sentencia DO WHILE"); }
break;
case 32:
//#line 72 "./src/compilador/gramatica.y"
{ logger.logError("[Parser] Se esperaban sentencias ejecutables en sentencia DO WHILE"); }
break;
case 33:
//#line 73 "./src/compilador/gramatica.y"
{ logger.logError("[Parser] Se esperaba condicion en sentencia DO WHILE"); }
break;
case 34:
//#line 74 "./src/compilador/gramatica.y"
{ logger.logError("[Parser] Se esperaban sentencias ejecutables en sentencia DO WHILE"); }
break;
case 35:
//#line 75 "./src/compilador/gramatica.y"
{ logger.logError("[Parser] Se esperaban sentencias ejecutables en sentencia DO WHILE"); }
break;
case 36:
//#line 76 "./src/compilador/gramatica.y"
{ logger.logError("[Parser] Se esperaban sentencias ejecutables en sentencia DO WHILE"); }
break;
case 37:
//#line 77 "./src/compilador/gramatica.y"
{ logger.logError("[Parser] Se esperaban sentencias ejecutables en sentencia DO WHILE"); }
break;
case 38:
//#line 81 "./src/compilador/gramatica.y"
{ logger.logSuccess("[Parser] Sentencia iterativa DO WHILE detectada"); }
break;
case 39:
//#line 82 "./src/compilador/gramatica.y"
{ logger.logError("[Parser] Se esperaba ',' luego de sentencia DO WHILE"); }
break;
case 40:
//#line 83 "./src/compilador/gramatica.y"
{ logger.logError("[Parser] Se esperaban sentencias ejecutables en sentencia DO WHILE"); }
break;
case 41:
//#line 84 "./src/compilador/gramatica.y"
{ logger.logError("[Parser] Se esperaba condicion en sentencia DO WHILE"); }
break;
case 42:
//#line 85 "./src/compilador/gramatica.y"
{ logger.logError("[Parser] Se esperaba WHILE en sentencia DO WHILE"); }
break;
case 43:
//#line 86 "./src/compilador/gramatica.y"
{ logger.logError("[Parser] Se esperaban sentencias ejecutables en sentencia DO WHILE"); }
break;
case 44:
//#line 87 "./src/compilador/gramatica.y"
{ logger.logError("[Parser] Se esperaba condicion en sentencia DO WHILE"); }
break;
case 45:
//#line 88 "./src/compilador/gramatica.y"
{ logger.logError("[Parser] Se esperaban sentencias ejecutables en sentencia DO WHILE"); }
break;
case 46:
//#line 89 "./src/compilador/gramatica.y"
{ logger.logError("[Parser] Se esperaban sentencias ejecutables en sentencia DO WHILE"); }
break;
case 47:
//#line 90 "./src/compilador/gramatica.y"
{ logger.logError("[Parser] Se esperaban sentencias ejecutables en sentencia DO WHILE"); }
break;
case 48:
//#line 91 "./src/compilador/gramatica.y"
{ logger.logError("[Parser] Se esperaban sentencias ejecutables en sentencia DO WHILE"); }
break;
case 49:
//#line 95 "./src/compilador/gramatica.y"
{ logger.logSuccess("[Parser] Sentencia seleccion IF ELSE detectada"); }
break;
case 50:
//#line 96 "./src/compilador/gramatica.y"
{ logger.logSuccess("[Parser] Sentencia seleccion IF sin ELSE detectada"); }
break;
case 51:
//#line 97 "./src/compilador/gramatica.y"
{ logger.logError("[Parser] Se esperaba ',' luego de sentencia IF ELSE"); }
break;
case 52:
//#line 98 "./src/compilador/gramatica.y"
{ logger.logError("[Parser] Se esperaba ',' luego de sentencia IF sin ELSE"); }
break;
case 53:
//#line 99 "./src/compilador/gramatica.y"
{ logger.logError("[Parser] Se esperaba condicion en sentencia IF ELSE"); }
break;
case 54:
//#line 100 "./src/compilador/gramatica.y"
{ logger.logError("[Parser] Se esperaba condicion en sentencia IF"); }
break;
case 55:
//#line 101 "./src/compilador/gramatica.y"
{ logger.logError("[Parser] Se esperaban sentencias ejecutables en sentencia IF ELSE"); }
break;
case 56:
//#line 102 "./src/compilador/gramatica.y"
{ logger.logError("[Parser] Se esperaban sentencias ejecutables en sentencia IF ELSE"); }
break;
case 57:
//#line 103 "./src/compilador/gramatica.y"
{ logger.logError("[Parser] Se esperaban sentencias ejecutables en sentencia IF"); }
break;
case 58:
//#line 107 "./src/compilador/gramatica.y"
{ logger.logSuccess("[Parser] Sentencia seleccion IF ELSE detectada"); }
break;
case 59:
//#line 108 "./src/compilador/gramatica.y"
{ logger.logSuccess("[Parser] Sentencia seleccion IF sin ELSE detectada"); }
break;
case 60:
//#line 109 "./src/compilador/gramatica.y"
{ logger.logError("[Parser] Se esperaba ',' luego de sentencia IF ELSE"); }
break;
case 61:
//#line 110 "./src/compilador/gramatica.y"
{ logger.logError("[Parser] Se esperaba ',' luego de sentencia IF sin ELSE"); }
break;
case 62:
//#line 111 "./src/compilador/gramatica.y"
{ logger.logError("[Parser] Se esperaba condicion en sentencia IF ELSE"); }
break;
case 63:
//#line 112 "./src/compilador/gramatica.y"
{ logger.logError("[Parser] Se esperaba condicion en sentencia IF"); }
break;
case 64:
//#line 113 "./src/compilador/gramatica.y"
{ logger.logError("[Parser] Se esperaban sentencias ejecutables en sentencia IF ELSE"); }
break;
case 65:
//#line 114 "./src/compilador/gramatica.y"
{ logger.logError("[Parser] Se esperaban sentencias ejecutables en sentencia IF ELSE"); }
break;
case 66:
//#line 115 "./src/compilador/gramatica.y"
{ logger.logError("[Parser] Se esperaban sentencias ejecutables en sentencia IF"); }
break;
case 69:
//#line 121 "./src/compilador/gramatica.y"
{ logger.logError("[Parser] Se esperaban sentencias ejecutables dentro del bloque"); }
break;
case 70:
//#line 122 "./src/compilador/gramatica.y"
{ logger.logError("[Parser] No se permiten declaraciones de variables dentro de bloque de sentencias ejecutables"); }
break;
case 73:
//#line 128 "./src/compilador/gramatica.y"
{ logger.logError("[Parser] No se permiten declaraciones de variables dentro de bloque de sentencias ejecutables"); }
break;
case 77:
//#line 132 "./src/compilador/gramatica.y"
{ logger.logError("[Parser] Se esperaban sentencias ejecutables en bloque de sentencias ejecutables"); }
break;
case 78:
//#line 136 "./src/compilador/gramatica.y"
{ logger.logError("[Parser] Codigo inalcanzable luego del RETURN, se ignorara"); }
break;
case 79:
//#line 137 "./src/compilador/gramatica.y"
{ logger.logError("[Parser] Codigo inalcanzable luego del RETURN, se ignorara"); }
break;
case 84:
//#line 148 "./src/compilador/gramatica.y"
{ logger.logError("[Parser] No se aceptan declaraciones de variables en sentencias ejecutables"); }
break;
case 85:
//#line 149 "./src/compilador/gramatica.y"
{ logger.logError("[Parser] No se aceptan declaraciones de variables en sentencias ejecutables"); }
break;
case 88:
//#line 155 "./src/compilador/gramatica.y"
{ logger.logError("[Parser] No se aceptan declaraciones de variables en sentencias ejecutables"); }
break;
case 89:
//#line 156 "./src/compilador/gramatica.y"
{ logger.logError("[Parser] No se aceptan declaraciones de variables en sentencias ejecutables"); }
break;
case 90:
//#line 160 "./src/compilador/gramatica.y"
{ logger.logSuccess("[Parser] Sentencia PRINT detectada"); }
break;
case 91:
//#line 161 "./src/compilador/gramatica.y"
{ logger.logError("[Parser] Se esperaba un simbolo ',' en Sentencia PRINT"); }
break;
case 92:
//#line 162 "./src/compilador/gramatica.y"
{ logger.logError("[Parser] Se esperaba CADENA en Sentencia PRINT"); }
break;
case 93:
//#line 163 "./src/compilador/gramatica.y"
{ logger.logError("[Parser] Se esperaba una CADENA y se encontro un IDENTIFICADOR en sentencia PRINT"); }
break;
case 94:
//#line 164 "./src/compilador/gramatica.y"
{ logger.logError("[Parser] Se esperaba un simbolo ',' en sentencia PRINT"); }
break;
case 95:
//#line 168 "./src/compilador/gramatica.y"
{ logger.logSuccess("[Parser] Invocacion de funcion con expresion detectada"); }
break;
case 96:
//#line 169 "./src/compilador/gramatica.y"
{ logger.logSuccess("[Parser] Invocacion de funcion sin expresion detectada"); }
break;
case 97:
//#line 170 "./src/compilador/gramatica.y"
{ logger.logError("[Parser] Invocacion de funcion con multiples expresiones detectada, se preserva solo la primera expresion"); }
break;
case 98:
//#line 171 "./src/compilador/gramatica.y"
{ logger.logError("[Parser] Se esperaba un simbolo ',' en invocacion de funcion"); }
break;
case 99:
//#line 172 "./src/compilador/gramatica.y"
{ logger.logError("[Parser] Se esperaba un simbolo ',' en invocacion de funcion"); }
break;
case 100:
//#line 173 "./src/compilador/gramatica.y"
{ logger.logError("[Parser] Se esperaba un simbolo ',' en invocacion de funcion"); }
break;
case 103:
//#line 182 "./src/compilador/gramatica.y"
{ logger.logSuccess("[Parser] Asignacion detectada"); }
break;
case 104:
//#line 183 "./src/compilador/gramatica.y"
{ logger.logError("[Parser] Se esperaba un simbolo ',' en sentenecia asignacion"); }
break;
case 105:
//#line 184 "./src/compilador/gramatica.y"
{ logger.logError("[Parser] Se esperaba expresion del lado derecho en sentenecia asignacion"); }
break;
case 112:
//#line 200 "./src/compilador/gramatica.y"
{ logger.logSuccess("[Parser] Declaracion de lista de variables detectado"); }
break;
case 113:
//#line 201 "./src/compilador/gramatica.y"
{ logger.logError("[Parser] Se esperaba un simbolo ',' en sentenecia declaracion de variables"); }
break;
case 114:
//#line 202 "./src/compilador/gramatica.y"
{ logger.logError("[Parser] Se esperaba una lista de variables en sentenecia declaracion de variables"); }
break;
case 115:
//#line 206 "./src/compilador/gramatica.y"
{ logger.logSuccess("[Parser] Declaracion de INTERFACE detectada"); }
break;
case 116:
//#line 207 "./src/compilador/gramatica.y"
{ logger.logError("[Parser] Se esperaba un identificador en declaracion de INTERFACE"); }
break;
case 117:
//#line 208 "./src/compilador/gramatica.y"
{ logger.logError("[Parser] Se esperaba un identificador en declaracion de INTERFACE"); }
break;
case 118:
//#line 209 "./src/compilador/gramatica.y"
{ logger.logError("[Parser] Se esperaba un identificador en declaracion de INTERFACE"); }
break;
case 119:
//#line 210 "./src/compilador/gramatica.y"
{ logger.logError("[Parser] Se esperaba un simbolo '{' en declaracion de INTERFACE"); }
break;
case 120:
//#line 211 "./src/compilador/gramatica.y"
{ logger.logError("[Parser] Se esperaba un simbolo '{' en declaracion de INTERFACE"); }
break;
case 124:
//#line 224 "./src/compilador/gramatica.y"
{ logger.logSuccess("[Parser] Declaracion de lista de variables en CLASS detectado"); }
break;
case 125:
//#line 225 "./src/compilador/gramatica.y"
{ logger.logError("[Parser] Se esperaba un simbolo ',' en delcaracion de lista de variables en CLASS"); }
break;
case 128:
//#line 231 "./src/compilador/gramatica.y"
{ logger.logSuccess("[Parser] Declaracion de clase CLASS detectado"); }
break;
case 129:
//#line 232 "./src/compilador/gramatica.y"
{ logger.logSuccess("[Parser] Declaracion de clase CLASS detectado"); }
break;
case 130:
//#line 233 "./src/compilador/gramatica.y"
{ logger.logError("[Parser] Se esperaba un identificador en declaracion de clase"); }
break;
case 131:
//#line 234 "./src/compilador/gramatica.y"
{ logger.logError("[Parser] Se esperaba un identificador en declaracion de clase"); }
break;
case 132:
//#line 235 "./src/compilador/gramatica.y"
{ logger.logError("[Parser] Se esperaba un identificador en IMPLEMENT de clase"); }
break;
case 133:
//#line 236 "./src/compilador/gramatica.y"
{ logger.logError("[Parser] Se esperaba un identificador en declaracion de clase"); }
break;
case 134:
//#line 237 "./src/compilador/gramatica.y"
{ logger.logError("[Parser] Se esperaba un simbolo '{' en declaracion de clase"); }
break;
case 135:
//#line 238 "./src/compilador/gramatica.y"
{ logger.logError("[Parser] Se esperaba un simbolo '{' en declaracion de clase"); }
break;
case 138:
//#line 247 "./src/compilador/gramatica.y"
{ logger.logSuccess("[Parser] Declaracion de funcion detectado"); }
break;
case 141:
//#line 253 "./src/compilador/gramatica.y"
{ logger.logError("[Parser] Encabezado de funcion con mas de 1 parametro detectado, se preserva solo el primer parametro"); }
break;
case 142:
//#line 254 "./src/compilador/gramatica.y"
{ logger.logError("[Parser] Encabezado de funcion con mas de 1 parametro detectado, se preserva solo el primer parametro"); }
break;
case 143:
//#line 255 "./src/compilador/gramatica.y"
{ logger.logError("[Parser] Se esperaba un identificador en el encabezado de la funcion"); }
break;
case 144:
//#line 256 "./src/compilador/gramatica.y"
{ logger.logError("[Parser] Se esperaba un identificador en el encabezado de la funcion"); }
break;
case 145:
//#line 257 "./src/compilador/gramatica.y"
{ logger.logError("[Parser] Se esperaba un simbolo '(' en el encabezado de la funcion"); }
break;
case 146:
//#line 258 "./src/compilador/gramatica.y"
{ logger.logError("[Parser] Se esperaba un simbolo '(' en el encabezado de la funcion"); }
break;
case 151:
//#line 266 "./src/compilador/gramatica.y"
{ logger.logError("[Parser] Se esperaba una sentencia RETURN al final de la funcion"); }
break;
case 152:
//#line 267 "./src/compilador/gramatica.y"
{ logger.logError("[Parser] Se esperaba una sentencia RETURN al final de la funcion"); }
break;
case 153:
//#line 268 "./src/compilador/gramatica.y"
{ logger.logError("[Parser] Se esperaba un simbolo '{' en el cuerpo de la funcion"); }
break;
case 154:
//#line 269 "./src/compilador/gramatica.y"
{ logger.logError("[Parser] Se esperaba un simbolo '{' en el cuerpo de la funcion"); }
break;
case 155:
//#line 270 "./src/compilador/gramatica.y"
{ logger.logError("[Parser] Se esperaba un simbolo '{' en el cuerpo de la funcion"); }
break;
case 156:
//#line 271 "./src/compilador/gramatica.y"
{ logger.logError("[Parser] Se esperaba un simbolo '{' en el cuerpo de la funcion"); }
break;
case 157:
//#line 272 "./src/compilador/gramatica.y"
{ logger.logError("[Parser] Se esperaba un simbolo '{' en el cuerpo de la funcion"); }
break;
case 158:
//#line 273 "./src/compilador/gramatica.y"
{ logger.logError("[Parser] Se esperaba un simbolo '{' en el cuerpo de la funcion"); }
break;
case 159:
//#line 277 "./src/compilador/gramatica.y"
{ logger.logError("[Parser] Codigo inalcanzable luego del RETURN, se ignorara"); }
break;
case 160:
//#line 278 "./src/compilador/gramatica.y"
{ logger.logError("[Parser] Codigo inalcanzable luego del RETURN, se ignorara"); }
break;
case 175:
//#line 311 "./src/compilador/gramatica.y"
{ logger.logError("[Parser] Se esperaba una expresion del lado derecho de la comparacion"); }
break;
case 176:
//#line 312 "./src/compilador/gramatica.y"
{ logger.logError("[Parser] Se esperaba una expresion del lado izquierdo de la comparacion"); }
break;
case 192:
//#line 343 "./src/compilador/gramatica.y"
{ corregirConstantePositivaEntera(val_peek(0).sval); }
break;
case 193:
//#line 344 "./src/compilador/gramatica.y"
{ constanteConSigno(val_peek(0).sval); }
break;
//#line 1556 "Parser.java"
//########## END OF USER-SUPPLIED ACTIONS ##########
    }//switch
    //#### Now let's reduce... ####
    if (yydebug) debug("reduce");
    state_drop(yym);             //we just reduced yylen states
    yystate = state_peek(0);     //get new state
    val_drop(yym);               //corresponding value drop
    yym = yylhs[yyn];            //select next TERMINAL(on lhs)
    if (yystate == 0 && yym == 0)//done? 'rest' state and at first TERMINAL
      {
      if (yydebug) debug("After reduction, shifting from state 0 to state "+YYFINAL+"");
      yystate = YYFINAL;         //explicitly say we're done
      state_push(YYFINAL);       //and save it
      val_push(yyval);           //also save the semantic value of parsing
      if (yychar < 0)            //we want another character?
        {
        yychar = yylex();        //get next character
        if (yychar<0) yychar=0;  //clean, if necessary
        if (yydebug)
          yylexdebug(yystate,yychar);
        }
      if (yychar == 0)          //Good exit (if lex returns 0 ;-)
         break;                 //quit the loop--all DONE
      }//if yystate
    else                        //else not done yet
      {                         //get next state and push, for next yydefred[]
      yyn = yygindex[yym];      //find out where to go
      if ((yyn != 0) && (yyn += yystate) >= 0 &&
            yyn <= YYTABLESIZE && yycheck[yyn] == yystate)
        yystate = yytable[yyn]; //get new state
      else
        yystate = yydgoto[yym]; //else go to new defred
      if (yydebug) debug("after reduction, shifting from state "+state_peek(0)+" to state "+yystate+"");
      state_push(yystate);     //going again, so push state & val...
      val_push(yyval);         //for next action
      }
    }//main loop
  return 0;//yyaccept!!
}
//## end of method parse() ######################################



//## run() --- for Thread #######################################
/**
 * A default run method, used for operating this parser
 * object in the background.  It is intended for extending Thread
 * or implementing Runnable.  Turn off with -Jnorun .
 */
public void run()
{
  yyparse();
}
//## end of method run() ########################################



//## Constructors ###############################################
/**
 * Default constructor.  Turn off with -Jnoconstruct .

 */
public Parser()
{
  //nothing to do
}


/**
 * Create a parser, setting the debug to true or false.
 * @param debugMe true for debugging, false for no debug.
 */
public Parser(boolean debugMe)
{
  yydebug=debugMe;
}
//###############################################################



}
//################### END OF CLASS ##############################
